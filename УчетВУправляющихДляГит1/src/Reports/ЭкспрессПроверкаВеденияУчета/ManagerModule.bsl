#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


# Область СлужебныйПрограммныйИнтерфейс

Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	ТаблицаПроверок = СоздатьТаблицуПроверок();
	ЗаполнитьОписанияПроверок(ТаблицаПроверок, ПараметрыОтчета);
	
	ВыполнитьВсеПроверки(ТаблицаПроверок, ПараметрыОтчета);
	
	ДокументРезультат = ЗаполнитьОтчетОРезультатахПроверки(ТаблицаПроверок, ПараметрыОтчета);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", ДокументРезультат);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
							
КонецПроцедуры 

// Проверяет наличие счетов-фактур полученных.
// Входной параметр ПараметрыОтчет структура с полями
// НачалоПериода,КонецПериода, Организация
Функция ПроверитьНаличиеСчетовФактурПолученных(ПараметрыОтчета) Экспорт

	ПараметрыПоискаСчетовФактур = ПараметрыПоискаСчетовФактур(ПараметрыОтчета);
	ТаблицаОшибок = УчетНДСПереопределяемый.ОпределитьНаличиеСчетовФактурПолученных(ПараметрыПоискаСчетовФактур);
	
	Возврат ТаблицаОшибок;
КонецФункции

# КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования отчета


Функция СоздатьТаблицуПроверок()

	ТаблицаПроверок = Новый ТаблицаЗначений;
	
	ТаблицаПроверок.Колонки.Добавить("Идентификатор");
	ТаблицаПроверок.Колонки.Добавить("ИдентификаторРаздела");
	ТаблицаПроверок.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТаблицаПроверок.Колонки.Добавить("Наименование");
	ТаблицаПроверок.Колонки.Добавить("ПредметКонтроля");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультатаНетОшибок");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультатаОшибка");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультатаНеВыполнена");
	ТаблицаПроверок.Колонки.Добавить("ПричиныОшибок");
	ТаблицаПроверок.Колонки.Добавить("Рекомендации");
	ТаблицаПроверок.Колонки.Добавить("ГиперссылкаРекомендаций");
	// В этих колонках хранятся результаты выполнения проверки
	ТаблицаПроверок.Колонки.Добавить("ПроверкаВыполнена", Новый ОписаниеТипов("Булево"));
	ТаблицаПроверок.Колонки.Добавить("ОбнаруженыОшибки",  Новый ОписаниеТипов("Булево"));
	ТаблицаПроверок.Колонки.Добавить("ТаблицаОшибок"); // Таблица значений для детального отчета об ошибках
	// Значения колонок КомментарийРезультата, ПричиныОшибокРезультата , РекомендацииРезультата могут быть переопределены в алгоритме проверки
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультата");
	ТаблицаПроверок.Колонки.Добавить("ПричиныОшибокРезультата");
	ТаблицаПроверок.Колонки.Добавить("РекомендацииРезультата");
	ТаблицаПроверок.Колонки.Добавить("РасшифровкаРезультата");
	ТаблицаПроверок.Колонки.Добавить("ГиперссылкаРезультата");

	Возврат ТаблицаПроверок;
	
КонецФункции

Процедура ЗаполнитьОписанияПроверок(ТаблицаПроверок, ПараметрыОтчета)
	
	МакетПравил   = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("ОписаниеПроверок");
	ОбластьПравил = МакетПравил.Область("Правила");
	
	НомПервойСтрокиПравил    = ОбластьПравил.Верх;
	НомПоследнейСтрокиПравил = ОбластьПравил.Низ;
	
	ИдентификаторРаздела = "";
	
	Для НомСтроки = НомПервойСтрокиПравил По НомПоследнейСтрокиПравил Цикл
		ОбластьСтроки    = МакетПравил.Область(НомСтроки, , НомСтроки, );
		ИмяОбластиСтроки = ОбластьСтроки.Имя;
		// Строки, для которых не задано имя области, пропускаем 
		Если ИмяОбластиСтроки = "R"+Формат(НомСтроки, "ЧГ=") Тогда
			Продолжить;
		КонецЕсли;
		// Строки проверок, для которых были сняты флажки, пропускаем 
		Если ПараметрыОтчета.ВыполняемыеПроверки.Найти(ИмяОбластиСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоГруппа = МакетПравил.Область(ИмяОбластиСтроки + "|ЭтоГруппа").Текст = "1";
		
		НоваяСтрока = ТаблицаПроверок.Добавить();
		НоваяСтрока.Идентификатор   = ИмяОбластиСтроки;
		НоваяСтрока.ЭтоГруппа       = ЭтоГруппа;
		НоваяСтрока.Наименование    = МакетПравил.Область(ИмяОбластиСтроки + "|Наименование").Текст;
		НоваяСтрока.ПредметКонтроля = МакетПравил.Область(ИмяОбластиСтроки + "|ПредметКонтроля").Текст;
		Если ЭтоГруппа Тогда
			ИдентификаторРаздела = ИмяОбластиСтроки;
		Иначе
			НоваяСтрока.ИдентификаторРаздела             = ИдентификаторРаздела;
			НоваяСтрока.КомментарийРезультатаНетОшибок   = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНетОшибок").Текст;
			НоваяСтрока.КомментарийРезультатаОшибка      = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаОшибка").Текст;
			НоваяСтрока.КомментарийРезультатаНеВыполнена = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНеВыполнена").Текст;
			НоваяСтрока.ПричиныОшибок                    = МакетПравил.Область(ИмяОбластиСтроки + "|ПричиныОшибок").Текст;
			НоваяСтрока.Рекомендации                     = МакетПравил.Область(ИмяОбластиСтроки + "|Рекомендации").Текст;
			НоваяСтрока.ГиперссылкаРекомендаций			 = МакетПравил.Область(ИмяОбластиСтроки + "|ГиперссылкаРекомендаций").Текст;
			НоваяСтрока.РасшифровкаРезультата 		 	 = ИмяОбластиСтроки;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьВсеПроверки(ТаблицаПроверок, ПараметрыОтчета)

	ЕстьДоступ = Истина;

	МассивДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Если МассивДоступныхОрганизаций.Найти(ПараметрыОтчета.Организация) =  Неопределено Тогда
		// Пользователь не может просматривать данные по выбранной организации.
		ЕстьДоступ = Ложь;
		ТекстПричиныОшибокРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нет доступа к данным организации %1'"),
			ПараметрыОтчета.Организация);
	КонецЕсли;
	
	// Проверки выполняются строго по данным выбранной организации,
	// поэтому выполняем их в привилегированном режиме 
	// без необходимости наложения отборов с помощью RLS.
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого СтрокаПроверки Из ТаблицаПроверок Цикл
		Если ЕстьДоступ Тогда
			ВыполнитьПроверку(СтрокаПроверки, ПараметрыОтчета);
		Иначе
			СтрокаПроверки.ПроверкаВыполнена 	= Истина;
			СтрокаПроверки.ОбнаруженыОшибки 	= Истина;
			СтрокаПроверки.КомментарийРезультата 	= НСтр("ru = 'У пользователя недостаточно прав на исполнение операции над базой данных'");
			СтрокаПроверки.ПричиныОшибокРезультата 	= ТекстПричиныОшибокРезультата;
			СтрокаПроверки.РекомендацииРезультата 	= НСтр("ru = 'Обратитесь к администратору базы данных'");
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Заполняем признак выполненности и наличие ошибок по группам проверок
	// Группа считается выполненной, если в ней есть хотя бы одна выполненная проверка
	// Группа считается выполненной с ошибками, если в ней есть хотя бы одна выполненная проверка с ошибками
	ТаблицаПроверок.Колонки.Добавить("КолОшибок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6,0))); 
	СтрокиГрупп = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина));
	Для каждого СтрокаГруппы Из СтрокиГрупп Цикл
		ВыполненныеПроверки = ТаблицаПроверок.НайтиСтроки(
			Новый Структура("ИдентификаторРаздела,ПроверкаВыполнена", СтрокаГруппы.Идентификатор, Истина));
		СтрокаГруппы.ПроверкаВыполнена = ВыполненныеПроверки.Количество() > 0;
		ПроверкиСОшибками = ТаблицаПроверок.НайтиСтроки(
			Новый Структура("ИдентификаторРаздела,ОбнаруженыОшибки", СтрокаГруппы.Идентификатор, Истина));
		СтрокаГруппы.КолОшибок = ПроверкиСОшибками.Количество();
		СтрокаГруппы.ОбнаруженыОшибки = СтрокаГруппы.ПроверкаВыполнена И ПроверкиСОшибками.Количество() > 0;
	КонецЦикла;
		
КонецПроцедуры

Процедура ВыполнитьПроверку(СтрокаПроверки, ПараметрыОтчета)
	
	Если СтрокаПроверки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Неопределено;
	
	// Раздел "Учетная политика"
	Если СтрокаПроверки.Идентификатор = "НаличиеУчП" Тогда
		Результат = ПроверитьНаличиеУчП(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НеизменностьУчП_БУ" Тогда
		Результат = ПроверитьНеизменностьУчП_БУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НеизменностьУчП_НУ" Тогда
		Результат = ПроверитьНеизменностьУчП_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОценкаРозницы" Тогда
		Результат = ПроверитьОценкаРозницы(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ДиректКостингИСчет26" Тогда
		Результат = ПроверитьДиректКостингИСчет26(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПрименениеПБУ18Счета" Тогда
		Результат = ПроверитьПрименениеПБУ18Счета(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетНУприУСН" Тогда
		Результат = ПроверитьНетНУприУСН(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетЕНВД" Тогда
		Результат = ПроверитьНетЕНВД(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НаличиеСложногоНДС" Тогда
		Результат = ПроверитьНаличиеСложногоНДС(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НаличиеСведенийОбОтветственныхЛицах" Тогда
		Результат = ПроверитьНаличиеСведенийОбОтветственныхЛицах(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	// Раздел "Анализ состояния бухгалтерского учета"
	Если СтрокаПроверки.Идентификатор = "СоответствиеПланаСчетовТиповому" Тогда
		Результат = ПроверитьСоответствиеПланаСчетовТиповому(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОстатковПоСчету000" Тогда
		Результат = ПроверитьНетОстатковПоСчету000(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОстатковПоСчетамПодлежащимЗакрытиюТипа1" Тогда
		Результат = ПроверитьНетОстатковПоСчетамПодлежащимЗакрытиюПоТипуЗакрытия(СтрокаПроверки, ПараметрыОтчета, 1);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОстатковПоСчетамПодлежащимЗакрытиюТипа2" Тогда
		Результат = ПроверитьНетОстатковПоСчетамПодлежащимЗакрытиюПоТипуЗакрытия(СтрокаПроверки, ПараметрыОтчета, 2);
	ИначеЕсли СтрокаПроверки.Идентификатор = "СоответствиеОстатковИАктивностиСчетов" Тогда
		Результат = ПроверитьСоответствиеОстатковИАктивностиСчетов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПереоценкаВалютыНеУказанДокументРасчетовСКонтрагентом" Тогда
		Результат = ПроверитьПереоценкаВалютыПустойДокументРасчетов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПереоценкаВалютыНеУказанаВалюта" Тогда
		Результат = ПроверитьПереоценкаВалютыПустаяВалюта(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПереоценкаВалюты" Тогда
		Результат = ПроверитьПереоценкаВалюты(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "КорректныеКорреспондецииСчетов" Тогда
		Результат = ПроверитьКорректныеКорреспондецииСчетов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаточнаяСтоимостьОС" Тогда
		Результат = ПроверитьОстаточнаяСтоимостьОС(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОкруглениеНачисленияНалогов" Тогда
		Результат = ПроверитьОкруглениеНачисленияНалогов(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	// Раздел "Кассовые операции
	Если СтрокаПроверки.Идентификатор = "НепроведенныеПКО_РКО" Тогда
		Результат = ПроверитьНепроведенныеПКО_РКО(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "МинусыПоКассе" Тогда
		Результат = ПроверитьМинусыПоКассе(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЛимитКассы" Тогда
		Результат = ПроверитьЛимитКассы(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЛимитРасчетовСКонтрагентами" Тогда
		Результат = ПроверитьЛимитРасчетовСКонтрагентами(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НумерацияПКО" Тогда
		Результат = ПроверитьНумерациюПКО(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НумерацияРКО" Тогда
		Результат = ПроверитьНумерациюРКО(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ВыдачаПодотчетПослеОтчета" Тогда
		Результат = ПроверитьВыдачаПодотчетПослеОтчета(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ДвижениеВнутри71Счета" Тогда
		Результат = ПроверитьДвижениеВнутри71Счета(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПодотчетТолькоРаботникам" Тогда
		Результат = ПроверитьПодотчетТолькоРаботникам(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;

	// Раздел "Ведение книги продаж по НДС"
	Если СтрокаПроверки.Идентификатор = "ПолнотаСФПоРеализации" Тогда
		Результат = ПроверитьПолнотаСФПоРеализации(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "СвоевременностьСФПоРеализации" Тогда
		Результат = ПроверитьСвоевременностьСФПоРеализации(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "Соответствие90_НДС_БУ" Тогда
		Результат = ПроверитьСоответствие90_НДС_БУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "Соответствие91_НДС_БУ" Тогда
		Результат = ПроверитьСоответствие91_НДС_БУ(СтрокаПроверки, ПараметрыОтчета)
	ИначеЕсли СтрокаПроверки.Идентификатор = "Соответствие90и91_НДС_НУ" Тогда
		Результат = ПроверитьСоответствие90и91_НДС_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЕстьЗаписиКнигиПродаж2012" Тогда
		Результат = ПроверитьЕстьЗаписиКнигиПродаж2012(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НачислениеНДСсАвансов" Тогда
		Результат = ПроверитьНачислениеНДСсАвансов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НДСсАвансовБУ_НУ" Тогда
		Результат = ПроверитьНДСсАвансовБУ_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПолнотаНДСАгенты" Тогда
		Результат = ПроверитьПолнотаНДСАгенты(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НДСсСМРхозспособомВКнигеПродаж" Тогда
		Результат = ПроверитьНДСсСМРхозспособомВКнигеПродаж(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НумерацияСФ" Тогда
		Результат = ПроверитьНумерациюСФ(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;

	// Раздел "Ведение книги покупок по НДС"
	Если СтрокаПроверки.Идентификатор = "ПолнотаСФПолученных" Тогда
		Результат = ПроверитьПолнотаСФПолученных(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЕстьРаспределениеКосвРасходов" Тогда
		Результат = ПроверитьЕстьРаспределениеКосвРасходов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ВсеКосвРасходыРаспределены" Тогда
		Результат = ПроверитьВсеКосвРасходыРаспределены(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЕстьЗаписиКнигиПокупок" Тогда
		Результат = ПроверитьЕстьЗаписиКнигиПокупок(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОтрицательногоНДСПредъявленного" Тогда
		Результат = ПроверитьНетОтрицательногоНДСПредъявленного(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиНДСПредъявленного_БУ_НУ" Тогда
		Результат = ПроверитьОстаткиНДСПредъявленного_БУ_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЕстьВычетНДСсАвансов" Тогда
		Результат = ПроверитьЕстьВычетНДСсАвансов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ВычетНДСсАвансов_БУ_НУ" Тогда
		Результат = ПроверитьВычетНДСсАвансов_БУ_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПроверкаЦепочкиВозвратов" Тогда
		Результат = ПроверитьПравильностьДанныхПоВозвратам(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	// Квартплата +
	
	// Раздел "Учет ЖКХ"
	Если СтрокаПроверки.Идентификатор = "ОтсутствиеПустогоРасчетногоМесяцаВЗаписяхОНачислениях" Тогда
		Результат = УПЖКХ_ПроверитьОтсутствиеПустогоРасчетногоМесяцаВЗаписяхОНачислениях(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОтсутствиеПустогоРасчетногоМесяцаВЗаписяхОВзаиморасчетах" Тогда
		Результат = УПЖКХ_ПроверитьОтсутствиеПустогоРасчетногоМесяцаВЗаписяхОВзаиморасчетах(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОтсутствиеДокументовРегистрацияОплатыСНесформированнымиДокументамиОтражения" Тогда
		Результат = УПЖКХ_НайтиДокументыРегистрацияОплатыСНесформированнымиДокументамиОтражения(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОтсутствиеНезаполненнойУслугиВЗаписяхОНачисленияИВзаиморасчетов" Тогда
		Результат = УПЖКХ_ПроверитьОтсутствиеПустойУслугиВЗаписяхОВзаиморасчетахИНачислениях(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОтсутствиеПустогоДоговораВзаиморасчетовВЗаписяхОНачислениях" Тогда
		Результат = УПЖКХ_ПроверитьОтсутствиеПустогоДоговораВзаиморасчетовВЗаписяхОНачислениях(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОтсутствиеНезаполненныхОбязательныхРеквизитовСправочникаПомещения" Тогда
		Результат = УПЖКХ_ПроверитьОтсутствиеНезаполненныхОбязательныхРеквизитовСправочникаПомещения(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	// Квартплата -
	
	// Обработка результата
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		СтрокаПроверки.ПроверкаВыполнена = Истина;
		СтрокаПроверки.ОбнаруженыОшибки  = Результат.Количество() > 0;
		СтрокаПроверки.ТаблицаОшибок     = Результат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Булево") Тогда
		СтрокаПроверки.ПроверкаВыполнена = Истина;
		СтрокаПроверки.ОбнаруженыОшибки  = Результат;
		СтрокаПроверки.ТаблицаОшибок     = Неопределено;
	Иначе // Неопределено
		СтрокаПроверки.ПроверкаВыполнена = Ложь;
		СтрокаПроверки.ОбнаруженыОшибки  = Ложь;
		СтрокаПроверки.ТаблицаОшибок     = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки.КомментарийРезультата) Тогда
		Если СтрокаПроверки.ПроверкаВыполнена Тогда
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаОшибка;
			Иначе
				СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаНетОшибок;
			КонецЕсли;
		Иначе
			СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаНеВыполнена;
		КонецЕсли;
	КонецЕсли;
	Если СтрокаПроверки.ОбнаруженыОшибки 
		И НЕ ЗначениеЗаполнено(СтрокаПроверки.ПричиныОшибокРезультата) Тогда
		СтрокаПроверки.ПричиныОшибокРезультата = СтрокаПроверки.ПричиныОшибок;
	КонецЕсли;
	Если СтрокаПроверки.ОбнаруженыОшибки 
		И НЕ ЗначениеЗаполнено(СтрокаПроверки.РекомендацииРезультата) Тогда
		СтрокаПроверки.РекомендацииРезультата = СтрокаПроверки.Рекомендации;
	КонецЕсли;
	Если СтрокаПроверки.ОбнаруженыОшибки
		И НЕ ЗначениеЗаполнено(СтрокаПроверки.ГиперссылкаРезультата) Тогда
		СтрокаПроверки.ГиперссылкаРезультата = СтрокаПроверки.ГиперссылкаРекомендаций;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьОтчетОРезультатахПроверки(ТаблицаПроверок, ПараметрыОтчета)
	
	ВестиУчетПоПодразделениям = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	ДокументРезультат     = Новый ТабличныйДокумент;
	МакетОтчета           = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("МакетОтчета");
	МакетОтчетовОбОшибках = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("ОтчетыОбОшибках");
	
	// Шапка
	ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Организация    = ПараметрыОтчета.Организация;
	ОбластьШапка.Параметры.ПериодПроверки = ПредставлениеПериода(
		ПараметрыОтчета.НачалоПериода, КонецДня(ПараметрыОтчета.КонецПериода), "ФП = Истина");
	ДокументРезультат.Вывести(ОбластьШапка);
	
	// Заголовок
	ВсегоОшибок = ТаблицаПроверок.Итог("КолОшибок");
	Если ВсегоОшибок > 0 Тогда
		ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("ЗаголовокЕстьОшибки");
		ОбластьЗаголовок.Параметры.ВсегоОшибок = ВсегоОшибок;
	Иначе
		ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("Заголовок");
	КонецЕсли;
	ВыполненныеПроверки = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГруппа,ПроверкаВыполнена", Ложь, Истина));
	ОбластьЗаголовок.Параметры.ПроведеноПроверок = ВыполненныеПроверки.Количество();
	ВсегоПроверок = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь));
	ОбластьЗаголовок.Параметры.ВсегоПроверок = ВсегоПроверок.Количество();
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	// Получаем все области макета основного отчета
	ОбластьРазделУчетаНетОшибок  = МакетОтчета.ПолучитьОбласть("РазделУчета");
	ОбластьРазделУчетаЕстьОшибки = МакетОтчета.ПолучитьОбласть("РазделУчетаЕстьОшибки");
	ОбластьРазделУчетаНеВыполнен = МакетОтчета.ПолучитьОбласть("РазделУчетаНеВыполнен");
	ОбластьПроверкаНетОшибок   = МакетОтчета.ПолучитьОбласть("Проверка");
	ОбластьПроверкаЕстьОшибки  = МакетОтчета.ПолучитьОбласть("ПроверкаЕстьОшибки");
	ОбластьПроверкаНеВыполнена = МакетОтчета.ПолучитьОбласть("ПроверкаНеВыполнена");
	ОбластьПредметКонтроля = МакетОтчета.ПолучитьОбласть("ПредметКонтроля");
	ОбластьКомментарийРезультатаНетОшибок  = МакетОтчета.ПолучитьОбласть("КомментарийРезультата");
	ОбластьКомментарийРезультатаЕстьОшибки = МакетОтчета.ПолучитьОбласть("КомментарийРезультатаЕстьОшибки");
	ОбластьПричиныОшибок = МакетОтчета.ПолучитьОбласть("ПричиныОшибок");
	ОбластьРекомендации = МакетОтчета.ПолучитьОбласть("Рекомендации");
	ОбластьРазделительРазделаУчета = МакетОтчета.ПолучитьОбласть("РазделительРазделаУчета");
	ОбластьРекомендацииСГиперссылкой = МакетОтчета.ПолучитьОбласть("РекомендацииСГиперссылкой");
	
	// Получаем области макета детальных отчетов об ошибках
	ОбластьШапкаОшибок  = МакетОтчетовОбОшибках.ПолучитьОбласть("Шапка");
	ОбластьПодвалОшибок = МакетОтчетовОбОшибках.ПолучитьОбласть("Подвал");
	
	// Выводим строки отчета
	ПервыйРаздел          = Истина;
	ПерваяПроверкаРаздела = Истина;
	
	Для каждого СтрокаПроверки Из ТаблицаПроверок Цикл

		Если ПараметрыОтчета.ПоказыватьТолькоОшибки
		И НЕ СтрокаПроверки.ОбнаруженыОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПроверки.ЭтоГруппа Тогда
			
			// Пустая строка до раздела
			Если НЕ ПервыйРаздел Тогда
				ДокументРезультат.ЗакончитьГруппуСтрок(); // Закончить уровень 2 предыдущего раздела
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьРазделительРазделаУчета, 1);
			// Раздел
			Если НЕ СтрокаПроверки.ПроверкаВыполнена Тогда
				ОбластьРазделУчета = ОбластьРазделУчетаНеВыполнен;
			ИначеЕсли СтрокаПроверки.ОбнаруженыОшибки Тогда
				ОбластьРазделУчета = ОбластьРазделУчетаЕстьОшибки;
			Иначе
				ОбластьРазделУчета = ОбластьРазделУчетаНетОшибок;
			КонецЕсли;
			ОбластьРазделУчета.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьРазделУчета, 1);
			ПервыйРаздел          = Ложь;
			ПерваяПроверкаРаздела = Истина;
			
		Иначе
			
			// Пустая строка после раздела
			Если ПерваяПроверкаРаздела Тогда
				ДокументРезультат.НачатьГруппуСтрок(, Ложь); // Начать уровень 2
				ДокументРезультат.Вывести(ОбластьРазделительРазделаУчета, 2);
			КонецЕсли;
			// Проверка
			Если НЕ СтрокаПроверки.ПроверкаВыполнена Тогда
				ОбластьПроверка = ОбластьПроверкаНеВыполнена;
			ИначеЕсли СтрокаПроверки.ОбнаруженыОшибки Тогда
				ОбластьПроверка = ОбластьПроверкаЕстьОшибки;
			Иначе
				ОбластьПроверка = ОбластьПроверкаНетОшибок;
			КонецЕсли;
			ОбластьПроверка.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьПроверка, 2);
			ПерваяПроверкаРаздела = Ложь;
			ДокументРезультат.НачатьГруппуСтрок(, Ложь); // Начать уровень 3
			// Предмет контроля
			ОбластьПредметКонтроля.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьПредметКонтроля, 3);
			// Комментарий результата
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				ОбластьКомментарийРезультата = ОбластьКомментарийРезультатаЕстьОшибки;
			Иначе
				ОбластьКомментарийРезультата = ОбластьКомментарийРезультатаНетОшибок;
			КонецЕсли;
			ОбластьКомментарийРезультата.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьКомментарийРезультата, 3);
			
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				// Причины ошибок
				ОбластьПричиныОшибок.Параметры.Заполнить(СтрокаПроверки);
				ДокументРезультат.Вывести(ОбластьПричиныОшибок, 3);
				// Рекомендации
				
				Если ЗначениеЗаполнено(СтрокаПроверки.ГиперссылкаРезультата) Тогда
					Область = ОбластьРекомендацииСГиперссылкой;
				Иначе
					Область = ОбластьРекомендации;
				КонецЕсли;
				Область.Параметры.Заполнить(СтрокаПроверки);
				ДокументРезультат.Вывести(Область, 3);
				
				// Детальный отчет об ошибках
				Если ТипЗнч(СтрокаПроверки.ТаблицаОшибок) = Тип("ТаблицаЗначений")
					И СтрокаПроверки.ТаблицаОшибок.Количество() > 0 Тогда
					
					Если СтрокаПроверки.Идентификатор = "ЛимитКассы" 
						И ВестиУчетПоПодразделениям Тогда

						ИмяОбластиЗалоговокОшибок = СтрокаПроверки.Идентификатор + "ЗаголовокПоОбособленнымПодразделениям";
						ИмяОбластиСтрокаОшибок    = СтрокаПроверки.Идентификатор + "СтрокаПоОбособленнымПодразделениям";
					
					ИначеЕсли СтрокаПроверки.Идентификатор = "ПодотчетТолькоРаботникам"
						И УчетЗарплатыИКадровВоВнешнейПрограмме Тогда

						ИмяОбластиЗалоговокОшибок = СтрокаПроверки.Идентификатор + "УчетВоВнешнейПрограммеЗаголовок";
						ИмяОбластиСтрокаОшибок    = СтрокаПроверки.Идентификатор + "УчетВоВнешнейПрограммеСтрока";
					
					Иначе
						ИмяОбластиЗалоговокОшибок = СтрокаПроверки.Идентификатор + "Заголовок";
						ИмяОбластиСтрокаОшибок    = СтрокаПроверки.Идентификатор + "Строка";
					
					КонецЕсли;
					
					Если МакетОтчетовОбОшибках.Области.Найти(ИмяОбластиЗалоговокОшибок) = Неопределено
						ИЛИ МакетОтчетовОбОшибках.Области.Найти(ИмяОбластиСтрокаОшибок) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ОбластьЗаголовокОшибок = МакетОтчетовОбОшибках.ПолучитьОбласть(ИмяОбластиЗалоговокОшибок);
					ОбластьСтрокаОшибок    = МакетОтчетовОбОшибках.ПолучитьОбласть(ИмяОбластиСтрокаОшибок);
					ДокументРезультат.НачатьГруппуСтрок(, Ложь); // Начать уровень 4
					ДокументРезультат.Вывести(ОбластьШапкаОшибок, 4);
					ДокументРезультат.Вывести(ОбластьЗаголовокОшибок, 4);
					Для каждого СтрокаОшибки Из СтрокаПроверки.ТаблицаОшибок Цикл
						ОбластьСтрокаОшибок.Параметры.Заполнить(СтрокаОшибки);
						ДокументРезультат.Вывести(ОбластьСтрокаОшибок, 4);
					КонецЦикла;
					ДокументРезультат.Вывести(ОбластьПодвалОшибок, 4);
					ДокументРезультат.ЗакончитьГруппуСтрок(); // Закончить уровень 4
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументРезультат.ЗакончитьГруппуСтрок(); // Закончить уровень 3
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПерваяПроверкаРаздела Тогда
		ДокументРезультат.ЗакончитьГруппуСтрок(); // Закончить уровень 2 последнего раздела
	КонецЕсли;
	
	// В режиме "ПоказыватьТолькоОшибки" отчет формируется с предустановленной группировкой до 2 уровня.
	Если ПараметрыОтчета.ПоказыватьТолькоОшибки Тогда 
		ДокументРезультат.ПоказатьУровеньГруппировокСтрок(2);
	КонецЕсли;
	
	Возврат ДокументРезультат;

КонецФункции


///////////////////////////////////////////////////////////////////////////////////////
// Проверки раздела "Учетная политика"

Функция ПроверитьНаличиеУчП(СтрокаПроверки, ПараметрыОтчета)
	
	Результат = НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Возврат Результат;
	
КонецФункции

Функция ПроверитьНеизменностьУчетнойПолитики(СтрокаПроверки, ПараметрыОтчета, ИменаРесурсовУчетнойПолитики, ИмяРегистраУчетнойПолитики)

	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);

   	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("ЭлементУчетнойПолитики", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("НовоеЗначение", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("СтароеЗначение", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");

	СинонимыРесурсов = Новый Структура;
	ПредыдущаяУчетнаяПолитика = Новый Структура("Дата");
	ТекстРесурсы = "";
	Для каждого ИмяРесурса Из ИменаРесурсовУчетнойПолитики Цикл
		
		Ресурс = Метаданные.РегистрыСведений[ИмяРегистраУчетнойПолитики].Ресурсы.Найти(ИмяРесурса.Ключ);
		Если НЕ Ресурс = Неопределено Тогда
			СинонимыРесурсов.Вставить(Ресурс.Имя, Ресурс.Синоним);
			ПредыдущаяУчетнаяПолитика.Вставить(Ресурс.Имя, Неопределено);
			ТекстРесурсы = ТекстРесурсы + ", " + Ресурс.Имя;
		КонецЕсли; 
		
	КонецЦикла;

	Если ИмяРегистраУчетнойПолитики = "УчетнаяПолитика" Тогда
		ЭтоУчетнаяПолитикаБУ = Истина;
		НачалоГодаУП = НачалоГодаБУ(ПараметрыОтчета, ПараметрыОтчета.НачалоПериода);
	Иначе
		ЭтоУчетнаяПолитикаБУ = Ложь;
		ТекущаяСистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
		НачалоГодаУП = НачалоГодаНУ(ПараметрыОтчета, ПараметрыОтчета.НачалоПериода, ТекущаяСистемаНалогообложения);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоГодаУП);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитика.Период,
	|	УчетнаяПолитика.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&НачалоПериода, Организация = &ГоловнаяОрганизация) КАК УчетнаяПолитика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Период,
	|	УчетнаяПолитика.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.Организация = &ГоловнаяОрганизация
	|	И УчетнаяПолитика.Период > &НачалоПериода
	|	И УчетнаяПолитика.Период <= &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УчетнаяПолитика.Период,", "УчетнаяПолитика.Период" + ТекстРесурсы + ",");
	Если ИмяРегистраУчетнойПолитики <> "УчетнаяПолитика" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УчетнаяПолитика", ИмяРегистраУчетнойПолитики);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПерваяЗапись = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если ЭтоУчетнаяПолитикаБУ Тогда
			НачалоГодаУП = НачалоГодаБУ(ПараметрыОтчета, Выборка.Период);
		Иначе
			НачалоГодаУП = НачалоГодаНУ(ПараметрыОтчета, Выборка.Период, ПредыдущаяУчетнаяПолитика.СистемаНалогообложения);
		КонецЕсли;
	
		// Периодичность регистров сведений с учетной политикой - месяц,
		// поэтому приводим даты начала периода УП всегда к началу месяцу.
		Если НЕ ПерваяЗапись И Выборка.Период <> НачалоМесяца(НачалоГодаУП) Тогда
		
			Для Каждого ЭлементУчетнойПолитики Из СинонимыРесурсов Цикл
			
				СтароеЗначение 	= ПредыдущаяУчетнаяПолитика[ЭлементУчетнойПолитики.Ключ];
				НовоеЗначение 	= Выборка[ЭлементУчетнойПолитики.Ключ];
				
				ИзменилсяЭлементУчетнойПолитики = СтароеЗначение <> НовоеЗначение;
				Если ИменаРесурсовУчетнойПолитики[ЭлементУчетнойПолитики.Ключ] = "Квартал" Тогда
					// Квартальная периодичность используется только для реквизитов налогового учета.
					НачалоКварталаУП = НачалоКварталаНУ(ПараметрыОтчета, Выборка.Период, ПредыдущаяУчетнаяПолитика.СистемаНалогообложения);
					ИзменилсяЭлементУчетнойПолитики = ИзменилсяЭлементУчетнойПолитики
						И Выборка.Период <> НачалоМесяца(НачалоКварталаУП);
				КонецЕсли;
				
				Если ИзменилсяЭлементУчетнойПолитики Тогда
					Если НачалоГодаУП <> НачалоГода(НачалоГодаУП) Тогда
						// Если период расширен, включим вкомментарий по результату проверки соответствующую дату.
						Если ЭтоУчетнаяПолитикаБУ Тогда
							СтрокаПроверки.КомментарийРезультата = СтрЗаменить(СтрШаблон(
								НСтр("ru = 'В периоде проверки выявлены изменения в учетной политике организации, относящиеся к бухгалтерскому учету,
								|с датой, отличной от даты начала первого отчетного года (%1)'"),
								Формат(НачалоГодаУП, "ДЛФ=D")), Символы.ПС, " ");
						Иначе
							СтрокаПроверки.КомментарийРезультата = СтрЗаменить(СтрШаблон(
								НСтр("ru = 'В периоде проверки выявлены изменения в учетной политике организации, относящиеся к налоговому учету,
								|с датой, отличной от даты начала первого налогового периода (%1), 
								|которые могут быть не связаны с поддержкой изменений законодательства'"),
								Формат(НачалоГодаУП, "ДЛФ=D")), Символы.ПС, " ");
						КонецЕсли;
					КонецЕсли;
				
					НоваяСтрока 		= ТаблицаОшибок.Добавить();
					НоваяСтрока.Дата 	= Выборка.Период;
					НоваяСтрока.ЭлементУчетнойПолитики = СинонимыРесурсов[ЭлементУчетнойПолитики.Ключ];
					НоваяСтрока.СтароеЗначение 	= СтароеЗначение;
					НоваяСтрока.НовоеЗначение 	= НовоеЗначение;
					НоваяСтрока.Расшифровка 	= Новый Структура();
					НоваяСтрока.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
					НоваяСтрока.Расшифровка.Вставить("Период", 		Выборка.Период);
					НоваяСтрока.Расшифровка.Вставить("Организация", Выборка.Организация);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПредыдущаяУчетнаяПолитика, Выборка);
		ПерваяЗапись = Ложь;
	
	КонецЦикла;

	Возврат ТаблицаОшибок;

КонецФункции

Функция ПолучитьСтруктуруИменНеизменныхРесурсовБУ()

	ИменаРесурсовБУ = Новый Структура;
	ИменаРесурсовБУ.Вставить("СпособОценкиМПЗ",             "Год");
	ИменаРесурсовБУ.Вставить("СпособОценкиТоваровВРознице", "Год");
	ИменаРесурсовБУ.Вставить("ДиректКостинг",               "Год");
	ИменаРесурсовБУ.Вставить("ПоддержкаПБУ18",              "Год");
	
	ИменаРесурсовБУ.Вставить("ВыпускПродукции",                                         "Год");
	ИменаРесурсовБУ.Вставить("ОказаниеУслуг",                                           "Год");
	ИменаРесурсовБУ.Вставить("РассчитыватьСебестоимостьПолуфабрикатов",                 "Год");
	ИменаРесурсовБУ.Вставить("РассчитыватьСебестоимостьУслугСобственнымПодразделениям", "Год");
	ИменаРесурсовБУ.Вставить("ПорядокСписанияРасходовНаСебестоимостьУслуг",             "Год");
	ИменаРесурсовБУ.Вставить("СпособУчетаВыпускаГотовойПродукции",                      "Год");
	
	Возврат ИменаРесурсовБУ;

КонецФункции

Функция ПроверитьНеизменностьУчП_БУ(СтрокаПроверки, ПараметрыОтчета)

	ИменаРесурсов = ПолучитьСтруктуруИменНеизменныхРесурсовБУ();
	
	Возврат ПроверитьНеизменностьУчетнойПолитики(СтрокаПроверки, ПараметрыОтчета, ИменаРесурсов, "УчетнаяПолитика");
	
КонецФункции

Функция ПроверитьНеизменностьУчП_НУ(СтрокаПроверки, ПараметрыОтчета)

	// На НУ влияют те же настройки, что и на БУ, плюс ряд дополнительных.
	ИменаРесурсов = ПолучитьСтруктуруИменНеизменныхРесурсовБУ();
	ИменаРесурсов.Вставить("СистемаНалогообложения", "Квартал");
	ИменаРесурсов.Вставить("ПлательщикЕНВД",         "Квартал");
	
	Возврат ПроверитьНеизменностьУчетнойПолитики(СтрокаПроверки, ПараметрыОтчета, ИменаРесурсов, "НастройкиСистемыНалогообложения");
	
КонецФункции

Функция ДатаРегистрацииОрганизации(ПараметрыОтчета)

	Если ПараметрыОтчета.Свойство("ДатаРегистрации") Тогда
		// Уже ранее получали дату регистрации организации, повторно не запрашиваем.
		ДатаРегистрации = ПараметрыОтчета.ДатаРегистрации;
	Иначе
		ДатаРегистрации = Справочники.Организации.ДатаРегистрацииОрганизации(ПараметрыОтчета.Организация);
		// Закешируем полученную дату.
		ПараметрыОтчета.Вставить("ДатаРегистрации", ДатаРегистрации);
	КонецЕсли;
	
	Возврат ДатаРегистрации;

КонецФункции

Функция НачалоГодаБУ(ПараметрыОтчета, Период)

	ДатаРегистрации = ДатаРегистрацииОрганизации(ПараметрыОтчета);
	
	ПериодНачалоГода = НачалоГода(Период);
	
	Если НЕ ЗначениеЗаполнено(ДатаРегистрации) Тогда
		// Дата регистрации неизвестна, по умолчанию считаем, что отчетным периодом является календарный год.
		Возврат ПериодНачалоГода;
	КонецЕсли;
	
	// п.3. ст. 15 Федерального закона от 06.12.2011 №402-ФЗ "О бухгалтерском учете"
	// В случае, если государственная регистрация экономического субъекта, за исключением кредитной организации, 
	// произведена после 30 сентября, первым отчетным годом является, если иное не установлено экономическим субъектом, 
	// период с даты государственной регистрации по 31 декабря календарного года, 
	// следующего за годом его государственной регистрации, включительно.

	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(ПараметрыОтчета.Организация,
		Период,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследнемКвартале,
		Перечисления.Периодичность.Год,
		ДатаРегистрации);
		
	Возврат НалоговыйПериод.Начало;
	
КонецФункции

Функция НачалоГодаНУ(ПараметрыОтчета, Период, СистемаНалогообложения)

	ПериодНачалоГода = НачалоГода(Период);
	
	Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
		// Согласно п.4 ст. 55 НК РФ правила определения расширенного налогового периода
		// не применяются в отношении патента и ЕНВД, учитываем обычный календарный год.
		Возврат ПериодНачалоГода;
	КонецЕсли;

	ДатаРегистрации = ДатаРегистрацииОрганизации(ПараметрыОтчета);
	
	Если НЕ ЗначениеЗаполнено(ДатаРегистрации) Тогда
		// Дата регистрации неизвестна, по умолчанию считаем календарный год.
		Возврат ПериодНачалоГода;
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(ПараметрыОтчета.Организация,
		Период,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		Перечисления.Периодичность.Год,
		ДатаРегистрации);
		
	Возврат НалоговыйПериод.Начало;

КонецФункции

Функция НачалоКварталаНУ(ПараметрыОтчета, Период, СистемаНалогообложения)

	ПериодНачалоКвартала = НачалоКвартала(Период);
	
	Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
		// Согласно п.4 ст. 55 НК РФ правила определения расширенного налогового периода
		// не применяются в отношении патента и ЕНВД, учитываем обычный календарный квартал.
		Возврат ПериодНачалоКвартала;
	КонецЕсли;

	ДатаРегистрации = ДатаРегистрацииОрганизации(ПараметрыОтчета);
	
	Если НЕ ЗначениеЗаполнено(ДатаРегистрации) Тогда
		// Дата регистрации неизвестна, по умолчанию считаем календарный квартал.
		Возврат ПериодНачалоКвартала;
	КонецЕсли;
	
	ДатаРегистрацииКонецКвартала = КонецКвартала(ДатаРегистрации);
	
	Если Период <= ДатаРегистрацииКонецКвартала Тогда
		// Квартал регистрации.
		Возврат ДатаРегистрации;
	
	ИначеЕсли ДатаРегистрацииКонецКвартала + 1 = ПериодНачалоКвартала Тогда
		// Квартал, следующий за кварталом регистрации.

		// Согласно ст.55 НК РФ при регистрации в декабре первый налоговый период определяется 
		// с даты регистрации года регистрации до 31 декабря следующего года. 
		ПропущенныйГод = ИнтерфейсыВзаимодействияБРО.ПропущенныйНалоговыйПериод(
			Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
			ПараметрыОтчета.Организация,
			ДатаРегистрации);

		Если ПропущенныйГод <> Неопределено Тогда
			Возврат ДатаРегистрации;
		КонецЕсли;

		// При регистрации в последние 10 дней квартала налоговым периодом является период времени со дня создания
		// до конца следующего квартала.
		ПропущенныйКвартал = ИнтерфейсыВзаимодействияБРО.ПропущенныйНалоговыйПериод(
			Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
			ПараметрыОтчета.Организация,
			ДатаРегистрации);

		Если ПропущенныйКвартал <> Неопределено Тогда
			Возврат ДатаРегистрации;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПериодНачалоКвартала;

КонецФункции

Функция ПроверитьОтсутствиеОстатковИОборотов(СтрокаПроверки, ПараметрыОтчета, МассивСчета)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет В (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Счета", 			БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчета));
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	// Добавим поле для расшифровки
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			СтрокаТабРезультата.Расшифровка.Вставить("Счет", СтрокаТабРезультата.Счет);
		КонецЦикла;
	
	КонецЕсли;

	Возврат ТаблицаРезультата;	

КонецФункции

Функция ПроверитьОценкаРозницы(СтрокаПроверки, ПараметрыОтчета)

	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода) Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Проверка не может быть проведена, так как неопределена учетная политика организации'");
		Возврат Истина;
	КонецЕсли;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'В учетной политике организации установлен способ оценки стоимости товаров ""По продажной стоимости""'");
		Возврат Ложь;
	КонецЕсли;

	СчетаУчетаТоваровПоПродажнойСтоимости = Новый Массив;
	СчетаУчетаТоваровПоПродажнойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	СчетаУчетаТоваровПоПродажнойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	СчетаУчетаТоваровПоПродажнойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);

	Возврат ПроверитьОтсутствиеОстатковИОборотов(СтрокаПроверки, ПараметрыОтчета, СчетаУчетаТоваровПоПродажнойСтоимости);

КонецФункции

Функция ПроверитьДиректКостингИСчет26(СтрокаПроверки, ПараметрыОтчета)

	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода) Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Проверка не может быть проведена, так как неопределена учетная политика организации'");
		Возврат Истина;
	КонецЕсли;

    ПрименяетсяДиректКостинг = УчетнаяПолитика.ДиректКостинг(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	ДопустимыеКорсчета = Новый Массив;
	Если ПрименяетсяДиректКостинг Тогда
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);  	// 90.08
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансирование);			// 86
	Иначе
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);      		// 20
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);		// 23
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);		// 29
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансирование);            // 86
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК ПериодМесяц,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.КорСчет) КАК КорСчетПредставление,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, Счет В (&Счет26), , Организация = &Организация, НЕ КорСчет В (&ДопустимыеКорсчета), ) КАК ХозрасчетныйОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.КорСчет
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Массив26 = Новый Массив;
	Массив26.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("Счет26", 			БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив26));
	Запрос.УстановитьПараметр("ДопустимыеКорсчета", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(ДопустимыеКорсчета));
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			СтрокаТабРезультата.Расшифровка.Вставить("СчетКт", СтрокаТабРезультата.Счет);
			СтрокаТабРезультата.Расшифровка.Вставить("СчетДт", СтрокаТабРезультата.КорСчет);
			СтрокаТабРезультата.Расшифровка.Вставить("НачалоПериода", 	Макс(НачалоМесяца(СтрокаТабРезультата.ПериодМесяц), ПараметрыОтчета.НачалоПериода));
			СтрокаТабРезультата.Расшифровка.Вставить("КонецПериода", 	Мин(КонецМесяца(СтрокаТабРезультата.ПериодМесяц), КонецДня(ПараметрыОтчета.КонецПериода)));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультата;

КонецФункции

Функция ПроверитьПрименениеПБУ18Счета(СтрокаПроверки, ПараметрыОтчета)

	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода) Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Проверка не может быть проведена, так как неопределена учетная политика организации'");
		Возврат Истина;
	КонецЕсли;
	
    ПрименяетсяПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если ПрименяетсяПБУ18 Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'В учетной политике организации установлена поддержка ПБУ 18/02'");
		Возврат Ложь;
	КонецЕсли;

	МассивСчета = Новый Массив;
	МассивСчета.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	МассивСчета.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	МассивСчета.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки_НалогНаПрибыль);
	МассивСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	
	Возврат ПроверитьОтсутствиеОстатковИОборотов(СтрокаПроверки, ПараметрыОтчета, МассивСчета);

КонецФункции

Функция ПроверитьНетНУприУСН(СтрокаПроверки, ПараметрыОтчета)

	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода) Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Проверка не может быть проведена, так как неопределена учетная политика организации'");
		Возврат Истина;
	КонецЕсли;
	
    ОрганизацияПрименяетУСН = УчетнаяПолитика.ПрименяетсяУСН(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если НЕ ОрганизацияПрименяетУСН Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Организация не применяет упрощенную систему налогообложения'");
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК ПериодМесяц,
	|	ХозрасчетныйОбороты.Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, Счет.НалоговыйУчет, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	// В первый день после перехода на УСН могут быть обороты по закрытию остатков сумм НУ на счетах,
	// поэтому его пропускаем.
	ДатаНачала = ПараметрыОтчета.НачалоПериода;
	Если УчетУСН.ЭтоПервыйДеньПримененияУСНПослеУплатыНалогаНаПрибыль(ПараметрыОтчета.Организация, ДатаНачала) Тогда
		ДатаНачала = ДатаНачала + 86400;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	// Добавим поле для расшифровки
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			СтрокаТабРезультата.Расшифровка.Вставить("Счет", СтрокаТабРезультата.Счет);
			СтрокаТабРезультата.Расшифровка.Вставить("ПоказательНУ", 	Истина);
			СтрокаТабРезультата.Расшифровка.Вставить("НачалоПериода", 	Макс(НачалоМесяца(СтрокаТабРезультата.ПериодМесяц), ПараметрыОтчета.НачалоПериода));
			СтрокаТабРезультата.Расшифровка.Вставить("КонецПериода", 	Мин(КонецМесяца(СтрокаТабРезультата.ПериодМесяц), КонецДня(ПараметрыОтчета.КонецПериода)));
		КонецЦикла;
	
	КонецЕсли;

	Возврат ТаблицаРезультата;	

КонецФункции

Функция ПроверитьНетЕНВД(СтрокаПроверки, ПараметрыОтчета)

	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода) Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Проверка не может быть проведена, так как неопределена учетная политика организации'");
		Возврат Истина;
	КонецЕсли;
	
    ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если ПлательщикЕНВД Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Организация является плательщиком ЕНВД'");
		Возврат Ложь;
	КонецЕсли;
	
	ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.НачалоПериода,
		ПараметрыОтчета.КонецПериода);

	Если ПрименяетсяУСНПатент Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Применяется патентная система налогообложения'");
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаДоходовИРасходовЕНВД.Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД";

	МассивСчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Если МассивСчета.Количество() = 0 Тогда
		МассивСчета.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД); 						// 90.01.2
		МассивСчета.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД); 			// 90.02.2
		МассивСчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД); 		// 90.07.2
		МассивСчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД); 	// 90.08.2
		МассивСчета.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД); 					// 99.01.2
	КонецЕсли;
	
	Возврат ПроверитьОтсутствиеОстатковИОборотов(СтрокаПроверки, ПараметрыОтчета, МассивСчета);

КонецФункции

Функция ПроверитьНаличиеСложногоНДС(СтрокаПроверки, ПараметрыОтчета)

	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если РаздельныйУчетНДС Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр(
			"ru = 'Организация, согласно учетной политике, может осуществлять операции без НДС или с НДС 0%'");
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК ПериодМесяц,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтавкаНДС,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			МЕСЯЦ,
	|			Счет В (&Счета90_01_1),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС),
	|			Организация = &Организация
	|				И Субконто1 В (&СтавкиСложногоНДС),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Счет),
	|	""ЕНВД"",
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, Счет В (&Счета90_01_2), , Организация = &Организация И НЕ &ЕНВДилиПатент, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(ХозрасчетныйОбороты.СуммаОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаОборотКт <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодМесяц,
	|	Счет,
	|	СтавкаНДС
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	НачалоПериода = ПараметрыОтчета.НачалоПериода;
	КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
	
	ЕНВДилиПатент = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода)
		ИЛИ УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ЕНВДилиПатент", ЕНВДилиПатент);
	
	СтавкиСложногоНДС = Новый Массив;
	// Если применяется освобождение от уплаты НДС по ст. 145 НК контролировать наличие реализаций по ставке "Без НДС" не требуется.
	Если НЕ УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(
		ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода) Тогда
		СтавкиСложногоНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли; 
	
	// Организация, экспортирующая несырьевые товары с 1.07.2016 не обязана вести раздельный учет НДС.
	// Реализация по ставке 0% в этом случае соответствует положениям учетной политики.
	Если НЕ ЕстьНесырьевойЭкспорт(ПараметрыОтчета) Тогда
		СтавкиСложногоНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтавкиСложногоНДС", СтавкиСложногоНДС);
	
	Массив90_01_1 = Новый Массив;
	Массив90_01_1.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Запрос.УстановитьПараметр("Счета90_01_1", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив90_01_1));
	
	Массив90_01_2 = Новый Массив;
	Массив90_01_2.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	Запрос.УстановитьПараметр("Счета90_01_2", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив90_01_2));
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	// Добавим поле для расшифровки
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			СтрокаТабРезультата.Расшифровка.Вставить("Счет", СтрокаТабРезультата.Счет);
			СтрокаТабРезультата.Расшифровка.Вставить("НачалоПериода", 
				Макс(НачалоМесяца(СтрокаТабРезультата.ПериодМесяц), ПараметрыОтчета.НачалоПериода));
			СтрокаТабРезультата.Расшифровка.Вставить("КонецПериода",
				Мин(КонецМесяца(СтрокаТабРезультата.ПериодМесяц), КонецДня(ПараметрыОтчета.КонецПериода)));
			
			Если ТипЗнч(СтрокаТабРезультата.СтавкаНДС) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
				СтрокаТабРезультата.Расшифровка.Вставить("Субконто2", СтрокаТабРезультата.СтавкаНДС);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

	Возврат ТаблицаРезультата;

КонецФункции

Функция ЕстьНесырьевойЭкспорт(ПараметрыОтчета)
	
	Если ПараметрыОтчета.НачалоПериода < '20160701' Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСРеализация0Обороты.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНесырьевые)) КАК НДСРеализация0Обороты";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции


Функция ПроверитьНаличиеСведенийОбОтветственныхЛицах(СтрокаПроверки, ПараметрыОтчета)

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Организация");
	ТаблицаОшибок.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаОшибок.Колонки.Добавить("ОтветственноеЛицо");
	
	ПроверяемыеОтветственныеЛица = Новый Массив;
	ПроверяемыеОтветственныеЛица.Добавить("Руководитель");
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация) Тогда
		ПроверяемыеОтветственныеЛица.Добавить("ГлавныйБухгалтер");
		ПроверяемыеОтветственныеЛица.Добавить("Кассир");
		ПроверяемыеОтветственныеЛица.Добавить("ОтветственныйЗаБухгалтерскиеРегистры");
		ПроверяемыеОтветственныеЛица.Добавить("ОтветственныйЗаНалоговыеРегистры");
	КонецЕсли;
	
	Структура = ОтветственныеЛицаБППереопределяемый.ОтветственныеЛица(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.КонецПериода));
	ОтветственноеЛицо = Неопределено;
	
	Для каждого ПроверяемоеОтветственноеЛицо Из ПроверяемыеОтветственныеЛица Цикл
		Если Структура.Свойство(ПроверяемоеОтветственноеЛицо, ОтветственноеЛицо) Тогда
			Если Не ЗначениеЗаполнено(ОтветственноеЛицо) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.Дата 				= ПараметрыОтчета.КонецПериода;
				НоваяСтрока.Организация 		= ПараметрыОтчета.Организация;
				НоваяСтрока.ОтветственноеЛицо 	= Перечисления.ОтветственныеЛицаОрганизаций[ПроверяемоеОтветственноеЛицо];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаОшибок;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
// Проверки раздела "Анализ состояния бухгалтерского учета"

Функция ПроверитьСоответствиеПланаСчетовТиповому(СтрокаПроверки, ПараметрыОтчета)
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("СчетКод", Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("СчетНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", Новый ОписаниеТипов("Строка"));
	
	ТаблицаДанныхПоЭталонномуПлануСчетов = ПодготовитьДанныеПоЭталонномуПлануСчетовДляАнализа(ПараметрыОтчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭталонныйПланСчетов", ТаблицаДанныхПоЭталонномуПлануСчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭталонныйПланСчетов.Код,
	|	ЭталонныйПланСчетов.Порядок,
	|	ЭталонныйПланСчетов.Наименование,
	|	ЭталонныйПланСчетов.Вид,
	|	ЭталонныйПланСчетов.ВидСубконто1,
	|	ЭталонныйПланСчетов.ВидСубконто2,
	|	ЭталонныйПланСчетов.ВидСубконто3,
	|	ЭталонныйПланСчетов.ИмяВидаСубконто1,
	|	ЭталонныйПланСчетов.ИмяВидаСубконто2,
	|	ЭталонныйПланСчетов.ИмяВидаСубконто3,
	|	ЭталонныйПланСчетов.ПроверятьАналитикуСчета,
	|	ЭталонныйПланСчетов.СчетСсылка
	|ПОМЕСТИТЬ ВТ_ЭталонныйПланСчетов
	|ИЗ
	|	&ЭталонныйПланСчетов КАК ЭталонныйПланСчетов
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭталонныйПланСчетов.СчетСсылка
	|;
	|
	|ВЫБРАТЬ
	|	ВТ_ЭталонныйПланСчетов.Код,
	|	ВТ_ЭталонныйПланСчетов.Наименование,
	|	ВТ_ЭталонныйПланСчетов.Вид,
	|	ВТ_ЭталонныйПланСчетов.ВидСубконто1,
	|	ВТ_ЭталонныйПланСчетов.ВидСубконто2,
	|	ВТ_ЭталонныйПланСчетов.ВидСубконто3,
	|	ВТ_ЭталонныйПланСчетов.ИмяВидаСубконто1,
	|	ВТ_ЭталонныйПланСчетов.ИмяВидаСубконто2,
	|	ВТ_ЭталонныйПланСчетов.ИмяВидаСубконто3,
	|	ВТ_ЭталонныйПланСчетов.ПроверятьАналитикуСчета,
	|	ВТ_ЭталонныйПланСчетов.СчетСсылка,
	|	ЕСТЬNULL(Хозрасчетный.Вид, НЕОПРЕДЕЛЕНО) КАК ВидСсылка,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто1Ссылка,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто2Ссылка,
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто3Ссылка
	|
	|ИЗ
	|	ВТ_ЭталонныйПланСчетов КАК ВТ_ЭталонныйПланСчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_ЭталонныйПланСчетов.СчетСсылка = Хозрасчетный.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1
	|		ПО ВТ_ЭталонныйПланСчетов.СчетСсылка = ВидыСубконто1.Ссылка
	|			И ВидыСубконто1.НомерСтроки = 1
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2
	|		ПО ВТ_ЭталонныйПланСчетов.СчетСсылка = ВидыСубконто2.Ссылка
	|			И ВидыСубконто2.НомерСтроки = 2
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3
	|		ПО ВТ_ЭталонныйПланСчетов.СчетСсылка = ВидыСубконто3.Ссылка
	|			И ВидыСубконто3.НомерСтроки = 3
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ЭталонныйПланСчетов.Порядок
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	СоответствиеЭталонныеВидыСубконто = Новый Соответствие();
	
	Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
		
		ТекстОшибки = "";
		Если НЕ ЗначениеЗаполнено(СтрокаТабРезультата.СчетСсылка) Тогда
			// Не нашли эталонный счет в базе
			ТекстОшибки = НСтр("ru = 'Счет не найден в рабочем плане счетов бухгалтерского учета.'");
		Иначе
			// Проверяем настройки активности/пассивности счета.
			Если СтрокаТабРезультата.Вид <> СтрокаТабРезультата.ВидСсылка Тогда
				ТекстСтрока = "";
				Если СтрокаТабРезультата.Вид = ВидСчета.Активный Тогда	
					ТекстСтрока = НСтр("ru = 'Счет должен быть активным.'");
				ИначеЕсли СтрокаТабРезультата.Вид = ВидСчета.Пассивный Тогда
					ТекстСтрока = НСтр("ru = 'Счет должен быть пассивным.'");
				Иначе
					ТекстСтрока = НСтр("ru = 'Счет должен быть активно-пассивным.'");
				КонецЕсли;
				ТекстОшибки = ТекстСтрока;
			КонецЕсли;
			
			// Проверим виды субконто.
			Если СтрокаТабРезультата.ПроверятьАналитикуСчета Тогда
				
				СоответствиеЭталонныеВидыСубконто.Очистить();
				Для Н = 1 По 3 Цикл
					ВидСубконто 	= СтрокаТабРезультата["ВидСубконто" + Н];
					ИмяВидаСубконто = СтрокаТабРезультата["ИмяВидаСубконто" + Н];
					Если ЗначениеЗаполнено(ВидСубконто) Тогда
						СоответствиеЭталонныеВидыСубконто.Вставить(ВидСубконто, Ложь);
					ИначеЕсли ЗначениеЗаполнено(ИмяВидаСубконто) Тогда
						// Возможно, что в базе не найден даже вид субконто в плане видов характеристик.
						СоответствиеЭталонныеВидыСубконто.Вставить(ИмяВидаСубконто, Ложь);
					КонецЕсли;
				КонецЦикла;
				
				Для Н = 1 По 3 Цикл
					ВидСубконто = СтрокаТабРезультата["ВидСубконто" + Н + "Ссылка"];
					Если ЗначениеЗаполнено(ВидСубконто) Тогда
						СоответствиеЭталонныеВидыСубконто.Вставить(ВидСубконто, Истина);
					КонецЕсли;
				КонецЦикла;
				
				// Проверим отсутствующие виды субконто.
				ТекстСтрока = "";
				Для Каждого КлючЗначение Из СоответствиеЭталонныеВидыСубконто Цикл
					Если КлючЗначение.Значение = ЛОЖЬ Тогда
						Если ЗначениеЗаполнено(ТекстСтрока) Тогда
							ТекстСтрока = ТекстСтрока + ", ";
						КонецЕсли;
						ТекстСтрока = ТекстСтрока + Строка(КлючЗначение.Ключ);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ТекстСтрока) Тогда
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС;
					КонецЕсли;
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'На счете отсутствуют следующие виды субконто: %1'"), ТекстСтрока)
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			НоваяСтрока 					= ТаблицаОшибок.Добавить();
			НоваяСтрока.Счет 				= СтрокаТабРезультата.СчетСсылка;
			НоваяСтрока.СчетКод				= СтрокаТабРезультата.Код;
			НоваяСтрока.СчетНаименование	= СтрокаТабРезультата.Наименование;
			НоваяСтрока.Ошибка				= ТекстОшибки;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ПроверитьНетОстатковПоСчету000(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&НачалоПериода КАК Дата,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	(ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|			ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт <> 0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	Если ТаблицаРезультата.Количество() > 0 Тогда
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		
		Расшифровка = Новый Структура();
		Расшифровка.Вставить("Идентификатор", 	СтрокаПроверки.Идентификатор);
		Расшифровка.Вставить("НачалоПериода", 	'00010101');
		Расшифровка.Вставить("КонецПериода", 	ПараметрыОтчета.НачалоПериода - 1);
		Расшифровка.Вставить("Счет", 			ПланыСчетов.Хозрасчетный.Вспомогательный);
		
		ТаблицаРезультата[0].Расшифровка = Расшифровка;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

// Функция выполняет проверку закрытия счетов в соответствии с параметром типом закрытия.
//
// Параметры:
//	ТипЗакрытия - Число, одно из значений:
//		1 - Закрыты сами счет.
//		2 - Равенство остаток по Дт и Кт по всем подчиненным счетам.
//
Функция ПроверитьНетОстатковПоСчетамПодлежащимЗакрытиюПоТипуЗакрытия(СтрокаПроверки, ПараметрыОтчета, ТипЗакрытия)
	
	Если ТипЗакрытия = 2 Тогда
		// В случае наличия обособленных подразделений, выделенных на отдельный баланс, 
		// счета 90 и 91 закрываются в 0 в целом по головной организации с ее обособленными подразделениями,
		// а не по отдельным организациям-обособленным подразделениям.
		// Поэтому проверку выполняем только, если в настройках выбрана сама головная организация, 
		// считаем, что у пользователя в этом случае есть доступ к данным и других обособленным подразделениям тоже,
		// в запрос передаем список организаций.
		СвойстваОрганизации = БухгалтерскийУчетПереопределяемый.СтруктураОрганизации(ПараметрыОтчета.Организация);
		Если СвойстваОрганизации.Тип = "ОП" Тогда
			// Выбрано обособленное подразделение, его не проверяем.
			СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Проверка выполняется для головной организации в целом по всей организации с обособленными подразделениями, выделенными на отдельный баланс'");
			Возврат Ложь;
		КонецЕсли;
		ОтборПоОрганизации = СвойстваОрганизации.Организация;
	Иначе
		ОтборПоОрганизации = ПараметрыОтчета.Организация;
	КонецЕсли;

	ТаблицаДанныхПоЭталонномуПлануСчетов = ПодготовитьДанныеПоЭталонномуПлануСчетовДляАнализа(ПараметрыОтчета);
	// Отберем только счета, подлежащие закрытию
	МассивСчетаДляПроверки = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхПоЭталонномуПлануСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетСсылка)
			И СтрокаТаблицы.ПодлежитЗакрытию = ТипЗакрытия Тогда
			МассивСчетаДляПроверки.Добавить(СтрокаТаблицы.СчетСсылка);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаМесяцев = ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета);
	
	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", 		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаОшибок.Колонки.Добавить("Счет", 				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("СчетПредставление", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("СуммаОстаток", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	ОтборПоОрганизации);
	Запрос.УстановитьПараметр("МассивСчетаДляПроверки", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетаДляПроверки));

	Счет44 = ПланыСчетов.Хозрасчетный.РасходыНаПродажу;
	Массив44 = Новый Массив;
	Массив44.Добавить(Счет44);
	Запрос.УстановитьПараметр("Счета44", 	БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив44));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В (&МассивСчетаДляПроверки), , Организация В (&Организация)) КАК ХозрасчетныйОстатки
	|";
	
	Если ТипЗакрытия = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки44ТранспортныеРасходы.Счет,
		|	-ХозрасчетныйОстатки44ТранспортныеРасходы.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонГраница,
		|			Счет В (&Счета44),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
		|			Организация В (&Организация)
		|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)) КАК ХозрасчетныйОстатки44ТранспортныеРасходы";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Остатки.Счет) КАК СчетПредставление,
	|	СУММА(ВТ_Остатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Счет
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Остатки.СуммаОстаток) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Остатки.Счет";
	
	Если ТипЗакрытия = 2 Тогда
		// Необходимо анализировать счет в целом, а не отдельные субсчета.
		ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ
		|	СУММА(СуммаОстаток)
		|ПО
		|	Счет ИЕРАРХИЯ";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого СтрокаПериода Из ТаблицаМесяцев Цикл
	
		Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонецДня(СтрокаПериода.КонПериода), ВидГраницы.Включая));
	
		РезультатЗапроса = Запрос.Выполнить();
		Если ТипЗакрытия = 1 Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ПериодМесяц = СтрокаПериода.НачПериода;
			КонецЦикла;
		Иначе
			ВыборкаПоСчетам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСчетам.Следующий() Цикл
				Если МассивСчетаДляПроверки.Найти(ВыборкаПоСчетам.Счет) <> Неопределено
					И ВыборкаПоСчетам.СуммаОстаток <> 0 Тогда
					НоваяСтрока = ТаблицаОшибок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСчетам);
					НоваяСтрока.ПериодМесяц = СтрокаПериода.НачПериода;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним тексты описания ошибок
	Для Каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		СтрокаЭталонногоПланаСчетов = ТаблицаДанныхПоЭталонномуПлануСчетов.Найти(СтрокаОшибки.Счет);
		Если СтрокаЭталонногоПланаСчетов <> Неопределено Тогда
			СтрокаОшибки.Ошибка = СтрокаЭталонногоПланаСчетов.ТекстОшибкиСчетНеЗакрыт;
		Иначе
			СтрокаОшибки.Ошибка = НСтр("ru = 'Счет закрывается ежемесячно и сальдо на отчетную дату не имеет.'");
		КонецЕсли;
		
		// Расшифровка с помощью карточки счета.
		СтрокаОшибки.Расшифровка = Новый Структура();
		СтрокаОшибки.Расшифровка.Вставить("Идентификатор", 	СтрокаПроверки.Идентификатор);
		СтрокаОшибки.Расшифровка.Вставить("НачалоПериода", 	Макс(СтрокаОшибки.ПериодМесяц, ПараметрыОтчета.НачалоПериода));
		СтрокаОшибки.Расшифровка.Вставить("КонецПериода", 	Мин(КонецМесяца(СтрокаОшибки.ПериодМесяц), КонецДня(ПараметрыОтчета.КонецПериода)));
		СтрокаОшибки.Расшифровка.Вставить("Счет", 			СтрокаОшибки.Счет);
		
	КонецЦикла;
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ПроверитьСоответствиеОстатковИАктивностиСчетов(СтрокаПроверки, ПараметрыОтчета)

	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", 		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаОшибок.Колонки.Добавить("Счет", 				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("СчетПредставление", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("СуммаОстаток", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");

	ТаблицаМесяцев = ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСубконто.Ссылка КАК Счет,
	|	СУММА(ВЫБОР
	|			КОГДА ВидыСубконто.Суммовой
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЕстьСуммовойУчет,
	|	СУММА(ВЫБОР
	|			КОГДА ВидыСубконто.Количественный И ВидыСубконто.ТолькоОбороты
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТолькоОборотыПоКоличеству,
	|	КОЛИЧЕСТВО(*) КАК КоличествоСубконто
	|ПОМЕСТИТЬ ВТ_НастройкиСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыСубконто.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Счет.Валютный, ЛОЖЬ) КАК Валютный,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Счет.Количественный, ЛОЖЬ) КАК Количественный,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Счет.Забалансовый, ЛОЖЬ) КАК Забалансовый,
	|	ХозрасчетныйОстатки.Счет.Вид КАК Вид,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетов.ЕстьСуммовойУчет ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА ВТ_НастройкиСчетов.ЕстьСуммовойУчет > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСуммовойУчет,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетов.ТолькоОборотыПоКоличеству ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВТ_НастройкиСчетов.ТолькоОборотыПоКоличеству = ВТ_НастройкиСчетов.КоличествоСубконто
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоОборотыПоКоличеству
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, , , Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиСчетов КАК ВТ_НастройкиСчетов
	|		ПО ХозрасчетныйОстатки.Счет = ВТ_НастройкиСчетов.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Счет";
	
	Для Каждого СтрокаПериода Из ТаблицаМесяцев Цикл
	
		Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонецДня(СтрокаПериода.КонПериода), ВидГраницы.Включая));
	
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			ТекстОшибки = "";
		
			ТекстСтрока = "";
			Если Выборка.Вид = ВидСчета.Активный Тогда
				Если Выборка.СуммаОстаток < 0 Тогда
					ТекстСтрока = НСтр("ru = 'Отрицательный остаток в рублях по дебету активного счета'");
				КонецЕсли;
			ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
				Если Выборка.СуммаОстаток > 0 Тогда
					ТекстСтрока = НСтр("ru = 'Отрицательный остаток в рублях по кредиту пассивного счета'");
				КонецЕсли;
			КонецЕсли;
			ТекстОшибки = ТекстСтрока;
		
			Если Выборка.Валютный Тогда
				ТекстСтрока = "";
				Если Выборка.Вид = ВидСчета.Активный Тогда
					Если Выборка.ВалютнаяСуммаОстаток < 0 Тогда
						ТекстСтрока = НСтр("ru = 'Отрицательный остаток в валюте по дебету активного счета'");
					КонецЕсли;
				ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
					Если Выборка.ВалютнаяСуммаОстаток > 0 Тогда
						ТекстСтрока = НСтр("ru = 'Отрицательный остаток в валюте по кредиту пассивного счета'");
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекстСтрока) Тогда
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС;
					КонецЕсли;
					ТекстОшибки = ТекстОшибки + ТекстСтрока;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.Количественный Тогда
				ТекстСтрока = "";
				
				Если Выборка.КоличествоОстаток = 0 И Выборка.СуммаОстаток <> 0 И НЕ Выборка.ТолькоОборотыПоКоличеству Тогда
					ТекстСтрока = НСтр("ru = 'Отсутствует остаток в количественном выражении при остатке в денежном выражении'");
				ИначеЕсли Выборка.КоличествоОстаток <> 0 И Выборка.СуммаОстаток = 0 И Выборка.ЕстьСуммовойУчет Тогда
					ТекстСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Отсутствует остаток в денежном выражении при остатке в количественном выражении %1'"),
						Формат(Выборка.КоличествоОстаток, "ЧЦ=15; ЧДЦ=3"));
				ИначеЕсли Выборка.Вид = ВидСчета.Активный Тогда
					Если Выборка.КоличествоОстаток < 0 Тогда
						ТекстСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Отрицательный остаток по количеству по дебету активного счета'"),
							Формат(Выборка.КоличествоОстаток, "ЧЦ=15; ЧДЦ=3"));
					КонецЕсли;
				ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
					Если Выборка.КоличествоОстаток > 0 Тогда
						ТекстСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Отрицательный остаток по количеству по кредиту пассивного счета'"),
							Формат(Выборка.КоличествоОстаток, "ЧЦ=15; ЧДЦ=3"));
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекстСтрока) Тогда
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС;
					КонецЕсли;
					ТекстОшибки = ТекстОшибки + ТекстСтрока;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ПериодМесяц = СтрокаПериода.НачПериода;
				НоваяСтрока.СуммаОстаток = Выборка.СуммаОстаток;
				НоваяСтрока.Ошибка = ТекстОшибки;
				НоваяСтрока.Расшифровка = Новый Структура();
				НоваяСтрока.Расшифровка.Вставить("Идентификатор",	СтрокаПроверки.Идентификатор);
				НоваяСтрока.Расшифровка.Вставить("НачалоПериода", 	СтрокаПериода.НачПериода);
				НоваяСтрока.Расшифровка.Вставить("КонецПериода", 	СтрокаПериода.КонПериода);
				НоваяСтрока.Расшифровка.Вставить("Счет", 			Выборка.Счет);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;

	Запрос.МенеджерВременныхТаблиц.Закрыть();

	Возврат ТаблицаОшибок;

КонецФункции

Функция ПроверитьПереоценкаВалютыПустойДокументРасчетов(СтрокаПроверки, ПараметрыОтчета)
	
	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТиповДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", 		ОписаниеТиповДата);
	ТаблицаОшибок.Колонки.Добавить("Счет", 				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("СчетПредставление", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Субконто1");
	ТаблицаОшибок.Колонки.Добавить("Субконто2");
	ТаблицаОшибок.Колонки.Добавить("СуммаВРублях", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("СуммаВВалюте", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");

	// Вызовем общую процедуру переоценки, подготовив необходимые ей параметры.

	ТаблицаРеквизиты = Новый ТаблицаЗначений;
	ТаблицаРеквизиты.Колонки.Добавить("Период", 		ОписаниеТиповДата);
	
	ТаблицаРеквизиты.Колонки.Добавить("Регистратор", 	    Новый ОписаниеТипов("ДокументСсылка.РегламентнаяОперация"));
	ТаблицаРеквизиты.Колонки.Добавить("Организация", 	    Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРеквизиты.Колонки.Добавить("ВалютаДокумента", 	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Реквизиты = ТаблицаРеквизиты.Добавить();
	Реквизиты.Организация 		= ПараметрыОтчета.Организация;
	Реквизиты.ВалютаДокумента 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Движения = Новый Структура();
	Движения.Вставить("Хозрасчетный", Неопределено);
	
	ТаблицаМесяцев = ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета);
	
	СоответствиеТаблицПереоценкиПоПериодам = Новый Соответствие;
	
	СоответствиеСвойствСчетов = Новый Соответствие; // свойства счетов кэшируются
	
	Для Каждого СтрокаПериода Из ТаблицаМесяцев Цикл
		
		Реквизиты.Период = СтрокаПериода.КонПериода;
		ТаблицаПереоценки = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(ТаблицаРеквизиты, Движения, Ложь,, Истина);
		
		СоответствиеТаблицПереоценкиПоПериодам.Вставить(Реквизиты.Период, ТаблицаПереоценки.Скопировать());
		
		Если ТаблицаПереоценки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ТаблицаДляОбработки            = ТаблицаПереоценки.Скопировать(Новый Структура("ПризнакОшибки", Истина));
		
		// Теперь выберем из таблицы по ошбкам только те строки, которые описывают пустую валюту остатков 
		ТаблицаСПроверяемойОшибкой = ТаблицаДляОбработки.Скопировать(Новый Структура("ВидОшибки", 2));
		
		Для Каждого СтрокаТаблицы Из ТаблицаСПроверяемойОшибкой Цикл
			
			НоваяСтрока = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ПериодМесяц = СтрокаПериода.НачПериода;
			НоваяСтрока.Ошибка = НСтр("ru = 'Незаполнено субконто ""Документ расчетов с контрагентом""'");
			
			НоваяСтрока.Расшифровка = Новый Структура();
			НоваяСтрока.Расшифровка.Вставить("Идентификатор",	СтрокаПроверки.Идентификатор);
			НоваяСтрока.Расшифровка.Вставить("НачалоПериода",	СтрокаПериода.НачПериода);
			НоваяСтрока.Расшифровка.Вставить("КонецПериода",	СтрокаПериода.КонПериода);
			НоваяСтрока.Расшифровка.Вставить("Счет",			СтрокаТаблицы.Счет);
			
			Отборы = Новый Структура;
			
			Группировка = Новый Массив;
			
			СвойстваСчета = СоответствиеСвойствСчетов[СтрокаТаблицы.Счет];
			
			Если СвойстваСчета = Неопределено Тогда
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);;
				СоответствиеСвойствСчетов.Вставить(СтрокаТаблицы.Счет, СвойстваСчета);
			КонецЕсли;
			
			Если СвойстваСчета["УчетПоПодразделениям"] Тогда
				
				Структура = Новый Структура;
				
				Структура.Вставить("Поле",           "Подразделение");
				Структура.Вставить("Представление",  "Подразделение");
				Структура.Вставить("Использование",  Истина);
				Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
				
				Группировка.Добавить(Структура);
				
			КонецЕсли;	
			
			КоличествоСубконтоСчета = СвойстваСчета.КоличествоСубконто;
			
			Для НомерСубконто = 1 по КоличествоСубконтоСчета Цикл
				
				ИспользоватьСубконто = НЕ СвойстваСчета["ВидСубконто"+НомерСубконто+"ТолькоОбороты"];
				
				Если НомерСубконто < 3 Тогда
					
					Если ИспользоватьСубконто Тогда
						Отборы.Вставить("Субконто"+НомерСубконто, СтрокаТаблицы["Субконто"+НомерСубконто]);
					КонецЕсли;
					
				Иначе
					
					Если ИспользоватьСубконто Тогда
						
						Структура = Новый Структура;
						
						Структура.Вставить("Поле",           "Субконто"+НомерСубконто);
						Структура.Вставить("Представление",  СвойстваСчета["ВидСубконто"+НомерСубконто+"Наименование"]);
						Структура.Вставить("Использование",  Истина);
						Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
						
						Группировка.Добавить(Структура);
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			Отборы.Вставить("Валюта", СтрокаТаблицы.Валюта);
			
			НоваяСтрока.Расшифровка.Вставить("Отбор", Отборы);
			НоваяСтрока.Расшифровка.Вставить("Группировка", Группировка);
			
		КонецЦикла;	
		
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("ПереоценкаВалютыСоответствиеТаблицПереоценокПоПериодам", СоответствиеТаблицПереоценкиПоПериодам);

	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ПроверитьПереоценкаВалютыПустаяВалюта(СтрокаПроверки, ПараметрыОтчета)
	
	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТиповДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", 		ОписаниеТиповДата);
	ТаблицаОшибок.Колонки.Добавить("Счет", 				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("СчетПредставление", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Субконто1");
	ТаблицаОшибок.Колонки.Добавить("Субконто2");
	ТаблицаОшибок.Колонки.Добавить("СуммаВРублях", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("СуммаВВалюте", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");
	
	СоответствиеСвойствСчетов = Новый Соответствие; // свойства счетов кэшируются
	
	Если НЕ ПараметрыОтчета.Свойство("ПереоценкаВалютыСоответствиеТаблицПереоценокПоПериодам") Тогда
		
		// Вызовем общую процедуру переоценки, подготовив необходимые ей параметры.
		
		ТаблицаРеквизиты = Новый ТаблицаЗначений;
		ТаблицаРеквизиты.Колонки.Добавить("Период", 		ОписаниеТиповДата);
		
		ТаблицаРеквизиты.Колонки.Добавить("Регистратор", 	    Новый ОписаниеТипов("ДокументСсылка.РегламентнаяОперация"));
		ТаблицаРеквизиты.Колонки.Добавить("Организация", 	    Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаРеквизиты.Колонки.Добавить("ВалютаДокумента", 	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
		Реквизиты = ТаблицаРеквизиты.Добавить();
		Реквизиты.Организация 		= ПараметрыОтчета.Организация;
		Реквизиты.ВалютаДокумента 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Движения = Новый Структура();
		Движения.Вставить("Хозрасчетный", Неопределено);
		
		ТаблицаМесяцев = ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета);
		
		СоответствиеТаблицПереоценкиПоПериодам = Новый Соответствие;
		
		Для Каждого СтрокаПериода Из ТаблицаМесяцев Цикл
			
			Реквизиты.Период = СтрокаПериода.КонПериода;
			ТаблицаПереоценки = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(ТаблицаРеквизиты, Движения, Ложь,,Истина);
			
			СоответствиеТаблицПереоценкиПоПериодам.Вставить(Реквизиты.Период, ТаблицаПереоценки.Скопировать());
			
			Если ТаблицаПереоценки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ТаблицаДляОбработки            = ТаблицаПереоценки.Скопировать(Новый Структура("ПризнакОшибки", Истина));
			
			// Теперь выберем из таблицы по ошбкам только те строки, которые описывают пустую валюту остатков 
			ТаблицаСПроверяемойОшибкой = ТаблицаДляОбработки.Скопировать(Новый Структура("ВидОшибки", 1));
			
			ТаблицаСПроверяемойОшибкой.Свернуть("Счет, СчетПредставление, Валюта, ВалютаПредставление, КурсПереоценки, Субконто1, Субконто2", "СуммаВВалюте, СуммаВРублях");
			
			Для Каждого СтрокаТаблицы Из ТаблицаСПроверяемойОшибкой Цикл
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ПериодМесяц = СтрокаПериода.НачПериода;
				НоваяСтрока.Ошибка = НСтр("ru = 'Незаполнена валюта'");
				
				НоваяСтрока.Расшифровка = Новый Структура();
				НоваяСтрока.Расшифровка.Вставить("Идентификатор",	СтрокаПроверки.Идентификатор);
				НоваяСтрока.Расшифровка.Вставить("НачалоПериода",	СтрокаПериода.НачПериода);
				НоваяСтрока.Расшифровка.Вставить("КонецПериода",	СтрокаПериода.КонПериода);
				НоваяСтрока.Расшифровка.Вставить("Счет",			СтрокаТаблицы.Счет);
				
				Отборы = Новый Структура;
				
				Группировка = Новый Массив;

				СвойстваСчета = СоответствиеСвойствСчетов[СтрокаТаблицы.Счет];
				
				Если СвойстваСчета = Неопределено Тогда
					СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);;
					СоответствиеСвойствСчетов.Вставить(СтрокаТаблицы.Счет, СвойстваСчета);
				КонецЕсли;
				
				Если СвойстваСчета["УчетПоПодразделениям"] Тогда
					
					Структура = Новый Структура;
					
					Структура.Вставить("Поле",           "Подразделение");
					Структура.Вставить("Представление",  "Подразделение");
					Структура.Вставить("Использование",  Истина);
					Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
					
					Группировка.Добавить(Структура);
					
				КонецЕсли;	
				
				КоличествоСубконтоСчета = СвойстваСчета.КоличествоСубконто;
				
				Для НомерСубконто = 1 по КоличествоСубконтоСчета Цикл
					
					ИспользоватьСубконто = НЕ СвойстваСчета["ВидСубконто"+НомерСубконто+"ТолькоОбороты"];
					
					Если НомерСубконто < 3 Тогда
					
						Если ИспользоватьСубконто Тогда
							Отборы.Вставить("Субконто"+НомерСубконто, СтрокаТаблицы["Субконто"+НомерСубконто]);
						КонецЕсли;
						
					Иначе
						
						Если ИспользоватьСубконто Тогда
							
							Структура = Новый Структура;
							
							Структура.Вставить("Поле",           "Субконто"+НомерСубконто);
							Структура.Вставить("Представление",  СвойстваСчета["ВидСубконто"+НомерСубконто+"Наименование"]);
							Структура.Вставить("Использование",  Истина);
							Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
							
							Группировка.Добавить(Структура);
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
				Структура = Новый Структура;
				
				Структура.Вставить("Поле",           "Валюта");
				Структура.Вставить("Представление",  "Валюта");
				Структура.Вставить("Использование",  Истина);
				Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
				
				Группировка.Добавить(Структура);
				
				Отборы.Вставить("Валюта", СтрокаТаблицы.Валюта);
				
				НоваяСтрока.Расшифровка.Вставить("Отбор", Отборы);
				НоваяСтрока.Расшифровка.Вставить("Группировка", Группировка);
				
			КонецЦикла;	
			
		КонецЦикла;
		
		ПараметрыОтчета.Вставить("ПереоценкаВалютыСоответствиеТаблицПереоценокПоПериодам", СоответствиеТаблицПереоценкиПоПериодам);
		
	Иначе
		
		СоответствиеТаблицПереоценкиПоПериодам = ПараметрыОтчета.ПереоценкаВалютыСоответствиеТаблицПереоценокПоПериодам;
		
		Для Каждого ЭлементКоллекции Из СоответствиеТаблицПереоценкиПоПериодам Цикл
			
			КонецПериода      = ЭлементКоллекции.Ключ;
			ТаблицаПереоценки = ЭлементКоллекции.Значение;
			
			Если ТаблицаПереоценки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ТаблицаДляОбработки            = ТаблицаПереоценки.Скопировать(Новый Структура("ПризнакОшибки", Истина));
			
			// Теперь выберем из таблицы по ошбкам только те строки, которые описывают пустую валюту остатков 
			ТаблицаСПроверяемойОшибкой = ТаблицаДляОбработки.Скопировать(Новый Структура("ВидОшибки", 1));
			
			ТаблицаСПроверяемойОшибкой.Свернуть("Счет, СчетПредставление, Валюта, ВалютаПредставление, КурсПереоценки, Субконто1, Субконто2", "СуммаВВалюте, СуммаВРублях");
			
			Для Каждого СтрокаТаблицы Из ТаблицаСПроверяемойОшибкой Цикл
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ПериодМесяц = НачалоМесяца(КонецПериода);
				НоваяСтрока.Ошибка = НСтр("ru = 'Незаполнена валюта'");
				
				НоваяСтрока.Расшифровка = Новый Структура();
				НоваяСтрока.Расшифровка.Вставить("Идентификатор",	СтрокаПроверки.Идентификатор);
				НоваяСтрока.Расшифровка.Вставить("НачалоПериода",	НачалоМесяца(КонецПериода));
				НоваяСтрока.Расшифровка.Вставить("КонецПериода",	КонецПериода);
				НоваяСтрока.Расшифровка.Вставить("Счет",			СтрокаТаблицы.Счет);
				
				Отборы = Новый Структура;
				
				Группировка = Новый Массив;

				СвойстваСчета = СоответствиеСвойствСчетов[СтрокаТаблицы.Счет];
				
				Если СвойстваСчета = Неопределено Тогда
					СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);;
					СоответствиеСвойствСчетов.Вставить(СтрокаТаблицы.Счет, СвойстваСчета);
				КонецЕсли;
				
				Если СвойстваСчета["УчетПоПодразделениям"] Тогда
					
					Структура = Новый Структура;
					
					Структура.Вставить("Поле",           "Подразделение");
					Структура.Вставить("Представление",  "Подразделение");
					Структура.Вставить("Использование",  Истина);
					Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
					
					Группировка.Добавить(Структура);
					
				КонецЕсли;	
				
				КоличествоСубконтоСчета = СвойстваСчета.КоличествоСубконто;
				
				Для НомерСубконто = 1 по КоличествоСубконтоСчета Цикл
					
					ИспользоватьСубконто = НЕ СвойстваСчета["ВидСубконто"+НомерСубконто+"ТолькоОбороты"];
					
					Если НомерСубконто < 3 Тогда
					
						Если ИспользоватьСубконто Тогда
							Отборы.Вставить("Субконто"+НомерСубконто, СтрокаТаблицы["Субконто"+НомерСубконто]);
						КонецЕсли;
						
					Иначе
						
						Если ИспользоватьСубконто Тогда
							
							Структура = Новый Структура;
							
							Структура.Вставить("Поле",           "Субконто"+НомерСубконто);
							Структура.Вставить("Представление",  СвойстваСчета["ВидСубконто"+НомерСубконто+"Наименование"]);
							Структура.Вставить("Использование",  Истина);
							Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
							
							Группировка.Добавить(Структура);
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
				Структура = Новый Структура;
				
				Структура.Вставить("Поле",           "Валюта");
				Структура.Вставить("Представление",  "Валюта");
				Структура.Вставить("Использование",  Истина);
				Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
				
				Группировка.Добавить(Структура);
				
				Отборы.Вставить("Валюта", СтрокаТаблицы.Валюта);
				
				НоваяСтрока.Расшифровка.Вставить("Отбор", Отборы);
				НоваяСтрока.Расшифровка.Вставить("Группировка", Группировка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;	

	Возврат ТаблицаОшибок;

КонецФункции

Функция ПроверитьПереоценкаВалюты(СтрокаПроверки, ПараметрыОтчета)

	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТиповДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", 		ОписаниеТиповДата);
	ТаблицаОшибок.Колонки.Добавить("Счет", 				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("СчетПредставление", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Субконто1");
	ТаблицаОшибок.Колонки.Добавить("Субконто2");
	ТаблицаОшибок.Колонки.Добавить("СуммаВРублях", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("СуммаВВалюте", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");
	
	СоответствиеСвойствСчетов = Новый Соответствие; // свойства счетов кэшируются
	
	Если НЕ ПараметрыОтчета.Свойство("ПереоценкаВалютыСоответствиеТаблицПереоценокПоПериодам") Тогда

		// Вызовем общую процедуру переоценки, подготовив необходимые ей параметры.
		
		ТаблицаРеквизиты = Новый ТаблицаЗначений;
		ТаблицаРеквизиты.Колонки.Добавить("Период", 		ОписаниеТиповДата);
		
		ТаблицаРеквизиты.Колонки.Добавить("Регистратор", 	    Новый ОписаниеТипов("ДокументСсылка.РегламентнаяОперация"));
		ТаблицаРеквизиты.Колонки.Добавить("Организация", 	    Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаРеквизиты.Колонки.Добавить("ВалютаДокумента", 	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
		Реквизиты = ТаблицаРеквизиты.Добавить();
		Реквизиты.Организация 		= ПараметрыОтчета.Организация;
		Реквизиты.ВалютаДокумента 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Движения = Новый Структура();
		Движения.Вставить("Хозрасчетный", Неопределено);
		
		ТаблицаМесяцев = ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета);
		
		Для Каждого СтрокаПериода Из ТаблицаМесяцев Цикл
			
			Реквизиты.Период = СтрокаПериода.КонПериода;
			ТаблицаПереоценки = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(ТаблицаРеквизиты, Движения, Ложь,, Истина);
			
			Если ТаблицаПереоценки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ТаблицаПодлежащихПереоценке = ТаблицаПереоценки.Скопировать(Новый Структура("ПризнакОшибки", Ложь));
			
			ТаблицаПодлежащихПереоценке.Свернуть("Счет, СчетПредставление, Валюта, ВалютаПредставление, КурсПереоценки, Субконто1, Субконто2", "СуммаВВалюте, СуммаВРублях");
			Для Каждого СтрокаПереоценки Из ТаблицаПодлежащихПереоценке Цикл
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПереоценки);
				НоваяСтрока.ПериодМесяц = СтрокаПериода.НачПериода;
				НоваяСтрока.Ошибка = НСтр("ru = 'Необходимо пересчитать валютные остатки по курсу ЦБ РФ'");
				
				НоваяСтрока.Расшифровка = Новый Структура();
				НоваяСтрока.Расшифровка.Вставить("Идентификатор",	СтрокаПроверки.Идентификатор);
				НоваяСтрока.Расшифровка.Вставить("НачалоПериода",	СтрокаПериода.НачПериода);
				НоваяСтрока.Расшифровка.Вставить("КонецПериода",	СтрокаПериода.КонПериода);
				НоваяСтрока.Расшифровка.Вставить("Счет",			СтрокаПереоценки.Счет);
				
				Отборы = Новый Структура;
				
				Группировка = Новый Массив;

				СвойстваСчета = СоответствиеСвойствСчетов[СтрокаПереоценки.Счет];
				
				Если СвойстваСчета = Неопределено Тогда
					СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПереоценки.Счет);;
					СоответствиеСвойствСчетов.Вставить(СтрокаПереоценки.Счет, СвойстваСчета);
				КонецЕсли;
				
				Если СвойстваСчета["УчетПоПодразделениям"] Тогда
					
					Структура = Новый Структура;
					
					Структура.Вставить("Поле",           "Подразделение");
					Структура.Вставить("Представление",  "Подразделение");
					Структура.Вставить("Использование",  Истина);
					Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
					
					Группировка.Добавить(Структура);
					
				КонецЕсли;	
				
				КоличествоСубконтоСчета = СвойстваСчета.КоличествоСубконто;
				
				Для НомерСубконто = 1 по КоличествоСубконтоСчета Цикл
					
					ИспользоватьСубконто = НЕ СвойстваСчета["ВидСубконто"+НомерСубконто+"ТолькоОбороты"];
					
					Если НомерСубконто < 3 Тогда
					
						Если ИспользоватьСубконто Тогда
							Отборы.Вставить("Субконто"+НомерСубконто, СтрокаПереоценки["Субконто"+НомерСубконто]);
						КонецЕсли;
						
					Иначе
						
						Если ИспользоватьСубконто Тогда
							
							Структура = Новый Структура;
							
							Структура.Вставить("Поле",           "Субконто"+НомерСубконто);
							Структура.Вставить("Представление",  СвойстваСчета["ВидСубконто"+НомерСубконто+"Наименование"]);
							Структура.Вставить("Использование",  Истина);
							Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
							
							Группировка.Добавить(Структура);
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
				Структура = Новый Структура;
				
				Структура.Вставить("Поле",           "Валюта");
				Структура.Вставить("Представление",  "Валюта");
				Структура.Вставить("Использование",  Истина);
				Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
				
				Группировка.Добавить(Структура);
				
				НоваяСтрока.Расшифровка.Вставить("Отбор", Отборы);
				НоваяСтрока.Расшифровка.Вставить("Группировка", Группировка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		СоответствиеТаблицПереоценкиПоПериодам = ПараметрыОтчета.ПереоценкаВалютыСоответствиеТаблицПереоценокПоПериодам;
		
		Для Каждого ЭлементКоллекции Из СоответствиеТаблицПереоценкиПоПериодам Цикл
			
			КонецПериода      = ЭлементКоллекции.Ключ;
			ТаблицаПереоценки = ЭлементКоллекции.Значение;
			
			Если ТаблицаПереоценки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ТаблицаПодлежащихПереоценке = ТаблицаПереоценки.Скопировать(Новый Структура("ПризнакОшибки", Ложь));
			
			ТаблицаПодлежащихПереоценке.Свернуть("Счет, СчетПредставление, Валюта, ВалютаПредставление, КурсПереоценки, Субконто1, Субконто2", "СуммаВВалюте, СуммаВРублях");
			Для Каждого СтрокаПереоценки Из ТаблицаПодлежащихПереоценке Цикл
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПереоценки);
				НоваяСтрока.ПериодМесяц = НачалоМесяца(КонецПериода);
				НоваяСтрока.Ошибка = НСтр("ru = 'Необходимо пересчитать валютные остатки по курсу ЦБ РФ'");
				
				НоваяСтрока.Расшифровка = Новый Структура();
				НоваяСтрока.Расшифровка.Вставить("Идентификатор",	СтрокаПроверки.Идентификатор);
				НоваяСтрока.Расшифровка.Вставить("НачалоПериода",	НачалоМесяца(КонецПериода));
				НоваяСтрока.Расшифровка.Вставить("КонецПериода",	КонецПериода);
				НоваяСтрока.Расшифровка.Вставить("Счет",			СтрокаПереоценки.Счет);
				
				Отборы = Новый Структура;
				
				Группировка = Новый Массив;

				СвойстваСчета = СоответствиеСвойствСчетов[СтрокаПереоценки.Счет];
				
				Если СвойстваСчета = Неопределено Тогда
					СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПереоценки.Счет);;
					СоответствиеСвойствСчетов.Вставить(СтрокаПереоценки.Счет, СвойстваСчета);
				КонецЕсли;
				
				Если СвойстваСчета["УчетПоПодразделениям"] Тогда
					
					Структура = Новый Структура;
					
					Структура.Вставить("Поле",           "Подразделение");
					Структура.Вставить("Представление",  "Подразделение");
					Структура.Вставить("Использование",  Истина);
					Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
					
					Группировка.Добавить(Структура);
					
				КонецЕсли;	
				
				КоличествоСубконтоСчета = СвойстваСчета.КоличествоСубконто;
				
				Для НомерСубконто = 1 по КоличествоСубконтоСчета Цикл
					
					ИспользоватьСубконто = НЕ СвойстваСчета["ВидСубконто"+НомерСубконто+"ТолькоОбороты"];
					
					Если НомерСубконто < 3 Тогда
					
						Если ИспользоватьСубконто Тогда
							Отборы.Вставить("Субконто"+НомерСубконто, СтрокаПереоценки["Субконто"+НомерСубконто]);
						КонецЕсли;
						
					Иначе
						
						Если ИспользоватьСубконто Тогда
							
							Структура = Новый Структура;
							
							Структура.Вставить("Поле",           "Субконто"+НомерСубконто);
							Структура.Вставить("Представление",  СвойстваСчета["ВидСубконто"+НомерСубконто+"Наименование"]);
							Структура.Вставить("Использование",  Истина);
							Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
							
							Группировка.Добавить(Структура);
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
				Структура = Новый Структура;
				
				Структура.Вставить("Поле",           "Валюта");
				Структура.Вставить("Представление",  "Валюта");
				Структура.Вставить("Использование",  Истина);
				Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
				
				Группировка.Добавить(Структура);
				
				НоваяСтрока.Расшифровка.Вставить("Отбор", Отборы);
				НоваяСтрока.Расшифровка.Вставить("Группировка", Группировка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;	

	Возврат ТаблицаОшибок;

КонецФункции

Функция ПолучитьТаблицуНедопустимыхПроводок()

	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");

	ТаблицаНедопустимыхПроводок = Новый ТаблицаЗначений;
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("СчетДт", ОписаниеТиповСтрока);
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("СчетКт", ОписаниеТиповСтрока);
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("ИсключениеДт");
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("ИсключениеКт");
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("Ошибка", ОписаниеТиповСтрока);
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("ДопустимаТолькоПриЗакрытииГода", ОписаниеТиповБулево);
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("ЮрФизЛицо", ОписаниеТиповСтрока);
	
	ТаблицаНедопустимыхПроводок.Индексы.Добавить("СчетДт, СчетКт");
	
	Макет = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("СвойстваСчетов");
	ТекОбласть = Макет.Область("НедопустимыеПроводки");
	
	СтруктураПоиска = Новый Структура("СчетДт, СчетКт");
	
	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		
		ДопустимаТолькоПриЗакрытииГода = СокрЛП(Макет.Область(Ном, 1).Текст);
		СчетДт = СокрЛП(Макет.Область(Ном, 2).Текст);
		СчетКт = СокрЛП(Макет.Область(Ном, 3).Текст);
		ИсключениеДт = СокрЛП(Макет.Область(Ном, 5).Текст);
		ИсключениеКт = СокрЛП(Макет.Область(Ном, 6).Текст);
		ЮрФизЛицо  	 = СокрЛП(Макет.Область(Ном, 7).Текст);
		ТекстОшибки  = СокрЛП(Макет.Область(Ном, 8).Текст);
	
		МассивСчетДт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СчетДт, ",", Ложь);
		МассивСчетКт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СчетКт, ",", Ложь);
		
		МассивИсключениеДт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключениеДт, ",", Истина);
		МассивИсключениеКт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключениеКт, ",", Истина);
		
		// Исключим возможные пробелы.
		Для Инд = 0 по МассивИсключениеДт.Количество() - 1 Цикл
			МассивИсключениеДт[Инд] = СокрЛП(МассивИсключениеДт[Инд]);
		КонецЦикла;

		Для Инд = 0 по МассивИсключениеКт.Количество() - 1 Цикл
			МассивИсключениеКт[Инд] = СокрЛП(МассивИсключениеКт[Инд]);
		КонецЦикла;
		
		// Некорректные счета Дт, Кт могут быть заданы списком, поэтому для каждой отдельной 
		// проводки создадим свою строку в таблице недопустимых проводок.
		Для Каждого СчетДт Из МассивСчетДт Цикл
			СтруктураПоиска.СчетДт = СокрЛП(СчетДт);
			
			Для Каждого Счет Из МассивСчетКт Цикл
			
				СтруктураПоиска.СчетКт = СокрЛП(Счет);
			
				НайденныеСтроки = ТаблицаНедопустимыхПроводок.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ТаблицаНедопустимыхПроводок.Добавить();
					НоваяСтрока.СчетДт 							= СокрЛП(СчетДт);
					НоваяСтрока.СчетКт 							= СокрЛП(Счет);
					НоваяСтрока.ИсключениеДт 					= МассивИсключениеДт;
					НоваяСтрока.ИсключениеКт 					= МассивИсключениеКт;
					НоваяСтрока.Ошибка  						= ТекстОшибки;
					НоваяСтрока.ДопустимаТолькоПриЗакрытииГода  = ?(ДопустимаТолькоПриЗакрытииГода = "1", Истина, Ложь);
					НоваяСтрока.ЮрФизЛицо 						= ЮрФизЛицо;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНедопустимыхПроводок.Индексы.Добавить("СчетДт");
	ТаблицаНедопустимыхПроводок.Индексы.Добавить("СчетКт");
	
	Возврат ТаблицаНедопустимыхПроводок;

КонецФункции

Функция ПолучитьНедопустимыеПроводкиДляСчета(РеквизитыОрганизации, КодСчета, ДтКт, ТаблицаНедопустимыхПроводок, ЭтоЗакрытиеГода)

	СтруктураПоиска = Новый Структура();
	Если ЭтоЗакрытиеГода Тогда
		СтруктураПоиска.Вставить("ДопустимаТолькоПриЗакрытииГода", Ложь);
	КонецЕсли;
	
	ЭтоЮрЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	МассивСтрокТаблицыНедопустимыхПроводок = Новый Массив;
	
	МассивСоставляющиеСчета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодСчета, ".");
	УровеньСчета = МассивСоставляющиеСчета.Количество() - 1;
	Пока УровеньСчета >= 0 Цикл
		
		СчетДляПоиска = "";
		Для Инд = 0 По УровеньСчета Цикл
			Если ЗначениеЗаполнено(СчетДляПоиска) Тогда
				СчетДляПоиска = СчетДляПоиска + ".";
			КонецЕсли;
			СчетДляПоиска = СчетДляПоиска + МассивСоставляющиеСчета[Инд];
		КонецЦикла;
	
		СтруктураПоиска.Вставить("Счет" + ДтКт, СчетДляПоиска);
		МассивСтрокТаблицыНедопустимыхПроводок = ТаблицаНедопустимыхПроводок.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокТаблицыНедопустимыхПроводок.Количество() > 0 Тогда
			// Нашли настройку для счета, исключим из нее строки, которые не применяются
			// к текущей организаций из-за особенностей учета.
			
			Сч = МассивСтрокТаблицыНедопустимыхПроводок.Количество() - 1;
			Пока Сч >= 0 Цикл
				
				Если МассивСтрокТаблицыНедопустимыхПроводок[Сч].ЮрФизЛицо = "ЮЛ" И НЕ ЭтоЮрЛицо Тогда
					МассивСтрокТаблицыНедопустимыхПроводок.Удалить(Сч);
				ИначеЕсли МассивСтрокТаблицыНедопустимыхПроводок[Сч].ЮрФизЛицо = "ИП" И ЭтоЮрЛицо Тогда
					МассивСтрокТаблицыНедопустимыхПроводок.Удалить(Сч);
				КонецЕсли;
				
				Сч = Сч - 1;
			КонецЦикла;
			
			// Возвращаем то, что нашли.
			Прервать;
		КонецЕсли;
		
		УровеньСчета = УровеньСчета - 1;
		
	КонецЦикла;

	Возврат МассивСтрокТаблицыНедопустимыхПроводок;

КонецФункции

Функция НайтиСтрокуТаблицыНедопустимыхПроводокДляСчета(КодСчета, ДтКт, МассивСтрокТаблицыНедопустимыхПроводок)

	СтрокаДляВсехКорСчетов = Неопределено;
	Для Каждого СтрокаТаблицы Из МассивСтрокТаблицыНедопустимыхПроводок Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы["Счет" + ДтКт]) Тогда
			Если СравнитьКодыСчетовСУчетомИерархии(КодСчета, СтрокаТаблицы["Счет" + ДтКт]) Тогда
				Возврат СтрокаТаблицы;
			КонецЕсли;
		Иначе
			СтрокаДляВсехКорСчетов = СтрокаТаблицы;
		КонецЕсли;
	КонецЦикла;

	Если СтрокаДляВсехКорСчетов <> Неопределено Тогда
		// Ни в одной строке не было явно заданного запрета,
		// проверим явно заданные разрешения.
		МассивИсключений = СтрокаДляВсехКорСчетов["Исключение" + ДтКт];
		Для Каждого СчетИсключение Из МассивИсключений Цикл
			Если СравнитьКодыСчетовСУчетомИерархии(КодСчета, СчетИсключение) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтрокаДляВсехКорСчетов;

КонецФункции

Функция СравнитьКодыСчетовСУчетомИерархии(ИскомыйКодСчета, КодСчетаДляСравнения)
	
	Если ИскомыйКодСчета = КодСчетаДляСравнения Тогда
		Возврат Истина;
	Иначе
		Возврат СтрНайти(ИскомыйКодСчета, КодСчетаДляСравнения + ".") = 1;
	КонецЕсли;

КонецФункции

Функция ПроверитьКорректныеКорреспондецииСчетов(СтрокаПроверки, ПараметрыОтчета)

	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);

	ТаблицаНедопустимыхПроводок = ПолучитьТаблицуНедопустимыхПроводок();
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Документ");
	ТаблицаОшибок.Колонки.Добавить("ДокументПредставление", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("НомерСтроки", 			ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТаблицаОшибок.Колонки.Добавить("СчетДтКод", 		ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("СчетКтКод", 		ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Сумма", 			ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			ОписаниеТиповСтрока);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Период,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, МЕСЯЦ) КАК НачПериода1,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, МЕСЯЦ) КАК НачПериода2,
	|	Хозрасчетный.Регистратор КАК Документ,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(Хозрасчетный.Регистратор) КАК ДокументПредставление,
	|	Хозрасчетный.СчетДт КАК СчетДт,
	|	Хозрасчетный.СчетДт.Код КАК СчетДтКод,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	Хозрасчетный.СчетКт.Код КАК СчетКтКод,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|	И Хозрасчетный.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Активность
	|	И НЕ Хозрасчетный.СчетДт.Забалансовый
	|	И Хозрасчетный.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Период,
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетДт.Код,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.СчетКт.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетДтКод,
	|	СчетКтКод,
	|	Документ,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(НачПериода1),
	|	МАКСИМУМ(НачПериода2),
	|	МАКСИМУМ(СчетДтКод),
	|	МАКСИМУМ(СчетКтКод)
	|ПО
	|	СчетДт,
	|	СчетКт
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаПоДт = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураПоискаДт = Новый Структура;
	СтруктураПоискаКт = Новый Структура;

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация, "ЮридическоеФизическоеЛицо");

	Пока ВыборкаПоДт.Следующий() Цикл
	
		ВыборкаПоКт = ВыборкаПоДт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКт.Следующий() Цикл
		
			ЭтоЗакрытиеГода = (ВыборкаПоКт.НачПериода1 = ВыборкаПоКт.НачПериода2 И Месяц(ВыборкаПоКт.НачПериода1) = 12);
			СтрокаТаблицыНедопустимыхПроводок = Неопределено; 
		
			МассивСтрокТаблицыНедопустимыхПроводок = ПолучитьНедопустимыеПроводкиДляСчета(РеквизитыОрганизации, ВыборкаПоКт.СчетДтКод, "Дт", ТаблицаНедопустимыхПроводок, ЭтоЗакрытиеГода);
			Если МассивСтрокТаблицыНедопустимыхПроводок.Количество() > 0 Тогда
				СтрокаТаблицыНедопустимыхПроводок = НайтиСтрокуТаблицыНедопустимыхПроводокДляСчета(ВыборкаПоКт.СчетКтКод, "Кт", МассивСтрокТаблицыНедопустимыхПроводок);
			Иначе
				// Проверяем по счету Кт
				МассивСтрокТаблицыНедопустимыхПроводок = ПолучитьНедопустимыеПроводкиДляСчета(РеквизитыОрганизации, ВыборкаПоКт.СчетКтКод, "Кт", ТаблицаНедопустимыхПроводок, ЭтоЗакрытиеГода);
				Если МассивСтрокТаблицыНедопустимыхПроводок.Количество() > 0 Тогда
					СтрокаТаблицыНедопустимыхПроводок = НайтиСтрокуТаблицыНедопустимыхПроводокДляСчета(ВыборкаПоКт.СчетДтКод, "Дт", МассивСтрокТаблицыНедопустимыхПроводок);
				КонецЕсли; 
			КонецЕсли;
		
			Если СтрокаТаблицыНедопустимыхПроводок <> Неопределено Тогда
				// Найдены недопустимые проводки, выводим их в ошибки.
				Выборка = ВыборкаПоКт.Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = ТаблицаОшибок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Ошибка = СтрокаТаблицыНедопустимыхПроводок.Ошибка;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;

	Возврат ТаблицаОшибок;

КонецФункции

Функция ПроверитьОстаточнаяСтоимостьОС(СтрокаПроверки, ПараметрыОтчета)

	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТиповДата 	= ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);

	ТаблицаМесяцев = ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета);

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", ОписаниеТиповДата);
	ТаблицаОшибок.Колонки.Добавить("ОС");
	ТаблицаОшибок.Колонки.Добавить("ОСПредставление", 	ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("СуммаОстаток01_03", ОписаниеТиповЧисло15_2);
	ТаблицаОшибок.Колонки.Добавить("СуммаОстаток02_010", ОписаниеТиповЧисло15_2);
	ТаблицаОшибок.Колонки.Добавить("ОстаточнаяСтоимость", ОписаниеТиповЧисло15_2);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Массив01_03 = Новый Массив;
	Массив01_03.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);  		// 01
	Массив01_03.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ); 	// 03
	Запрос.УстановитьПараметр("Счета01_03", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив01_03));
	
	Массив02_010 = Новый Массив;
	Массив02_010.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств); // 02
	Массив02_010.Добавить(ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств); 		// 010
	Запрос.УстановитьПараметр("Счета02_010", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив02_010));
	
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОС,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток01_03,
	|	0 КАК СуммаОстаток02_010
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачПериода, Счет В (&Счета01_03), &ВидСубконтоОС, Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	0,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачПериода, Счет В (&Счета02_010), &ВидСубконтоОС, Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачПериода КАК ПериодМесяц,
	|	ВТ_Остатки.ОС,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Остатки.ОС) КАК ОСПредставление,
	|	СУММА(ВТ_Остатки.СуммаОстаток01_03) КАК СуммаОстаток01_03,
	|	СУММА(ВТ_Остатки.СуммаОстаток02_010) КАК СуммаОстаток02_010,
	|	СУММА(ВТ_Остатки.СуммаОстаток01_03 - ВТ_Остатки.СуммаОстаток02_010) КАК ОстаточнаяСтоимость
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.ОС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Остатки.СуммаОстаток01_03 - ВТ_Остатки.СуммаОстаток02_010) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Остатки.ОС
	|АВТОУПОРЯДОЧИВАНИЕ";

	Для Каждого СтрокаПериода Из ТаблицаМесяцев Цикл
	
		Запрос.УстановитьПараметр("НачПериода", СтрокаПериода.НачПериода);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	
	КонецЦикла;

	Возврат ТаблицаОшибок;

КонецФункции

Функция ПроверитьОкруглениеНачисленияНалогов(СтрокаПроверки, ПараметрыОтчета)
	
	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");
	ТаблицаОшибок.Колонки.Добавить("СчетКтКод", 		    ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Субконто1", 	        ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Субконто2", 	        ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Субконто3", 	        ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Сумма", 			    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			    ОписаниеТиповСтрока);
	
	Если ПараметрыОтчета.НачалоПериода < Дата(2014,01,01) Тогда 
		Возврат	ТаблицаОшибок;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	
	СчетаНалогов = Новый Массив();
	СчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.Акцизы);             //68.03
	СчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);   //68.04.1
	СчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.ЗемельныйНалог);     //68.06
	СчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.ТранспортныйНалог);  //68.07
	СчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.НалогНаИмущество);   //68.08
	СчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.НалогНаРекламу);     //68.09
	СчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы); //68.10
	СчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.ЕНВД);               //68.11
	СчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.ЕНприУСН);           //68.12
	Запрос.УстановитьПараметр("СчетаНалогов", СчетаНалогов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаНалогов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаНалогов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетКт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3
	|ПОМЕСТИТЬ НачисленныеНалоги
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНалогов.Счет
	|				ИЗ
	|					СчетаНалогов),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам)),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленныеНалоги.СчетКт,
	|	НачисленныеНалоги.СчетКт.Код КАК СчетКтКод,
	|	НачисленныеНалоги.Сумма,
	|	НачисленныеНалоги.Субконто1,
	|	НачисленныеНалоги.Субконто2,
	|	НачисленныеНалоги.Субконто3
	|ИЗ
	|	НачисленныеНалоги КАК НачисленныеНалоги
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетКтКод";
	
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сумма = Окр(Выборка.Сумма) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Ошибка = НСтр("ru = 'Сумма начисления налога содержит копейки'");
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Выборка.СчетКт);

		НоваяСтрока.Расшифровка = Новый Структура();
		НоваяСтрока.Расшифровка.Вставить("Идентификатор", 	СтрокаПроверки.Идентификатор);
		НоваяСтрока.Расшифровка.Вставить("СчетКт", 			Выборка.СчетКт);
		НоваяСтрока.Расшифровка.Вставить("НачалоПериода", 	НачалоМесяца(ПараметрыОтчета.НачалоПериода));
		НоваяСтрока.Расшифровка.Вставить("КонецПериода", 	КонецМесяца(ПараметрыОтчета.КонецПериода));
		
		Для Сч = 1 По СвойстваСчета.КоличествоСубконто Цикл
			НоваяСтрока.Расшифровка.Вставить("СубконтоКт" + Сч,		Выборка["Субконто" + Сч]);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОшибок;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
// Проверки раздела "Кассовые операции"

Функция ПроверитьНепроведенныеПКО_РКО(СтрокаПроверки, ПараметрыОтчета)
	
	Если ПроверитьПрименениеНПД(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер,
	|	&НаименованиеПКО КАК ВидДокумента,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	&НаименованиеРКО КАК ВидДокумента,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	
	Запрос.УстановитьПараметр("НаименованиеПКО", НСтр("ru='Поступление наличных'"));
	Запрос.УстановитьПараметр("НаименованиеРКО", НСтр("ru='Выдача наличных'"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПроверитьМинусыПоКассе(СтрокаПроверки, ПараметрыОтчета)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Дата,
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок КАК ПорядокСчета,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода, Счет В (&СчетаКассы), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Период,
	|	ПорядокСчета";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СчетаКассы",	   
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			СтрокаТабРезультата.Расшифровка.Вставить("Счет", СтрокаТабРезультата.Счет);
			СтрокаТабРезультата.Расшифровка.Вставить("НачалоПериода", СтрокаТабРезультата.Дата);
			СтрокаТабРезультата.Расшифровка.Вставить("КонецПериода", КонецДня(СтрокаТабРезультата.Дата));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьЛимитКассы(СтрокаПроверки, ПараметрыОтчета)
	
	Если ПроверитьПрименениеНПД(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Для индивидуальных предпринимателей лимит кассы с 01 июня 2014 не проверяется
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация);
	НеПроверятьДляИП = ПараметрыОтчета.НачалоПериода >= '20140601';
	Если Не ЭтоЮрЛицо и НеПроверятьДляИП Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Для индивидуальных предпринимателей соблюдение лимита остатков денег в кассе с 01.06.2014 г. не проверяется'");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Запрос.Текст = ПолучитьТекстЗапросаЛимитаКассыПоОбособленнымПодразделениям();
		Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
		Запрос.УстановитьПараметр("ПредставлениеПоОрганизации", НСтр("ru = '<По организации>'"));
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаЛимитаКассы();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	//Для индивидуальных предпринимателей лимит кассы проверяется до 01 июня 2014
	Если Не ЭтоЮрЛицо и ПараметрыОтчета.КонецПериода >= '20140601' Тогда
		Запрос.УстановитьПараметр("КонецПериода", 	КонецДня('20140531'));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СчетаКассы",	   
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	Если ТаблицаРезультата.Количество() > 0 Тогда
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		ТаблицаРезультата.Колонки.Добавить("Ошибка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл

			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
		
			Если СтрокаТабРезультата.ЛимитУстановлен Тогда
				СтрокаТабРезультата.Ошибка = СтрокаТабРезультата.Превышение;
			Иначе
				СтрокаТабРезультата.Ошибка = НСтр("ru = 'Лимит на дату не введен'");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьЛимитРасчетовСКонтрагентами(СтрокаПроверки, ПараметрыОтчета)
	
	// Определяем суммы расчетов наличными с контрагентами юр.лицами и ИП.
	// Расчеты с физическими лицами, не являющимися индивидуальными предпринимателями, 
	// не ограничены.
	// Индивидуальных предпринимателей определяем по заполненности регистрационного номера.

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК Выдано,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Получено
	|ПОМЕСТИТЬ ВТ_Хозрасчетный
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , , &ВидыСубконтоКонтрагентыДоговоры, &Организация = Организация, КорСчет В (&СчетаКассы), ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(ХозрасчетныйОбороты.СуммаОборотДт > &Лимит
	|			ИЛИ ХозрасчетныйОбороты.СуммаОборотКт > &Лимит)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Хозрасчетный.Контрагент,
	|	ВТ_Хозрасчетный.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ВТ_Хозрасчетный.Договор,
	|	ВТ_Хозрасчетный.Договор.Наименование КАК ДоговорНаименование,
	|	ВТ_Хозрасчетный.Выдано,
	|	ВТ_Хозрасчетный.Получено
	|ИЗ
	|	ВТ_Хозрасчетный КАК ВТ_Хозрасчетный
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_Хозрасчетный.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|					И ВТ_Хозрасчетный.Контрагент.РегистрационныйНомер = """"
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентНаименование,
	|	ДоговорНаименование";

	УсловияОтбораСчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();

	// Исключим из проверки движения по счетам учета денежных документов.
	УсловияОтбораСчетов.СчетаИсключения = Новый Массив;
	УсловияОтбораСчетов.СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);    // 50.03
	УсловияОтбораСчетов.СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал); // 50.23

	СчетаКассы = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПланыСчетов.Хозрасчетный.Касса), // 50
		УсловияОтбораСчетов);

	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("СчетаКассы",	СчетаКассы);
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Лимит",         100000);
	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", ВидыСубконтоКонтрагентыДоговоры);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			
			Если СтрокаТабРезультата.Выдано <> 0 Тогда
				СтрокаТабРезультата.Расшифровка.Вставить("СчетКт", ПланыСчетов.Хозрасчетный.Касса);
				СтрокаТабРезультата.Расшифровка.Вставить("СчетКтВидСравнения", ВидСравненияКомпоновкиДанных.ВИерархии);
				СтрокаТабРезультата.Расшифровка.Вставить("СубконтоДт1", СтрокаТабРезультата.Контрагент);
				СтрокаТабРезультата.Расшифровка.Вставить("СубконтоДт2", СтрокаТабРезультата.Договор);
			Иначе
				СтрокаТабРезультата.Расшифровка.Вставить("СчетДт", ПланыСчетов.Хозрасчетный.Касса);
				СтрокаТабРезультата.Расшифровка.Вставить("СчетДтВидСравнения", ВидСравненияКомпоновкиДанных.ВИерархии);
				СтрокаТабРезультата.Расшифровка.Вставить("СубконтоКт1", СтрокаТабРезультата.Контрагент);
				СтрокаТабРезультата.Расшифровка.Вставить("СубконтоКт2", СтрокаТабРезультата.Договор);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьВыдачаПодотчетПослеОтчета(СтрокаПроверки, ПараметрыОтчета)
	
	// Указание Банка России от 19.06.2017 N 4416-У отменило обязательность выполнения данного требования.
	// Указание вступило в силу с 19.08.2017, поэтому проверку выполняем только по операциям до этой даты.
	ДатаНачалаДействияУказания4416 = '2017-08-19';
	
	Если ПараметрыОтчета.НачалоПериода >= ДатаНачалаДействияУказания4416 Тогда
		// Запрос не выполняем, сразу возвращаем признак успешной проверки.
		СтрокаПроверки.КомментарийРезультата = НСтр("ru = 'Начиная с 19.08.2017, проверка не выполняется'");
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Дата,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Сотрудник,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.ФизическиеЛица).Наименование КАК СотрудникНаименование,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК Выдано,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОстатокПредыдущихАвансов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, Движения, Счет В (&СчетаРасчетыСПодотчетнымиЛицами), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций), Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > 0
	|	И ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт > ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Период,
	|	СотрудникНаименование";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Мин(КонецДня(ПараметрыОтчета.КонецПериода), ДатаНачалаДействияУказания4416 - 1));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СчетаРасчетыСПодотчетнымиЛицами",	   
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			
			СтрокаТабРезультата.Расшифровка.Вставить("Счет", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
			СтрокаТабРезультата.Расшифровка.Вставить("Субконто1", СтрокаТабРезультата.Сотрудник);
			СтрокаТабРезультата.Расшифровка.Вставить("КонецПериода", КонецДня(СтрокаТабРезультата.Дата));
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьДвижениеВнутри71Счета(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период КАК Дата,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйДвиженияССубконто.Регистратор) КАК ДокументПредставление,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Кому,
	|	ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Справочник.ФизическиеЛица).Наименование КАК КомуНаименование,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК ОтКого,
	|	ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.ФизическиеЛица).Наименование КАК ОтКогоНаименование,
	|	ХозрасчетныйДвиженияССубконто.Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Активность = ИСТИНА
	|				И Организация = &Организация
	|				И СчетДт В (&СчетаРасчетыСПодотчетнымиЛицами)
	|				И СчетКт В (&СчетаРасчетыСПодотчетнымиЛицами),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СчетаРасчетыСПодотчетнымиЛицами",	   
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьПодотчетТолькоРаботникам(СтрокаПроверки, ПараметрыОтчета)
	
	// Для расчетов с подотчетным лицами в валюте исключаем из анализа проводки по переоценке.

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйДвиженияССубконто.Период, ДЕНЬ) КАК Период,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК ФизЛицо,
	|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Активность = ИСТИНА
	|				И Организация = &Организация
	|				И СчетДт В (&Счета71)
	|				И ВЫБОР
	|					КОГДА СчетДт.Валютный
	|						ТОГДА ВалютнаяСумма <> 0
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизЛицо,
	|	ТаблицаКадровыеДанныеСотрудников.ДатаПриема,
	|	ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ТаблицаКадровыеДанныеСотрудников.ВидЗанятости
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	&ТаблицаКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;";
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		// При учете во внешней программе в справочнике Сотрудники недоступны даты приема-увольнения,
		// поэтому их не учитываем.

		Запрос.Текст = Запрос.Текст + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Проводки.Период КАК Дата,
		|	ВТ_Проводки.Регистратор КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Проводки.Регистратор) КАК ДокументПредставление,
		|	ВТ_Проводки.ФизЛицо,
		|	ВТ_Проводки.ФизЛицо.Наименование КАК СотрудникНаименование,
		|	ВТ_Проводки.Сумма
		|ИЗ
		|	ВТ_Проводки
		|ГДЕ
		|	ВТ_Проводки.ФизЛицо НЕ В (ВЫБРАТЬ ВТ_Сотрудники.ФизЛицо ИЗ ВТ_Сотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";

	Иначе
	
		Запрос.Текст = Запрос.Текст + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Проводки.Период,
		|	ВТ_Проводки.Регистратор,
		|	ВТ_Проводки.ФизЛицо,
		|	ВТ_Проводки.Сумма,
		|	МАКСИМУМ(ВТ_Сотрудники.ДатаПриема) КАК ДатаПриема
		|ПОМЕСТИТЬ ВТ_ПоследниеДатыПриема
		|ИЗ
		|	ВТ_Проводки КАК ВТ_Проводки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ПО ВТ_Проводки.ФизЛицо = ВТ_Сотрудники.ФизЛицо
		|			И (ВТ_Сотрудники.ДатаПриема <= ВТ_Проводки.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Проводки.Период,
		|	ВТ_Проводки.Регистратор,
		|	ВТ_Проводки.ФизЛицо,
		|	ВТ_Проводки.Сумма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеДатыПриема.Период КАК Дата,
		|	ВТ_ПоследниеДатыПриема.Регистратор КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ПоследниеДатыПриема.Регистратор) КАК ДокументПредставление,
		|	ВТ_ПоследниеДатыПриема.ФизЛицо,
		|	ВТ_ПоследниеДатыПриема.ФизЛицо.Наименование КАК СотрудникНаименование,
		|	ВТ_ПоследниеДатыПриема.Сумма,
		|	ВТ_ПоследниеДатыПриема.ДатаПриема,
		|	ВТ_Сотрудники.ДатаУвольнения
		|ИЗ
		|	ВТ_ПоследниеДатыПриема КАК ВТ_ПоследниеДатыПриема
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ПО ВТ_ПоследниеДатыПриема.ФизЛицо = ВТ_Сотрудники.ФизЛицо
		|			И ВТ_ПоследниеДатыПриема.ДатаПриема = ВТ_Сотрудники.ДатаПриема
		|ГДЕ
		|	(ВТ_Сотрудники.ФизЛицо ЕСТЬ NULL 
		|			ИЛИ ВТ_Сотрудники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ВТ_Сотрудники.ДатаУвольнения < ВТ_ПоследниеДатыПриема.Период)
		|	ИЛИ ВТ_ПоследниеДатыПриема.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",   ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	
	Массив71 = Новый Массив;
	Массив71.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);  // 71
	Запрос.УстановитьПараметр("Счета71", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив71));
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = ПараметрыОтчета.Организация;
	
	ТаблицаСотрудниковОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	ТаблицаКадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, 
		ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),
		"ДатаПриема, ДатаУвольнения, ФизическоеЛицо, ВидЗанятости",
		КонецДня(ПараметрыОтчета.КонецПериода));
		
	// Исключим сведения о внутреннем совместительстве, чтобы не было задвоений строк в таблице сотрудников.
	Индекс = ТаблицаКадровыеДанныеСотрудников.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ТаблицаКадровыеДанныеСотрудников[Индекс].ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
			ТаблицаКадровыеДанныеСотрудников.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
		
	Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеСотрудников", ТаблицаКадровыеДанныеСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();	

	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьНумерациюПКО(СтрокаПроверки, ПараметрыОтчета)
	Если ПроверитьПрименениеНПД(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПроверитьНумерациюДокументов(Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя(), ПараметрыОтчета);
КонецФункции

Функция ПроверитьНумерациюРКО(СтрокаПроверки, ПараметрыОтчета)
	Если ПроверитьПрименениеНПД(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПроверитьНумерациюДокументов(Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя(), ПараметрыОтчета);
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
// Проверки раздела "Ведение книги продаж по НДС"

// Функция формирует текст запроса для получения счетов-фактур по реализации.
//
Функция ТекстЗапросаСчетаФактурыПоРеализации()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ДокументыРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И РеализацияТоваровУслуг.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка,
	|	АктОбОказанииПроизводственныхУслуг.Дата
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И АктОбОказанииПроизводственныхУслуг.Проведен = ИСТИНА
	|	И АктОбОказанииПроизводственныхУслуг.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Ссылка,
	|	РеализацияУслугПоПереработке.Дата
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияУслугПоПереработке.Проведен = ИСТИНА
	|	И РеализацияУслугПоПереработке.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаОС.Ссылка,
	|	ПередачаОС.Дата
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПередачаОС.Проведен = ИСТИНА
	|	И ПередачаОС.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаНМА.Ссылка,
	|	ПередачаНМА.Дата
	|ИЗ
	|	Документ.ПередачаНМА КАК ПередачаНМА
	|ГДЕ
	|	ПередачаНМА.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПередачаНМА.Проведен = ИСТИНА
	|	И ПередачаНМА.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка,
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВозвратТоваровПоставщикуТовары.Ссылка.Проведен = ИСТИНА
	|	И ВозвратТоваровПоставщикуТовары.Ссылка.Организация = &Организация
	|	И НЕ ВозвратТоваровПоставщикуТовары.СчетУчета.Забалансовый
	|	И ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Ссылка КАК Документ.ВозвратТоваровПоставщику).КорректировочныйСчетФактураПолученОтПоставщика = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка,
	|	КорректировкаРеализации.Дата
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КорректировкаРеализации.Проведен = ИСТИНА
	|	И КорректировкаРеализации.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеНДСпоСМРхозспособом.Ссылка,
	|	НачислениеНДСпоСМРхозспособом.Дата
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом КАК НачислениеНДСпоСМРхозспособом
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособом.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачислениеНДСпоСМРхозспособом.Проведен = ИСТИНА
	|	И НачислениеНДСпоСМРхозспособом.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтражениеНачисленияНДС.Ссылка,
	|	ОтражениеНачисленияНДС.Дата
	|ИЗ
	|	Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
	|ГДЕ
	|	ОтражениеНачисленияНДС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтражениеНачисленияНДС.Проведен = ИСТИНА
	|	И ОтражениеНачисленияНДС.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияОтгруженныхТоваров.Ссылка,
	|	РеализацияОтгруженныхТоваров.Дата
	|ИЗ
	|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|ГДЕ
	|	РеализацияОтгруженныхТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияОтгруженныхТоваров.Проведен = ИСТИНА
	|	И РеализацияОтгруженныхТоваров.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	""Реализация"" КАК ТипДокумента,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	ЛОЖЬ КАК ЭтоДокументРеализацииОтгруженныхТоваров
	|ПОМЕСТИТЬ ВТ_ДокументыСОтложеннымПереходомПраваСобственности
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И РеализацияТоваровУслуг.Организация = &Организация
	|	И РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаОС.Ссылка,
	|	""ПередачаОС"",
	|	ПередачаОС.Дата,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПередачаОС.Проведен = ИСТИНА
	|	И ПередачаОС.Организация = &Организация
	|	И ПередачаОС.ПравоСобственностиПереходитПослеГосРегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияОтгруженныхТоваров.Ссылка,
	|	ВЫБОР
	|		КОГДА РеализацияОтгруженныхТоваров.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ""Реализация""
	|		ИНАЧЕ ""ПередачаОС""
	|	КОНЕЦ,
	|	РеализацияОтгруженныхТоваров.Дата,
	|	ИСТИНА
	|ИЗ
	|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|ГДЕ
	|	РеализацияОтгруженныхТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияОтгруженныхТоваров.Проведен = ИСТИНА
	|	И РеализацияОтгруженныхТоваров.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственности.Документ КАК Документ,
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственности.ТипДокумента КАК ТипДокумента,
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственности.Дата КАК Дата,
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственности.ЭтоДокументРеализацииОтгруженныхТоваров КАК ЭтоДокументРеализацииОтгруженныхТоваров,
	|	МАКСИМУМ(НастройкиУчетаНДС.Период) КАК МаксПериод
	|ПОМЕСТИТЬ ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика
	|ИЗ
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственности КАК ВТ_ДокументыСОтложеннымПереходомПраваСобственности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО (НастройкиУчетаНДС.Период <= ВТ_ДокументыСОтложеннымПереходомПраваСобственности.Дата)
	|			И (НастройкиУчетаНДС.Организация = &ГоловнаяОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственности.Документ,
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственности.ТипДокумента,
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственности.Дата,
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственности.ЭтоДокументРеализацииОтгруженныхТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.Документ КАК Документ
	|ПОМЕСТИТЬ ВТ_НеТребуетсяСчетаФактуры
	|ИЗ
	|	ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика КАК ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.МаксПериод = НастройкиУчетаНДС.Период
	|			И (НастройкиУчетаНДС.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.ТипДокумента = ""ПередачаОС""
	|					И НастройкиУчетаНДС.НачислятьНДСПриПередачеНедвижимости
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.ЭтоДокументРеализацииОтгруженныхТоваров
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОГДА ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.ТипДокумента = ""ПередачаОС""
	|					И НЕ НастройкиУчетаНДС.НачислятьНДСПриПередачеНедвижимости
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.ЭтоДокументРеализацииОтгруженныхТоваров
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			КОГДА ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.ТипДокумента = ""Реализация""
	|					И НастройкиУчетаНДС.НачислятьНДСПоОтгрузке
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.ЭтоДокументРеализацииОтгруженныхТоваров
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОГДА ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.ТипДокумента = ""Реализация""
	|					И НЕ НастройкиУчетаНДС.НачислятьНДСПоОтгрузке
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ДокументыСОтложеннымПереходомПраваСобственностиИУчетнаяПолитика.ЭтоДокументРеализацииОтгруженныхТоваров
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка КАК Ссылка,
	|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки,
	|	КОЛИЧЕСТВО(*) КАК ВсегоСтрок,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоСтрокБезНДС,
	|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ОтчетКомиссионераТовары
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетКомиссионераОПродажахТовары.Ссылка.Проведен = ИСТИНА
	|	И ОтчетКомиссионераОПродажахТовары.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахТовары.Ссылка,
	|	ОтчетКомиссионераОПродажахТовары.КлючСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахТовары.Ссылка,
	|	ОтчетКомиссионераОПродажахТовары.КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахУслуги.Ссылка КАК Ссылка,
	|	ОтчетКомиссионераОПродажахУслуги.КлючСтроки КАК КлючСтроки,
	|	КОЛИЧЕСТВО(*) КАК ВсегоСтрок,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоСтрокБезНДС,
	|	СУММА(ОтчетКомиссионераОПродажахУслуги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ОтчетКомиссионераУслуги
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахУслуги
	|ГДЕ
	|	ОтчетКомиссионераОПродажахУслуги.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетКомиссионераОПродажахУслуги.Ссылка.Проведен = ИСТИНА
	|	И ОтчетКомиссионераОПродажахУслуги.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахУслуги.Ссылка,
	|	ОтчетКомиссионераОПродажахУслуги.КлючСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахУслуги.Ссылка,
	|	ОтчетКомиссионераОПродажахУслуги.КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахТовары.Ссылка КАК Ссылка,
	|	ОтчетКомитентуОПродажахТовары.КлючСтроки КАК КлючСтроки,
	|	КОЛИЧЕСТВО(*) КАК ВсегоСтрок,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомитентуОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоСтрокБезНДС,
	|	СУММА(ОтчетКомитентуОПродажахТовары.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ОтчетКомитентуТовары
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
	|ГДЕ
	|	ОтчетКомитентуОПродажахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетКомитентуОПродажахТовары.Ссылка.Проведен = ИСТИНА
	|	И ОтчетКомитентуОПродажахТовары.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомитентуОПродажахТовары.Ссылка,
	|	ОтчетКомитентуОПродажахТовары.КлючСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомитентуОПродажахТовары.Ссылка,
	|	ОтчетКомитентуОПродажахТовары.КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыРеализации.Дата КАК Дата,
	|	ВТ_ДокументыРеализации.Ссылка КАК Документ,
	|	ВТ_ДокументыРеализации.Дата КАК ДатаРеализации,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)) КАК СчетФактура,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка.Проведен, ЛОЖЬ) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	0 КАК Строка,
	|	ИСТИНА КАК СчетФактураВНДСПродажиСовпадаетСРегистратором,
	|	-1 КАК ВсегоСтрок,
	|	-1 КАК КоличествоСтрокБезНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСчетаФактуры
	|ИЗ
	|	ВТ_ДокументыРеализации КАК ВТ_ДокументыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НеТребуетсяСчетаФактуры КАК ВТ_НеТребуетсяСчетаФактуры
	|		ПО ВТ_ДокументыРеализации.Ссылка = ВТ_НеТребуетсяСчетаФактуры.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ВТ_ДокументыРеализации.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование
	|ГДЕ
	|	ВТ_НеТребуетсяСчетаФактуры.Документ ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОказаниеУслугКонтрагенты.Ссылка.Дата,
	|	ОказаниеУслугКонтрагенты.Ссылка,
	|	ОказаниеУслугКонтрагенты.Ссылка.Дата,
	|	ОказаниеУслугКонтрагенты.СчетФактура,
	|	ЕСТЬNULL(ОказаниеУслугКонтрагенты.СчетФактура.Проведен, ЛОЖЬ),
	|	ЕСТЬNULL(ОказаниеУслугКонтрагенты.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ОказаниеУслугКонтрагенты.НомерСтроки,
	|	НЕ ОказаниеУслугКонтрагенты.ВыданСФ,
	|	1,
	|	ВЫБОР
	|		КОГДА ОказаниеУслугКонтрагенты.Ссылка.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслугКонтрагенты
	|ГДЕ
	|	ОказаниеУслугКонтрагенты.Ссылка.Проведен = ИСТИНА
	|	И ОказаниеУслугКонтрагенты.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОказаниеУслугКонтрагенты.Ссылка.Организация = &Организация
	|	И ОказаниеУслугКонтрагенты.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Дата,
	|	ОтчетКомитентуОПродажах.Ссылка,
	|	ОтчетКомитентуОПродажах.Дата,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)),
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка.Проведен, ЛОЖЬ),
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	0,
	|	ИСТИНА,
	|	1,
	|	ВЫБОР
	|		КОГДА ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ОтчетКомитентуОПродажах.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование
	|			И (СчетФактураВыданныйДокументыОснования.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетКомитентуОПродажах.Проведен = ИСТИНА
	|	И ОтчетКомитентуОПродажах.Организация = &Организация
	|	И ОтчетКомитентуОПродажах.СуммаВознаграждения <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахПоставщики.Ссылка.Дата,
	|	ОтчетКомитентуОПродажахПоставщики.Ссылка,
	|	ОтчетКомитентуОПродажахПоставщики.ДатаСФ,
	|	ОтчетКомитентуОПродажахПоставщики.СчетФактура,
	|	ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.СчетФактура.Проведен, ЛОЖЬ),
	|	ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ОтчетКомитентуОПродажахПоставщики.НомерСтроки,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(ВТ_ОтчетКомитентуТовары.ВсегоСтрок, 0),
	|	ЕСТЬNULL(ВТ_ОтчетКомитентуТовары.КоличествоСтрокБезНДС, 0)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Поставщики КАК ОтчетКомитентуОПродажахПоставщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтчетКомитентуТовары КАК ВТ_ОтчетКомитентуТовары
	|		ПО ОтчетКомитентуОПродажахПоставщики.Ссылка = ВТ_ОтчетКомитентуТовары.Ссылка
	|			И ОтчетКомитентуОПродажахПоставщики.КлючСтроки = ВТ_ОтчетКомитентуТовары.КлючСтроки
	|ГДЕ
	|	ОтчетКомитентуОПродажахПоставщики.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетКомитентуОПродажахПоставщики.Ссылка.Проведен = ИСТИНА
	|	И ОтчетКомитентуОПродажахПоставщики.Ссылка.Организация = &Организация
	|	И ЕСТЬNULL(ВТ_ОтчетКомитентуТовары.Сумма, 0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.Дата,
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка,
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура,
	|	ЕСТЬNULL(ОтчетКомиссионераОПродажахПокупатели.СчетФактура.Проведен, ЛОЖЬ),
	|	ЕСТЬNULL(ОтчетКомиссионераОПродажахПокупатели.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ОтчетКомиссионераОПродажахПокупатели.НомерСтроки,
	|	НЕ ОтчетКомиссионераОПродажахПокупатели.ВыставленСФ,
	|	ЕСТЬNULL(ВТ_ОтчетКомиссионераТовары.ВсегоСтрок, 0) + ЕСТЬNULL(ВТ_ОтчетКомиссионераУслуги.ВсегоСтрок, 0),
	|	ЕСТЬNULL(ВТ_ОтчетКомиссионераТовары.КоличествоСтрокБезНДС, 0) + ЕСТЬNULL(ВТ_ОтчетКомиссионераУслуги.КоличествоСтрокБезНДС, 0)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтчетКомиссионераТовары КАК ВТ_ОтчетКомиссионераТовары
	|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ВТ_ОтчетКомиссионераТовары.Ссылка
	|			И ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_ОтчетКомиссионераТовары.КлючСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтчетКомиссионераУслуги КАК ВТ_ОтчетКомиссионераУслуги
	|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ВТ_ОтчетКомиссионераУслуги.Ссылка
	|			И ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_ОтчетКомиссионераУслуги.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Проведен = ИСТИНА
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Организация = &Организация
	|	И ЕСТЬNULL(ВТ_ОтчетКомиссионераТовары.Сумма, 0) + ЕСТЬNULL(ВТ_ОтчетКомиссионераУслуги.Сумма, 0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщикуТовары.Ссылка,
	|	ВозвратТоваровПоставщику.Дата,
	|	ЕСТЬNULL(СчетФактураПолученныйДокументыОснования.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)),
	|	ЕСТЬNULL(СчетФактураПолученный.Проведен, ЛОЖЬ),
	|	ЕСТЬNULL(СчетФактураПолученный.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	0,
	|	ИСТИНА,
	|	-1,
	|	-1
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НеТребуетсяСчетаФактуры КАК ВТ_НеТребуетсяСчетаФактуры
	|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВТ_НеТребуетсяСчетаФактуры.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|			ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|				И СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
	|ГДЕ
	|	ВТ_НеТребуетсяСчетаФактуры.Документ ЕСТЬ NULL
	|	И ВозвратТоваровПоставщикуТовары.Ссылка.КорректировочныйСчетФактураПолученОтПоставщика
	|	И ВозвратТоваровПоставщику.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВозвратТоваровПоставщику.Проведен = ИСТИНА
	|	И ВозвратТоваровПоставщику.Организация = &Организация
	|	И НЕ ВозвратТоваровПоставщикуТовары.СчетУчета.Забалансовый
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	СчетФактура,
	|	СчетФактураВНДСПродажиСовпадаетСРегистратором";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПроверитьПолнотаСФПоРеализации(СтрокаПроверки, ПараметрыОтчета) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПроверки)
	И НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;

	ТребуютсяСчетаФактурыПоСтавкеБезНДС = Истина;
	ДатаНачалаДействияПостановления735 = '2014-10-01'; // Постановление Правительства РФ от 30.07.2014 № 735
	Если ПараметрыОтчета.КонецПериода >= ДатаНачалаДействияПостановления735 Тогда
		Если НЕ УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода) Тогда
			// С 01.10.2014 при реализации без НДС счета-фактуры не выставляются,
			// кроме случая освобождения по ст.145 и 145.1.
			ТребуютсяСчетаФактурыПоСтавкеБезНДС = Ложь;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаСчетаФактурыПоРеализации();
	
	Если ТребуютсяСчетаФактурыПоСтавкеБезНДС Тогда
	
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	ВТ_ДокументыСчетаФактуры.Дата КАК Дата,
		|	ВТ_ДокументыСчетаФактуры.Документ,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ДокументыСчетаФактуры.Документ) КАК ДокументПредставление,
		|	ВЫБОР
		|		КОГДА ВТ_ДокументыСчетаФактуры.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
		|			ТОГДА &ТекстНетСчетаФактуры
		|		ИНАЧЕ &ТекстСчетФактураНеПроведен
		|	КОНЕЦ КАК Ошибка,
		|	ВТ_ДокументыСчетаФактуры.Строка КАК Строка
		|ИЗ
		|	ВТ_ДокументыСчетаФактуры КАК ВТ_ДокументыСчетаФактуры
		|ГДЕ
		|	(ВТ_ДокументыСчетаФактуры.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
		|			ИЛИ ВТ_ДокументыСчетаФактуры.СчетФактураПроведен = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	ВТ_ДокументыСчетаФактуры.Документ,
		|	Строка";
		
	Иначе
	
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродаж.Регистратор,
		|	НДСЗаписиКнигиПродаж.СчетФактура,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоСтрокБезНДС,
		|	КОЛИЧЕСТВО(*) КАК ВсегоСтрок
		|ПОМЕСТИТЬ ВТ_ДанныеПоСтавкамНДСНеСГруппированные
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
		|ГДЕ
		|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НДСЗаписиКнигиПродаж.Организация = &Организация
		|	И НДСЗаписиКнигиПродаж.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродаж.Регистратор,
		|	НДСЗаписиКнигиПродаж.СчетФактура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РТУ_ТоварыНаКомиссии.Ссылка,
		|	РТУ_ТоварыНаКомиссии.Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА РТУ_ТоварыНаКомиссии.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	КОЛИЧЕСТВО(*)
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РТУ_ТоварыНаКомиссии
		|ГДЕ
		|	РТУ_ТоварыНаКомиссии.Ссылка.Проведен
		|	И РТУ_ТоварыНаКомиссии.Ссылка.Организация = &Организация
		|	И РТУ_ТоварыНаКомиссии.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РТУ_ТоварыНаКомиссии.СчетУчета.Забалансовый
		|
		|СГРУППИРОВАТЬ ПО
		|	РТУ_ТоварыНаКомиссии.Ссылка,
		|	РТУ_ТоварыНаКомиссии.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РТУ_АгентскиеУслуги.Ссылка,
		|	РТУ_АгентскиеУслуги.Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА РТУ_АгентскиеУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	КОЛИЧЕСТВО(*)
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РТУ_АгентскиеУслуги
		|ГДЕ
		|	РТУ_АгентскиеУслуги.Ссылка.Проведен
		|	И РТУ_АгентскиеУслуги.Ссылка.Организация = &Организация
		|	И РТУ_АгентскиеУслуги.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	РТУ_АгентскиеУслуги.Ссылка,
		|	РТУ_АгентскиеУслуги.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеПоСтавкамНДСНеСГруппированные.Регистратор,
		|	ВТ_ДанныеПоСтавкамНДСНеСГруппированные.СчетФактура,
		|	СУММА(ВТ_ДанныеПоСтавкамНДСНеСГруппированные.ВсегоСтрок) КАК ВсегоСтрок,
		|	СУММА(ВТ_ДанныеПоСтавкамНДСНеСГруппированные.КоличествоСтрокБезНДС) КАК КоличествоСтрокБезНДС
		|ПОМЕСТИТЬ ВТ_ДанныеПоСтавкамНДС
		|ИЗ
		|	ВТ_ДанныеПоСтавкамНДСНеСГруппированные КАК ВТ_ДанныеПоСтавкамНДСНеСГруппированные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеПоСтавкамНДСНеСГруппированные.Регистратор,
		|	ВТ_ДанныеПоСтавкамНДСНеСГруппированные.СчетФактура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВТ_ДанныеПоСтавкамНДСНеСГруппированные.Регистратор,
		|	ВТ_ДанныеПоСтавкамНДСНеСГруппированные.СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыСчетаФактуры.Дата,
		|	ВТ_ДокументыСчетаФактуры.Документ,
		|	ВТ_ДокументыСчетаФактуры.ДатаРеализации,
		|	ВТ_ДокументыСчетаФактуры.СчетФактура,
		|	ВТ_ДокументыСчетаФактуры.СчетФактураПроведен,
		|	ВТ_ДокументыСчетаФактуры.СчетФактураДата,
		|	ВТ_ДокументыСчетаФактуры.Строка,
		|	ВЫБОР
		|		КОГДА ВТ_ДокументыСчетаФактуры.ВсегоСтрок > -1
		|			ТОГДА ВТ_ДокументыСчетаФактуры.ВсегоСтрок
		|		ИНАЧЕ ЕСТЬNULL(ВТ_ДанныеПоСтавкамНДС.ВсегоСтрок, 0)
		|	КОНЕЦ КАК ВсегоСтрок,
		|	ВЫБОР
		|		КОГДА ВТ_ДокументыСчетаФактуры.КоличествоСтрокБезНДС > -1
		|			ТОГДА ВТ_ДокументыСчетаФактуры.КоличествоСтрокБезНДС
		|		ИНАЧЕ ЕСТЬNULL(ВТ_ДанныеПоСтавкамНДС.КоличествоСтрокБезНДС, 0)
		|	КОНЕЦ КАК КоличествоСтрокБезНДС
		|ПОМЕСТИТЬ ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС
		|ИЗ
		|	ВТ_ДокументыСчетаФактуры КАК ВТ_ДокументыСчетаФактуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоСтавкамНДС КАК ВТ_ДанныеПоСтавкамНДС
		|		ПО ВТ_ДокументыСчетаФактуры.Документ = ВТ_ДанныеПоСтавкамНДС.Регистратор
		|			И ВТ_ДокументыСчетаФактуры.Документ = ВТ_ДанныеПоСтавкамНДС.СчетФактура
		|			И (ВТ_ДокументыСчетаФактуры.СчетФактураВНДСПродажиСовпадаетСРегистратором = ИСТИНА)
		|ГДЕ
		|	ВТ_ДокументыСчетаФактуры.СчетФактураВНДСПродажиСовпадаетСРегистратором = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДокументыСчетаФактуры.Дата,
		|	ВТ_ДокументыСчетаФактуры.Документ,
		|	ВТ_ДокументыСчетаФактуры.ДатаРеализации,
		|	ВТ_ДокументыСчетаФактуры.СчетФактура,
		|	ВТ_ДокументыСчетаФактуры.СчетФактураПроведен,
		|	ВТ_ДокументыСчетаФактуры.СчетФактураДата,
		|	ВТ_ДокументыСчетаФактуры.Строка,
		|	ВЫБОР
		|		КОГДА ВТ_ДокументыСчетаФактуры.ВсегоСтрок > -1
		|			ТОГДА ВТ_ДокументыСчетаФактуры.ВсегоСтрок
		|		ИНАЧЕ ЕСТЬNULL(ВТ_ДанныеПоСтавкамНДС.ВсегоСтрок, 0)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТ_ДокументыСчетаФактуры.КоличествоСтрокБезНДС > -1
		|			ТОГДА ВТ_ДокументыСчетаФактуры.КоличествоСтрокБезНДС
		|		ИНАЧЕ ЕСТЬNULL(ВТ_ДанныеПоСтавкамНДС.КоличествоСтрокБезНДС, 0)
		|	КОНЕЦ
		|ИЗ
		|	ВТ_ДокументыСчетаФактуры КАК ВТ_ДокументыСчетаФактуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоСтавкамНДС КАК ВТ_ДанныеПоСтавкамНДС
		|		ПО ВТ_ДокументыСчетаФактуры.Документ = ВТ_ДанныеПоСтавкамНДС.Регистратор
		|			И ВТ_ДокументыСчетаФактуры.СчетФактура = ВТ_ДанныеПоСтавкамНДС.СчетФактура
		|			И (ВТ_ДокументыСчетаФактуры.СчетФактураВНДСПродажиСовпадаетСРегистратором = ЛОЖЬ)
		|ГДЕ
		|	ВТ_ДокументыСчетаФактуры.СчетФактураВНДСПродажиСовпадаетСРегистратором = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС.Дата КАК Дата,
		|	ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС.Документ КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС.Документ) КАК ДокументПредставление,
		|	ВЫБОР
		|		КОГДА ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
		|			ТОГДА &ТекстНетСчетаФактуры
		|		ИНАЧЕ &ТекстСчетФактураНеПроведен
		|	КОНЕЦ КАК Ошибка,
		|	ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС.Строка КАК Строка
		|ИЗ
		|	ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС КАК ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС.СчетФактураПроведен
		|				ТОГДА ЛОЖЬ
		|			КОГДА ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС.Дата < &ДатаНачалаДействияПостановления735
		|				ТОГДА ИСТИНА
		|			КОГДА ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС.ВсегоСтрок > ВТ_ДокументыСчетаФактурыСУчетомСтавокНДС.КоличествоСтрокБезНДС
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ,
		|	Строка";
	
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",   ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	Запрос.УстановитьПараметр("ДатаНачалаДействияПостановления735", 	ДатаНачалаДействияПостановления735);
	
	Запрос.УстановитьПараметр("ТекстНетСчетаФактуры", НСтр("ru='Нет счета-фактуры'"));
	Запрос.УстановитьПараметр("ТекстСчетФактураНеПроведен", НСтр("ru='Счет-фактура не проведен'"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПроверитьСвоевременностьСФПоРеализации(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.Текст = ТекстЗапросаСчетаФактурыПоРеализации();
	
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ВТ_ДокументыСчетаФактуры.Дата,
	|	ВТ_ДокументыСчетаФактуры.Документ,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ДокументыСчетаФактуры.Документ) КАК ДокументПредставление,
	|	ВТ_ДокументыСчетаФактуры.СчетФактура КАК СчетФактура,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ДокументыСчетаФактуры.СчетФактура) КАК СчетФактураПредставление,
	|	ВТ_ДокументыСчетаФактуры.СчетФактураДата КАК СчетФактураДата
	|ИЗ
	|	ВТ_ДокументыСчетаФактуры КАК ВТ_ДокументыСчетаФактуры
	|ГДЕ
	|	ВТ_ДокументыСчетаФактуры.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
	|	И РАЗНОСТЬДАТ(ВТ_ДокументыСчетаФактуры.Дата, ВТ_ДокументыСчетаФактуры.СчетФактураДата, ДЕНЬ) > 5
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДокументыСчетаФактуры.Дата,
	|	ВТ_ДокументыСчетаФактуры.Документ,
	|	СчетФактураДата,
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",   ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПроверитьСоответствие90_НДС_БУ(СтрокаПроверки, ПараметрыОтчета)
	
	Если ЗначениеЗаполнено(СтрокаПроверки)
	И НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Рассчитаем разницы связанные с различием в базе НДС и сумме
	// выручки по БУ при авансах в валюте.
	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияОтгруженныхТоваров).ДокументОтгрузки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияОтгруженныхТоваров).ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ""Реализация""
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияОтгруженныхТоваров).ДокументОтгрузки ССЫЛКА Документ.ПередачаОС
	|			ТОГДА ""ПередачаОС""
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипДокументаОтгрузки,
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК Контрагент,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.ВалютаКор КАК Валюта,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтавкаНДС,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаКорОборотКт КАК ВалютнаяСуммаКорОборотКт
	|ПОМЕСТИТЬ ВТ_РеализацияВВалютеВсе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В (&Счета90_01_1), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС), Организация = &Организация, КорСчет В (&Счета62_76_Вал, &Счета62_76_УЕ), ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеализацияВВалютеВсе.Регистратор КАК Регистратор,
	|	МАКСИМУМ(НастройкиУчетаНДС.Период) КАК МаксПериод
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыУчетнойПолитики
	|ИЗ
	|	ВТ_РеализацияВВалютеВсе КАК ВТ_РеализацияВВалютеВсе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО (НастройкиУчетаНДС.Период <= ВТ_РеализацияВВалютеВсе.Дата)
	|			И (НастройкиУчетаНДС.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	ВТ_РеализацияВВалютеВсе.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РеализацияВВалютеВсе.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_РеализацияВВалютеВсе.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеализацияВВалютеВсе.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_РеализацияВВалютеВсе.Регистратор КАК Регистратор,
	|	ВТ_РеализацияВВалютеВсе.Контрагент КАК Контрагент,
	|	ВТ_РеализацияВВалютеВсе.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора, ВТ_РеализацияВВалютеВсе.Дата), ДЕНЬ) КАК ПериодКурса,
	|	ВТ_РеализацияВВалютеВсе.СуммаОборотКт КАК СуммаОборотКт,
	|	ВТ_РеализацияВВалютеВсе.ВалютнаяСуммаКорОборотКт КАК ВалютнаяСуммаКорОборотКт,
	|	ВТ_РеализацияВВалютеВсе.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ВТ_РеализацияВВалютеВсе.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|				И ВТ_РеализацияВВалютеВсе.КорСчет В (&Счета62_76_УЕ)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_РеализацияВВалютеВсе.ТипДокументаОтгрузки = ""Реализация""
	|							И ЕСТЬNULL(НастройкиУчетаНДС.НачислятьНДСПоОтгрузке, ЛОЖЬ)
	|						ТОГДА ЛОЖЬ
	|					КОГДА ВТ_РеализацияВВалютеВсе.ТипДокументаОтгрузки = ""ПередачаОС""
	|							И ЕСТЬNULL(НастройкиУчетаНДС.НачислятьНДСПриПередачеНедвижимости, ЛОЖЬ)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_РеализацияВВалютеВсе.КорСчет В (&Счета62_76_Вал)
	|	КОНЕЦ КАК ТребуетсяКорректировкаНДС,
	|	ВЫБОР
	|		КОГДА ВТ_РеализацияВВалютеВсе.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|				И ВТ_РеализацияВВалютеВсе.КорСчет В (&Счета62_76_УЕ)
	|				И ВТ_РеализацияВВалютеВсе.ТипДокументаОтгрузки = ""Реализация""
	|				И ЕСТЬNULL(НастройкиУчетаНДС.НачислятьНДСПоОтгрузке, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсключитьДокументИзПроверкиСоответствия
	|ПОМЕСТИТЬ ВТ_РеализацияВВалюте
	|ИЗ
	|	ВТ_РеализацияВВалютеВсе КАК ВТ_РеализацияВВалютеВсе
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеДатыУчетнойПолитики КАК ВТ_ПоследниеДатыУчетнойПолитики
	|		ПО ВТ_РеализацияВВалютеВсе.Регистратор = ВТ_ПоследниеДатыУчетнойПолитики.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО (ВТ_ПоследниеДатыУчетнойПолитики.МаксПериод = НастройкиУчетаНДС.Период)
	|			И (НастройкиУчетаНДС.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДокументОтгрузки
	|		ПО ВТ_РеализацияВВалютеВсе.ДокументОтгрузки = ДанныеПервичныхДокументовДокументОтгрузки.Документ
	|			И (ДанныеПервичныхДокументовДокументОтгрузки.Организация = &Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодКурса,
	|	ВТ_РеализацияВВалютеВсе.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеализацияВВалюте.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_РеализацияВВалюте.Регистратор КАК Регистратор,
	|	ВТ_РеализацияВВалюте.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ВТ_РеализацияВВалюте.Дата) КАК Дата,
	|	СУММА(ВТ_РеализацияВВалюте.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыВалют.Кратность, 0) = 0
	|					ИЛИ ЕСТЬNULL(КурсыВалют.Курс, 0) = 0
	|				ТОГДА ВТ_РеализацияВВалюте.СуммаОборотКт
	|			ИНАЧЕ ВЫРАЗИТЬ(ВТ_РеализацияВВалюте.ВалютнаяСуммаКорОборотКт * КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаСНДСРуб,
	|	ВТ_РеализацияВВалюте.ТребуетсяКорректировкаНДС КАК ТребуетсяКорректировкаНДС,
	|	ВТ_РеализацияВВалюте.ИсключитьДокументИзПроверкиСоответствия КАК ИсключитьДокументИзПроверкиСоответствия
	|ПОМЕСТИТЬ ВТ_ВалютнаяВыручкаПоКурсуРеализации
	|ИЗ
	|	ВТ_РеализацияВВалюте КАК ВТ_РеализацияВВалюте
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВТ_РеализацияВВалюте.Валюта = КурсыВалют.Валюта
	|			И ВТ_РеализацияВВалюте.ПериодКурса = КурсыВалют.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РеализацияВВалюте.СтавкаНДС,
	|	ВТ_РеализацияВВалюте.Регистратор,
	|	ВТ_РеализацияВВалюте.Контрагент,
	|	ВТ_РеализацияВВалюте.ТребуетсяКорректировкаНДС,
	|	ВТ_РеализацияВВалюте.ИсключитьДокументИзПроверкиСоответствия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_РеализацияВВалюте.Регистратор,
	|	ВТ_РеализацияВВалюте.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПоСтавкамНДС.Регистратор КАК Документ,
	|	ВЫБОР
	|		КОГДА ОборотыПоСтавкамНДС.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|			ТОГДА ВЫРАЗИТЬ(ОборотыПоСтавкамНДС.Регистратор КАК Документ.РеализацияОтгруженныхТоваров).ДокументОтгрузки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОборотыПоСтавкамНДС.Контрагент) = 1
	|			ТОГДА МАКСИМУМ(ОборотыПоСтавкамНДС.Контрагент)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(ОборотыПоСтавкамНДС.Регистратор) КАК ДокументПредставление,
	|	ВЫБОР
	|		КОГДА ОборотыПоСтавкамНДС.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ОборотыПоСтавкамНДС.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ОтразитьВКнигеПокупок, ЛОЖЬ)
	|					ИЛИ &ВерсияУчетаНДС > 1
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратОтПокупателяВКнигуПокупок,
	|	МАКСИМУМ(ОборотыПоСтавкамНДС.Дата) КАК Дата,
	|	ОборотыПоСтавкамНДС.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОборотыПоСтавкамНДС.СуммаВыручки) КАК СуммаВыручки,
	|	СУММА(ОборотыПоСтавкамНДС.СуммаСНДСРуб) КАК СуммаСНДСРуб,
	|	СУММА(ОборотыПоСтавкамНДС.НДСНачисленный) КАК НДСНачисленный,
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыПоСтавкамНДС.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке)
	|				ТОГДА ОборотыПоСтавкамНДС.НДСНачисленный
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДСпоОтгрузкеБезПереходаСобственности
	|ПОМЕСТИТЬ Соответствие90_НДС_БУ_Предварительная
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.Контрагенты
	|				ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК Контрагент,
	|		ХозрасчетныйОбороты.Период КАК Дата,
	|		ХозрасчетныйОбороты.Субконто1 КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В (&Счета90_01_1)
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаВыручки,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В (&Счета90_01_1)
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСНДСРуб,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В (&Счета90_03)
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДСНачисленный,
	|		ХозрасчетныйОбороты.КорСчет КАК КорСчет
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В (&Счета90_01_1, &Счета90_03), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС), Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &СпособОценкиТоваровВРознице = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
	|					ТОГДА ИСТИНА
	|				КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|						И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка)
	|					ТОГДА ЛОЖЬ
	|				КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОплатаПлатежнойКартой
	|						И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ОплатаПлатежнойКартой).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
	|					ТОГДА ЛОЖЬ
	|				КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					ТОГДА ЛОЖЬ
	|				КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|					ТОГДА НЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ДоговорКонтрагента.УчетАгентскогоНДСПокупателем
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйДвиженияССубконто.Регистратор,
	|		NULL,
	|		ХозрасчетныйДвиженияССубконто.Период,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В (&Счета90_01_1)
	|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|			ИНАЧЕ ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В (&Счета90_01_1)
	|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В (&Счета90_01_1)
	|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&Счета90_03)
	|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ХозрасчетныйДвиженияССубконто.СчетКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				&СпособОценкиТоваровВРознице = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения)
	|					И Организация = &Организация
	|					И Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И (СчетДт В (&Счета90_03)
	|						ИЛИ СчетКт В (&Счета90_01_1)),
	|				,
	|				) КАК ХозрасчетныйДвиженияССубконто
	|	ГДЕ
	|		ХозрасчетныйДвиженияССубконто.Сумма > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ВалютнаяВыручкаПоКурсуРеализации.Регистратор,
	|		ВТ_ВалютнаяВыручкаПоКурсуРеализации.Контрагент,
	|		ВТ_ВалютнаяВыручкаПоКурсуРеализации.Дата,
	|		ВТ_ВалютнаяВыручкаПоКурсуРеализации.СтавкаНДС,
	|		0,
	|		ВТ_ВалютнаяВыручкаПоКурсуРеализации.СуммаСНДСРуб - ВТ_ВалютнаяВыручкаПоКурсуРеализации.СуммаОборотКт,
	|		0,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		ВТ_ВалютнаяВыручкаПоКурсуРеализации КАК ВТ_ВалютнаяВыручкаПоКурсуРеализации
	|	ГДЕ
	|		ВТ_ВалютнаяВыручкаПоКурсуРеализации.ТребуетсяКорректировкаНДС) КАК ОборотыПоСтавкамНДС
	|ГДЕ
	|	ОборотыПоСтавкамНДС.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|	И НЕ ОборотыПоСтавкамНДС.Регистратор ССЫЛКА Документ.ПодтверждениеНулевойСтавкиНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоСтавкамНДС.Регистратор,
	|	ВЫБОР
	|		КОГДА ОборотыПоСтавкамНДС.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|			ТОГДА ВЫРАЗИТЬ(ОборотыПоСтавкамНДС.Регистратор КАК Документ.РеализацияОтгруженныхТоваров).ДокументОтгрузки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОборотыПоСтавкамНДС.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ОборотыПоСтавкамНДС.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ОтразитьВКнигеПокупок, ЛОЖЬ)
	|					ИЛИ &ВерсияУчетаНДС > 1
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ОборотыПоСтавкамНДС.СтавкаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Соответствие90_НДС_БУ_Предварительная.Документ КАК Документ,
	|	Соответствие90_НДС_БУ_Предварительная.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Соответствие90_НДС_БУ_Предварительная.Контрагент КАК Контрагент,
	|	Соответствие90_НДС_БУ_Предварительная.ДокументПредставление КАК ДокументПредставление,
	|	Соответствие90_НДС_БУ_Предварительная.ЭтоВозвратОтПокупателяВКнигуПокупок КАК ЭтоВозвратОтПокупателяВКнигуПокупок,
	|	Соответствие90_НДС_БУ_Предварительная.Дата КАК Дата,
	|	Соответствие90_НДС_БУ_Предварительная.СтавкаНДС КАК СтавкаНДС,
	|	Соответствие90_НДС_БУ_Предварительная.СуммаВыручки КАК СуммаВыручки,
	|	Соответствие90_НДС_БУ_Предварительная.СуммаСНДСРуб КАК СуммаСНДСРуб,
	|	Соответствие90_НДС_БУ_Предварительная.НДСНачисленный КАК НДСНачисленный,
	|	Соответствие90_НДС_БУ_Предварительная.СуммаНДСпоОтгрузкеБезПереходаСобственности КАК СуммаНДСпоОтгрузкеБезПереходаСобственности,
	|	ЕСТЬNULL(ВТ_ВалютнаяВыручкаПоКурсуРеализации.ИсключитьДокументИзПроверкиСоответствия, ЛОЖЬ) КАК ИсключитьДокументИзПроверкиСоответствия
	|ИЗ
	|	Соответствие90_НДС_БУ_Предварительная КАК Соответствие90_НДС_БУ_Предварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВалютнаяВыручкаПоКурсуРеализации КАК ВТ_ВалютнаяВыручкаПоКурсуРеализации
	|		ПО Соответствие90_НДС_БУ_Предварительная.Документ = ВТ_ВалютнаяВыручкаПоКурсуРеализации.Регистратор
	|			И Соответствие90_НДС_БУ_Предварительная.СтавкаНДС = ВТ_ВалютнаяВыручкаПоКурсуРеализации.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Соответствие90_НДС_БУ_Предварительная.СтавкаНДС,
	|	Соответствие90_НДС_БУ_Предварительная.Дата,
	|	Соответствие90_НДС_БУ_Предварительная.Документ";
	
	Массив90_01_1 = Новый Массив;
	Массив90_01_1.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	
	Массив90_03 = Новый Массив;
	Массив90_03.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	
	Массив62_76_Вал = Новый Массив;
	Массив62_76_Вал.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал); // 62.21
	Массив62_76_Вал.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал); // 76.26
	
	Массив62_76_УЕ = Новый Массив;
	Массив62_76_УЕ.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ); // 62.31
	Массив62_76_УЕ.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ); // 76.36
	
	Запрос.УстановитьПараметр("НачалоПериода", 			ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 			КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 			ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	Запрос.УстановитьПараметр("Счета90_01_1", 			БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив90_01_1));
	Запрос.УстановитьПараметр("Счета90_03", 			БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив90_03));
	Запрос.УстановитьПараметр("Счета62_76_Вал", 		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив62_76_Вал));
	Запрос.УстановитьПараметр("Счета62_76_УЕ", 			БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив62_76_УЕ));
	Запрос.УстановитьПараметр("ВидСубконтоСтавкиНДС", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	Запрос.УстановитьПараметр("СпособОценкиТоваровВРознице", 	УчетнаяПолитика.СпособОценкиТоваровВРознице(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("ВерсияУчетаНДС",         УчетНДСКлиентСервер.Версия(ПараметрыОтчета.КонецПериода));
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРезультата.Колонки.Добавить("НДСРассчитанный", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРезультата.Колонки.Добавить("ОбнаруженыОшибки", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
		ЗначениеСтавки                       = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабРезультата.СтавкаНДС);
		БазаДляНДС                           = СтрокаТабРезультата.СуммаСНДСРуб;
		НДСРассчитанный                      = Окр(БазаДляНДС / (100 + ЗначениеСтавки) * ЗначениеСтавки, 2);
		СтрокаТабРезультата.СуммаБезНДС      = БазаДляНДС - НДСРассчитанный;
		СтрокаТабРезультата.НДСРассчитанный  = НДСРассчитанный;
		СтрокаТабРезультата.ОбнаруженыОшибки = 
			НЕ СтрокаТабРезультата.ИсключитьДокументИзПроверкиСоответствия
			И ((СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) > 1
				ИЛИ (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) < -1);
	КонецЦикла;

	// Сохраним для следующих проверок таблицу результата
	ПараметрыОтчета.Вставить("Соответствие90_НДС_БУТаблицаЗначений", ТаблицаРезультата.Скопировать());
	
	// Удалим строки, успешно прошедшие проверку.
	Инд = ТаблицаРезультата.Количество() - 1;
	Пока Инд >= 0 Цикл
		Если НЕ ТаблицаРезультата[Инд].ОбнаруженыОшибки Тогда
			ТаблицаРезультата.Удалить(Инд);
		КонецЕсли;
		Инд = Инд - 1;
	КонецЦикла;

	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьСоответствие91_НДС_БУ(СтрокаПроверки, ПараметрыОтчета)
	
	Если ЗначениеЗаполнено(СтрокаПроверки)
	И НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыДоходовОблагаемыеНДС = Новый Массив;
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
    ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
    ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	
	// Считаем суммовые разницы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСубконто3 КАК ДокументРасчетов,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК Контрагент,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Период,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументРасчетовДата,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК ПоложительнаяРазница
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В (&Счета91_01),
	|			&ВидыСубконто91,
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ),
	|			КорСчет В (&Счета62_76_УЕ),
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И ХозрасчетныйОбороты.КорСубконто3 = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыДокументовРасчетов.ДатаРегистратора,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Период";
	
	Запрос.УстановитьПараметр("НачалоПериода", 			ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 			КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 			ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыОтчета.Организация));

	ВидыСубконто91 = Новый Массив;
	ВидыСубконто91.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидыСубконто91", ВидыСубконто91);
	
	Массив91_01 = Новый Массив;
	Массив91_01.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("Счета91_01", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив91_01));
	
	Массив91_02 = Новый Массив;
	Массив91_02.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Запрос.УстановитьПараметр("Счета91_02", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив91_02));

	Массив62_76_Вал = Новый Массив;
	Массив62_76_Вал.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал); // 62.21
	Массив62_76_Вал.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал); // 76.26
	Запрос.УстановитьПараметр("Счета62_76_Вал", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив62_76_Вал));
	
	Массив62_76_УЕ = Новый Массив;
	Массив62_76_УЕ.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ); // 62.31
	Массив62_76_УЕ.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ); // 76.36
	Запрос.УстановитьПараметр("Счета62_76_УЕ", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив62_76_УЕ));
	
	МассивСчетаНДС = Новый Массив;
	МассивСчетаНДС.Добавить(ПланыСчетов.Хозрасчетный.НДС); // 68.02
	МассивСчетаНДС.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке); // 76.ОТ
	Запрос.УстановитьПараметр("СчетаНДС", МассивСчетаНДС);
	
	МассивИсключаемыхВидовРасходов = Новый Массив;
	МассивИсключаемыхВидовРасходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовРасхода", МассивИсключаемыхВидовРасходов); 
	
	// В случае возврата от покупателя с установленным флажком "Покупателем выставляется с/ф на возврат" 
	// возможна проводка Дт 91.02 - Кт 19. Для 90-х счетов такие ситуации отдельно проверять не требуется, 
	// т.к. там в проверке учитывается весь Дт оборот 90.03.
	Массив19 = Новый Массив;
	Массив19.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	Запрос.УстановитьПараметр("Счета19", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив19));
	
	Запрос.УстановитьПараметр("ВидыДоходовОблагаемыеНДС", ВидыДоходовОблагаемыеНДС);
	Запрос.УстановитьПараметр("КурсовыеРазницыПоРасчетамВУЕ", Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	Запрос.УстановитьПараметр("КурсовыеРазницы", Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	Запрос.УстановитьПараметр("РасходыОтносятсяКЕНВД", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
	Запрос.УстановитьПараметр("РазницыЗалоговойИФактическойСтоимостиТары", 
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РазницыЗалоговойИФактическойСтоимостиТары"));
	Запрос.УстановитьПараметр("РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд", 
		Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	Запрос.УстановитьПараметр("ВерсияУчетаНДС", УчетНДСКлиентСервер.Версия(ПараметрыОтчета.КонецПериода));

	РезультатПоСуммовымРазницам = Запрос.Выполнить().Выгрузить();
	
	Инд = РезультатПоСуммовымРазницам.Количество() - 1;
	Пока Инд >= 0 Цикл
		СтрокаРазницы = РезультатПоСуммовымРазницам[Инд];
		НачислятьНДСпоРазнице = Ложь;
		Если СтрокаРазницы.ПоложительнаяРазница <> 0 Тогда
			Если СтрокаРазницы.Период < '20111001'
				ИЛИ СтрокаРазницы.ДокументРасчетовДата < '20111001' Тогда
				// По суммовой разнице начисляется НДС.
				НачислятьНДСпоРазнице = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НачислятьНДСпоРазнице Тогда
			РезультатПоСуммовымРазницам.Удалить(СтрокаРазницы);
		КонецЕсли; 
		
		Инд = Инд - 1;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("РезультатПоСуммовымРазницам", РезультатПоСуммовымРазницам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатПоСуммовымРазницам.Регистратор КАК Регистратор,
	|	РезультатПоСуммовымРазницам.Контрагент КАК Контрагент,
	|	РезультатПоСуммовымРазницам.СтатьяПрочихДоходовИРасходов КАК СтатьяПрочихДоходовИРасходов,
	|	РезультатПоСуммовымРазницам.Период КАК Период,
	|	РезультатПоСуммовымРазницам.ПоложительнаяРазница КАК ПоложительнаяРазница
	|ПОМЕСТИТЬ ВТ_ТаблицаСуммовыхРазниц
	|ИЗ
	|	&РезультатПоСуммовымРазницам КАК РезультатПоСуммовымРазницам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ПОМЕСТИТЬ ВТ_СтатьиПрочихДоходовИРасходовДляНДС
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ЭтоГруппа
	|	И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВидыДоходовОблагаемыеНДС, &КурсовыеРазницыПоРасчетамВУЕ, &РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд)
	|	И ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат <> &РасходыОтносятсяКЕНВД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрочиеДоходыИРасходы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ПОМЕСТИТЬ ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДС
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ЭтоГруппа
	|	И (ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&КурсовыеРазницы, &КурсовыеРазницыПоРасчетамВУЕ)
	|			ИЛИ ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат = &РасходыОтносятсяКЕНВД
	|			ИЛИ ПрочиеДоходыИРасходы.Ссылка = &РазницыЗалоговойИФактическойСтоимостиТары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрочиеДоходыИРасходы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДС.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДСКромеКурсовыхРазницУЕ
	|ИЗ
	|	ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДС КАК ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДС
	|ГДЕ
	|	ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДС.ВидПрочихДоходовИРасходов <> &КурсовыеРазницыПоРасчетамВУЕ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияОтгруженныхТоваров).ДокументОтгрузки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияОтгруженныхТоваров).ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ""Реализация""
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияОтгруженныхТоваров).ДокументОтгрузки ССЫЛКА Документ.ПередачаОС
	|			ТОГДА ""ПередачаОС""
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипДокументаОтгрузки,
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК Контрагент,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.ВалютаКор КАК Валюта,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаКорОборотКт КАК ВалютнаяСуммаКорОборотКт
	|ПОМЕСТИТЬ ВТ_РеализацияВВалютеВсе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В (&Счета91_01),
	|			&ВидыСубконто91,
	|			Организация = &Организация
	|				И НЕ Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДС.Ссылка
	|						ИЗ
	|							ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДС),
	|			КорСчет В (&Счета62_76_Вал, &Счета62_76_УЕ),
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеализацияВВалютеВсе.Регистратор КАК Регистратор,
	|	МАКСИМУМ(НастройкиУчетаНДС.Период) КАК МаксПериод
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыУчетнойПолитики
	|ИЗ
	|	ВТ_РеализацияВВалютеВсе КАК ВТ_РеализацияВВалютеВсе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО (НастройкиУчетаНДС.Период <= ВТ_РеализацияВВалютеВсе.Дата)
	|			И (НастройкиУчетаНДС.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	ВТ_РеализацияВВалютеВсе.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РеализацияВВалютеВсе.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_РеализацияВВалютеВсе.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеализацияВВалютеВсе.Регистратор КАК Регистратор,
	|	ВТ_РеализацияВВалютеВсе.Контрагент КАК Контрагент,
	|	ВТ_РеализацияВВалютеВсе.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора, ВТ_РеализацияВВалютеВсе.Дата), ДЕНЬ) КАК ПериодКурса,
	|	ВТ_РеализацияВВалютеВсе.СуммаОборотКт КАК СуммаОборотКт,
	|	ВТ_РеализацияВВалютеВсе.ВалютнаяСуммаКорОборотКт КАК ВалютнаяСуммаКорОборотКт,
	|	ВТ_РеализацияВВалютеВсе.Валюта КАК Валюта,
	|	ВТ_РеализацияВВалютеВсе.СтатьяПрочихДоходовИРасходов КАК СтатьяПрочихДоходовИРасходов,
	|	ВЫБОР
	|		КОГДА ВТ_РеализацияВВалютеВсе.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|				И ВТ_РеализацияВВалютеВсе.КорСчет В (&Счета62_76_УЕ)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_РеализацияВВалютеВсе.ТипДокументаОтгрузки = ""Реализация""
	|							И ЕСТЬNULL(НастройкиУчетаНДС.НачислятьНДСПоОтгрузке, ЛОЖЬ)
	|						ТОГДА ЛОЖЬ
	|					КОГДА ВТ_РеализацияВВалютеВсе.ТипДокументаОтгрузки = ""ПередачаОС""
	|							И ЕСТЬNULL(НастройкиУчетаНДС.НачислятьНДСПриПередачеНедвижимости, ЛОЖЬ)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_РеализацияВВалютеВсе.КорСчет В (&Счета62_76_Вал)
	|	КОНЕЦ КАК ТребуетсяКорректировкаНДС,
	|	ВЫБОР
	|		КОГДА ВТ_РеализацияВВалютеВсе.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|				И ВТ_РеализацияВВалютеВсе.КорСчет В (&Счета62_76_УЕ)
	|				И ВТ_РеализацияВВалютеВсе.ТипДокументаОтгрузки = ""Реализация""
	|				И ЕСТЬNULL(НастройкиУчетаНДС.НачислятьНДСПоОтгрузке, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсключитьДокументИзПроверкиСоответствия
	|ПОМЕСТИТЬ ВТ_РеализацияВВалюте
	|ИЗ
	|	ВТ_РеализацияВВалютеВсе КАК ВТ_РеализацияВВалютеВсе
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеДатыУчетнойПолитики КАК ВТ_ПоследниеДатыУчетнойПолитики
	|		ПО ВТ_РеализацияВВалютеВсе.Регистратор = ВТ_ПоследниеДатыУчетнойПолитики.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО (ВТ_ПоследниеДатыУчетнойПолитики.МаксПериод = НастройкиУчетаНДС.Период)
	|			И (НастройкиУчетаНДС.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДокументОтгрузки
	|		ПО ВТ_РеализацияВВалютеВсе.ДокументОтгрузки = ДанныеПервичныхДокументовДокументОтгрузки.Документ
	|			И (ДанныеПервичныхДокументовДокументОтгрузки.Организация = &Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодКурса,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеализацияВВалюте.Регистратор КАК Регистратор,
	|	ВТ_РеализацияВВалюте.Контрагент КАК Контрагент,
	|	ВТ_РеализацияВВалюте.СтатьяПрочихДоходовИРасходов КАК СтатьяПрочихДоходовИРасходов,
	|	ВТ_РеализацияВВалюте.Дата КАК Дата,
	|	ВТ_РеализацияВВалюте.СуммаОборотКт КАК СуммаОборотКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалют.Кратность, 0) = 0
	|				ИЛИ ЕСТЬNULL(КурсыВалют.Курс, 0) = 0
	|			ТОГДА ВТ_РеализацияВВалюте.СуммаОборотКт
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_РеализацияВВалюте.ВалютнаяСуммаКорОборотКт * КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаСНДСРуб,
	|	ВТ_РеализацияВВалюте.ТребуетсяКорректировкаНДС КАК ТребуетсяКорректировкаНДС,
	|	ВТ_РеализацияВВалюте.ИсключитьДокументИзПроверкиСоответствия КАК ИсключитьДокументИзПроверкиСоответствия
	|ПОМЕСТИТЬ ВТ_ВалютнаяВыручкаПоКурсуРеализации
	|ИЗ
	|	ВТ_РеализацияВВалюте КАК ВТ_РеализацияВВалюте
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВТ_РеализацияВВалюте.Валюта = КурсыВалют.Валюта
	|			И ВТ_РеализацияВВалюте.ПериодКурса = КурсыВалют.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_РеализацияВВалюте.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаВыручки,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаСНДСРуб,
	|	0 КАК НДСНачисленный,
	|	НЕОПРЕДЕЛЕНО КАК СчетНДС
	|ПОМЕСТИТЬ ВТ_Обороты91
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В (&Счета91_01),
	|			&ВидыСубконто91,
	|			Организация = &Организация
	|				И НЕ Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДС.Ссылка
	|						ИЗ
	|							ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДС),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|	И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСуммовыхРазниц.Регистратор,
	|	ВТ_ТаблицаСуммовыхРазниц.Контрагент,
	|	ВТ_ТаблицаСуммовыхРазниц.СтатьяПрочихДоходовИРасходов,
	|	ВТ_ТаблицаСуммовыхРазниц.Период,
	|	ВТ_ТаблицаСуммовыхРазниц.ПоложительнаяРазница,
	|	ВТ_ТаблицаСуммовыхРазниц.ПоложительнаяРазница,
	|	0,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТ_ТаблицаСуммовыхРазниц КАК ВТ_ТаблицаСуммовыхРазниц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ВалютнаяВыручкаПоКурсуРеализации.Регистратор,
	|	ВТ_ВалютнаяВыручкаПоКурсуРеализации.Контрагент,
	|	ВТ_ВалютнаяВыручкаПоКурсуРеализации.СтатьяПрочихДоходовИРасходов,
	|	ВТ_ВалютнаяВыручкаПоКурсуРеализации.Дата,
	|	0,
	|	ВТ_ВалютнаяВыручкаПоКурсуРеализации.СуммаСНДСРуб - ВТ_ВалютнаяВыручкаПоКурсуРеализации.СуммаОборотКт,
	|	0,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТ_ВалютнаяВыручкаПоКурсуРеализации КАК ВТ_ВалютнаяВыручкаПоКурсуРеализации
	|ГДЕ
	|	ВТ_ВалютнаяВыручкаПоКурсуРеализации.ТребуетсяКорректировкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Период,
	|	0,
	|	0,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.КорСчет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В (&Счета91_02),
	|			&ВидыСубконто91,
	|			Организация = &Организация
	|				И НЕ Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДСКромеКурсовыхРазницУЕ.Ссылка
	|						ИЗ
	|							ВТ_СтатьиПрочихДоходовИРасходовНеОблагаемыеНДСКромеКурсовыхРазницУЕ),
	|			Корсчет В (&СчетаНДС, &Счета19),
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счета19)
	|				ТОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ИНАЧЕ НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Регистратор КАК Регистратор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НДСЗаписиКнигиПродаж.СтавкаНДС) КАК КоличествоРазныхСтавок,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.СтавкаНДС) КАК СтавкаНДС,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НДСЗаписиКнигиПродаж.Покупатель) КАК КоличествоРазныхПокупателей,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.Покупатель) КАК Покупатель
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.Событие <> ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСРеализация0.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_НДСРеализация0
	|ИЗ
	|	РегистрНакопления.НДСРеализация0 КАК НДСРеализация0
	|ГДЕ
	|	НДСРеализация0.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСРеализация0.Организация = &Организация
	|	И НДСРеализация0.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НДСРеализация0.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_НДСЗаписиКнигиПродаж.КоличествоРазныхСтавок = 1
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж.СтавкаНДС
	|		КОГДА ВТ_НДСЗаписиКнигиПродаж_ОТ.КоличествоРазныхСтавок = 1
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж_ОТ.СтавкаНДС
	|		КОГДА НЕ ВТ_СтатьиПрочихДоходовИРасходовДляНДС.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА &КонецПериода < ДАТАВРЕМЯ(2019, 1, 1)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	МАКСИМУМ(ВТ_Обороты91.Период) КАК Дата,
	|	ВТ_Обороты91.Регистратор КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияОтгруженныхТоваров.Ссылка ЕСТЬ NULL
	|			ТОГДА РеализацияОтгруженныхТоваров.ДокументОтгрузки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Обороты91.Контрагент) = 1
	|			ТОГДА МАКСИМУМ(ВТ_Обороты91.Контрагент)
	|		КОГДА ВТ_НДСЗаписиКнигиПродаж.КоличествоРазныхПокупателей = 1
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж.Покупатель
	|		КОГДА ВТ_НДСЗаписиКнигиПродаж_ОТ.КоличествоРазныхПокупателей = 1
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж_ОТ.Покупатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент,
	|	ВТ_СтатьиПрочихДоходовИРасходовДляНДС.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов,
	|	ВЫБОР
	|		КОГДА ВТ_Обороты91.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_Обороты91.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ОтразитьВКнигеПокупок, ЛОЖЬ)
	|					ИЛИ &ВерсияУчетаНДС > 1
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратОтПокупателяВКнигуПокупок,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Обороты91.Регистратор) КАК ДокументПредставление,
	|	СУММА(ВТ_Обороты91.СуммаВыручки) КАК СуммаВыручки,
	|	СУММА(ВТ_Обороты91.СуммаСНДСРуб) КАК СуммаСНДСРуб,
	|	СУММА(ВТ_Обороты91.НДСНачисленный) КАК НДСНачисленный,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Обороты91.СчетНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке)
	|				ТОГДА ВТ_Обороты91.НДСНачисленный
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДСпоОтгрузкеБезПереходаСобственности,
	|	ВЫБОР
	|		КОГДА ВТ_СтатьиПрочихДоходовИРасходовДляНДС.ВидПрочихДоходовИРасходов В (&МассивИсключаемыхВидовРасхода)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ВалютнаяВыручкаПоКурсуРеализации.ИсключитьДокументИзПроверкиСоответствия, ЛОЖЬ)
	|	КОНЕЦ КАК ИсключитьДокументИзПроверкиСоответствия
	|ИЗ
	|	ВТ_Обороты91 КАК ВТ_Обороты91
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьиПрочихДоходовИРасходовДляНДС КАК ВТ_СтатьиПрочихДоходовИРасходовДляНДС
	|		ПО ВТ_Обороты91.СтатьяПрочихДоходовИРасходов = ВТ_СтатьиПрочихДоходовИРасходовДляНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НДСЗаписиКнигиПродаж КАК ВТ_НДСЗаписиКнигиПродаж
	|		ПО ВТ_Обороты91.Регистратор = ВТ_НДСЗаписиКнигиПродаж.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НДСРеализация0 КАК ВТ_НДСРеализация0
	|		ПО ВТ_Обороты91.Регистратор = ВТ_НДСРеализация0.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|		ПО ВТ_Обороты91.Регистратор = РеализацияОтгруженныхТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НДСЗаписиКнигиПродаж КАК ВТ_НДСЗаписиКнигиПродаж_ОТ
	|		ПО (РеализацияОтгруженныхТоваров.ДокументОтгрузки = ВТ_НДСЗаписиКнигиПродаж_ОТ.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВалютнаяВыручкаПоКурсуРеализации КАК ВТ_ВалютнаяВыручкаПоКурсуРеализации
	|		ПО ВТ_Обороты91.Регистратор = ВТ_ВалютнаяВыручкаПоКурсуРеализации.Регистратор
	|ГДЕ
	|	(НЕ ВТ_НДСЗаписиКнигиПродаж.Регистратор ЕСТЬ NULL
	|			ИЛИ НЕ ВТ_НДСЗаписиКнигиПродаж_ОТ.Регистратор ЕСТЬ NULL
	|			ИЛИ НЕ ВТ_СтатьиПрочихДоходовИРасходовДляНДС.Ссылка ЕСТЬ NULL)
	|	И ЕСТЬNULL(ВТ_НДСЗаписиКнигиПродаж.СтавкаНДС, ВЫБОР
	|				КОГДА &КонецПериода < ДАТАВРЕМЯ(2019, 1, 1)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|			КОНЕЦ) <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|	И НЕ ВТ_Обороты91.Регистратор ССЫЛКА Документ.ПодтверждениеНулевойСтавкиНДС
	|	И ВТ_НДСРеализация0.Регистратор ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Обороты91.Регистратор,
	|	РеализацияОтгруженныхТоваров.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_СтатьиПрочихДоходовИРасходовДляНДС.ВидПрочихДоходовИРасходов В (&МассивИсключаемыхВидовРасхода)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ВалютнаяВыручкаПоКурсуРеализации.ИсключитьДокументИзПроверкиСоответствия, ЛОЖЬ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Обороты91.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_Обороты91.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ОтразитьВКнигеПокупок, ЛОЖЬ)
	|					ИЛИ &ВерсияУчетаНДС > 1
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВТ_НДСЗаписиКнигиПродаж.КоличествоРазныхСтавок,
	|	ВТ_НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	ВТ_НДСЗаписиКнигиПродаж.КоличествоРазныхПокупателей,
	|	ВТ_НДСЗаписиКнигиПродаж.Покупатель,
	|	ВТ_НДСЗаписиКнигиПродаж_ОТ.КоличествоРазныхСтавок,
	|	ВТ_НДСЗаписиКнигиПродаж_ОТ.СтавкаНДС,
	|	ВТ_НДСЗаписиКнигиПродаж_ОТ.КоличествоРазныхПокупателей,
	|	ВТ_НДСЗаписиКнигиПродаж_ОТ.Покупатель,
	|	ВТ_СтатьиПрочихДоходовИРасходовДляНДС.Ссылка,
	|	ВТ_СтатьиПрочихДоходовИРасходовДляНДС.ВидПрочихДоходовИРасходов,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияОтгруженныхТоваров.Ссылка ЕСТЬ NULL
	|			ТОГДА РеализацияОтгруженныхТоваров.ДокументОтгрузки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС,
	|	Дата,
	|	Документ";
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРезультата.Колонки.Добавить("НДСРассчитанный", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРезультата.Колонки.Добавить("ОбнаруженыОшибки", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
		
		ЗначениеСтавки = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабРезультата.СтавкаНДС);
		БазаДляНДС     = СтрокаТабРезультата.СуммаСНДСРуб;
		
		Если БазаДляНДС = 0 
			И СтрокаТабРезультата.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд Тогда
			// При безвозмездной передаче суммы базы НДС в регистре бухгалтерии нет, 
			// есть только проводка по начислению самого НДС, его сумму сверить не с чем, поэтому пропускаем.
			Продолжить;
		КонецЕсли;
		
		НДСРассчитанный                      = Окр(БазаДляНДС / (100 + ЗначениеСтавки) * ЗначениеСтавки, 2);
		СтрокаТабРезультата.СуммаБезНДС      = БазаДляНДС - НДСРассчитанный;
		СтрокаТабРезультата.НДСРассчитанный  = НДСРассчитанный;
		СтрокаТабРезультата.ОбнаруженыОшибки = 
			НЕ СтрокаТабРезультата.ИсключитьДокументИзПроверкиСоответствия
			И ((СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) > 1
			ИЛИ (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) < -1);

	КонецЦикла;

	// Сохраним для следующих проверок таблицу результата
	ПараметрыОтчета.Вставить("Соответствие91_НДС_БУТаблицаЗначений", ТаблицаРезультата.Скопировать());
	
	// Удалим строки, успешно прошедшие проверку.
	Инд = ТаблицаРезультата.Количество() - 1;
	Пока Инд >= 0 Цикл
		Если НЕ ТаблицаРезультата[Инд].ОбнаруженыОшибки Тогда
			ТаблицаРезультата.Удалить(Инд);
		КонецЕсли;
		Инд = Инд - 1;
	КонецЦикла;

	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьСоответствие90и91_НДС_НУ(СтрокаПроверки, ПараметрыОтчета) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПроверки)
	И НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыОтчета.Свойство("Соответствие90_НДС_БУТаблицаЗначений") Тогда
		ПроверитьСоответствие90_НДС_БУ(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	Таблица90_НДС = ПараметрыОтчета.Соответствие90_НДС_БУТаблицаЗначений;
	
	Если НЕ ПараметрыОтчета.Свойство("Соответствие91_НДС_БУТаблицаЗначений") Тогда
		ПроверитьСоответствие91_НДС_БУ(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	Таблица91_НДС = ПараметрыОтчета.Соответствие91_НДС_БУТаблицаЗначений;
	
	ИсключаемыеВидыЦенностей = Перечисления.ВидыЦенностей.МассивВидовЦенностейУчитывающихсяПоДоговорам();
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",            ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",             КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",              ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Таблица90_НДС",            Таблица90_НДС);
	Запрос.УстановитьПараметр("Таблица91_НДС",            Таблица91_НДС);
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	
	// Кроме доходов, отраженных на 90 и 91, также начисление НДС производится при возврате товаров 
	// поставщику, поэтому чтобы не возникали расхождения между суммами по проводкам и "НДС продажи"
	// из-за возвратов, они также добавляются.
	МассивСчетаРасчетовПоПретензиям = Новый Массив;
	МассивСчетаРасчетовПоПретензиям.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям); // 76.02
	МассивСчетаРасчетовПоПретензиям.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал); // 76.22
	МассивСчетаРасчетовПоПретензиям.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ); // 76.32
	Запрос.УстановитьПараметр("СчетаРасчетовПоПретензиям", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетаРасчетовПоПретензиям));
	
	Массив91_02 = Новый Массив;
	Массив91_02.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Запрос.УстановитьПараметр("Счета91_02", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив91_02));
	Запрос.УстановитьПараметр("Счет68_02", ПланыСчетов.Хозрасчетный.НДС);
	Запрос.УстановитьПараметр("Счет76_ОТ", ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Документ КАК Документ,
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаБезНДС КАК БазаНДСпоБУ,
	|	Таблица.НДСНачисленный КАК СуммаНДСпоБУ,
	|	Таблица.ЭтоВозвратОтПокупателяВКнигуПокупок КАК ЭтоВозвратОтПокупателяВКнигуПокупок,
	|	Таблица.СуммаНДСпоОтгрузкеБезПереходаСобственности КАК СуммаНДСпоОтгрузкеБезПереходаСобственности,
	|	Таблица.ИсключитьДокументИзПроверкиСоответствия КАК ИсключитьДокументИзПроверкиСоответствия
	|ПОМЕСТИТЬ ВТ_Таблица90_НДС
	|ИЗ
	|	&Таблица90_НДС КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Документ КАК Документ,
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаБезНДС КАК БазаНДСпоБУ,
	|	Таблица.НДСНачисленный КАК СуммаНДСпоБУ,
	|	Таблица.ЭтоВозвратОтПокупателяВКнигуПокупок КАК ЭтоВозвратОтПокупателяВКнигуПокупок,
	|	Таблица.СуммаНДСпоОтгрузкеБезПереходаСобственности КАК СуммаНДСпоОтгрузкеБезПереходаСобственности,
	|	Таблица.ИсключитьДокументИзПроверкиСоответствия КАК ИсключитьДокументИзПроверкиСоответствия
	|ПОМЕСТИТЬ ВТ_Таблица91_НДС
	|ИЗ
	|	&Таблица91_НДС КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПродажи.СчетФактура КАК СчетФактура,
	|	НДСПродажи.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА НДСПродажи.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НДСПродажи.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСПродажи.СтавкаНДС КАК СтавкаНДС,
	|	НДСПродажи.СуммаБезНДСОборот КАК БазаНДСпоРегистру,
	|	НДСПродажи.НДСОборот КАК СуммаНДСпоРегистру
	|ПОМЕСТИТЬ ВТ_НДСПродажи
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей)
	|				И Событие <> ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС)) КАК НДСПродажи
	|ГДЕ
	|	НЕ НДСПродажи.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|	И НЕ НДСПродажи.Регистратор ССЫЛКА Документ.ПередачаТоваров
	|	И НЕ НДСПродажи.Регистратор ССЫЛКА Документ.ПодтверждениеНулевойСтавкиНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПродажи.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК ДокументОтгрузки,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ПОМЕСТИТЬ ВТ_76_ОТ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет = &Счет76_ОТ, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные), Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(*) КАК КоличествоВидовСубконто
	|ПОМЕСТИТЬ ВТ_СчетаВзаиморасчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) = 2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет <> &Счет68_02
	|					И ВТ_СчетаВзаиморасчетов.Ссылка ЕСТЬ NULL
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ - ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счета91_02)
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаНДСпоБУ,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет = &Счет68_02
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДСпоБУ
	|ПОМЕСТИТЬ ВТ_ВозвратыПоставщикам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В (&СчетаРасчетовПоПретензиям), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаВзаиморасчетов КАК ВТ_СчетаВзаиморасчетов
	|		ПО ХозрасчетныйОбороты.КорСчет = ВТ_СчетаВзаиморасчетов.Ссылка
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|	И НЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ВозвратТоваровПоставщику).НДСВключенВСтоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Таблица90_НДС.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ВТ_Таблица90_НДС.ДокументОтгрузки <> НЕОПРЕДЕЛЕНО
	|				И ВТ_Таблица90_НДС.СуммаНДСпоОтгрузкеБезПереходаСобственности <> 0
	|			ТОГДА ВТ_Таблица90_НДС.ДокументОтгрузки
	|		ИНАЧЕ ВТ_Таблица90_НДС.Документ
	|	КОНЕЦ КАК Документ,
	|	ВТ_Таблица90_НДС.Контрагент КАК Контрагент,
	|	ВТ_Таблица90_НДС.БазаНДСпоБУ КАК БазаНДСпоБУ,
	|	ВТ_Таблица90_НДС.СуммаНДСпоБУ КАК СуммаНДСпоБУ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_76_ОТ.СуммаОборотДт, 0) <> 0
	|			ТОГДА 0
	|		КОГДА ВТ_Таблица90_НДС.СуммаНДСпоОтгрузкеБезПереходаСобственности <> 0
	|			ТОГДА -ВТ_Таблица90_НДС.БазаНДСпоБУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаНДСпоОтгрузкеБезПереходаСобственности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_76_ОТ.СуммаОборотДт, 0) <> 0
	|			ТОГДА 0
	|		ИНАЧЕ -ВТ_Таблица90_НДС.СуммаНДСпоОтгрузкеБезПереходаСобственности
	|	КОНЕЦ КАК СуммаНДСпоОтгрузкеБезПереходаСобственности,
	|	0 КАК БазаНДСпоРегистру,
	|	0 КАК СуммаНДСпоРегистру,
	|	ВЫБОР
	|		КОГДА ВТ_Таблица90_НДС.ИсключитьДокументИзПроверкиСоответствия
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсключитьДокументИзПроверкиСоответствия
	|ПОМЕСТИТЬ ВТ_РезультатСверки
	|ИЗ
	|	ВТ_Таблица90_НДС КАК ВТ_Таблица90_НДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_76_ОТ КАК ВТ_76_ОТ
	|		ПО ВТ_Таблица90_НДС.ДокументОтгрузки = ВТ_76_ОТ.ДокументОтгрузки
	|ГДЕ
	|	НЕ ВТ_Таблица90_НДС.ЭтоВозвратОтПокупателяВКнигуПокупок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Таблица91_НДС.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ВТ_Таблица91_НДС.ДокументОтгрузки <> НЕОПРЕДЕЛЕНО
	|				И ВТ_Таблица91_НДС.СуммаНДСпоОтгрузкеБезПереходаСобственности <> 0
	|			ТОГДА ВТ_Таблица91_НДС.ДокументОтгрузки
	|		ИНАЧЕ ВТ_Таблица91_НДС.Документ
	|	КОНЕЦ,
	|	ВТ_Таблица91_НДС.Контрагент,
	|	ВТ_Таблица91_НДС.БазаНДСпоБУ,
	|	ВТ_Таблица91_НДС.СуммаНДСпоБУ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_76_ОТ.СуммаОборотДт, 0) <> 0
	|			ТОГДА 0
	|		КОГДА ВТ_Таблица91_НДС.СуммаНДСпоОтгрузкеБезПереходаСобственности <> 0
	|			ТОГДА -ВТ_Таблица91_НДС.БазаНДСпоБУ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_76_ОТ.СуммаОборотДт, 0) <> 0
	|			ТОГДА 0
	|		ИНАЧЕ -ВТ_Таблица91_НДС.СуммаНДСпоОтгрузкеБезПереходаСобственности
	|	КОНЕЦ,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ВТ_Таблица91_НДС.ИсключитьДокументИзПроверкиСоответствия
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТ_Таблица91_НДС КАК ВТ_Таблица91_НДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_76_ОТ КАК ВТ_76_ОТ
	|		ПО ВТ_Таблица91_НДС.ДокументОтгрузки = ВТ_76_ОТ.ДокументОтгрузки
	|ГДЕ
	|	НЕ ВТ_Таблица91_НДС.ЭтоВозвратОтПокупателяВКнигуПокупок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_ВозвратыПоставщикам.СуммаНДСпоБУ = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОГДА (ВЫРАЗИТЬ(ВТ_ВозвратыПоставщикам.БазаНДСпоБУ / ВТ_ВозвратыПоставщикам.СуммаНДСпоБУ КАК ЧИСЛО(2, 0))) = 10
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &КонецПериода < ДАТАВРЕМЯ(2019, 1, 1)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВТ_ВозвратыПоставщикам.Документ,
	|	ВТ_ВозвратыПоставщикам.Контрагент,
	|	ВТ_ВозвратыПоставщикам.БазаНДСпоБУ,
	|	ВТ_ВозвратыПоставщикам.СуммаНДСпоБУ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	ВТ_ВозвратыПоставщикам КАК ВТ_ВозвратыПоставщикам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НДСПродажи.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ВТ_НДСПродажи.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВТ_НДСПродажи.Регистратор
	|		ИНАЧЕ ВТ_НДСПродажи.СчетФактура
	|	КОНЕЦ,
	|	ВТ_НДСПродажи.Контрагент,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_76_ОТ.СуммаОборотДт, 0) <> 0
	|				И ЕСТЬNULL(ВТ_76_ОТ.СуммаОборотКт, 0) <> 0
	|			ТОГДА 0
	|		КОГДА НЕ ВТ_76_ОТ.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ВТ_НДСПродажи.БазаНДСпоРегистру
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_76_ОТ.СуммаОборотДт, 0) <> 0
	|				И ЕСТЬNULL(ВТ_76_ОТ.СуммаОборотКт, 0) <> 0
	|			ТОГДА 0
	|		КОГДА НЕ ВТ_76_ОТ.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ВТ_НДСПродажи.СуммаНДСпоРегистру
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВТ_НДСПродажи.БазаНДСпоРегистру,
	|	ВТ_НДСПродажи.СуммаНДСпоРегистру,
	|	0
	|ИЗ
	|	ВТ_НДСПродажи КАК ВТ_НДСПродажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_76_ОТ КАК ВТ_76_ОТ
	|		ПО ВТ_НДСПродажи.СчетФактура = ВТ_76_ОТ.ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РезультатСверки.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_РезультатСверки.Документ КАК Документ,
	|	ВТ_РезультатСверки.Контрагент КАК Контрагент,
	|	СУММА(ВТ_РезультатСверки.БазаНДСпоБУ) КАК БазаНДСпоБУ,
	|	СУММА(ВТ_РезультатСверки.СуммаНДСпоБУ) КАК СуммаНДСпоБУ,
	|	СУММА(ВТ_РезультатСверки.БазаНДСпоОтгрузкеБезПереходаСобственности) КАК БазаНДСпоОтгрузкеБезПереходаСобственности,
	|	СУММА(ВТ_РезультатСверки.СуммаНДСпоОтгрузкеБезПереходаСобственности) КАК СуммаНДСпоОтгрузкеБезПереходаСобственности,
	|	СУММА(ВТ_РезультатСверки.БазаНДСпоРегистру) КАК БазаНДСпоРегистру,
	|	СУММА(ВТ_РезультатСверки.СуммаНДСпоРегистру) КАК СуммаНДСпоРегистру,
	|	СУММА(ВТ_РезультатСверки.ИсключитьДокументИзПроверкиСоответствия) КАК ИсключитьДокументИзПроверкиСоответствия
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	ВТ_РезультатСверки КАК ВТ_РезультатСверки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РезультатСверки.СтавкаНДС,
	|	ВТ_РезультатСверки.Документ,
	|	ВТ_РезультатСверки.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Документ КАК Документ,
	|	СУММА(ВТ_Данные.БазаНДСпоБУ + ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.БазаНДСпоРегистру) КАК РазницаБазыПоНДС,
	|	СУММА(ВТ_Данные.СуммаНДСпоБУ + ВТ_Данные.СуммаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.СуммаНДСпоРегистру) КАК РазницаСуммыНДС
	|ПОМЕСТИТЬ ВТ_ПоДокументам
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Документ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Данные.БазаНДСпоБУ + ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.БазаНДСпоРегистру) < 1 И
	|	СУММА(ВТ_Данные.БазаНДСпоБУ + ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.БазаНДСпоРегистру) > -1 И
	|	СУММА(ВТ_Данные.СуммаНДСпоБУ + ВТ_Данные.СуммаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.СуммаНДСпоРегистру) = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_Данные.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Контрагент КАК Контрагент,
	|	СУММА(ВТ_Данные.БазаНДСпоБУ + ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.БазаНДСпоРегистру) КАК РазницаБазыПоНДС,
	|	СУММА(ВТ_Данные.СуммаНДСпоБУ + ВТ_Данные.СуммаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.СуммаНДСпоРегистру) КАК РазницаСуммыНДС
	|ПОМЕСТИТЬ ВТ_ПоКонтрагентам
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.Контрагент <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Контрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Данные.БазаНДСпоБУ + ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.БазаНДСпоРегистру) < 1 И
	|	СУММА(ВТ_Данные.БазаНДСпоБУ + ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.БазаНДСпоРегистру) > -1 И
	|	СУММА(ВТ_Данные.СуммаНДСпоБУ + ВТ_Данные.СуммаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.СуммаНДСпоРегистру) = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_Данные.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Данные.Документ КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Данные.Документ) КАК ДокументПредставление,
	|	ВТ_Данные.Контрагент КАК Контрагент,
	|	ВТ_Данные.БазаНДСпоБУ КАК БазаНДСпоБУ,
	|	ВТ_Данные.СуммаНДСпоБУ КАК СуммаНДСпоБУ,
	|	ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности КАК БазаНДСпоОтгрузкеБезПереходаСобственности,
	|	ВТ_Данные.СуммаНДСпоОтгрузкеБезПереходаСобственности КАК СуммаНДСпоОтгрузкеБезПереходаСобственности,
	|	ВТ_Данные.БазаНДСпоРегистру КАК БазаНДСпоРегистру,
	|	ВТ_Данные.СуммаНДСпоРегистру КАК СуммаНДСпоРегистру
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоДокументам КАК ВТ_ПоДокументам
	|		ПО ВТ_Данные.Документ = ВТ_ПоДокументам.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоКонтрагентам КАК ВТ_ПоКонтрагентам
	|		ПО ВТ_Данные.Контрагент = ВТ_ПоКонтрагентам.Контрагент
	|ГДЕ
	|	ВТ_ПоДокументам.Документ ЕСТЬ NULL
	|	И ВТ_ПоКонтрагентам.Контрагент ЕСТЬ NULL
	|	И ВТ_Данные.ИсключитьДокументИзПроверкиСоответствия = 0
	|	И (ВТ_Данные.СуммаНДСпоБУ + ВТ_Данные.СуммаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.СуммаНДСпоРегистру <> 0
	|			ИЛИ ВТ_Данные.СуммаНДСпоБУ + ВТ_Данные.СуммаНДСпоОтгрузкеБезПереходаСобственности <> 0
	|				И ВТ_Данные.СуммаНДСпоРегистру <> 0
	|				И НЕ(ВТ_Данные.БазаНДСпоБУ + ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности = 0
	|						ИЛИ ВТ_Данные.БазаНДСпоБУ + ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.БазаНДСпоРегистру < 1
	|							И ВТ_Данные.БазаНДСпоБУ + ВТ_Данные.БазаНДСпоОтгрузкеБезПереходаСобственности - ВТ_Данные.БазаНДСпоРегистру > -1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Данные.Документ,
	|	ВТ_Данные.СтавкаНДС
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПроверитьЕстьЗаписиКнигиПродаж2012(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;

	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС(ПараметрыОтчета);
	
	Запрос = Новый Запрос;

	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);    // 60.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 60.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);  // 60.32
	Запрос.УстановитьПараметр("МассивСчетовАвансов", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетовАвансов));

	ВидыСубконто76_ВА = Новый Массив;
	ВидыСубконто76_ВА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто76_ВА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	Запрос.УстановитьПараметр("ВидыСубконто76_ВА", ВидыСубконто76_ВА);

	ВидыСубконто60 = Новый Массив;
	ВидыСубконто60.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто60.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконто60", ВидыСубконто60);
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК СчетФактура,
	|	-1 * ХозрасчетныйОстатки.СуммаОстаток КАК СуммаНДСАванса
	|ПОМЕСТИТЬ ВТ_ОстаткиПоСчету76_ВА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным), &ВидыСубконто76_ВА, Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК СчетФактура,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаАванса,
	|	0 КАК СуммаНДСАванса
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериодаГраница,
	|			Счет В (&МассивСчетовАвансов),
	|			&ВидыСубконто60,
	|			Организация = &Организация
	|				И Субконто2 В
	|					(ВЫБРАТЬ
	|						ВТ_ОстаткиПоСчету76_ВА.СчетФактура
	|					ИЗ
	|						ВТ_ОстаткиПоСчету76_ВА КАК ВТ_ОстаткиПоСчету76_ВА)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОстаткиПоСчету76_ВА.Поставщик,
	|	ВТ_ОстаткиПоСчету76_ВА.СчетФактура,
	|	0,
	|	ВТ_ОстаткиПоСчету76_ВА.СуммаНДСАванса
	|ИЗ
	|	ВТ_ОстаткиПоСчету76_ВА КАК ВТ_ОстаткиПоСчету76_ВА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Данные.Поставщик,
	|	ВТ_Данные.СчетФактура,
	|	СУММА(ВТ_Данные.СуммаАванса) КАК СуммаАванса,
	|	СУММА(ВТ_Данные.СуммаНДСАванса) КАК СуммаНДСАванса
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Поставщик,
	|	ВТ_Данные.СчетФактура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Данные.СуммаАванса) = 0";
	
	ЗапросКнигаПродаж = Новый Запрос;
	ЗапросКнигаПродаж.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);

	ЗапросКнигаПродаж.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеЗаписейКнигиПродаж.Ссылка
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
	|ГДЕ
	|	ФормированиеЗаписейКнигиПродаж.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ФормированиеЗаписейКнигиПродаж.Проведен = ИСТИНА
	|	И ФормированиеЗаписейКнигиПродаж.Организация = &Организация";
	
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
		
		ОбнаруженыОшибки = Ложь;
		
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтрокаПериода.КонПериода), ВидГраницы.Включая));
		Результат = Запрос.Выполнить();
		ДолженБытьДокумент = НЕ Результат.Пустой();
		
		Если ДолженБытьДокумент Тогда
			
			ЗапросКнигаПродаж.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
			ЗапросКнигаПродаж.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
			
			Результат = ЗапросКнигаПродаж.Выполнить();
			ЕстьДокумент = НЕ Результат.Пустой();
			Если НЕ ЕстьДокумент Тогда
				
				Если СтрокаПериода.ОтчетностьНеПредставляется Тогда
					СтрокаПериода.Результат = НСтр("ru = 'Документ формирования книги продаж не обязателен на данном временном интервале (отчетность по НДС не представляется)'");
					СтрокаПроверки.КомментарийРезультата = СтрокаПериода.Результат;
					СтрокиКУдалению.Добавить(СтрокаПериода);
					Продолжить;
				КонецЕсли;
				
				ОбнаруженыОшибки = Истина;
				Если СтрокаПериода.ПериодМеньшеРегламентного Тогда
					СтрокаПериода.Результат = НСтр("ru = 'Документ формирования книги продаж не обязателен, если налоговый период (квартал) еще не закончился'");
					СтрокаПроверки.КомментарийРезультата = СтрокаПериода.Результат;
				Иначе
					СтрокаПериода.Результат = НСтр("ru = 'Нет документа формирования книги продаж'");
					СтрокаПроверки.КомментарийРезультата = "";
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаПериода.Результат = НСтр("ru = 'Документ формирования книги продаж не обязателен на данном временном интервале (нет авансов к восстановлению)'");
			СтрокаПроверки.КомментарийРезультата = СтрокаПериода.Результат;
		КонецЕсли;
		
		Если НЕ ОбнаруженыОшибки Тогда
			СтрокиКУдалению.Добавить(СтрокаПериода);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультата.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат ТаблицаРезультата;

КонецФункции

Функция ПроверитьНачислениеНДСсАвансов(СтрокаПроверки, ПараметрыОтчета) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПроверки)
	И НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ УчетНДСПереопределяемый.ОтчетностьПоНДСПредставляется(
		ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода) Тогда
		СтрокаПроверки.КомментарийРезультатаНетОшибок = НСтр(
			"ru = 'Начисление НДС с полученных предоплат не требуется (отчетность по НДС не представляется).'");
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыРегистрацииСФНаАванс = Обработки.РегистрацияСчетовФактурНаАванс.ПараметрыЗаполнения();
	ПараметрыРегистрацииСФНаАванс.Организация   = ПараметрыОтчета.Организация;
	ПараметрыРегистрацииСФНаАванс.НачалоПериода = ПараметрыОтчета.НачалоПериода;
	ПараметрыРегистрацииСФНаАванс.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
	
	Если НЕ ПараметрыОтчета.ПоказыватьТолькоОшибки Тогда
		ТаблицаАвансов = Обработки.РегистрацияСчетовФактурНаАванс.ЗаполнитьСтроки(ПараметрыРегистрацииСФНаАванс);
	Иначе
		ТаблицаАвансовПолная = Обработки.РегистрацияСчетовФактурНаАванс.ЗаполнитьСтроки(ПараметрыРегистрацииСФНаАванс);
		ТаблицаАвансов = ТаблицаАвансовПолная.СкопироватьКолонки();
	
		// Отбираем авансы, где у счетов-фактур флаг Выставлен = Истина
		Для каждого ТекСтрокаТаблицаАвансовПолная Из ТаблицаАвансовПолная Цикл
	
			СчетФактура = ТекСтрокаТаблицаАвансовПолная.СчетФактура;
		
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				Если СчетФактура.Выставлен Тогда
					НоваяСтрока = ТаблицаАвансов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТаблицаАвансовПолная);
				КонецЕсли;
			КонецЕсли;
	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаПроверки) Тогда
			СтрокаПроверки.КомментарийРезультатаНетОшибок = "";
			СтрокаПроверки.Наименование = "Проверка формирования авансовых счетов-фактур с установленным признаком: Выставлен(передан контрагенту), при наличии авансов полученных ";
			СтрокаПроверки.КомментарийРезультатаОшибка = "Обнаружено не соответствие авансовых счет-фактур полученным авансам";
			СтрокаПроверки.ПричиныОшибок = "Данные об авансах по уже выписанным и переданным контрагенту счет-фактурам на аванс изменились";
			СтрокаПроверки.ПредметКонтроля = "Счет-фактуры на аванс переданные покупателю должны соответствовать полученным авансам";
		КонецЕсли;
	КонецЕсли;
	
	// При получении авансов от покупателей через комиссионеров (в документе "Отчет комиссионера о продажах"
	// заполнена табличная часть "Денежные средства" с видом "Аванс") договор с контрагентом не заполнен и
	// на 76.АВ в качестве 2-го субконто записывается документ "СчетФактураВыданный", 
	// в остальных случаях - договор заполнен и во 2-ое субконто записывается ДокументОснование.

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаАвансов", ТаблицаАвансов);
	Запрос.УстановитьПараметр("Организация",    ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",  ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецДня(ПараметрыОтчета.КонецПериода));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаАвансов.Контрагент КАК Контрагент,
	|	ТаблицаАвансов.Сумма КАК Сумма,
	|	ТаблицаАвансов.СуммаНДС КАК СуммаНДС,
	|	ТаблицаАвансов.ДокументОснование КАК ДокументОснование,
	|	ТаблицаАвансов.СчетФактура КАК СчетФактура,
	|	ТаблицаАвансов.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ТаблицаАвансов
	|ИЗ
	|	&ТаблицаАвансов КАК ТаблицаАвансов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаАвансов.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаАвансов.ДокументОснование КАК Документ,
	|	ВТ_ТаблицаАвансов.Сумма КАК Сумма,
	|	ВТ_ТаблицаАвансов.СуммаНДС КАК СуммаНДС,
	|	0 КАК Сумма76_АВ_68_02,
	|	0 КАК Сумма68_02_76_АВ
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	ВТ_ТаблицаАвансов КАК ВТ_ТаблицаАвансов
	|ГДЕ
	|	ВТ_ТаблицаАвансов.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаАвансов.Контрагент,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаАвансов.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
	|			ТОГДА ВТ_ТаблицаАвансов.ДокументОснование
	|		ИНАЧЕ ВТ_ТаблицаАвансов.СчетФактура
	|	КОНЕЦ,
	|	ВТ_ТаблицаАвансов.Сумма,
	|	ВТ_ТаблицаАвансов.СуммаНДС,
	|	0,
	|	0
	|ИЗ
	|	ВТ_ТаблицаАвансов КАК ВТ_ТаблицаАвансов
	|ГДЕ
	|	ВТ_ТаблицаАвансов.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	0,
	|	0,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам), , Организация = &Организация, КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС), ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Контрагент КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Данные.Контрагент) КАК КонтрагентПредставление,
	|	ВТ_Данные.Документ КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Данные.Документ) КАК ДокументПредставление,
	|	СУММА(ВТ_Данные.Сумма) КАК Сумма,
	|	СУММА(ВТ_Данные.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВТ_Данные.Сумма76_АВ_68_02) КАК Сумма76_АВ_68_02
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО ВТ_Данные.Документ = СчетФактураВыданный.ДокументОснование
	|			И (СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс))
	|ГДЕ
	|	СчетФактураВыданный.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Контрагент,
	|	ВТ_Данные.Документ,
	|	СчетФактураВыданный.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Данные.СуммаНДС) <> СУММА(ВТ_Данные.Сумма76_АВ_68_02) И
	|	СУММА(ВТ_Данные.СуммаНДС) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции

Функция ПроверитьНДСсАвансовБУ_НУ(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Данные.СчетФактура КАК СчетФактура,
	|	Данные.Контрагент КАК Контрагент,
	|	СУММА(Данные.СуммаПоСчету76_АВ) КАК СуммаПоСчету76_АВ,
	|	СУММА(Данные.СуммаПоРегистру) КАК СуммаПоРегистру
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|		ХозрасчетныйОбороты.Субконто2 КАК СчетФактура,
	|		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаПоСчету76_АВ,
	|		0 КАК СуммаПоРегистру
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСПродажиОбороты.Покупатель,
	|		НДСПродажиОбороты.СчетФактура,
	|		0,
	|		НДСПродажиОбороты.НДСОборот
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И ВидЦенности В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученныеНалоговыйАгент), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученныхНалоговыйАгент))) КАК НДСПродажиОбороты) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.СчетФактура,
	|	Данные.Контрагент
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(Данные.СуммаПоСчету76_АВ) = СУММА(Данные.СуммаПоРегистру)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Контрагент КАК Контрагент,
	|	ВТ_Данные.Контрагент.Наименование КАК КонтрагентПредставление,
	|	ВТ_Данные.СчетФактура КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Данные.СчетФактура) КАК ДокументПредставление,
	|	ВТ_Данные.СуммаПоСчету76_АВ КАК СуммаПоСчету76_АВ,
	|	ВТ_Данные.СуммаПоРегистру КАК СуммаПоРегистру
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции

Функция ПроверитьПолнотаНДСАгенты(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УчетНДСПереопределяемый.ОтчетностьПоНДСПредставляется(
		ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода) Тогда
		СтрокаПроверки.КомментарийРезультатаНетОшибок = НСтр(
			"ru = 'Начисление НДС в качестве налогового агента не требуется (отчетность по НДС не представляется).'");
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Документ,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОплаты,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ОплатаПоставщику
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			НЕ СчетДт В (&СчетаИсключения),
	|			&ВидыСубконто,
	|			СчетКт В (&СчетаКассаБанк79),
	|			,
	|			Организация = &Организация
	|				И ЕСТЬNULL(ВЫРАЗИТЬ(СубконтоДт2 КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС, ЛОЖЬ)
	|				И ЕСТЬNULL(ВЫРАЗИТЬ(СубконтоДт2 КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров), ЛОЖЬ)) КАК ХозрасчетныйОборотыДтКт
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ХозрасчетныйОборотыДтКт.Период,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОбороты.Субконто3 КАК Документ,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаНДСпоБУ
	|ПОМЕСТИТЬ ВТ_НДСпоБУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента), &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС
	|ПОМЕСТИТЬ ВТ_НДСПродажи
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И ВидЦенности В (&ВидыЦенностейНалоговыйАгент)) КАК НДСЗаписиКнигиПродажОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОплатаПоставщику.Документ КАК Документ,
	|	ВТ_ОплатаПоставщику.Контрагент КАК Контрагент,
	|	ВТ_ОплатаПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ОплатаПоставщику.СуммаОплаты КАК СуммаОплаты,
	|	0 КАК СуммаНДСпоБУ,
	|	0 КАК БазаНДСпоРегистру,
	|	0 КАК СуммаНДСпоРегистру
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	ВТ_ОплатаПоставщику КАК ВТ_ОплатаПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НДСпоБУ.Документ,
	|	ВТ_НДСпоБУ.Контрагент,
	|	ВТ_НДСпоБУ.ДоговорКонтрагента,
	|	0,
	|	ВТ_НДСпоБУ.СуммаНДСпоБУ,
	|	0,
	|	0
	|ИЗ
	|	ВТ_НДСпоБУ КАК ВТ_НДСпоБУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НДСПродажи.СчетФактура,
	|	ВТ_НДСПродажи.Покупатель,
	|	ВТ_НДСПродажи.ДоговорКонтрагента,
	|	0,
	|	0,
	|	ВТ_НДСПродажи.СуммаБезНДС,
	|	ВТ_НДСПродажи.НДС
	|ИЗ
	|	ВТ_НДСПродажи КАК ВТ_НДСПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Документ КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Данные.Документ) КАК ДокументПредставление,
	|	ВТ_Данные.Контрагент КАК Контрагент,
	|	ВТ_Данные.Контрагент.Наименование КАК КонтрагентПредставление,
	|	СУММА(ВТ_Данные.СуммаОплаты) КАК СуммаОплаты,
	|	СУММА(ВТ_Данные.СуммаНДСпоБУ) КАК СуммаНДСпоБУ,
	|	СУММА(ВТ_Данные.БазаНДСпоРегистру) КАК БазаНДСпоРегистру,
	|	СУММА(ВТ_Данные.СуммаНДСпоРегистру) КАК СуммаНДСпоРегистру
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Документ,
	|	ВТ_Данные.Контрагент,
	|	ВТ_Данные.Контрагент.Наименование
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВТ_Данные.СуммаОплаты) - СУММА(ВТ_Данные.БазаНДСпоРегистру) > 1
	|		ИЛИ СУММА(ВТ_Данные.СуммаОплаты) - СУММА(ВТ_Данные.БазаНДСпоРегистру) < -1
	|		ИЛИ СУММА(ВТ_Данные.СуммаНДСпоБУ) - СУММА(ВТ_Данные.СуммаНДСпоРегистру) > 1
	|		ИЛИ СУММА(ВТ_Данные.СуммаНДСпоБУ) - СУММА(ВТ_Данные.СуммаНДСпоРегистру) < -1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);

	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента); // 68.32
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента); // 76.НА

	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	МассивКассаБанк79 = Новый Массив;
	МассивКассаБанк79.Добавить(ПланыСчетов.Хозрасчетный.Касса); 			// 50
	МассивКассаБанк79.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета); 	// 51
	МассивКассаБанк79.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета); 	// 52
	МассивКассаБанк79.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета); 	// 55
	МассивКассаБанк79.Добавить(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты); // 79
	МассивКассаБанк79.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами); // 71.01
	МассивКассаБанк79.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал); // 71.02
	
	Запрос.УстановитьПараметр("СчетаКассаБанк79",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивКассаБанк79));
	Запрос.УстановитьПараметр("ВидыЦенностейНалоговыйАгент",
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции

Функция ПроверитьНДСсСМРхозспособомВКнигеПродаж(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УчетНДСПереопределяемый.ОтчетностьПоНДСПредставляется(
		ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода) Тогда
		СтрокаПроверки.КомментарийРезультатаНетОшибок = НСтр(
			"ru = 'Начисление НДС по СМР не требуется (отчетность по НДС не представляется).'");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаСМР,
	|	0 КАК БазаНДСпоРегистру,
	|	0 КАК СуммаНДСпоРегистру
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			КВАРТАЛ,
	|			Счет В (&Счета08_03),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства),
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Хозспособ),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСПродажи.Период,
	|	0,
	|	НДСПродажи.СуммаБезНДСОборот,
	|	НДСПродажи.НДСОборот
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			КВАРТАЛ,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.СМРСобственнымиСилами)) КАК НДСПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Период,
	|	СУММА(ВТ_Данные.СуммаСМР) КАК СуммаСМР,
	|	СУММА(ВТ_Данные.БазаНДСпоРегистру) КАК БазаНДСпоРегистру,
	|	СУММА(ВТ_Данные.СуммаНДСпоРегистру) КАК СуммаНДСпоРегистру
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_Результат.Период < &НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ВТ_Результат.Период
	|	КОНЕЦ КАК НачПериода,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ВТ_Результат.Период, КВАРТАЛ) < &КонецПериода
	|			ТОГДА КОНЕЦПЕРИОДА(ВТ_Результат.Период, КВАРТАЛ)
	|		ИНАЧЕ &КонецПериода
	|	КОНЕЦ КАК КонПериода,
	|	ВЫБОР
	|		КОГДА ВТ_Результат.Период > НАЧАЛОПЕРИОДА(ВТ_Результат.Период, КВАРТАЛ)
	|				ИЛИ КОНЕЦПЕРИОДА(ВТ_Результат.Период, КВАРТАЛ) > &КонецПериода
	|			ТОГДА &ТекстПримечание
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Примечание,
	|	ВТ_Результат.СуммаСМР,
	|	ВТ_Результат.БазаНДСпоРегистру,
	|	ВТ_Результат.СуммаНДСпоРегистру
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	ВТ_Результат.СуммаСМР <> ВТ_Результат.БазаНДСпоРегистру
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачПериода";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 		КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 		ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ТекстПримечание", 	
		НСтр("ru = 'Период составляет меньше квартала, начисление НДС по СМР выполняется в конце по итогам всего квартала'"));
	Запрос.УстановитьПараметр("Счета08_03",	   
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств));
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции

Функция ПроверитьНумерациюСФ(СтрокаПроверки, ПараметрыОтчета)
	Возврат ПроверитьНумерациюДокументов(Метаданные.Документы.СчетФактураВыданный.ПолноеИмя(), ПараметрыОтчета);
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
// Проверки раздела "Ведение книги покупок по НДС"

Функция ПроверитьПолнотаСФПолученных(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаОшибок = ПроверитьНаличиеСчетовФактурПолученных(ПараметрыОтчета);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаОшибок);
	Запрос.УстановитьПараметр("ТекстНетСчетаФактуры", НСтр("ru='Нет счета-фактуры'"));
	Запрос.УстановитьПараметр("ТекстСчетФактураНеПроведен", НСтр("ru='Счет-фактура не проведен'"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Контрагент КАК Контрагент,
	|	ТаблицаДокументов.Документ КАК Документ,
	|	ТаблицаДокументов.Дата КАК Дата1,
	|	ТаблицаДокументов.ТребуетсяСчетФактура КАК ТребуетсяСчетФактура,
	|	ТаблицаДокументов.СчетФактура КАК СчетФактура,
	|	ТаблицаДокументов.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ТаблицаДокументов.Контрагент) КАК КонтрагентПредставление,
	|	ВТ_ТаблицаДокументов.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДокументов.Документ КАК Документ,
	|	ВТ_ТаблицаДокументов.Дата КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ТаблицаДокументов.Документ) КАК ДокументПредставление,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДокументов.СчетФактура = НЕОПРЕДЕЛЕНО
	|			ТОГДА &ТекстНетСчетаФактуры
	|		ИНАЧЕ &ТекстСчетФактураНеПроведен
	|	КОНЕЦ КАК Ошибка
	|ИЗ
	|	ВТ_ТаблицаДокументов КАК ВТ_ТаблицаДокументов
	|ГДЕ
	|	ВТ_ТаблицаДокументов.ТребуетсяСчетФактура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТаблицаДокументов.Контрагент,
	|	ВТ_ТаблицаДокументов.Дата,
	|	ВТ_ТаблицаДокументов.Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
		
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции

Функция ПараметрыПоискаСчетовФактур(ПараметрыОтчета)
	
	Результат = УчетНДС.НовыйПараметрыПоискаСчетовФактур();
	
	Результат.НачалоПериода       = ПараметрыОтчета.НачалоПериода;
	Результат.КонецПериода        = КонецДня(ПараметрыОтчета.КонецПериода);
	Результат.Организация         = ПараметрыОтчета.Организация;
	Результат.НаличиеСчетаФактуры = Ложь;
	Результат.ИскатьПоОборотам    = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьЕстьРаспределениеКосвРасходов(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПрименяетсяРаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	
	Если ПрименяетсяРаздельныйУчетНДС Тогда

		ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС(ПараметрыОтчета);

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РаспределениеНДС.Ссылка
		|ИЗ
		|	Документ.РаспределениеНДС КАК РаспределениеНДС
		|ГДЕ
		|	РаспределениеНДС.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И РаспределениеНДС.Проведен = ИСТИНА
		|	И РаспределениеНДС.Организация = &Организация
		|	И МЕСЯЦ(РаспределениеНДС.Дата) = МЕСЯЦ(&ДатаКон)";
		Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
		СтрокиКУдалению = Новый Массив;
		
		Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
			
			Если СтрокаПериода.ОтчетностьНеПредставляется Тогда
				СтрокаПериода.Результат = НСтр("ru = 'Распределение НДС не требуется (отчетность по НДС не представляется)'");
				СтрокаПроверки.КомментарийРезультата = СтрокаПериода.Результат;
				СтрокиКУдалению.Добавить(СтрокаПериода);
			ИначеЕсли СтрокаПериода.ПериодМеньшеРегламентного Тогда
				СтрокаПериода.Результат = НСтр("ru = 'Документ распределения НДС не обязателен, если налоговый период (квартал) еще не закончился'");
				СтрокаПроверки.КомментарийРезультата = СтрокаПериода.Результат;
			ИначеЕсли НЕ РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЕстьНДСКРаспределению(ПараметрыОтчета.Организация, СтрокаПериода.КонПериода) Тогда
				СтрокаПериода.Результат = НСтр("ru = 'Распределение НДС не требуется (отсутствует НДС к распределению)'");
				СтрокаПроверки.КомментарийРезультата = "";
				СтрокиКУдалению.Добавить(СтрокаПериода);
			Иначе
				Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
				Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
				Результат = Запрос.Выполнить();
				ЕстьРаспределение = НЕ Результат.Пустой();
				Если НЕ ЕстьРаспределение Тогда
					СтрокаПериода.Результат = НСтр("ru = 'Нет документа распределения НДС'");
					СтрокаПроверки.КомментарийРезультата = "";
				Иначе
					СтрокиКУдалению.Добавить(СтрокаПериода);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаРезультата.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	Иначе
		СтрокаПроверки.КомментарийРезультатаНетОшибок = НСтр(
			"ru = 'Распределение НДС не требуется, так как в настройках учета НДС организации
			|не включена возможность наличия операций без НДС или с НДС 0%'");
	КонецЕсли;
	
	Возврат ?(ПрименяетсяРаздельныйУчетНДС, ТаблицаРезультата, Ложь);

КонецФункции

Функция ПроверитьВсеКосвРасходыРаспределены(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПрименяетсяРаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС(ПараметрыОтчета);
	
	Если ПрименяетсяРаздельныйУчетНДС Тогда
		
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("НачПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		ТаблицаОшибок.Колонки.Добавить("КонПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		ТаблицаОшибок.Колонки.Добавить("НераспределеннаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

		РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
		
		Запрос = Новый Запрос;
		Если РаздельныйУчетНДСНаСчете19 Тогда 
			
			ТекстПредметКонтроля 	= НСтр("ru = 'НДС, подлежащая распределению, поступившая'");
			ТекстРегистрКонтроля	= НСтр("ru = '""НДС раздельный учет"" со способом учета ""Распределяется""'");
			ТекстРаспределения 		= НСтр("ru = 'распределенного'");
			ТекстКомментарий 		= НСтр("ru = 'НДС'");
			
			ПланСчетов = ПланыСчетов.Хозрасчетный;
			СчетаУчетаОСиНМА = Новый Массив;
			СчетаУчетаОСиНМА.Добавить(ПланСчетов.ОсновныеСредства);     // 01
			СчетаУчетаОСиНМА.Добавить(ПланСчетов.ДоходныеВложенияВ_МЦ); // 03
			СчетаУчетаОСиНМА.Добавить(ПланСчетов.НематериальныеАктивы); // 04
			СчетаУчетаОСиНМА = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаОСиНМА);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	НДСРаздельныйУчетОбороты.НДСОборот КАК НераспределеннаяСумма
			|ИЗ
			|	РегистрНакопления.НДСРаздельныйУчет.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			,
			|			Организация = &Организация
			|				И СпособУчетаНДС = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.Распределяется)) КАК НДСРаздельныйУчетОбороты
			|ГДЕ
			|	НДСРаздельныйУчетОбороты.НДСПриход > 0
			|	И НДСРаздельныйУчетОбороты.НДСОборот > 0";
			
			ТекстЗапросаОСиНМА =
			"ВЫБРАТЬ
			|	НДСРаздельныйУчетОбороты.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
			|	НДСРаздельныйУчетОбороты.НДСПриход - НДСРаздельныйУчетОбороты.НДСРасход КАК НераспределеннаяСумма
			|ПОМЕСТИТЬ ВТОбороты
			|ИЗ
			|	РегистрНакопления.НДСРаздельныйУчет.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			,
			|			Организация = &Организация
			|				И СпособУчетаНДС = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.Распределяется)) КАК НДСРаздельныйУчетОбороты
			|ГДЕ
			|	НДСРаздельныйУчетОбороты.НДСПриход - НДСРаздельныйУчетОбороты.НДСРасход <> 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	АналитикаУчетаЗатрат
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТОбороты.НераспределеннаяСумма КАК НераспределеннаяСумма
			|ИЗ
			|	ВТОбороты КАК ВТОбороты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
			|		ПО ВТОбороты.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.КлючАналитики
			|ГДЕ
			|	РегистрАналитикаУчетаЗатрат.СчетЗатрат В(&СчетаУчетаОСиНМА)";
			
		Иначе
			
			ТекстПредметКонтроля 	= НСтр("ru = 'косвенных расходов, поступивших'");
			ТекстРегистрКонтроля 	= НСтр("ru = '""НДС по косвенным расходам""'");
			ТекстРаспределения		= НСтр("ru = 'распределенных'");
			ТекстКомментарий 		= НСтр("ru = 'косвенных расходов для целей НДС'");
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	НДСКосвенныеРасходыОбороты.СуммаБезНДСПриход + НДСКосвенныеРасходыОбороты.НДСПриход 
			|		- НДСКосвенныеРасходыОбороты.СуммаБезНДСРасход - НДСКосвенныеРасходыОбороты.НДСРасход КАК НераспределеннаяСумма
			|ИЗ
			|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК НДСКосвенныеРасходыОбороты
			|ГДЕ
			|	НДСКосвенныеРасходыОбороты.СуммаБезНДСПриход + НДСКосвенныеРасходыОбороты.НДСПриход 
			|		- НДСКосвенныеРасходыОбороты.СуммаБезНДСРасход - НДСКосвенныеРасходыОбороты.НДСРасход <> 0";
			
		КонецЕсли;
		
		СтрокаПроверки.ПредметКонтроля 					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПроверки.ПредметКонтроля, ТекстПредметКонтроля, ТекстРегистрКонтроля, ТекстРаспределения);
		СтрокаПроверки.КомментарийРезультатаНетОшибок 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПроверки.КомментарийРезультатаНетОшибок, ТекстКомментарий);
		СтрокаПроверки.КомментарийРезультатаОшибка		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПроверки.КомментарийРезультатаОшибка, ТекстКомментарий);
		
		Для каждого СтрокаПериода Из ТаблицаРезультата Цикл

			Если СтрокаПериода.ОтчетностьНеПредставляется Тогда
				СтрокаПериода.Результат = НСтр("ru = 'Распределение НДС не требуется (отчетность по НДС не представляется)'");
				СтрокаПроверки.КомментарийРезультата = СтрокаПериода.Результат;
				Продолжить;
			Иначе
				СтрокаПроверки.КомментарийРезультата = "";
			КонецЕсли;
			
			НачалоПериодаФормирования = СтрокаПериода.НачПериода;
			
			Если РаздельныйУчетНДСНаСчете19 И СтрокаПериода.ПериодМеньшеРегламентного Тогда 
				Запрос.Текст = ТекстЗапросаОСиНМА;
				Запрос.УстановитьПараметр("СчетаУчетаОСиНМА",	СчетаУчетаОСиНМА);
			ИначеЕсли РаздельныйУчетНДСНаСчете19 Тогда
				Запрос.Текст = ТекстЗапроса;
				НачалоПериодаФормирования = НачалоКвартала(СтрокаПериода.НачПериода);
			Иначе
				Запрос.Текст = ТекстЗапроса;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
			Запрос.УстановитьПараметр("ДатаНач", НачалоПериодаФормирования);
			Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
			
			Результат = Запрос.Выполнить();
			ВсяСуммаРаспределена = Результат.Пустой();
			Если НЕ ВсяСуммаРаспределена Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				
				СтрокаОшибки.НачПериода = СтрокаПериода.НачПериода;
				СтрокаОшибки.КонПериода = СтрокаПериода.КонПериода;
				СтрокаОшибки.НераспределеннаяСумма = Выборка.НераспределеннаяСумма;
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		СтрокаПроверки.КомментарийРезультата = НСтр(
			"ru = 'Распределение НДС не требуется, так как в настройках учета НДС организации
			|не включена возможность наличия операций без НДС или с НДС 0%'");
	КонецЕсли;

	Возврат ?(ПрименяетсяРаздельныйУчетНДС, ТаблицаОшибок, Ложь);

КонецФункции

Функция ПроверитьЕстьЗаписиКнигиПокупок(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС(ПараметрыОтчета);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСПредъявленныйОстатки.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(&ДатаКон, Организация = &Организация) КАК НДСПредъявленныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеЗаписейКнигиПокупок.Ссылка
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
	|ГДЕ
	|	ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ФормированиеЗаписейКнигиПокупок.Проведен = ИСТИНА
	|	И ФормированиеЗаписейКнигиПокупок.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);

	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл

		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ЕстьНДСкВычету = НЕ РезультатыЗапроса[0].Пустой();
		ЕстьКнигаПокупок = НЕ РезультатыЗапроса[1].Пустой();
		Если ЕстьНДСкВычету И НЕ ЕстьКнигаПокупок Тогда
			Если СтрокаПериода.ОтчетностьНеПредставляется Тогда
				СтрокиКУдалению.Добавить(СтрокаПериода);
			Иначе
				СтрокаПериода.Результат = НСтр("ru = 'Нет документа формирования записей книги покупок'");
			КонецЕсли;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаПериода);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультата.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат ТаблицаРезультата;

КонецФункции

Функция ПроверитьНетОтрицательногоНДСПредъявленного(СтрокаПроверки, ПараметрыОтчета) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПроверки)
	И НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС(ПараметрыОтчета);

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("Документ");
	ТаблицаОшибок.Колонки.Добавить("ДокументПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("СуммаОстатка", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток,
	|	НДСПредъявленныйОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(&ГраницаКон, Организация = &Организация) КАК НДСПредъявленныйОстатки
	|
	|//{РАЗДЕЛЬНЫЙ_УЧЕТ_НДС_ДО_2014
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
	|	-НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток,
	|	-НДСПредъявленныйРеализация0Остатки.НДСОстаток
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&ГраницаКон, Организация = &Организация) КАК НДСПредъявленныйРеализация0Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура,
	|	-(НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток - НДСПоПриобретеннымЦенностямОстатки.НДСОстаток),
	|	-НДСПоПриобретеннымЦенностямОстатки.НДСОстаток
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
	|			&ГраницаКон,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС)
	|				И СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОборудованиеКУстановке)) КАК НДСПоПриобретеннымЦенностямОстатки
	|//РАЗДЕЛЬНЫЙ_УЧЕТ_НДС_ДО_2014}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДатаКон КАК ПериодМесяц,
	|	ВТ_Остатки.СчетФактура КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Остатки.СчетФактура) КАК ДокументПредставление,
	|	СУММА(ВТ_Остатки.СуммаБезНДСОстаток + ВТ_Остатки.НДСОстаток) КАК СуммаОстатка
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.СчетФактура
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Остатки.СуммаБезНДСОстаток + ВТ_Остатки.НДСОстаток) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);

	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл

		Если УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(ПараметрыОтчета.Организация, СтрокаПериода.НачПериода) Тогда
			// При использовании новой методики раздельного учета НДС выполняется сравнение только остатков НДСПредъявленный.
			Поз = СтрНайти(ТекстЗапроса, "{РАЗДЕЛЬНЫЙ_УЧЕТ_НДС_ДО_2014");
			Запрос.Текст = Лев(ТекстЗапроса, Поз - 1);
		
			ТекстЗапроса2 = Сред(ТекстЗапроса, Поз);
			Поз = СтрНайти(ТекстЗапроса2, "}");
			
			Запрос.Текст = Запрос.Текст +  Сред(ТекстЗапроса2, Поз + 1);
		Иначе
			Запрос.Текст = ТекстЗапроса;
		КонецЕсли;

		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(СтрокаПериода.КонПериода, ВидГраницы.Включая));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, Выборка);
		
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат ТаблицаОшибок;

КонецФункции

Функция ПроверитьОстаткиНДСПредъявленного_БУ_НУ(СтрокаПроверки, ПараметрыОтчета) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПроверки)
	И НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС(ПараметрыОтчета);
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("Документ");
	ТаблицаОшибок.Колонки.Добавить("ДокументПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("СчетУчетаНДСПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("СуммаНДСпоСчету19", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОшибок.Колонки.Добавить("СуммаНДСпоРегистрам", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Запрос = Новый Запрос;
	ТекстЗапросаРаздельныйУчетНДСДо2014 = 
	"ВЫБРАТЬ
	|	&ПериодМесяц КАК Период,
	|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток
	|ПОМЕСТИТЬ ВТ_НДСПредъявленныйРеализация0
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&КонГраница, Организация = &Организация) КАК НДСПредъявленныйРеализация0Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодМесяц КАК Период,
	|	ХозрасчетныйОстатки.Счет КАК СчетУчетаНДС,
	|	ХозрасчетныйОстатки.Субконто1 КАК СчетФактура,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаНДСпоСчету19,
	|	0 КАК СуммаНДСпоРегистрам
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В (&Счета19), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПериодМесяц,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	0,
	|	НДСПредъявленныйОстатки.НДСОстаток
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(&КонГраница, Организация = &Организация) КАК НДСПредъявленныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НДСПредъявленныйРеализация0.Период,
	|	ВТ_НДСПредъявленныйРеализация0.СчетУчетаНДС,
	|	ВТ_НДСПредъявленныйРеализация0.СчетФактура,
	|	0,
	|	-ВТ_НДСПредъявленныйРеализация0.НДСОстаток
	|ИЗ
	|	ВТ_НДСПредъявленныйРеализация0 КАК ВТ_НДСПредъявленныйРеализация0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НДСПредъявленныйРеализация0.Период,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0),
	|	ВТ_НДСПредъявленныйРеализация0.СчетФактура,
	|	0,
	|	ВТ_НДСПредъявленныйРеализация0.НДСОстаток
	|ИЗ
	|	ВТ_НДСПредъявленныйРеализация0 КАК ВТ_НДСПредъявленныйРеализация0
	|;
	|";
	
	ТекстЗапросаРаздельныйУчетНДСНаСчете19 = 
	"ВЫБРАТЬ
	|	&ПериодМесяц КАК Период,
	|	ХозрасчетныйОстатки.Счет КАК СчетУчетаНДС,
	|	ХозрасчетныйОстатки.Субконто1 КАК СчетФактура,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаНДСпоСчету19,
	|	0 КАК СуммаНДСпоРегистрам
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница,
	|			Счет В (&Счета19),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто2 В (&КонтролируемыеСпособыУчетаНДС)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПериодМесяц,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	0,
	|	НДСПредъявленныйОстатки.НДСОстаток
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(&КонГраница, Организация = &Организация) КАК НДСПредъявленныйОстатки
	|;
	|";
	
	ТекстЗапросаИтоговый = 
	"ВЫБРАТЬ
	|	ВТ_Данные.Период КАК ПериодМесяц,
	|	ВТ_Данные.СчетФактура КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Данные.СчетФактура) КАК ДокументПредставление,
	|	ВТ_Данные.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Данные.СчетУчетаНДС) КАК СчетУчетаНДСПредставление,
	|	СУММА(ВТ_Данные.СуммаНДСпоСчету19) КАК СуммаНДСпоСчету19,
	|	СУММА(ВТ_Данные.СуммаНДСпоРегистрам) КАК СуммаНДСпоРегистрам
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ПО ВТ_Данные.СчетФактура = КорректировкаРеализации.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ КорректировкаРеализации.Дата ЕСТЬ NULL
	|				ТОГДА ГОД(&ПериодМесяц) = ГОД(КорректировкаРеализации.Дата)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Период,
	|	ВТ_Данные.СчетУчетаНДС,
	|	ВТ_Данные.СчетФактура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Данные.СуммаНДСпоРегистрам) <> СУММА(ВТ_Данные.СуммаНДСпоСчету19)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Данные.Период,
	|	ВТ_Данные.СчетФактура,
	|	ВТ_Данные.СчетУчетаНДС
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
		
	Массив19 = Новый Массив();
	Массив19.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	Запрос.УстановитьПараметр("Счета19", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Массив19));
	
	// Определим фактический состав субконто на субсчетах 19-го,
	// считаем, что они одинаковы для всех субсчетов.
	ВидСубконтоСпособыУчетаНДС = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС;
	СвойстваСчета19_03 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
	ЕстьСубконтоСпособыУчетаНДС = 
		СвойстваСчета19_03.ВидСубконто1 = ВидСубконтоСпособыУчетаНДС
		ИЛИ СвойстваСчета19_03.ВидСубконто2 = ВидСубконтоСпособыУчетаНДС
		ИЛИ СвойстваСчета19_03.ВидСубконто3 = ВидСубконтоСпособыУчетаНДС;
	
	Для Каждого СтрокаПериода Из ТаблицаРезультата Цикл

		РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(ПараметрыОтчета.Организация, СтрокаПериода.НачПериода);
			
		КонтролируемыеСпособыУчетаНДС = Новый СписокЗначений;
		КонтролируемыеСпособыУчетаНДС.Добавить(Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
		
		Если РаздельныйУчетНДСНаСчете19 Тогда 
			
			Если НЕ ЕстьСубконтоСпособыУчетаНДС Тогда
				Продолжить;
			КонецЕсли;
			
			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС);
			
			ОтключениеРаздельногоУчетаНДС = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СуществуютРегламентныеОперации(
				ПараметрыОтчета.Организация,
				СтрокаПериода.КонПериода + 1,
				Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС);
				
			Если ОтключениеРаздельногоУчетаНДС Тогда
				КонтролируемыеСпособыУчетаНДС.Добавить(Перечисления.СпособыУчетаНДС.ПустаяСсылка());
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапросаРаздельныйУчетНДСНаСчете19 + ТекстЗапросаИтоговый;
		Иначе
			Запрос.Текст = ТекстЗапросаРаздельныйУчетНДСДо2014 + ТекстЗапросаИтоговый;
		КонецЕсли;
			
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		Запрос.УстановитьПараметр("КонтролируемыеСпособыУчетаНДС", КонтролируемыеСпособыУчетаНДС);
		Запрос.УстановитьПараметр("ПериодМесяц", НачалоМесяца(СтрокаПериода.КонПериода));
		Запрос.УстановитьПараметр("КонГраница",  Новый Граница(КонецДня(СтрокаПериода.КонПериода), ВидГраницы.Включая));

		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, Выборка);
		
		КонецЦикла; 

	КонецЦикла;
	
	Возврат ТаблицаОшибок;

КонецФункции

Функция ПроверитьЕстьВычетНДСсАвансов(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;

	ПараметрыКнигиПокупок = Новый Структура();
	ПараметрыКнигиПокупок.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыКнигиПокупок.Вставить("Дата",        КонецДня(ПараметрыОтчета.КонецПериода));

	// Вызываем функцию, которая готовит таблицу для самой книги покупок,
	// если она вернет что-то, то это как раз те строки, которых не хватает в книге покупок по вычету НДС с полученных авансов.
	НДСсАвансов = Документы.ФормированиеЗаписейКнигиПокупок.ПодготовитьДанныеРазделаВычетНДССПолученныхАвансов(ПараметрыКнигиПокупок);
	
	Если НДСсАвансов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Колонка с общей суммой зачтенного аванса.
	НДСсАвансов.Колонки.Добавить("ЗачетАвансов", НДСсАвансов.Колонки.НДС.ТипЗначения);
	НДСсАвансов.Колонки.Добавить("ПокупательПредставление",  ОбщегоНазначения.ОписаниеТипаСтрока(0));
	НДСсАвансов.Колонки.Добавить("СчетФактураПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	// Определим представления для контрагентов и документов.
	ПокупателиПоТипам   = Новый Соответствие(); // Ключ - тип ссылки Покупатель, Значение - Массив ссылок.
	СчетаФактурыПоТипам = Новый Соответствие(); // Ключ - тип ссылки СчетФактура, Значение - Массив ссылок.
	
	Для каждого СтрокаТаблицы Из НДСсАвансов Цикл
		СтрокаТаблицы.ЗачетАвансов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Покупатель) Тогда
			// Запоминаем покупателя для получения его реквизитов.
			ТипПокупателя = ТипЗнч(СтрокаТаблицы.Покупатель);
			МассивПокупатели = ПокупателиПоТипам[ТипПокупателя];
			Если МассивПокупатели = Неопределено Тогда
				МассивПокупатели = Новый Массив;
				ПокупателиПоТипам.Вставить(ТипПокупателя, МассивПокупатели);
			КонецЕсли;
			МассивПокупатели.Добавить(СтрокаТаблицы.Покупатель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
			ТипСчетаФактуры = ТипЗнч(СтрокаТаблицы.СчетФактура);
			МассивСчетовФактур = СчетаФактурыПоТипам[ТипСчетаФактуры];
			Если МассивСчетовФактур = Неопределено Тогда
				МассивСчетовФактур = Новый Массив;
				СчетаФактурыПоТипам.Вставить(ТипСчетаФактуры, МассивСчетовФактур);
			КонецЕсли;
			МассивСчетовФактур.Добавить(СтрокаТаблицы.СчетФактура);
		КонецЕсли;
		
	КонецЦикла;
	
	// Выбираем представления из базы.
	Для каждого КлючИЗначение Из ПокупателиПоТипам Цикл
		ТипПокупателя = КлючИЗначение.Ключ;
		СведенияОПокупателях = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(КлючИЗначение.Значение, "Представление");
		Для каждого СтрокаТаблицы Из НДСсАвансов Цикл
		    Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Покупатель) ИЛИ ТипЗнч(СтрокаТаблицы.Покупатель) <> ТипПокупателя Тогда
		    	Продолжить;
		    КонецЕсли;
		    
		    СтрокаТаблицы.ПокупательПредставление = СведенияОПокупателях[СтрокаТаблицы.Покупатель];
		КонецЦикла;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из СчетаФактурыПоТипам Цикл
		ТипСчетаФактуры = КлючИЗначение.Ключ;
		СведенияОСчетахФактурах = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(КлючИЗначение.Значение, "Представление");
		Для каждого СтрокаТаблицы Из НДСсАвансов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) ИЛИ ТипЗнч(СтрокаТаблицы.СчетФактура) <> ТипСчетаФактуры Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.СчетФактураПредставление = СведенияОСчетахФактурах[СтрокаТаблицы.СчетФактура];
		КонецЦикла;
	КонецЦикла;
	
	// Отсортируем по дате зачета и представлению.
	НДСсАвансов.Сортировать("ДатаСобытия, ПокупательПредставление");
	
	Возврат НДСсАвансов;

КонецФункции

Функция ПроверитьПравильностьДанныхПоВозвратам(СтрокаПроверки, ПараметрыОтчета)

	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Документ
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Организация = &Организация
	|	И ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВозвратТоваровОтПокупателя.Проведен
	|	И ВозвратТоваровОтПокупателя.ПокупателюВыставляетсяКорректировочныйСчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаВозвратовНаПроверку = Результат.Выгрузить();
	
	СписокДокументов = ТаблицаВозвратовНаПроверку.ВыгрузитьКолонку("Документ");
	
	ТаблицаРезультата = Документы.ВозвратТоваровОтПокупателя.ПроверитьКорректностьЗаполненияДокументов(СписокДокументов);
	
	Если НЕ ТаблицаРезультата.Успешно Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровОтПокупателя.Ссылка) КАК ДокументПредставление
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Ссылка В(&МассивДокуметов)";
	
		Запрос.УстановитьПараметр("МассивДокуметов", ТаблицаРезультата.ТребующиеПерепроведения);
		
		СписокДокументовСОшибками = Запрос.Выполнить().Выгрузить();
		
		Возврат СписокДокументовСОшибками;
		
	КонецЕсли;
	
	Возврат Новый ТаблицаЗначений;
	
КонецФункции

Функция ПроверитьВычетНДСсАвансов_БУ_НУ(СтрокаПроверки, ПараметрыОтчета)
	
	Если НЕ ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Данные.СчетФактура КАК СчетФактура,
	|	Данные.Контрагент КАК Контрагент,
	|	СУММА(Данные.СуммаПоСчету76_АВ) КАК СуммаПоСчету76_АВ,
	|	СУММА(Данные.СуммаПоРегистру) КАК СуммаПоРегистру
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|		ХозрасчетныйОбороты.Субконто2 КАК СчетФактура,
	|		ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаПоСчету76_АВ,
	|		0 КАК СуммаПоРегистру
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСПокупкиОбороты.Поставщик,
	|		НДСПокупкиОбороты.СчетФактура,
	|		0,
	|		НДСПокупкиОбороты.НДСОборот
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И ВидЦенности В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученныеНалоговыйАгент), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученныхНалоговыйАгент))) КАК НДСПокупкиОбороты) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.СчетФактура,
	|	Данные.Контрагент
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(Данные.СуммаПоСчету76_АВ) = СУММА(Данные.СуммаПоРегистру)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Контрагент КАК Контрагент,
	|	ВТ_Данные.Контрагент.Наименование КАК КонтрагентПредставление,
	|	ВТ_Данные.СчетФактура КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Данные.СчетФактура) КАК ДокументПредставление,
	|	ВТ_Данные.СуммаПоСчету76_АВ КАК СуммаПоСчету76_АВ,
	|	ВТ_Данные.СуммаПоРегистру КАК СуммаПоРегистру
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции

Функция ПолучитьНомерЧислом(НомерСтрокой)

	ЧисловаяЧастьНомера = "";
	ДлинаСтроки = СтрДлина(НомерСтрокой);
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл
		НомерСимвола = ДлинаСтроки - Счетчик;
		ТекСимвол = Сред(НомерСтрокой, НомерСимвола, 1);
		ЭтоЧисло = СтрНайти("0123456789", ТекСимвол) > 0;
		Если ЭтоЧисло Тогда
			ЧисловаяЧастьНомера = ТекСимвол + ЧисловаяЧастьНомера;
		ИначеЕсли НЕ ПустаяСтрока(ЧисловаяЧастьНомера) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерЧислом = Число("0"+ЧисловаяЧастьНомера);
	Возврат НомерЧислом;

КонецФункции 

Функция ПроверитьНеприменениеУСН(СтрокаПроверки, ПараметрыОтчета)
	
	НетУчетнойПолитики = НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если НетУчетнойПолитики Тогда
	
		ТекстКомментария = НСтр("ru = 'Проверка не может быть выполнена, так как не определена учетная политика организации на %1.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));
		Возврат Ложь;
	
	КонецЕсли;
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	
	Если ПрименяетсяУСН Тогда
	
		ТекстКомментария = НСтр("ru = 'Проверка не может быть выполнена, так как организация на %1 применяет упрощенную систему налогообложения.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));

		Возврат Ложь;
		
	КонецЕсли;
		
	Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
	
		ТекстКомментария = НСтр("ru = 'Проверка не может быть выполнена, так как организация на %1 применяет особый порядок налогообложения налогообложения.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));

		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьПрименениеНПД(СтрокаПроверки, ПараметрыОтчета)
	
	НетУчетнойПолитики = НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если НетУчетнойПолитики Тогда
		
		ТекстКомментария = НСтр("ru = 'Проверка не может быть выполнена, так как не определена учетная политика организации на %1.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));
		Возврат Ложь;
		
	ИначеЕсли УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода) Тогда
		
		ТекстКомментария = НСтр("ru = 'Проверка не может быть выполнена, так как организация на %1 является плательщиком налога на профессиональный доход.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС(ПараметрыОтчета)
	
	ТаблицаНалоговыхПериодов = Новый ТаблицаЗначений;
	ТаблицаНалоговыхПериодов.Колонки.Добавить("НачПериода",                 Новый ОписаниеТипов("Дата"));
	ТаблицаНалоговыхПериодов.Колонки.Добавить("КонПериода",                 Новый ОписаниеТипов("Дата"));
	ТаблицаНалоговыхПериодов.Колонки.Добавить("Результат",                  Новый ОписаниеТипов("Строка"));
	ТаблицаНалоговыхПериодов.Колонки.Добавить("ПериодМеньшеРегламентного",  Новый ОписаниеТипов("Булево"));
	ТаблицаНалоговыхПериодов.Колонки.Добавить("ОтчетностьНеПредставляется", Новый ОписаниеТипов("Булево"));
	
	ТекДата      = ПараметрыОтчета.НачалоПериода;
	ДатаКон      = ПараметрыОтчета.КонецПериода;
	КонецДатыКон = КонецДня(ПараметрыОтчета.КонецПериода);
	
	Пока ТекДата < ДатаКон Цикл
		
		ЭтоНачалоНалоговогоПериода = (ТекДата = НачалоКвартала(ТекДата)) ИЛИ (ТекДата = ПараметрыОтчета.НачалоПериода);
		
		Если ЭтоНачалоНалоговогоПериода Тогда
			
			КонПериода = КонецКвартала(ТекДата);
			
			ОтчетностьПоНДСПредставляется = УчетНДСПереопределяемый.ОтчетностьПоНДСПредставляется(
				ПараметрыОтчета.Организация, КонПериода);
			
			СтрокаПериода = ТаблицаНалоговыхПериодов.Добавить();
			СтрокаПериода.НачПериода = ТекДата;
			СтрокаПериода.КонПериода = Мин(КонПериода, КонецДатыКон);
			СтрокаПериода.ПериодМеньшеРегламентного = СтрокаПериода.КонПериода < КонПериода;
			СтрокаПериода.ОтчетностьНеПредставляется = НЕ ОтчетностьПоНДСПредставляется;
			
		КонецЕсли;
		ТекДата = ДобавитьМесяц(ТекДата, 1);
	
	КонецЦикла;
	
	Возврат ТаблицаНалоговыхПериодов;

КонецФункции

Функция ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета)
	
	ТаблицаМесяцев = Новый ТаблицаЗначений;
	ТаблицаМесяцев.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаМесяцев.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаМесяцев.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	ТаблицаМесяцев.Колонки.Добавить("ПериодМеньшеРегламентного", Новый ОписаниеТипов("Булево"));
	ТекДата = ПараметрыОтчета.НачалоПериода;
	ДатаКон = ПараметрыОтчета.КонецПериода;
	КонецДатыКон = КонецДня(ПараметрыОтчета.КонецПериода);
	Пока ТекДата < ДатаКон Цикл
		
		ЭтоНачалоПериода = (ТекДата = НачалоМесяца(ТекДата)) ИЛИ (ТекДата = ПараметрыОтчета.НачалоПериода);
		Если ЭтоНачалоПериода Тогда
			КонПериода = КонецМесяца(ТекДата);
			СтрокаПериода = ТаблицаМесяцев.Добавить();
			СтрокаПериода.НачПериода = ТекДата;
			СтрокаПериода.КонПериода = Мин(КонПериода, КонецДатыКон);
			СтрокаПериода.ПериодМеньшеРегламентного = СтрокаПериода.КонПериода < КонПериода;
		КонецЕсли;
		ТекДата = ДобавитьМесяц(ТекДата, 1);
	
	КонецЦикла;
	
	Возврат ТаблицаМесяцев;

КонецФункции

Функция ПолучитьЭталонныйПланСчетов(ПараметрыОтчета)

	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТиповСтрокаКод = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.ПланыСчетов.Хозрасчетный.ДлинаКода);
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповЧисло 	= ОбщегоНазначения.ОписаниеТипаЧисло(5, 0);
	ОписаниеТиповВидСубконто = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные");
	
	ТаблицаПС = Новый ТаблицаЗначений;
	ТаблицаПС.Колонки.Добавить("Имя", 			ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("Код", 			ОписаниеТиповСтрокаКод);
	ТаблицаПС.Колонки.Добавить("ЭтоГруппа", 	ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Наименование", 	ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("Вид", 			Новый ОписаниеТипов("ВидСчета"));
	ТаблицаПС.Колонки.Добавить("Забалансовый", 	ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Порядок", 		ОписаниеТиповСтрокаКод);
	ТаблицаПС.Колонки.Добавить("Валютный", 		ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Количественный",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("ВидСубконто1",	ОписаниеТиповВидСубконто);
	ТаблицаПС.Колонки.Добавить("ИмяВидаСубконто1",		ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("ВидСубконто2",			ОписаниеТиповВидСубконто);
	ТаблицаПС.Колонки.Добавить("ИмяВидаСубконто2",		ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("ВидСубконто3",			ОписаниеТиповВидСубконто);
	ТаблицаПС.Колонки.Добавить("ИмяВидаСубконто3",		ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("Субконто1ТолькоОбороты",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Субконто2ТолькоОбороты",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Субконто3ТолькоОбороты",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("ПроверятьАналитикуСчета",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("ПодлежитЗакрытию",		ОписаниеТиповЧисло);
	ТаблицаПС.Колонки.Добавить("ТекстОшибкиСчетНеЗакрыт",	ОписаниеТиповСтрока);
	
	
	ЭтоВерсияКОРП = ВариантыПриложений.ЭтоВерсияКОРП() И ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям");
	
	МакетСвойстваСчетов = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("СвойстваСчетов");
	
	ТекОбласть = МакетСвойстваСчетов.Область("ПланСчетовБПКОРПБАУ");
	
	СтруктураКэшВидовСубконто = Новый Структура;

	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		// перебираем строки макета

		ВерсияКонфигурации	= СокрЛП(МакетСвойстваСчетов.Область(Ном, 19).Текст);
		
		Если ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
			Если ВерсияКонфигурации = "ПРОФ" Тогда
				Если ЭтоВерсияКОРП Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ВерсияКонфигурации = "КОРП" Тогда
				Если НЕ ЭтоВерсияКОРП Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Имя 				= СокрЛП(МакетСвойстваСчетов.Область(Ном, 1).Текст);

		Код 				= СокрЛП(МакетСвойстваСчетов.Область(Ном, 2).Текст);
		
		ЭтоГруппа 			= СокрЛП(МакетСвойстваСчетов.Область(Ном, 3).Текст);
		
		Наименование 		= СокрЛП(МакетСвойстваСчетов.Область(Ном, 4).Текст);

		Вид            		= ВРег(СокрЛП(МакетСвойстваСчетов.Область(Ном, 5).Текст));

		Забалансовый        = ВРег(СокрЛП(МакетСвойстваСчетов.Область(Ном, 6).Текст));
		
		Порядок        		= СокрП(МакетСвойстваСчетов.Область(Ном, 7).Текст); // Ведущие пробелы слева не обрезаем, чтобы не нарушить сортировку.

		Валютный            =  ВРег(СокрЛП(МакетСвойстваСчетов.Область(Ном, 8).Текст));

		Количественный      =  ВРег(СокрЛП(МакетСвойстваСчетов.Область(Ном, 9).Текст));

		Субконто1 			=  СокрЛП(МакетСвойстваСчетов.Область(Ном, 10).Текст);
		Субконто2 			=  СокрЛП(МакетСвойстваСчетов.Область(Ном, 11).Текст);
		Субконто3 			=  СокрЛП(МакетСвойстваСчетов.Область(Ном, 12).Текст);
		
		Субконто1ТолькоОбороты = СокрЛП(МакетСвойстваСчетов.Область(Ном, 13).Текст);
		Субконто2ТолькоОбороты = СокрЛП(МакетСвойстваСчетов.Область(Ном, 14).Текст);
		Субконто3ТолькоОбороты = СокрЛП(МакетСвойстваСчетов.Область(Ном, 15).Текст);

		// Счет используется в явном виде при заполнении регламентированной отчетности, необходимо проверять аналитику на счете.
		ПроверятьАналитикуСчета		= СокрЛП(МакетСвойстваСчетов.Область(Ном, 16).Текст);

		// Счет подлежит закрытию 1, пусто - нет
		ПодлежитЗакрытию 			= СокрЛП(МакетСвойстваСчетов.Область(Ном, 17).Текст);

		ТекстОшибкиСчетНеЗакрыт 	= СокрЛП(МакетСвойстваСчетов.Область(Ном, 18).Текст);
		

		// формируем таблицу значений, содержащей состав показателей отчета
		НоваяСтрока = ТаблицаПС.Добавить();

		НоваяСтрока.Имя          = Имя;
		НоваяСтрока.Код          = Код;
		НоваяСтрока.ЭтоГруппа    = ?(ЭтоГруппа = "1", Истина, Ложь);
		НоваяСтрока.Порядок      = Порядок;

		НоваяСтрока.Наименование = Наименование;
		Если Вид = "АКТИВНЫЙ" Тогда
			НоваяСтрока.Вид = ВидСчета.Активный;
		ИначеЕсли Вид = "ПАССИВНЫЙ" Тогда
			НоваяСтрока.Вид = ВидСчета.Пассивный;
		Иначе
			НоваяСтрока.Вид = ВидСчета.АктивноПассивный;
		КонецЕсли;
			
		НоваяСтрока.Забалансовый        = ?(Забалансовый = "ИСТИНА", Истина, Ложь);
		НоваяСтрока.Валютный            = ?(Валютный = "ИСТИНА", Истина, Ложь);
		НоваяСтрока.Количественный      = ?(Количественный = "ИСТИНА", Истина, Ложь);

		НоваяСтрока.ИмяВидаСубконто1 = Субконто1;
		НоваяСтрока.ИмяВидаСубконто2 = Субконто2;
		НоваяСтрока.ИмяВидаСубконто3 = Субконто3;
		
		НоваяСтрока.Субконто1ТолькоОбороты = ?(Субконто1ТолькоОбороты = "1", Истина, Ложь);
		НоваяСтрока.Субконто2ТолькоОбороты = ?(Субконто2ТолькоОбороты = "1", Истина, Ложь);
		НоваяСтрока.Субконто3ТолькоОбороты = ?(Субконто3ТолькоОбороты = "1", Истина, Ложь);
		
		Для Н = 1 По 3 Цикл
			ИмяВидаСубконто = НоваяСтрока["ИмяВидаСубконто" + Н];
			ЗначениеВидаСубконто = Неопределено;
			Если ЗначениеЗаполнено(ИмяВидаСубконто) Тогда
				Если СтруктураКэшВидовСубконто.Свойство(ИмяВидаСубконто, ЗначениеВидаСубконто) Тогда
					НоваяСтрока["ВидСубконто" + Н] = ЗначениеВидаСубконто;
				Иначе
					Попытка
						НоваяСтрока["ВидСубконто" + Н] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяВидаСубконто];
					Исключение
						// Записывать в журнал регистрировать не требуется, соответствие аналитики на счетах
						// проверяется в отдельной процедуре проверки.
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		НоваяСтрока.ПроверятьАналитикуСчета = ?(ПроверятьАналитикуСчета = "1", Истина, Ложь);
		НоваяСтрока.ПодлежитЗакрытию 		= ?(ПодлежитЗакрытию = "1", 1, ?(ПодлежитЗакрытию = "2", 2, 0));
		НоваяСтрока.ТекстОшибкиСчетНеЗакрыт = ТекстОшибкиСчетНеЗакрыт;

	КонецЦикла;

	Возврат ТаблицаПС;

КонецФункции

Функция ПодготовитьДанныеПоЭталонномуПлануСчетовДляАнализа(ПараметрыОтчета)

	Если ПараметрыОтчета.Свойство("ЭталонныйПланСчетов") Тогда
		// Данные уже подготовлены.
		Возврат ПараметрыОтчета.ЭталонныйПланСчетов;
	КонецЕсли;

	ТаблицаПС = ПолучитьЭталонныйПланСчетов(ПараметрыОтчета);	

	// Добавим в таблицу эталонного плана счетов данные по остаткам и оборотам
	ТаблицаПС.Колонки.Добавить("СчетСсылка", 	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПС.Колонки.Добавить("НомерСтроки", 	ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	Для Н = 1 По ТаблицаПС.Количество() Цикл
		ТаблицаПС[Н - 1].НомерСтроки = Н;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭталонныйПланСчетов", ТаблицаПС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭталонныйПланСчетов.Код КАК Код,
	|	ЭталонныйПланСчетов.НомерСтроки
	|ПОМЕСТИТЬ ВТ_ЭталонныйПланСчетов
	|ИЗ
	|	&ЭталонныйПланСчетов КАК ЭталонныйПланСчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭталонныйПланСчетов.Код,
	|	ВТ_ЭталонныйПланСчетов.НомерСтроки,
	|	ЕСТЬNULL(Хозрасчетный.Ссылка, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетСсылка
	|ИЗ
	|	ВТ_ЭталонныйПланСчетов КАК ВТ_ЭталонныйПланСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_ЭталонныйПланСчетов.Код = Хозрасчетный.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ЭталонныйПланСчетов.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы 				= ТаблицаПС[Выборка.НомерСтроки - 1];
		СтрокаТаблицы.СчетСсылка 	= Выборка.СчетСсылка;
	КонецЦикла;

	ТаблицаПС.Индексы.Добавить("СчетСсылка");

	ПараметрыОтчета.Вставить("ЭталонныйПланСчетов", ТаблицаПС);
	
	Возврат ТаблицаПС;

КонецФункции

Функция ПроверитьНумерациюДокументов(ПолноеИмяДокумента, ПараметрыОтбора)
	
	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТиповДатаВремя = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	
	ЭтоСчетФактураВыданный = ПолноеИмяДокумента = "Документ.СчетФактураВыданный";
	Если ЭтоСчетФактураВыданный Тогда
		ОтдельнаяНумерацияСчетовФактурНаАванс = Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить();
	Иначе
		ОтдельнаяНумерацияСчетовФактурНаАванс = Ложь;
	КонецЕсли;

	ТаблицаНарушений = Новый ТаблицаЗначений;
	ТаблицаНарушений.Колонки.Добавить("ВидДокумента", ОписаниеТиповСтрока);
	ТаблицаНарушений.Колонки.Добавить("НомерДокумента", ОписаниеТиповСтрока);
	ТаблицаНарушений.Колонки.Добавить("ДатаДокумента", ОписаниеТиповДатаВремя);
	ТаблицаНарушений.Колонки.Добавить("Документ");
	ТаблицаНарушений.Колонки.Добавить("НомерСледующего", ОписаниеТиповСтрока);
	ТаблицаНарушений.Колонки.Добавить("ДатаСледующего", ОписаниеТиповДатаВремя);
	ТаблицаНарушений.Колонки.Добавить("СледДокумент");
	ТаблицаНарушений.Колонки.Добавить("ОписаниеОшибки", ОписаниеТиповСтрока);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Документ,
	|	ТаблицаДокументов.Дата КАК Дата,
	|	ТаблицаДокументов.Номер,
	|	ЕСТЬNULL(ТаблицаДокументов.ПодразделениеОрганизации.Префикс, """") КАК ПодразделениеОрганизацииПрефикс,
	|	ТаблицаДокументов.ВидСчетаФактуры КАК ВидСчетаФактуры
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.ПометкаУдаления = ЛОЖЬ
	|	И ТаблицаДокументов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТаблицаДокументов.Организация = &Организация
	|	&ДополнительныеУсловия";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДокументов", ПолноеИмяДокумента);
	Если ЭтоСчетФактураВыданный Тогда
		// В счетах-фактурах нет реквизита ПодразделениеОрганизации.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокументов.ПодразделениеОрганизации.Префикс", """""");

		// Системные номера исправленных счетов-фактур не используются нигде для 
		// вывода в отчеты, печатные формы и прочее. Вместо системного номера для 
		// исправленных счетов-фактур выводится реквизит НомерИсходногоДокумента
		// с номером первичного счета-фактуры, который исправляют.
		// При этом у исправленных счетов-фактур используется дополнительный префикс "И",
		// чтобы не нарушать нумерацию обычных и корректировочных счетов-фактур.
		// Поэтому исключаем из общей проверки исправленные счета-фактуры.
		//
		// Кроме того, не поддерживаем перенумерацию сводных справок о розничных продажах,
		// их не должно быть немного, поскольку выписывают сводно за период, при необходимости можно поменять их номера вручную.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ДополнительныеУсловия",
			"И ТаблицаДокументов.Исправление = ЛОЖЬ 
			|И ТаблицаДокументов.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка)
			|И ТаблицаДокументов.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.КорректировочнаяСправка)");
	Иначе
		// В кассовых документах нет поля "Вид счета-фактуры".
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокументов.ВидСчетаФактуры", "НЕОПРЕДЕЛЕНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтбора.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтбора.КонецПериода));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтбора.Организация);
	
	СписокДокументов = Запрос.Выполнить().Выгрузить();
	СписокДокументов.Колонки.Добавить("НомерЧислом");
	СписокДокументов.Колонки.Добавить("СчетФактураНаАванс", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	СчетаФактурыНаАванс = Перечисления.ВидСчетаФактурыВыставленного.СчетаФактурыНаАванс();
	
	Для Каждого Документ Из СписокДокументов Цикл
		Документ.НомерЧислом = ПолучитьНомерЧислом(Документ.Номер);
		Если ОтдельнаяНумерацияСчетовФактурНаАванс Тогда
			Если СчетаФактурыНаАванс.Найти(Документ.ВидСчетаФактуры) <> Неопределено Тогда
				Документ.СчетФактураНаАванс = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СписокДокументов.Сортировать("ПодразделениеОрганизацииПрефикс, СчетФактураНаАванс, НомерЧислом ВОЗР, Дата ВОЗР");
	
	ПредставлениеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента).Синоним;
	Для Индекс = 1 По СписокДокументов.Количество()-1 Цикл
		ТекущийДокумент = СписокДокументов[Индекс];
		ПредыдущийДокумент = СписокДокументов[Индекс-1];

		Если ТекущийДокумент.ПодразделениеОрганизацииПрефикс <> ПредыдущийДокумент.ПодразделениеОрганизацииПрефикс Тогда
			// Документы, относящиеся к разным обособленным подразделениями, могут нумероваться отдельно.
			Продолжить;
		КонецЕсли;
		
		Если ЭтоСчетФактураВыданный Тогда
			Если ТекущийДокумент.СчетФактураНаАванс <> ПредыдущийДокумент.СчетФактураНаАванс Тогда
				// Разные виды счета-фактуры.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НачалоГода(ТекущийДокумент.Дата) <> НачалоГода(ПредыдущийДокумент.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущийДокумент.НомерЧислом = ПредыдущийДокумент.НомерЧислом Тогда
			Нарушение = ТаблицаНарушений.Добавить();
			Нарушение.ВидДокумента    = ПредставлениеДокумента;
			Нарушение.НомерДокумента  = ПредыдущийДокумент.Номер;
			Нарушение.ДатаДокумента   = ПредыдущийДокумент.Дата;
			Нарушение.Документ        = ПредыдущийДокумент.Документ;
			Нарушение.НомерСледующего = ТекущийДокумент.Номер;
			Нарушение.ДатаСледующего  = ТекущийДокумент.Дата;
			Нарушение.СледДокумент    = ТекущийДокумент.Документ;
			Нарушение.ОписаниеОшибки  = НСтр("ru = 'Дублирующиеся номера (при печати)'");
		ИначеЕсли НачалоДня(ТекущийДокумент.Дата) < НачалоДня(ПредыдущийДокумент.Дата) Тогда
			Нарушение = ТаблицаНарушений.Добавить();
			Нарушение.ВидДокумента    = ПредставлениеДокумента;
			Нарушение.НомерДокумента  = ПредыдущийДокумент.Номер;
			Нарушение.ДатаДокумента   = ПредыдущийДокумент.Дата;
			Нарушение.Документ        = ПредыдущийДокумент.Документ;
			Нарушение.НомерСледующего = ТекущийДокумент.Номер;
			Нарушение.ДатаСледующего  = ТекущийДокумент.Дата;
			Нарушение.СледДокумент    = ТекущийДокумент.Документ;
			Нарушение.ОписаниеОшибки  = НСтр("ru = 'Нарушение хронологии'");
		ИначеЕсли ТекущийДокумент.НомерЧислом - ПредыдущийДокумент.НомерЧислом > 1 Тогда
			Нарушение = ТаблицаНарушений.Добавить();
			Нарушение.ВидДокумента    = ПредставлениеДокумента;
			Нарушение.НомерДокумента  = ПредыдущийДокумент.Номер;
			Нарушение.ДатаДокумента   = ПредыдущийДокумент.Дата;
			Нарушение.Документ        = ПредыдущийДокумент.Документ;
			Нарушение.НомерСледующего = ТекущийДокумент.Номер;
			Нарушение.ДатаСледующего  = ТекущийДокумент.Дата;
			Нарушение.СледДокумент    = ТекущийДокумент.Документ;
			Нарушение.ОписаниеОшибки  = НСтр("ru = 'Пропуски в нумерации'");
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаНарушений;
	
КонецФункции

Функция ПолучитьТекстЗапросаЛимитаКассы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ СчетаКасса
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаКассы)
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы)
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументыВал)
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаПлатежногоАгента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛимитыОстаткаКассы.Период КАК Период,
	|	ЛимитыОстаткаКассы.Лимит
	|ПОМЕСТИТЬ ЛимитыОстаткаКассы
	|ИЗ
	|	РегистрСведений.ЛимитОстаткаКассыОрганизаций КАК ЛимитыОстаткаКассы
	|ГДЕ
	|	ЛимитыОстаткаКассы.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	|ПОМЕСТИТЬ ОстаткиПоКассе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			ДвиженияИГраницыПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКасса.Ссылка
	|				ИЗ
	|					СчетаКасса КАК СчетаКасса),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКассе.ПериодДень,
	|	МАКСИМУМ(ЛимитыОстаткаКассы.Период) КАК Период
	|ПОМЕСТИТЬ ПериодыЛимитов
	|ИЗ
	|	ОстаткиПоКассе КАК ОстаткиПоКассе
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛимитыОстаткаКассы КАК ЛимитыОстаткаКассы
	|		ПО ОстаткиПоКассе.ПериодДень >= ЛимитыОстаткаКассы.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоКассе.ПериодДень
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЛимитыОстаткаКассы.Лимит, 0) КАК Лимит,
	|	ВЫБОР
	|		КОГДА ЛимитыОстаткаКассы.Лимит ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЛимитУстановлен,
	|	ПериодыЛимитов.ПериодДень КАК ПериодДень
	|ПОМЕСТИТЬ Лимиты
	|ИЗ
	|	ПериодыЛимитов КАК ПериодыЛимитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛимитыОстаткаКассы КАК ЛимитыОстаткаКассы
	|		ПО ПериодыЛимитов.Период = ЛимитыОстаткаКассы.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодДень,
	|	Лимит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКассе.ПериодДень КАК Дата,
	|	ОстаткиПоКассе.Остаток КАК Остаток,
	|	Лимиты.Лимит КАК Лимит,
	|	ОстаткиПоКассе.Остаток - Лимиты.Лимит КАК Превышение,
	|	Лимиты.ЛимитУстановлен
	|ИЗ
	|	ОстаткиПоКассе КАК ОстаткиПоКассе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Лимиты КАК Лимиты
	|		ПО ОстаткиПоКассе.ПериодДень = Лимиты.ПериодДень
	|			И ОстаткиПоКассе.Остаток > Лимиты.Лимит";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаЛимитаКассыПоОбособленнымПодразделениям()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ СчетаКасса
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаКассы)
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы)
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументыВал)
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаПлатежногоАгента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛимитыОстаткаКассы.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ЛимитыОстаткаКассы.Период КАК Период,
	|	ЛимитыОстаткаКассы.Лимит
	|ПОМЕСТИТЬ ЛимитыОстаткаКассы
	|ИЗ
	|	РегистрСведений.ЛимитОстаткаКассыОрганизаций КАК ЛимитыОстаткаКассы
	|ГДЕ
	|	ЛимитыОстаткаКассы.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодразделениеОрганизации,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
	|ПОМЕСТИТЬ ОбособленныеПодразделения
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	|ПОМЕСТИТЬ ОстаткиПоКассе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			ДвиженияИГраницыПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКасса.Ссылка
	|				ИЗ
	|					СчетаКасса КАК СчетаКасса),
	|			,
	|			Организация = &Организация
	|				И Подразделение В
	|					(ВЫБРАТЬ
	|						ОбособленныеПодразделения.Подразделение
	|					ИЗ
	|						ОбособленныеПодразделения КАК ОбособленныеПодразделения)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПустоеПодразделение,
	|	ХозрасчетныйОстаткиИОбороты.Период,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			ДвиженияИГраницыПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКасса.Ссылка
	|				ИЗ
	|					СчетаКасса КАК СчетаКасса),
	|			,
	|			Организация = &Организация
	|				И НЕ Подразделение В
	|						(ВЫБРАТЬ
	|							ОбособленныеПодразделения.Подразделение
	|						ИЗ
	|							ОбособленныеПодразделения КАК ОбособленныеПодразделения)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	ПериодДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКассе.Подразделение КАК Подразделение,
	|	ОстаткиПоКассе.ПериодДень,
	|	МАКСИМУМ(ЛимитыОстаткаКассы.Период) КАК Период
	|ПОМЕСТИТЬ ПериодыЛимитов
	|ИЗ
	|	ОстаткиПоКассе КАК ОстаткиПоКассе
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛимитыОстаткаКассы КАК ЛимитыОстаткаКассы
	|		ПО ОстаткиПоКассе.ПериодДень >= ЛимитыОстаткаКассы.Период
	|			И ОстаткиПоКассе.Подразделение = ЛимитыОстаткаКассы.ПодразделениеОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоКассе.Подразделение,
	|	ОстаткиПоКассе.ПериодДень
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыЛимитов.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ЛимитыОстаткаКассы.Лимит, 0) КАК Лимит,
	|	ВЫБОР
	|		КОГДА ЛимитыОстаткаКассы.Лимит ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЛимитУстановлен,
	|	ПериодыЛимитов.ПериодДень КАК ПериодДень
	|ПОМЕСТИТЬ Лимиты
	|ИЗ
	|	ПериодыЛимитов КАК ПериодыЛимитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛимитыОстаткаКассы КАК ЛимитыОстаткаКассы
	|		ПО ПериодыЛимитов.Период = ЛимитыОстаткаКассы.Период
	|			И ПериодыЛимитов.Подразделение = ЛимитыОстаткаКассы.ПодразделениеОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	ПериодДень,
	|	Лимит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОстаткиПоКассе.Подразделение = &ПустоеПодразделение
	|			ТОГДА &ПредставлениеПоОрганизации
	|		ИНАЧЕ ОстаткиПоКассе.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ОстаткиПоКассе.ПериодДень КАК Дата,
	|	ОстаткиПоКассе.Остаток КАК Остаток,
	|	Лимиты.Лимит КАК Лимит,
	|	ОстаткиПоКассе.Остаток - Лимиты.Лимит КАК Превышение,
	|	Лимиты.ЛимитУстановлен
	|ИЗ
	|	ОстаткиПоКассе КАК ОстаткиПоКассе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Лимиты КАК Лимиты
	|		ПО ОстаткиПоКассе.Подразделение = Лимиты.Подразделение
	|			И ОстаткиПоКассе.ПериодДень = Лимиты.ПериодДень
	|			И ОстаткиПоКассе.Остаток > Лимиты.Лимит";

	Возврат ТекстЗапроса;
	
КонецФункции

// Квартплата +

// Функция проверяет отсутствие данных о начислениях с пустым месяцем начисления.
//
Функция УПЖКХ_ПроверитьОтсутствиеПустогоРасчетногоМесяцаВЗаписяхОНачислениях(СтрокаПроверки, ПараметрыОтчета)
	
	ЕстьОшибки = Ложь;
	
	// Для проверки определим, есть ли движения с пустым месяцем начисления
	// в регистре начислений, а также с некорректным месяцем. За точку, с которой записи будем считать некорректными,
	// возьмем дату 01.01.1990г.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И МесяцНачисления < &НекорректныйМесяцНачисления) КАК УПЖКХ_НачисленияОбороты";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НекорректныйМесяцНачисления", Дата(1990, 1, 1));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;

КонецФункции

// Функция проверяет отсутствие данных о взаиморасчетах с пустым месяцем начисления.
//
Функция УПЖКХ_ПроверитьОтсутствиеПустогоРасчетногоМесяцаВЗаписяхОВзаиморасчетах(СтрокаПроверки, ПараметрыОтчета)
	
	ЕстьОшибки = Ложь;
	
	// Для проверки определим, есть ли движения с пустым месяцем начисления
	// в регистре взаиморасчетов, а также с некорректным месяцем. За точку, с которой записи будем считать некорректными,
	// возьмем дату 01.01.1990г.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетам.МесяцНачисления
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И МесяцНачисления < &НекорректныйМесяцНачисления) КАК КВП_ВзаиморасчетыПоЛицевымСчетам";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НекорректныйМесяцНачисления", Дата(1990, 1, 1));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;

КонецФункции

// Функция выполняет поиск проведенных документов "Регистрация оплаты", в которых в таблице лицевых счетов есть оплаты
// с несформированными типовыми документами отражения.
// Функция используется в 2х вариантах:
// 1. При выполнении самой экспресс проверки. В этом случае нам важен сам факт наличия 
// некорректных документов, возвращаемое значение - Ложь или Истина.
// 2. При расшифровке ошибочных документов (при переходе к списку документов). В этом случае параметр
// "ЭтоПолучениеМассиваДокументов" находится в Истине. Возвращаемое значение - массив документов "Регистрация оплаты".
//
Функция УПЖКХ_НайтиДокументыРегистрацияОплатыСНесформированнымиДокументамиОтражения(СтрокаПроверки, ПараметрыОтчета, МассивДокументов = Неопределено) Экспорт
	
	ЕстьОшибки = Ложь;
	
	// Найдем проведенные документы "Регистрация оплаты", в которых в таблице лицевых счетов имеются строки
	// с незаполненными типовыми документами отражения.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка КАК ДокументРегистрацияОплаты
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|ГДЕ
	|	(КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты = ЗНАЧЕНИЕ(Документ.ПоступлениеНаРасчетныйСчет.ПустаяСсылка)
	|			ИЛИ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты = ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
	|			ИЛИ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты = ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка)
	|			ИЛИ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты = ЗНАЧЕНИЕ(Документ.РасходныйКассовыйОрдер.ПустаяСсылка)
	|			ИЛИ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты = ЗНАЧЕНИЕ(Документ.КорректировкаДолга.ПустаяСсылка)
	|			ИЛИ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты = НЕОПРЕДЕЛЕНО)
	|	И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Проведен
	|	И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Организация = &Организация";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки = (Выборка.Количество() > 0);
	
	// Если в параметрах приходит пустой массив, то заполняем его из выборки ссылками на документы.
	// В противном случае нас интересует только сам факт наличия ошибок.
	Если Не МассивДокументов = Неопределено Тогда
		
		МассивДокументов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивДокументов.Добавить(Выборка.ДокументРегистрацияОплаты);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Функция проверяет отсутствие данных о взаиморасчетах и начислениях с пустой услугой.
//
Функция УПЖКХ_ПроверитьОтсутствиеПустойУслугиВЗаписяхОВзаиморасчетахИНачислениях(СтрокаПроверки, ПараметрыОтчета,
																		ЕстьЗаписиПоВзаиморасчетам = Ложь, ЕстьЗаписиПоНачислениям = Ложь) Экспорт
	
	ЕстьОшибки = Ложь;
	
	// Для проверки определим, есть ли движения с пустой услугой в регистрах взаиморасчетов и начислений.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И Услуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК КВП_ВзаиморасчетыПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_НачисленияОбороты.Услуга
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И Услуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК УПЖКХ_НачисленияОбороты";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	// Представим в виде результата пакетного запроса, в отдельном элементе пакета будет результат по одному
	// регистру. При необходимости список проверяемых регистров можно расширить.
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоВзаиморасчетам = РезультатЗапроса[0].Выбрать();
	Если ВыборкаПоВзаиморасчетам.Следующий() Тогда
		ЕстьОшибки = Истина;
		ЕстьЗаписиПоВзаиморасчетам = Истина;
	КонецЕсли;
	
	ВыборкаПоНачислениям = РезультатЗапроса[1].Выбрать();
	Если ВыборкаПоНачислениям.Следующий() Тогда
		ЕстьОшибки = Истина;
		ЕстьЗаписиПоНачислениям = Истина;
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Функция проверяет отсутствие данных о начислениях с пустым договором взаиморасчетов.
//
Функция УПЖКХ_ПроверитьОтсутствиеПустогоДоговораВзаиморасчетовВЗаписяхОНачислениях(СтрокаПроверки, ПараметрыОтчета)
	
	ЕстьОшибки = Ложь;
	
	// Для проверки определим, есть ли движения с пустым договором взаиморасчетов в регистре начислений.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_НачисленияОбороты.Договор
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК УПЖКХ_НачисленияОбороты";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции // УПЖКХ_ПроверитьОтсутствиеПустогоДоговораВзаиморасчетовВЗаписяхОНачислениях()

// Функция проверяет отсутствие незаполненных обязательных реквизитов справочника "Помещения".
//
Функция УПЖКХ_ПроверитьОтсутствиеНезаполненныхОбязательныхРеквизитовСправочникаПомещения(СтрокаПроверки, ПараметрыОтчета)
	
	МассивПомещенийСНезаполненнымиОбязательнымиРеквизитами = УПЖКХ_ПолучитьМассивПомещенийСНезаполненнымиОбязательнымиРеквизитами();
	
	Возврат НЕ МассивПомещенийСНезаполненнымиОбязательнымиРеквизитами.Количество() = 0;
	
КонецФункции // УПЖКХ_ПроверитьОтсутствиеНезаполненныхОбязательныхРеквизитовСправочникаПомещения()

// Формирует массив помещений с незаполненными обязательными реквизитами.
//
Функция УПЖКХ_ПолучитьМассивПомещенийСНезаполненнымиОбязательнымиРеквизитами() Экспорт
	
	// Для проверки определим помещения, у которых не заполнены "Здание", "Наименование" или "Вид помещения".
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Помещения.Ссылка КАК Помещение
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|	И (УПЖКХ_Помещения.Наименование = """"
	|			ИЛИ УПЖКХ_Помещения.ВидПомещения = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПомещений.ПустаяСсылка)
	|			ИЛИ УПЖКХ_Помещения.Владелец = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка))";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("Помещение");
	
КонецФункции

// Квартплата -

#КонецЕсли
