#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Ложь, Истина, Истина);
	
КонецФункции

// Функция возвращает текст заголовка.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  ОрганизацияВНачале	 - Булево - Признак организации в начале заголовка.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Отчет по начислениям и долгам" + УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// Функция определяет внешние наборы данных для СКД.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  МакетКомпоновки	 - Макет - Макет компоновки данных отчета.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Определение таблицы для вывода примечаний лицевых счетов в отчет.
	// Примечания имеют периодичность, поэтому соберем все имеющиеся примечания
	// по лицевому счету и объединим в одну строку через символ перевода строки.
	
	// Формирование таблицы примечаний выполняем всегда, так как на данный момент считаем,
	// что реализация проверки вывода примечаний в структуре компоновки будет затратнее,
	// чем подготовка таблицы при каждом формировании отчета.
	
	ТаблицаПримечаний = Новый ТаблицаЗначений;
	ТаблицаПримечаний.Колонки.Добавить("ЛицевойСчет" , Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаПримечаний.Колонки.Добавить("Примечания"  , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500)));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ПримечанияКЛицевымСчетам.ЛицевойСчет,
	|	КВП_ПримечанияКЛицевымСчетам.Подразделение,
	|	КВП_ПримечанияКЛицевымСчетам.Ответственный,
	|	КВП_ПримечанияКЛицевымСчетам.Дата,
	|	КВП_ПримечанияКЛицевымСчетам.ТекстПримечания
	|ИЗ
	|	РегистрСведений.КВП_ПримечанияКЛицевымСчетам КАК КВП_ПримечанияКЛицевымСчетам
	|ИТОГИ ПО
	|	ЛицевойСчет";
	
	ВыборкаЛС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЛС.Следующий() Цикл
		
		ВыборкаПримечанний = ВыборкаЛС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТекущийТекстПримечания = "";
		Пока ВыборкаПримечанний.Следующий() Цикл
			ТекущийТекстПримечания = ТекущийТекстПримечания + Формат(ВыборкаПримечанний.Дата, "ДФ=dd.MM.yyyy") + ": " + ВыборкаПримечанний.ТекстПримечания + Символы.ПС;
		КонецЦикла;
		
		Если Прав(ТекущийТекстПримечания, 1) = Символы.ПС Тогда
			ТекущийТекстПримечания = Лев(ТекущийТекстПримечания, СтрДлина(ТекущийТекстПримечания) - 1);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПримечаний.Добавить();
		НоваяСтрока.ЛицевойСчет = ВыборкаЛС.ЛицевойСчет;
		НоваяСтрока.Примечания  = ТекущийТекстПримечания;
		
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаПримечаний", ТаблицаПримечаний);
	
	Возврат ВнешниеНаборыДанных;

КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  Схема				 - СхемаКомпоновкиДанных - Схема компоновки данных отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек компоновки данных отчета.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация,,, Истина);
	КонецЕсли;
	
	Таблица = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Таблица <> Неопределено Тогда
		// Группировка.
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				УПЖКХ_ТиповыеМетодыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возникает после вывода результата.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  Результат		 - ТабличныйДокумент - Табличный документ для вывода в отчете.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли