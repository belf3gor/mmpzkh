#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Формирует заголовок отчета.
//
// Возвращаемое значение:
//  Текст – заголовок отчета
//
Функция ЗаголовокОтчета(ПараметрыОтчета) Экспорт

	ТекстЗаголовка = "Сводный отчет по объекту" + УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);

	Возврат ТекстЗаголовка;

КонецФункции // ЗаголовокОтчета()

// Процедура выводит данные в документ - результат.
Процедура ВывестиДанныеВОтчет(ОбъектДанных, ТаблицаРезультата, ДокументРезультат, ПараметрыОтчета)
	
	// ВЫВОД ОТЧЕТА
	
	Макет = ПолучитьМакет("Макет");
	
	// Шапка отчета.
	ПредставлениеОбъекта = "";
	Если Не ЗначениеЗаполнено(ОбъектДанных) Тогда
		ПредставлениеОбъекта = "По всем объектам";
		
	ИначеЕсли ОбъектДанных.ЭтоГруппа Тогда
		ПредставлениеОбъекта = ПолноеНаименованиеСправочника(ОбъектДанных);
		
	Иначе
		Если      ТипЗнч(ОбъектДанных) = Тип("СправочникСсылка.КВП_Здания") Тогда
			ПредставлениеОбъекта = ПолноеНаименованиеСправочника(ОбъектДанных);
		ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
			ПредставлениеОбъекта = ПолноеНаименованиеСправочника(ОбъектДанных.Владелец) 
								 + ", " 
								 + ОбъектДанных.Наименование;
		ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			ТекВладелецОбъекта = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ОбъектДанных, ПараметрыОтчета.КонецПериода);
			ЛицевойСчет = ОбъектДанных.Наименование 
						+ ?(ЗначениеЗаполнено(ТекВладелецОбъекта), ", " 
						+ ТекВладелецОбъекта, "");
			ПредставлениеОбъекта = ЛицевойСчет 
								 + Символы.ПС
								 + ПолноеНаименованиеСправочника(ОбъектДанных.Адрес.Владелец) 
								 + ", " 
								 + НРег(ОбъектДанных.Адрес.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтчета");
	ОбластьМакета.Параметры.Организация     = ПараметрыОтчета.Организация;
	ОбластьМакета.Параметры.ЗаголовокОтчета = ЗаголовокОтчета(ПараметрыОтчета);
	ОбластьМакета.Параметры.Объект          = ПредставлениеОбъекта;
	ДокументРезультат.Вывести(ОбластьМакета);
	
	// Шапка таблицы.
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	// Таблица.
	СтруктураИтоговойСтроки = Новый Структура;
	СтруктураИтоговойСтроки.Вставить("СуммаНач",               0);
	СтруктураИтоговойСтроки.Вставить("СуммаНачисленоПлановое", 0);
	СтруктураИтоговойСтроки.Вставить("СуммаЛьготы",            0);
	СтруктураИтоговойСтроки.Вставить("СуммаПерерасчета",       0);
	СтруктураИтоговойСтроки.Вставить("СуммаПени",              0);
	СтруктураИтоговойСтроки.Вставить("СуммаНачислено",         0);
	СтруктураИтоговойСтроки.Вставить("СуммаОплачено",          0);
	СтруктураИтоговойСтроки.Вставить("СуммаКон",               0);
	
	Для Каждого СтрокаИтог Из ТаблицаРезультата.Строки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураИтоговойСтроки, СтрокаИтог, , "СуммаНач, СуммаКон");
		ИндексПоследнейСтроки = СтрокаИтог.Строки.Количество() - 1;
		Для Каждого СтрокаПериод ИЗ СтрокаИтог.Строки Цикл
			ТекущийИндекс = СтрокаИтог.Строки.Индекс(СтрокаПериод);
			Если ТекущийИндекс = 0 Тогда
				СтруктураИтоговойСтроки.СуммаНач = СтрокаПериод.СуммаНач;
			ИначеЕсли ТекущийИндекс = ИндексПоследнейСтроки Тогда
				СтруктураИтоговойСтроки.СуммаКон = СтрокаПериод.СуммаКон;
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьМакета.Параметры.Заполнить(СтрокаПериод);
			
			ДокументРезультат.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогТаблицы");
	Если Не ТаблицаРезультата.Строки.Количество() = 0 Тогда
		ОбластьМакета.Параметры.Заполнить(СтруктураИтоговойСтроки);
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Выводит отчет для указанного объекта.
Процедура ВывестиОтчетПоОбъекту(ДокументРезультат, ТекОбъект, Запрос, ПараметрыОтчета)
	
	СписокЛС = ПолучитьСписокЛицевыхСчетовПоОбъекту(ТекОбъект, ПараметрыОтчета);
	Запрос.УстановитьПараметр("СписокЛС", СписокЛС);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВывестиДанныеВОтчет(ТекОбъект, ТаблицаРезультата, ДокументРезультат, ПараметрыОтчета);
	
КонецПроцедуры

// Формирует список лицевых счетов, соответствующих указанному объекту.
Функция ПолучитьСписокЛицевыхСчетовПоОбъекту(ТекОбъект, ПараметрыОтчета)
	
	Если ЗначениеЗаполнено(ТекОбъект) Тогда
		// если объект указан - определяем список л/с по нему
		
		СписокОбъектов = ПолучитьЭлементыСправочникаПоГруппе(ТекОбъект);
		
		СписокЛС = Неопределено;
		Если      ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.КВП_Здания") Тогда
			СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокОбъектов, НачалоДня(ПараметрыОтчета.НачалоПериода), КонецДня(ПараметрыОтчета.КонецПериода));
			
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
			СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоПодъездам(СписокОбъектов, НачалоДня(ПараметрыОтчета.НачалоПериода), КонецДня(ПараметрыОтчета.КонецПериода));
			
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			СписокЛС = СписокОбъектов;
			
		КонецЕсли;
		
	Иначе
		// если объект не указан - берем все л/с из базы
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	(НЕ КВП_ЛицевыеСчета.ЭтоГруппа)
		|	И (НЕ КВП_ЛицевыеСчета.ПометкаУдаления)";
		
		СписокЛС = Новый СписокЗначений();
		СписокЛС.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	
	Возврат СписокЛС;
	
КонецФункции // ПолучитьСписокЛицевыхСчетовПоОбъекту()

// Формирует список объектов, соответствующих указанному списку лицевых счетов.
Функция ПолучитьСписокОбъектовПоЛицевымСчетам(СписокЛицевыхСчетов, ПараметрыОтчета)
	
	Если ПараметрыОтчета.ТипОбъектов = 0 Тогда // здания
		СписокОбъектов = КВП_ПолучитьСписокЗданийПоЛицевымСчетам(СписокЛицевыхСчетов);
		
	ИначеЕсли ПараметрыОтчета.ТипОбъектов = 1 Тогда // подъезды
		СписокОбъектов = КВП_ПолучитьСписокПодъездовПоЛицевымСчетам(СписокЛицевыхСчетов);
		
	ИначеЕсли ПараметрыОтчета.ТипОбъектов = 2 Тогда // ЛС
		СписокОбъектов = СписокЛицевыхСчетов;
		
	КонецЕсли;
	
	Возврат СписокОбъектов;
	
КонецФункции // ПолучитьСписокОбъектовПоЛицевымСчетам()

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если НЕ ПараметрыОтчета.Свойство("ВариантОтбораУслуг") Тогда
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	// ПОЛУЧЕНИЕ ДАННЫХ
	
	ТаблицаПериодов = СформироватьТаблицуПериодов(ПараметрыОтчета);
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаНач",         НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон",         КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",     ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	
	Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		УсловиеНаУслугу = "ИСТИНА";
	Иначе
		Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
			УсловиеНаУслугу = "Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			УсловиеНаУслугу = "Услуга В (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
			УсловиеНаУслугу = "НЕ Услуга В (&СписокУслуг)";
		Иначе
			УсловиеНаУслугу = "ИСТИНА";
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокУслуг", ПараметрыОтчета.СписокУслуг);
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса();
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопПараметр", УсловиеНаУслугу);
	
	Если Не ПараметрыОтчета.ПечататьРаздельноПоКаждомуОбъекту Тогда
		// Печать сводно по объекту
		
		ВывестиОтчетПоОбъекту(ДокументРезультат, ПараметрыОтчета.Объект, Запрос, ПараметрыОтчета);
		
	Иначе
		// Печать отдельно по каждому объекту в зависимости от Типа объекта
		
		ПолныйСписокЛицевыхСчетов = ПолучитьСписокЛицевыхСчетовПоОбъекту(ПараметрыОтчета.Объект, ПараметрыОтчета);
		СписокОбъектовДляВывода = ПолучитьСписокОбъектовПоЛицевымСчетам(ПолныйСписокЛицевыхСчетов, ПараметрыОтчета);
		Для Каждого ТекОбъект Из СписокОбъектовДляВывода Цикл
			ТекРезультат = Новый ТабличныйДокумент();
			
			ВывестиОтчетПоОбъекту(ТекРезультат, ТекОбъект.Значение, Запрос, ПараметрыОтчета);
			
			Если Не ДокументРезультат.ПроверитьВывод(ТекРезультат) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ДокументРезультат.Вывести(ТекРезультат);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "НастройкиПечати_КВП_СводныйОтчетПоОбъекту";
	
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры

// Формирует таблицу месяцев за период.
Функция СформироватьТаблицуПериодов(ПараметрыОтчета)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	ТекущаяДата  = КонецМесяца(ПараметрыОтчета.НачалоПериода);
	КонечнаяДата = КонецМесяца(ПараметрыОтчета.КонецПериода);
	Пока ТекущаяДата <= КонечнаяДата Цикл
		ТаблицаПериодов.Добавить().Период = ТекущаяДата;
		ТекущаяДата = КонецМесяца(ДобавитьМесяц(ТекущаяДата, 1));
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Формирует текст запроса.
Функция ПолучитьТекстЗапроса()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Период КАК Период
	|ПОМЕСТИТЬ врТаблицаПериодов
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период, МЕСЯЦ) КАК Период,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток КАК СуммаНач,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток КАК СуммаКон
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛС)
	|				И &ДопПараметр) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаПериодов.Период КАК Период,
	|	МАКСИМУМ(КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период, МЕСЯЦ)) КАК ПериодОстатка
	|ПОМЕСТИТЬ втПериодыПредыдущихОстатков
	|ИЗ
	|	врТаблицаПериодов КАК врТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|				,
	|				&ДатаКон,
	|				Месяц,
	|				Движения,
	|				Организация = &Организация
	|					И ЛицевойСчет В (&СписокЛС)
	|					И &ДопПараметр) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|		ПО (НЕ врТаблицаПериодов.Период < КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период, МЕСЯЦ))
	|ГДЕ
	|	(НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход = 0
	|			ИЛИ НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияРасход = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	врТаблицаПериодов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериодыПредыдущихОстатков.Период КАК Период,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток КАК СуммаНач,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток КАК СуммаКон
	|ПОМЕСТИТЬ втПредыдущиеОстатки
	|ИЗ
	|	втПериодыПредыдущихОстатков КАК втПериодыПредыдущихОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|				,
	|				&ДатаКон,
	|				Месяц,
	|				Движения,
	|				Организация = &Организация
	|					И ЛицевойСчет В (&СписокЛС)
	|					И &ДопПараметр) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|		ПО (втПериодыПредыдущихОстатков.ПериодОстатка = КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период, МЕСЯЦ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаПериодов.Период КАК Период,
	|	ЕСТЬNULL(втОстатки.СуммаНач, ЕСТЬNULL(втПредыдущиеОстатки.СуммаНач, 0)) КАК СуммаНач,
	|	ЕСТЬNULL(втОстатки.СуммаКон, ЕСТЬNULL(втПредыдущиеОстатки.СуммаКон, 0)) КАК СуммаКон
	|ПОМЕСТИТЬ втИтоговаяОстатки
	|ИЗ
	|	врТаблицаПериодов КАК врТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО врТаблицаПериодов.Период = втОстатки.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредыдущиеОстатки КАК втПредыдущиеОстатки
	|		ПО врТаблицаПериодов.Период = втПредыдущиеОстатки.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ) КАК Период,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленоПлановое,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплачено,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПерерасчета,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		КОНЕЦ) КАК СуммаЛьготы,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПени
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛС)
	|				И &ДопПараметр) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаПериодов.Период КАК Дата,
	|	ЕСТЬNULL(втИтоговаяОстатки.СуммаНач, 0) КАК СуммаНач,
	|	ЕСТЬNULL(втИтоговаяОстатки.СуммаКон, 0) КАК СуммаКон,
	|	ЕСТЬNULL(втНачисления.СуммаНачисленоПлановое, 0) КАК СуммаНачисленоПлановое,
	|	ЕСТЬNULL(втНачисления.СуммаНачислено, 0) КАК СуммаНачислено,
	|	ЕСТЬNULL(втНачисления.СуммаОплачено, 0) КАК СуммаОплачено,
	|	ЕСТЬNULL(втНачисления.СуммаПерерасчета, 0) КАК СуммаПерерасчета,
	|	ЕСТЬNULL(втНачисления.СуммаЛьготы, 0) КАК СуммаЛьготы,
	|	ЕСТЬNULL(втНачисления.СуммаПени, 0) КАК СуммаПени
	|ИЗ
	|	врТаблицаПериодов КАК врТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговаяОстатки КАК втИтоговаяОстатки
	|		ПО врТаблицаПериодов.Период = втИтоговаяОстатки.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО врТаблицаПериодов.Период = втНачисления.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|	МАКСИМУМ(СуммаНач),
	|	МАКСИМУМ(СуммаКон),
	|	СУММА(СуммаНачисленоПлановое),
	|	СУММА(СуммаНачислено),
	|	СУММА(СуммаОплачено),
	|	СУММА(СуммаПерерасчета),
	|	СУММА(СуммаЛьготы),
	|	СУММА(СуммаПени)
	|ПО
	|	ОБЩИЕ,
	|	Дата";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

#КонецОбласти

#КонецЕсли