// Область "Настройки" описывает параметры инициализации механизма загрузки
// регламентированных отчетов из файлов выгрузки. Формат области настроек - JSON.
//
// Описание параметров:
//  * Установкой параметра "РазрешитьЗагрузку" в "true" или "false" регулируем видимость
//    кнопки "Загрузить" и возможность загрузки из файла в форме отчета.
//  * Параметр "ФорматыСхемВыгрузки" описывает соответствие имен макетов схем выгрузки
//    поддерживаемым форматам загрузки. Если у формы единственная схема выгрузки или
//    нужно всегда использовать схему по умолчанию - указываем значение "null".
//  * Параметр "ОбластиОбработчиков" содержит список имен используемых обработчиков
//    загружаемых данных. Имена соответствуют областям макета, в которых можно размещать
//    произвольные алгоритмы на языке "1С:Предприятие" для обработки доступных объектов.
//
// Примечание:
//  Сопоставление имен узлов из файла XML и имен показателей отчета выполняется по данным схемы выгрузки,
//  поэтому обработчики используются для получения значений показателей не описанных в схеме выгрузки.
//
#Область Настройки
{
	"РазрешитьЗагрузку"   : true,
	
	"ФорматыСхемВыгрузки" : null,
	"ОбластиОбработчиков" : {
		"ПередЗагрузкой"  : "ПредОбработкаСхемыЗагрузки",
		"ПослеЗагрузки"   : "ПостОбработкаДокументаОтчета",
	}
}
#КонецОбласти

// Доступны параметры:
//
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПредОбработкаСхемыЗагрузки
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Обязательность", "ОМ"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Многостраничность = МногостраничностьУзла(СтрокаДерева); // попытаемся автоматически назначить признак многостраничности
	КонецЦикла;
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Обязательность", "НМ"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Многостраничность = МногостраничностьУзла(СтрокаДерева); // попытаемся автоматически назначить признак многостраничности
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Ключ", "П100110004003"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Ключ = "П000110004003"; // обработаем в структуре данных документа
	КонецЦикла;
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Ключ", "П100110007003"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Ключ = "П000110007003"; // обработаем в структуре данных документа
	КонецЦикла;
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Ключ", "П100250010003"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Ключ = "П000250010003"; // обработаем в структуре данных документа
	КонецЦикла;
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Ключ", "П100260010003"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Ключ = "П000260010003"; // обработаем в структуре данных документа
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Ключ", "П100330000501"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Ключ = ""; // не загружаем
	КонецЦикла;
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Ключ", "П100340000501"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Ключ = ""; // не загружаем
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "РасчНал", "Лист02"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Многостраничность = Истина;
		УзлыПодчиненныхРазделов = УзлыПоXPath(СтрокаДерева, "*"); // все подчиненные разделы
		Для Каждого УзелРаздела Из УзлыПодчиненныхРазделов Цикл
			УзелРаздела.Обязательность = УзелРаздела.Обязательность + "П";
			Если УзелРаздела.Код = "РасчНалГруп" Тогда
				УзелРасчНалУчГруп = УзлыПоXPath(УзелРаздела, "РасчНалУчГруп")[0];
				УзелРасчНалУчГруп.Обязательность = УзелРасчНалУчГруп.Обязательность + "П";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "КорНБЛишГод", "Лист02_2"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Многострочность = Ложь;
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "ОстУбытНачПерГод", "Лист02_4"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Многострочность = Ложь;
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "ИННЮЛ_Контрагент", "Лист08"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обязательность = "О";
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "ОстУбытНачПерГод", "Лист09"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Многострочность = Ложь;
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "НалДохДив", "Лист03А"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Многостраничность = Истина;
		УзлыПодчиненныхРазделов = УзлыПоXPath(СтрокаДерева, "@ОтчетГод");
		Для Каждого УзелРаздела Из УзлыПодчиненныхРазделов Цикл
			УзелРаздела.Ключ = "П000310000500";
		КонецЦикла;
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "НалБазОпОсобН", "Лист05"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обязательность = СтрокаДерева.Обязательность + "П";
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "РасчНалКИК", "Лист09"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обязательность = СтрокаДерева.Обязательность + "П";
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "НомерСправ", "Приложение2"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Формат = "T";
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "СумДох", "Приложение2"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Многострочность = Истина;
		УзлыПоXPath(СтрокаДерева, "@КодДоход")[0].Ключ = "П000020004001";
		УзлыПоXPath(СтрокаДерева, "@КодДоход")[0].Формат = "T";
		УзлыПоXPath(СтрокаДерева, "@СумДоход")[0].Ключ = "П000020004101";
		УзлыПодчиненныхРазделов = УзлыПоXPath(СтрокаДерева, "СумВыч");
		Для Каждого УзелРаздела Из УзлыПодчиненныхРазделов Цикл
			УзелРаздела.Обязательность = "Н";
		КонецЦикла;
	КонецЦикла;
	
#КонецОбласти

// Доступны параметры:
//
//  П.ДанныеОтчета      - заполненные данные документа регламентированного отчета;
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПостОбработкаДокументаОтчета
	
	ПериодОтчета = П.ПараметрыОтчета.Период;
	ДокументОтчетаОбъект = П.ДанныеОтчета.ДокументОтчетаОбъект;
	
	УстановитьПериод = Ложь;
	Если СокрЛП(ПериодОтчета) = "34" И ДокументОтчетаОбъект.Периодичность = Перечисления.Периодичность.Год Тогда
		ДокументОтчетаОбъект.Периодичность = Перечисления.Периодичность.Квартал;
		УстановитьПериод = Истина;
	КонецЕсли;
	
	Титульный = Неопределено;
	
	П.ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный", Титульный);
	Если Титульный <> Неопределено Тогда
		Титульный.КодИМНС = П.ПараметрыОтчета.КодНО;
		Титульный.ПоМесту = П.ПараметрыОтчета.ПоМесту;
		Титульный.Период  = П.ПараметрыОтчета.Период;
	КонецЕсли;
	
	УзелПрибыль = УзлыПоXPath(П.ДеревоДляЗагрузки, "//Прибыль")[0]; // содержательная часть
	
	Лист21 = УзлыПоXPath(УзелПрибыль, "РасчНал/ДохРеалВнеРеал"); // Лист 02.1
	Для НомСтраницы = 1 По Лист21.Количество() Цикл
		СтраницаРаздела = Лист21[НомСтраницы - 1];
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
	КонецЦикла;
	
	Лист22 = УзлыПоXPath(УзелПрибыль, "РасчНал/РасхРеалВнеРеал"); // Лист 02.2
	Для НомСтраницы = 1 По Лист22.Количество() Цикл
		СтраницаРаздела = Лист22[НомСтраницы - 1];
		УзлыКорНБЛишГод = УзлыПоXPath(СтраницаРаздела, "КорНБЛиш/КорНБЛишГод");
		Для Инд = 1 По Мин(УзлыКорНБЛишГод.Количество(), 3) Цикл
			УзлыПоXPath(УзлыКорНБЛишГод[Инд - 1], "@Год")[0].Ключ = "П000220040" + Инд + "01";
			УзлыПоXPath(УзлыКорНБЛишГод[Инд - 1], "@КорНБЛишВс")[0].Ключ = "П000220040" + Инд + "03";
		КонецЦикла;
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
	КонецЦикла;
	
	Лист23 = УзлыПоXPath(УзелПрибыль, "РасчНал/РасчРасхОпер"); // Лист 02.3
	Для НомСтраницы = 1 По Лист23.Количество() Цикл
		СтраницаРаздела = Лист23[НомСтраницы - 1];
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
	КонецЦикла;
	
	Лист24 = УзлыПоXPath(УзелПрибыль, "РасчНал/УбытУменНБ"); // Лист 02.4
	Для НомСтраницы = 1 По Лист24.Количество() Цикл
		СтраницаРаздела = Лист24[НомСтраницы - 1];
		УзлыОстУбытНачПерГод = УзлыПоXPath(СтраницаРаздела, "ОстУбытНачПерГод");
		Для Инд = 1 По Мин(УзлыОстУбытНачПерГод.Количество(), 10) Цикл
			УзлыПоXPath(УзлыОстУбытНачПерГод[Инд - 1], "@Год")[0].Ключ = "П0002400" + Формат((Инд + 3) * 10, "ЧЦ=3; ЧВН=") + "01";
			УзлыПоXPath(УзлыОстУбытНачПерГод[Инд - 1], "@ОстУбыт")[0].Ключ = "П0002400" + Формат((Инд + 3) * 10, "ЧЦ=3; ЧВН=") + "03";
		КонецЦикла;
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
	КонецЦикла;
	
	Лист25 = УзлыПоXPath(УзелПрибыль, "РасчНал/РаспрНалСубРФ"); // Лист 02.5
	Для НомСтраницы = 1 По Лист25.Количество() Цикл
		СтраницаРаздела = Лист25[НомСтраницы - 1];
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
	КонецЦикла;
	
	Лист26 = УзлыПоXPath(УзелПрибыль, "РасчНал/РасчНалГруп"); // Лист 02.6
	Для НомСтраницы = 1 По Лист26.Количество() Цикл
		СтраницаРаздела = Лист26[НомСтраницы - 1];
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
	КонецЦикла;
	
	Лист26а = УзлыПоXPath(УзелПрибыль, "РасчНал/РасчНалГруп/РасчНалУчГруп"); // Лист 02.6а
	Для НомСтраницы = 1 По Лист26а.Количество() Цикл
		СтраницаРаздела = Лист26а[НомСтраницы - 1];
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
	КонецЦикла;
	
	ГруппыЛист26б = УзлыПоXPath(УзелПрибыль, "РасчНал/ДохРасхУчГрупНБ/ДохРасхУчГруп"); // группы строк листа 02.6б
	Для НомСтроки = 1 По ГруппыЛист26б.Количество() Цикл
		ГруппаРаздела = ГруппыЛист26б[НомСтроки - 1];
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(ГруппаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , , НомСтроки);
	КонецЦикла;
	
	Лист05 = УзлыПоXPath(УзелПрибыль, "НалБазОпОсобН"); // Лист 05
	НомерСтраницы = 1;
	Для НомСтраницы = 1 По Лист05.Количество() Цикл
		СтраницаРаздела = Лист05[НомСтраницы - 1];
		УзелВидОпер = УзлыПоXPath(СтраницаРаздела, "@ВидОпер");
		Если ЗначениеЗаполнено(УзелВидОпер) И ЗначениеЗаполнено(УзелВидОпер[0].Значение) Тогда
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомерСтраницы);
			НомерСтраницы = НомерСтраницы + 1;
		КонецЕсли;
	КонецЦикла;
	
	Лист08 = УзлыПоXPath(УзелПрибыль, "ДохРасхКор"); // Лист 08
	Для НомСтраницы = 1 По Лист08.Количество() Цикл
		УзлыОргКонтрагент = УзлыПоXPath(Лист08[НомСтраницы - 1], "Орг_Контрагент");
		УзлыФЛКонтрагент  = УзлыПоXPath(Лист08[НомСтраницы - 1], "ФЛ_Контрагент");
		Если ЗначениеЗаполнено(УзлыОргКонтрагент) И ЗначениеЗаполнено(УзлыФЛКонтрагент) Тогда
			УзлыИННФЛ = УзлыПоXPath(УзлыФЛКонтрагент[0], "@ИННФЛ_Контрагент");
			УзлыИННЮЛ = УзлыПоXPath(УзлыОргКонтрагент[0], "@ИННЮЛ_Контрагент");
			УзелВидКонтрагент = Неопределено;
			Для Каждого УзелИННЮЛ Из УзлыИННЮЛ Цикл
				УзелВидКонтрагент = СкопированныйУзел(УзлыОргКонтрагент[0], УзелИННЮЛ);
				УзелВидКонтрагент.Код = "Вид_Контрагент";
				УзелВидКонтрагент.Ключ = "П000800000301";
				УзелВидКонтрагент.МаксРазмерность = 100;
				УзелВидКонтрагент.Значение = "Российская организация";
			КонецЦикла;
			Если ЗначениеЗаполнено(УзлыИННФЛ) И ЗначениеЗаполнено(УзлыИННФЛ[0].Значение) Тогда
				УзлыИННЮЛ[0].Значение = УзлыИННФЛ[0].Значение;
				УзлыИННЮЛ[0].МаксРазмерность = 12;
				ФИО = "";
				УзлыФИО = УзлыПоXPath(УзлыФЛКонтрагент[0], "ФИО_Контрагент/@*");
				Для Каждого УзелФИО Из УзлыФИО Цикл
					ФИО = ФИО + ?(ПустаяСтрока(ФИО), "", " ") + УзелФИО.Значение;
				КонецЦикла;
				УзлыНаимОрг = УзлыПоXPath(УзлыОргКонтрагент[0], "@НаимОрг_Контрагент");
				УзлыНаимОрг[0].Значение = ФИО;
				Если УзелВидКонтрагент <> Неопределено И ЗначениеЗаполнено(ФИО) Тогда
					УзелВидКонтрагент.Значение = "Индивидуальный предприниматель";
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзлыОргКонтрагент[0], П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
		КонецЕсли;
	КонецЦикла;
	
	Лист09 = УзлыПоXPath(УзелПрибыль, "РасчНалКИК/СведКИК"); // Лист 09
	Для НомСтраницы = 1 По Лист09.Количество() Цикл
		СтраницаРаздела = Лист09[НомСтраницы - 1];
		//УзлыОстУбыт = УзлыПоXPath(СтраницаРаздела, "РасчУбытУмНБ/ОстУбытНачПерГод"); // предыдущая реализация
		//Для Инд = 1 По Мин(УзлыОстУбыт.Количество(), 10) Цикл
		//	УзлыПоXPath(УзлыОстУбыт[Инд - 1], "@Год")[0].Ключ = "П0009100" + Формат((Инд + 2) * 10, "ЧЦ=3; ЧВН=") + "01";
		//	УзлыПоXPath(УзлыОстУбыт[Инд - 1], "@Остаток")[0].Ключ = "П0009100" + Формат((Инд + 2) * 10, "ЧЦ=3; ЧВН=") + "03";
		//КонецЦикла;
		
		УзлыРасчНал1 = УзлыПоXPath(СтраницаРаздела, "РасчНал1.1.309.1/@Валюта");
		Если ЗначениеЗаполнено(УзлыРасчНал1) И ЗначениеЗаполнено(УзлыРасчНал1[0].Значение) Тогда
			УзелРасчНал1Пр = СкопированныйУзел(УзлыРасчНал1[0].Родитель, УзлыРасчНал1[0]);
			УзелРасчНал1Пр.Код  = "РасчНал1Пр";
			УзелРасчНал1Пр.Ключ = "П0009А0000100";
			УзелРасчНал1Пр.Значение = "Х";
			УзелРасчНал1Кф = СкопированныйУзел(УзлыРасчНал1[0].Родитель, УзлыРасчНал1[0]);
			УзелРасчНал1Кф.Код  = "РасчНал1Кф";
			УзелРасчНал1Кф.Ключ = "П009Б10018500";
			УзелРасчНал1Кф.Формат  = "N";
			УзелРасчНал1Кф.Значение = "20";
		КонецЕсли;
		
		УзлыРасчНал2 = УзлыПоXPath(СтраницаРаздела, "РасчНал2.1.309.1/@Валюта");
		Если ЗначениеЗаполнено(УзлыРасчНал2) И ЗначениеЗаполнено(УзлыРасчНал2[0].Значение) Тогда
			УзелРасчНал2Пр = СкопированныйУзел(УзлыРасчНал2[0].Родитель, УзлыРасчНал2[0]);
			УзелРасчНал2Пр.Код  = "РасчНал2Пр";
			УзелРасчНал2Пр.Ключ = "П0009А0000200";
			УзелРасчНал2Пр.Значение = "Х";
			УзелРасчНал2Кф = СкопированныйУзел(УзлыРасчНал2[0].Родитель, УзлыРасчНал2[0]);
			УзелРасчНал2Кф.Код  = "РасчНал2Кф";
			УзелРасчНал2Кф.Ключ = "П009Б20022500";
			УзелРасчНал2Кф.Формат  = "N";
			УзелРасчНал2Кф.Значение = "20";
		КонецЕсли;
		
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
	КонецЦикла;
	
	Приложение2 = УзлыПоXPath(УзелПрибыль, "СведДохФЛ"); // Приложение 2
	Для НомСтраницы = 1 По Приложение2.Количество() Цикл
		УзлыСумДох = УзлыПоXPath(Приложение2[НомСтраницы - 1], "СпрДохФЛ/СумДох");
		Для НомСтроки = 1 По УзлыСумДох.Количество() Цикл
			УзелСумДох = УзлыСумДох[НомСтроки - 1];
			УзлыСумВыч = УзлыПоXPath(УзелСумДох, "СумВыч");
			Для Инд = 1 По Мин(УзлыСумВыч.Количество(), 5) Цикл
				УзлыПоXPath(УзлыСумВыч[Инд - 1], "@КодВычет")[0].Ключ = "П00002000420" + Инд;
				УзлыПоXPath(УзлыСумВыч[Инд - 1], "@СумВычет")[0].Ключ = "П00002000430" + Инд;
			КонецЦикла;
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелСумДох, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы, НомСтроки);
		КонецЦикла;
	КонецЦикла;
	
	Раздел1_1 = Неопределено;
	
	П.ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство("Раздел1_1", Раздел1_1);
	Если Раздел1_1 <> Неопределено Тогда
		Для Каждого СтраницаРаздела Из Раздел1_1 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные;
			ЗначениеПоказателя = 0;
			Если ДанныеРаздела.Свойство("П000110004003", ЗначениеПоказателя) Тогда
				ЗначениеПоказателя = 0 + ЗначениеПоказателя;
				Если ЗначениеПоказателя >= 0 Тогда
					ДанныеРаздела.Вставить("П000110004003", ЗначениеПоказателя);
					ДанныеРаздела.Вставить("П000110005003", 0);
				Иначе
					ДанныеРаздела.Вставить("П000110004003", 0);
					ДанныеРаздела.Вставить("П000110005003", -ЗначениеПоказателя);
				КонецЕсли;
			КонецЕсли;
			Если ДанныеРаздела.Свойство("П000110007003", ЗначениеПоказателя) Тогда
				ЗначениеПоказателя = 0 + ЗначениеПоказателя;
				Если ЗначениеПоказателя >= 0 Тогда
					ДанныеРаздела.Вставить("П000110007003", ЗначениеПоказателя);
					ДанныеРаздела.Вставить("П000110008003", 0);
				Иначе
					ДанныеРаздела.Вставить("П000110007003", 0);
					ДанныеРаздела.Вставить("П000110008003", -ЗначениеПоказателя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Лист02_5 = Неопределено;
	
	П.ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство("Лист02_5", Лист02_5);
	Если Лист02_5 <> Неопределено Тогда
		Для Каждого СтраницаРаздела Из Лист02_5 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные;
			ЗначениеПоказателя = 0;
			Если ДанныеРаздела.Свойство("П000250010003", ЗначениеПоказателя) Тогда
				ЗначениеПоказателя = 0 + ЗначениеПоказателя;
				Если ЗначениеПоказателя >= 0 Тогда
					ДанныеРаздела.Вставить("П000250010003", ЗначениеПоказателя);
					ДанныеРаздела.Вставить("П000250011003", 0);
				Иначе
					ДанныеРаздела.Вставить("П000250010003", 0);
					ДанныеРаздела.Вставить("П000250011003", -ЗначениеПоказателя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Лист02_6 = Неопределено;
	
	П.ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство("Лист02_6", Лист02_6);
	Если Лист02_6 <> Неопределено Тогда
		Для Каждого СтраницаРаздела Из Лист02_6 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные;
			ЗначениеПоказателя = 0;
			Если ДанныеРаздела.Свойство("П000260010003", ЗначениеПоказателя) Тогда
				ЗначениеПоказателя = 0 + ЗначениеПоказателя;
				Если ЗначениеПоказателя >= 0 Тогда
					ДанныеРаздела.Вставить("П000260010003", ЗначениеПоказателя);
					ДанныеРаздела.Вставить("П000260011003", 0);
				Иначе
					ДанныеРаздела.Вставить("П000260010003", 0);
					ДанныеРаздела.Вставить("П000260011003", -ЗначениеПоказателя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
#КонецОбласти