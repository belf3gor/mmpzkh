&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений; 
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2010Кв4";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоДНБ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 11));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал = Перечисления.Периодичность.Квартал;
	СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц   = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;

	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0021200010";
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0001300040";
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0021300010";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1; //( 9)
	КолИсхСтрокИдГруппы2 = 1; //(22)
	КолИсхСтрокИдГруппы3 = 1; //(20)

	КолКолонокИдГруппы1 = 7;
	КолКолонокИдГруппы2 = 3; //(2 - но здесь макс. номер показателя раздела)
	КолКолонокИдГруппы3 = 4;
	
	СтруктураДанныхТитульный  = Новый Структура;
	СтруктураДанныхЛист06     = Новый Структура;
	СтруктураДанныхЛист07     = Новый Структура;
	СтруктураДанныхПриложение = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураРеквизитовФормы.мИдГруппы3);

	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_1",         "ТаблицаСтраницыРаздел1_1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_2",         "ТаблицаСтраницыРаздел1_2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_3",         "ТаблицаСтраницыРаздел1_3"); //многостраничный и многострочный
	мСтруктураМногостраничныхРазделов.Вставить("Лист02",            "ТаблицаСтраницыЛист02");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил1",      "ТаблицаСтраницыЛист02_Прил1");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил2",      "ТаблицаСтраницыЛист02_Прил2");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил3",      "ТаблицаСтраницыЛист02_Прил3");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил4",      "ТаблицаСтраницыЛист02_Прил4");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил5",      "ТаблицаСтраницыЛист02_Прил5");
	мСтруктураМногостраничныхРазделов.Вставить("Лист03",            "ТаблицаСтраницыЛист03");
	мСтруктураМногостраничныхРазделов.Вставить("Лист03Продолжение", "ТаблицаСтраницыЛист03Продолжение");
	мСтруктураМногостраничныхРазделов.Вставить("Лист03Реестр",      "ТаблицаСтраницыЛист03Реестр");
	мСтруктураМногостраничныхРазделов.Вставить("Лист04",            "ТаблицаСтраницыЛист04");
	мСтруктураМногостраничныхРазделов.Вставить("Лист05",            "ТаблицаСтраницыЛист05");

	// Структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолИсхСтрокИдГруппы3);

	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолКолонокИдГруппы3);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "29/09/2011";;
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1151006";

	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.02", Истина);

	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;

	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.НаимОрг = Неопределено;
	Рез = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "НаимЮЛПол").Свойство("НаимЮЛПол", СтруктураРеквизитовФормы.НаимОрг);
	СтруктураРеквизитовФормы.НаимОрг = ?(Рез, СтруктураРеквизитовФормы.НаимОрг, "");

	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	Инициализация(Параметры.БезОткрытияФормы);
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоМесту");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("ВГруппуОПВходитОрганизацияДоступность", Ложь);
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоДНБ");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьКвартал");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьМесяц");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ОКАТОДляРазделов");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_Прил1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_Прил2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_Прил3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_Прил4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_Прил5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист03.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист03Продолжение.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист03Реестр.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист04.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист05.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры // ИнициализацияМногостраничныхРазделов()

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры // ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
				
		СформироватьСпискиВыбора();
				
	КонецЕсли;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			// Ставки.
			ПолучитьСтавкиНалога(ЭтаФорма, "Титульный");
			
			СтруктураРеквизитовФормы.мПоМесту = "";
			
			ЗаполнитьЗначенияПолейПоУмолчанию();
			
			ПроставитьПрПл_1();
			
		КонецЕсли;
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		ЗаполнитьПустыеСтруктурыДанных();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
		
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		СформироватьРазделы11И12("Титульный");
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
	 
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе	
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);	
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовНаСервере();

	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
			
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		СформироватьДеревоРазделовОтчетаНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПолейПоУмолчанию()
	
	ТабличныйДокумент.Области.ПоМесту.Значение = "214";
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Раздел 1.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02";
	СтрокаУровня1.Представление            = "Лист 02";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил1";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил2";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил3";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил4";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил5";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03";
	СтрокаУровня1.Представление            = "Лист 03. Раздел А";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03Продолжение";
	СтрокаУровня1.Представление            = "Лист 03. Раздел Б";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03Реестр";
	СтрокаУровня1.Представление            = "Лист 03. Реестр";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист04";
	СтрокаУровня1.Представление            = "Лист 04";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист05";
	СтрокаУровня1.Представление            = "Лист 05";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист06";
	СтрокаУровня1.Представление            = "Лист 06";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист07";
	СтрокаУровня1.Представление            = "Лист 07";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение";
	СтрокаУровня1.Представление            = "Приложение";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 4;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03Продолжение";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03Реестр";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист04";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 6;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист05";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 5;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист06";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист07";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2010Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыОрг", 1, , "Выбор кода формы организации", КоллекцияСписковВыбора["КодыФормОрг"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодовВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002060000300", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодовВариант1"]);
	
	//для разделов 1.1 и 1.2 отключен интеракивный выбор - заполнение происходит автоматически
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120000200", 2, , "Выбор кода квартала", КоллекцияСписковВыбора["КодыКварталовРаздел1_2"]);

	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002000000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002010000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002020000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002030000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002040000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002050000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110001003", 11, "ОКАТО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120001003", 11, "ОКАТО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130002003", 11, "ОКАТО");
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110003003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110006003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120011003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120021003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130003003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант3"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130001003", 1, , "Выбор вида платежа", КоллекцияСписковВыбора["ВидПлатежа"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002050001000", 1, , "Выбор вида составления расчета", КоллекцияСписковВыбора["ВидыРасчетов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002050002002", 1, , "Выбор вида возложения обязанностей", КоллекцияСписковВыбора["ВидыВозложений"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002020013503", 1, , "Выбор метода начисления амортизации", КоллекцияСписковВыбора["МетодыНА"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002060000200", 1, , "Выбор вида дивидендов", КоллекцияСписковВыбора["ВидыДивидендов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002070000200", 1, , "Выбор вида дохода", КоллекцияСписковВыбора["ВидыДоходаВариант1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002090000200", 1, , "Выбор вида дохода", КоллекцияСписковВыбора["ВидыДоходаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002100000200", 1, , "Выбор вида операции", КоллекцияСписковВыбора["ВидыОперации"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002120001001", 3, , "Выбор кода вида поступлений", КоллекцияСписковВыбора["КодыВидаПоступлений"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002130001001", 3, , "Выбор кода вида доходов", КоллекцияСписковВыбора["КодыВидаДоходов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002130001003", 3, , "Выбор кода вида расходов", КоллекцияСписковВыбора["КодыВидаРасходов"]);

КонецПроцедуры // СформироватьСпискиВыбора()

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры // ВвестиПоказатель()

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
		
	Элементы.ОчиститьТекущуюСтраницу.Доступность = ?(ЗаголовокРаздела И Элемент.ТекущиеДанные.РазделМногостраничный, Ложь, Истина);
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	КМенюРО.Видимость = Элемент.ТекущиеДанные.РазделМногостраничный;
	КМенюТД.Видимость = Элемент.ТекущиеДанные.РазделМногострочный;
	
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
	
	КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
			
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, ЗаголовокРаздела);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Если НЕ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_1"
			И НЕ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_2" Тогда
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
				
			Иначе
				
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.РазделМногострочный
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_3"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лист07"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение" Тогда
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лист02_5" Тогда
	 
		ВГруппуОПВходитОрганизацияДоступность = СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность;
		
		Если ВГруппуОПВходитОрганизацияДоступность Тогда
			ЦветЖелтый = Новый Цвет(255, 255, 192); // Желтый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветЖелтый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Истина;
		Иначе
			ЦветБелый = Новый Цвет(255, 255, 255); // Белый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветБелый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
		
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	ПриСменеСтраницы(ЭтаФорма, ИмяТекРаздела);

	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
	
		РасчетНаСервере();
	
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел1_1"
	 ИЛИ НаимРаздела = "Раздел1_2"
	 ИЛИ НаимРаздела = "Лист02"
	 ИЛИ НаимРаздела = "Лист02_Прил1"
	 ИЛИ НаимРаздела = "Лист02_Прил2"
	 ИЛИ НаимРаздела = "Лист02_Прил3"
	 ИЛИ НаимРаздела = "Лист02_Прил4"
	 ИЛИ НаимРаздела = "Лист02_Прил5"
	 ИЛИ НаимРаздела = "Лист03"
	 ИЛИ НаимРаздела = "Лист03Продолжение"
	 ИЛИ НаимРаздела = "Лист03Реестр"
	 ИЛИ НаимРаздела = "Лист04"
	 ИЛИ НаимРаздела = "Лист05" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[НаимРаздела];
		
		АктивныеСтраницы = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			Если НаимРаздела = "Лист02_Прил5" Тогда
				ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницуНаСервере(ВГруппуОПВходитОрганизация, Истина);
			КонецЕсли;
						
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли; 
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел1_3" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
							
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
				
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Лист07"
	      ИЛИ НаимРаздела = "Приложение" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	ВГруппуОПВходитОрганизация = Ложь;

	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел1_1"
	 ИЛИ ИмяТекРаздела = "Раздел1_2"
	 ИЛИ ИмяТекРаздела = "Лист02"
	 ИЛИ ИмяТекРаздела = "Лист02_Прил1"
	 ИЛИ ИмяТекРаздела = "Лист02_Прил2"
	 ИЛИ ИмяТекРаздела = "Лист02_Прил3"
	 ИЛИ ИмяТекРаздела = "Лист02_Прил4"
	 ИЛИ ИмяТекРаздела = "Лист02_Прил5"
	 ИЛИ ИмяТекРаздела = "Лист03"
	 ИЛИ ИмяТекРаздела = "Лист03Продолжение"
	 ИЛИ ИмяТекРаздела = "Лист03Реестр"
	 ИЛИ ИмяТекРаздела = "Лист04"
	 ИЛИ ИмяТекРаздела = "Лист05" Тогда
	 
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
	
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
				
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
			
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если ИмяТекРаздела = "Лист02_Прил5" Тогда
			
			ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыПрил5НаСервере(СтруктураДанных);
			
			//программная установка типа (обход интерактивного запрета на точность больше 9)
			ТипДоляНалоговойБазы = СтруктураРеквизитовФормы.мОписаниеТиповЧислоДНБ;
			ТабличныйДокумент.Области.П002050004003.ТипЗначения = ТипДоляНалоговойБазы;
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел1_3" Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
								
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
								
			КонецЕсли;
			
		КонецЕсли;
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Лист07"
	      ИЛИ ИмяТекРаздела = "Приложение" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		ОбновитьДоступностьЭлементовНаСервере();
		
	Иначе
		
		ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);

		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	КонецЕсли;
		
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ОбновитьДоступностьЭлементовНаСервере()
	
	Перем ЦветФона;
	
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	
	флЕстьОбособ = (СтруктураРеквизитовФормы.мПоМесту = "220" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "223" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "224");
	
	Если флЕстьОбособ Тогда
		ТабличныйДокумент.Области.НаимОрг.Защита = Ложь;
		мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	Иначе
		ТабличныйДокумент.Области.НаимОрг.Значение = СтруктураРеквизитовФормы.НаимОрг;
		ТабличныйДокумент.Области.НаимОрг.Защита = Истина;
		мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
	КонецЕсли;
	
	ТабличныйДокумент.Области.НаимОрг.ЦветФона = ЦветФона;
	
КонецПроцедуры //ОбновитьДоступностьЭлементовНаСервере()

&НаКлиенте
Процедура ОбновитьДоступностьЭлементовНаКлиенте()
	
	Перем ЦветФона;
	
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	
	флЕстьОбособ = (СтруктураРеквизитовФормы.мПоМесту = "220" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "223" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "224");
	
	Если флЕстьОбособ Тогда
		ТабличныйДокумент.Области.НаимОрг.Защита = Ложь;
		мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	Иначе
		ТабличныйДокумент.Области.НаимОрг.Значение = СтруктураРеквизитовФормы.НаимОрг;
		ТабличныйДокумент.Области.НаимОрг.Защита = Истина;
		мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
	КонецЕсли;
	
	ТабличныйДокумент.Области.НаимОрг.ЦветФона = ЦветФона;
	
КонецПроцедуры //ОбновитьДоступностьЭлементовНаКлиенте()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "" Тогда
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// Декларация по НДС. В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

&НаКлиентеНаСервереБезКонтекста
Процедура ПриСменеСтраницы(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ТекущаяОбласть;
	
	ТекущаяОбласть = Форма.ТабличныйДокумент;

	// вспомогательные сведения для определения вариантов заполнения ячеек
	НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	СтрПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
	
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	
	КодПериодаСдачиОтчетности = Форма.СтруктураДанныхТитульный.Период;
	
	Если ИмяТекущейСтраницы = "Лист02" Тогда
		
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000011003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000011003");
		КонецЕсли;
		
		// вспомогательные значения
		ПризнакПлательщикаЛист02 = ТекущаяОбласть.Области.П002000000100.Значение;
		ЕстьПриложение5Лист02_ПризнакПлательщикаЛист02 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5",Новый Структура("П002050000100", ПризнакПлательщикаЛист02));
		
		//доступность стр.10-50 раздела Лист 02
		
        Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000001003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000002003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000005003");
		Иначе
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000001003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000002003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000003003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000004003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000005003");
			КонецЕсли;
		КонецЕсли;
		//доступность стр.110 раздела Лист 02
	    Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000011003"); // Для автозаполнения нужно установить значение 3
		Иначе
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000011003");
			КонецЕсли;	
		КонецЕсли;
		
		//доступность стр. 230 раздела Лист 02
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5",Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000023003");
	    Иначе
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000023003");
			КонецЕсли;
		КонецЕсли; 
		
		// настройка доступности строк 290-310 и 320-340
		// в зависимости от периода сдачи отчетности
		// для строки 340 вариант заполнения авторасчет при условии:
		// сдача отчетности за 9 или 11 месяцев, и есть заполненное приложение 5 к листу 02 для головной организации
		
		ВариантЗаполнения340 = ?((НомерМесяца = 9 ИЛИ НомерМесяца = 11) И Есть_Прил5 И НЕ флЕстьОбособ, 4, 0);
		
		Если КодПериодаСдачиОтчетности = "33" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000029003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000030003");
			ИзменитьВариантЗаполненияЯчейки(Форма, ВариантЗаполнения340, "П002000031003"); // аналогично строке 340
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000032003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000033003");
			ИзменитьВариантЗаполненияЯчейки(Форма, ВариантЗаполнения340, "П002000034003");
			
		ИначеЕсли КодПериодаСдачиОтчетности = "45" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000029003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000030003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000031003");
			
			ТекущаяОбласть.Области.П002000029003.Значение = "";
			ТекущаяОбласть.Области.П002000030003.Значение = "";
			ТекущаяОбласть.Области.П002000031003.Значение = "";

			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000032003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000033003");
			ИзменитьВариантЗаполненияЯчейки(Форма, ВариантЗаполнения340, "П002000034003");
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил1" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001103");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001303");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001403");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010002003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010103");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010303");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010403");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010503");
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил2" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020001003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020002003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020004103");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020004203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020005203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020005903");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020006003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020007003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020009003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020010003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013103");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013203");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013303");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013403");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013503");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020103");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020403");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020503");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020030103");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020030203");
		КонецЕсли;	
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил3" Тогда		
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030005003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030006003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030007003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030008003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030010003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030011003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030012003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030013003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030014003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030017003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030018003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030019003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030020003");			
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил4" Тогда
		Если НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002040016003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002040017003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002040018003");
			
			ТекущаяОбласть.Области.П002040016003.Значение = "";
			ТекущаяОбласть.Области.П002040017003.Значение = "";
			ТекущаяОбласть.Области.П002040018003.Значение = "";
		КонецЕсли;
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040002003");	
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040004001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040005001");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040006001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040007001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040008001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040009001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040010001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040011001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040012001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040013001");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040004003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040005003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040006003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040007003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040008003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040009003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040010003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040011003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040012003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040013003");
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040014003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040015003");	
		КонецЕсли;	
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил5" Тогда	
		Если ТекущаяОбласть.Области.П002050001000.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050005003");
		ИначеЕсли НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002050005003");
		КонецЕсли;
		
		Если флЕстьОбособ Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050003003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050003103");	
		ИначеЕсли НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002050003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002050003103");
		КонецЕсли;
		
		// настройка доступности строк 120 и 121
		// в зависимости от периода сдачи отчетности
		Если КодПериодаСдачиОтчетности = "33" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050012103");
			
		ИначеЕсли КодПериодаСдачиОтчетности = "45" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002050012003");
			ТекущаяОбласть.Области.П002050012003.Значение = "";
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050012103");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВариантЗаполненияЯчейкиНаСервере(НовыйВариант, Показатель = Неопределено)
	
	ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, НовыйВариант, Показатель);
	
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейкиНаСервере()

&НаКлиенте
Процедура ИзменитьВариантЗаполненияЯчейкиНаКлиенте(НовыйВариант, Показатель = Неопределено)
	
	ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, НовыйВариант, Показатель);
	
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейкиНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
    		
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры

//Проверяет наличие экземпляра раздела с показателями, заполненными определенными значениями 
//Если в переданной структуре Условия отсутствуют конкретные требуемые значения просходит проверка на заполненность 
//(значение="" - незаполнено). Если заполнено - условие считается выполненным. 
// Параметры
//  <ИмяСтраницы>  - <Строка> - имя страницы основной панели формы
//  <Условия>  - Структура условий (ключ - имя параметра, значение (необязательный параметр) - требуемое значение) 
//
// Возвращаемое значение:
//   Истина, Ложь
//
&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРазделЗаполненныйПоУсловиям(Форма, ИмяСтраницы, Условия)
	
	Результат = Ложь;
	
	МногостраничностьЕсть = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ДанныеТаблПоле = Форма["СтруктураДанных" + ИмяСтраницы];
		Результат = ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия);
	Иначе
		ТаблицаРаздела = Неопределено;
		Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		Если ТаблицаРаздела <> Неопределено Тогда
			ТаблицаРаздела =  Форма[ТаблицаРаздела];
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				//проверка экземпляра	
				
				СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
				Если СтраницаДанные <> Неопределено Тогда
					Результат=ВыполняютсяУсловияЗаполнения(ТаблицаРаздела[Инд].Данные[0].Значение, Условия);
				КонецЕсли;
				
				//если хоть один экземпляр благополучно прошел проверку - заканчиваем проверку экземпляров успехом
				Если Результат Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЕстьРазделЗаполненныйПоУсловиям()

// Вспомогательная функция
// Проверяет выполняются ли все условия
// Если в переданной структуре Условия отсутствуют конкретные требуемые значения просходит проверка на заполненность 
//(значение="" - незаполнено). Если заполнено - условие считается выполненным		
// Параметры
//  <СтруктураДанных>  - <Структура> - данные экземпляра раздела
//                 
//  <Условия>  - <Структура> Структура условий (ключ - имя параметра, значение (необязательный параметр) - требуемое значение)
//
// Возвращаемое значение:
//    Истина, Ложь
//
&НаКлиентеНаСервереБезКонтекста
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		//проверка условия
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		//если хоть одно условие не выполнилось - заканчиваем проверку листа провалом
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции //ВыполняютсяУсловияЗаполнения()

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
	
	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКАТО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
								
		// заполняем ИНН
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		// заполняем КПП
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области["ИНН1"].Значение = ИНН;
		Форма.ТабличныйДокумент.Области["КПП1"].Значение = КПП;
		
		// заполняем код ИФНС
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;

		Форма.ТабличныйДокумент.Области["КодИМНС"].Значение = КодНО;
		
		ИзменитьОКАТОРазделов(Форма, СведенияОбОрганизации.ОКАТО);
				
		// заполняем наименование организации
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		// заполняем телефон организации
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	// заполняем сведения о подписантах
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОКАТОРазделовИЗаполнитьСведенияОПодписантах(Ссылка)
	
	Если ДатаПодписи >= '2014-01-01'
	   И Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2013 Тогда
	   
		ОКАТО = Ссылка.КодПоОКТМО;
		
	Иначе
		
		ОКАТО = Ссылка.КодПоОКАТО;
				
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ОКАТОДляРазделов = ОКАТО;
	
	ИзменитьОКАТОРазделов(ЭтаФорма, ОКАТО);
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОКАТОРазделов(Форма, ОКАТО) Экспорт
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		КодПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "ПоМесту");
		
	Иначе
		
		КодПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
		
	КонецЕсли; 
	
	Если КодПоМесту = "218" ИЛИ КодПоМесту = "231" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЛистРаздела1_1 Из Форма[Форма.мСтруктураМногостраничныхРазделов.Раздел1_1] Цикл
		
		ЛистРаздела1_1.Данные[0].Значение.П000110001003 = ОКАТО;
		
	КонецЦикла;
	
	Для Каждого ЛистРаздела1_2 Из Форма[Форма.мСтруктураМногостраничныхРазделов.Раздел1_2] Цикл
		
		П000120001003 = Неопределено;
		
		ЛистРаздела1_2.Данные[0].Значение.Свойство("П000120001003", П000120001003);
		
		Если П000120001003 <> Неопределено Тогда
			
			ЛистРаздела1_2.Данные[0].Значение.П000120001003 = ОКАТО;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// ПолучитьПоКодамСведенияОПредставителе
&НаСервере
Функция ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП = Неопределено) Экспорт
	
	ТипПодписанта = "1";
	флПредставительЮрЛицо = Истина;
	НаименованиеОрганизацииПредставителя = "";
	ФИОПредставителя = "";
	ПредставительСсылка = Неопределено;
	ДокументПредставителя = "";
	
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	РегистрацииВНалоговомОргане.Представитель,
	               |	РегистрацииВНалоговомОргане.УполномоченноеЛицоПредставителя,
	               |	РегистрацииВНалоговомОргане.ДокументПредставителя
	               |ИЗ
	               |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	               |ГДЕ
	               |	РегистрацииВНалоговомОргане.Владелец = &Организация
				   |	И РегистрацииВНалоговомОргане.Код = &КодНО
				   |	И РегистрацииВНалоговомОргане.ПометкаУдаления = &ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);			   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодНО", КодНО);
	
	Если КПП <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И РегистрацииВНалоговомОргане.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		ТипПодписанта = "2";
		ПредставительСсылка = Выборка.Представитель;
		ДокументПредставителя = Выборка.ДокументПредставителя;
		
		Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
			флПредставительЮрЛицо = Истина;
			НаименованиеОрганизацииПредставителя = СокрЛП(ПредставительСсылка);
			ФИОПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
		Иначе
			флПредставительЮрЛицо = Ложь;
			ФИОПредставителя = СокрЛП(ПредставительСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя", 
							 ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя);
							 
КонецФункции //ПолучитьПоКодамСведенияОПредставителе

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
			
			Если ТекущаяОбласть.Имя = "П002050001000" Тогда //Обрабатывается "Лист02_Прил5"
				СтруктураДанныхПоля.Вставить("ВГруппуОПВходитОрганизация", Форма.ВГруппуОПВходитОрганизация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт

	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт

	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

// ОбновитьПеременныеМодуля()
//
&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатПоиска = ТаблицаВариантыЗаполненияЛист02_Прил1[0].ТаблицаВариантовЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", "П002010010003"));
	
	Если РезультатПоиска.Количество() > 0 Тогда
		ТаблицаВариантыЗаполненияЛист02_Прил1[0].ТаблицаВариантовЗаполнения.Удалить(РезультатПоиска[0]);
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ВидСубконто = ?(Элемент.КодСчета.ВидыСубконто.Количество() >= 1,
					Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Неопределено);
					ДопПараметры.Вставить("Субконто1", Новый Структура(
					"ВидСубконто,ЗначениеСубконто", ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ВидСубконто = ?(Элемент.КодСчета.ВидыСубконто.Количество() >= 2,
					Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Неопределено);
					ДопПараметры.Вставить("Субконто2", Новый Структура(
					"ВидСубконто,ЗначениеСубконто", ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ВидСубконто = ?(Элемент.КодСчета.ВидыСубконто.Количество() >= 3,
					Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Неопределено);
					ДопПараметры.Вставить("Субконто3", Новый Структура(
					"ВидСубконто,ЗначениеСубконто", ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
									
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ОКАТОДляРазделов", СтруктураРеквизитовФормы.ОКАТОДляРазделов) Тогда
		СтруктураРеквизитовФормы.ОКАТОДляРазделов = "";
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ).Имя = "ДатаПодписи" Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ДатаПодписи;
			Иначе
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПоМесту = ТабличныйДокумент.Области.ПоМесту.Значение;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		УстановитьЗначениеВСтроке110Листа02();
	КонецЕсли;
	
	Модифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;				
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;					
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ТелОрганизации_1" Тогда
			СтруктураДанныхТитульный.Вставить("ТелОрганизации");
			Для Ном = 1 По 20 Цикл
				СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СтруктураДанныхТитульный.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации_" + Ном];
				СтруктураДанныхТитульный.Удалить("ТелОрганизации_" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "ИНН_Реорг_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН_Реорг");
			Для Ном = 1 По 10 Цикл
				СтруктураДанныхТитульный.ИНН_Реорг = СокрЛП(СтруктураДанныхТитульный.ИНН_Реорг) + ПоказателиТаблПоле["ИНН_Реорг_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН_Реорг_" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "КПП_Реорг_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП_Реорг");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП_Реорг = СокрЛП(СтруктураДанныхТитульный.КПП_Реорг) + ПоказателиТаблПоле["КПП_Реорг_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП_Реорг_" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "ОКВЭД_1" Тогда
			СтруктураДанныхТитульный.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				СтруктураДанныхТитульный.ОКВЭД = СокрЛП(СтруктураДанныхТитульный.ОКВЭД) + ПоказателиТаблПоле["ОКВЭД_" + Ном];
				СтруктураДанныхТитульный.Удалить("ОКВЭД_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;				
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры // ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца()

&НаСервере
Функция УстановитьЗначениеВСтроке110Листа02()
	
	НомерМесяцаОригинала = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	НомерМесяцаКопии     = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Если НЕ (НомерМесяцаОригинала = 3 ИЛИ НомерМесяцаОригинала = 12)
		И (НомерМесяцаКопии = 3 ИЛИ НомерМесяцаКопии = 12) Тогда
		РасчетНаСервере("Лист02");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Если ТабличныйДокумент.Области.НомерКорректировки.Значение = "" Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "000";
		КонецЕсли;
		Вариант = Число(ТабличныйДокумент.Области.НомерКорректировки.Значение);
	Иначе
		Вариант = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;

	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП     = СтруктураДанныхТитульный.КПП1;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт	
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	//Если перед сохранением изменяли значение показателя - нужен полный расчет
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли; 
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("ОКАТОДляРазделов", СтруктураРеквизитовФормы.ОКАТОДляРазделов);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

// ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте()

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

// ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере()
//
&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		
		ТекТабличноеПоле = "Лист07";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "Раздел1_3";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы3 Тогда
		
		ТекТабличноеПоле = "Приложение";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;
	
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Лист07" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_3" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы3;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаКлиенте()

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

// Заполняет дату подписания отчета должностными лицами, в зависимости от наличия данных по этим лицам.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;

КонецПроцедуры // ЗаполнитьДатуПодписи()

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	Если СокрЛП(ПолеТабличногоДокументаТитульный.Области.Период.Значение) = "" ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода = Новый Соответствие;
		
		Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
			
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "21");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "31");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "33");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12,"34");
			
		Иначе
			
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(1, "35");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(2, "36");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "37");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(4, "38");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(5, "39");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "40");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(7, "41");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(8, "42");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "43");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(10, "44");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(11, "45");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "46");
						
		КонецЕсли;
						
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = СоответствиеНомераМесяцаКодуОтчетногоПериода[Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
		ПолеТабличногоДокументаТитульный.Области.Период.Значение = КодОтчетногоПериода;
	КонецЕсли; 
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
			
		СтруктураРеквизитовФормы.СтрПериодОтчета = РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Ложь");
			
	Иначе
			
		СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
			
	КонецЕсли;
	  	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
	
КонецПроцедуры // ПоказатьПериод()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте()
//
&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере()
//
&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу()
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)

	Возврат;
	
КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу()

// ЗаполнениеЗначенийВКвадратикахНаКлиенте()
//
&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ЗаполнениеЗначенийВКвадратикахНаКлиенте()

// ЗаполнениеЗначенийВКвадратикахНаСервере()
//
&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры // ЗаполнениеЗначенийВКвадратикахНаСервере()

// ЗаполнениеЗначенийВКвадратиках()
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
КонецПроцедуры // Обновить()

// ПолучитьСтавкаНалога
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьСтавкиНалога(Форма, ИмяТекущегоРаздела)

	Перем СтавкаПрибФед;
	Перем СтавкаПрибРесп;

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "СтавкаПрибФед");  // Ставка прибыль федеральный бюджет
	Сведения.Добавить("", "СтавкаПрибРесп");  // Ставка прибыль респ. бюджет

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Сведения);
	
	СтавкаПрибФед = 0;
	СтавкаПрибРесп = 0;

	ОргСведения.Свойство("СтавкаПрибФед", СтавкаПрибФед);
	ОргСведения.Свойство("СтавкаПрибРесп", СтавкаПрибРесп);

	АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			
	Если АктивныеСтраницы.Количество() > 0 Тогда
		
		АктивнаяСтраница = АктивныеСтраницы[0];
		
	ИначеЕсли Форма.ТаблицаСтраницыЛист02.Количество() > 0 Тогда
		
		АктивнаяСтраница = Форма.ТаблицаСтраницыЛист02[0];
		
	Иначе
		
		Возврат;
		
	КонецЕсли; 
		
	ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
	
	ДанныеСтраницы.П002000015003 = СтавкаПрибФед;
	ДанныеСтраницы.П002000016003 = СтавкаПрибРесп;
	Если ИмяТекущегоРаздела = "Лист02" Тогда
		Форма.ТабличныйДокумент.Области.П002000015003.Значение = СтавкаПрибФед;
		Форма.ТабличныйДокумент.Области.П002000016003.Значение = СтавкаПрибРесп;
	КонецЕсли; 
	
	Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ДанныеСтраницы.П002000014003 = СтавкаПрибФед + СтавкаПрибРесп + ДанныеСтраницы.П002000017003;
		Если ИмяТекущегоРаздела = "Лист02" Тогда
			Форма.ТабличныйДокумент.Области.П002000014003.Значение = СтавкаПрибФед + СтавкаПрибРесп + Форма.ТабличныйДокумент.Области.П002000017003.Значение;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПолучитьСтавкаНалога

&НаСервере
Процедура СформироватьРазделы11И12(ИмяТекущегоРаздела)
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	СписокПрПлЭкземпляровРаздела = Новый СписокЗначений; // список признаков плательщиков экземпляров раздела
	СписокПризнаковРаздела1_2_9мес = Новый Массив;       // массив сочетаний значений показателей признака плательщика и кода квартала для 9 месяцев
	СписокПризнаковРаздела1_2_11мес = Новый Массив;      // массив сочетаний значений показателей признака плательщика и кода квартала для 11 месяцев
	
	Если ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02",Новый Структура("П002000000100", "1"))
	 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02",Новый Структура("П002000000100", "3")) 
	 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_Прил5",Новый Структура("П002050000100", "1"))
	 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_Прил5",Новый Структура("П002050000100", "3")) Тогда
		СписокПрПлЭкземпляровРаздела.Добавить("1");
		Если АвансовыеПлатежиРазличаются("1,3") Тогда
			СписокПризнаковРаздела1_2_9мес.Добавить(Новый Структура("ПризнакПлательщика, КодКвартала", "1", "21"));
			СписокПризнаковРаздела1_2_9мес.Добавить(Новый Структура("ПризнакПлательщика, КодКвартала", "1", "24"));
		Иначе
			СписокПризнаковРаздела1_2_9мес.Добавить(Новый Структура("ПризнакПлательщика, КодКвартала", "1", ""));
		Конецесли;
		СписокПризнаковРаздела1_2_11мес.Добавить(Новый Структура("ПризнакПлательщика, КодКвартала", "1", "21"));
	КонецЕсли;
	
	Если ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02",Новый Структура("П002000000100", "2")) 
	 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_Прил5",Новый Структура("П002050000100", "2")) Тогда
		СписокПрПлЭкземпляровРаздела.Добавить("2");
		Если АвансовыеПлатежиРазличаются("2") Тогда
			СписокПризнаковРаздела1_2_9мес.Добавить(Новый Структура("ПризнакПлательщика, КодКвартала", "2", "21"));
			СписокПризнаковРаздела1_2_9мес.Добавить(Новый Структура("ПризнакПлательщика, КодКвартала", "2", "24"));
		Иначе
			СписокПризнаковРаздела1_2_9мес.Добавить(Новый Структура("ПризнакПлательщика, КодКвартала", "2", ""));
		Конецесли;
		СписокПризнаковРаздела1_2_11мес.Добавить(Новый Структура("ПризнакПлательщика, КодКвартала", "2", "21"));
	КонецЕсли;
	
	//поскольку в процессе формирования изменяется СписокПрПлЭкземпляровРаздела, в виде параметра назначается его копия
	ОчисткаИФормированиеРаздела("Раздел1_1", СписокПрПлЭкземпляровРаздела.Скопировать());
	
	// Подраздел 1.2. заполняется только за отчетный период (1 квартал, полугодие, 9 месяцев)
	// также допускается заполнение раздела за период 11 месяцев
	Если НомерМесяца = 3 ИЛИ НомерМесяца = 6 Тогда
		
		ОчисткаИФормированиеРаздела("Раздел1_2", СписокПрПлЭкземпляровРаздела.Скопировать());
		
	ИначеЕсли НомерМесяца = 9 И СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал Тогда
		
		ОчисткаИФормированиеРаздела1_2(СписокПризнаковРаздела1_2_9мес);
		
	ИначеЕсли НомерМесяца = 11 И СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц Тогда
		
		ОчисткаИФормированиеРаздела1_2(СписокПризнаковРаздела1_2_11мес);
		
	Иначе
		
		Если ИмяТекущегоРаздела = "Раздел1_2" Тогда
			
			ОчиститьТабличноеПолеСпец("Раздел1_2");
			//процедура ОчиститьТабличноеПоле не очищает защищенные ячейки
			//доп. очистка защищеннорй ячейки ПрПл
			ТабличныйДокумент.Области["П000120000100"].Значение = "";
			//после очистки активной страницы необходимо записать данные в структуру
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1_2", Ложь);
			
		Иначе	
			
			АктивныеСтраницы = ТаблицаСтраницыРаздел1_2.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			
			Если АктивныеСтраницы.Количество() > 0 Тогда
				АктивнаяСтраница = АктивныеСтраницы[0];
			Иначе
				АктивнаяСтраница = ТаблицаСтраницыРаздел1_2[0];
			КонецЕсли;
			
			ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
			
			Для каждого ЭлементДанных Из ДанныеСтраницы Цикл
				Если ДанныеСтраницы[ЭлементДанных.Ключ] <> Неопределено Тогда
					ДанныеСтраницы[ЭлементДанных.Ключ] = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(ДанныеСтраницы[ЭлементДанных.Ключ]));
				КонецЕсли;
			КонецЦикла; 
			
			ПолучитьСтавкиНалога(ЭтаФорма, ИмяТекущегоРаздела);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АвансовыеПлатежиРазличаются(ПризнакиПлательщика)
	
	Перем ТаблицаРаздела;
	
	МассивПризнаковПлательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПризнакиПлательщика, ",");
	Для Инд = 0 По МассивПризнаковПлательщика.ВГраница() Цикл
		МассивПризнаковПлательщика[Инд] = СокрЛП(МассивПризнаковПлательщика[Инд]);
	КонецЦикла;
	
	ИмяРаздела = "Лист02";
	ЭтаФорма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = ЭтаФорма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			
			Если ТаблицаРаздела[Инд].АктивнаяСтраница И ЭтаФорма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				ПризнакПлательщика = СокрЛП(ЭтаФорма.ТабличныйДокумент.Области.П002000000100.Значение);
				ЗначениеСтроки290 = ЭтаФорма.ТабличныйДокумент.Области.П002000029003.Значение;
				ЗначениеСтроки320 = ЭтаФорма.ТабличныйДокумент.Области.П002000032003.Значение;
			Иначе
				СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
				ПризнакПлательщика = СтраницаДанные.П002000000100;
				ЗначениеСтроки290 = СтраницаДанные.П002000029003;
				ЗначениеСтроки320 = СтраницаДанные.П002000032003;
			КонецЕсли;
			
			ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
			Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
				Продолжить;
			КонецЕсли;
			
			ВводПоказателейЗавершен = (ЗначениеСтроки290 <> 0 И ЗначениеСтроки320 <> 0);
			ЗначенияРазличаются		= (ЗначениеСтроки290 <> ЗначениеСтроки320);
			
			Если ВводПоказателейЗавершен И ЗначенияРазличаются Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ИмяРаздела = "Лист02_Прил5";
	ЭтаФорма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = ЭтаФорма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			
			СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
			Если СтраницаДанные <> Неопределено Тогда
				
				ПризнакПлательщика = СтраницаДанные.П002050000100;
				ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
				Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеСтроки120 = СтраницаДанные.П002050012003;
				ЗначениеСтроки121 = СтраницаДанные.П002050012103;
				
				ВводПоказателейЗавершен = (ЗначениеСтроки120 <> 0 И ЗначениеСтроки121 <> 0);
				ЗначенияРазличаются		= (ЗначениеСтроки120 <> ЗначениеСтроки121);
				
				Если ВводПоказателейЗавершен И ЗначенияРазличаются Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаСервере
Процедура ОчиститьТабличноеПолеСпец(ИмяТекущегоРаздела, ОбновитьСтавки = Истина) Экспорт
	
	Если ИмяТекущегоРаздела = "Лист02" И НЕ ОбновитьСтавки Тогда
		//сохраним старые значения
		П002000015003 = ТабличныйДокумент.Области.П002000015003.Значение;
		П002000016003 = ТабличныйДокумент.Области.П002000016003.Значение;
	КонецЕсли;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ЦветФона = СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(ЭтаФорма, ИмяТекущегоРаздела);
	
	СохранитьДанныеРаздела(ИмяТекущегоРаздела, Истина, Ложь);
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ТабличныйДокумент.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТекущегоРаздела = "Лист02" Тогда
		Если ОбновитьСтавки Тогда
			ПолучитьСтавкиНалога(ЭтаФорма, "Лист02");
		Иначе
			//восстановим старые значения
			ТабличныйДокумент.Области.П002000015003.Значение = П002000015003;
			ТабличныйДокумент.Области.П002000016003.Значение = П002000016003;
		КонецЕсли;
	КонецЕсли;
	
	//Обнуление по условию строки 230 на листе 02
	Если ИмяТекущегоРаздела = "Лист02_Прил5" Тогда
		
		Если Не СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002050005003");
		КонецЕсли;
		
		АктивныеСтраницыПрил5 = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_Прил5"]].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивныеСтраницыПрил5.Количество() > 0 Тогда
			ДанныеПрил5Список = АктивныеСтраницыПрил5[0].Данные;
			ДанныеПрил5 = ДанныеПрил5Список[0].Значение;
			Если ДанныеПрил5 <> Неопределено Тогда
				ДанныеПрил5.П002050000100 = "";
				ДанныеПрил5Список[0].Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_Прил5", Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 И НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ТаблицаРаздела  = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02"]];
			Для каждого СтраницаТаблицыРаздела Из ТаблицаРаздела Цикл
				ДанныеСтраницыСписок = СтраницаТаблицыРаздела.Данные;
				ДанныеСтраницы = ДанныеСтраницыСписок[0].Значение;
				ДанныеСтраницы.П002000023003 = 0;
				ДанныеСтраницыСписок[0].Пометка = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОчиститьТабличноеПоле()

&НаСервере
Процедура ОчисткаИФормированиеРаздела(ИмяРаздела, СписокПрПлЭкземпляровРаздела)
	
	Перем ТаблицаСтраницРаздела;
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ТабДок = ТабличныйДокумент;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КодПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		КодПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли; 
	
	Если ИмяРаздела = "Раздел1_1" Тогда
		
		ИмяПрПл  = "П000110000100";
		ИмяОКАТО = "П000110001003";
		ИмяКБК1  = "П000110003003";
		ИмяКБК2  = "П000110006003";
		
	ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда
		
		ИмяПрПл  = "П000120000100";
		ИмяОКАТО = "П000120001003";
		ИмяКБК1  = "П000120011003";
		ИмяКБК2  = "П000120021003";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	//перебор существующих экземпляров раздела (с конца - для возможности корректного удаления)
	//если экземпляра с текущим значением ПрПл не должно существовать, 
	//тогда он либо удаляется (если не является активной страницей), либо очищается
	//если экземпляра с текущим значением ПрПл должен существовать, 
	//тогда страница остается без изменений, а текущее значение ПрПл удаляется из списка
	КоличествоСтраниц = ТаблицаСтраницРаздела.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтраниц Цикл
		Инд = КоличествоСтраниц - ОбратныйИндекс;
		СтрокаТаблицы = ТаблицаСтраницРаздела[Инд];
		ДанныеСтраницы = СтрокаТаблицы.Данные[0].Значение;
		ПрПл = ДанныеСтраницы[ИмяПрПл];
		НайденныйПрПл = СписокПрПлЭкземпляровРаздела.НайтиПоЗначению(ПрПл);
		Если НайденныйПрПл = Неопределено Тогда
			Если СтрокаТаблицы.АктивнаяСтраница ИЛИ ТаблицаСтраницРаздела.Количество() = 1 Тогда
				//Если это не единственный экземпляр раздела - удаляется с предварительной сменой активности, если нет - очищается.
				Если ТаблицаСтраницРаздела.Количество() > 1 Тогда
					Для каждого ТаблицаСтраницы Из ТаблицаСтраницРаздела Цикл
						ТаблицаСтраницы.АктивнаяСтраница = Ложь;
					КонецЦикла;
					ТаблицаСтраницРаздела[?(Инд = 0, 0, Инд-1)].АктивнаяСтраница = Истина;
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
				Иначе
					ДанныеСтраницы = СтрокаТаблицы.Данные[0].Значение;
					Для каждого ЭлементДанных Из ДанныеСтраницы Цикл
						Если ЭлементДанных.Значение <> Неопределено Тогда
							ДанныеСтраницы[ЭлементДанных.Ключ] = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(ЭлементДанных.Значение));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
			КонецЕсли
		Иначе
			//удаление из списка найденного ПрПл
			СписокПрПлЭкземпляровРаздела.Удалить(НайденныйПрПл);
		КонецЕсли;
	КонецЦикла;
	
	//оставшиеся в списке ПрПл значения распределяются по существующим экземплярам с незаполненным ПрПл, 
	//а в случае отсутствия таковых, по вставляемым дополнительно экземплярам 
	Для каждого ПрПлРаздела Из СписокПрПлЭкземпляровРаздела Цикл
		ПрПлУстановлен = Ложь;
		Для каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл
			ДанныеСтраницы = СтрокаТаблицы.Данные[0].Значение;
			ПрПл = ДанныеСтраницы[ИмяПрПл];
			Если НЕ ЗначениеЗаполнено(ПрПл) Тогда
				ДанныеСтраницы[ИмяПрПл] = ПрПлРаздела.Значение;
				Если КодПоМесту <> "218" Тогда
					ДанныеСтраницы[ИмяОкато] = СтруктураРеквизитовФормы.ОКАТОДляРазделов;
					Если ДанныеСтраницы[ИмяПрПл] = "1" Тогда
						ДанныеСтраницы[ИмяКБК1] = "18210101011011000110";
						ДанныеСтраницы[ИмяКБК2] = "18210101012021000110";
					ИначеЕсли ДанныеСтраницы[ИмяПрПл] = "2" Тогда
						ДанныеСтраницы[ИмяКБК1] = "18210101013011000110";
						ДанныеСтраницы[ИмяКБК2] = "18210101014021000110";
					КонецЕсли;
				КонецЕсли;
				//после записи в структуре необходимо отобразить в табл. док-те для активной страницы
				Если СтрокаТаблицы.АктивнаяСтраница Тогда
					Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
						ТабДок.Области[ИмяПрПл].Значение = ДанныеСтраницы[ИмяПрПл];
						ТабДок.Области[ИмяОКАТО].Значение = ДанныеСтраницы[ИмяОКАТО];
						ТабДок.Области[ИмяКБК1].Значение = ДанныеСтраницы[ИмяКБК1];
						ТабДок.Области[ИмяКБК2].Значение = ДанныеСтраницы[ИмяКБК2];
					КонецЕсли; 
				КонецЕсли;
				ПрПлУстановлен = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ПрПлУстановлен Тогда
			// Добавляем новую страницу
			// Снимаем признак активной страницы
			АктивныеСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Для каждого АктивнаяСтраница Из АктивныеСтраницы Цикл
				АктивнаяСтраница.АктивнаяСтраница = Ложь;
			КонецЦикла; 
			СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
			// Присваиваем представление по умолчанию
			СтрНоваяСтраница.Представление      = "Новая страница";
			СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
			// Ставим признак активной страницы
			СтрНоваяСтраница.АктивнаяСтраница   = Истина;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанныхЭталон = ТаблицаСтраницРаздела[0].Данные[0].Значение;
			Для каждого ЭлементСтруктуры Из СтруктураДанныхЭталон Цикл
				Если ЭлементСтруктуры.Значение <> Неопределено Тогда
					СтруктураДанных.Вставить(ЭлементСтруктуры.Ключ, РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(ЭлементСтруктуры.Значение)));
				КонецЕсли;
			КонецЦикла;
			СтруктураДанных.Вставить(ИмяПрПл, ПрПлРаздела.Значение);
			
			СтрНоваяСтраница.Данные.Добавить(СтруктураДанных);
			
			Модифицированность = Истина;
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				ТабДок.Области[ИмяПрПл].Значение = ПрПлРаздела.Значение;
				Если КодПоМесту <> "218" Тогда
					ТабДок.Области[ИмяОКАТО].Значение = СтруктураРеквизитовФормы.ОКАТОДляРазделов;
					Если ТабДок.Области[ИмяПрПл].Значение = "1" Тогда
						ТабДок.Области[ИмяКБК1].Значение = "18210101011011000110";
						ТабДок.Области[ИмяКБК2].Значение = "18210101012021000110";
					ИначеЕсли ТабДок.Области[ИмяПрПл].Значение = "2" Тогда
						ТабДок.Области[ИмяКБК1].Значение = "18210101013011000110";
						ТабДок.Области[ИмяКБК2].Значение = "18210101014021000110";
					КонецЕсли;
				КонецЕсли;
				//после отображения в табл. док-те для новой страницы необходимо записать данные в структуру
				РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяРаздела, Ложь);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОчисткаИФормированиеРаздела()

// Заполнение страниц раздела 1.2 по набору сочетаний признака плательщика и кода квартала
//
// Параметры
//  МассивСочетаний  - массив со структурами <ПризнакПлательщика, КодКвартала>
//				в массиве задаются все требуемые сочетания, на основании которых должны формироваться
//				страницы раздела 1.2
//
&НаСервере
Процедура ОчисткаИФормированиеРаздела1_2(МассивСочетаний)

	Перем ТаблицаСтраницРаздела;
	
	ИмяРаздела = "Раздел1_2";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КодПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		КодПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли; 
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// преобразуем массив структур в таблицу значений для удобства поиска
	ТаблицаСочетаний = Новый ТаблицаЗначений;
	ТаблицаСочетаний.Колонки.Добавить("ПризнакПлательщика");
	ТаблицаСочетаний.Колонки.Добавить("КодКвартала");
	ТаблицаСочетаний.Колонки.Добавить("НужноСоздать", Новый ОписаниеТипов("Булево"));
	Для Каждого Сочетание Из МассивСочетаний Цикл
		СтрокаСочетания = ТаблицаСочетаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСочетания, Сочетание);
	КонецЦикла;
	// По умолчанию предполагаем что  в разделе нужно будет создавать все сочетания.
	// Если при анализе имеющихся страниц обнаружим, что требуемое сочетание есть, то очистим флаг
	ТаблицаСочетаний.ЗаполнитьЗначения(Истина, "НужноСоздать"); 
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ТабДок = ЭтаФорма["ТабличныйДокумент"];

	ИмяПризнакаПлательщика = "П000120000100";
	ИмяКодаКвартала = "П000120000200";
	ИмяОКАТО = "П000120001003";
	ИмяКБК1 = "П000120011003";
	ИмяКБК2 = "П000120021003";
	
	// Перебор существующих экземпляров раздела (с конца - для возможности корректного удаления).
	// Если экземпляра с текущим значением Признака плательщики и Кода квартала не должно существовать, 
	// тогда он либо удаляется (если не является активной страницей), либо очищается.
	КоличествоСтраниц = ТаблицаСтраницРаздела.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтраниц Цикл
		Инд = КоличествоСтраниц - ОбратныйИндекс;
		СтрокаТаблицы = ТаблицаСтраницРаздела[Инд];
		ДанныеСтраницы = СтрокаТаблицы.Данные[0].Значение;
		ПризнакПлательщика = ДанныеСтраницы[ИмяПризнакаПлательщика];
		КодКвартала = ДанныеСтраницы[ИмяКодаКвартала];
		НайденныеСочетания = ТаблицаСочетаний.НайтиСтроки(Новый Структура("ПризнакПлательщика, КодКвартала", ПризнакПлательщика, КодКвартала));
		Если НайденныеСочетания.Количество() <> 0 Тогда
			// страница должна существовать
			Для Каждого НайденноеСочетание Из НайденныеСочетания Цикл
				НайденноеСочетание.НужноСоздать = Ложь;
			КонецЦикла;
		Иначе
			// удаляем страницу
			Если СтрокаТаблицы.АктивнаяСтраница ИЛИ ТаблицаСтраницРаздела.Количество() = 1 Тогда
				//Если это не единственный экземпляр раздела - удаляется с предварительной сменой активности, если нет - очищается.
				Если ТаблицаСтраницРаздела.Количество() > 1 Тогда
					Для каждого ТаблицаСтраницы Из ТаблицаСтраницРаздела Цикл
						ТаблицаСтраницы.АктивнаяСтраница = Ложь;
					КонецЦикла;
					ТаблицаСтраницРаздела[?(Инд = 0, 0, Инд-1)].АктивнаяСтраница = Истина;
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
				Иначе
					ДанныеСтраницы = СтрокаТаблицы.Данные[0].Значение;
					Для каждого ЭлементДанных Из ДанныеСтраницы Цикл
						Если ЭлементДанных.Значение <> Неопределено Тогда
							ДанныеСтраницы[ЭлементДанных.Ключ]
								= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(ЭлементДанных.Значение));
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
			Иначе
				ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
			КонецЕсли
		КонецЕсли;
	КонецЦикла;
	
	// Создаем нужные страницы
	Для Каждого СтрокаСочетания Из ТаблицаСочетаний Цикл
		Если СтрокаСочетания.НужноСоздать Тогда
			// ищем первый незаполненный лист
			НайденныйНезаполненныйЛист = Неопределено;
			Для Каждого СтрокаТаблицыСтраницРаздела Из ТаблицаСтраницРаздела Цикл
				ДанныеСтраницы = СтрокаТаблицыСтраницРаздела.Данные[0].Значение;
				Если Не (ЗначениеЗаполнено(ДанныеСтраницы[ИмяПризнакаПлательщика]) И ЗначениеЗаполнено(ДанныеСтраницы[ИмяКодаКвартала])) Тогда
					НайденныйНезаполненныйЛист = СтрокаТаблицыСтраницРаздела;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденныйНезаполненныйЛист = Неопределено Тогда
				// Создаем новый лист на форме и записываем его данные
				// Снимаем признак активной страницы
				АктивныеСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				Для каждого АктивнаяСтраница Из АктивныеСтраницы Цикл
					АктивнаяСтраница.АктивнаяСтраница = Ложь;
				КонецЦикла; 
				СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
				// Присваиваем представление по умолчанию
				СтрНоваяСтраница.Представление      = "Новая страница";
				СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
				// Ставим признак активной страницы
				СтрНоваяСтраница.АктивнаяСтраница   = Истина;
				
				СтруктураДанных = Новый Структура;
				СтруктураДанныхЭталон = ТаблицаСтраницРаздела[0].Данные[0].Значение;
				Для каждого ЭлементСтруктуры Из СтруктураДанныхЭталон Цикл
					Если ЭлементСтруктуры.Значение <> Неопределено Тогда
						СтруктураДанных.Вставить(ЭлементСтруктуры.Ключ, РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(
							ТипЗнч(ЭлементСтруктуры.Значение)));
					КонецЕсли;
				КонецЦикла;
				СтруктураДанных.Вставить(ИмяПризнакаПлательщика, СтрокаСочетания.ПризнакПлательщика);
				СтруктураДанных.Вставить(ИмяКодаКвартала, СтрокаСочетания.КодКвартала);
				
				СтрНоваяСтраница.Данные.Добавить(СтруктураДанных);
				
				Модифицированность = Истина;
				
				Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
					ТабДок.Области[ИмяПризнакаПлательщика].Значение = СтрокаСочетания.ПризнакПлательщика;
					ТабДок.Области[ИмяКодаКвартала].Значение = СтрокаСочетания.КодКвартала;
					Если КодПоМесту <> "218" Тогда
						ТабДок.Области[ИмяОкато].Значение = СтруктураРеквизитовФормы.ОКАТОДляРазделов;
						Если ДанныеСтраницы[ИмяПризнакаПлательщика] = "1" Тогда
							ТабДок.Области[ИмяКБК1].Значение = "18210101011011000110";
							ТабДок.Области[ИмяКБК2].Значение = "18210101012021000110";
						ИначеЕсли ДанныеСтраницы[ИмяПризнакаПлательщика] = "2" Тогда
							ТабДок.Области[ИмяКБК1].Значение = "18210101013011000110";
							ТабДок.Области[ИмяКБК2].Значение = "18210101014021000110";
						КонецЕсли;
					КонецЕсли;
					РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяРаздела, Ложь);
				КонецЕсли;
			Иначе
				// Заполняем данные листа и если необходимо - отражаем их на форме
				ДанныеСтраницы = НайденныйНезаполненныйЛист.Данные[0].Значение;
				ДанныеСтраницы[ИмяПризнакаПлательщика] = СтрокаСочетания.ПризнакПлательщика;
				ДанныеСтраницы[ИмяКодаКвартала] = СтрокаСочетания.КодКвартала;
				Если КодПоМесту <> "218" Тогда
					ДанныеСтраницы[ИмяОкато] = СтруктураРеквизитовФормы.ОКАТОДляРазделов;
					Если ДанныеСтраницы[ИмяПризнакаПлательщика] = "1" Тогда
						ДанныеСтраницы[ИмяКБК1] = "18210101011011000110";
						ДанныеСтраницы[ИмяКБК2] = "18210101012021000110";
					ИначеЕсли ДанныеСтраницы[ИмяПризнакаПлательщика] = "2" Тогда
						ДанныеСтраницы[ИмяКБК1] = "18210101013011000110";
						ДанныеСтраницы[ИмяКБК2] = "18210101014021000110";
					КонецЕсли;
				КонецЕсли;
				Если НайденныйНезаполненныйЛист.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
					ТабДок.Области[ИмяПризнакаПлательщика].Значение = ДанныеСтраницы[ИмяПризнакаПлательщика];
					ТабДок.Области[ИмяКодаКвартала].Значение = ДанныеСтраницы[ИмяКодаКвартала];
					ТабДок.Области[ИмяОКАТО].Значение = ДанныеСтраницы[ИмяОКАТО];
					ТабДок.Области[ИмяКБК1].Значение = ДанныеСтраницы[ИмяКБК1];
					ТабДок.Области[ИмяКБК2].Значение = ДанныеСтраницы[ИмяКБК2];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСтраницРаздела.Количество() > 0 Тогда
		АктивныеСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Для каждого АктивнаяСтраница Из АктивныеСтраницы Цикл
			АктивнаяСтраница.АктивнаяСтраница = Ложь;
		КонецЦикла;
		ТаблицаСтраницРаздела[0].АктивнаяСтраница = Истина;
	КонецЕсли;
	
	Если КодПоМесту <> "218" Тогда
		Для Каждого СтраницаТаблицы Из ТаблицаСтраницРаздела Цикл
			ДанныеСтраницы = СтраницаТаблицы.Данные[0].Значение;
			ДанныеСтраницы.Вставить(ИмяОкато, СтруктураРеквизитовФормы.ОКАТОДляРазделов);
			Если ДанныеСтраницы[ИмяПризнакаПлательщика] = "1" Тогда
				ДанныеСтраницы[ИмяКБК1] = "18210101011011000110";
				ДанныеСтраницы[ИмяКБК2] = "18210101012021000110";
			ИначеЕсли ДанныеСтраницы[ИмяПризнакаПлательщика] = "2" Тогда
				ДанныеСтраницы[ИмяКБК1] = "18210101013011000110";
				ДанныеСтраницы[ИмяКБК2] = "18210101014021000110";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОчисткаИФормированиеРаздела1_2()

&НаСервере
Процедура ПроставитьПрПл_1(ИмяРаздела = "")
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтрПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		СтрПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли; 
	
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	
	ИменаПрПлРаздела = Новый Структура;
	Если флЕстьОбособ Тогда
		ИменаПрПлРаздела.Вставить("Лист02_Прил5", "П002050000100");
	Иначе
		ИменаПрПлРаздела.Вставить("Лист02", "П002000000100");
		Если флКвартальноеЗаполнение Тогда
			ИменаПрПлРаздела.Вставить("Лист02_Прил1", "П002010000100");
			ИменаПрПлРаздела.Вставить("Лист02_Прил2", "П002020000100");
			ИменаПрПлРаздела.Вставить("Лист02_Прил3", "П002030000100");
		КонецЕсли; 	
	КонецЕсли;
	
	Если ИмяРаздела = "" Тогда
		Для каждого ИмяПрПл Из ИменаПрПлРаздела Цикл
			ПроставитьПрПл_1(ИмяПрПл.Ключ);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТаблДок = ТабличныйДокумент;
	ТаблицаРаздела = ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяРаздела]];
	СтруктураДанныхРаздела = ТаблицаРаздела[0].Данные[0].Значение;
	ТаблицаРаздела[0].Данные[0].Пометка = Ложь;
	СтруктураДанныхРаздела[ИменаПрПлРаздела[ИмяРаздела]] = "1";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		ТаблДок.Области[ИменаПрПлРаздела[ИмяРаздела]].Значение = "1";
	КонецЕсли;
	
КонецПроцедуры //ПроставитьПрПл_1()

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь) Экспорт

	Если ИмяСтраницыПанели = "" Тогда
		
		СформироватьРазделы11И12(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли; 
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя, АвторасчетПослеАвтозаполнения);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь) Экспорт 
	
	Если ИмяСтраницыПанели = "" Тогда
		
		СформироватьРазделы11И12(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли; 
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя, АвторасчетПослеАвтозаполнения);

КонецПроцедуры // РасчетНаСервере()

// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь)
	
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел1_1" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел1_1");
		
	ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел1_2");
		
	ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
		
		// Данный раздел не заполняется в автоматическом режиме.
		
	ИначеЕсли ИмяРаздела = "Лист02" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02", , АвторасчетПослеАвтозаполнения);
		
	ИначеЕсли ИмяРаздела = "Лист02_Прил1" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_Прил1");
		
	ИначеЕсли ИмяРаздела = "Лист02_Прил2" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_Прил2");
		
	ИначеЕсли ИмяРаздела = "Лист02_Прил3" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_Прил3");
		
	ИначеЕсли ИмяРаздела = "Лист02_Прил4" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_Прил4");
		
	ИначеЕсли ИмяРаздела = "Лист02_Прил5" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_Прил5");
		
	ИначеЕсли ИмяРаздела = "Лист03" Тогда
		
		РасчетВСтруктуре(Форма, "Лист03");
		
	ИначеЕсли ИмяРаздела = "Лист03Продолжение" Тогда
		
		РасчетВСтруктуре(Форма, "Лист03Продолжение");
		
	ИначеЕсли ИмяРаздела = "Лист04" Тогда
		
		РасчетВСтруктуре(Форма, "Лист04");	
		
	ИначеЕсли ИмяРаздела = "Лист05" Тогда
		
		РасчетВСтруктуре(Форма, "Лист05");
		
	ИначеЕсли ИмяРаздела = "Лист06" Тогда
		
		//стр.010 = стр.020+ стр.030  + стр.040 + стр.050 + стр.060 + стр.070 + стр.080 + стр.090 + стр.100 +  стр.110;
		Форма.СтруктураДанныхЛист06.П002110001003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110002003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110003003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110004003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110005003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110006003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110007003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110008003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110009003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110010003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110011003);
		
		//стр.190 = стр.200 + стр.210 +стр.220
		Форма.СтруктураДанныхЛист06.П002110019003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110020003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110021003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110022003);
		
		//стр.240 = стр.250 + стр.260 + стр.270 + стр.280 + стр.290 + стр.300 + стр.310 + стр.320
		Форма.СтруктураДанныхЛист06.П002110024003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110025003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110026003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110027003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110028003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110029003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110030003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110031003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110032003);
		
		//стр.330 = стр.020  +  стр.030 - стр.140 - стр.200 - стр.250
		Форма.СтруктураДанныхЛист06.П002110033003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110002003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110003003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110014003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110020003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110025003);
		
		//стр.350 = стр.040 + стр.050 - стр.150 - стр.210 - стр.260
		Форма.СтруктураДанныхЛист06.П002110035003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110004003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110005003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110015003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110021003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110026003);
		
		//стр.370 = макс(стр.060 - стр.160 - стр.270, 0)
		Форма.СтруктураДанныхЛист06.П002110037003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110006003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110016003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110027003), 0);
		
		//стр.380 = макс(стр.070 - стр.170 - стр.280, 0)
		Форма.СтруктураДанныхЛист06.П002110038003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110007003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110017003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110028003), 0);
		
		//стр.390 = стр.110 - стр.180 - стр.220 - стр.320
		Форма.СтруктураДанныхЛист06.П002110039003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110011003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110018003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110022003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110032003);
		
		//стр.410 = макс(стр.330 - стр.340, 0)
		Форма.СтруктураДанныхЛист06.П002110041003 =   Макс(Форма.СтруктураДанныхЛист06.П002110033003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110034003), 0);
		
		//стр.440 = макс(стр.420 - стр.430, 0)
		Форма.СтруктураДанныхЛист06.П002110044003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110042003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110043003), 0);
		
		//стр.450 = макс(стр.350 - стр.360, 0)
		Форма.СтруктураДанныхЛист06.П002110045003 =   Макс(Форма.СтруктураДанныхЛист06.П002110035003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110036003), 0);
		
		//стр.480 = макс(стр.460 - стр.470, 0)
		Форма.СтруктураДанныхЛист06.П002110048003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110046003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110047003), 0);
		
		//стр.490 = макс(стр.390 - стр.400, 0)
		Форма.СтруктураДанныхЛист06.П002110049003 =   Макс(Форма.СтруктураДанныхЛист06.П002110039003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110040003), 0);
		
		//стр.520 = макс(стр.500 - стр.510, 0)
		Форма.СтруктураДанныхЛист06.П002110052003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110050003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110051003), 0);
		
		//стр.530 = макс(стр.410 - стр.430 + стр.450 - стр.470 + стр.490 - стр.510, 0)
		Форма.СтруктураДанныхЛист06.П002110053003 =   Макс(Форма.СтруктураДанныхЛист06.П002110041003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110043003), 0)
													+ Макс(Форма.СтруктураДанныхЛист06.П002110045003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110047003), 0)
													+ Макс(Форма.СтруктураДанныхЛист06.П002110049003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110051003), 0);
																
																
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Форма.ТабличныйДокумент.Области.П002110001003.Значение = Форма.СтруктураДанныхЛист06.П002110001003;
			Форма.ТабличныйДокумент.Области.П002110019003.Значение = Форма.СтруктураДанныхЛист06.П002110019003;
			Форма.ТабличныйДокумент.Области.П002110024003.Значение = Форма.СтруктураДанныхЛист06.П002110024003;
			Форма.ТабличныйДокумент.Области.П002110033003.Значение = Форма.СтруктураДанныхЛист06.П002110033003;
			Форма.ТабличныйДокумент.Области.П002110035003.Значение = Форма.СтруктураДанныхЛист06.П002110035003;
			Форма.ТабличныйДокумент.Области.П002110037003.Значение = Форма.СтруктураДанныхЛист06.П002110037003;
			Форма.ТабличныйДокумент.Области.П002110038003.Значение = Форма.СтруктураДанныхЛист06.П002110038003;
			Форма.ТабличныйДокумент.Области.П002110039003.Значение = Форма.СтруктураДанныхЛист06.П002110039003;
			Форма.ТабличныйДокумент.Области.П002110041003.Значение = Форма.СтруктураДанныхЛист06.П002110041003;
			Форма.ТабличныйДокумент.Области.П002110044003.Значение = Форма.СтруктураДанныхЛист06.П002110044003;
			Форма.ТабличныйДокумент.Области.П002110045003.Значение = Форма.СтруктураДанныхЛист06.П002110045003;
			Форма.ТабличныйДокумент.Области.П002110048003.Значение = Форма.СтруктураДанныхЛист06.П002110048003;
			Форма.ТабличныйДокумент.Области.П002110049003.Значение = Форма.СтруктураДанныхЛист06.П002110049003;
			Форма.ТабличныйДокумент.Области.П002110052003.Значение = Форма.СтруктураДанныхЛист06.П002110052003;
			Форма.ТабличныйДокумент.Области.П002110053003.Значение = Форма.СтруктураДанныхЛист06.П002110053003;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист07" Тогда
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		Колонка3 = 0;
		Колонка4 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		
		Для каждого Зап Из ТаблицаБлока Цикл
			
			НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
			
			//заполнение итогов по строке в структуре многострочного раздела
			П002120001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П002120001003);
			П002120001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П002120001004);
			П002120001006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П002120001006);
			
			Зап.П002120001007 = П002120001003 - П002120001004 - П002120001006;
			П002120001007 = Зап.П002120001007;
			
			//заполнение итогов по строке в табличном документе
			Если (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела) И (НомерСтроки = Сред(ОбластьИмя, 15)) Тогда
				Форма.ТабличныйДокумент.Области.Найти("П002120001007_" + НомерСтроки).Значение = П002120001007;
			КонецЕсли;
			
			//аккумулирование общих итогов
			Колонка3 = Колонка3 + П002120001003;
			Колонка4 = Колонка4 + П002120001004;
			Колонка6 = Колонка6 + П002120001006;
			Колонка7 = Колонка7 + П002120001007;
			
		КонецЦикла;
		
		Форма.СтруктураДанныхЛист07.П002120002003 = Колонка3;
		Форма.СтруктураДанныхЛист07.П002120002004 = Колонка4;
		Форма.СтруктураДанныхЛист07.П002120002006 = Колонка6;
		Форма.СтруктураДанныхЛист07.П002120002007 = Колонка7;
		
		//заполнение общих итогов в табличном документе
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		
			Форма.ТабличныйДокумент.Области.П002120002003.Значение = Колонка3;
			Форма.ТабличныйДокумент.Области.П002120002004.Значение = Колонка4;
			Форма.ТабличныйДокумент.Области.П002120002006.Значение = Колонка6;
			Форма.ТабличныйДокумент.Области.П002120002007.Значение = Колонка7;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		// В этом режиме перерассчитаем все показатели на листах в обратном порядке.
		
		Расчет(Форма, "Лист07");
		Расчет(Форма, "Лист06");
		Расчет(Форма, "Лист05");
		Расчет(Форма, "Лист04");
		Расчет(Форма, "Лист03Продолжение");
		Расчет(Форма, "Лист03");
		Расчет(Форма, "Лист02_Прил5");
		Расчет(Форма, "Лист02_Прил4");
		Расчет(Форма, "Лист02_Прил3");
		Расчет(Форма, "Лист02_Прил2");
		Расчет(Форма, "Лист02_Прил1");
		Расчет(Форма, "Лист02", , АвторасчетПослеАвтозаполнения);
		Расчет(Форма, "Лист02_Прил4");
		Расчет(Форма, "Лист02_Прил5");
		Расчет(Форма, "Лист02", , АвторасчетПослеАвтозаполнения);
		Расчет(Форма, "Раздел1_2");
		Расчет(Форма, "Раздел1_1");
		
		Форма.СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Ложь; //Если Истина - рассчитываем при переходах, сохранении, печати.
	 
	КонецЕсли;
	
КонецПроцедуры // Расчет()

// РасчетВСтруктуре
// Параметры:
//  ИмяЛиста              - Имя листа.
//  РассчитатьСПризнакомСх - Какой из листов нужно перерассчитывать, с признаком с/х или без. Булево.
//
&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста, ИмяПоказателя="", АвторасчетПослеАвтозаполнения = Ложь)
	                                                      
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ИмяЛиста];
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	
	//Значения показателей
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "ПоМесту");
		КодПериодаСдачиОтчетности = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "Период");
	Иначе
		ПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
		КодПериодаСдачиОтчетности = Форма.СтруктураДанныхТитульный.Период;
	КонецЕсли; 
	
	//вспомогательные переменные
	флЕстьОбособ = ?(ПоМесту = "220" ИЛИ ПоМесту = "223" ИЛИ ПоМесту = "224", Истина, Ложь);
	
	НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	флНалоговыйПериод = (НомерМесяца = 12);
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Страница.Данные[0].Пометка = Ложь; //Для инициализации обмена с сервером
		
		Если ИмяЛиста = "Раздел1_1" Тогда
			
			ПрПлРаздел1_1 = Данные.П000110000100;
			
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлРаздел1_1);
			услПрПл_3_Лист02 = Новый Структура("П002000000100", "3");
			услПрПлЛист02_Прил5 = Новый Структура("П002050000100", ПрПлРаздел1_1);
			услПрПл_3_Лист02_Прил5 = Новый Структура("П002050000100", "3");
			
			услПрПл_Расчет_1_Прил5 = Новый Структура("П002050000100,П002050001000", ПрПлРаздел1_1, "1");
			
			услПрПл3_Расчет_1_Прил5 = Новый Структура("П002050000100,П002050001000", "3", "1");
			
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5", Новый Структура("П002050000100"));
			Есть_Лист02_ПрПл3 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02", Новый Структура("П002000000100", "3"));
			
			Есть_Прил5_ПрПл_Расчет_1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5", услПрПл_Расчет_1_Прил5);
			Есть_Прил5_ПрПл3_Расчет_1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5", услПрПл3_Расчет_1_Прил5);
			
			Если ПрПлРаздел1_1 = "2" Тогда
				//а) (Для стр. с ПризнакПлательщика = 2)

				Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027003", Истина, услПрПлЛист02), 0);
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028003", Истина, услПрПлЛист02), 0);
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027103", Истина, услПрПлЛист02), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028103", Истина, услПрПлЛист02), 0);
					
				ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
					
					//Некорректно заполненная декларация
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					Данные.П000110007003 = 0;
					Данные.П000110008003 = 0;
					
				ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для ОП
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);

				ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если есть Прил.5 к Лист 02, декларация для головной организации
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, услПрПлЛист02)
										 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, услПрПлЛист02), 0);
					
					Если Есть_Прил5_ПрПл_Расчет_1 Тогда
						Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПл_Расчет_1_Прил5), 0);
						Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПл_Расчет_1_Прил5), 0);
					Иначе
						Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
						Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ПрПлРаздел1_1 = "1" И Есть_Лист02_ПрПл3 Тогда
				//б) (Для стр. с ПризнакПлательщика = 1, если есть Лист 02  с ПризнакПлательщика = 3)
				
				Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027003", Истина, услПрПл_3_Лист02), 0);
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028003", Истина, услПрПл_3_Лист02), 0);
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027103", Истина, услПрПл_3_Лист02), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028103", Истина, услПрПл_3_Лист02), 0);
					
				ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
					
					//Некорректно заполненная декларация
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					Данные.П000110007003 = 0;
					Данные.П000110008003 = 0;
					
				ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для ОП
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0)
										 + Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПл_3_Лист02_Прил5), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0)
										 + Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПл_3_Лист02_Прил5), 0);
					
				ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для головной организации
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, услПрПл_3_Лист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, услПрПл_3_Лист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, услПрПл_3_Лист02), 0);
					
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, услПрПл_3_Лист02)
										 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, услПрПл_3_Лист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, услПрПл_3_Лист02), 0);
					
					
					Если Есть_Прил5_ПрПл_Расчет_1 Тогда
						ПервоеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПл_Расчет_1_Прил5), 0);
						ПервоеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПл_Расчет_1_Прил5), 0);
					Иначе
						ПервоеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
						ПервоеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);
					КонецЕсли;
					
					Если Есть_Прил5_ПрПл3_Расчет_1 Тогда
						ВтороеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПл3_Расчет_1_Прил5), 0);
						ВтороеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПл3_Расчет_1_Прил5), 0);
					Иначе
						ВтороеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПл_3_Лист02_Прил5), 0);
						ВтороеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПл_3_Лист02_Прил5), 0);
					КонецЕсли;
					
					Данные.П000110007003 = ПервоеСлагаемое_70 + ВтороеСлагаемое_70;
					Данные.П000110008003 = ПервоеСлагаемое_80 + ВтороеСлагаемое_80;
					
				КонецЕсли;
				
			ИначеЕсли ПрПлРаздел1_1 = "1" И НЕ Есть_Лист02_ПрПл3 Тогда
				//в) (Для стр. с ПризнакПлательщика = 1, если нет Лист 02  с ПризнакПлательщика = 3)

			    Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, услПрПлЛист02)
										 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000020003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000023003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000026003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000023003", Истина, услПрПлЛист02)
										 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000026003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000020003", Истина, услПрПлЛист02), 0);
					
				ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
					//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
					
					//Некорректно заполненная декларация
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					Данные.П000110007003 = 0;
					Данные.П000110008003 = 0;
					
				ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для ОП
					Данные.П000110004003 = 0;
					Данные.П000110005003 = 0;
					
					Данные.П000110007003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
					Данные.П000110008003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);
					
				ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
					
					//Если есть Прил.5 к Лист 02, декларация для головной организации
					
					Данные.П000110004003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, услПрПлЛист02), 0);
					
					Данные.П000110005003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, услПрПлЛист02)
										 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, услПрПлЛист02)
										 - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, услПрПлЛист02), 0);
					
					
					Если Есть_Прил5_ПрПл_Расчет_1 Тогда
						ПервоеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПл_Расчет_1_Прил5), 0);
						ПервоеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПл_Расчет_1_Прил5), 0);
					Иначе
						ПервоеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПлЛист02_Прил5), 0);
						ПервоеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПлЛист02_Прил5), 0);
					КонецЕсли;
					
					Если Есть_Прил5_ПрПл3_Расчет_1 Тогда
						ВтороеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПл3_Расчет_1_Прил5), 0);
						ВтороеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПл3_Расчет_1_Прил5), 0);
					Иначе
						ВтороеСлагаемое_70 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050010003", Истина, услПрПл_3_Лист02_Прил5), 0);
						ВтороеСлагаемое_80 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050011003", Истина, услПрПл_3_Лист02_Прил5), 0);
					КонецЕсли;
					
					Данные.П000110007003 = ПервоеСлагаемое_70 + ВтороеСлагаемое_70;
					Данные.П000110008003 = ПервоеСлагаемое_80 + ВтороеСлагаемое_80;
					
				КонецЕсли;
				
			КонецЕсли;
			
			//вывод в стр.70 или 80 разницы этих строк
			Разница = Данные.П000110007003 - Данные.П000110008003;
			Если Разница >= 0 Тогда
				Данные.П000110007003 = Разница;
				Данные.П000110008003 = 0;
			Иначе
				Данные.П000110007003 = 0;
				Данные.П000110008003 =  - Разница;
			КонецЕсли; 
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000110004003.Значение = Данные.П000110004003;
				Форма.ТабличныйДокумент.Области.П000110005003.Значение = Данные.П000110005003;
				Форма.ТабличныйДокумент.Области.П000110007003.Значение = Данные.П000110007003;
				Форма.ТабличныйДокумент.Области.П000110008003.Значение = Данные.П000110008003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Раздел1_2" Тогда
			
			ПрПлРаздел1_2 = Данные.П000120000100;
			КодКварталаРаздел1_2 = Данные.П000120000200;
			
			// условие: признак плательщика на листе 02 такой же как и в разделе 1.2
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлРаздел1_2);
			// условие: признак плательщика на листе 02 равен 3
			услПрПл_3_Лист02 = Новый Структура("П002000000100", "3");
			// условие: признак плательщика на приложении 5 к листу 02 такой же как и в разделе 1.2
			услПрПлЛист02_Прил5 = Новый Структура("П002050000100", ПрПлРаздел1_2);
			// условие: признак плательщика на приложении 5 к листу 02 равен 3
			услПрПл_3_Лист02_Прил5 = Новый Структура("П002050000100", "3");
			// условие: признак плательщика на приложении 5 к листу 02 такой же как и в разделе 1.2, вид расчета 1
			услПрПл_Расчет_1_Прил5 = Новый Структура("П002050000100,П002050001000", ПрПлРаздел1_2, "1");
			// условие: признак плательщика на приложении 5 к листу 02 равен 3, вид расчета 1
			услПрПл3_Расчет_1_Прил5 = Новый Структура("П002050000100,П002050001000", "3", "1");
			
			// есть заполненное приложение 5 к листу 02
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5", Новый Структура("П002050000100"));
			// есть заполненное приложение 5 к листу 02 с признаком налогоплательщика 1
			Есть_Прил5_ПН1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5", Новый Структура("П002050000100", "1"));
			// есть заполненное приложение 5 к листу 02 с признаком налогоплательщика 2
			Есть_Прил5_ПН2 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5", Новый Структура("П002050000100", "2"));
			// есть заполненное приложение 5 к листу 02 с признаком налогоплательщика 3
			Есть_Прил5_ПН3 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5", Новый Структура("П002050000100", "3"));
			
			// есть заполненный лист 02 с признаком плательщика 1
			Есть_Лист02_ПрПл1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02", Новый Структура("П002000000100", "1"));
			// есть заполненный лист 02 с признаком плательщика 2
			Есть_Лист02_ПрПл2 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02", Новый Структура("П002000000100", "2"));
			// есть заполненный лист 02 с признаком плательщика 3
			Есть_Лист02_ПрПл3 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02", Новый Структура("П002000000100", "3"));
			
			// есть заполненное приложение 5 к листу 02 с таким же признаком плательщика и видом расчета 1
			Есть_Прил5_ПрПл_Расчет_1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5", услПрПл_Расчет_1_Прил5);
			// есть заполненное приложение 5 к листу 02 с признаком плательщика 3 и видом расчета 1
			Есть_Прил5_ПрПл3_Расчет_1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5", услПрПл3_Расчет_1_Прил5);
			
			// альтернативный алгоритм заполнения раздела 1.2 при коде квартала 21
			Если КодКварталаРаздел1_2 = "21" Тогда
				
				Если ПрПлРаздел1_2 = "2" Тогда
				////////////////////////////////////////////////////////////////////
				// Признак Налогоплательщика = 2,

					Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по ОП)
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
					
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000034003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
						
						//Некорректно заполненная декларация
						
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						Данные.П000120022003 = 0;
						Данные.П000120023003 = 0;
						Данные.П000120024003 = 0;
						
					ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для ОП
						
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012103", Истина, услПрПлЛист02_Прил5), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для головной организации

						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012103", Истина, услПрПл_Расчет_1_Прил5), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					КонецЕсли;
					
				ИначеЕсли ПрПлРаздел1_2 = "1" И (Есть_Лист02_ПрПл3 ИЛИ Есть_Прил5_ПН3) Тогда
				////////////////////////////////////////////////////////////////////
				// Признак Налогоплательщика = 1,
				// есть Лист 02 с Признаком Налогоплательщика = 3 или Приложение 5 к Листу 02 с Признаком Налогоплательщика = 3
					
					Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по ОП)
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, услПрПл_3_Лист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000034003", Истина, услПрПл_3_Лист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по ОП(220, 223, 224))
						
						//Некорректно заполненная декларация
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						Данные.П000120022003 = 0;
						Данные.П000120023003 = 0;
						Данные.П000120024003 = 0;
						
					ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для ОП
						
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012103", Истина, Новый Структура("П002050000100", "1")), 0);
						РазделяемаяСумма = РазделяемаяСумма + Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012103", Истина, услПрПл_3_Лист02_Прил5), 0);
						
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для головной организации
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, услПрПл_3_Лист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012103", Истина, Есть_Прил5_ПрПл3_Расчет_1), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					КонецЕсли;
					
				ИначеЕсли ПрПлРаздел1_2 = "1" И (Есть_Лист02_ПрПл1 ИЛИ Есть_Прил5_ПН1) Тогда
				////////////////////////////////////////////////////////////////////
				// Признак Налогоплательщика = 1,
				// есть Лист 02 с Признаком Налогоплательщика = 1 или Приложение 5 к Листу 02 с Признаком Налогоплательщика = 1
				// При наличии Листа 02 с признаком плательщика 3 этот логический путь не достигается

				    Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
					
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000034003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
						
						//Некорректно заполненная декларация
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						Данные.П000120022003 = 0;
						Данные.П000120023003 = 0;
						Данные.П000120024003 = 0;
						
					ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для ОП
						
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012103", Истина, услПрПлЛист02_Прил5), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;

					ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для головной организации

						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;

						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012103", Истина, услПрПл_Расчет_1_Прил5), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					
					КонецЕсли;
			
				КонецЕсли;
				
			Иначе 			
				
				Если ПрПлРаздел1_2 = "2" Тогда
				//а) (Для стр. с ПризнакПлательщика = 2)

					Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по ОП)
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, услПрПлЛист02), 0);
						
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
					
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000031003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
						
						//Некорректно заполненная декларация
						
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						Данные.П000120022003 = 0;
						Данные.П000120023003 = 0;
						Данные.П000120024003 = 0;
						
					ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для ОП
						
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для головной организации

						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
						
						Если Есть_Прил5_ПрПл_Расчет_1 Тогда
							РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПл_Расчет_1_Прил5), 0);
						Иначе
							РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
						КонецЕсли;
						
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					КонецЕсли;
				
				ИначеЕсли ПрПлРаздел1_2 = "1" И Есть_Лист02_ПрПл3 Тогда
				//б) (Для стр. с ПризнакПлательщика = 1, если есть Лист 02  с ПризнакПлательщика = 3)
				
					Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по ОП)
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, услПрПл_3_Лист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000031003", Истина, услПрПл_3_Лист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по ОП(220, 223, 224))
						
						//Некорректно заполненная декларация
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						Данные.П000120022003 = 0;
						Данные.П000120023003 = 0;
						Данные.П000120024003 = 0;
						
					ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для ОП
						
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0)
										 + Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПл_3_Лист02_Прил5), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для головной организации
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, услПрПл_3_Лист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
						
						Если Есть_Прил5_ПрПл_Расчет_1 Тогда
							ПервоеСлагаемое = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПл_Расчет_1_Прил5), 0);
						Иначе
							ПервоеСлагаемое = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
						КонецЕсли;
						
						Если Есть_Прил5_ПрПл3_Расчет_1 Тогда
							ВтороеСлагаемое = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПл3_Расчет_1_Прил5), 0);
						Иначе
							ВтороеСлагаемое = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПл_3_Лист02_Прил5), 0);
						КонецЕсли;
						
						РазделяемаяСумма = ПервоеСлагаемое + ВтороеСлагаемое;
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					КонецЕсли;
				
				ИначеЕсли ПрПлРаздел1_2 = "1" И НЕ Есть_Лист02_ПрПл3 Тогда
				//в) (Для стр. с ПризнакПлательщика = 1, если нет Лист 02  с ПризнакПлательщика = 3)

				    Если НЕ Есть_Прил5 И НЕ флЕстьОбособ Тогда
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация не по  ОП)
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
					
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000031003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
						
					ИначеЕсли НЕ Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если нет Прил.5 к Лист 02 (в тит.листе указано, что декларация по  ОП(220, 223, 224))
						
						//Некорректно заполненная декларация
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						Данные.П000120022003 = 0;
						Данные.П000120023003 = 0;
						Данные.П000120024003 = 0;
						
					ИначеЕсли Есть_Прил5 И флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для ОП
						
						Данные.П000120012003 = 0;
						Данные.П000120013003 = 0;
						Данные.П000120014003 = 0;
						
						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
						РазделяемаяСумма = РазделяемаяСумма + Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, Новый Структура("П002050000100", "3")), 0);

						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;

					ИначеЕсли Есть_Прил5 И НЕ флЕстьОбособ Тогда
						
						//Если есть Прил.5 к Лист 02, декларация для головной организации

						РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, услПрПлЛист02), 0);
						//делим сумму на 3 части без остатка
						Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120014003 = РазделяемаяСумма - Данные.П000120012003 - Данные.П000120013003;
						
						Если Есть_Прил5_ПрПл_Расчет_1 Тогда
							РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПл_Расчет_1_Прил5), 0);
						Иначе
							РазделяемаяСумма = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5), 0);
						КонецЕсли;

						//делим сумму на 3 части без остатка
						Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСумма/3);
						Данные.П000120024003 = РазделяемаяСумма - Данные.П000120022003 - Данные.П000120023003;
					
					КонецЕсли;
			
				КонецЕсли;
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000120012003.Значение = Данные.П000120012003;
				Форма.ТабличныйДокумент.Области.П000120013003.Значение = Данные.П000120013003;
				Форма.ТабличныйДокумент.Области.П000120014003.Значение = Данные.П000120014003;
				Форма.ТабличныйДокумент.Области.П000120022003.Значение = Данные.П000120022003;
				Форма.ТабличныйДокумент.Области.П000120023003.Значение = Данные.П000120023003;
				Форма.ТабличныйДокумент.Области.П000120024003.Значение = Данные.П000120024003;
			КонецЕсли;

		ИначеЕсли ИмяЛиста = "Лист02" Тогда
			
			ПрПлЛист02=Данные.П002000000100;
			
			//флаги существования заполненных разделов 
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5",Новый Структура("П002050000100"));
			                   
			Есть_Лист02_ПрПл1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02",Новый Структура("П002000000100", "1"));
			Есть_Лист02_ПрПл3 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02",Новый Структура("П002000000100", "3"));
						
			//Значения используемых структур - условий
			услПрПлЛист02_Прил1 = Новый Структура("П002010000100", ПрПлЛист02);
			услПрПлЛист02_Прил2 = Новый Структура("П002020000100", ПрПлЛист02);
			услПрПлЛист02_Прил3 = Новый Структура("П002030000100", ПрПлЛист02);
			услПрПлЛист02_Прил4 = Новый Структура("П002040000100", ПрПлЛист02);
			услПрПлЛист02_Прил5 = Новый Структура("П002050000100", ПрПлЛист02);
			
			Если флКвартальноеЗаполнение ИЛИ АвторасчетПослеАвтозаполнения Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.010 = стр.040 Прил.1 Лист 02
					Данные.П002000001003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил1", "П002010004003", Истина, услПрПлЛист02_Прил1);
					
					//стр.020 = стр.100 Прил.1 Лист 02
					Данные.П002000002003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил1", "П002010010003", Истина, услПрПлЛист02_Прил1);
					
					//стр.030 = стр.130 Прил.2 Лист 02
					Данные.П002000003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил2", "П002020013003", Истина, услПрПлЛист02_Прил2);
					
					//стр.040 = стр.200 Прил.2 Лист 02 + стр.300 Прил.2 Лист 02
					Данные.П002000004003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил2", "П002020020003", Истина, услПрПлЛист02_Прил2)
										 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил2", "П002020030003", Истина, услПрПлЛист02_Прил2);
					
					//стр.050 = стр.360 Прил.3 Лист 02
					Данные.П002000005003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил3", "П002030036003", Истина, услПрПлЛист02_Прил3);
				Иначе
					Данные.П002000001003 = 0;	
					Данные.П002000002003 = 0;
					Данные.П002000003003 = 0;
					Данные.П002000004003 = 0;
					Данные.П002000005003 = 0;
				КонецЕсли;
			КонецЕсли;
			
			//стр.060 = стр.010 + стр.020 - стр.030 - стр.040 + стр.050
			Данные.П002000006003 = Данные.П002000001003 + Данные.П002000002003 - Данные.П002000003003 - Данные.П002000004003 + Данные.П002000005003;
			
			//стр.100
			Если ПрПлЛист02 = "1"
				ИЛИ (ПрПлЛист02 = "3" И НЕ Есть_Лист02_ПрПл1)
				ИЛИ (ПрПлЛист02 = "2" И НЕ Есть_Лист02_ПрПл1 И НЕ Есть_Лист02_ПрПл3)
				Тогда
				//(Для стр. с ПризнакПлательщика = 1) 
				//или (Для стр. с ПризнакПлательщика = 3, если нет стр. с ПризнакПлательщика = 1) 
				//или (Для стр. с ПризнакПлательщика = 2, если нет стр. ни с ПризнакПлательщика = 1, ни с ПризнакПлательщика = 3)
				
				//стр.100 = стр.060 - стр.070 - стр.080 - стр.090 + стр.100 Листов 05 + стр.530 Листа 06
				Данные.П002000010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000006003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000007003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000008003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000009003)
								 	 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист05", "П002100010003", Истина)
								 	 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110053003);
				
			ИначеЕсли  (ПрПлЛист02 = "3" И Есть_Лист02_ПрПл1)
				ИЛИ (ПрПлЛист02 = "2" И (Есть_Лист02_ПрПл1 ИЛИ Есть_Лист02_ПрПл3)) Тогда
				//(Для стр. с ПризнакПлательщика = 3, если есть стр. с ПризнакПлательщика = 1) 
				//или (Для стр. с ПризнакПлательщика = 2, если есть стр. с ПризнакПлательщика = 1 или с ПризнакПлательщика = 3)
				
				//стр.100 = стр.060 - стр.070 - стр.080 - стр.090
				Данные.П002000010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000006003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000007003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000008003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000009003)
			Иначе
				Данные.П002000010003 = 0;
			КонецЕсли;
			
			Если НомерМесяца = 3 ИЛИ НомерМесяца = 12 Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.110 = стр.150 Прил.4 Лист02
					Данные.П002000011003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил4", "П002040015003", Истина, услПрПлЛист02_Прил4);
				Иначе
					Данные.П002000011003 = 0;	
				КонецЕсли;
			КонецЕсли;
			
			//стр.120 = стр.100 - стр.110
			Данные.П002000012003 = Макс(Данные.П002000010003 - Данные.П002000011003, 0);
			
			// Строка 140
			// нет округления, поскольку это не сумма, число
			Данные.П002000014003 = Данные.П002000015003 + Макс(Данные.П002000016003,Данные.П002000017003);
			
			
			//стр.190 = макс(стр.120 х стр.150 / 100 , 0)
			Данные.П002000019003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000012003) * Данные.П002000015003/100), 0);
			
			Если Есть_Прил5 Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.200 = сумма стр.070 Прил.5
					Данные.П002000020003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050007003", Истина, услПрПлЛист02_Прил5);
				Иначе
					Данные.П002000020003 = 0;
				КонецЕсли;	
			Иначе
				//Стр.200 = (стр .120-стр .130) х стр.160 : 100 + (стр .130 х строка 170 : 100)
					Слагаемое1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, (Данные.П002000012003 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000013003))
					 		   * Данные.П002000016003/100);
					Слагаемое2 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000013003)* Данные.П002000017003/100);
					Данные.П002000020003 = Макс(Слагаемое1 + Слагаемое2, 0);
			КонецЕсли;
			
			Если ПрПлЛист02 = "3" Тогда
				//добавление суммы этого показателя с Листа 02 с указанным признаком налогоплательщика = 1
				//для стр.190 и 200
				Данные.П002000019003 = Данные.П002000019003
									 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, Новый Структура("П002000000100", "1"));
				Данные.П002000020003 = Данные.П002000020003
									 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000020003", Истина, Новый Структура("П002000000100", "1"));
			КонецЕсли;
			
			//стр.180 = стр.190 + стр.200
			Данные.П002000018003 = Данные.П002000019003 + Данные.П002000020003;
			
			
			Если Есть_Прил5 Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.230 = сумма стр.080 Прил.5
					Данные.П002000023003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050008003", Истина, услПрПлЛист02_Прил5);
				Иначе
					Данные.П002000023003 = 0;
				КонецЕсли;
	
				//если есть заполненный лист О2 с ПрПл="3", то на него переносится то же значение, что на листе 02 с ПрПл = "1", а тот очищается
				Если ПрПлЛист02 = "3" Тогда
					Данные.П002000023003 = Данные.П002000023003
				 					     + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050008003", Истина, 
										 								  Новый Структура("П002050000100", "1"));
				КонецЕсли;
				Если ПрПлЛист02 = "1" И Есть_Лист02_ПрПл3 Тогда
					Данные.П002000023003 = 0;	
				КонецЕсли;
			КонецЕсли;
			
			//стр.210 = стр.220 + стр.230
			Данные.П002000021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000022003)
			 + Данные.П002000023003;
			
			
			Если ПрПлЛист02 = "1" И Есть_Лист02_ПрПл3 Тогда
				Данные.П002000027003 = 0;	
				Данные.П002000027103 = 0;	
				Данные.П002000028003 = 0;	
				Данные.П002000028103 = 0;	
			Иначе
				//стр.270 = Макс(стр.190 - стр.220  - стр.250, 0)
				Данные.П002000027003 = Макс(Данные.П002000019003
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000022003)
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000025003), 0);	
				
				//стр.271 = Макс(стр.200 - стр.230 -стр.260, 0)
				Данные.П002000027103 = Макс(Данные.П002000020003
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000023003)
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000026003), 0);
				
				// Строка 280 = Макс(строка 220 + строка 250 - строка190, 0)
				Данные.П002000028003 = Макс(- Данные.П002000019003
									 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000022003)
									 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000025003), 0);
				
				//стр.281 = Макс(стр.230 + стр.260  - стр.200, 0)
				Данные.П002000028103 = Макс(- Данные.П002000020003
									 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000023003)
									 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000026003), 0);
			КонецЕсли;
			
			// При заполнении декларации для 9 месяца по головной организации при наличии заполненных приложений 5 к листу 02
			// строка 310 рассчитывается на основании сумм строк 120 приложения 5 к листу 02 по признаку плательщика
			Рассчитывать310 = (НомерМесяца = 9 И Есть_Прил5 И НЕ флЕстьОбособ);
			Если Рассчитывать310 Тогда
				Данные.П002000031003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012003", Истина, услПрПлЛист02_Прил5);
			КонецЕсли;
			
			// При заполнении декларации для 9 и 11 месяца по головной организации при наличии заполненных приложений 5 к листу 02
			// строка 340 рассчитывается на основании сумм строк 121 приложения 5 к листу 02 по признаку плательщика
			Рассчитывать340 = ((НомерМесяца = 9 ИЛИ НомерМесяца = 11) И Есть_Прил5 И НЕ флЕстьОбособ);
			Если Рассчитывать340 Тогда
				Данные.П002000034003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050012103", Истина, услПрПлЛист02_Прил5);
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				
				Форма.ТабличныйДокумент.Области.П002000001003.Значение = Данные.П002000001003;
				Форма.ТабличныйДокумент.Области.П002000002003.Значение = Данные.П002000002003;
				Форма.ТабличныйДокумент.Области.П002000003003.Значение = Данные.П002000003003;
				Форма.ТабличныйДокумент.Области.П002000004003.Значение = Данные.П002000004003;
				Форма.ТабличныйДокумент.Области.П002000005003.Значение = Данные.П002000005003;
				Форма.ТабличныйДокумент.Области.П002000006003.Значение = Данные.П002000006003;
				
				Форма.ТабличныйДокумент.Области.П002000010003.Значение = Данные.П002000010003;
				Форма.ТабличныйДокумент.Области.П002000011003.Значение = Данные.П002000011003;
				Форма.ТабличныйДокумент.Области.П002000012003.Значение = Данные.П002000012003;
				Форма.ТабличныйДокумент.Области.П002000014003.Значение = Данные.П002000014003;
	
				Форма.ТабличныйДокумент.Области.П002000018003.Значение = Данные.П002000018003;
				Форма.ТабличныйДокумент.Области.П002000019003.Значение = Данные.П002000019003;
				Форма.ТабличныйДокумент.Области.П002000020003.Значение = Данные.П002000020003;
				Форма.ТабличныйДокумент.Области.П002000021003.Значение = Данные.П002000021003;
				Форма.ТабличныйДокумент.Области.П002000023003.Значение = Данные.П002000023003;
				
				Форма.ТабличныйДокумент.Области.П002000027003.Значение = Данные.П002000027003;
				Форма.ТабличныйДокумент.Области.П002000027103.Значение = Данные.П002000027103;
				Форма.ТабличныйДокумент.Области.П002000028003.Значение = Данные.П002000028003;
				Форма.ТабличныйДокумент.Области.П002000028103.Значение = Данные.П002000028103;
				
				Форма.ТабличныйДокумент.Области.П002000034003.Значение = Данные.П002000034003;
				
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_Прил1" Тогда
			
			ПрПлЛист02_Прил1 = Данные.П002010000100;
			услПрПлЛист02_Прил3 = Новый Структура("П002030000100", ПрПлЛист02_Прил1);
			
			//строка 010
			Данные.П002010001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010001103)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010001203)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010001303)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010001403);
			
			//строка 030
			Если ПрПлЛист02_Прил1 <> "" Тогда
				Данные.П002010003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил3", "П002030034003", Истина, услПрПлЛист02_Прил3);
			Иначе
				Данные.П002010003003 = 0;
			КонецЕсли;
			
			//строка 040
			Данные.П002010004003 = Данные.П002010001003	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010002003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010002303)	
								 + Данные.П002010003003;
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002010001003.Значение = Данные.П002010001003;
				Форма.ТабличныйДокумент.Области.П002010003003.Значение = Данные.П002010003003;
				Форма.ТабличныйДокумент.Области.П002010004003.Значение = Данные.П002010004003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_Прил2" Тогда
			
			ПрПлЛист02_Прил2 = Данные.П002020000100;
			услПрПлЛист02_Прил3 = Новый Структура("П002030000100", ПрПлЛист02_Прил2);
			
			//строка 080
			Если ПрПлЛист02_Прил2 <> "" Тогда
				Данные.П002020008003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил3", "П002030035003", Истина, услПрПлЛист02_Прил3);
			Иначе
				Данные.П002020008003 = 0;
			КонецЕсли;
			
			//строка 130
			Данные.П002020013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020001003)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020002003)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020004003)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020005903)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020006003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020006103)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020007003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020008003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020009003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020010003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020011003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020012003);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002020008003.Значение = Данные.П002020008003;
				Форма.ТабличныйДокумент.Области.П002020013003.Значение = Данные.П002020013003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_Прил3" Тогда
			
			//строка 090
			Данные.П002030009003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030008003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030007003), 0);	
			
			//строка 150
			Данные.П002030015003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030012003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030010003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030014003), 0);
			
			//строка 160
			Данные.П002030016003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030013003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030011003), 0);
			
			//строка 230
			Данные.П002030023003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030022003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030021003), 0);
			
			//строка 340
			Данные.П002030034003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030003003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030007003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030010003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030011003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030018003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030021003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030024003);
			
			//строка 350
			Данные.П002030035003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030004003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030008003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030012003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030013003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030019003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030022003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030025003);
			
			//строка 360
			Данные.П002030036003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030006003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030009003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030015003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030016003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030020103)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030023003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030026003);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002030009003.Значение = Данные.П002030009003;
				Форма.ТабличныйДокумент.Области.П002030015003.Значение = Данные.П002030015003;
				Форма.ТабличныйДокумент.Области.П002030016003.Значение = Данные.П002030016003;
				Форма.ТабличныйДокумент.Области.П002030023003.Значение = Данные.П002030023003;
				Форма.ТабличныйДокумент.Области.П002030034003.Значение = Данные.П002030034003;
				Форма.ТабличныйДокумент.Области.П002030035003.Значение = Данные.П002030035003;
				Форма.ТабличныйДокумент.Области.П002030036003.Значение = Данные.П002030036003;
			КонецЕсли;

		ИначеЕсли ИмяЛиста = "Лист02_Прил4" Тогда
			
			ПрПлЛист02_Прил4 = Данные.П002040000100;
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлЛист02_Прил4);
			
			//строка 010 - далее
			
			//строка 030
			Данные.П002040003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040004003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040005003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040006003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040007003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040008003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040009003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040010003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040011003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040012003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040013003);
			
			//строка 010
			Данные.П002040001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040002003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040003003);	
			
			//строка 140 авторассчитывается только за 1 и 4 квартал
			НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Если НомерМесяца = 3 ИЛИ НомерМесяца = 12 Тогда
				//стр.140 = стр.100 Лист 02
				Данные.П002040014003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000010003", Истина, услПрПлЛист02);	
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002040003003.Значение = Данные.П002040003003;
				Форма.ТабличныйДокумент.Области.П002040001003.Значение = Данные.П002040001003;
				Форма.ТабличныйДокумент.Области.П002040014003.Значение = Данные.П002040014003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_Прил5" Тогда
			
			ПрПлЛист02_Прил5 = Данные.П002050000100;
			
			РасчетСоставленЛист02_Прил5 = Данные.П002050001000;
			
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлЛист02_Прил5);
			услПрПлЛист02Прил5_И_Расчет_3 = Новый Структура ("П002050000100,П002050001000",ПрПлЛист02_Прил5,"3");
			
			//флаг (есть страницы с Расчет составлен = "3" и соотв. признаком плательщика)
			ЕстьПрил5_Расчет3_И_ПрПл = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5",услПрПлЛист02Прил5_И_Расчет_3);
			
			
			Если НЕ флЕстьОбособ Тогда
				//стр.030 = макс(стр.120 Лист02 с соотв. признаком плательщика, 0)
				Если ПрПлЛист02_Прил5 <> "" Тогда
					Данные.П002050003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000012003", Истина, услПрПлЛист02);
				Иначе
					Данные.П002050003003 = 0;
				КонецЕсли;
				
				Если ЕстьПрил5_Расчет3_И_ПрПл Тогда
					//стр.031(тек. стр.) = стр.030(тек.стр.) -  стр.050(всех стр. с Расчет составлен = "3")с соотв. признаком плательщика
					Если ПрПлЛист02_Прил5 <> "" Тогда
						Данные.П002050003103 = Данные.П002050003003
						- СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_Прил5", "П002050005003", Истина,услПрПлЛист02Прил5_И_Расчет_3);
					Иначе
						Данные.П002050003103 = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
			Если РасчетСоставленЛист02_Прил5 = "3" Тогда
				//Расчет составлен = "3"
				//стр.050 = вручную
			Иначе		
				//Расчет составлен <> "3"
				Если ЕстьПрил5_Расчет3_И_ПрПл Тогда
				    //есть страницы с (Расчет составлен = "3") и соотв. признаком плательщика
					//стр.050 = стр.031 х стр.040
					Данные.П002050005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050003103 * Данные.П002050004003/100);
				Иначе
					//нет страниц с (Расчет составлен = "3") и соотв. признаком плательщика
					//Если заполнена строка 031, то стр.050  =  стр.031 х стр.040
					//Иначе стр.050  =  стр.030 х стр.040
					Множитель = ?(Данные.П002050003103 <> 0, Данные.П002050003103, Данные.П002050003003);
				    Данные.П002050005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Множитель * Данные.П002050004003/100);
				КонецЕсли;
			КонецЕсли;
			
			//стр.070 = стр.050 х стр.060/100
			Данные.П002050007003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050005003) * Данные.П002050006003/100), 0);
			
			//стр.100
			Если РасчетСоставленЛист02_Прил5="3" Тогда
				//Расчет составлен = "3"
				//стр.100 не заполняются, если "Расчет составлен" = 3 (ликвидированное ОП)
				Данные.П002050010003 = 0;
			Иначе		
				//Расчет составлен <> "3"
				//стр.100 = макс(стр.070 - стр.080 - стр.090, 0)
				Данные.П002050010003 = Макс(Данные.П002050007003
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050008003)
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050009003), 0);
			КонецЕсли;
			
			
			//стр.110 = макс(стр.080 + стр.090 - стр.070, 0)
			Данные.П002050011003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050008003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050009003)
								 - Данные.П002050007003, 0);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002050003003.Значение = Данные.П002050003003;
				Форма.ТабличныйДокумент.Области.П002050003103.Значение = Данные.П002050003103;
				Форма.ТабличныйДокумент.Области.П002050005003.Значение = Данные.П002050005003;
				Форма.ТабличныйДокумент.Области.П002050007003.Значение = Данные.П002050007003;
				Форма.ТабличныйДокумент.Области.П002050010003.Значение = Данные.П002050010003;
				Форма.ТабличныйДокумент.Области.П002050011003.Значение = Данные.П002050011003;
			КонецЕсли;
								 
		ИначеЕсли ИмяЛиста = "Лист03" Тогда
			
			//ст.040 = макс(стр.010 - стр.020 - стр.030, 0)
			Данные.П002060004003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060001003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060002003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060003003), 0);
								 
			//ст.090  = стр.040 - стр.071
			Данные.П002060009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060004003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060007103);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002060004003.Значение = Данные.П002060004003;
				Форма.ТабличныйДокумент.Области.П002060009003.Значение = Данные.П002060009003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист03Продолжение" Тогда
			
			//строка 030
			Данные.П002070003003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002070001003) * Данные.П002070002003/100), 0);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002070003003.Значение = Данные.П002070003003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист04" Тогда
			
			//стр.040  = макс((стр.010 - стр.020) * стр.030 /100, 0) 
			Данные.П002090004003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090001003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090002003))
								 * Данные.П002090003003/100), 0);
			
			//стр.080 = макс((стр.040 - стр.050 - стр.060 - стр.070), 0)
			Данные.П002090008003 = Макс(Данные.П002090004003
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090005003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090006003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090007003), 0);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002090004003.Значение = Данные.П002090004003;
				Форма.ТабличныйДокумент.Области.П002090008003.Значение = Данные.П002090008003;
			КонецЕсли;
								 
		ИначеЕсли ИмяЛиста = "Лист05" Тогда
			
			//стр.040 = (стр.010 + стр.020 - стр.030 + стр.031)
			Данные.П002100004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100001003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100002003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100003003) 
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100003103); 
			
			//стр.060 = макс(стр.040 - стр.050, 0)
			Данные.П002100006003 = Макс(Данные.П002100004003
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100005003), 0); 
			
			//строка 090
			Если флНалоговыйПериод И Данные.П002100004003 < 0 Тогда
				//налоговый период с убытком
				//Строка 090 = мод(строка 040) + строка 070
				Данные.П002100009003 = -Данные.П002100004003
									 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100007003);
			Иначе
				//отчетный период или налоговый с прибылью
				//стр.090 = стр.070 - стр.080
				Данные.П002100009003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100007003)
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100008003), 0); 
			КонецЕсли;
			
			//стр.100 = макс(стр.060 - стр.080, 0)
			Данные.П002100010003 = Макс(Данные.П002100006003
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100008003), 0);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002100004003.Значение = Данные.П002100004003;
				Форма.ТабличныйДокумент.Области.П002100006003.Значение = Данные.П002100006003;
				Форма.ТабличныйДокумент.Области.П002100009003.Значение = Данные.П002100009003;
				Форма.ТабличныйДокумент.Области.П002100010003.Значение = Данные.П002100010003;
			КонецЕсли;
								 
		КонецЕсли;
		
	КонецЦикла; // Конец перебора страниц многостраничного раздела
	
КонецПроцедуры // РасчетВСтруктуре

// СуммаПоказателяПоВсемСтраницам
// Параметры:
//  ИмяСтраницы     - имя страницы декларации
//  Показатель      - показатель декларации
//  Округлять       - округлять или нет значения
//  Условия         - не обязательный параметр, задает условия, при которых будет суммироваться результат
//  Вариант         - предназначен для приложения 5 к листу 02, вариант 1 означает, все с признаком 1, вариант 2 - все остальные (обособки).
//
&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяПоВсемСтраницам(Форма, ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	
	Результат = 0;
	
	ТаблицаРаздела = Неопределено;
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные[0].Значение;
			//проверка экземпляра	
			Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
				//нет условий или они все выполняются
				Результат = Результат + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеТаблПоле[Показатель]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // СуммаПоказателяПоВсемСтраницам()

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницы)
	
	УстановитьВариантыЗаполненияСпецификаРаздела(ЭтаФорма, ИмяТекущейСтраницы);
	
	Если ИмяТекущейСтраницы = "Лист02" Тогда
		ПолучитьСтавкиНалога(ЭтаФорма, ИмяТекущейСтраницы);
	КонецЕсли; 

	Если ИмяТекущейСтраницы = "Лист02_Прил5" Тогда
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;
	
	РасчетНаСервере();
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницы);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Лист02_Прил5" Тогда
		//изменение вариантов заполнения ячеек при изменении определенных показателей
		Если ТабличныйДокумент.Области.П002050001000.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002050005003");
		Иначе
			Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002050005003");	
			КонецЕсли;
		КонецЕсли;
		
		Если ТабличныйДокумент.Области.П002050001000.Значение = "4" Тогда
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			// прочитаем признак
			АктивныеСтраницы = ТаблицаСтраницыЛист02_Прил5.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				
				ДанныеАктивнойСтраницы = АктивныеСтраницы[0].Данные[0].Значение;
				
				Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
					РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил5", Ложь);
				КонецЕсли;
				
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
				Иначе
					ВГруппуОПВходитОрганизация = Ложь;
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РасчетНаСервере();
	
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВариантыЗаполненияСпецификаРаздела(Форма, ИмяТекущейСтраницы)
	
	НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	СтрПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	
	Если ИмяТекущейСтраницы = "Лист02" Тогда
		
		//доступность стр.10-50 раздела Лист 02
		
        Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000001003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000002003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000005003");
		Иначе
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000001003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000002003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000003003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000004003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000005003");
			КонецЕсли;
		КонецЕсли;
		//доступность стр.110 раздела Лист 02
	    Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000011003"); // Для автозаполнения нужно установить значение 3
		Иначе
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000011003");
			КонецЕсли;	
		КонецЕсли;
		
		//доступность стр. 230 раздела Лист 02
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма,"Лист02_Прил5",Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000023003");
	    Иначе
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000023003");
			КонецЕсли;
		КонецЕсли; 
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил1" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001103");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001303");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001403");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010002003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010103");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010303");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010403");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010503");
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил2" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020001003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020002003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020004103");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020004203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020005203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020005903");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020006003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020007003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020009003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020010003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013103");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013203");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013303");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013403");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013503");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020103");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020403");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020503");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020030103");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020030203");			
		КонецЕсли;	
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил3" Тогда		
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030005003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030006003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030007003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030008003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030010003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030011003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030012003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030013003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030014003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030017003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030018003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030019003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030020003");			
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил4" Тогда
		Если НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002040016003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002040017003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002040018003");
			
			Форма.ТабличныйДокумент.Области.П002040016003.Значение = "";
			Форма.ТабличныйДокумент.Области.П002040017003.Значение = "";
			Форма.ТабличныйДокумент.Области.П002040018003.Значение = "";
		КонецЕсли;
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040002003");	
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040004001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040005001");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040006001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040007001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040008001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040009001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040010001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040011001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040012001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040013001");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040004003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040005003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040006003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040007003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040008003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040009003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040010003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040011003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040012003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040013003");
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040014003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040015003");	
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил5" Тогда
		
		Если флЕстьОбособ Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050003103");	
		ИначеЕсли НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002050003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002050003103");
		КонецЕсли;
		
		//изменение вариантов заполнения ячеек при изменении определенных показателей
		Если Форма.ТабличныйДокумент.Области.П002050001000.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050005003");
		Иначе
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002050005003");	
			КонецЕсли;
		КонецЕсли;

		Если Форма.ТабличныйДокумент.Области.П002050001000.Значение = "4" Тогда
			Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
			// прочитаем признак
			
			АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02_Прил5.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				ДанныеАктивнойСтраницы = АктивныеСтраницы[0].Данные[0].Значение;
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
				Иначе
					ВГруппуОПВходитОрганизация = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //УстановитьВариантыЗаполненияСпецификаРаздела()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры // ДобавитьСтроку()

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
		
КонецПроцедуры // ДобавитьСтрокуНаСервере()

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры // ДобавитьСтрокуНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
			
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
    	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
		
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если НомерГрафы = 1 Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
					КонецЕсли;
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						                        						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры // УдалитьДополнительнуюСтроку()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхЛист06.Очистить();
	СтруктураДанныхЛист07.Очистить();
	СтруктураДанныхПриложение.Очистить();
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		
		ЭтаФорма[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
		
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ПолучитьСтавкиНалога(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПроставитьПрПл_1();
	
		//для обособленных подразделений лист 02 не сдается, ставки нужно очистить
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтрПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		СтрПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли; 
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	Если флЕстьОбособ Тогда
		ДанныеСтраницы = ТаблицаСтраницыЛист02[0].Данные[0].Значение;
		ДанныеСтраницы.П002000015003 = 0;
		ДанныеСтраницы.П002000016003 = 0;
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02" Тогда
			ТабличныйДокумент.Области.П002000015003.Значение = 0;
			ТабличныйДокумент.Области.П002000016003.Значение = 0;
		КонецЕсли; 
	КонецЕсли;

	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СпециальныеОперацииПослеОчисткиЛистаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, НазванияМногостраничныхРазделовДляУдаления = "") Экспорт

	Если НЕ ПустаяСтрока(НазванияМногостраничныхРазделовДляУдаления) Тогда
		НазванияМнгостраничныхРазделов = Новый Структура(НазванияМногостраничныхРазделовДляУдаления);
	Иначе
		НазванияМнгостраничныхРазделов = Новый Структура;
	КонецЕсли;

	Для каждого СтрокаУровня1 из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		РазделАвтозаполняется = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;

		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;

		мРазделИмя = "ТабличныйДокумент";
		мРаздел    = Форма[мРазделИмя];
		Если НазванияМнгостраничныхРазделов.Свойство(НазваниеСтраницы) Тогда
			// Очистим текущий лист.
			#Если НаКлиенте Тогда
				Форма.ОчиститьТабличноеПолеНаКлиенте(НазваниеСтраницы);
			#Иначе
				Форма.ОчиститьТабличноеПолеНаСервере(НазваниеСтраницы);
			#КонецЕсли
							
			ТаблицаСтраницРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(НазваниеСтраницы, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
			
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаСтраницРаздела[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
									
			// Варианты заполнения установим в один массив. Все варианты возьмем из Эталона.
			// Цвет ячеек перерисуется в показе статика многостраничного раздела, ниже.
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(Форма, НазваниеСтраницы, Ложь);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБ()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
			ОчиститьТабличноеПолеСпец(ИмяСтраницы);
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		ЭтаФорма.НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		
		ДатаПодписи = '00010101';
		
		ЗаполнитьСведенияОбОрганизации(ЭтаФорма, Истина);
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

// СпециальныеОперацииПослеОчисткиЛистаНаСервере
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
//
&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Лист02_Прил5" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;
	
	РасчетНаСервере();

КонецПроцедуры // СпециальныеОперацииПослеОчисткиЛистаНаСервере

// СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы) Экспорт

	Если ИмяСтраницы = "Лист02_Прил5" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;

	РасчетНаСервере();

КонецПроцедуры // СпециальныеОперацииПослеОчисткиЛистаНаКлиенте

// ОткрытьФормуНастроек()
//
&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ФлажокОтклАвтоРасчетПриИзменении(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаКлиентеНаСервереБезКонтекста
Процедура ФлажокОтклАвтоРасчетПриИзменении(Форма, ИмяТекущейСтраницы)

	СтрПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223" ИЛИ СтрПоМесту = "224");
	
	//изменение вариантов заполнения ячеек при изменении определенных показателей
	Если ИмяТекущейСтраницы = "Лист02_Прил5" Тогда
		Если Форма.ТабличныйДокумент.П002050001000.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050005003");
		КонецЕсли;
	КонецЕсли;
	
	НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	Если ИмяТекущейСтраницы = "Лист02" Тогда
		
		//доступность стр.10-50 раздела Лист 02
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000001003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000002003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002000005003");
		КонецЕсли;
		//доступность стр.110 раздела Лист 02
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000011003"); // Для автозаполнения нужно установить значение 3
		КонецЕсли;
		
		//доступность стр. 230 раздела Лист 02
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_Прил5",Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000023003");
		КонецЕсли;
	
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил1" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001103");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001303");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010001403");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010002003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010103");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010303");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010403");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002010010503");
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил2" Тогда
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020001003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020002003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020004103");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020004203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020005203");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020005903");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020006003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020007003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020009003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020010003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013103");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013203");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013303");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013403");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020013503");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020103");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020403");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020020503");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020030103");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002020030203");
		КонецЕсли;	
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил3" Тогда		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030005003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030006003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030007003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030008003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030010003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030011003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030012003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030013003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030014003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030017003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030018003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030019003");			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002030020003");			
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_Прил4" Тогда
		Если НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002040016003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002040017003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002040018003");
			
			Форма.ТабличныйДокумент.Области.П002040016003.Значение = "";
			Форма.ТабличныйДокумент.Области.П002040017003.Значение = "";
			Форма.ТабличныйДокумент.Области.П002040018003.Значение = "";
		КонецЕсли;
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040002003");	
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040004001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040005001");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040006001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040007001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040008001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040009001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040010001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040011001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040012001");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040013001");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040004003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040005003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040006003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040007003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040008003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040009003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040010003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040011003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040012003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040013003");
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040014003");	
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002040015003");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ФлажокОтклАвтоРасчетПриИзменении()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

// ПослеСменыЕдИзмеренияИТочности()
//  
&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	ИмяЯчейки = Область.Имя;
	
	Если СтрЧислоВхождений(ИмяЯчейки, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;	

	Если Лев(ИмяЯчейки, 7) = "КодИМНС" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
		
	//форма заполнения листа 03 раздел В
	Если   (ИмяЯчейки = "П002080002003_01")
	   ИЛИ (ИмяЯчейки = "П002080002003_02") 
	   ИЛИ (ИмяЯчейки = "П002080002003_03") 
	   ИЛИ (ИмяЯчейки = "П002080002003_04") 
	   ИЛИ (ИмяЯчейки = "П002080002003_05") 
	   ИЛИ (ИмяЯчейки = "П002080002003_06")
	   ИЛИ (ИмяЯчейки = "П002080002003_07") 
	   ИЛИ (ИмяЯчейки = "П002080002003_08") 
	   ИЛИ (ИмяЯчейки = "П002080002003_09") Тогда 

		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области.П002080002003_01.Значение);
		РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области.П002080002003_02.Значение);
		РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.П002080002003_02.Значение);
		РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.П002080002003_03.Значение);
		РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.П002080002003_04.Значение);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.П002080002003_05.Значение);
		РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.П002080002003_06.Значение);
		РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.П002080002003_07.Значение);
		РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.П002080002003_08.Значение);
		РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.П002080002003_09.Значение);
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
			
		Если Регион.Количество() > 0 Тогда
			
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
			
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
								 		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
																												  + РоссийскийАдрес["Регион"] + ","
																												  + РоссийскийАдрес["Район"] + ","
																												  + РоссийскийАдрес["Город"] + ","
																												  + РоссийскийАдрес["НаселенныйПункт"] + ","
																												  + РоссийскийАдрес["Улица"] + ","
																												  + РоссийскийАдрес["Дом"] + ","
																												  + РоссийскийАдрес["Корпус"] + ","
																												  + РоссийскийАдрес["Квартира"]);
								
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
				
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
				
		ТребРезультат = 0;
		Если КодПоказателя = "П000110003003" Тогда
		//код КБК раздела 1.1	
			//признак налогоплательщика раздела 1.1
			Критерий1 = ТабличныйДокумент.Области.П000110000100.Значение;
			
			Если Критерий1 = "1" Тогда
				ТребРезультат = 1;	
			ИначеЕсли Критерий1 = "2" Тогда
				ТребРезультат = 2;	
			КонецЕсли;
			
		ИначеЕсли КодПоказателя = "П000120011003" Тогда
		//код КБК раздела 1.2	
			//признак налогоплательщика раздела 1.2
			Критерий1 = ТабличныйДокумент.Области.П000120000100.Значение;
			
			Если Критерий1 = "1" Тогда
				ТребРезультат = 1;	
			ИначеЕсли Критерий1 = "2" Тогда
				ТребРезультат = 2;	
			КонецЕсли;
			
		ИначеЕсли КодПоказателя = "Период" Тогда
			//код периода	
			
			НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			флКвартальноеЗаполнение = (СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал);
	
			Если СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал Тогда
				ТребРезультат = НомерМесяца / 3;
			Иначе
				ТребРезультат = НомерМесяца + 4;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		//удаление перед интерактивным выбором строки из обработанной копии ТЗ служебной колонки "РезультатПроверки"
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области.П002080002003_01.Значение = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области.П002080002003_02.Значение = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области.П002080002003_03.Значение = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области.П002080002003_04.Значение = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области.П002080002003_05.Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области.П002080002003_06.Значение = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области.П002080002003_07.Значение = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области.П002080002003_08.Значение = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области.П002080002003_09.Значение = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры // ЗаполнитьРегионыНаСервере()

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
						   
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
						   
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");

		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");

		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["КодИМНС"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП1"].Значение = РезультатВыбора.КПП;
		
		ИзменитьОКАТОРазделовИЗаполнитьСведенияОПодписантах(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
	
	Если Область.Имя = "П000120001003"
	 ИЛИ Область.Имя = "П000120011003"
	 ИЛИ Область.Имя = "П000120021003"Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
		Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения+1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);

			Сообщение.Сообщить();
			
		КонецЕсли;
	
	КонецЕсли;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "НомерКорректировки" Тогда
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			Область.Значение = "0";
		КонецЕсли;
		
		ОтобразитьНомерКорректировки(ЭтаФорма, Область.Значение);
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
	ИначеЕсли ИмяПоказателя = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
	//Изменение "по месту нахождения (учета) (код)" на Титульном листе
	//
	ИначеЕсли СтрНайти(ИмяПоказателя, "ПоМесту") > 0 Тогда
		флЕстьОбособ = (СтруктураРеквизитовФормы.мПоМесту = "220" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "223" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "224");
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			НовыйПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
		Иначе
			НовыйПоМесту = СтруктураДанныхТитульный.ПоМесту;
		КонецЕсли; 
		
		НовыйЕстьОбособ = (НовыйПоМесту = "220" ИЛИ НовыйПоМесту = "223" ИЛИ НовыйПоМесту = "224");
		
		Если НовыйЕстьОбособ = флЕстьОбособ Тогда
			//режим не изменился
			СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;
		Иначе
			//попытка изменения режима
			Если НовыйЕстьОбособ Тогда
				ТекстВопроса = "Внимание! Перед входом в режим заполнения для обособленных подразделений
					|будут очищены все разделы (листы) отчета.
					|Продолжить операцию?";
			Иначе
				ТекстВопроса = "Внимание! Перед выходом из режима заполнения для обособленных подразделений
					|будут очищены все разделы (листы) отчета.
					|Продолжить операцию?";
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение", ЭтотОбъект, Новый Структура("ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область", ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма, ЗначениеКорректировки)
	
	Форма.СтруктураРеквизитовФормы.ВидДокумента = ?(Число(ЗначениеКорректировки) = 0, 0, 1);
	
	Форма.НомерКорректировки = Форма.СтруктураРеквизитовФормы.ВидДокумента * Число(ЗначениеКорректировки);
	
	Форма.ТабличныйДокумент.Области.НомерКорректировки.Значение = Форма.НомерКорректировки;
	
Конецпроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		
		ОчиститьНаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ОбновитьДоступностьЭлементовНаКлиенте();
		
	КонецЕсли;
	
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область)
	
	Если ИмяПоказателя = "ОКВЭД" Тогда
		
		Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Изменение "Расчет составлен" на Прил 5 Листа 02
	Если ИмяПоказателя = "П002050001000" Тогда
		// Блок управление признаком вхождения организации в группу ОП.
		Если ЗначПоказателя = "4" Тогда
			// Сделаем видимым флажек.
			ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			ЦветЖелтый = Новый Цвет(255, 255, 192); // Желтый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветЖелтый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Истина;
			
			// Запишем по умолчанию как выключенный флаг.
			ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ЭтаФорма, Ложь, Ложь);
		Иначе
			ВГруппуОПВходитОрганизацияДоступность = Ложь;
			// Запишем по умолчанию как выключенный флаг.
			ВГруппуОПВходитОрганизация = Ложь;
			
			ЦветБелый = Новый Цвет(255, 255, 255); // Белый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Значение    = "";
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветБелый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Ложь;
			
			ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ЭтаФорма, Ложь, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	//изменение вариантов заполнения ячеек при изменении определенных показателей
	Если ИмяПоказателя = "П002050001000" Тогда
		Если ЗначПоказателя = "3" Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(0, "П002050005003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(0, "П002050005003");
			#КонецЕсли
		ИначеЕсли НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П002050005003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П002050005003");
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	//Обнуление по условию строки 230 на листе 02
	Если ИмяПоказателя = "П002050000100" Тогда
		ТаблицаРаздела  =  мСтруктураМногостраничныхРазделов["Лист02"];
		ТаблицаРаздела = ЭтаФорма[ТаблицаРаздела];
		Если ЗначПоказателя = "" Тогда
			АктивныеСтраницы = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_Прил5"]].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				АктивныеСтраницы[0].Данные[0].Значение.П002050000100 = "";
			КонецЕсли;
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_Прил5", Новый Структура("П002050000100"));
			Если НЕ Есть_Прил5 И НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Для каждого СтраницаТаблицыРаздела Из ТаблицаРаздела Цикл
					ДанныеСтраницы = СтраницаТаблицыРаздела.Данные[0].Значение;
					ДанныеСтраницы.П002000023003 = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваПоказателя = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если СвойстваПоказателя <> Неопределено И СвойстваПоказателя.ТаблицаЗначений <> Неопределено Тогда
		КодПоказателя = СвойстваПоказателя.Показатель;
		КопироватьДанныеФормы(СвойстваПоказателя.ТаблицаЗначений, ТЗВыбора);
		//Определение Результата проверки из таблицы выбора и если это - число > 0 - последующая обработка
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		Если ЭлТЗВыбора.Количество() > 0 Тогда
			ЭлТЗВыбора = ЭлТЗВыбора[0];
			Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(ЭлТЗВыбора.РезультатПроверки) Тогда
				Рез = Число(ЭлТЗВыбора.РезультатПроверки);
				Если Рез > 0 Тогда
					
					ТЗКритерии.Очистить();
					
					Если КодПоказателя = "П000110003003" Тогда //код КБК раздела 1.1	
						Если Рез = 1 Тогда
							
							//признак налогоплательщика раздела 1.1
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000110000100.Значение;
							НовСтрока.ТребЗнач = "1";
							
						ИначеЕсли Рез = 2 Тогда
							
							//признак налогоплательщика раздела 1.1
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000110000100.Значение;
							НовСтрока.ТребЗнач = "2";
							
						КонецЕсли;
					ИначеЕсли КодПоказателя = "П000120011003" Тогда //код КБК раздела 1.2
						Если Рез = 1 Тогда
							
							//признак налогоплательщика раздела 1.2
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000120000100.Значение;
							НовСтрока.ТребЗнач = "1";
							
						ИначеЕсли Рез = 2 Тогда
							
							//признак налогоплательщика раздела 1.2
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000120000100.Значение;
							НовСтрока.ТребЗнач = "2";
							
						КонецЕсли;
					КонецЕсли;
					
					Для каждого Критерий Из ТЗКритерии Цикл
						//Если текущее значение отличается от требуемого происходит присвоение
						Если Критерий.Область <> Критерий.ТребЗнач Тогда
							Критерий.Область = Критерий.ТребЗнач;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваПоказателя <> Неопределено Тогда
		КодКритерия = СвойстваПоказателя.Показатель;
		ЗначКритерия = Область.Значение;
		//введение таблицы значений предусматривает влияние критерия на несколько зависимых показателей
		ТЗЗависимЗнач.Очистить();
		
		Если КодКритерия = "П000110000100" Тогда //признак налогоплательщика раздела 1.1
			Если ЗначКритерия = "1" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000110003003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000110003003.Значение;
				НовСтрока.ТребРез = 1;
				
			ИначеЕсли ЗначКритерия = "2" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000110003003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000110003003.Значение;
				НовСтрока.ТребРез = 2;
				
			КонецЕсли;
		ИначеЕсли КодКритерия = "П000120000100" Тогда //признак налогоплательщика раздела 1.1
			Если ЗначКритерия = "1" Тогда
				
				//код КБК раздела 1.2
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000120011003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000120011003.Значение;
				НовСтрока.ТребРез = 1;
				
			ИначеЕсли ЗначКритерия = "2" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000120011003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000120011003.Значение;
				НовСтрока.ТребРез = 2;
				
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ЗависимЗнач Из ТЗЗависимЗнач Цикл
			СвойстваЗависимогоПоказателя = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ЗависимЗнач.ИмяПоказателя);
			Если СвойстваЗависимогоПоказателя <> Неопределено И СвойстваЗависимогоПоказателя.ТаблицаЗначений <> Неопределено Тогда
				//поиск строки списка выбора, соответствующую текущему значению зависимого показателя
				СтрокиСписка=СвойстваЗависимогоПоказателя.ТаблицаЗначений.НайтиСтроки(Новый Структура("Код",СокрЛП(Строка(ЗависимЗнач.ОбластьПоказателя))));
				Если СтрокиСписка.Количество() > 0 Тогда
					СтрокаСписка = СтрокиСписка[0];
					Рез = ?(СтрокаСписка.РезультатПроверки = "",0,Число(СтрокаСписка.РезультатПроверки));
					Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(Рез) И Рез > 0 Тогда
						Если ЗависимЗнач.ТребРез <> Рез Тогда
							//очистка значения зависмого параметра - т.к. не соответствует измененному значению критерия
							ЗависимЗнач.ОбластьПоказателя = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	//расчет выполняется в структуре, обновляем каждое значение после ввода
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
	
	Если ИмяПоказателя = "П002000000100" 
	 ИЛИ ИмяПоказателя = "П002050000100"
	 ИЛИ ИмяПоказателя = "П002050012003"
	 ИЛИ ИмяПоказателя = "П002050012103" Тогда //Будут автоматически сформированы разделы 1.1 и 1.2 и пересчитан весь отчет
		
		РасчетНаСервере();
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П002000029003"
	 ИЛИ ИмяПоказателя = "П002000030003"
	 ИЛИ ИмяПоказателя = "П002000031003"
	 ИЛИ ИмяПоказателя = "П002000032003"
	 ИЛИ ИмяПоказателя = "П002000033003"
	 ИЛИ ИмяПоказателя = "П002000034003" Тогда
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
	КонецЕсли;
	
	Если ИмяРаздела    = "Раздел1_1" 
		ИЛИ ИмяРаздела = "Раздел1_2" 
		ИЛИ ИмяРаздела = "Лист02" 
		ИЛИ ИмяРаздела = "Лист02_Прил1" 
		ИЛИ ИмяРаздела = "Лист02_Прил2" 
		ИЛИ ИмяРаздела = "Лист02_Прил3" 
		ИЛИ ИмяРаздела = "Лист02_Прил4" 
		ИЛИ ИмяРаздела = "Лист02_Прил5" 
		ИЛИ ИмяРаздела = "Лист03"
		ИЛИ ИмяРаздела = "Лист03Продолжение"
		ИЛИ ИмяРаздела = "Лист04"
		ИЛИ ИмяРаздела = "Лист05"
		ИЛИ ИмяРаздела = "Лист06"
		ИЛИ ИмяРаздела = "Лист07" Тогда
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере всех разделов
		
	КонецЕсли;

КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Истина;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = Истина;
	ИмяГруппы = "";
	Если ИмяРаздела = "Титульный" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяРаздела = "Лист06" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Лист07" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Ложь;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяРаздела = "Приложение" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Ложь;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	КонецЕсли; 
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	
	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
							Если СохранятьМногострКакТЗ Тогда
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела;
							Иначе
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела[ИмяГруппы];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			Если ИмяГруппы = Лев(ИмяПоказателя, 11) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 13);
				СтрИнд = Сред(ИмяПоказателя, 14);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначениеПоказателя;
				КонецЕсли; 
			КонецЕсли;
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //СохранитьЗначениеПоказателяВСтруктуре()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = "Декларация по налогу на прибыль за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаСервере
Процедура ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыПрил5НаСервере(ДанныеАктивнойСтраницы)
	
	ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыПрил5(ЭтаФорма, ДанныеАктивнойСтраницы);
	
КонецПроцедуры //ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыПрил5НаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыПрил5(Форма, ДанныеАктивнойСтраницы)
	
	Перем ЗначВГруппуОПВходитОрганизация;
	
	ЦветБелый = Новый Цвет(255, 255, 255); // Белый.
	Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Значение    = "";
	Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветБелый;
	Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Ложь;
	
	Если ДанныеАктивнойСтраницы.Свойство("П002050001000", ЗначВГруппуОПВходитОрганизация) Тогда
		
		Если ЗначВГруппуОПВходитОрганизация = "4" Тогда
			
			Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
				
				Форма.ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
				
				Если Форма.ВГруппуОПВходитОрганизация Тогда
					ЦветЖелтый = Новый Цвет(255, 255, 192); // Желтый.
					Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Значение    = "V";
					Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветЖелтый;
					Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Истина;
				КонецЕсли;
				
			Иначе
				
				Форма.ВГруппуОПВходитОрганизация = Ложь;
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
	
	Форма.ВГруппуОПВходитОрганизация = Ложь;
	
КонецПроцедуры //ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыПрил5()

&НаСервере
Процедура ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницуНаСервере(Признак, СниматьРанееУстановленныеПризнаки)

	ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ЭтаФорма, Признак, СниматьРанееУстановленныеПризнаки);

КонецПроцедуры //ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницуНаСервере()

// ДобавитьПризнакВхожденияОрганизацииВГруппуОП
//
&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Форма, Знач Признак, СниматьРанееУстановленныеПризнаки)
	
	Перем ДанныеСтраницы;
	
	АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02_Прил5.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	ДанныеСтраницы = Неопределено;
	
	Если АктивныеСтраницы.Количество() > 0 Тогда
		АктивнаяСтраница = АктивныеСтраницы[0];
		Если АктивнаяСтраница.Данные.Количество() > 0 Тогда
			ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
		КонецЕсли;
		Если ДанныеСтраницы = Неопределено Тогда
			Возврат;
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 
	
	ДанныеСтраницы.Вставить("ВГруппуОПВходитОрганизация", Признак);
	
	Если СниматьРанееУстановленныеПризнаки Тогда
		// Если флаг был возведен и на других листах декларации, тогда снимем его.
		Для каждого Страница Из Форма.ТаблицаСтраницыЛист02_Прил5 Цикл
			ДанныеСтраницы = ?(Страница.Данные.Количество() > 0, Страница.Данные[0].Значение, Неопределено);
			Если ДанныеСтраницы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ДанныеСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
				Если (ДанныеСтраницы.ВГруппуОПВходитОрганизация) И (НЕ Страница.АктивнаяСтраница) И (Признак) Тогда
					
					// ДанныеСтраницы.ВГруппуОПВходитОрганизация = НЕ Признак; // Противоположный признак.
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Уже введен экземпляр приложения 5 к листу 02 с признаком вхождения организации в группу обособленных подразделений.'");
					Сообщение.Сообщить();
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; // СниматьРанееУстановленныеПризнаки
	
КонецПроцедуры // ДобавитьПризнакВхожденияОрганизацииВГруппуОП

&НаКлиенте
Процедура ВГруппуОПВходитОрганизацияПриИзменении(Элемент)

	СохранитьДанныеРаздела("Лист02_Прил5", Ложь, Ложь);
	
	СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Если Истина - рассчитываем при переходах, сохранении, печати.
	
КонецПроцедуры

// Выгрузить()
//
&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры
 // Выгрузить()

// ВыгрузитьОтчет()
//
&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры
 // ПроверитьВыгрузку()

// ПроверитьВыгрузкуОтчета()
//
&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции // ПроверитьПоказатели()

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // УниверсальнаяВыгрузка()

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		
	Возврат Истина;
	
КонецФункции // УниверсальнаяВыгрузкаXMLНаСервере()

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции // СформироватьСтруктуруПоказателей()

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",		РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",			"1151006");
	ПараметрыВыгрузки.Вставить("ДатаДок",		Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",	Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",		СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",		Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",		СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",		СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",		СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("ФормРеорг", 	СокрЛП(Титульный.КодФормыОрг));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг",	СокрЛП(Титульный.ИНН_Реорг));
	ПараметрыВыгрузки.Вставить("КППРеорг",		СокрЛП(Титульный.КПП_Реорг));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",				"NO_PRIB_1_002_00_05_02_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_PRIB");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Прибыль");
	
	ПараметрыВыгрузки.Вставить("ИдФайл",		СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СтруктураXML503");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции // ИзвлечьСтруктуруXML()

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("220");
	ВозможныеКодыПоМесту.Добавить("223");
	ВозможныеКодыПоМесту.Добавить("231");
	
	ВозможныеЗначенияПоказателей = Новый Соответствие;
	ВозможныеЗначенияПоказателей.Вставить("П000110000100", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П000120000100", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П000130001003", "1|2|3|4|6");
	ВозможныеЗначенияПоказателей.Вставить("П002000000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002010000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002020000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002020013503", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П002030000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002040000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002050001000", "1|2|3|4");
	ВозможныеЗначенияПоказателей.Вставить("П002050002002", "0|1");
	ВозможныеЗначенияПоказателей.Вставить("П002060000200", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П002060000300", "21|31|33|34|35|36|37|38|39|40|41|42|43|44|45|46|50");
	ВозможныеЗначенияПоказателей.Вставить("П002070000200", "1|2");
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации (обособленного подразделения)!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;

	Если (НЕ ПустаяСтрока(ПараметрыВыгрузки.ИННЮЛРеорг) ИЛИ НЕ ПустаяСтрока(ПараметрыВыгрузки.КППРеорг)) 
		И ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код формы реорганизации!", "Титульный", "КодФормыОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка на незаполненный отчет
	Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1_1, Раздел1_3, Лист02") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен, как минимум, один из следующих разделов: ""Раздел 1.1"", ""Раздел 1.3"" или ""Лист 02"".", "Раздел1_1", "П000110000100");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	// проверка раздела 1.1
	ДанныеРаздела11 = мДанныеОтчета.Раздел1_1;
	Для Каждого Стр Из ДанныеРаздела11 Цикл
		НомерСтраницы = ДанныеРаздела11.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_1", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан признак налогоплательщика!", "Раздел1_1", "П000110000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П000110000100", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 указан некорректный признак налогоплательщика!", "Раздел1_1", "П000110000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,"На странице " + НомерСтраницы + " раздела 1.1 не указан код по ОКАТО!", "Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110001003)) <> 11 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код по ОКАТО некорректной длины!", "Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110003003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации!", "Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110003003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины!", "Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в Федеральный бюджет)!", "Раздел1_1", "П000110004003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110006003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации!", "Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110006003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины!", "Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в бюджет субъекта Российской Федерации)!", "Раздел1_1", "П000110007003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_1", "П000110000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела 1.1!", "Раздел1_1", "П000110000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка раздела 1.2
	ДанныеРаздела12 = мДанныеОтчета.Раздел1_2;
	Для Каждого Стр Из ДанныеРаздела12 Цикл
		НомерСтраницы = ДанныеРаздела12.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_2", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан признак налогоплательщика!", "Раздел1_2", "П000120000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П000120000100", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 указан некорректный признак налогоплательщика!", "Раздел1_2", "П000120000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,"На странице " + НомерСтраницы + " раздела 1.2 не указан код по ОКАТО!", "Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120001003)) <> 11 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код по ОКАТО некорректной длины!", "Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120012003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120013003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120014003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120011003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации!", "Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120011003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины!", "Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120022003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120023003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120024003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120021003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации!", "Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120021003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины!", "Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыВыгрузки.ПериодОтч = "33" ИЛИ ПараметрыВыгрузки.ПериодОтч = "45" Тогда
		Если ЗначенияГруппыПоказателейПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_2", "П000120000100, П000120000200") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Сочетание признака налогоплательщика и кода квартала не должен повторяться на различных страницах раздела 1.2!", "Раздел1_2", "П000120000100");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_2", "П000120000100") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела 1.2!", "Раздел1_2", "П000120000100");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проверка раздела 1.3
	ДанныеРаздела13 = мДанныеОтчета.Раздел1_3;
	Для Каждого Стр Из ДанныеРаздела13 Цикл
		НомерСтраницы = ДанныеРаздела13.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_3", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код вида платежа!", "Раздел1_3", "П000130001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П000130001003", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан некорректный код вида платежа!", "Раздел1_3", "П000130001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130002003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код по ОКАТО!", "Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000130002003)) <> 11 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан код по ОКАТО некорректной длины!", "Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130003003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код бюджетной классификации!", "Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000130003003)) <> 20 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан код бюджетной классификации некорректной длины!", "Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
			НомСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000130004001_" + Формат(НомСтроки, "ЧГ=")) Цикл
				СтрП000130004001 = ДанныеСтраницы["П000130004001_" + Формат(НомСтроки, "ЧГ=")];
				СтрП000130004003 = ДанныеСтраницы["П000130004003_" + Формат(НомСтроки, "ЧГ=")];
				Если ЗначениеЗаполнено(СтрП000130004001) ИЛИ ЗначениеЗаполнено(СтрП000130004003) Тогда
					СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрП000130004003) И НЕ ЗначениеЗаполнено(СтрП000130004001) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 в строке " + Формат(НомСтроки, "ЧГ=") + " не указан срок уплаты!", "Раздел1_3", "П000130004001_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомСтроки = НомСтроки + 1;
			КонецЦикла;
			Если НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не заполнена ни одна строка 040!", "Раздел1_3", "П000130004001_1", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 02
	КодыНалогоплательщикаНаЛисте02 = Новый Массив;
	ДанныеЛист02 = мДанныеОтчета.Лист02;
	Для Каждого Стр Из ДанныеЛист02 Цикл
		НомерСтраницы = ДанныеЛист02.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если ЗначениеЗаполнено(ДанныеСтраницы.П002000000100) Тогда
			КодыНалогоплательщикаНаЛисте02.Добавить(СокрЛП(ДанныеСтраницы.П002000000100));
		КонецЕсли;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002000000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" не указан признак налогоплательщика!", "Лист02", "П002000000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002000000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" указан некорректный признак налогоплательщика!", "Лист02", "П002000000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02", "П002000000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Лист 02""!", "Лист02", "П002000000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
		
	// проверка приложения 1 к листу 02
	ДанныеЛист02Прил1 = мДанныеОтчета.Лист02_Прил1;
	Для Каждого Стр Из ДанныеЛист02Прил1 Цикл
		НомерСтраницы = ДанныеЛист02Прил1.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил1", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002010000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 1 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил1", "П002010000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002010000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 1 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил1", "П002010000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_Прил1", "П002010000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 1 к листу 02""!", "Лист02_Прил1", "П002010000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 2 к листу 02
	ДанныеЛист02Прил2 = мДанныеОтчета.Лист02_Прил2;
	Для Каждого Стр Из ДанныеЛист02Прил2 Цикл
		НомерСтраницы = ДанныеЛист02Прил2.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил2", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002020000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил2", "П002020000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002020000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил2", "П002020000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П002020013503)) И НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002020013503", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" указан некорректный код метода начисления амортизации!", "Лист02_Прил2", "П002020013503", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_Прил2", "П002020000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 2 к листу 02""!", "Лист02_Прил2", "П002020000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 3 к листу 02
	ДанныеЛист02Прил3 = мДанныеОтчета.Лист02_Прил3;
	Для Каждого Стр Из ДанныеЛист02Прил3 Цикл
		НомерСтраницы = ДанныеЛист02Прил3.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил3", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002030000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил3", "П002030000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002030000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил3", "П002030000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_Прил3", "П002030000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 3 к листу 02""!", "Лист02_Прил3", "П002030000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 4 к листу 02
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П002040004001", "П002040004003");
	СоответствиеИменЯчеек.Вставить("П002040005001", "П002040005003");
	СоответствиеИменЯчеек.Вставить("П002040006001", "П002040006003");
	СоответствиеИменЯчеек.Вставить("П002040007001", "П002040007003");
	СоответствиеИменЯчеек.Вставить("П002040008001", "П002040008003");
	СоответствиеИменЯчеек.Вставить("П002040009001", "П002040009003");
	СоответствиеИменЯчеек.Вставить("П002040010001", "П002040010003");
	СоответствиеИменЯчеек.Вставить("П002040011001", "П002040011003");
	СоответствиеИменЯчеек.Вставить("П002040012001", "П002040012003");
	СоответствиеИменЯчеек.Вставить("П002040013001", "П002040013003");
	ДанныеЛист02Прил4 = мДанныеОтчета.Лист02_Прил4;
	Для Каждого Стр Из ДанныеЛист02Прил4 Цикл
		НомерСтраницы = ДанныеЛист02Прил4.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил4", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002040000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил4", "П002040000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002040000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил4", "П002040000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Эл Из СоответствиеИменЯчеек Цикл
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение]) И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке " + Сред(Эл.Ключ, 9, 3) + " не задан год!", "Лист02_Прил4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) И СтрДлина(СокрЛП(ДанныеСтраницы[Эл.Ключ])) <> 4 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке " + Сред(Эл.Ключ, 9, 3) + " задано значение года некорректной длины!", "Лист02_Прил4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_Прил4", "П002040000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 4 к листу 02""!", "Лист02_Прил4", "П002040000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 5 к листу 02
	ДанныеЛист02Прил5 = мДанныеОтчета.Лист02_Прил5;
	Для Каждого Стр Из ДанныеЛист02Прил5 Цикл
		НомерСтраницы = ДанныеЛист02Прил5.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_Прил5", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак налогоплательщика!", "Лист02_Прил5", "П002050000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002050000100", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_Прил5", "П002050000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050001000) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак ""Расчет составлен""!", "Лист02_Прил5", "П002050001000", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002050001000", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указано некорректное значение признака ""Расчет составлен""!", "Лист02_Прил5", "П002050001000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050002001) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан КПП обособленного подразделения!", "Лист02_Прил5", "П002050002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002050002001)) <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указан КПП обособленного подразделения некорректной длины!", "Лист02_Прил5", "П002050002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050002003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указано наименование обособленного подразделения!", "Лист02_Прил5", "П002050002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050002002) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак возложения на обособленное подразделение обязанности по уплате налога!", "Лист02_Прил5", "П002050002002", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002050002002", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указано некорректное значение признака возложения на обособленное подразделение обязанности по уплате налога!", "Лист02_Прил5", "П002050002002", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П002050010003) И ЗначениеЗаполнено(ДанныеСтраницы.П002050011003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению!", "Лист02_Прил5", "П002050010003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 03 (раздел А)
	ДанныеЛист03 = мДанныеОтчета.Лист03;
	Для Каждого Стр Из ДанныеЛист03 Цикл
		НомерСтраницы = ДанныеЛист03.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист03", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002060000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указан вид дивидендов!", "Лист03", "П002060000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002060000200", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" указано некорректное значение кода вида дивидендов!", "Лист03", "П002060000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002060000300) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не задан налоговый (отчетный) период!", "Лист03", "П002060000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002060000300", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" указано некорректное значение налогового (отчетного) периода!", "Лист03", "П002060000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002060000400) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указан отчетный год!", "Лист03", "П002060000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002060000400)) <> 4 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" задан отчетный год некорректной длины!", "Лист03", "П002060000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 03 (раздел Б)
	ДанныеЛист03РазделБ = мДанныеОтчета.Лист03Продолжение;
	Для Каждого Стр Из ДанныеЛист03РазделБ Цикл
		НомерСтраницы = ДанныеЛист03РазделБ.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист03Продолжение", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002070000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел Б)"" не указан вид дивидендов!", "Лист03Продолжение", "П002070000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002070000200", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел Б)"" указано некорректное значение кода вида дивидендов!", "Лист03Продолжение", "П002070000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 03 (реестр)
	ДанныеЛист03Реестр = мДанныеОтчета.Лист03Реестр;
	Для Каждого Стр Из ДанныеЛист03Реестр Цикл
		НомерСтраницы = ДанныеЛист03Реестр.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист03Реестр", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080005003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указана дата перечисления дивидендов!", "Лист03Реестр", "П002080005003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указано наименование получателя дивидендов!", "Лист03Реестр", "П002080001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080002003_02) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указан код субъекта Российской Федерации!", "Лист03Реестр", "П002080002003_02", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002080002003_02)) <> 2 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" указан код субъекта Российской Федерации некорректной длины!", "Лист03Реестр", "П002080002003_02", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П002080002003_01)) И СтрДлина(СокрЛП(ДанныеСтраницы.П002080002003_01)) <> 6 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" указан индекс некорректной длины!", "Лист03Реестр", "П002080002003_01", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_01) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_02) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_03) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_01) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указана фамилия руководителя организации!", "Лист03Реестр", "П002080003003_01", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_02) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (Реестр)"" не указано имя руководителя организации!", "Лист03Реестр", "П002080003003_02", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 04
	ДанныеЛист04 = мДанныеОтчета.Лист04;
	Для Каждого Стр Из ДанныеЛист04 Цикл
		НомерСтраницы = ДанныеЛист04.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист04", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002090000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 04"" не указан вид дохода!", "Лист04", "П002090000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 05
	ДанныеЛист05 = мДанныеОтчета.Лист05;
	Для Каждого Стр Из ДанныеЛист05 Цикл
		НомерСтраницы = ДанныеЛист05.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист05", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002100000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 05"" не указан вид операции!", "Лист05", "П002100000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 07
	ДанныеЛист07 = мДанныеОтчета.Лист07;
	НомСтроки = 1;
	КодВидаПоступления = Неопределено;
	СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
	Пока ДанныеЛист07.Свойство("П002120001001_" + Формат(НомСтроки, "ЧГ="), КодВидаПоступления) Цикл
		СтрНомСтроки = Формат(НомСтроки, "ЧГ=");
		Если ЗначениеЗаполнено(ДанныеЛист07["П002120001002_" + СтрНомСтроки]) ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001003_" + СтрНомСтроки])
		ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001004_" + СтрНомСтроки]) ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001005_" + СтрНомСтроки])
		ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001006_" + СтрНомСтроки]) ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001007_" + СтрНомСтроки]) Тогда
			СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
			Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" в строке " + Формат(НомСтроки, "ЧГ=") + " не указан код вида поступлений!", "Лист07", "П002120001001_" + Формат(НомСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодВидаПоступления)) <> 3 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" в строке " + Формат(НомСтроки, "ЧГ=") + " указан код вида поступлений некорректной длины!", "Лист07", "П002120001001_" + Формат(НомСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	Если НЕ РазделПуст(ДеревоВыгрузки, "Лист07") И НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" не заполнена ни одна строка!", "Лист07", "П002120001001_1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции // ПроверитьВозможностьВыгрузки()

&НаСервере
Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, парамРазделы)
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если СтрНайти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Истина;
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ РазделПуст(ДеревоВыгрузки, Раздел) Тогда
			РазделыПусты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ РазделыПусты;
	
КонецФункции //ПроверитьРазделыНаНаличиеИнформации()

&НаСервере
Функция ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(Раздел, КодПокзателя)
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	ЗначенияПоказателя = Новый Массив;
	Для Каждого Стр Из ДанныеРаздела Цикл
		ЗначениеПоказателя = Стр.Данные[0].Значение[КодПокзателя];
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Если ЗначенияПоказателя.Найти(ЗначениеПоказателя) <> Неопределено Тогда
				Возврат Истина;
			Иначе
				ЗначенияПоказателя.Добавить(ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции //ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела()

&НаСервере
Функция ЗначенияГруппыПоказателейПовторяютсяНаРазличныхЭкземплярахРаздела(Раздел, СтрокаПоказателей)
	
	СтруктураПоказателей = Новый Структура(СтрокаПоказателей);
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	Для Каждого Показатель Из СтруктураПоказателей Цикл
		ТаблицаПоказателей.Колонки.Добавить(Показатель.Ключ);
	КонецЦикла;
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	
	Для Каждого Стр Из ДанныеРаздела Цикл
		НоваяСтрокаТаблицыПоказателей = ТаблицаПоказателей.Добавить();
		Для Каждого Показатель Из СтруктураПоказателей Цикл
			СтруктураПоказателей[Показатель.Ключ] = Стр.Данные[0].Значение[Показатель.Ключ];
			НоваяСтрокаТаблицыПоказателей[Показатель.Ключ] = Стр.Данные[0].Значение[Показатель.Ключ];
		КонецЦикла;
		
		НайденныеСтроки = ТаблицаПоказателей.НайтиСтроки(СтруктураПоказателей);
		Если НайденныеСтроки.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции //ЗначенияГруппыПоказателейПовторяютсяНаРазличныхЭкземплярахРаздела()

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции //ПолучитьПоказателиРаздела()

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции //ПоказательЗаполнен()

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000014003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000015003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000016003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000017003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002050006003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002070002003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002090003003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000110000100");
	// Раздел 1.2.
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120000200");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120001003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120011003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120021003");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002010000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002020000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002030000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002040000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002050000100");
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции //СтраницаПуста()

&НаСервере
Функция РазделПуст(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел);
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	РазделПуст = Истина;
	Если ТипЗнч(ДанныеРаздела) <> Тип("Структура") Тогда
		Для Каждого Стр Из ДанныеРаздела Цикл
			Если НЕ СтраницаПуста(Стр.Данные[0].Значение, ПоказателиРаздела) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции //РазделПуст()

&НаСервере
Функция ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, КодПоказателя, ВозможныеЗначенияПоказателей)
	
	ЗначенияПоказетелей = ВозможныеЗначенияПоказателей[КодПоказателя];
	Если ЗначенияПоказетелей = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат СтрНайти(ЗначенияПоказетелей, СокрЛП(ДанныеСтраницы[КодПоказателя])) <> 0;
	КонецЕсли;
	
КонецФункции //ЗначениеПоказателяВСпискеВозможных()

&НаСервере
Функция ПринудительнаяВыгрузкаПриложений1И2КЛисту02()
	
	ДатаОкончанияПериодаОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
	ЭтоСдачаПоИтогамКвартала = (Месяц(ДатаОкончанияПериодаОтчета) % 3 = 0);
	
	ПризнакПоМесту = мДанныеОтчета.Титульный.ПоМесту;
	ЭтоСдачаЗаОбособленноеПодразделение = (ПризнакПоМесту = "220" ИЛИ ПризнакПоМесту = "223" ИЛИ ПризнакПоМесту = "224");
	
	Возврат ЭтоСдачаПоИтогамКвартала И НЕ ЭтоСдачаЗаОбособленноеПодразделение;
	
КонецФункции //ПринудительнаяВыгрузкаПриложений1И2КЛисту02()

&НаСервере
Процедура ВыгрузитьПустыеПриложенияКЛисту02ПриНеобходимости(ДеревоВыгрузки, СтурктураУзла)
	
	Если СтурктураУзла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПринудительнаяВыгрузкаПриложений1И2КЛисту02() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураУзлаЛист02 = СтурктураУзла.Строки.Найти("РасчНал", "Код", Истина);
	СтруктураУзлаПрил1КЛисту02 = СтурктураУзла.Строки.Найти("ДохРеалВнеРеал", "Код", Истина);
	СтруктураУзлаПрил2КЛисту02 = СтурктураУзла.Строки.Найти("РасхРеалВнеРеал", "Код", Истина);
	
	УзелПрибыль = ДеревоВыгрузки.Строки.Найти("Прибыль", "Код", Истина);
	
	УзлыРаздела11 = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код", "НалПУАв"), Истина);
	Для Каждого УзелРаздела11 Из УзлыРаздела11 Цикл
		
		// находим атрибут ТипНП
		УзелТипНП = УзелРаздела11.Строки.Найти("ТипНП", "Код");
		Если УзелТипНП = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// получаем значение атрибута
		ЗначениеТипНП = УзелТипНП.Значение;
		Если НЕ ЗначениеЗаполнено(ЗначениеТипНП) Тогда
			Продолжить;
		КонецЕсли;
		
		// ищем узел листа 02 с тем же признаком типа налогоплательщика
		УзлыТипНПЛист02 = УзелПрибыль.Строки.НайтиСтроки(Новый Структура("Код, Ключ, Значение", "ТипНП", "П002000000100", ЗначениеТипНП), Истина);
		Если УзлыТипНПЛист02.Количество() = 0 Тогда
			УзелЛист02 = Неопределено;
		Иначе
			УзелЛист02 = УзлыТипНПЛист02[0].Родитель;
		КонецЕсли;
		
		УзелПрил1КЛисту02 = ?(УзелЛист02 = Неопределено, Неопределено, УзелЛист02.Строки.Найти("ДохРеалВнеРеал", "Код"));
		УзелПрил2КЛисту02 = ?(УзелЛист02 = Неопределено, Неопределено, УзелЛист02.Строки.Найти("РасхРеалВнеРеал", "Код"));
		
		// выгружаем пустой лист 02, если его нет в тексте выгрузки
		Если УзелЛист02 = Неопределено ИЛИ УзелЛист02.Строки.НайтиСтроки(Новый Структура("Тип", "А")).Количество() = 1 Тогда
			
			УзелНалПУ = УзелПрибыль.Строки.Найти("НалПУ", "Код");
			Если УзелНалПУ = Неопределено Тогда
				УзелЛист02 = ЗагрузитьПустойУзелРаздела(УзелПрибыль, СтруктураУзлаЛист02, Истина, 0, УзелЛист02);
			Иначе
				УзелЛист02 = ЗагрузитьПустойУзелРаздела(УзелПрибыль, СтруктураУзлаЛист02, Истина, УзелПрибыль.Строки.Индекс(УзелНалПУ) + 1, УзелЛист02);
			КонецЕсли;
			
			УзелТипНП = УзелЛист02.Строки.Найти("ТипНП", "Код");
			УзелТипНП.Значение = ЗначениеТипНП;
			ЗаполнитьНулямиНезаполненныеАтрибуты(УзелЛист02);
			
		КонецЕсли;
		
		// выгружаем пустое приложение 1 к листу 02, если его нет в тексте выгрузки
		Если УзелПрил1КЛисту02 = Неопределено Тогда
			УзелПрил1КЛисту02 = ЗагрузитьПустойУзелРаздела(УзелЛист02, СтруктураУзлаПрил1КЛисту02, , ОпределитьИндексСледующегоПослеАтрибутовУзла(УзелЛист02));
			УзелТипНП = УзелПрил1КЛисту02.Строки.Найти("ТипНП", "Код");
			УзелТипНП.Значение = ЗначениеТипНП;
			ЗаполнитьНулямиНезаполненныеАтрибуты(УзелПрил1КЛисту02);
		КонецЕсли;
		
		// выгружаем пустое приложение 2 к листу 02, если его нет в тексте выгрузки
		Если УзелПрил2КЛисту02 = Неопределено Тогда
			УзелПрил2КЛисту02 = ЗагрузитьПустойУзелРаздела(УзелЛист02, СтруктураУзлаПрил2КЛисту02, , УзелЛист02.Строки.Индекс(УзелПрил1КЛисту02) + 1);
			УзелТипНП = УзелПрил2КЛисту02.Строки.Найти("ТипНП", "Код");
			УзелТипНП.Значение = ЗначениеТипНП;
			ЗаполнитьНулямиНезаполненныеАтрибуты(УзелПрил2КЛисту02, Новый Структура("МетодНачАморт", "1"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ВыгрузитьПустыеПриложенияКЛисту02ПриНеобходимости()

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки);
	сохрСтруктураУзлаРасчНал = СохранитьСтруктураУзла(ДеревоВыгрузки, "РасчНал");
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	ВыгрузитьПустыеПриложенияКЛисту02ПриНеобходимости(ДеревоВыгрузки, сохрСтруктураУзлаРасчНал);
	
КонецПроцедуры // ЗаполнитьДанными()

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьУсловныеЭлементы()

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ВывестиПоказательВXML()

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции // ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом()

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДаннымиУзел()

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции // ВыгрузитьДеревоВXML()

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
			
КонецФункции // СформироватьИдФайл()

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции // СкопироватьУзел()

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ПолучитьПодчиненныйЭлемент()

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	// заполнение раздела 1
	НалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалПУ");
	
	// заполнение подраздела 1.1
	НалПУАв = ПолучитьПодчиненныйЭлемент(НалПУ, "НалПУАв");
	ДанныеРаздела11 = мДанныеОтчета.Раздел1_1;
	Для Каждого Стр Из ДанныеРаздела11 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Раздел1_1", УзелРодитель.Владелец()) Тогда
			ЭкзНалПУАв = СкопироватьУзел(НалПУ, НалПУАв);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалПУАв);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение подраздела 1.2
	НалПУМес = ПолучитьПодчиненныйЭлемент(НалПУ, "НалПУМес");
	ДанныеРаздела12 = мДанныеОтчета.Раздел1_2;
	Для Каждого Стр Из ДанныеРаздела12 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Раздел1_2", УзелРодитель.Владелец()) Тогда
			ЭкзНалПУМес = СкопироватьУзел(НалПУ, НалПУМес);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалПУМес);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение подраздела 1.3
	НалПУПроц = ПолучитьПодчиненныйЭлемент(НалПУ, "НалПУПроц");
	ДанныеРаздела13 = мДанныеОтчета.Раздел1_3;
	Для Каждого Стр Из ДанныеРаздела13 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Раздел1_3", УзелРодитель.Владелец()) Тогда
			ЭкзНалПУПроц = СкопироватьУзел(НалПУ, НалПУПроц);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалПУПроц);
		КонецЕсли;
	КонецЦикла;
	
	ПризнакПоМесту = мДанныеОтчета.Титульный.ПоМесту;
	ЭтоСдачаЗаОбособленноеПодразделение = (ПризнакПоМесту = "220" ИЛИ ПризнакПоМесту = "223" ИЛИ ПризнакПоМесту = "224");
	Если НЕ ЭтоСдачаЗаОбособленноеПодразделение Тогда
		// приложение 5 выгружается в составе листа 02
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "РаспрНалСубРФ"));
		
		// заполняем лист 02 и его приложения
		РасчНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНал");
		ДанныеЛиста02 = мДанныеОтчета.Лист02;
		ДанныеЛиста02Прил1 = мДанныеОтчета.Лист02_Прил1;
		ДанныеЛиста02Прил2 = мДанныеОтчета.Лист02_Прил2;
		ДанныеЛиста02Прил3 = мДанныеОтчета.Лист02_Прил3;
		ДанныеЛиста02Прил4 = мДанныеОтчета.Лист02_Прил4;
		ДанныеЛиста02Прил5 = мДанныеОтчета.Лист02_Прил5;
		
		СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02 = Новый Соответствие;
		
		// заполняем данные по экземплярам раздела "Лист 02"
		Для Каждого Стр Из ДанныеЛиста02 Цикл
			
			ПризнакНалогоплательщика = СокрЛП(Стр.Данные[0].Значение.П002000000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(Стр.Данные[0].Значение, "Лист02", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭкзРасчНал = СкопироватьУзел(УзелРодитель, РасчНал);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзРасчНал);
			
			СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭкзРасчНал);
			
		КонецЦикла;
		
		// выгружаем "Приложение 1 к листу 02"
		Для Каждого ЭкзЛист02Прил1 из ДанныеЛиста02Прил1 Цикл
			
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил1.Данные[0].Значение.П002010000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил1.Данные[0].Значение, "Лист02_Прил1", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 1 к листу 02
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил1.Данные[0].Значение, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ДохРеалВнеРеал")));
			
		КонецЦикла;
		
		// выгружаем "Приложение 2 к листу 02"
		Для Каждого ЭкзЛист02Прил2 из ДанныеЛиста02Прил2 Цикл
			
			// проверяем, заполнена ли страница
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил2.Данные[0].Значение.П002020000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил2.Данные[0].Значение, "Лист02_Прил2", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 2 к листу 02
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил2.Данные[0].Значение, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РасхРеалВнеРеал")));
			
		КонецЦикла;
		
		// выгружаем "Приложение 3 к листу 02"
		Для Каждого ЭкзЛист02Прил3 из ДанныеЛиста02Прил3 Цикл
			
			// проверяем, заполнена ли страница
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил3.Данные[0].Значение.П002030000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил3.Данные[0].Значение, "Лист02_Прил3", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 3 к листу 02
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил3.Данные[0].Значение, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РасчРасхОпер")));
			
		КонецЦикла;
		
		// выгружаем "Приложение 4 к листу 02"
		Для Каждого ЭкзЛист02Прил4 из ДанныеЛиста02Прил4 Цикл
			
			// проверяем, заполнена ли страница
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил4.Данные[0].Значение.П002040000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил4.Данные[0].Значение, "Лист02_Прил4", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 4 к листу 02
			УбытУменНБ = СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "УбытУменНБ"));
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил4.Данные[0].Значение, УбытУменНБ);
			
			// вручную выгружаем остатки неперенесенного убытка по годам
			ОстУбытНачПерГод = ПолучитьПодчиненныйЭлемент(УбытУменНБ, "ОстУбытНачПерГод");
			Для НомСтрДес = 4 По 13 Цикл
				КопияОстУбытНачПерГод = СкопироватьУзел(УбытУменНБ, ОстУбытНачПерГод);
				КодПоказателяГрафа1 = "П0020400" + Формат(НомСтрДес, "ЧЦ=2; ЧВН=") + "001";
				КодПоказателяГрафа3 = "П0020400" + Формат(НомСтрДес, "ЧЦ=2; ЧВН=") + "003";
				ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(КопияОстУбытНачПерГод, "Год"), ЭкзЛист02Прил4.Данные[0].Значение[КодПоказателяГрафа1]);
				ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(КопияОстУбытНачПерГод, "ОстУбыт"), ЭкзЛист02Прил4.Данные[0].Значение[КодПоказателяГрафа3]);
			КонецЦикла;
			
		КонецЦикла;
		
		// выгружаем "Приложение 5 к листу 02"
		Для Каждого ЭкзЛист02Прил5 из ДанныеЛиста02Прил5 Цикл
			
			// проверяем, заполнена ли страница
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил5.Данные[0].Значение.П002050000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил5.Данные[0].Значение, "Лист02_Прил5", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 5 к листу 02
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил5.Данные[0].Значение, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РаспрНалСубРФ")));
			
		КонецЦикла;
		
	Иначе
		// приложение 5 выгружается самостоятельно, удаляем блок выгрузки листа 02
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНал"));
		
		// выгружаем "Приложение 5 к листу 02"
		РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РаспрНалСубРФ");
		ДанныеЛиста02Прил5 = мДанныеОтчета.Лист02_Прил5;
		Для Каждого Стр Из ДанныеЛиста02Прил5 Цикл
			Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист02_Прил5", УзелРодитель.Владелец()) Тогда
				ЭкзРаспрНалСубРФ = СкопироватьУзел(УзелРодитель, РаспрНалСубРФ);
				ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзРаспрНалСубРФ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// заполняем лист 03
	НалУдНА = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалУдНА");
	
	// заполняем лист 03 (раздел А)
	НалДохДив = ПолучитьПодчиненныйЭлемент(НалУдНА, "НалДохДив");
	ДанныеЛист03РазделА = мДанныеОтчета.Лист03;
	Для Каждого Стр Из ДанныеЛист03РазделА Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист03", УзелРодитель.Владелец()) Тогда
			ЭкзНалДохДив = СкопироватьУзел(НалУдНА, НалДохДив);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалДохДив);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 03 (раздел Б)
	НалДохЦБ = ПолучитьПодчиненныйЭлемент(НалУдНА, "НалДохЦБ");
	ДанныеЛист03РазделБ = мДанныеОтчета.Лист03Продолжение;
	Для Каждого Стр Из ДанныеЛист03РазделБ Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист03Продолжение", УзелРодитель.Владелец()) Тогда
			ЭкзНалДохЦБ = СкопироватьУзел(НалУдНА, НалДохЦБ);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалДохЦБ);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 03 (реестр)
	РеестрСумДив = ПолучитьПодчиненныйЭлемент(НалУдНА, "РеестрСумДив");
	ДанныеЛист03Реестр = мДанныеОтчета.Лист03Реестр;
	Для Каждого Стр Из ДанныеЛист03Реестр Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист03Реестр", УзелРодитель.Владелец()) Тогда
			ЭкзРеестрСумДив = СкопироватьУзел(НалУдНА, РеестрСумДив);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзРеестрСумДив);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 04
	НалДохСтав = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалДохСтав");
	ДанныеЛист04 = мДанныеОтчета.Лист04;
	Для Каждого Стр Из ДанныеЛист04 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист04", УзелРодитель.Владелец()) Тогда
			ЭкзНалДохДив = СкопироватьУзел(УзелРодитель, НалДохСтав);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалДохДив);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 05
	НалБазОпОсоб = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалБазОпОсоб");
	ДанныеЛист05 = мДанныеОтчета.Лист05;
	Для Каждого Стр Из ДанныеЛист05 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист05", УзелРодитель.Владелец()) Тогда
			ЭкзНалБазОпОсоб = СкопироватьУзел(УзелРодитель, НалБазОпОсоб);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалБазОпОсоб);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 06
	Если НЕ СтраницаПуста(мДанныеОтчета.Лист06, "Лист06", УзелРодитель.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Лист06, ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДохРасНалБазаНПФ"));
	КонецЕсли;
	
	// заполняем лист 07
	Если НЕ СтраницаПуста(мДанныеОтчета.Лист07, "Лист07", УзелРодитель.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Лист07, ПолучитьПодчиненныйЭлемент(УзелРодитель, "ЦелИспИмущ"));
	КонецЕсли;
	
	// заполняем Приложение
	Если НЕ СтраницаПуста(мДанныеОтчета.Приложение, "Приложение", УзелРодитель.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Приложение, ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДохНеУчНБ_РасхУчОКН"));
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСодержательнуюЧасть()

&НаСервере
Функция ОпределитьИндексСледующегоПослеАтрибутовУзла(УзелЛист02)
	
	ИндексРезультат = 0;
	Для Каждого Стр Из  УзелЛист02.Строки Цикл
		Если Стр.Тип = "А" ИЛИ Стр.Тип = "A" Тогда
			ИндексРезультат = УзелЛист02.Строки.Индекс(Стр) + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат ИндексРезультат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНулямиНезаполненныеАтрибуты(Узел, Знач Исключения = Неопределено)
	
	Если Исключения = Неопределено Тогда
		Исключения = Новый Структура;
	КонецЕсли;
	
	Если (Узел.Тип = "А" ИЛИ Узел.Тип = "A") И НЕ ЗначениеЗаполнено(Узел.Значение) Тогда
		ЗначениеАтрибута = Неопределено;
		Узел.Значение = ?(Исключения.Свойство(Узел.Код, ЗначениеАтрибута), ЗначениеАтрибута, "0");
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ЗаполнитьНулямиНезаполненныеАтрибуты(Стр, Исключения);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНулямиНезаполненныеАтрибуты()

&НаСервере
Функция ЗагрузитьПустойУзелРаздела(УзелРодитель, СтруктураПустогоРаздела, ТолькоПервыйУровень = Ложь, ИндексУзла = Неопределено, УзелРаздела = Неопределено)
	
	Если ТолькоПервыйУровень Тогда
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		КонецЕсли;
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			Если (Стр.Тип = "А" ИЛИ Стр.Тип = "A") И УзелРаздела.Строки.Найти(Стр.Код, "Код") = Неопределено Тогда
				
				// ищем первое вхождение сложного элемента и вставляем на его место новый атрибут
				СложныйЭлемент = УзелРаздела.Строки.Найти("С", "Тип");
				Если СложныйЭлемент = Неопределено Тогда
					НовСтр = УзелРаздела.Строки.Добавить();
				Иначе
					НовСтр = УзелРаздела.Строки.Вставить(УзелРаздела.Строки.Индекс(СложныйЭлемент));
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			ЗагрузитьПустойУзелРаздела(УзелРаздела, Стр, ТолькоПервыйУровень);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УзелРаздела;
	
КонецФункции // ЗагрузитьПустойУзелРаздела()

&НаСервере
Функция СохранитьСтруктураУзла(Знач Узел, КодУзла = Неопределено, СтруктураУзла = Неопределено)
	
	ЭтоПервыйЗаход = (СтруктураУзла = Неопределено);
	
	Если ЭтоПервыйЗаход Тогда
		
		СтруктураУзла = Новый ДеревоЗначений;
		Для Каждого Колонка Из Узел.Колонки Цикл
			СтруктураУзла.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Узел = Узел.Строки.Найти(КодУзла, "Код", Истина);
		Если Узел = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	НовСтр = СтруктураУзла.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, Узел);
	
	Для Каждого Стр Из Узел.Строки Цикл
		СохранитьСтруктураУзла(Стр, , НовСтр);
	КонецЦикла;
	
	Если ЭтоПервыйЗаход Тогда
		Возврат СтруктураУзла;
	КонецЕсли;
	
КонецФункции // СохранитьСтруктураУзла()

&НаСервере
Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// обрабатываем суммы в разделе 1.1
	УзлыНалПУВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "НалПУВрем", "Раздел1_1"), Истина);
	Для Каждого УзелНалПУВрем Из УзлыНалПУВрем Цикл
		Если ЗначениеЗаполнено(УзелНалПУВрем.Значение) И УзелНалПУВрем.Значение <> "0" Тогда
			УзелНалПУ = УзелНалПУВрем.Родитель.Строки.Найти("НалПУ", "Код");
			УзелНалПУ.Значение = "-" + УзелНалПУВрем.Значение;
		КонецЕсли;
		УзелНалПУВрем.Родитель.Строки.Удалить(УзелНалПУВрем);
	КонецЦикла;
	
	// обрабатываем сумму в приложении 5 к листу 02
	УзлыСумНалПВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "СумНалПВрем", "Лист02_Прил5"), Истина);
	Для Каждого УзелСумНалПВрем Из УзлыСумНалПВрем Цикл
		Если ЗначениеЗаполнено(УзелСумНалПВрем.Значение) И УзелСумНалПВрем.Значение <> "0" Тогда
			УзелСумНалП = УзелСумНалПВрем.Родитель.Строки.Найти("СумНалП", "Код");
			УзелСумНалП.Значение = "-" + УзелСумНалПВрем.Значение;
		КонецЕсли;
		УзелСумНалПВрем.Родитель.Строки.Удалить(УзелСумНалПВрем);
	КонецЦикла;
	
КонецПроцедуры // ПостОбработкаДереваВыгрузки()

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОтсечьНезаполненныеНеобязательныеУзлы()

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции  // УзелПуст()

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЗаписатьУзелДереваВXML()

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
		
КонецПроцедуры // ПоказатьСДвухмернымШтрихкодомPDF417()

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");

		Сообщение.Сообщить();

		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли; 
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_3" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_3" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",		 "МЧБ_2010кв4_01_Титул");
	СоответствиеРазделовМакетам.Вставить("Раздел1_1",		 "МЧБ_2010кв4_02_Раздел_1_1");
	СоответствиеРазделовМакетам.Вставить("Раздел1_2",		 "МЧБ_2010кв4_03_Раздел_1_2");
	СоответствиеРазделовМакетам.Вставить("Раздел1_3",		 "МЧБ_2010кв4_04_Раздел_1_3");
	СоответствиеРазделовМакетам.Вставить("Лист02",			 "МЧБ_2010кв4_05_Лист_02");
	СоответствиеРазделовМакетам.Вставить("Лист02_Прил1",	 "МЧБ_2010кв4_06_Приложение_1_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("Лист02_Прил2",	 "МЧБ_2010кв4_07_Приложение_2_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("Лист02_Прил3",	 "МЧБ_2010кв4_08_Приложение_3_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("Лист02_Прил4",	 "МЧБ_2010кв4_09_Приложение_4_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("Лист02_Прил5",	 "МЧБ_2010кв4_10_Приложение_5_к_Листу_02");
	СоответствиеРазделовМакетам.Вставить("Лист03",			 "МЧБ_2010кв4_11_Лист_03_Раздел_А");
	СоответствиеРазделовМакетам.Вставить("Лист03Продолжение","МЧБ_2010кв4_12_Лист_03_Раздел_Б");
	СоответствиеРазделовМакетам.Вставить("Лист03Реестр",	 "МЧБ_2010кв4_13_Лист_03_Раздел_В");
	СоответствиеРазделовМакетам.Вставить("Лист04",			 "МЧБ_2010кв4_14_Лист_04");
	СоответствиеРазделовМакетам.Вставить("Лист05",			 "МЧБ_2010кв4_15_Лист_05");
	СоответствиеРазделовМакетам.Вставить("Лист06",			 "МЧБ_2010кв4_16_Лист_06");
	СоответствиеРазделовМакетам.Вставить("Лист07",			 "МЧБ_2010кв4_17_Лист_07");
	СоответствиеРазделовМакетам.Вставить("Приложение",		 "МЧБ_2010кв4_18_Приложение");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу = 5;
	МакетМЧБ.ПолеСлева = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
		
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		//определение исходного количества строк на листе МЧБ
		Если Парам1.ИмяСтраницы = "Раздел1_3" Тогда
			ИсхКолвоСтрокБлока = 22;
		ИначеЕсли Парам1.ИмяСтраницы = "Лист07" Тогда
			ИсхКолвоСтрокБлока = 9;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение" Тогда
			ИсхКолвоСтрокБлока = 20;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			                  
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						//очищение происходит после этого цикла
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
				КонецЦикла;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);

				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
								
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
			
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН2";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН3";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);

	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП2";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП3";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
				       		
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
						
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									
									////исключение+ 
									// для строки 40 Прил 5 производится округление до 11 знака после запятой
									Если СтрНайти(Область.Имя, "П002050004003") Тогда
										ДлинаДробнойЧасти = СтрДлина(СтрДробнаяЧасть);
										Если ДлинаДробнойЧасти > 11 Тогда
											СтрДробнаяЧасть = Формат(Окр(СтрДробнаяЧасть, -(ДлинаДробнойЧасти - 11)), "ЧГ=0");
										КонецЕсли;
									КонецЕсли;
									////исключение- 
									
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеВыведено
						И  (ПараметрыПечати.ИмяСтраницы = "Раздел1_3"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Лист07"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение") Тогда
						ЗначениеВыведено = Истина;
					КонецЕсли;
										
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
										
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);

					Сообщение.Сообщить();

				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // ЗаполнитьМакетМЧБ()

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
					
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
								
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
									
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
		
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции // ПолучитьОбщиеРеквизитыСТитульногоЛиста()

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции // АдресЗначенияОбласти()

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры // ПрисвоитьЗначениеОбласти()

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции // РазобратьСтрокуФормата()

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции // СобратьСтрокуФормата()

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции // ПолучитьЗначениеМЧБ()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			     СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("Периодичность", 			     СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ИНН",							 СтруктураДанныхТитульный.ИНН1);
	ПараметрыОтчета.Вставить("КПП", 						 СтруктураДанныхТитульный.КПП1);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки"); // Адрес временного хранилища, где размещена расшифровка результата автозаполнения.
		                                    		
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1_1",         		ТаблицаСтраницыРаздел1_1);
	Контейнер.Вставить("Раздел1_2",         		ТаблицаСтраницыРаздел1_2);
	Контейнер.Вставить("Раздел1_3",         		ТаблицаСтраницыРаздел1_3);
	Контейнер.Вставить("Лист02",            		ТаблицаСтраницыЛист02);
	Контейнер.Вставить("Лист02_Прил1",      		ТаблицаСтраницыЛист02_Прил1);
	Контейнер.Вставить("Лист02_Прил2",      		ТаблицаСтраницыЛист02_Прил2);
	Контейнер.Вставить("Лист02_Прил3",      		ТаблицаСтраницыЛист02_Прил3);
	Контейнер.Вставить("Лист02_Прил4",      		ТаблицаСтраницыЛист02_Прил4);
	Контейнер.Вставить("Лист02_Прил5",      		ТаблицаСтраницыЛист02_Прил5);
	Контейнер.Вставить("Лист03",           			ТаблицаСтраницыЛист03);
	Контейнер.Вставить("Лист03Продолжение", 		ТаблицаСтраницыЛист03Продолжение);
	Контейнер.Вставить("Лист03Реестр",      		ТаблицаСтраницыЛист03Реестр);
	Контейнер.Вставить("Лист04", 					ТаблицаСтраницыЛист04);
	Контейнер.Вставить("Лист05", 					ТаблицаСтраницыЛист05);
	Контейнер.Вставить("Лист06",					СтруктураДанныхЛист06);
	Контейнер.Вставить("Лист07", 					СтруктураДанныхЛист07);
	Контейнер.Вставить("Лист07_ДанныеДопСтрок", 	П0021200010);
	Контейнер.Вставить("Приложение", 		        СтруктураДанныхПриложение);
	Контейнер.Вставить("Приложение_ДанныеДопСтрок",	П0021300010);
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ЭтаФормаИмя = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ЭтаФормаИмя, ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета, Контейнер);
	
	НомерМесяца = Месяц(ЭтаФорма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если НЕ НомерМесяца = 3 И НЕ НомерМесяца = 6 И НЕ НомерМесяца = 9 И НЕ НомерМесяца = 12 Тогда
		
		Для Каждого СтраницаЛиста02_Прил1 Из ТаблицаСтраницыЛист02_Прил1 Цикл
			Если НЕ ЗначениеЗаполнено(СтраницаЛиста02_Прил1.Данные[0].Значение.П002010000100) Тогда
				СтраницаЛиста02_Прил1.Данные[0].Значение.П002010000100 = "1";
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_Прил2 Из ТаблицаСтраницыЛист02_Прил2 Цикл
			Если НЕ ЗначениеЗаполнено(СтраницаЛиста02_Прил2.Данные[0].Значение.П002020000100) Тогда
				СтраницаЛиста02_Прил2.Данные[0].Значение.П002020000100 = "1";
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_Прил3 Из ТаблицаСтраницыЛист02_Прил3 Цикл
			Если НЕ ЗначениеЗаполнено(СтраницаЛиста02_Прил3.Данные[0].Значение.П002030000100) Тогда
				СтраницаЛиста02_Прил3.Данные[0].Значение.П002030000100 = "1";
			КонецЕсли;
		КонецЦикла;
		
		РасчетНаСервере("Лист02_Прил3");
		РасчетНаСервере("Лист02_Прил2");
		РасчетНаСервере("Лист02_Прил1");
		РасчетНаСервере("Лист02", , Истина);
		
		Для Каждого СтраницаЛиста02_Прил1 Из ТаблицаСтраницыЛист02_Прил1 Цикл
			
			Для Каждого Показатель Из СтраницаЛиста02_Прил1.Данные[0].Значение Цикл
				
				Если ЗначениеЗаполнено(Показатель.Значение) Тогда
					Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
						СтраницаЛиста02_Прил1.Данные[0].Значение.Вставить(Показатель.Ключ, 0);
					Иначе
						СтраницаЛиста02_Прил1.Данные[0].Значение.Вставить(Показатель.Ключ, "");
					КонецЕсли;
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_Прил2 Из ТаблицаСтраницыЛист02_Прил2 Цикл
			
			Для Каждого Показатель Из СтраницаЛиста02_Прил2.Данные[0].Значение Цикл
				
				Если ЗначениеЗаполнено(Показатель.Значение) Тогда
					Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
						СтраницаЛиста02_Прил2.Данные[0].Значение.Вставить(Показатель.Ключ, 0);
					Иначе
						СтраницаЛиста02_Прил2.Данные[0].Значение.Вставить(Показатель.Ключ, "");
					КонецЕсли;
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_Прил3 Из ТаблицаСтраницыЛист02_Прил3 Цикл
			
			Для Каждого Показатель Из СтраницаЛиста02_Прил3.Данные[0].Значение Цикл
				
				Если ЗначениеЗаполнено(Показатель.Значение) Тогда
					Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
						СтраницаЛиста02_Прил3.Данные[0].Значение.Вставить(Показатель.Ключ, 0);
					Иначе
						СтраницаЛиста02_Прил3.Данные[0].Значение.Вставить(Показатель.Ключ, "");
					КонецЕсли;
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПараметрыОтчета.АдресВременногоХранилищаРасшифровки;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ЗаполнитьАвтоНаСервере()
   
&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 				    	СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры // Расшифровать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
		
	Если Элемент.ТекущаяОбласть.Имя = "ВходитВГруппуОП" И Элемент.ТекущаяОбласть.Гиперссылка Тогда
		
		Если Элемент.ТекущаяОбласть.Значение = "" Тогда
			Элемент.ТекущаяОбласть.Значение = "V";
			ЭтаФорма.ВГруппуОПВходитОрганизация = Истина;
		Иначе
			Элемент.ТекущаяОбласть.Значение = "";
			ЭтаФорма.ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;
		
		ВГруппуОПВходитОрганизацияПриИзменении(Элемент);
		
	КонецЕсли;
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0001300040") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0021300010") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0021200010") > 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
КонецФункции