&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений; 
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2012Кв1";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоДНБ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 11));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал = Перечисления.Периодичность.Квартал;
	СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;

	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0021200010";
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0001300040";
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0021300010";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1; //( 9)
	КолИсхСтрокИдГруппы2 = 1; //(21)
	КолИсхСтрокИдГруппы3 = 1; //(20)

	КолКолонокИдГруппы1 = 7;
	КолКолонокИдГруппы2 = 3; //(2 - но здесь макс. номер показателя раздела)
	КолКолонокИдГруппы3 = 4;
	
	СтруктураДанныхТитульный  = Новый Структура;
	СтруктураДанныхЛист06     = Новый Структура;
	СтруктураДанныхЛист07     = Новый Структура;
	СтруктураДанныхПриложение = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураРеквизитовФормы.мИдГруппы3);

	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_1",     "ТаблицаСтраницыРаздел1_1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_2",     "ТаблицаСтраницыРаздел1_2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_3",     "ТаблицаСтраницыРаздел1_3"); //многостраничный и многострочный
	мСтруктураМногостраничныхРазделов.Вставить("Лист02",        "ТаблицаСтраницыЛист02");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_1",      "ТаблицаСтраницыЛист02_1");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_2",      "ТаблицаСтраницыЛист02_2");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_3",      "ТаблицаСтраницыЛист02_3");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_4",      "ТаблицаСтраницыЛист02_4");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_5",      "ТаблицаСтраницыЛист02_5");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_6",      "ТаблицаСтраницыЛист02_6");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_6а",     "ТаблицаСтраницыЛист02_6а");
	мСтруктураМногостраничныхРазделов.Вставить("Лист03А",       "ТаблицаСтраницыЛист03А");
	мСтруктураМногостраничныхРазделов.Вставить("Лист03Б", 		"ТаблицаСтраницыЛист03Б");
	мСтруктураМногостраничныхРазделов.Вставить("Лист03В",       "ТаблицаСтраницыЛист03В");
	мСтруктураМногостраничныхРазделов.Вставить("Лист04",        "ТаблицаСтраницыЛист04");
	мСтруктураМногостраничныхРазделов.Вставить("Лист05",        "ТаблицаСтраницыЛист05");

	// Структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолИсхСтрокИдГруппы3);

	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолКолонокИдГруппы3);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "20/08/2013";;
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1151006";

	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.04", Истина);

	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;

	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
                                      	
	СтруктураРеквизитовФормы.НаимОрг = Неопределено;
	Рез = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "НаимЮЛПол").Свойство("НаимЮЛПол", СтруктураРеквизитовФормы.НаимОрг);
	СтруктураРеквизитовФормы.НаимОрг = ?(Рез, СтруктураРеквизитовФормы.НаимОрг, "");

	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	Инициализация(Параметры.БезОткрытияФормы);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоМесту");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("ВГруппуОПВходитОрганизацияДоступность", Ложь);
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоДНБ");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьКвартал");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьМесяц");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ОКАТОДляРазделов");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_6.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_6а.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист03А.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист03Б.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист03В.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист04.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист05.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	УстановитьМаскиВПоляхВвода(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьСоответствиеОКАТОСубъектамРФ();
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
				
		СформироватьСпискиВыбора();
				
	КонецЕсли;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			
		СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		ПолучитьСтавкиНалога(ЭтаФорма, "Титульный");
			
		СтруктураРеквизитовФормы.мПоМесту = "214";
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
			
		ПроставитьПрПл_1();
			
		ЗаполнитьКБКРаздел1(Истина);
		ЗаполнитьКБКРаздел2(Истина);
		
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		КонецЕсли;

		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		ЗаполнитьПустыеСтруктурыДанных();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			ЗаполнитьПериодОтчета();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
		
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьРежимЗаполненияПоказателей();
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
	 
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовНаСервере();

	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
		
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗначениеТаймера = ЗначениеТаймера();
		ЗаполнитьАвтоНаСервере();
		ЗаписатьЗамер(ЗначениеТаймера);
		СформироватьДеревоРазделовОтчетаНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимЗаполненияПоказателей(ИмяТекущейСтраницы = "") Экспорт
			
	СдачаПоКварталам = (СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал);
	СдачаПоМесяцам = (СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц);
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	// Лист 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02" Тогда
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П002000001003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П002000002003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П002000003003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П002000004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П002000005003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002000001003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002000002003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002000003003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002000004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002000005003");
		КонецЕсли;
		
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П002000011003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002000011003");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 1 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_1" Тогда
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010001103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010001203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010001303");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010001403");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010002003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010010003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010010103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010010203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010010303");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010010403");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002010010503");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П002010010003");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 2 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_2" Тогда
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020001003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020002003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020003003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020004103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020004203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020005203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020005903");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020006003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020007003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020009003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020010003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020013103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020013203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020013303");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020013403");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020013503");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020020003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020020103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020020403");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020020503");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020030003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020030103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002020030203");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П002020030003");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 3 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_3" Тогда
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030003003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030005003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030006003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030007003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030008003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030010003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030011003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030012003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030013003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030014003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030017003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030018003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030019003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002030020003");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 4 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_4" Тогда
		
		Если НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 5, "П002040016003");
		КонецЕсли;
		
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040002003");
			
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040004001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040005001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040006001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040007001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040008001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040009001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040010001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040011001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040012001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040013001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040005003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040006003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040007003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040008003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040009003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040010003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040011003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040012003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040013003");
			
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040014003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002040015003");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 5 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_5" Тогда
		
		Если (СдачаПоКварталам И НомерМесяца = 9)
			ИЛИ (СдачаПоМесяцам И НомерМесяца = 11) Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002050012103");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 5, "П002050012103");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 6 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_6" Тогда
		
		Если СдачаПоМесяцам И НомерМесяца = 11 Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 5, "П002140012003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002140012003");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если КодПоказателя = "П002000032003"
			 ИЛИ КодПоказателя = "П002000033003"
			 ИЛИ КодПоказателя = "П002000034003"
			 ИЛИ КодПоказателя = "П002140000601" Тогда
			 
				чВариантЗаполнения = 5;
			 
		 	КонецЕсли;

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Раздел 1.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02";
	СтрокаУровня1.Представление            = "Лист 02";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_1";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_2";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_3";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_4";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_5";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_6";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_6а";
	СтрокаУровня1.Представление            = "Лист 02. Прил. 6а";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03А";
	СтрокаУровня1.Представление            = "Лист 03. Раздел А";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03Б";
	СтрокаУровня1.Представление            = "Лист 03. Раздел Б";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03В";
	СтрокаУровня1.Представление            = "Лист 03. Раздел В";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист04";
	СтрокаУровня1.Представление            = "Лист 04";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист05";
	СтрокаУровня1.Представление            = "Лист 05";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист06";
	СтрокаУровня1.Представление            = "Лист 06";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист07";
	СтрокаУровня1.Представление            = "Лист 07";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение";
	СтрокаУровня1.Представление            = "Приложение";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_6а";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03А";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03Б";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03В";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист04";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 6;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист05";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 5;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист06";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист07";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;

КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2012Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыОрг", 1, , "Выбор кода формы организации", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["Периоды"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002060000300", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодовЛист03А"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120000200", 2, , "Выбор кода квартала", КоллекцияСписковВыбора["КодыКварталовРаздел1_2"]);

	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002000000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002010000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002020000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002030000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002040000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002050000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщикаВариант2"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110001003", 11, "ОКАТО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120001003", 11, "ОКАТО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130002003", 11, "ОКАТО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002140000301", 11, "ОКАТО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002150000301", 11, "ОКАТО");

	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= '2013-01-01' Тогда
		КБКФедеральныйБюджет = "КБКВариант1_2013";
		КБКБюджетСубъектаРФ  = "КБКВариант2_2013";
	Иначе
		КБКФедеральныйБюджет = "КБКВариант1";
		КБКБюджетСубъектаРФ  = "КБКВариант2";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110003003", 20, , "Выбор КБК", КоллекцияСписковВыбора[КБКФедеральныйБюджет]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110006003", 20, , "Выбор КБК", КоллекцияСписковВыбора[КБКБюджетСубъектаРФ]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120011003", 20, , "Выбор КБК", КоллекцияСписковВыбора[КБКФедеральныйБюджет]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120021003", 20, , "Выбор КБК", КоллекцияСписковВыбора[КБКБюджетСубъектаРФ]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130003003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБКВариант3"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130001003", 1, , "Выбор вида платежа", КоллекцияСписковВыбора["ВидыПлатежа"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002050001000", 1, , "Выбор вида составления расчета", КоллекцияСписковВыбора["ВидыРасчетов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002050002002", 1, , "Выбор вида возложения обязанностей", КоллекцияСписковВыбора["ВидыВозложений"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002020013503", 1, , "Выбор метода начисления амортизации", КоллекцияСписковВыбора["МетодыНА"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002060000200", 1, , "Выбор вида дивидендов", КоллекцияСписковВыбора["ВидыДивидендов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002070000200", 1, , "Выбор вида дохода", КоллекцияСписковВыбора["ВидыДоходаВариант1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002090000200", 1, , "Выбор вида дохода", КоллекцияСписковВыбора["ВидыДоходаВариант2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002100000200", 1, , "Выбор вида операции", КоллекцияСписковВыбора["ВидыОперации"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002120001001", 3, , "Выбор кода вида поступлений", КоллекцияСписковВыбора["КодыВидаПоступлений"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002130001001", 3, , "Выбор кода вида доходов", КоллекцияСписковВыбора["КодыВидаДоходов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002130001003", 3, , "Выбор кода вида расходов", КоллекцияСписковВыбора["КодыВидаРасходов"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002140000601", 2, , "Выбор кода субъекта РФ", КоллекцияСписковВыбора["СубъектыРФ"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002150000501", 1, , "Выбор вида расчета", КоллекцияСписковВыбора["ВидыРасчетаУчастникаКонсолидированнойГруппы"]);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМаскиВПоляхВвода(ИмяТекРаздела)
	
	// титульный
	Если ИмяТекРаздела = "Титульный" Тогда
		ТабличныйДокумент.Области["Прил"].Маска = "999";
		ТабличныйДокумент.Области["КодИМНС"].Маска = "9999";
		
	// Раздел 1.1.
	ИначеЕсли ИмяТекРаздела = "Раздел1_1" Тогда
		ТабличныйДокумент.Области.П000110000100.Маска = "9";
		ТабличныйДокумент.Области.П000110001003.Маска = "99999999999";
		ТабличныйДокумент.Области.П000110003003.Маска = "99999999999999999999";
		ТабличныйДокумент.Области.П000110006003.Маска = "99999999999999999999";
		
	// Раздел 1.2.
	ИначеЕсли ИмяТекРаздела = "Раздел1_2" Тогда
		ТабличныйДокумент.Области.П000120000100.Маска = "9";
		ТабличныйДокумент.Области.П000120000200.Маска = "99";
		ТабличныйДокумент.Области.П000120001003.Маска = "99999999999";
		ТабличныйДокумент.Области.П000120011003.Маска = "99999999999999999999";
		ТабличныйДокумент.Области.П000120021003.Маска = "99999999999999999999";
		
	// Раздел 1.3.
	ИначеЕсли ИмяТекРаздела = "Раздел1_3" Тогда
		ТабличныйДокумент.Области.П000130001003.Маска = "9";
		ТабличныйДокумент.Области.П000130002003.Маска = "99999999999";
		ТабличныйДокумент.Области.П000130003003.Маска = "99999999999999999999";

	//Лист 02.
	ИначеЕсли ИмяТекРаздела = "Лист02" Тогда
		ТабличныйДокумент.Области.П002000000100.Маска = "9";
		
	// Приложение 1 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_1" Тогда
		ТабличныйДокумент.Области.П002010000100.Маска = "9";
		
	// Приложение 2 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_2" Тогда
		ТабличныйДокумент.Области.П002020000100.Маска = "9";
		
	// Приложение 3 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_3" Тогда
		ТабличныйДокумент.Области.П002030000100.Маска = "9";
		
	// Приложение 4 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_4" Тогда
		ТабличныйДокумент.Области.П002040000100.Маска = "9";
		ТабличныйДокумент.Области.П002040004001.Маска = "9999";
		ТабличныйДокумент.Области.П002040005001.Маска = "9999";
		ТабличныйДокумент.Области.П002040006001.Маска = "9999";
		ТабличныйДокумент.Области.П002040007001.Маска = "9999";
		ТабличныйДокумент.Области.П002040008001.Маска = "9999";
		ТабличныйДокумент.Области.П002040009001.Маска = "9999";
		ТабличныйДокумент.Области.П002040010001.Маска = "9999";
		ТабличныйДокумент.Области.П002040011001.Маска = "9999";
		ТабличныйДокумент.Области.П002040012001.Маска = "9999";
		ТабличныйДокумент.Области.П002040013001.Маска = "9999";
		
	// Приложение 5 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_5" Тогда
		ТабличныйДокумент.Области.П002050000100.Маска = "9";
		ТабличныйДокумент.Области.П002050001000.Маска = "9";
		ТабличныйДокумент.Области.П002050002001.Маска = "999999999";
		ТабличныйДокумент.Области.П002050002002.Маска = "9";
		
	// Приложение 6 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_6" Тогда
				
		ТабличныйДокумент.Области.П002140000101.Маска = "999999999999";
		ТабличныйДокумент.Области.П002140000201.Маска = "999999999";
		ТабличныйДокумент.Области.П002140000301.Маска = "99999999999";
		
	// Приложение 6а к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_6а" Тогда
		
		ТабличныйДокумент.Области.П002150000101.Маска = "999999999999";
		ТабличныйДокумент.Области.П002150000201.Маска = "999999999";
		ТабличныйДокумент.Области.П002150000301.Маска = "99999999999";
		ТабличныйДокумент.Области.П002150000501.Маска = "9";

	// Лист 03А.
	ИначеЕсли ИмяТекРаздела = "Лист03А" Тогда
		ТабличныйДокумент.Области.П002060000200.Маска = "9";
		ТабличныйДокумент.Области.П002060000300.Маска = "99";
		ТабличныйДокумент.Области.П002060000400.Маска = "9999";
		
	// Лист 03Б.
	ИначеЕсли ИмяТекРаздела = "Лист03Б" Тогда
		ТабличныйДокумент.Области.П002070000200.Маска = "9";
		
	// Лист 04.
	ИначеЕсли ИмяТекРаздела = "Лист04" Тогда
		ТабличныйДокумент.Области.П002090000200.Маска = "9";
		
	// Лист 05.
	ИначеЕсли ИмяТекРаздела = "Лист05" Тогда
		ТабличныйДокумент.Области.П002100000200.Маска = "9";
		
	// Лист 07.
	ИначеЕсли ИмяТекРаздела = "Лист07" Тогда
		Для Сч = 1 По ЭтаФорма.П0021200010.Количество() Цикл
			ТабличныйДокумент.Области["П002120001001_" + Сч].Маска = "999";
		КонецЦикла;
		
	// Приложение.
	ИначеЕсли ИмяТекРаздела = "Приложение" Тогда
		Для Сч = 1 По ЭтаФорма.П0021300010.Количество() Цикл
			ТабличныйДокумент.Области["П002130001001_" + Сч].Маска = "999";
			ТабличныйДокумент.Области["П002130001003_" + Сч].Маска = "999";
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеОКАТОСубъектамРФ()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2012Кв1");
	
	ОбластьДанных = МакетСоставаПоказателей.Области.ОКАТОПоСубъектам;
	
	ВерхОбласти = ОбластьДанных.Верх;
	НизОбласти = ОбластьДанных.Низ;
	
	Для НомСтр = ВерхОбласти По НизОбласти Цикл
		
		КодСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
		НазваниеСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
		МаскаОКАТО = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
		
		Если НЕ ПустаяСтрока(КодСубъекта) И НЕ ПустаяСтрока(МаскаОКАТО) Тогда
			НоваяСтрока = СоответствиеОКАТОСубъектамРФ.Добавить();
			НоваяСтрока.КодСубъекта = КодСубъекта;
			НоваяСтрока.НазваниеСубъекта = НазваниеСубъекта;
			НоваяСтрока.МаскаОКАТО = МаскаОКАТО;
			
			НоваяСтрока.ДлинаМаски = СтрДлина(НоваяСтрока.МаскаОКАТО);
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеОКАТОСубъектамРФ.Сортировать("ДлинаМаски Убыв, МаскаОКАТО");
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
		
	Элементы.ОчиститьТекущуюСтраницу.Доступность = ?(ЗаголовокРаздела И Элемент.ТекущиеДанные.РазделМногостраничный, Ложь, Истина);
		
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	КМенюРО.Видимость = Элемент.ТекущиеДанные.РазделМногостраничный;
	КМенюТД.Видимость = Элемент.ТекущиеДанные.РазделМногострочный;
	
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
	
	КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
			
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, ЗаголовокРаздела);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		   И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.РазделМногострочный
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_3"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лист07"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение" Тогда
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
			
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лист02_5"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лист02_6а" Тогда
	 
		ВГруппуОПВходитОрганизацияДоступность = СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность;
		
		Если ВГруппуОПВходитОрганизацияДоступность Тогда
			ЦветЖелтый = Новый Цвет(255, 255, 192); // Желтый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветЖелтый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Истина;
		Иначе
			ЦветБелый = Новый Цвет(255, 255, 255); // Белый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветБелый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);

КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
		
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	ПриСменеСтраницы(ЭтаФорма, ИмяТекРаздела);

	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
	
		РасчетНаСервере();
	
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел1_1"
	 ИЛИ НаимРаздела = "Раздел1_2"
	 ИЛИ НаимРаздела = "Лист02"
	 ИЛИ НаимРаздела = "Лист02_1"
	 ИЛИ НаимРаздела = "Лист02_2"
	 ИЛИ НаимРаздела = "Лист02_3"
	 ИЛИ НаимРаздела = "Лист02_4"
	 ИЛИ НаимРаздела = "Лист02_5"
	 ИЛИ НаимРаздела = "Лист02_6"
	 ИЛИ НаимРаздела = "Лист02_6а"
	 ИЛИ НаимРаздела = "Лист03А"
	 ИЛИ НаимРаздела = "Лист03Б"
	 ИЛИ НаимРаздела = "Лист03В"
	 ИЛИ НаимРаздела = "Лист04"
	 ИЛИ НаимРаздела = "Лист05" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[НаимРаздела];
		
		АктивныеСтраницы = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			Если НаимРаздела = "Лист02_5"
			 ИЛИ НаимРаздела = "Лист02_6а" Тогда
				ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницуНаСервере(НаимРаздела, ВГруппуОПВходитОрганизация, Истина);
			КонецЕсли;
						
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли; 
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел1_3" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
							
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
				
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Лист07"
	      ИЛИ НаимРаздела = "Приложение" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	//программная установка типа (обход интерактивного запрета на точность больше 9)
	УстановитьТипЗначений(ИмяТекРаздела);
	
	ВГруппуОПВходитОрганизация = Ложь;

	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел1_1"
	 ИЛИ ИмяТекРаздела = "Раздел1_2"
	 ИЛИ ИмяТекРаздела = "Лист02"
	 ИЛИ ИмяТекРаздела = "Лист02_1"
	 ИЛИ ИмяТекРаздела = "Лист02_2"
	 ИЛИ ИмяТекРаздела = "Лист02_3"
	 ИЛИ ИмяТекРаздела = "Лист02_4"
	 ИЛИ ИмяТекРаздела = "Лист02_5"
	 ИЛИ ИмяТекРаздела = "Лист02_6"
	 ИЛИ ИмяТекРаздела = "Лист02_6а"
	 ИЛИ ИмяТекРаздела = "Лист03А"
	 ИЛИ ИмяТекРаздела = "Лист03Б"
	 ИЛИ ИмяТекРаздела = "Лист03В"
	 ИЛИ ИмяТекРаздела = "Лист04"
	 ИЛИ ИмяТекРаздела = "Лист05" Тогда
	 
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
	
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
				
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
			
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если ИмяТекРаздела = "Лист02_5"
		 ИЛИ ИмяТекРаздела = "Лист02_6а" Тогда
			
			ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыНаСервере(ИмяТекРаздела, СтруктураДанных);
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел1_3" Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
								
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
								
			КонецЕсли;
			
		КонецЕсли;
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Лист07"
	      ИЛИ ИмяТекРаздела = "Приложение" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьМаскиВПоляхВвода(ИмяТекРаздела);
		
	Если ИмяТекРаздела = "Титульный" Тогда
		
		ОбновитьДоступностьЭлементовНаСервере();
		
	Иначе
		
		ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);

		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначений(ИмяТекРаздела)
	
	ТипДоляНалоговойБазы = СтруктураРеквизитовФормы.мОписаниеТиповЧислоДНБ;
	
	Если ИмяТекРаздела = "Лист02_5" Тогда
		ТабличныйДокумент.Области.П002050004003.ТипЗначения = ТипДоляНалоговойБазы;
	ИначеЕсли ИмяТекРаздела = "Лист02_6" Тогда
		ТабличныйДокумент.Области.П002140004003.ТипЗначения = ТипДоляНалоговойБазы;
	ИначеЕсли ИмяТекРаздела = "Лист02_6а" Тогда
		ТабличныйДокумент.Области.П002150004003.ТипЗначения = ТипДоляНалоговойБазы;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЭлементовНаСервере()
	
	Перем ЦветФона;
	
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	
	флЕстьОбособ = (СтруктураРеквизитовФормы.мПоМесту = "220" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "223");
	
	Если флЕстьОбособ Тогда
		ТабличныйДокумент.Области.НаимОрг.Защита = Ложь;
		мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	Иначе
		ТабличныйДокумент.Области.НаимОрг.Значение = СтруктураРеквизитовФормы.НаимОрг;
		ТабличныйДокумент.Области.НаимОрг.Защита = Истина;
		мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
	КонецЕсли;
	
	ТабличныйДокумент.Области.НаимОрг.ЦветФона = ЦветФона;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьЭлементовНаКлиенте()
	
	Перем ЦветФона;
	
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	
	флЕстьОбособ = (СтруктураРеквизитовФормы.мПоМесту = "220" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "223");
	
	Если флЕстьОбособ Тогда
		ТабличныйДокумент.Области.НаимОрг.Защита = Ложь;
		мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	Иначе
		ТабличныйДокумент.Области.НаимОрг.Значение = СтруктураРеквизитовФормы.НаимОрг;
		ТабличныйДокумент.Области.НаимОрг.Защита = Истина;
		мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
	КонецЕсли;
	
	ТабличныйДокумент.Области.НаимОрг.ЦветФона = ЦветФона;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "" Тогда
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// Декларация по НДС. В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриСменеСтраницы(Форма, ИмяТекущейСтраницы) Экспорт
	
	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницы);
	
	ИзменитьВариантыЗаполненияПоказателей(Форма, ИмяТекущейСтраницы)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантыЗаполненияПоказателей(Форма, ИмяТекущейСтраницы)
	
	Перем ТекущаяОбласть;
	
	ТекущаяОбласть = Форма.ТабличныйДокумент;

	// вспомогательные сведения для определения вариантов заполнения ячеек
	НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	СтрПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
	
	ПоОбособленномуПодразделению = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223");
	ПоКонсолидированнойГруппе = (СтрПоМесту = "218");

	КодПериодаСдачиОтчетности = Форма.СтруктураДанныхТитульный.Период;
	
	СдачаПоКварталам = (Форма.СтруктураРеквизитовФормы.мПериодичность = Форма.СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал);
	СдачаПоМесяцам = (Форма.СтруктураРеквизитовФормы.мПериодичность = Форма.СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц);
	
	Форма.УстановитьРежимЗаполненияПоказателей(ИмяТекущейСтраницы);
	
	Если ИмяТекущейСтраницы = "Раздел1_2" Тогда
		
		ПризнакНалогоплательщика = СокрЛП(ТекущаяОбласть.Области.П000120000100.Значение);
		
		ЕстьАвансы = Ложь;
		Если ПризнакНалогоплательщика = "1" Тогда
			ЕстьАвансы = (СдачаПоКварталам И АвансовыеПлатежиРазличаются(Форма, "1,3"))
			        ИЛИ (СдачаПоМесяцам И ЕстьАвансовыеПлатежи(Форма, "1,3"))
			        ИЛИ (ПоОбособленномуПодразделению И ЕстьАвансовыеПлатежиОП(Форма, "1,3"))
			        ИЛИ (ПоКонсолидированнойГруппе И ЕстьАвансовыеПлатежиКГ(Форма, "1,3"));
		ИначеЕсли ПризнакНалогоплательщика = "2" Тогда
			ЕстьАвансы = (СдачаПоКварталам И АвансовыеПлатежиРазличаются(Форма, "2"))
			        ИЛИ (СдачаПоМесяцам И ЕстьАвансовыеПлатежи(Форма, "2"))
			        ИЛИ (ПоОбособленномуПодразделению И ЕстьАвансовыеПлатежиОП(Форма, "2"))
			        ИЛИ (ПоКонсолидированнойГруппе И ЕстьАвансовыеПлатежиКГ(Форма, "2"));
		КонецЕсли;
			
		Если (НомерМесяца = 9 И СдачаПоКварталам И ЕстьАвансы)
		 ИЛИ (НомерМесяца = 11 И СдачаПоМесяцам И ЕстьАвансы) Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000120000200");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000120000200");
			ТекущаяОбласть.Области.П000120000200.Значение = "";
		КонецЕсли;
	
	ИначеЕсли ИмяТекущейСтраницы = "Лист02" Тогда
		
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000011003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000011003");
		КонецЕсли;
		
		// вспомогательные значения
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П002050000100"));
		
		ПризнакНалогоплательщика = СокрЛП(ТекущаяОбласть.Области.П002000000100.Значение);
				
		// Строка 230.
		Если НЕ (Есть_Прил5 ИЛИ ПоКонсолидированнойГруппе) Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000023003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000023003");
		КонецЕсли; 
		
		// Строки 290-310 и 320-340.
		Если ПоКонсолидированнойГруппе Тогда
			Если КодПериодаСдачиОтчетности = "15" Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000030003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000031003");
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000034003");
				
			ИначеЕсли КодПериодаСдачиОтчетности = "67" Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000030003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000031003");
				
				ТекущаяОбласть.Области.П002000029003.Значение = "";
				ТекущаяОбласть.Области.П002000030003.Значение = "";
				ТекущаяОбласть.Области.П002000031003.Значение = "";
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000034003");
				
			ИначеЕсли КодПериодаСдачиОтчетности = "13" ИЛИ КодПериодаСдачиОтчетности = "14" Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000030003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000031003");
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000034003");
				
				ТекущаяОбласть.Области.П002000032003.Значение = "";
				ТекущаяОбласть.Области.П002000033003.Значение = "";
				ТекущаяОбласть.Области.П002000034003.Значение = "";

			Иначе
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002000029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000030003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000031003");
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000034003");
				
				ТекущаяОбласть.Области.П002000030003.Значение = "";
				ТекущаяОбласть.Области.П002000031003.Значение = "";
				ТекущаяОбласть.Области.П002000032003.Значение = "";
				ТекущаяОбласть.Области.П002000033003.Значение = "";
				ТекущаяОбласть.Области.П002000034003.Значение = "";
				
			КонецЕсли;
		Иначе
			// Для строки 340 вариант заполнения авторасчет при условии:
			// сдача отчетности за 9 или 11 месяцев, и есть заполненное приложение 5 к листу 02 для головной организации.
			ВариантЗаполнения340 = ?((НомерМесяца = 9 ИЛИ НомерМесяца = 11) И Есть_Прил5 И НЕ ПоОбособленномуПодразделению, 4, 0);
			
			АвторасчетДляГруппыОбособленныхПодразделений = (ЗначениеЗаполнено(СтрПоМесту) И СтрНайти("220,223,218", СтрПоМесту) = 0)
			И (ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П002050000100, П002050001000", ПризнакНалогоплательщика, "4")));
			
			Строка310БылаНедоступна = ТекущаяОбласть.Области.П002000031003.Защита;
			
			Если (СдачаПоМесяцам И НомерМесяца = 11) Тогда
				ВариантЗаполнения310 = 5; // недоступно для ввода
			ИначеЕсли АвторасчетДляГруппыОбособленныхПодразделений Тогда
				ВариантЗаполнения310 = 4;
			Иначе
				ВариантЗаполнения310 = ВариантЗаполнения340;
			КонецЕсли;
			
			Если ВариантЗаполнения310 = 5 Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000031003");
			Иначе
				ИзменитьВариантЗаполненияЯчейки(Форма, ВариантЗаполнения310, "П002000031003");
				Если Строка310БылаНедоступна И ВариантЗаполнения310 = 0 Тогда
					ТекущаяОбласть.Области.П002000031003.Очистить();
				КонецЕсли;
			КонецЕсли;
		
			Если КодПериодаСдачиОтчетности = "33" Тогда
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000030003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, ВариантЗаполнения340, "П002000034003");
				
			ИначеЕсли КодПериодаСдачиОтчетности = "45" Тогда
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000030003");
								
				ТекущаяОбласть.Области.П002000029003.Значение = "";
				ТекущаяОбласть.Области.П002000030003.Значение = "";
								
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, ВариантЗаполнения340, "П002000034003");
				
			Иначе
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002000030003");
								
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002000034003");
				
				ТекущаяОбласть.Области.П002000032003.Значение = 0;
				ТекущаяОбласть.Области.П002000033003.Значение = 0;
				ТекущаяОбласть.Области.П002000034003.Значение = 0;
			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_5" Тогда
		
		ПризнакНалогоплательщика = СокрЛП(ТекущаяОбласть.Области.П002050000100.Значение);
		РасчетСоставлен = СокрЛП(ТекущаяОбласть.Области.П002050001000.Значение);
		
		// Строки 030, 040, 060.
		Если ПоОбособленномуПодразделению Тогда
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002050003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002050004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П002050006003");
			
		ИначеЕсли ПоКонсолидированнойГруппе Тогда
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050006003");
			
		Иначе
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002050003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050006003");
			
		КонецЕсли;
		
		// Строка 031.
		Строка031БылаНедоступна = ТекущаяОбласть.Области.П002050003103.Защита;
		УсловиеЗакрытыеОП = Новый Структура("П002050000100, П002050001000", ПризнакНалогоплательщика, "3");
		ЕстьЗакрытыеОП = ЗначениеЗаполнено(ПризнакНалогоплательщика) И ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", УсловиеЗакрытыеОП);
		Если (ЗначениеЗаполнено(ПризнакНалогоплательщика) И РасчетСоставлен = "3")
			ИЛИ (ЕстьЗакрытыеОП) Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002050003103");
		ИначеЕсли ПоОбособленномуПодразделению Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050003103");
			Если Строка031БылаНедоступна Тогда
				ТекущаяОбласть.Области.П002050003103.Очистить();
			КонецЕсли;	
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002050003103");
		КонецЕсли;
		
		// Строка 050.
		Если РасчетСоставлен = "3" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050005003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002050005003");
		КонецЕсли;
		
		// Строка 120.
		Если КодПериодаСдачиОтчетности = "45" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П002050012003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002050012003");
		КонецЕсли;
		
		Если ТекущаяОбласть.Области.П002050001000.Значение = "4" Тогда
			Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
			// прочитаем признак
			
			АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02_5.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				ДанныеАктивнойСтраницы = АктивныеСтраницы[0].Данные[0].Значение;
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
				Иначе
					ВГруппуОПВходитОрганизация = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_6а" Тогда
						
		РасчетСоставлен = ТекущаяОбласть.Области.П002150000501.Значение;
		
		Если РасчетСоставлен = "3" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002150005003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002150005003");
		КонецЕсли;

		Если ТекущаяОбласть.Области.П002150000501.Значение = "4" Тогда
			Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02_6а.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				ДанныеАктивнойСтраницы = АктивныеСтраницы[0].Данные[0].Значение;
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
				Иначе
					ВГруппуОПВходитОрганизация = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;
		
		УстановитьПримечаниеКПолюОКАТОЛиста02_6а(Форма);
		
		// Строка 031.
		Строка031БылаНедоступна = ТекущаяОбласть.Области.П002150003103.Защита;
		УсловиеЗакрытыеОП = Новый Структура("П002150000501", "3");
		ЕстьЗакрытыеОП = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_6а", УсловиеЗакрытыеОП);
		
		Если ПоКонсолидированнойГруппе Тогда
			Если (РасчетСоставлен = "3") ИЛИ (ЕстьЗакрытыеОП) Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002150003103");
			Иначе
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П002150003103");
				Если Строка031БылаНедоступна Тогда
					ТекущаяОбласть.Области.П002150003103.Очистить();
				КонецЕсли;
			КонецЕсли;
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П002150003103");
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АвансовыеПлатежиРазличаются(Форма, ПризнакиПлательщика)
	
	Перем ТаблицаРаздела;
	
	МассивПризнаковПлательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПризнакиПлательщика, ",");
	Для Инд = 0 По МассивПризнаковПлательщика.ВГраница() Цикл
		МассивПризнаковПлательщика[Инд] = СокрЛП(МассивПризнаковПлательщика[Инд]);
	КонецЦикла;
	
	ИмяРаздела = "Лист02";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			Если ТаблицаРаздела[Инд].АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				ПризнакПлательщика = СокрЛП(Форма.ТабличныйДокумент.Области.П002000000100.Значение);
				ЗначениеСтроки290 = Форма.ТабличныйДокумент.Области.П002000029003.Значение;
				ЗначениеСтроки320 = Форма.ТабличныйДокумент.Области.П002000032003.Значение;
			Иначе
				СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
				ПризнакПлательщика = СтраницаДанные.П002000000100;
				ЗначениеСтроки290 = СтраницаДанные.П002000029003;
				ЗначениеСтроки320 = СтраницаДанные.П002000032003;
			КонецЕсли;
			
			ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
			Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияРазличаются = (ЗначениеСтроки290 <> ЗначениеСтроки320);
			
			Возврат ЗначенияРазличаются;
			
		КонецЦикла;
	КонецЕсли;
	
	ИмяРаздела = "Лист02_5";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			Если СтраницаДанные <> Неопределено Тогда
				ПризнакПлательщика = СтраницаДанные.П002050000100;
				ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
				Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеСтроки120 = СтраницаДанные.П002050012003;
				ЗначениеСтроки121 = СтраницаДанные.П002050012103;
				
				ЗначенияРазличаются = (ЗначениеСтроки120 <> ЗначениеСтроки121);
				
				Возврат ЗначенияРазличаются;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ИмяРаздела = "Лист02_6";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			Если СтраницаДанные <> Неопределено Тогда
				
				ЗначениеСтроки120 = СтраницаДанные.П002140012003;
				ЗначениеСтроки121 = СтраницаДанные.П002140012103;
				
				ЗначенияРазличаются = (ЗначениеСтроки120 <> ЗначениеСтроки121);
				
				Возврат ЗначенияРазличаются;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьАвансовыеПлатежи(Форма, ПризнакиПлательщика)
	
	Перем ТаблицаРаздела;
	
	МассивПризнаковПлательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПризнакиПлательщика, ",");
	Для Инд = 0 По МассивПризнаковПлательщика.ВГраница() Цикл
		МассивПризнаковПлательщика[Инд] = СокрЛП(МассивПризнаковПлательщика[Инд]);
	КонецЦикла;
	
	ИмяРаздела = "Лист02";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02" И ТаблицаРаздела[Инд].АктивнаяСтраница Тогда
				ПризнакПлательщика = СокрЛП(Форма.ТабличныйДокумент.Области.П002000000100.Значение);
				ЗначениеСтроки290 = Форма.ТабличныйДокумент.Области.П002000029003.Значение;
				ЗначениеСтроки320 = Форма.ТабличныйДокумент.Области.П002000032003.Значение;
			Иначе
				СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
				ПризнакПлательщика = СтраницаДанные.П002000000100;
				ЗначениеСтроки290 = СтраницаДанные.П002000029003;
				ЗначениеСтроки320 = СтраницаДанные.П002000032003;
			КонецЕсли;
				
			ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
			Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьАвансовыеПлатежи = ЗначениеЗаполнено(ЗначениеСтроки320);
			
			Если ЕстьАвансовыеПлатежи Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьАвансовыеПлатежиОП(Форма, ПризнакиПлательщика)
	
	Перем ТаблицаРаздела;
	
	МассивПризнаковПлательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПризнакиПлательщика, ",");
	Для Инд = 0 По МассивПризнаковПлательщика.ВГраница() Цикл
		МассивПризнаковПлательщика[Инд] = СокрЛП(МассивПризнаковПлательщика[Инд]);
	КонецЦикла;
	
	ИмяРаздела = "Лист02_5";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			Если СтраницаДанные <> Неопределено Тогда
				ПризнакПлательщика = СтраницаДанные.П002050000100;
				ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
				Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеСтроки121 = СтраницаДанные.П002050012103;
				ЕстьАвансовыеПлатежи = ЗначениеЗаполнено(ЗначениеСтроки121);
				
				Если ЕстьАвансовыеПлатежи Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьАвансовыеПлатежиКГ(Форма, ПризнакиПлательщика)
	
	Перем ТаблицаРаздела;
	
	МассивПризнаковПлательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПризнакиПлательщика, ",");
	Для Инд = 0 По МассивПризнаковПлательщика.ВГраница() Цикл
		МассивПризнаковПлательщика[Инд] = СокрЛП(МассивПризнаковПлательщика[Инд]);
	КонецЦикла;
	
	ИмяРаздела = "Лист02_6";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			Если СтраницаДанные <> Неопределено Тогда
				
				ЗначениеСтроки121 = СтраницаДанные.П002140012103;
				ЕстьАвансовыеПлатежи = ЗначениеЗаполнено(ЗначениеСтроки121);
				
				Если ЕстьАвансовыеПлатежи Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ИзменитьВариантЗаполненияЯчейкиНаСервере(НовыйВариант, Показатель = Неопределено)
	
	ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, НовыйВариант, Показатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантЗаполненияЯчейкиНаКлиенте(НовыйВариант, Показатель = Неопределено)
	
	ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, НовыйВариант, Показатель);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
	     
	Если НовыйВариант = 4 И Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		НовыйВариант = 0;
	КонецЕсли;
	
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРазделЗаполненныйПоУсловиям(Форма, ИмяСтраницы, Условия)
	
	Результат = Ложь;
	
	МногостраничностьЕсть = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ДанныеТаблПоле = Форма["СтруктураДанных" + ИмяСтраницы];
		Результат = ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия);
	Иначе
		ТаблицаРаздела = Неопределено;
		Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		Если ТаблицаРаздела <> Неопределено Тогда
			ТаблицаРаздела =  Форма[ТаблицаРаздела];
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				//проверка экземпляра	
				
				СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
				Если СтраницаДанные <> Неопределено Тогда
					Результат=ВыполняютсяУсловияЗаполнения(ТаблицаРаздела[Инд].Данные[0].Значение, Условия);
				КонецЕсли;
				
				//если хоть один экземпляр благополучно прошел проверку - заканчиваем проверку экземпляров успехом
				Если Результат Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		//проверка условия
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		//если хоть одно условие не выполнилось - заканчиваем проверку листа провалом
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)
	
	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКВЭД, ОКАТО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
								
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		ТабличныйДокумент.Области["ИНН1"].Значение = ИНН;
		ТабличныйДокумент.Области["КПП1"].Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;

		ТабличныйДокумент.Области["КодИМНС"].Значение = КодНО;
		
		СтруктураРеквизитовФормы.ОКАТОДляРазделов = СведенияОбОрганизации.ОКАТО;
		ИзменитьОКАТОРазделов(ЭтаФорма, СтруктураРеквизитовФормы.ОКАТОДляРазделов);

		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП = Неопределено) Экспорт
	
	ТипПодписанта = "1";
	флПредставительЮрЛицо = Истина;
	НаименованиеОрганизацииПредставителя = "";
	ФИОПредставителя = "";
	ПредставительСсылка = Неопределено;
	ДокументПредставителя = "";
	
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	РегистрацииВНалоговомОргане.Представитель,
	               |	РегистрацииВНалоговомОргане.УполномоченноеЛицоПредставителя,
	               |	РегистрацииВНалоговомОргане.ДокументПредставителя
	               |ИЗ
	               |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	               |ГДЕ
	               |	РегистрацииВНалоговомОргане.Владелец = &Организация
				   |	И РегистрацииВНалоговомОргане.Код = &КодНО
				   |	И РегистрацииВНалоговомОргане.ПометкаУдаления = &ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);			   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодНО", КодНО);
	
	Если КПП <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И РегистрацииВНалоговомОргане.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		ТипПодписанта = "2";
		ПредставительСсылка = Выборка.Представитель;
		ДокументПредставителя = Выборка.ДокументПредставителя;
		
		Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
			флПредставительЮрЛицо = Истина;
			НаименованиеОрганизацииПредставителя = СокрЛП(ПредставительСсылка);
			ФИОПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
		Иначе
			флПредставительЮрЛицо = Ложь;
			ФИОПредставителя = СокрЛП(ПредставительСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя", 
							 ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя);
							 
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
			
			Если ТекущаяОбласть.Имя = "П002050001000"
			 ИЛИ ТекущаяОбласть.Имя = "П002150000501" Тогда
				СтруктураДанныхПоля.Вставить("ВГруппуОПВходитОрганизация", Форма.ВГруппуОПВходитОрганизация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт

	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт

	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);

КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
			
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	РезультатПоиска = ТаблицаВариантыЗаполненияЛист02_1[0].ТаблицаВариантовЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", "П002010010003"));
	
	Если РезультатПоиска.Количество() > 0 Тогда
		ТаблицаВариантыЗаполненияЛист02_1[0].ТаблицаВариантовЗаполнения.Удалить(РезультатПоиска[0]);
	КонецЕсли;
		
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ВидСубконто = ?(Элемент.КодСчета.ВидыСубконто.Количество() >= 1,
					Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Неопределено);
					ДопПараметры.Вставить("Субконто1", Новый Структура(
					"ВидСубконто,ЗначениеСубконто", ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ВидСубконто = ?(Элемент.КодСчета.ВидыСубконто.Количество() >= 2,
					Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Неопределено);
					ДопПараметры.Вставить("Субконто2", Новый Структура(
					"ВидСубконто,ЗначениеСубконто", ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ВидСубконто = ?(Элемент.КодСчета.ВидыСубконто.Количество() >= 3,
					Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Неопределено);
					ДопПараметры.Вставить("Субконто3", Новый Структура(
					"ВидСубконто,ЗначениеСубконто", ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
									
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ОКАТОДляРазделов", СтруктураРеквизитовФормы.ОКАТОДляРазделов) Тогда
		СтруктураРеквизитовФормы.ОКАТОДляРазделов = "";
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
		
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ).Имя = "ДатаПодписи" Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ДатаПодписи;
			Иначе
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПоМесту = ТабличныйДокумент.Области.ПоМесту.Значение;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		УстановитьЗначениеВСтроке110Листа02();
	КонецЕсли;
	
	Модифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СтруктураДанныхТитульный.НомерКорректировки + СокрЛП(ПоказателиТаблПоле["НомерКорректировки" + Ном]);
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
			СтруктураДанныхТитульный.НомерКорректировки = СтрЗаменить(СтруктураДанныхТитульный.НомерКорректировки, "-", "");
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;					
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ТелОрганизации_1" Тогда
			СтруктураДанныхТитульный.Вставить("ТелОрганизации");
			Для Ном = 1 По 20 Цикл
				СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СтруктураДанныхТитульный.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации_" + Ном];
				СтруктураДанныхТитульный.Удалить("ТелОрганизации_" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "ИНН_Реорг_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН_Реорг");
			Для Ном = 1 По 10 Цикл
				СтруктураДанныхТитульный.ИНН_Реорг = СокрЛП(СтруктураДанныхТитульный.ИНН_Реорг) + ПоказателиТаблПоле["ИНН_Реорг_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН_Реорг_" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "КПП_Реорг_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП_Реорг");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП_Реорг = СокрЛП(СтруктураДанныхТитульный.КПП_Реорг) + ПоказателиТаблПоле["КПП_Реорг_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП_Реорг_" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "ОКВЭД_1" Тогда
			СтруктураДанныхТитульный.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				СтруктураДанныхТитульный.ОКВЭД = СокрЛП(СтруктураДанныхТитульный.ОКВЭД) + ПоказателиТаблПоле["ОКВЭД_" + Ном];
				СтруктураДанныхТитульный.Удалить("ОКВЭД_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;				
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗначениеВСтроке110Листа02()
	
	НомерМесяцаОригинала = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	НомерМесяцаКопии     = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Если НЕ (НомерМесяцаОригинала = 3 ИЛИ НомерМесяцаОригинала = 12)
		И (НомерМесяцаКопии = 3 ИЛИ НомерМесяцаКопии = 12) Тогда
		РасчетНаСервере("Лист02");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Если ТабличныйДокумент.Области.НомерКорректировки.Значение = "" Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "000";
		КонецЕсли;
		Вариант = Число(ТабличныйДокумент.Области.НомерКорректировки.Значение);
	Иначе
		Вариант = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;

	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП     = СтруктураДанныхТитульный.КПП1;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт	
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	//Если перед сохранением изменяли значение показателя - нужен полный расчет
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли; 
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);

	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("ОКАТОДляРазделов", СтруктураРеквизитовФормы.ОКАТОДляРазделов);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		
		ТекТабличноеПоле = "Лист07";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "Раздел1_3";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы3 Тогда
		
		ТекТабличноеПоле = "Приложение";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Лист07" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_3" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы3;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	Если НЕ ЗначениеЗаполнено(ПолеТабличногоДокументаТитульный.Области.Период.Значение) Тогда
		
		ЗаполнитьПериодОтчета();
		
	КонецЕсли; 
	  	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
		
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
			
		СтруктураРеквизитовФормы.СтрПериодОтчета = РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Ложь");
			
	Иначе
			
		СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодОтчета()
	
	СоответствиеНомераМесяцаКодуОтчетногоПериода = Новый Соответствие;
	
	ПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	
	ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");
	
	Если ЭтоКонсолидированнаяГруппа Тогда
		Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "13");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "14");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "15");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12,"16");
		Иначе
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(1,  "57");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(2,  "58");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3,  "59");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(4,  "60");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(5,  "61");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6,  "62");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(7,  "63");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(8,  "64");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9,  "65");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(10, "66");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(11, "67");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "68");
		КонецЕсли;
	Иначе
		Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "21");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "31");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "33");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12,"34");
		Иначе
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(1, "35");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(2, "36");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "37");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(4, "38");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(5, "39");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "40");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(7, "41");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(8, "42");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "43");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(10, "44");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(11, "45");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "46");
		КонецЕсли;
	КонецЕсли;
		
	КодОтчетногоПериода = СоответствиеНомераМесяцаКодуОтчетногоПериода[Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
	ТабличныйДокумент.Области.Период.Значение = КодОтчетногоПериода;
		
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ТабличныйДокумент.Области.ОтчетГод.Значение = ОтчетныйГод;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)

	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьСтавкиНалога(Форма, ИмяТекущегоРаздела)

	Перем СтавкаПрибФед;
	Перем СтавкаПрибРесп;

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "СтавкаПрибФед");  // Ставка прибыль федеральный бюджет
	Сведения.Добавить("", "СтавкаПрибРесп");  // Ставка прибыль респ. бюджет

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Сведения);
	
	СтавкаПрибФед = 0;
	СтавкаПрибРесп = 0;

	ОргСведения.Свойство("СтавкаПрибФед", СтавкаПрибФед);
	ОргСведения.Свойство("СтавкаПрибРесп", СтавкаПрибРесп);

	АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			
	Если АктивныеСтраницы.Количество() > 0 Тогда
		
		АктивнаяСтраница = АктивныеСтраницы[0];
		
	ИначеЕсли Форма.ТаблицаСтраницыЛист02.Количество() > 0 Тогда
		
		АктивнаяСтраница = Форма.ТаблицаСтраницыЛист02[0];
		
	Иначе
		
		Возврат;
		
	КонецЕсли; 
		
	ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
	
	ДанныеСтраницы.П002000015003 = СтавкаПрибФед;
	ДанныеСтраницы.П002000016003 = СтавкаПрибРесп;
	Если ИмяТекущегоРаздела = "Лист02" Тогда
		Форма.ТабличныйДокумент.Области.П002000015003.Значение = СтавкаПрибФед;
		Форма.ТабличныйДокумент.Области.П002000016003.Значение = СтавкаПрибРесп;
	КонецЕсли; 
	
	Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ДанныеСтраницы.П002000014003 = СтавкаПрибФед + СтавкаПрибРесп + ДанныеСтраницы.П002000017003;
		Если ИмяТекущегоРаздела = "Лист02" Тогда
			Форма.ТабличныйДокумент.Области.П002000014003.Значение = СтавкаПрибФед + СтавкаПрибРесп + Форма.ТабличныйДокумент.Области.П002000017003.Значение;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1" Тогда
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		СформироватьРаздел1_1НаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Модифицированность = Истина;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		СформироватьРаздел1_2НаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
		
		Если ЭтаФорма["ТаблицаСтраницы" + СтруктураРеквизитовФормы.НаимТекущегоРаздела].Количество() > 0 Тогда
			
			Для Каждого Область Из ТабличныйДокумент.Области Цикл
				
				Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
					
					Если ЭтаФорма["ТаблицаСтраницы" + СтруктураРеквизитовФормы.НаимТекущегоРаздела].Количество() = 1 Тогда
						
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
						
					Иначе
						
						Если СтрЧислоВхождений(Область.Имя, "Значок") > 0 Тогда
							
							Область.Текст = "х";
							
						Иначе
							
							Область.Текст = "Удалить страницу";
							
						КонецЕсли;
						
						Область.Гиперссылка = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1_1НаСервере()
	
	СведенияЛистов = Новый Массив;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		ПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли;
	ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ЗаполнятьПоПризнакуПлательщика1 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П002000000100", "1"))
	                              ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П002000000100", "3"));
	ЗаполнятьПоПризнакуПлательщика2 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П002000000100", "2"));
	
	МассивПризнаковПлательщика = Новый Массив;
	Если ЗаполнятьПоПризнакуПлательщика1 Тогда
		МассивПризнаковПлательщика.Добавить("1");
	КонецЕсли;
	Если ЗаполнятьПоПризнакуПлательщика2 Тогда
		МассивПризнаковПлательщика.Добавить("2");
	КонецЕсли;
	
	Для Каждого ПризнакПлательщика Из МассивПризнаковПлательщика Цикл
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			Если МассивПризнаковПлательщика.Количество() > 1 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Внимание! Обнаружено более 1 заполненного Листа 02, сбор данных невозможен.'");
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
			ТаблицаСтраниц = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_6"]];
			Для Каждого Страница Из ТаблицаСтраниц Цикл
				Если Страница.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_6" Тогда
					ОКАТО = СокрЛП(ТабличныйДокумент.Области.П002140000301.Значение);
				Иначе
					ОКАТО = СокрЛП(Страница.Данные[0].Значение.П002140000301);
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ОКАТО) Тогда
					СведенияЛистов.Добавить(Новый Структура("П000110000100, П000110001003", ПризнакПлательщика, ОКАТО))
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			СведенияЛистов.Добавить(Новый Структура("П000110000100", ПризнакПлательщика))
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьИСформироватьРаздел("Раздел1_1", СведенияЛистов);
	ИзменитьОКАТОРазделов(ЭтаФорма, СтруктураРеквизитовФормы.ОКАТОДляРазделов, "Раздел1_1");
	ЗаполнитьКБКРаздел1(Ложь);
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКБКРаздел1(НовыйОтчет)
	
	Перем ТаблицаСтраницРаздела;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1_1", ТаблицаСтраницРаздела);
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого ЛистРаздела Из ТаблицаСтраницРаздела Цикл
		
		Если НовыйОтчет Тогда
			ЛистРаздела.Данные[0].Значение.П000110000100 = "1";
		КонецЕсли;
		
		Если ЛистРаздела.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1" Тогда
			ПризнакПлательщика = ТабличныйДокумент.Области.П000110000100.Значение;
		Иначе
			ПризнакПлательщика = ЛистРаздела.Данные[0].Значение.П000110000100;
		КонецЕсли;
		
		Если ПризнакПлательщика = "1" Тогда
			КБК_ФБ  = "18210101011011000110";
			КБК_СРФ = "18210101012021000110";
		ИначеЕсли ПризнакПлательщика = "2" Тогда
			КБК_ФБ  = "18210101013011000110";
			КБК_СРФ = "18210101014021000110";
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ЛистРаздела.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1" Тогда
			ТабличныйДокумент.Области.П000110003003.Значение = КБК_ФБ;
			ТабличныйДокумент.Области.П000110006003.Значение = КБК_СРФ;
		Иначе
			ЛистРаздела.Данные[0].Значение.П000110003003 = КБК_ФБ;
			ЛистРаздела.Данные[0].Значение.П000110006003 = КБК_СРФ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1_2НаСервере()
	
	СведенияЛистов = Новый Массив;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		ПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли;
	
	ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЭтоОбособленноеПодразделение Тогда
		ЗаполнятьПоПризнакуПлательщика1 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П002050000100", "1"))
		                              ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П002050000100", "3"));
		ЗаполнятьПоПризнакуПлательщика2 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П002050000100", "2"));
		
	ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
		ЗаполнятьПоПризнакуПлательщика1 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П002000000100", "1"))
		                              ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П002000000100", "3"));
		ЗаполнятьПоПризнакуПлательщика2 = НЕ ЗаполнятьПоПризнакуПлательщика1 И ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П002000000100", "2"));
		
	Иначе
		ЗаполнятьПоПризнакуПлательщика1 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П002000000100", "1"))
		                              ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П002000000100", "3"))
		                              ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П002050000100", "1"))
		                              ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П002050000100", "3"));
		ЗаполнятьПоПризнакуПлательщика2 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П002000000100", "2"))
		                              ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П002050000100", "2"));
		
	КонецЕсли;
	
	ПризнакиИКварталы = Новый ТаблицаЗначений;
	ПризнакиИКварталы.Колонки.Добавить("ПризнакПлательщика");
	ПризнакиИКварталы.Колонки.Добавить("КодКвартала");
	
	Если НомерМесяца = 3 ИЛИ НомерМесяца = 6 Тогда
		Если ЗаполнятьПоПризнакуПлательщика1 Тогда
			НовоеСочетание = ПризнакиИКварталы.Добавить();
			НовоеСочетание.ПризнакПлательщика = "1";
			НовоеСочетание.КодКвартала = "";
			
		ИначеЕсли ЗаполнятьПоПризнакуПлательщика2 Тогда
			НовоеСочетание = ПризнакиИКварталы.Добавить();
			НовоеСочетание.ПризнакПлательщика = "2";
			НовоеСочетание.КодКвартала = "";
		КонецЕсли;
		
	ИначеЕсли НомерМесяца = 9 И СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал  Тогда
		Если ЗаполнятьПоПризнакуПлательщика1 Тогда
			Если АвансовыеПлатежиРазличаются(ЭтаФорма, "1,3") Тогда
				НовоеСочетание = ПризнакиИКварталы.Добавить();
				НовоеСочетание.ПризнакПлательщика = "1";
				НовоеСочетание.КодКвартала = "21";
				
				НовоеСочетание = ПризнакиИКварталы.Добавить();
				НовоеСочетание.ПризнакПлательщика = "1";
				НовоеСочетание.КодКвартала = "24";
			Иначе
				НовоеСочетание = ПризнакиИКварталы.Добавить();
				НовоеСочетание.ПризнакПлательщика = "1";
				НовоеСочетание.КодКвартала = "";
			КонецЕсли;
			
		ИначеЕсли ЗаполнятьПоПризнакуПлательщика2 Тогда
			Если АвансовыеПлатежиРазличаются(ЭтаФорма, "2") Тогда
				НовоеСочетание = ПризнакиИКварталы.Добавить();
				НовоеСочетание.ПризнакПлательщика = "2";
				НовоеСочетание.КодКвартала = "21";
				
				НовоеСочетание = ПризнакиИКварталы.Добавить();
				НовоеСочетание.ПризнакПлательщика = "2";
				НовоеСочетание.КодКвартала = "24";
			Иначе
				НовоеСочетание = ПризнакиИКварталы.Добавить();
				НовоеСочетание.ПризнакПлательщика = "2";
				НовоеСочетание.КодКвартала = "";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НомерМесяца = 11 И СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц Тогда
		Если ЭтоОбособленноеПодразделение Тогда
			Если ЗаполнятьПоПризнакуПлательщика1 Тогда
				Если ЕстьАвансовыеПлатежиОП(ЭтаФорма, "1,3") Тогда
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "21";
				Иначе
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "";
				КонецЕсли;
					
			ИначеЕсли ЗаполнятьПоПризнакуПлательщика2 Тогда
				Если ЕстьАвансовыеПлатежиОП(ЭтаФорма, "2") Тогда
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "2";
					НовоеСочетание.КодКвартала = "21";
				Иначе
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "2";
					НовоеСочетание.КодКвартала = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
			Если ЗаполнятьПоПризнакуПлательщика1 Тогда
				Если ЕстьАвансовыеПлатежиКГ(ЭтаФорма, "1,3") Тогда
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "21";
				Иначе
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "";
				КонецЕсли;
					
			ИначеЕсли ЗаполнятьПоПризнакуПлательщика2 Тогда
				Если ЕстьАвансовыеПлатежиКГ(ЭтаФорма, "2") Тогда
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "2";
					НовоеСочетание.КодКвартала = "21";
				Иначе
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "2";
					НовоеСочетание.КодКвартала = "";
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если ЗаполнятьПоПризнакуПлательщика1 Тогда
				Если ЕстьАвансовыеПлатежи(ЭтаФорма, "1,3") Тогда
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "21";
				Иначе
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "";
				КонецЕсли;
					
			ИначеЕсли ЗаполнятьПоПризнакуПлательщика2 Тогда
				Если ЕстьАвансовыеПлатежи(ЭтаФорма, "2") Тогда
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "2";
					НовоеСочетание.КодКвартала = "21";
				Иначе
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "2";
					НовоеСочетание.КодКвартала = "";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивОКАТО = Новый Массив;
	Если ЭтоКонсолидированнаяГруппа Тогда
		Если ЗаполнятьПоПризнакуПлательщика1 И ЗаполнятьПоПризнакуПлательщика2 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Внимание! Обнаружено более 1 заполненного Листа 02, сбор данных невозможен.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ТаблицаСтраниц = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_6"]];
		Для Каждого Страница Из ТаблицаСтраниц Цикл
			Если Страница.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_6" Тогда
				ОКАТО = СокрЛП(ТабличныйДокумент.Области.П002140000301.Значение);
			Иначе
				ОКАТО = СокрЛП(Страница.Данные[0].Значение.П002140000301);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОКАТО) Тогда
				МассивОКАТО.Добавить(ОКАТО)
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивОКАТО.Добавить("")
	КонецЕсли;
	
	Для Каждого Сочетание Из ПризнакиИКварталы Цикл
			Для Каждого ОКАТО Из МассивОКАТО Цикл
				НаборПоказателей = Новый Структура;
				НаборПоказателей.Вставить("П000120000100", Сочетание.ПризнакПлательщика);
				НаборПоказателей.Вставить("П000120000200", Сочетание.КодКвартала);
				НаборПоказателей.Вставить("П000120001003", ОКАТО);
				
				СведенияЛистов.Добавить(НаборПоказателей);
			КонецЦикла;
	КонецЦикла;
	
	ОчиститьИСформироватьРаздел("Раздел1_2", СведенияЛистов);
	ИзменитьОКАТОРазделов(ЭтаФорма, СтруктураРеквизитовФормы.ОКАТОДляРазделов, "Раздел1_2");
	ЗаполнитьКБКРаздел2(Ложь);

	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКБКРаздел2(НовыйОтчет)
	
	Перем ТаблицаСтраницРаздела;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1_2", ТаблицаСтраницРаздела);
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого ЛистРаздела Из ТаблицаСтраницРаздела Цикл
		
		Если НовыйОтчет Тогда
			ЛистРаздела.Данные[0].Значение.П000120000100 = "1";
		КонецЕсли;
		
		Если ЛистРаздела.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
			ПризнакПлательщика = ТабличныйДокумент.Области.П000120000100.Значение;
		Иначе
			ПризнакПлательщика = ЛистРаздела.Данные[0].Значение.П000120000100;
		КонецЕсли;
		
		Если ПризнакПлательщика = "1" Тогда
			КБК_ФБ  = "18210101011011000110";
			КБК_СРФ = "18210101012021000110";
		ИначеЕсли ПризнакПлательщика = "2" Тогда
			КБК_ФБ  = "18210101013011000110";
			КБК_СРФ = "18210101014021000110";
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ЛистРаздела.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
			ТабличныйДокумент.Области.П000120011003.Значение = КБК_ФБ;
			ТабличныйДокумент.Области.П000120021003.Значение = КБК_СРФ;
		Иначе
			ЛистРаздела.Данные[0].Значение.П000120011003 = КБК_ФБ;
			ЛистРаздела.Данные[0].Значение.П000120021003 = КБК_СРФ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИСформироватьРаздел(ИмяРаздела, СведенияЛистов)
	
	Перем ТаблицаСтраницРаздела;
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ТабДок = ТабличныйДокумент;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка раздела.
	ОчиститьТабличноеПолеНаСервере(ИмяРаздела);
	
	ТаблицаТекущейСтраницы   = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Если ТаблицаТекущейСтраницы.Количество() > 1 Тогда
		ИндексСтраницы = 0;
		Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
			СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
			Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
				ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			ИндексСтраницы = ИндексСтраницы + 1;
		КонецЦикла;
	КонецЕсли;
	
	ЭтоПервыйЛист = Истина;
	Для Каждого НаборПоказателей Из СведенияЛистов Цикл
		Если НЕ ЭтоПервыйЛист Тогда
			ВставитьДополнительнуюСтраницуНаСервере(ИмяРаздела);
		КонецЕсли;
		
		Для Каждого Показатель Из НаборПоказателей Цикл
			ИмяОбластиПоказателя = Показатель.Ключ;
			ЗначениеПоказателя = Показатель.Значение;
			
			ТабДок.Области[ИмяОбластиПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;
		
		Если ИмяРаздела = "Раздел1_2" Тогда
			ИзменитьВариантыЗаполненияПоказателей(ЭтаФорма, ИмяРаздела);
		КонецЕсли;
		
		СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяРаздела);
		
		ЭтоПервыйЛист = Ложь;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеСпец(ИмяТекущегоРаздела, ОбновитьСтавки = Истина) Экспорт
	
	Если ИмяТекущегоРаздела = "Лист02" И НЕ ОбновитьСтавки Тогда
		//сохраним старые значения
		П002000015003 = ТабличныйДокумент.Области.П002000015003.Значение;
		П002000016003 = ТабличныйДокумент.Области.П002000016003.Значение;
	КонецЕсли;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ЦветФона = СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(ЭтаФорма, ИмяТекущегоРаздела);
	
	СохранитьДанныеРаздела(ИмяТекущегоРаздела, Истина, Ложь);
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ТабличныйДокумент.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТекущегоРаздела = "Лист02" Тогда
		Если ОбновитьСтавки Тогда
			ПолучитьСтавкиНалога(ЭтаФорма, "Лист02");
		Иначе
			//восстановим старые значения
			ТабличныйДокумент.Области.П002000015003.Значение = П002000015003;
			ТабличныйДокумент.Области.П002000016003.Значение = П002000016003;
		КонецЕсли;
	КонецЕсли;
	
	//Обнуление по условию строки 230 на листе 02
	Если ИмяТекущегоРаздела = "Лист02_5" Тогда
		
		Если Не СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002050005003");
		КонецЕсли;
		
		АктивныеСтраницыПрил5 = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_5"]].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивныеСтраницыПрил5.Количество() > 0 Тогда
			ДанныеПрил5Список = АктивныеСтраницыПрил5[0].Данные;
			ДанныеПрил5 = ДанныеПрил5Список[0].Значение;
			Если ДанныеПрил5 <> Неопределено Тогда
				ДанныеПрил5.П002050000100 = "";
				ДанныеПрил5Список[0].Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П002050000100"));
		Если НЕ Есть_Прил5 И НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ТаблицаРаздела  = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02"]];
			Для каждого СтраницаТаблицыРаздела Из ТаблицаРаздела Цикл
				ДанныеСтраницыСписок = СтраницаТаблицыРаздела.Данные;
				ДанныеСтраницы = ДанныеСтраницыСписок[0].Значение;
				ДанныеСтраницы.П002000023003 = 0;
				ДанныеСтраницыСписок[0].Пометка = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТекущегоРаздела = "Лист02_6а" Тогда
		
		Если Не СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002150005003");
		КонецЕсли;

		УстановитьПримечаниеКПолюОКАТОЛиста02_6а(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроставитьПрПл_1(ИмяРаздела = "")
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтрПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		СтрПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли; 
		
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223");
	
	ИменаПрПлРаздела = Новый Структура;
	Если флЕстьОбособ Тогда
		ИменаПрПлРаздела.Вставить("Лист02_5", "П002050000100");
	Иначе
		ИменаПрПлРаздела.Вставить("Лист02", "П002000000100");
		Если флКвартальноеЗаполнение Тогда
			ИменаПрПлРаздела.Вставить("Лист02_1", "П002010000100");
			ИменаПрПлРаздела.Вставить("Лист02_2", "П002020000100");
			ИменаПрПлРаздела.Вставить("Лист02_3", "П002030000100");
		КонецЕсли; 	
	КонецЕсли;
	
	Если ИмяРаздела = "" Тогда
		Для каждого ИмяПрПл Из ИменаПрПлРаздела Цикл
			ПроставитьПрПл_1(ИмяПрПл.Ключ);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТаблДок = ТабличныйДокумент;
	ТаблицаРаздела = ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяРаздела]];
	СтруктураДанныхРаздела = ТаблицаРаздела[0].Данные[0].Значение;
	ТаблицаРаздела[0].Данные[0].Пометка = Ложь;
	СтруктураДанныхРаздела[ИменаПрПлРаздела[ИмяРаздела]] = "1";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		ТаблДок.Области[ИменаПрПлРаздела[ИмяРаздела]].Значение = "1";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь) Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя, АвторасчетПослеАвтозаполнения);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь) Экспорт 
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя, АвторасчетПослеАвтозаполнения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь)
	
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел1_1" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел1_1");
		
	ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел1_2");
		
	ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
		
		// Данный раздел не заполняется в автоматическом режиме.
		
	ИначеЕсли ИмяРаздела = "Лист02" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02", , АвторасчетПослеАвтозаполнения);
		
	ИначеЕсли ИмяРаздела = "Лист02_1" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_1");
		
	ИначеЕсли ИмяРаздела = "Лист02_2" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_2");
		
	ИначеЕсли ИмяРаздела = "Лист02_3" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_3");
		
	ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_4");
		
	ИначеЕсли ИмяРаздела = "Лист02_5" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_5");
		
	ИначеЕсли ИмяРаздела = "Лист02_6" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_6");
		
	ИначеЕсли ИмяРаздела = "Лист02_6а" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_6а");
		
	ИначеЕсли ИмяРаздела = "Лист03А" Тогда
		
		РасчетВСтруктуре(Форма, "Лист03А");
		
	ИначеЕсли ИмяРаздела = "Лист03Б" Тогда
		
		РасчетВСтруктуре(Форма, "Лист03Б");
		
	ИначеЕсли ИмяРаздела = "Лист04" Тогда
		
		РасчетВСтруктуре(Форма, "Лист04");	
		
	ИначеЕсли ИмяРаздела = "Лист05" Тогда
		
		РасчетВСтруктуре(Форма, "Лист05");
		
	ИначеЕсли ИмяРаздела = "Лист06" Тогда
		
		//стр.010 = стр.020+ стр.030  + стр.040 + стр.050 + стр.060 + стр.070 + стр.080 + стр.090 + стр.100 +  стр.110;
		Форма.СтруктураДанныхЛист06.П002110001003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110002003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110003003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110004003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110005003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110006003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110007003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110008003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110009003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110010003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110011003);
		
		//стр.190 = стр.200 + стр.210 +стр.220
		Форма.СтруктураДанныхЛист06.П002110019003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110020003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110021003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110022003);
		
		//стр.240 = стр.250 + стр.260 + стр.270 + стр.280 + стр.290 + стр.300 + стр.310 + стр.320
		Форма.СтруктураДанныхЛист06.П002110024003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110025003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110026003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110027003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110028003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110029003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110030003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110031003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110032003);
		
		//стр.330 = стр.020  +  стр.030 - стр.140 - стр.200 - стр.250
		Форма.СтруктураДанныхЛист06.П002110033003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110002003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110003003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110014003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110020003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110025003);
		
		//стр.350 = стр.040 + стр.050 - стр.150 - стр.210 - стр.260
		Форма.СтруктураДанныхЛист06.П002110035003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110004003)
													+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110005003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110015003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110021003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110026003);
		
		//стр.370 = макс(стр.060 - стр.160 - стр.270, 0)
		Форма.СтруктураДанныхЛист06.П002110037003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110006003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110016003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110027003), 0);
		
		//стр.380 = макс(стр.070 - стр.170 - стр.280, 0)
		Форма.СтруктураДанныхЛист06.П002110038003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110007003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110017003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110028003), 0);
		
		//стр.390 = стр.110 - стр.180 - стр.220 - стр.320
		Форма.СтруктураДанныхЛист06.П002110039003 =   РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110011003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110018003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110022003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110032003);
		
		//стр.410 = макс(стр.330 - стр.340, 0)
		Форма.СтруктураДанныхЛист06.П002110041003 =   Макс(Форма.СтруктураДанныхЛист06.П002110033003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110034003), 0);
		
		//стр.440 = макс(стр.420 - стр.430, 0)
		Форма.СтруктураДанныхЛист06.П002110044003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110042003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110043003), 0);
		
		//стр.450 = макс(стр.350 - стр.360, 0)
		Форма.СтруктураДанныхЛист06.П002110045003 =   Макс(Форма.СтруктураДанныхЛист06.П002110035003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110036003), 0);
		
		//стр.480 = макс(стр.460 - стр.470, 0)
		Форма.СтруктураДанныхЛист06.П002110048003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110046003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110047003), 0);
		
		//стр.490 = макс(стр.390 - стр.400, 0)
		Форма.СтруктураДанныхЛист06.П002110049003 =   Макс(Форма.СтруктураДанныхЛист06.П002110039003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110040003), 0);
		
		//стр.520 = макс(стр.500 - стр.510, 0)
		Форма.СтруктураДанныхЛист06.П002110052003 =   Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110050003)
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110051003), 0);
		
		//стр.530 = макс(стр.410 - стр.430 + стр.450 - стр.470 + стр.490 - стр.510, 0)
		Форма.СтруктураДанныхЛист06.П002110053003 =   Макс(Форма.СтруктураДанныхЛист06.П002110041003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110043003), 0)
													+ Макс(Форма.СтруктураДанныхЛист06.П002110045003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110047003), 0)
													+ Макс(Форма.СтруктураДанныхЛист06.П002110049003
													- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110051003), 0);
																
																
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Форма.ТабличныйДокумент.Области.П002110001003.Значение = Форма.СтруктураДанныхЛист06.П002110001003;
			Форма.ТабличныйДокумент.Области.П002110019003.Значение = Форма.СтруктураДанныхЛист06.П002110019003;
			Форма.ТабличныйДокумент.Области.П002110024003.Значение = Форма.СтруктураДанныхЛист06.П002110024003;
			Форма.ТабличныйДокумент.Области.П002110033003.Значение = Форма.СтруктураДанныхЛист06.П002110033003;
			Форма.ТабличныйДокумент.Области.П002110035003.Значение = Форма.СтруктураДанныхЛист06.П002110035003;
			Форма.ТабличныйДокумент.Области.П002110037003.Значение = Форма.СтруктураДанныхЛист06.П002110037003;
			Форма.ТабличныйДокумент.Области.П002110038003.Значение = Форма.СтруктураДанныхЛист06.П002110038003;
			Форма.ТабличныйДокумент.Области.П002110039003.Значение = Форма.СтруктураДанныхЛист06.П002110039003;
			Форма.ТабличныйДокумент.Области.П002110041003.Значение = Форма.СтруктураДанныхЛист06.П002110041003;
			Форма.ТабличныйДокумент.Области.П002110044003.Значение = Форма.СтруктураДанныхЛист06.П002110044003;
			Форма.ТабличныйДокумент.Области.П002110045003.Значение = Форма.СтруктураДанныхЛист06.П002110045003;
			Форма.ТабличныйДокумент.Области.П002110048003.Значение = Форма.СтруктураДанныхЛист06.П002110048003;
			Форма.ТабличныйДокумент.Области.П002110049003.Значение = Форма.СтруктураДанныхЛист06.П002110049003;
			Форма.ТабличныйДокумент.Области.П002110052003.Значение = Форма.СтруктураДанныхЛист06.П002110052003;
			Форма.ТабличныйДокумент.Области.П002110053003.Значение = Форма.СтруктураДанныхЛист06.П002110053003;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист07" Тогда
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		Колонка3 = 0;
		Колонка4 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		
		Для каждого Зап Из ТаблицаБлока Цикл
			
			НомерСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
			
			//заполнение итогов по строке в структуре многострочного раздела
			П002120001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П002120001003);
			П002120001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П002120001004);
			П002120001006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П002120001006);
			
			Зап.П002120001007 = П002120001003 - П002120001004 - П002120001006;
			П002120001007 = Зап.П002120001007;
			
			//заполнение итогов по строке в табличном документе
			Если (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела) И (НомерСтроки = Сред(ОбластьИмя, 15)) Тогда
				Форма.ТабличныйДокумент.Области.Найти("П002120001007_" + НомерСтроки).Значение = П002120001007;
			КонецЕсли;
			
			//аккумулирование общих итогов
			Колонка3 = Колонка3 + П002120001003;
			Колонка4 = Колонка4 + П002120001004;
			Колонка6 = Колонка6 + П002120001006;
			Колонка7 = Колонка7 + П002120001007;
			
		КонецЦикла;
		
		Форма.СтруктураДанныхЛист07.П002120002003 = Колонка3;
		Форма.СтруктураДанныхЛист07.П002120002004 = Колонка4;
		Форма.СтруктураДанныхЛист07.П002120002006 = Колонка6;
		Форма.СтруктураДанныхЛист07.П002120002007 = Колонка7;
		
		//заполнение общих итогов в табличном документе
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		
			Форма.ТабличныйДокумент.Области.П002120002003.Значение = Колонка3;
			Форма.ТабличныйДокумент.Области.П002120002004.Значение = Колонка4;
			Форма.ТабличныйДокумент.Области.П002120002006.Значение = Колонка6;
			Форма.ТабличныйДокумент.Области.П002120002007.Значение = Колонка7;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		// Расчет всех показатели на листах в порядке определяемым зависимостью
		// показателей друг от друга.
		
		Расчет(Форма, "Лист07");
		Расчет(Форма, "Лист06");
		Расчет(Форма, "Лист05");
		Расчет(Форма, "Лист04");
		Расчет(Форма, "Лист03Б");
		Расчет(Форма, "Лист03А");
		Расчет(Форма, "Лист02_6а");
		Расчет(Форма, "Лист02_6");
		Расчет(Форма, "Лист02_5");
		Расчет(Форма, "Лист02_4");
		Расчет(Форма, "Лист02_3");
		Расчет(Форма, "Лист02_2");
		Расчет(Форма, "Лист02_1");
		Расчет(Форма, "Лист02", , АвторасчетПослеАвтозаполнения);
		
		// Полученная в Листе 02 налоговая база используется для расчета Приложений №№ 4, 5, 6 и 6а к Листу 02
		// с последующим расчетом Листа 02.
		Расчет(Форма, "Лист02_4");
		Расчет(Форма, "Лист02_5");
		Расчет(Форма, "Лист02_6");
		Расчет(Форма, "Лист02_6а");
		Расчет(Форма, "Лист02", , АвторасчетПослеАвтозаполнения);
		Расчет(Форма, "Раздел1_2");
		Расчет(Форма, "Раздел1_1");
		
		Форма.СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Ложь; //Если Истина - рассчитываем при переходах, сохранении, печати.
	 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста, ИмяПоказателя="", АвторасчетПослеАвтозаполнения = Ложь)
	                                                      
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ИмяЛиста];
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	
	//Значения показателей
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "ПоМесту");
		КодПериодаСдачиОтчетности = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "Период");
	Иначе
		ПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
		КодПериодаСдачиОтчетности = Форма.СтруктураДанныхТитульный.Период;
	КонецЕсли; 
	
	//вспомогательные переменные
	флЕстьОбособ = ?(ПоМесту = "220" ИЛИ ПоМесту = "223", Истина, Ложь);
	ПоКонсолидированнойГруппе = (ПоМесту = "218");
	
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");

	НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	флНалоговыйПериод = (НомерМесяца = 12);
	
	ДекларацияПоГоловнойОрганизации = НЕ (ЭтоОбособленноеПодразделение ИЛИ ЭтоКонсолидированнаяГруппа);
	ЕстьЗаполненноеЛист02Приложение5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П002050000100"));
	ЕстьЛист02ПризнакПлательщика3 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02", Новый Структура("П002000000100", "3"));

	ПоОбособленномуПодразделению = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Страница.Данные[0].Пометка = Ложь; //Для инициализации обмена с сервером
		
		Если ИмяЛиста = "Раздел1_1" Тогда
			
			ПризнакПлательщика = Данные.П000110000100;
			
			// Предварительное обнуление рассчитываемых величин для покрытия некорректных вариантов заполнения.
			Данные.П000110004003 = 0;
			Данные.П000110005003 = 0;
			Данные.П000110007003 = 0;
			Данные.П000110008003 = 0;
			
			Если ПризнакПлательщика = "1" Тогда
				Если ЕстьЛист02ПризнакПлательщика3 Тогда
					Если ДекларацияПоГоловнойОрганизации Тогда
						Если ЕстьЗаполненноеЛист02Приложение5 Тогда
							РасчетРаздел1_1_ПрПл1_Л02ПрПл3_ГО_Л02Пр5(Форма, Данные);
						Иначе
							РасчетРаздел1_1_ПрПл1_Л02ПрПл3_ГО(Форма, Данные);
						КонецЕсли;
					Иначе
						Если ЭтоОбособленноеПодразделение Тогда
							РасчетРаздел1_1_ПрПл1_Л02ПрПл3_ОП(Форма, Данные);
						ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
							РасчетРаздел1_1_ПрПл1_Л02ПрПл3_КГ(Форма, Данные);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ДекларацияПоГоловнойОрганизации Тогда
						Если ЕстьЗаполненноеЛист02Приложение5 Тогда
							РасчетРаздел1_1_ПрПл1_ГО_Л02Пр5(Форма, Данные);
						Иначе
							РасчетРаздел1_1_ПрПл1_ГО(Форма, Данные);
						КонецЕсли;
					Иначе
						Если ЭтоОбособленноеПодразделение Тогда
							РасчетРаздел1_1_ПрПл1_ОП(Форма, Данные);
						ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
							РасчетРаздел1_1_ПрПл1_КГ(Форма, Данные);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ПризнакПлательщика = "2" Тогда
				Если ДекларацияПоГоловнойОрганизации Тогда
					Если ЕстьЗаполненноеЛист02Приложение5 Тогда
						РасчетРаздел1_1_ПрПл2_ГО_Л02Пр5(Форма, Данные);
					Иначе
						РасчетРаздел1_1_ПрПл2_ГО(Форма, Данные);
					КонецЕсли;
				Иначе
					Если ЭтоОбособленноеПодразделение Тогда
						РасчетРаздел1_1_ПрПл2_ОП(Форма, Данные);
					ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
						РасчетРаздел1_1_ПрПл2_КГ(Форма, Данные);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000110004003.Значение = Данные.П000110004003;
				Форма.ТабличныйДокумент.Области.П000110005003.Значение = Данные.П000110005003;
				Форма.ТабличныйДокумент.Области.П000110007003.Значение = Данные.П000110007003;
				Форма.ТабличныйДокумент.Области.П000110008003.Значение = Данные.П000110008003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Раздел1_2" Тогда
			
			ПризнакПлательщика = Данные.П000120000100;
			КодКвартала = Данные.П000120000200;
			
			// Предварительное обнуление рассчитываемых величин для покрытия некорректных вариантов заполнения.
			Данные.П000120012003 = 0;
			Данные.П000120013003 = 0;
			Данные.П000120014003 = 0;
			Данные.П000120022003 = 0;
			Данные.П000120023003 = 0;
			Данные.П000120024003 = 0;
			
			Если КодКвартала = "21" Тогда
				Если ПризнакПлательщика = "1" Тогда
					Если ЕстьЛист02ПризнакПлательщика3 Тогда
						Если ДекларацияПоГоловнойОрганизации Тогда
							Если ЕстьЗаполненноеЛист02Приложение5 Тогда
								РасчетРаздел1_2_Кв21_ПрПл1_Л02ПрПл3_ГО_Л02Пр5(Форма, Данные);
							Иначе
								РасчетРаздел1_2_Кв21_ПрПл1_Л02ПрПл3_ГО(Форма, Данные);
							КонецЕсли;
						Иначе
							Если ЭтоОбособленноеПодразделение Тогда
								РасчетРаздел1_2_Кв21_ПрПл1_Л02ПрПл3_ОП(Форма, Данные);
							ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
								РасчетРаздел1_2_Кв21_ПрПл1_Л02ПрПл3_КГ(Форма, Данные);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если ДекларацияПоГоловнойОрганизации Тогда
							Если ЕстьЗаполненноеЛист02Приложение5 Тогда
								РасчетРаздел1_2_Кв21_ПрПл1_ГО_Л02Пр5(Форма, Данные);
							Иначе
								РасчетРаздел1_2_Кв21_ПрПл1_ГО(Форма, Данные);
							КонецЕсли;
						Иначе
							Если ЭтоОбособленноеПодразделение Тогда
								РасчетРаздел1_2_Кв21_ПрПл1_ОП(Форма, Данные);
							ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
								РасчетРаздел1_2_Кв21_ПрПл1_КГ(Форма, Данные);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ПризнакПлательщика = "2" Тогда
					Если ДекларацияПоГоловнойОрганизации Тогда
						Если ЕстьЗаполненноеЛист02Приложение5 Тогда
							РасчетРаздел1_2_Кв21_ПрПл2_ГО_Л02Пр5(Форма, Данные);
						Иначе
							РасчетРаздел1_2_Кв21_ПрПл2_ГО(Форма, Данные);
						КонецЕсли;
					Иначе
						Если ЭтоОбособленноеПодразделение Тогда
							РасчетРаздел1_2_Кв21_ПрПл2_ОП(Форма, Данные);
						ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
							РасчетРаздел1_2_Кв21_ПрПл2_КГ(Форма, Данные);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ПризнакПлательщика = "1" Тогда
					Если ЕстьЛист02ПризнакПлательщика3 Тогда
						Если ДекларацияПоГоловнойОрганизации Тогда
							Если ЕстьЗаполненноеЛист02Приложение5 Тогда
								РасчетРаздел1_2_ПрПл1_Л02ПрПл3_ГО_Л02Пр5(Форма, Данные);
							Иначе
								РасчетРаздел1_2_ПрПл1_Л02ПрПл3_ГО(Форма, Данные);
							КонецЕсли;
						Иначе
							Если ЭтоОбособленноеПодразделение Тогда
								РасчетРаздел1_2_ПрПл1_Л02ПрПл3_ОП(Форма, Данные);
							ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
								РасчетРаздел1_2_ПрПл1_Л02ПрПл3_КГ(Форма, Данные);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если ДекларацияПоГоловнойОрганизации Тогда
							Если ЕстьЗаполненноеЛист02Приложение5 Тогда
								РасчетРаздел1_2_ПрПл1_ГО_Л02Пр5(Форма, Данные);
							Иначе
								РасчетРаздел1_2_ПрПл1_ГО(Форма, Данные);
							КонецЕсли;
						Иначе
							Если ЭтоОбособленноеПодразделение Тогда
								РасчетРаздел1_2_ПрПл1_ОП(Форма, Данные);
							ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
								РасчетРаздел1_2_ПрПл1_КГ(Форма, Данные);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ПризнакПлательщика = "2" Тогда
					Если ДекларацияПоГоловнойОрганизации Тогда
						Если ЕстьЗаполненноеЛист02Приложение5 Тогда
							РасчетРаздел1_2_ПрПл2_ГО_Л02Пр5(Форма, Данные);
						Иначе
							РасчетРаздел1_2_ПрПл2_ГО(Форма, Данные);
						КонецЕсли;
					Иначе
						Если ЭтоОбособленноеПодразделение Тогда
							РасчетРаздел1_2_ПрПл2_ОП(Форма, Данные);
						ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
							РасчетРаздел1_2_ПрПл2_КГ(Форма, Данные);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000120012003.Значение = Данные.П000120012003;
				Форма.ТабличныйДокумент.Области.П000120013003.Значение = Данные.П000120013003;
				Форма.ТабличныйДокумент.Области.П000120014003.Значение = Данные.П000120014003;
				Форма.ТабличныйДокумент.Области.П000120022003.Значение = Данные.П000120022003;
				Форма.ТабличныйДокумент.Области.П000120023003.Значение = Данные.П000120023003;
				Форма.ТабличныйДокумент.Области.П000120024003.Значение = Данные.П000120024003;
			КонецЕсли;

		ИначеЕсли ИмяЛиста = "Лист02" Тогда
			
			ПрПлЛист02=Данные.П002000000100;
			
			//флаги существования заполненных разделов 
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5",Новый Структура("П002050000100"));
			                   
			Есть_Лист02_ПрПл1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02",Новый Структура("П002000000100", "1"));
			Есть_Лист02_ПрПл3 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02",Новый Структура("П002000000100", "3"));
						
			услПрПлЛист02_1 = Новый Структура("П002010000100", ПрПлЛист02);
			услПрПлЛист02_2 = Новый Структура("П002020000100", ПрПлЛист02);
			услПрПлЛист02_3 = Новый Структура("П002030000100", ПрПлЛист02);
			услПрПлЛист02_4 = Новый Структура("П002040000100", ПрПлЛист02);
			услПрПлЛист02_5 = Новый Структура("П002050000100", ПрПлЛист02);
			
			Если флКвартальноеЗаполнение ИЛИ АвторасчетПослеАвтозаполнения Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.010 = стр.040 Прил.1 Лист 02
					Данные.П002000001003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_1", "П002010004003", Истина, услПрПлЛист02_1);
					
					//стр.020 = стр.100 Прил.1 Лист 02
					Данные.П002000002003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_1", "П002010010003", Истина, услПрПлЛист02_1);
					
					//стр.030 = стр.130 Прил.2 Лист 02
					Данные.П002000003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_2", "П002020013003", Истина, услПрПлЛист02_2);
					
					//стр.040 = стр.200 Прил.2 Лист 02 + стр.300 Прил.2 Лист 02
					Данные.П002000004003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_2", "П002020020003", Истина, услПрПлЛист02_2)
										 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_2", "П002020030003", Истина, услПрПлЛист02_2);
					
					//стр.050 = стр.360 Прил.3 Лист 02
					Данные.П002000005003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_3", "П002030036003", Истина, услПрПлЛист02_3);
				Иначе
					Данные.П002000001003 = 0;	
					Данные.П002000002003 = 0;
					Данные.П002000003003 = 0;
					Данные.П002000004003 = 0;
					Данные.П002000005003 = 0;
				КонецЕсли;
			КонецЕсли;
			
			//стр.060 = стр.010 + стр.020 - стр.030 - стр.040 + стр.050
			Данные.П002000006003 = Данные.П002000001003 + Данные.П002000002003 - Данные.П002000003003 - Данные.П002000004003 + Данные.П002000005003;
			
			//стр.100
			Если ПрПлЛист02 = "1"
				ИЛИ (ПрПлЛист02 = "3" И НЕ Есть_Лист02_ПрПл1)
				ИЛИ (ПрПлЛист02 = "2" И НЕ Есть_Лист02_ПрПл1 И НЕ Есть_Лист02_ПрПл3)
				Тогда
				//(Для стр. с ПризнакПлательщика = 1) 
				//или (Для стр. с ПризнакПлательщика = 3, если нет стр. с ПризнакПлательщика = 1) 
				//или (Для стр. с ПризнакПлательщика = 2, если нет стр. ни с ПризнакПлательщика = 1, ни с ПризнакПлательщика = 3)
				
				//стр.100 = стр.060 - стр.070 - стр.080 - стр.090 + стр.100 Листов 05 + стр.530 Листа 06
				Данные.П002000010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000006003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000007003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000008003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000009003)
								 	 + СуммаПоказателяПоВсемСтраницам(Форма, "Лист05", "П002100010003", Истина)
								 	 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П002110053003);
				
			ИначеЕсли  (ПрПлЛист02 = "3" И Есть_Лист02_ПрПл1)
				ИЛИ (ПрПлЛист02 = "2" И (Есть_Лист02_ПрПл1 ИЛИ Есть_Лист02_ПрПл3)) Тогда
				//(Для стр. с ПризнакПлательщика = 3, если есть стр. с ПризнакПлательщика = 1) 
				//или (Для стр. с ПризнакПлательщика = 2, если есть стр. с ПризнакПлательщика = 1 или с ПризнакПлательщика = 3)
				
				//стр.100 = стр.060 - стр.070 - стр.080 - стр.090
				Данные.П002000010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000006003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000007003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000008003)
								 	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000009003)
			Иначе
				Данные.П002000010003 = 0;
			КонецЕсли;
			
			Если НомерМесяца = 3 ИЛИ НомерМесяца = 12 Тогда
				Если ПрПлЛист02 <> "" Тогда
					//стр.110 = стр.150 Прил.4 Лист02
					Данные.П002000011003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_4", "П002040015003", Истина, услПрПлЛист02_4);
				Иначе
					Данные.П002000011003 = 0;	
				КонецЕсли;
			КонецЕсли;
			
			//стр.120 = стр.100 - стр.110
			Данные.П002000012003 = Макс(Данные.П002000010003 - Данные.П002000011003, 0);
			
			// Строка 140
			//нет округления, поскольку это не сумма, число
			Данные.П002000014003 = Данные.П002000015003 + Макс(Данные.П002000016003,Данные.П002000017003);
			
			
			//стр.190 = макс(стр.120 х стр.150 / 100 , 0)
			Данные.П002000019003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000012003) * Данные.П002000015003/100), 0);
			
			// Строка 200.
			Если ПоКонсолидированнойГруппе Тогда
				Данные.П002000020003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140007003", Истина);
			ИначеЕсли ПрПлЛист02 <> "" Тогда
				Если Есть_Прил5 Тогда
					Данные.П002000020003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050007003", Истина, услПрПлЛист02_5);
				Иначе
					Слагаемое1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, (Данные.П002000012003 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000013003))
					* Данные.П002000016003/100);
					Слагаемое2 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000013003)* Данные.П002000017003/100);
					Данные.П002000020003 = Макс(Слагаемое1 + Слагаемое2, 0);
				КонецЕсли;
			Иначе
				Данные.П002000020003 = 0;
			КонецЕсли;
					
			// Строка 230.
			Если ПоКонсолидированнойГруппе Тогда
				Данные.П002000023003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140008003", Истина);
			ИначеЕсли ПрПлЛист02 <> "" Тогда
				Если Есть_Прил5 Тогда
					Если ПрПлЛист02 <> "" Тогда
						Данные.П002000023003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050008003", Истина, услПрПлЛист02_5);
					Иначе
						Данные.П002000023003 = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Строка 180.
			Данные.П002000018003 = Данные.П002000019003 + Данные.П002000020003;
			
			// Строка 210.
			Данные.П002000021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000022003)
			                     + Данные.П002000023003;
			
			// Строка 270.
			Данные.П002000027003 = Макс(Данные.П002000019003
			                     - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000022003)
			                     - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000025003), 0);
			
			// Строка 280.
			Данные.П002000028003 = Макс(- Данные.П002000019003
			                     + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000022003)
			                     + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000025003), 0);
			
			// Строки 271 и 281.
			Если ПоКонсолидированнойГруппе Тогда
				Данные.П002000027103 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140010003", Истина);
				Данные.П002000028103 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140011003", Истина);
			Иначе
				Данные.П002000027103 = Макс(Данные.П002000020003
				                     - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000023003)
				                     - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000026003), 0);
				Данные.П002000028103 = Макс(- Данные.П002000020003
				                     + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000023003)
				                     + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002000026003), 0);
			КонецЕсли;
			
			Если ПоКонсолидированнойГруппе Тогда
				Если НомерМесяца = 9 Тогда
					Данные.П002000031003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140012003", Истина);
					Данные.П002000034003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140012103", Истина);
				ИначеЕсли НомерМесяца = 11 Тогда
					Данные.П002000034003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140012103", Истина);
				КонецЕсли;
			Иначе
				АвторасчетДляГруппыОбособленныхПодразделений = (ЗначениеЗаполнено(ПоМесту) И СтрНайти("220,223,218", ПоМесту) = 0)
				И (ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П002050000100, П002050001000", ПрПлЛист02, "4")));
				
				Рассчитывать310 = (НомерМесяца = 9 И Есть_Прил5 И НЕ ПоОбособленномуПодразделению)
				ИЛИ (АвторасчетДляГруппыОбособленныхПодразделений);
				
				Если Рассчитывать310 Тогда
					Данные.П002000031003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, услПрПлЛист02_5);
				КонецЕсли;
				
				// При заполнении декларации для 9 и 11 месяца по головной организации при наличии заполненных приложений 5 к листу 02
				// строка 340 рассчитывается на основании сумм строк 121 приложения 5 к листу 02 по признаку плательщика.
				Рассчитывать340 = ((НомерМесяца = 9 ИЛИ НомерМесяца = 11) И Есть_Прил5 И НЕ флЕстьОбособ);
				Если Рассчитывать340 Тогда
					Данные.П002000034003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, услПрПлЛист02_5);
				КонецЕсли;
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				
				Форма.ТабличныйДокумент.Области.П002000001003.Значение = Данные.П002000001003;
				Форма.ТабличныйДокумент.Области.П002000002003.Значение = Данные.П002000002003;
				Форма.ТабличныйДокумент.Области.П002000003003.Значение = Данные.П002000003003;
				Форма.ТабличныйДокумент.Области.П002000004003.Значение = Данные.П002000004003;
				Форма.ТабличныйДокумент.Области.П002000005003.Значение = Данные.П002000005003;
				Форма.ТабличныйДокумент.Области.П002000006003.Значение = Данные.П002000006003;
				
				Форма.ТабличныйДокумент.Области.П002000010003.Значение = Данные.П002000010003;
				Форма.ТабличныйДокумент.Области.П002000011003.Значение = Данные.П002000011003;
				Форма.ТабличныйДокумент.Области.П002000012003.Значение = Данные.П002000012003;
				Форма.ТабличныйДокумент.Области.П002000014003.Значение = Данные.П002000014003;
	
				Форма.ТабличныйДокумент.Области.П002000018003.Значение = Данные.П002000018003;
				Форма.ТабличныйДокумент.Области.П002000019003.Значение = Данные.П002000019003;
				Форма.ТабличныйДокумент.Области.П002000020003.Значение = Данные.П002000020003;
				Форма.ТабличныйДокумент.Области.П002000021003.Значение = Данные.П002000021003;
				Форма.ТабличныйДокумент.Области.П002000023003.Значение = Данные.П002000023003;
				
				Форма.ТабличныйДокумент.Области.П002000027003.Значение = Данные.П002000027003;
				Форма.ТабличныйДокумент.Области.П002000027103.Значение = Данные.П002000027103;
				Форма.ТабличныйДокумент.Области.П002000028003.Значение = Данные.П002000028003;
				Форма.ТабличныйДокумент.Области.П002000028103.Значение = Данные.П002000028103;
				
				Форма.ТабличныйДокумент.Области.П002000031003.Значение = Данные.П002000031003;
				Форма.ТабличныйДокумент.Области.П002000034003.Значение = Данные.П002000034003;
				
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_1" Тогда
			
			ПрПлЛист02_1 = Данные.П002010000100;
			услПрПлЛист02_3 = Новый Структура("П002030000100", ПрПлЛист02_1);
			
			//строка 010
			Данные.П002010001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010001103)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010001203)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010001303)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010001403);
			
			//строка 030
			Если ПрПлЛист02_1 <> "" Тогда
				Данные.П002010003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_3", "П002030034003", Истина, услПрПлЛист02_3);
			Иначе
				Данные.П002010003003 = 0;
			КонецЕсли;
			
			//строка 040
			Данные.П002010004003 = Данные.П002010001003	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010002003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002010002303)	
								 + Данные.П002010003003;
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002010001003.Значение = Данные.П002010001003;
				Форма.ТабличныйДокумент.Области.П002010003003.Значение = Данные.П002010003003;
				Форма.ТабличныйДокумент.Области.П002010004003.Значение = Данные.П002010004003;
				Форма.ТабличныйДокумент.Области.П002010010003.Значение = Данные.П002010010003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_2" Тогда
			
			ПрПлЛист02_2 = Данные.П002020000100;
			услПрПлЛист02_3 = Новый Структура("П002030000100", ПрПлЛист02_2);
			
			//строка 080
			Если ПрПлЛист02_2 <> "" Тогда
				Данные.П002020008003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_3", "П002030035003", Истина, услПрПлЛист02_3);
			Иначе
				Данные.П002020008003 = 0;
			КонецЕсли;
			
			//строка 130
			Данные.П002020013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020001003)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020002003)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020004003)	
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020005903)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020006003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020006103)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020007003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020008003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020009003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020010003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020011003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002020012003);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002020008003.Значение = Данные.П002020008003;
				Форма.ТабличныйДокумент.Области.П002020013003.Значение = Данные.П002020013003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_3" Тогда
			
			//строка 150
			Данные.П002030015003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030012003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030010003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030014003), 0);
			
			//строка 160
			Данные.П002030016003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030013003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030011003), 0);
			
			//строка 230
			Данные.П002030023003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030022003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030021003), 0);
			
			//строка 340
			Данные.П002030034003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030003003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030010003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030011003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030018003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030021003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030021103)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030024003);
			
			//строка 350
			Данные.П002030035003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030004003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030012003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030013003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030019003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030022003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030022103)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030025003);
			
			//строка 360
			Данные.П002030036003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030006003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030015003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030016003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030020103)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030023003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002030026003);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002030015003.Значение = Данные.П002030015003;
				Форма.ТабличныйДокумент.Области.П002030016003.Значение = Данные.П002030016003;
				Форма.ТабличныйДокумент.Области.П002030023003.Значение = Данные.П002030023003;
				Форма.ТабличныйДокумент.Области.П002030034003.Значение = Данные.П002030034003;
				Форма.ТабличныйДокумент.Области.П002030035003.Значение = Данные.П002030035003;
				Форма.ТабличныйДокумент.Области.П002030036003.Значение = Данные.П002030036003;
			КонецЕсли;

		ИначеЕсли ИмяЛиста = "Лист02_4" Тогда
			
			ПрПлЛист02_4 = Данные.П002040000100;
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлЛист02_4);
			
			//строка 010 - далее
			
			//строка 030
			Данные.П002040001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040004003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040005003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040006003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040007003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040008003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040009003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040010003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040011003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040012003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002040013003);
			
			//строка 140 авторассчитывается только за 1 и 4 квартал
			НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Если НомерМесяца = 3 ИЛИ НомерМесяца = 12 Тогда
				//стр.140 = стр.100 Лист 02
				Данные.П002040014003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000010003", Истина, услПрПлЛист02);	
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002040001003.Значение = Данные.П002040001003;
				Форма.ТабличныйДокумент.Области.П002040014003.Значение = Данные.П002040014003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_5" Тогда
			
			ПрПлЛист02_5 = Данные.П002050000100;
			
			РасчетСоставленЛист02_5 = Данные.П002050001000;
			
			услПрПлЛист02 = Новый Структура("П002000000100", ПрПлЛист02_5);
			услПрПлЛист02Прил5_И_Расчет_3 = Новый Структура ("П002050000100,П002050001000",ПрПлЛист02_5,"3");
									
			ЕстьПрил5_Расчет3_И_ПрПл = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", услПрПлЛист02Прил5_И_Расчет_3);
						
			Если НЕ флЕстьОбособ Тогда
				// Строка 030.
				Если ПрПлЛист02_5 <> "" Тогда
					Данные.П002050003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000012003", Истина, услПрПлЛист02);
				Иначе
					Данные.П002050003003 = 0;
				КонецЕсли;
			КонецЕсли; 
			
			// Строка 031.
			Если ЗначениеЗаполнено(ПрПлЛист02_5) И ЕстьПрил5_Расчет3_И_ПрПл Тогда
				Данные.П002050003103 = Данные.П002050003003
				- СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050005003", Истина, услПрПлЛист02Прил5_И_Расчет_3);
			КонецЕсли;
			
			Если РасчетСоставленЛист02_5 = "3" Тогда
				//Расчет составлен = "3"
				//стр.050 = вручную
			Иначе		
				//Расчет составлен <> "3"
				Если ЕстьПрил5_Расчет3_И_ПрПл Тогда
					Данные.П002050005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050003103 * Данные.П002050004003 / 100);
				Иначе
					Множитель = ?(Данные.П002050003103 <> 0, Данные.П002050003103, Данные.П002050003003);
					Данные.П002050005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Множитель * Данные.П002050004003 / 100);
				КонецЕсли;
			КонецЕсли;
			
			//стр.070 = стр.050 х стр.060/100
			Данные.П002050007003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050005003) * Данные.П002050006003/100), 0);
			
			//стр.100
			Если РасчетСоставленЛист02_5="3" Тогда
				//Расчет составлен = "3"
				//стр.100 не заполняются, если "Расчет составлен" = 3 (ликвидированное ОП)
				Данные.П002050010003 = 0;
			Иначе		
				//Расчет составлен <> "3"
				//стр.100 = макс(стр.070 - стр.080 - стр.090, 0)
				Данные.П002050010003 = Макс(Данные.П002050007003
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050008003)
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050009003), 0);
			КонецЕсли;
			
			
			//стр.110 = макс(стр.080 + стр.090 - стр.070, 0)
			Данные.П002050011003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050008003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002050009003)
								 - Данные.П002050007003, 0);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002050003003.Значение = Данные.П002050003003;
				Форма.ТабличныйДокумент.Области.П002050003103.Значение = Данные.П002050003103;
				Форма.ТабличныйДокумент.Области.П002050005003.Значение = Данные.П002050005003;
				Форма.ТабличныйДокумент.Области.П002050007003.Значение = Данные.П002050007003;
				Форма.ТабличныйДокумент.Области.П002050010003.Значение = Данные.П002050010003;
				Форма.ТабличныйДокумент.Области.П002050011003.Значение = Данные.П002050011003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_6" Тогда
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				СубъектРФ = Форма.ТабличныйДокумент.Области.П002140000601.Значение;
			Иначе
				СубъектРФ = Данные.П002140000601;
			КонецЕсли;
			
			РассчитыватьПоказателиПриложения = (ПоМесту = "218" И НЕ ПустаяСтрока(СубъектРФ));
			
			// Строка 030.
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П002140003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000012003", Истина);
			Иначе
				Данные.П002140003003 = 0;
			КонецЕсли;
			
			// Строка 031.
			УсловиеСуммирования031 = Новый Структура;
			УсловиеСуммирования031.Вставить("П002150000501", "3"); // "Расчет составлен"
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П002140003103 = Данные.П002140003003
				                     - СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, "П002150005003", Истина, УсловиеСуммирования031);
			Иначе
				Данные.П002140003103 = 0;
			КонецЕсли;
			
			УсловиеОКАТО = Новый Структура("П002150000301", СубъектРФ);
			
			// Строка 040 и 050.
			Если РассчитыватьПоказателиПриложения Тогда
				ЗначениеДляСтроки040 = СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, "П002150004003", Ложь, УсловиеОКАТО);
				Данные.П002140004003 = Макс(0, ЗначениеДляСтроки040);
				
				ЗначениеДляСтроки050 = СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, "П002150005003", Ложь, УсловиеОКАТО);
				Данные.П002140005003 = ЗначениеДляСтроки050;

			Иначе
				Данные.П002140004003 = 0;
				Данные.П002140005003 = 0;
			КонецЕсли;
			
			// Строка 070.
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П002140007003 = СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, "П002150007003", Истина, УсловиеОКАТО);
			Иначе
				Данные.П002140007003 = 0;
			КонецЕсли;
			
			// Строка 100.
			Строка070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002140007003);
			Строка080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002140008003);
			Строка090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002140009003);
			
			СуммаНалога = Строка070 - (Строка080 + Строка090);
			
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П002140010003 = Макс(0, СуммаНалога);
			Иначе
				Данные.П002140010003 = 0;
			КонецЕсли;
			
			// Строка 110.
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П002140011003 = -1* Мин(0, СуммаНалога);
			Иначе
				Данные.П002140011003 = 0;
			КонецЕсли;
			
			// Количество листов Приложения 6а к Листу 02 с указанным кодом субъекта РФ.
			Данные.П002140000501 = ?(РассчитыватьПоказателиПриложения, КоличествоЛистов02_6а(Форма, СубъектРФ), 0);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002140003003.Значение = Данные.П002140003003;
				Форма.ТабличныйДокумент.Области.П002140003103.Значение = Данные.П002140003103;
				Форма.ТабличныйДокумент.Области.П002140004003.Значение = Данные.П002140004003;
				Форма.ТабличныйДокумент.Области.П002140005003.Значение = Данные.П002140005003;
				Форма.ТабличныйДокумент.Области.П002140007003.Значение = Данные.П002140007003;
				Форма.ТабличныйДокумент.Области.П002140010003.Значение = Данные.П002140010003;
				Форма.ТабличныйДокумент.Области.П002140011003.Значение = Данные.П002140011003;
				Форма.ТабличныйДокумент.Области.П002140000501.Значение = Данные.П002140000501;				
			КонецЕсли;

	
		ИначеЕсли ИмяЛиста = "Лист02_6а" Тогда
			
			РассчитыватьПоказателиПриложения = (ПоМесту = "218");
			УсловиеРасчетСоставлен3 = Новый Структура("П002150000501", "3");
			
			// Строка 030.
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П002150003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000012003", Истина);
			Иначе
				Данные.П002150003003 = 0;
			КонецЕсли;
			
			// Строка 031.
			ЕстьЗакрытыеОП = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_6а", УсловиеРасчетСоставлен3);
			РасчетСоставлен = Данные.П002150000501;
						
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П002150003103 = Данные.П002150003003
				                     - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6а", "П002150005003", Истина, УсловиеРасчетСоставлен3);
									 
									 
				Если (РасчетСоставлен = "3") ИЛИ (ЕстьЗакрытыеОП) Тогда
					Данные.П002150003103 = Данные.П002150003003
					    			     - СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6а", "П002150005003", Истина, УсловиеРасчетСоставлен3);
				КонецЕсли;					 
			Иначе
				Данные.П002150003103 = 0;
			КонецЕсли;
			
			// Строка 050.
			РасчетСоставлен = Данные.П002150000501;
			Если РасчетСоставлен <> "3" Тогда
				
				Строка030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002150003003);
				Строка031 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002150003103);
				Строка040 = Данные.П002150004003;
				
				НалоговаяБаза = ?(ЗначениеЗаполнено(Строка031), Строка031, Строка030);
				
				Данные.П002150005003 = НалоговаяБаза * Строка040 / 100;
				
			КонецЕсли;
			
			// Строка 070.
			Строка050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002150005003);
			Строка060 = Данные.П002150006003;
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П002150007003 = Макс(0, Строка050) * Строка060 / 100;
			Иначе
				Данные.П002150007003 = 0;
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002150003003.Значение = Данные.П002150003003;
				Форма.ТабличныйДокумент.Области.П002150003103.Значение = Данные.П002150003103;
				Форма.ТабличныйДокумент.Области.П002150005003.Значение = Данные.П002150005003;
				Форма.ТабличныйДокумент.Области.П002150007003.Значение = Данные.П002150007003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист03А" Тогда
			
			//ст.040 = макс(стр.010 - стр.020 - стр.030, 0)
			Данные.П002060004003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060001003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060002003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060003003), 0);
								 
			//ст.090  = стр.040 - стр.071
			Данные.П002060009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060004003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002060007103);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002060004003.Значение = Данные.П002060004003;
				Форма.ТабличныйДокумент.Области.П002060009003.Значение = Данные.П002060009003;
			КонецЕсли;
		
		ИначеЕсли ИмяЛиста = "Лист03Б" Тогда
						
			//строка 030
			Данные.П002070003003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002070001003) * Данные.П002070002003/100), 0);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002070003003.Значение = Данные.П002070003003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист04" Тогда
			
			//стр.040  = макс((стр.010 - стр.020) * стр.030 /100, 0) 
			Данные.П002090004003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090001003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090002003))
								 * Данные.П002090003003/100), 0);
			
			//стр.080 = макс((стр.040 - стр.050 - стр.060 - стр.070), 0)
			Данные.П002090008003 = Макс(Данные.П002090004003
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090005003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090006003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002090007003), 0);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002090004003.Значение = Данные.П002090004003;
				Форма.ТабличныйДокумент.Области.П002090008003.Значение = Данные.П002090008003;
			КонецЕсли;
								 
		ИначеЕсли ИмяЛиста = "Лист05" Тогда
			
			//стр.040 = (стр.010 + стр.020 - стр.030 + стр.031)
			Данные.П002100004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100001003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100002003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100003003) 
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100003103); 
			
			//стр.060 = макс(стр.040 - стр.050, 0)
			Данные.П002100006003 = Макс(Данные.П002100004003
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100005003), 0); 
			
			//строка 090
			Если флНалоговыйПериод И Данные.П002100004003 < 0 Тогда
				//налоговый период с убытком
				// Строка 090 = мод(строка 040) + строка 070
				Данные.П002100009003 = -Данные.П002100004003
									 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100007003);
			Иначе
				//отчетный период или налоговый с прибылью
				//стр.090 = стр.070 - стр.080
				Данные.П002100009003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100007003)
									 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100008003), 0); 
			КонецЕсли;
			
			//стр.100 = макс(стр.060 - стр.080, 0)
			Данные.П002100010003 = Макс(Данные.П002100006003
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П002100008003), 0);
								 
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П002100004003.Значение = Данные.П002100004003;
				Форма.ТабличныйДокумент.Области.П002100006003.Значение = Данные.П002100006003;
				Форма.ТабличныйДокумент.Области.П002100009003.Значение = Данные.П002100009003;
				Форма.ТабличныйДокумент.Области.П002100010003.Значение = Данные.П002100010003;
			КонецЕсли;
								 
		КонецЕсли;
		
	КонецЦикла; // Конец перебора страниц многостраничного раздела
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл1_Л02ПрПл3_ГО_Л02Пр5(Форма, Данные)
	
	УсловиеСуммированияЛист02ПрПл1 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	УсловиеСуммированияЛист02ПрПл3 = Новый Структура("П002000000100", "3"); // Признак плательщика Листа 02
	
	УсловиеСуммированияЛист02Прил5ПрПл1 = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл1.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1.Вставить("П002050001000", "1"); // Расчет составлен Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5ПрПл3 = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл3.Вставить("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3.Вставить("П002050001000", "1"); // Расчет составлен Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО.Вставить("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	СуммаСтрок270Листа02ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027003", Истина, УсловиеСуммированияЛист02ПрПл1));
	СуммаСтрок270Листа02ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027003", Истина, УсловиеСуммированияЛист02ПрПл3));
	СуммаСтрок280Листа02ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028003", Истина, УсловиеСуммированияЛист02ПрПл1));
	СуммаСтрок280Листа02ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028003", Истина, УсловиеСуммированияЛист02ПрПл3));
	
	СуммаНалогаФедеральныйБюджет = СуммаСтрок270Листа02ПрПл3 + СуммаСтрок270Листа02ПрПл1
	                             - СуммаСтрок280Листа02ПрПл3 - СуммаСтрок280Листа02ПрПл1;
	
	СуммаСтрок100Лист02Прил5ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1));
	СуммаСтрок100Лист02Прил5ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3));
		
	СуммаСтрок100Лист02Прил5ПрПл1_сГО = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1_сГО));
	СуммаСтрок100Лист02Прил5ПрПл3_сГО = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3_сГО));
	
	СуммаСтрок110Лист02Прил5ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1));
	СуммаСтрок110Лист02Прил5ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3));
	
	СуммаСтрок110Лист02Прил5ПрПл1_сГО = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1_сГО));
	СуммаСтрок110Лист02Прил5ПрПл3_сГО = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3_сГО));
	
	Данные.П000110004003 = Макс(0, СуммаНалогаФедеральныйБюджет);
	Данные.П000110005003 = -1 * Мин(0, СуммаНалогаФедеральныйБюджет);
	Данные.П000110007003 = СуммаСтрок100Лист02Прил5ПрПл3 + СуммаСтрок100Лист02Прил5ПрПл1
	                     + СуммаСтрок100Лист02Прил5ПрПл3_сГО + СуммаСтрок100Лист02Прил5ПрПл1_сГО;
	Данные.П000110008003 = СуммаСтрок110Лист02Прил5ПрПл3 + СуммаСтрок110Лист02Прил5ПрПл1
	                     + СуммаСтрок110Лист02Прил5ПрПл3_сГО + СуммаСтрок110Лист02Прил5ПрПл1_сГО;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл1_Л02ПрПл3_ГО(Форма, Данные)
	
	УсловиеСуммированияЛист02ПрПл1 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	УсловиеСуммированияЛист02ПрПл3 = Новый Структура("П002000000100", "3"); // Признак плательщика Листа 02
	
	СуммаСтрок270Листа02ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027003", Истина, УсловиеСуммированияЛист02ПрПл1));
	СуммаСтрок270Листа02ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027003", Истина, УсловиеСуммированияЛист02ПрПл3));
	СуммаСтрок280Листа02ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028003", Истина, УсловиеСуммированияЛист02ПрПл1));
	СуммаСтрок280Листа02ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028003", Истина, УсловиеСуммированияЛист02ПрПл3));
	
	СуммаНалогаФедеральныйБюджет = СуммаСтрок270Листа02ПрПл3 + СуммаСтрок270Листа02ПрПл1
	                             - СуммаСтрок280Листа02ПрПл3 - СуммаСтрок280Листа02ПрПл1;
	
	СуммаСтрок271Листа02ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027103", Истина, УсловиеСуммированияЛист02ПрПл1));
	СуммаСтрок271Листа02ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027103", Истина, УсловиеСуммированияЛист02ПрПл3));
	СуммаСтрок281Листа02ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028103", Истина, УсловиеСуммированияЛист02ПрПл1));
	СуммаСтрок281Листа02ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028103", Истина, УсловиеСуммированияЛист02ПрПл3));
	
	СуммаНалогаБюджетСубъектаРФ = СуммаСтрок271Листа02ПрПл3 + СуммаСтрок271Листа02ПрПл1
	                            - СуммаСтрок281Листа02ПрПл3 - СуммаСтрок281Листа02ПрПл1;
	
	Данные.П000110004003 = Макс(0, СуммаНалогаФедеральныйБюджет);
	Данные.П000110005003 = -1 * Мин(0, СуммаНалогаФедеральныйБюджет);
	Данные.П000110007003 = Макс(0, СуммаНалогаБюджетСубъектаРФ);
	Данные.П000110008003 = -1 * Мин(0, СуммаНалогаБюджетСубъектаРФ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл1_Л02ПрПл3_ОП(Форма, Данные)
	
	УсловиеСуммированияЛист02Прил5ПрПл1 = Новый Структура("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3 = Новый Структура("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	
	СуммаСтрок100Лист02Прил5ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1));
	СуммаСтрок100Лист02Прил5ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3));
	СуммаСтрок110Лист02Прил5ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1));
	СуммаСтрок110Лист02Прил5ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3));
	
	Данные.П000110004003 = 0;
	Данные.П000110005003 = 0;
	Данные.П000110007003 = СуммаСтрок100Лист02Прил5ПрПл3 + СуммаСтрок100Лист02Прил5ПрПл1;
	Данные.П000110008003 = СуммаСтрок110Лист02Прил5ПрПл3 + СуммаСтрок110Лист02Прил5ПрПл1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл1_Л02ПрПл3_КГ(Форма, Данные)
	
	ОКАТО = Данные.П000110001003;
	
	Если ЭтоОтветственныйУчастникКГ(Форма, ОКАТО) Тогда
		
		УсловиеСуммированияЛист02ПрПл1 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
		УсловиеСуммированияЛист02ПрПл3 = Новый Структура("П002000000100", "3"); // Признак плательщика Листа 02
		
		СуммаСтрок270Листа02ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027003", Истина, УсловиеСуммированияЛист02ПрПл1));
		СуммаСтрок270Листа02ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027003", Истина, УсловиеСуммированияЛист02ПрПл3));
		СуммаСтрок280Листа02ПрПл1 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028003", Истина, УсловиеСуммированияЛист02ПрПл1));
		СуммаСтрок280Листа02ПрПл3 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028003", Истина, УсловиеСуммированияЛист02ПрПл3));
		
		СуммаНалога = СуммаСтрок270Листа02ПрПл3 + СуммаСтрок270Листа02ПрПл1
		            - СуммаСтрок280Листа02ПрПл3 - СуммаСтрок280Листа02ПрПл1;
		
		Данные.П000110004003 = Макс(0, СуммаНалога);
		Данные.П000110005003 = -1 * Мин(0, СуммаНалога);
		
	Иначе
		
		Данные.П000110004003 = 0;
		Данные.П000110005003 = 0;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		
		УсловиеСуммированияОКАТО = Новый Структура("П002140000301", ОКАТО); // Код ОКАТО Приложения 6 к Листу 02
		
		Данные.П000110007003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140010003", Истина, УсловиеСуммированияОКАТО)); // Строка 100 Приложения 6 к Листу 02
		Данные.П000110008003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140011003", Истина, УсловиеСуммированияОКАТО)); // Строка 110 Приложения 6 к Листу 02
		
	Иначе
		
		Данные.П000110007003 = 0;
		Данные.П000110008003 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл1_ГО_Л02Пр5(Форма, Данные)
	
	УсловиеСуммированияЛист02 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	УсловиеСуммированияЛист02Прил5 = Новый Структура;
	УсловиеСуммированияЛист02Прил5.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5.Вставить("П002050001000", "1"); // Расчет составлен Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5_сГО = Новый Структура; // по обособленным подразделениям, включая головную организацию
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	СуммаСтрок190Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, УсловиеСуммированияЛист02);
	СуммаСтрок220Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, УсловиеСуммированияЛист02);
	СуммаСтрок250Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, УсловиеСуммированияЛист02);
	
	СуммаНалога = СуммаСтрок190Листа02 - СуммаСтрок220Листа02 - СуммаСтрок250Листа02;
	
	Данные.П000110004003 = Макс(0, СуммаНалога);
	Данные.П000110005003 = -1 * Мин(0, СуммаНалога);
			
	СуммаНалогаСубъектРФ_Доплата    = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5_сГО));
	
	СуммаНалогаСубъектРФ_Уменьшение = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5_сГО));
	
	Данные.П000110007003 = СуммаНалогаСубъектРФ_Доплата; // Строка 100 Приложения 5 к Листу 02
	Данные.П000110008003 = СуммаНалогаСубъектРФ_Уменьшение; // Строка 110 Приложения 5 к Листу 02
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл1_ГО(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	
	СуммаСтрок190Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, УсловиеСуммирования);
	СуммаСтрок220Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, УсловиеСуммирования);
	СуммаСтрок250Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, УсловиеСуммирования);
	
	СуммаНалогаФедеральныйБюджет = СуммаСтрок190Листа02 - СуммаСтрок220Листа02 - СуммаСтрок250Листа02;
	
	СуммаСтрок200Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000020003", Истина, УсловиеСуммирования);
	СуммаСтрок230Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000023003", Истина, УсловиеСуммирования);
	СуммаСтрок260Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000026003", Истина, УсловиеСуммирования);
	
	СуммаНалогаБюджетСубъектаРФ = СуммаСтрок200Листа02 - СуммаСтрок230Листа02 - СуммаСтрок260Листа02;
	
	Данные.П000110004003 = Макс(0, СуммаНалогаФедеральныйБюджет);
	Данные.П000110005003 = -1 * Мин(0, СуммаНалогаФедеральныйБюджет);
	Данные.П000110007003 = Макс(0, СуммаНалогаБюджетСубъектаРФ);
	Данные.П000110008003 = -1 * Мин(0, СуммаНалогаБюджетСубъектаРФ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл1_ОП(Форма, Данные)
	
	УсловиеСуммированияПрПл1 = Новый Структура("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияПрПл3 = Новый Структура("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	
	Данные.П000110004003 = 0;
	Данные.П000110005003 = 0;
	Данные.П000110007003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияПрПл1))
	                     + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияПрПл3));
	Данные.П000110008003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияПрПл1))
	                     + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияПрПл3));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл1_КГ(Форма, Данные)
	
	ОКАТО = Данные.П000110001003;
	
	Если ЭтоОтветственныйУчастникКГ(Форма, ОКАТО) Тогда
		
		УсловиеСуммирования = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
		
		СуммаСтрок190Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, УсловиеСуммирования);
		СуммаСтрок220Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, УсловиеСуммирования);
		СуммаСтрок250Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, УсловиеСуммирования);
		
		СуммаНалога = СуммаСтрок190Листа02 - СуммаСтрок220Листа02 - СуммаСтрок250Листа02;
		
		Данные.П000110004003 = Макс(0, СуммаНалога);
		Данные.П000110005003 = -1 * Мин(0, СуммаНалога);
		
	Иначе
		
		Данные.П000110004003 = 0;
		Данные.П000110005003 = 0;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		
		УсловиеСуммированияОКАТО = Новый Структура("П002140000301", ОКАТО); // Код ОКАТО Приложения 6 к Листу 02
		
		Данные.П000110007003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140010003", Истина, УсловиеСуммированияОКАТО)); // Строка 100 Приложения 6 к Листу 02
		Данные.П000110008003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140011003", Истина, УсловиеСуммированияОКАТО)); // Строка 110 Приложения 6 к Листу 02
		
	Иначе
		
		Данные.П000110007003 = 0;
		Данные.П000110008003 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл2_ГО_Л02Пр5(Форма, Данные)
	
	УсловиеСуммированияЛист02 = Новый Структура("П002000000100", "2"); // Признак плательщика Листа 02
	УсловиеСуммированияЛист02Прил5 = Новый Структура;
	УсловиеСуммированияЛист02Прил5.Вставить("П002050000100", "2"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5.Вставить("П002050001000", "1"); // Расчет составлен Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5_сГО = Новый Структура; // по обособленным подразделениям, включая головную организацию
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("П002050000100", "2"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	СуммаСтрок190Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, УсловиеСуммированияЛист02);
	СуммаСтрок220Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, УсловиеСуммированияЛист02);
	СуммаСтрок250Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, УсловиеСуммированияЛист02);
	
	СуммаНалога = СуммаСтрок190Листа02 - СуммаСтрок220Листа02 - СуммаСтрок250Листа02;
	
	Данные.П000110004003 = Макс(0, СуммаНалога);
	Данные.П000110005003 = -1 * Мин(0, СуммаНалога);
	СуммаНалогаСубъектРФ_Доплата    = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммированияЛист02Прил5_сГО));
	СуммаНалогаСубъектРФ_Уменьшение = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммированияЛист02Прил5_сГО));
	
	Данные.П000110007003 = СуммаНалогаСубъектРФ_Доплата; // Строка 100 Приложения 5 к Листу 02
	Данные.П000110008003 = СуммаНалогаСубъектРФ_Уменьшение; // Строка 110 Приложения 5 к Листу 02
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл2_ГО(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002000000100", "2"); // Признак плательщика Листа 02
	
	Данные.П000110004003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027003", Истина, УсловиеСуммирования)); // Строка 270 Листа 02
	Данные.П000110005003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028003", Истина, УсловиеСуммирования)); // Строка 280 Листа 02
	Данные.П000110007003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000027103", Истина, УсловиеСуммирования)); // Строка 271 Листа 02
	Данные.П000110008003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000028103", Истина, УсловиеСуммирования)); // Строка 281 Листа 02
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл2_ОП(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002050000100", "2"); // Признак плательщика Приложения 5 к Листу 02
	
	Данные.П000110004003 = 0;
	Данные.П000110005003 = 0;
	Данные.П000110007003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050010003", Истина, УсловиеСуммирования)); // Строка 100 Приложения 5 к Листу 02
	Данные.П000110008003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050011003", Истина, УсловиеСуммирования)); // Строка 110 Приложения 5 к Листу 02
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1_ПрПл2_КГ(Форма, Данные)
	
	ОКАТО = Данные.П000110001003;
	
	Если ЭтоОтветственныйУчастникКГ(Форма, ОКАТО) Тогда
		
		УсловиеСуммирования = Новый Структура("П002000000100", "2"); // Признак плательщика Листа 02
		
		СуммаСтрок190Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000019003", Истина, УсловиеСуммирования);
		СуммаСтрок220Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000022003", Истина, УсловиеСуммирования);
		СуммаСтрок250Листа02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000025003", Истина, УсловиеСуммирования);
		
		СуммаНалога = СуммаСтрок190Листа02 - СуммаСтрок220Листа02 - СуммаСтрок250Листа02;
		
		Данные.П000110004003 = Макс(0, СуммаНалога);
		Данные.П000110005003 = -1 * Мин(0, СуммаНалога);
		
	Иначе
		
		Данные.П000110004003 = 0;
		Данные.П000110005003 = 0;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		
		УсловиеСуммированияОКАТО = Новый Структура("П002140000301", ОКАТО); // Код ОКАТО Приложения 6 к Листу 02
		
		Данные.П000110007003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140010003", Истина, УсловиеСуммированияОКАТО)); // Строка 100 Приложения 6 к Листу 02
		Данные.П000110008003 = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140011003", Истина, УсловиеСуммированияОКАТО)); // Строка 110 Приложения 6 к Листу 02
		
	Иначе
		
		Данные.П000110007003 = 0;
		Данные.П000110008003 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл1_Л02ПрПл3_ГО_Л02Пр5(Форма, Данные)
	
	УсловиеСуммированияЛист02ПрПл3 = Новый Структура("П002000000100", "3"); // Признак плательщика Листа 02
	УсловиеСуммированияЛист02ПрПл1 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	
	УсловиеСуммированияЛист02Прил5ПрПл3 = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл3.Вставить("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3.Вставить("П002050001000", "1"); // Признак "Расчет составлен" Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5ПрПл1 = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл1.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1.Вставить("П002050001000", "1"); // Признак "Расчет составлен" Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО.Вставить("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммированияЛист02ПрПл3))
	                                  + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммированияЛист02ПрПл1));
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
								
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммированияЛист02Прил5ПрПл3))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммированияЛист02Прил5ПрПл1))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммированияЛист02Прил5ПрПл3_сГО))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммированияЛист02Прил5ПрПл1_сГО));								
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл1_Л02ПрПл3_ГО(Форма, Данные)
	
	УсловиеСуммированияЛист02ПрПл3 = Новый Структура("П002000000100", "3"); // Признак плательщика Листа 02
	УсловиеСуммированияЛист02ПрПл1 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммированияЛист02ПрПл3))
	                                  + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммированияЛист02ПрПл1));
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000034003", Истина, УсловиеСуммированияЛист02ПрПл3))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000034003", Истина, УсловиеСуммированияЛист02ПрПл1));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл1_Л02ПрПл3_ОП(Форма, Данные)
	
	УсловиеСуммированияЛист02Прил5ПрПл3 = Новый Структура("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1 = Новый Структура("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	
	Данные.П000120012003 = 0;
	Данные.П000120013003 = 0;
	Данные.П000120014003 = 0;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл1_Л02ПрПл3_КГ(Форма, Данные)
	
	ОКАТО = Данные.П000120001003;
	
	Если ЭтоОтветственныйУчастникКГ(Форма, ОКАТО) Тогда
		
		УсловиеСуммированияЛист02ПрПл3 = Новый Структура("П002000000100", "3"); // Признак плательщика Листа 02
		УсловиеСуммированияЛист02ПрПл1 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
		
		РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммированияЛист02ПрПл3))
		                                  + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммированияЛист02ПрПл1));
		
		Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
		
	Иначе
		
		Данные.П000120012003 = 0;
		Данные.П000120013003 = 0;
		Данные.П000120014003 = 0;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		
		УсловиеСуммированияОКАТО = Новый Структура("П002140000301", ОКАТО); // Код ОКАТО Приложения 6 к Листу 02
		
		РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140012103", Истина, УсловиеСуммированияОКАТО));
		
		Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
		
	Иначе
		
		Данные.П000120022003 = 0;
		Данные.П000120023003 = 0;
		Данные.П000120024003 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл1_ГО_Л02Пр5(Форма, Данные)
	
	УсловиеСуммированияЛист02 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	
	УсловиеСуммированияЛист02Прил5 = Новый Структура;
	УсловиеСуммированияЛист02Прил5.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5.Вставить("П002050001000", "1"); // Признак "Расчет составлен" Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммированияЛист02), 0);
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммированияЛист02Прил5), 0)
	                                + Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммированияЛист02Прил5ПрПл1_сГО), 0);
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл1_ГО(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммирования), 0);
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000034003", Истина, УсловиеСуммирования), 0);
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл1_ОП(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	
	Данные.П000120012003 = 0;
	Данные.П000120013003 = 0;
	Данные.П000120014003 = 0;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммирования), 0);
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл1_КГ(Форма, Данные)
	
	ОКАТО = Данные.П000120001003;
	
	Если ЭтоОтветственныйУчастникКГ(Форма, ОКАТО) Тогда
		
		УсловиеСуммирования = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
		
		РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммирования));
		
		Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
		
	Иначе
		
		Данные.П000120012003 = 0;
		Данные.П000120013003 = 0;
		Данные.П000120014003 = 0;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		
		УсловиеСуммированияОКАТО = Новый Структура("П002140000301", ОКАТО); // Код ОКАТО Приложения 6 к Листу 02
		
		РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140012103", Истина, УсловиеСуммированияОКАТО));
		
		Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
		
	Иначе
		
		Данные.П000120022003 = 0;
		Данные.П000120023003 = 0;
		Данные.П000120024003 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл2_ГО_Л02Пр5(Форма, Данные)
	
	УсловиеСуммированияЛист02 = Новый Структура("П002000000100", "2"); // Признак плательщика Листа 02
	
	УсловиеСуммированияЛист02Прил5 = Новый Структура;
	УсловиеСуммированияЛист02Прил5.Вставить("П002050000100", "2"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5.Вставить("П002050001000", "1"); // Признак "Расчет составлен" Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5_сГО = Новый Структура; // по обособленным подразделениям, включая головную организацию
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("П002050000100", "2"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммированияЛист02));
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммированияЛист02Прил5))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммированияЛист02Прил5_сГО));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл2_ГО(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002000000100", "2"); // Признак плательщика Листа 02
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммирования));
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000034003", Истина, УсловиеСуммирования));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл2_ОП(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002050000100", "2"); // Признак плательщика Приложения 5 к Листу 02
	
	Данные.П000120012003 = 0;
	Данные.П000120013003 = 0;
	Данные.П000120014003 = 0;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012103", Истина, УсловиеСуммирования));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_Кв21_ПрПл2_КГ(Форма, Данные)
	
	ОКАТО = Данные.П000120001003;
	
	Если ЭтоОтветственныйУчастникКГ(Форма, ОКАТО) Тогда
		
		УсловиеСуммирования = Новый Структура("П002000000100", "2"); // Признак плательщика Листа 02
		
		РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000033003", Истина, УсловиеСуммирования));
		
		Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
		
	Иначе
		
		Данные.П000120012003 = 0;
		Данные.П000120013003 = 0;
		Данные.П000120014003 = 0;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		
		УсловиеСуммированияОКАТО = Новый Структура("П002140000301", ОКАТО); // Код ОКАТО Приложения 6 к Листу 02
		
		РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140012103", Истина, УсловиеСуммированияОКАТО));
		
		Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
		
	Иначе
		
		Данные.П000120022003 = 0;
		Данные.П000120023003 = 0;
		Данные.П000120024003 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл1_Л02ПрПл3_ГО_Л02Пр5(Форма, Данные)
	
	УсловиеСуммированияЛист02ПрПл3 = Новый Структура("П002000000100", "3"); // Признак плательщика Листа 02
	УсловиеСуммированияЛист02ПрПл1 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	
	УсловиеСуммированияЛист02Прил5ПрПл3 = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл3.Вставить("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3.Вставить("П002050001000", "1"); // Признак "Расчет составлен" Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5ПрПл1 = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл1.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1.Вставить("П002050001000", "1"); // Признак "Расчет составлен" Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО.Вставить("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл3_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммированияЛист02ПрПл3))
	                                  + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммированияЛист02ПрПл1));
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3_сГО))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1_сГО));								
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл1_Л02ПрПл3_ГО(Форма, Данные)
	
	УсловиеСуммированияЛист02ПрПл3 = Новый Структура("П002000000100", "3"); // Признак плательщика Листа 02
	УсловиеСуммированияЛист02ПрПл1 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммированияЛист02ПрПл3))
	                                  + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммированияЛист02ПрПл1));
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000031003", Истина, УсловиеСуммированияЛист02ПрПл3))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000031003", Истина, УсловиеСуммированияЛист02ПрПл1));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл1_Л02ПрПл3_ОП(Форма, Данные)
	
	УсловиеСуммированияЛист02Прил5ПрПл3 = Новый Структура("П002050000100", "3"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1 = Новый Структура("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	
	Данные.П000120012003 = 0;
	Данные.П000120013003 = 0;
	Данные.П000120014003 = 0;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5ПрПл3))
	                     + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл1_Л02ПрПл3_КГ(Форма, Данные)
	
	ОКАТО = Данные.П000120001003;
	
	Если ЭтоОтветственныйУчастникКГ(Форма, ОКАТО) Тогда
		
		УсловиеСуммированияЛист02ПрПл3 = Новый Структура("П002000000100", "3"); // Признак плательщика Листа 02
		УсловиеСуммированияЛист02ПрПл1 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
		
		РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммированияЛист02ПрПл3))
		                                  + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммированияЛист02ПрПл1));
		
		Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
		
	Иначе
		
		Данные.П000120012003 = 0;
		Данные.П000120013003 = 0;
		Данные.П000120014003 = 0;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		
		УсловиеСуммированияОКАТО = Новый Структура("П002140000301", ОКАТО); // Код ОКАТО Приложения 6 к Листу 02
		
		РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140012003", Истина, УсловиеСуммированияОКАТО));
		
		Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
		
	Иначе
		
		Данные.П000120022003 = 0;
		Данные.П000120023003 = 0;
		Данные.П000120024003 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл1_ГО_Л02Пр5(Форма, Данные)
	
	УсловиеСуммированияЛист02 = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	
	УсловиеСуммированияЛист02Прил5 = Новый Структура;
	УсловиеСуммированияЛист02Прил5.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5.Вставить("П002050001000", "1"); // Признак "Расчет составлен" Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО = Новый Структура;
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5ПрПл1_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммированияЛист02), 0);
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5), 0)
	                                + Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5ПрПл1_сГО), 0);
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл1_ГО(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммирования));
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000031003", Истина, УсловиеСуммирования));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл1_ОП(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002050000100", "1"); // Признак плательщика Приложения 5 к Листу 02
	
	Данные.П000120012003 = 0;
	Данные.П000120013003 = 0;
	Данные.П000120014003 = 0;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммирования), 0);
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл1_КГ(Форма, Данные)
	
	ОКАТО = Данные.П000120001003;
	
	Если ЭтоОтветственныйУчастникКГ(Форма, ОКАТО) Тогда
		
		УсловиеСуммирования = Новый Структура("П002000000100", "1"); // Признак плательщика Листа 02
		
		РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммирования));
		
		Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
		
	Иначе
		
		Данные.П000120012003 = 0;
		Данные.П000120013003 = 0;
		Данные.П000120014003 = 0;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		
		УсловиеСуммированияОКАТО = Новый Структура("П002140000301", ОКАТО); // Код ОКАТО Приложения 6 к Листу 02
		
		РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140012003", Истина, УсловиеСуммированияОКАТО));
		
		Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
		
	Иначе
		
		Данные.П000120022003 = 0;
		Данные.П000120023003 = 0;
		Данные.П000120024003 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл2_ГО_Л02Пр5(Форма, Данные)
	
	УсловиеСуммированияЛист02 = Новый Структура("П002000000100", "2"); // Признак плательщика Листа 02
	
	УсловиеСуммированияЛист02Прил5 = Новый Структура;
	УсловиеСуммированияЛист02Прил5.Вставить("П002050000100", "2"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5.Вставить("П002050001000", "1"); // Признак "Расчет составлен" Приложения 5 к Листу 02
	
	УсловиеСуммированияЛист02Прил5_сГО = Новый Структура; // по обособленным подразделениям, включая головную организацию
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("П002050000100", "2"); // Признак плательщика Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("П002050001000", "4"); // Расчет составлен Приложения 5 к Листу 02
	УсловиеСуммированияЛист02Прил5_сГО.Вставить("ВГруппуОПВходитОрганизация", Истина); // В группу входит организация
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммированияЛист02));
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5))
	                                + Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммированияЛист02Прил5_сГО));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл2_ГО(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002000000100", "2"); // Признак плательщика Листа 02
	
	РазделяемаяСуммаФедеральныйБюджет = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммирования), 0);
	
	Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
	Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000031003", Истина, УсловиеСуммирования), 0);
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл2_ОП(Форма, Данные)
	
	УсловиеСуммирования = Новый Структура("П002050000100", "2"); // Признак плательщика Приложения 5 к Листу 02
	
	Данные.П000120012003 = 0;
	Данные.П000120013003 = 0;
	Данные.П000120014003 = 0;
	
	РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П002050012003", Истина, УсловиеСуммирования));
	
	Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
	Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2_ПрПл2_КГ(Форма, Данные)
	
	ОКАТО = Данные.П000120001003;
	
	Если ЭтоОтветственныйУчастникКГ(Форма, ОКАТО) Тогда
		
		УсловиеСуммирования = Новый Структура("П002000000100", "2"); // Признак плательщика Листа 02
		
		РазделяемаяСуммаФедеральныйБюджет = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П002000030003", Истина, УсловиеСуммирования));
		
		Данные.П000120012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
		Данные.П000120014003 = РазделяемаяСуммаФедеральныйБюджет - Данные.П000120012003 - Данные.П000120013003;
		
	Иначе
		
		Данные.П000120012003 = 0;
		Данные.П000120013003 = 0;
		Данные.П000120014003 = 0;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		
		УсловиеСуммированияОКАТО = Новый Структура("П002140000301", ОКАТО); // Код ОКАТО Приложения 6 к Листу 02
		
		РазделяемаяСуммаБюджетСубъетаРФ = Макс(0, СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П002140012003", Истина, УсловиеСуммированияОКАТО));
		
		Данные.П000120022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъетаРФ / 3);
		Данные.П000120024003 = РазделяемаяСуммаБюджетСубъетаРФ - Данные.П000120022003 - Данные.П000120023003;
		
	Иначе
		
		Данные.П000120022003 = 0;
		Данные.П000120023003 = 0;
		Данные.П000120024003 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОтветственныйУчастникКГ(Форма, ОКАТО)
	
	Результат = Ложь;
	
	ИНН = Форма.СтруктураДанныхТитульный.ИНН1;
	КПП = Форма.СтруктураДанныхТитульный.КПП1;
	
	ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов["Лист02_6"];
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_6" Тогда
			Лист02_6_ИНН = СокрЛП(Форма.ТабличныйДокумент.Области.П002140000101.Значение);
			Лист02_6_КПП = СокрЛП(Форма.ТабличныйДокумент.Области.П002140000201.Значение);
			Лист02_6_ОКАТО = СокрЛП(Форма.ТабличныйДокумент.Области.П002140000301.Значение);
		Иначе
			Данные = Страница.Данные[0].Значение;
			Лист02_6_ИНН = СокрЛП(Данные.П002140000101);
			Лист02_6_КПП = СокрЛП(Данные.П002140000201);
			Лист02_6_ОКАТО = СокрЛП(Данные.П002140000301);
		КонецЕсли;
		
		СведенияСовпадают = (НЕ ПустаяСтрока(ОКАТО) И ИНН = Лист02_6_ИНН И КПП = Лист02_6_КПП И ОКАТО = Лист02_6_ОКАТО);
		
		Если СведенияСовпадают Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, Показатель, Округлять, Условия)
	
	ИмяСтраницы = "Лист02_6а";
	
	Результат = 0;
	
	ТаблицаРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			ДанныеСтраницы = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			УсловиеВыполняется = Истина;
			Для Каждого ЭлементУсловия Из Условия Цикл
				ПроверяемыйПоказатель = ЭлементУсловия.Ключ;
				ПроверяемоеЗначение   = ЭлементУсловия.Значение;
				
				ЗначениеПоказателя = ДанныеСтраницы[ПроверяемыйПоказатель];
				Если ПроверяемыйПоказатель = "П002150000301" Тогда
					ЗначениеПоказателя = КодСубъектаРФПоОКАТО(Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если ПроверяемоеЗначение <> Неопределено Тогда
					Если НЕ ПроверяемоеЗначение = ЗначениеПоказателя Тогда
						УсловиеВыполняется = Ложь;
						Прервать;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
						УсловиеВыполняется = Ложь;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если УсловиеВыполняется Тогда
				ЗначениеПоказателя = ДанныеСтраницы[Показатель];
				ЗначениеПоказателя = ?(Округлять, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЗначениеПоказателя), ЗначениеПоказателя);
				Результат = Результат + ЗначениеПоказателя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоЛистов02_6а(Форма, КодСубъектаРФ)
	
	Результат = 0;
	
	ТаблицаРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство("Лист02_6а", ТаблицаРаздела);
	
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			
			ДанныеСтраницы = ТаблицаРаздела[Инд].Данные[0].Значение;
			ОКАТО = ДанныеСтраницы["П002150000301"];
			
			Если КодСубъектаРФ = КодСубъектаРФПоОКАТО(Форма, ОКАТО) Тогда
				Результат = Результат + 1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяПоВсемСтраницам(Форма, ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	
	Результат = 0;
	
	ТаблицаРаздела = Неопределено;
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные[0].Значение;
			//проверка экземпляра	
			Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
				//нет условий или они все выполняются
				Результат = Результат + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеТаблПоле[Показатель]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
		
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницы)
	
	УстановитьВариантыЗаполненияСпецификаРаздела(ЭтаФорма, ИмяТекущейСтраницы);
	
	Если ИмяТекущейСтраницы = "Лист02" Тогда
		ПолучитьСтавкиНалога(ЭтаФорма, ИмяТекущейСтраницы);
	КонецЕсли; 

	Если ИмяТекущейСтраницы = "Лист02_5" Тогда
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "Лист02_6а" Тогда
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "Лист02_6" Тогда
		ТабличныйДокумент.Области.П002140000601.Значение = КодСубъектаРФПоОКАТО(ЭтаФорма, ТабличныйДокумент.Области.П002140000301.Значение);
	КонецЕсли;
	
	РасчетНаСервере();
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницы);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Лист02_5" Тогда
		//изменение вариантов заполнения ячеек при изменении определенных показателей
		Если ТабличныйДокумент.Области.П002050001000.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002050005003");
		Иначе
			Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002050005003");	
			КонецЕсли;
		КонецЕсли;
		
		Если ТабличныйДокумент.Области.П002050001000.Значение = "4" Тогда
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			// прочитаем признак
			АктивныеСтраницы = ТаблицаСтраницыЛист02_5.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				
				ДанныеАктивнойСтраницы = АктивныеСтраницы[0].Данные[0].Значение;
				
				Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
					РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_5", Ложь);
				КонецЕсли;
				
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
				Иначе
					ВГруппуОПВходитОрганизация = Ложь;
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_6а" Тогда
		
		//изменение вариантов заполнения ячеек при изменении определенных показателей
		Если ТабличныйДокумент.Области.П002150000501.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П002150005003");
		Иначе
			Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П002150005003");	
			КонецЕсли;
		КонецЕсли;

		Если ТабличныйДокумент.Области.П002150000501.Значение = "4" Тогда
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			// прочитаем признак
			АктивныеСтраницы = ТаблицаСтраницыЛист02_6а.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				
				ДанныеАктивнойСтраницы = АктивныеСтраницы[0].Данные[0].Значение;
				
				Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
					РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_6а", Ложь);
				КонецЕсли;
				
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
				Иначе
					ВГруппуОПВходитОрганизация = Ложь;
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьВариантыЗаполненияПоказателей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РасчетНаСервере();
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВариантыЗаполненияСпецификаРаздела(Форма, ИмяТекущейСтраницы)
	
	ИзменитьВариантыЗаполненияПоказателей(Форма, ИмяТекущейСтраницы)

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
			
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
    	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
		
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если НомерГрафы = 1 Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
					КонецЕсли;
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						                        						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхЛист06.Очистить();
	СтруктураДанныхЛист07.Очистить();
	СтруктураДанныхПриложение.Очистить();
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		
		ЭтаФорма[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
		
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ПолучитьСтавкиНалога(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПроставитьПрПл_1();
	
	//для обособленных подразделений лист 02 не сдается, ставки нужно очистить
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтрПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		СтрПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли; 
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223");
	Если флЕстьОбособ Тогда
		ДанныеСтраницы = ТаблицаСтраницыЛист02[0].Данные[0].Значение;
		ДанныеСтраницы.П002000015003 = 0;
		ДанныеСтраницы.П002000016003 = 0;
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02" Тогда
			ТабличныйДокумент.Области.П002000015003.Значение = 0;
			ТабличныйДокумент.Области.П002000016003.Значение = 0;
		КонецЕсли; 
	КонецЕсли;

	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СпециальныеОперацииПослеОчисткиЛистаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОтчетДляНалоговогоАгента()
		
	СтруктураДанныхЛист06.Очистить();
	СтруктураДанныхЛист07.Очистить();
	СтруктураДанныхПриложение.Очистить();
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		
		Если СтрНайти(ЭлементСтруктурыТаблицаСтраницы.Ключ, "Раздел1_3") > 0 ИЛИ СтрНайти(ЭлементСтруктурыТаблицаСтраницы.Ключ, "Лист03") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
		
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделовДляНалоговогоАгента();
	
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		
		Если мнгРаздел.Ключ = "П0001300040" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
		
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлокамиДляНалоговогоАгента();
	
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	ПолучитьСтавкиНалога(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СпециальныеОперацииПослеОчисткиЛистаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлокамиДляНалоговогоАгента()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		Если ИмяГруппы = "П0001300040" Тогда
			Продолжить;
		КонецЕсли;
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделовДляНалоговогоАгента()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_6.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_6а.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист04.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист05.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, НазванияМногостраничныхРазделовДляУдаления = "") Экспорт

	Если НЕ ПустаяСтрока(НазванияМногостраничныхРазделовДляУдаления) Тогда
		НазванияМнгостраничныхРазделов = Новый Структура(НазванияМногостраничныхРазделовДляУдаления);
	Иначе
		НазванияМнгостраничныхРазделов = Новый Структура;
	КонецЕсли;

	Для каждого СтрокаУровня1 из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		РазделАвтозаполняется = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;

		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;

		мРазделИмя = "ТабличныйДокумент";
		мРаздел    = Форма[мРазделИмя];
		Если НазванияМнгостраничныхРазделов.Свойство(НазваниеСтраницы) Тогда
			// Очистим текущий лист.
			#Если НаКлиенте Тогда
				Форма.ОчиститьТабличноеПолеНаКлиенте(НазваниеСтраницы);
			#Иначе
				Форма.ОчиститьТабличноеПолеНаСервере(НазваниеСтраницы);
			#КонецЕсли
							
			ТаблицаСтраницРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(НазваниеСтраницы, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
			
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаСтраницРаздела[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
									
			// Варианты заполнения установим в один массив. Все варианты возьмем из Эталона.
			// Цвет ячеек перерисуется в показе статика многостраничного раздела, ниже.
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(Форма, НазваниеСтраницы, Ложь);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
			ОчиститьТабличноеПолеСпец(ИмяСтраницы);

		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		ЭтаФорма.НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		
		ДатаПодписи = '00010101';
		
		ЗаполнитьСведенияОбОрганизации(Истина);
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Лист02_5" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	ИначеЕсли ИмяСтраницы = "Лист02_6а" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;
	
	РасчетНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы) Экспорт

	Если ИмяСтраницы = "Лист02_5" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	ИначеЕсли ИмяСтраницы = "Лист02_6а" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;

	РасчетНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ФлажокОтклАвтоРасчетПриИзменении(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФлажокОтклАвтоРасчетПриИзменении(Форма, ИмяТекущейСтраницы)

	ИзменитьВариантыЗаполненияПоказателей(Форма, ИмяТекущейСтраницы)

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	ИмяЯчейки = Область.Имя;
	
	Если СтрЧислоВхождений(ИмяЯчейки, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если СтрЧислоВхождений(ИмяЯчейки, "СобратьДанные") > 0 Тогда
		СобратьДанные("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
		
	Если Лев(ИмяЯчейки, 7) = "КодИМНС" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
		
	//форма заполнения листа 03 раздел В
	Если   (ИмяЯчейки = "П002080002003_01")
	   ИЛИ (ИмяЯчейки = "П002080002003_02") 
	   ИЛИ (ИмяЯчейки = "П002080002003_03") 
	   ИЛИ (ИмяЯчейки = "П002080002003_04") 
	   ИЛИ (ИмяЯчейки = "П002080002003_05") 
	   ИЛИ (ИмяЯчейки = "П002080002003_06")
	   ИЛИ (ИмяЯчейки = "П002080002003_07") 
	   ИЛИ (ИмяЯчейки = "П002080002003_08") 
	   ИЛИ (ИмяЯчейки = "П002080002003_09") Тогда 

		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области.П002080002003_01.Значение);
		РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области.П002080002003_02.Значение);
		РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.П002080002003_02.Значение);
		РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.П002080002003_03.Значение);
		РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.П002080002003_04.Значение);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.П002080002003_05.Значение);
		РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.П002080002003_06.Значение);
		РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.П002080002003_07.Значение);
		РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.П002080002003_08.Значение);
		РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.П002080002003_09.Значение);
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
			
		Если Регион.Количество() > 0 Тогда
			
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
			
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
								 		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
																												  + РоссийскийАдрес["Регион"] + ","
																												  + РоссийскийАдрес["Район"] + ","
																												  + РоссийскийАдрес["Город"] + ","
																												  + РоссийскийАдрес["НаселенныйПункт"] + ","
																												  + РоссийскийАдрес["Улица"] + ","
																												  + РоссийскийАдрес["Дом"] + ","
																												  + РоссийскийАдрес["Корпус"] + ","
																												  + РоссийскийАдрес["Квартира"]);
								
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
				
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
				
		ТребРезультат = 0;
		Если КодПоказателя = "П000110003003" Тогда
		//код КБК раздела 1.1	
			//признак налогоплательщика раздела 1.1
			Критерий1 = ТабличныйДокумент.Области.П000110000100.Значение;
			
			Если Критерий1 = "1" Тогда
				ТребРезультат = 1;	
			ИначеЕсли Критерий1 = "2" Тогда
				ТребРезультат = 2;	
			КонецЕсли;
			
		ИначеЕсли КодПоказателя = "П000120011003" Тогда
		//код КБК раздела 1.2	
			//признак налогоплательщика раздела 1.2
			Критерий1 = ТабличныйДокумент.Области.П000120000100.Значение;
			
			Если Критерий1 = "1" Тогда
				ТребРезультат = 1;	
			ИначеЕсли Критерий1 = "2" Тогда
				ТребРезультат = 2;	
			КонецЕсли;
			
		ИначеЕсли КодПоказателя = "Период" Тогда
			//код периода	
			
			НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			флКвартальноеЗаполнение = (СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал);
	
			Если СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал Тогда
				ТребРезультат = НомерМесяца / 3;
			Иначе
				ТребРезультат = НомерМесяца + 4;
			КонецЕсли;
			
		// Код квартала раздела 1.2.
		ИначеЕсли КодПоказателя = "П000120000200" Тогда
			НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			ЗаполнениеПоМесяцам = (СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц);
			
			Если НомерМесяца = 11 И ЗаполнениеПоМесяцам Тогда
				ТребРезультат = 11;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		//удаление перед интерактивным выбором строки из обработанной копии ТЗ служебной колонки "РезультатПроверки"
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области.П002080002003_01.Значение = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области.П002080002003_02.Значение = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области.П002080002003_03.Значение = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области.П002080002003_04.Значение = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области.П002080002003_05.Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области.П002080002003_06.Значение = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области.П002080002003_07.Значение = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области.П002080002003_08.Значение = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области.П002080002003_09.Значение = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры // ЗаполнитьРегионыНаСервере()

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
			
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
						   
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
						   
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");

		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");

		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["КодИМНС"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП1"].Значение = РезультатВыбора.КПП;
		
		ИзменитьОКАТОРазделовИЗаполнитьСведенияОПодписантах(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОКАТОРазделовИЗаполнитьСведенияОПодписантах(Ссылка)
	
	СтруктураРеквизитовФормы.ОКАТОДляРазделов = Ссылка.КодПоОКАТО;
	
	ИзменитьОКАТОРазделов(ЭтаФорма, Ссылка.КодПоОКАТО);
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
		Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения+1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);

			Сообщение.Сообщить();
			
		КонецЕсли;
	
	КонецЕсли;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "НомерКорректировки" Тогда
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			Область.Значение = "0";
		КонецЕсли;
		
		ОтобразитьНомерКорректировки(ЭтаФорма, Область.Значение);
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
	ИначеЕсли ИмяПоказателя = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
		ЗаполнитьСведенияОбОрганизации(Истина);
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
	//Изменение "по месту нахождения (учета) (код)" на Титульном листе
	//
	ИначеЕсли СтрНайти(ИмяПоказателя, "ПоМесту") > 0 Тогда
		БылРежимОбособленногоПодразделения = (СтруктураРеквизитовФормы.мПоМесту = "220" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "223");
		БылРежимНалоговогоАгента = (СтруктураРеквизитовФормы.мПоМесту = "231");
		
		НовыйПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
		УстановленРежимОбособленногоПодразделения = (НовыйПоМесту = "220" ИЛИ НовыйПоМесту = "223");
		УстановленРежимНалоговогоАгента = (НовыйПоМесту = "231");
		
		Если (УстановленРежимОбособленногоПодразделения И НЕ БылРежимОбособленногоПодразделения) Тогда
				ТекстВопроса = НСтр("ru='Внимание! Перед входом в режим заполнения для обособленных подразделений
					|будут очищены все разделы (листы) отчета.
					|Продолжить операцию?'");
			ДополнительныеПараметры = Новый Структура("ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область", ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПередВходовВРежимЗаполненияОбособПодрЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
            Возврат;
			
		ИначеЕсли (УстановленРежимНалоговогоАгента И НЕ БылРежимНалоговогоАгента) Тогда
				ТекстВопроса = НСтр("ru='Внимание! Перед входом в режим заполнения для налогового агента
					|будут очищены все разделы (листы) отчета, кроме раздела 1.3 и Листа 03.
					|Продолжить операцию?'");
			ДополнительныеПараметры = Новый Структура("ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область", ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВходВРежимНалоговогоАгентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
            Возврат;
			
		ИначеЕсли (БылРежимОбособленногоПодразделения И НЕ УстановленРежимОбособленногоПодразделения) Тогда
			ТекстВопроса = НСтр("ru='Внимание! Перед выходом из режима заполнения для обособленных подразделений
				|будут очищены все разделы (листы) отчета.
				|Продолжить операцию?'");
				
			ДополнительныеПараметры = Новый Структура("ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область", ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыходИзРежимОбособленныхПодразделениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
            Возврат;
			
		ИначеЕсли (БылРежимНалоговогоАгента И НЕ УстановленРежимНалоговогоАгента) Тогда
			ТекстВопроса = НСтр("ru='Внимание! Перед выходом из режима заполнения для налогового агента
				|будут очищены все разделы (листы) отчета.
				|Продолжить операцию?'");
			ДополнительныеПараметры = Новый Структура("ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область", ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПередВыходомДляНалоговогоАгентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		Иначе
			СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		КонецЕсли;
	КонецЕсли;
		
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма, ЗначениеКорректировки)
	
	Форма.СтруктураРеквизитовФормы.ВидДокумента = ?(Число(ЗначениеКорректировки) = 0, 0, 1);
	
	Форма.НомерКорректировки = Форма.СтруктураРеквизитовФормы.ВидДокумента * Число(ЗначениеКорректировки);
	
	Форма.ТабличныйДокумент.Области.НомерКорректировки.Значение = Форма.НомерКорректировки;
	
Конецпроцедуры

&НаКлиенте
Процедура ВопросВходВРежимНалоговогоАгентаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению.
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		ОчиститьОтчетДляНалоговогоАгента();
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ОбновитьДоступностьЭлементовНаКлиенте();
	КонецЕсли;
	
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыходИзРежимОбособленныхПодразделениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению.
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		ОчиститьНаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ОбновитьДоступностьЭлементовНаКлиенте();
	КонецЕсли;
	
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередВыходомДляНалоговогоАгентаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению.
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		ОчиститьНаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ОбновитьДоступностьЭлементовНаКлиенте();
	КонецЕсли;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередВходовВРежимЗаполненияОбособПодрЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению.
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		ОчиститьНаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ОбновитьДоступностьЭлементовНаКлиенте();
	КонецЕсли;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область)
	
	Если ИмяПоказателя = "ОКВЭД" Тогда
		
		Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П002140000301" Тогда
		
		ТабличныйДокумент.Области.П002140000601.Значение = КодСубъектаРФПоОКАТО(ЭтаФорма, ТабличныйДокумент.Области.П002140000301.Значение);
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П002150000301" Тогда
		УстановитьПримечаниеКПолюОКАТОЛиста02_6а(ЭтаФорма);
	КонецЕсли;
	
	//Изменение "Расчет составлен" на Прил 5 Листа 02
	Если ИмяПоказателя = "П002050001000" Тогда
		// Блок управление признаком вхождения организации в группу ОП.
		Если ЗначПоказателя = "4" Тогда
			// Сделаем видимым флажек.
			ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			ЦветЖелтый = Новый Цвет(255, 255, 192); // Желтый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветЖелтый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Истина;
			
			// Запишем по умолчанию как выключенный флаг.
			ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
		Иначе
			ВГруппуОПВходитОрганизацияДоступность = Ложь;
			// Запишем по умолчанию как выключенный флаг.
			ВГруппуОПВходитОрганизация = Ложь;
			
			ЦветБелый = Новый Цвет(255, 255, 255); // Белый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Значение    = "";
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветБелый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Ложь;
			
			ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	//Изменение "Расчет составлен" на Прил 6а Листа 02
	Если ИмяПоказателя = "П002150000501" Тогда
		// Блок управление признаком вхождения организации в группу ОП.
		Если ЗначПоказателя = "4" Тогда
			// Сделаем видимым флажек.
			ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			ЦветЖелтый = Новый Цвет(255, 255, 192); // Желтый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветЖелтый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Истина;
			
			// Запишем по умолчанию как выключенный флаг.
			ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
		Иначе
			ВГруппуОПВходитОрганизацияДоступность = Ложь;
			// Запишем по умолчанию как выключенный флаг.
			ВГруппуОПВходитОрганизация = Ложь;
			
			ЦветБелый = Новый Цвет(255, 255, 255); // Белый.
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Значение    = "";
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветБелый;
			ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Ложь;
			
			ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	//изменение вариантов заполнения ячеек при изменении определенных показателей
	Если ИмяПоказателя = "П002050001000" Тогда
		Если ЗначПоказателя = "3" Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(0, "П002050005003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(0, "П002050005003");
			#КонецЕсли
		ИначеЕсли НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П002050005003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П002050005003");
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П002150000501" Тогда
		Если ЗначПоказателя = "3" Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(0, "П002150005003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(0, "П002150005003");
			#КонецЕсли
		ИначеЕсли НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П002150005003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П002150005003");
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	//Обнуление по условию строки 230 на листе 02
	Если ИмяПоказателя = "П002050000100" Тогда
		ТаблицаРаздела  =  мСтруктураМногостраничныхРазделов["Лист02"];
		ТаблицаРаздела = ЭтаФорма[ТаблицаРаздела];
		Если ЗначПоказателя = "" Тогда
			АктивныеСтраницы = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_5"]].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				АктивныеСтраницы[0].Данные[0].Значение.П002050000100 = "";
			КонецЕсли;
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П002050000100"));
			СтрПоМесту = ЭтаФорма.СтруктураДанныхТитульный.ПоМесту;
			ПоКонсолидированнойГруппе = (СтрПоМесту = "218");
			Если НЕ Есть_Прил5 И НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет И НЕ ПоКонсолидированнойГруппе Тогда
				Для каждого СтраницаТаблицыРаздела Из ТаблицаРаздела Цикл
					ДанныеСтраницы = СтраницаТаблицыРаздела.Данные[0].Значение;
					ДанныеСтраницы.П002000023003 = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваПоказателя = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если СвойстваПоказателя <> Неопределено И СвойстваПоказателя.ТаблицаЗначений <> Неопределено Тогда
		КодПоказателя = СвойстваПоказателя.Показатель;
		КопироватьДанныеФормы(СвойстваПоказателя.ТаблицаЗначений, ТЗВыбора);
		//Определение Результата проверки из таблицы выбора и если это - число > 0 - последующая обработка
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		Если ЭлТЗВыбора.Количество() > 0 Тогда
			ЭлТЗВыбора = ЭлТЗВыбора[0];
			Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(ЭлТЗВыбора.РезультатПроверки) Тогда
				Рез = Число(ЭлТЗВыбора.РезультатПроверки);
				Если Рез > 0 Тогда
					
					ТЗКритерии.Очистить();
					
					Если КодПоказателя = "П000110003003" Тогда //код КБК раздела 1.1	
						Если Рез = 1 Тогда
							
							//признак налогоплательщика раздела 1.1
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000110000100.Значение;
							НовСтрока.ТребЗнач = "1";
							
						ИначеЕсли Рез = 2 Тогда
							
							//признак налогоплательщика раздела 1.1
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000110000100.Значение;
							НовСтрока.ТребЗнач = "2";
							
						КонецЕсли;
					ИначеЕсли КодПоказателя = "П000120011003" Тогда //код КБК раздела 1.2
						Если Рез = 1 Тогда
							
							//признак налогоплательщика раздела 1.2
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000120000100.Значение;
							НовСтрока.ТребЗнач = "1";
							
						ИначеЕсли Рез = 2 Тогда
							
							//признак налогоплательщика раздела 1.2
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000120000100.Значение;
							НовСтрока.ТребЗнач = "2";
							
						КонецЕсли;
					КонецЕсли;
					
					Для каждого Критерий Из ТЗКритерии Цикл
						//Если текущее значение отличается от требуемого происходит присвоение
						Если Критерий.Область <> Критерий.ТребЗнач Тогда
							Критерий.Область = Критерий.ТребЗнач;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваПоказателя <> Неопределено Тогда
		КодКритерия = СвойстваПоказателя.Показатель;
		ЗначКритерия = Область.Значение;
		//введение таблицы значений предусматривает влияние критерия на несколько зависимых показателей
		ТЗЗависимЗнач.Очистить();
		
		Если КодКритерия = "П000110000100" Тогда //признак налогоплательщика раздела 1.1
			Если ЗначКритерия = "1" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000110003003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000110003003.Значение;
				НовСтрока.ТребРез = 1;
				
			ИначеЕсли ЗначКритерия = "2" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000110003003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000110003003.Значение;
				НовСтрока.ТребРез = 2;
				
			КонецЕсли;
		ИначеЕсли КодКритерия = "П000120000100" Тогда //признак налогоплательщика раздела 1.1
			Если ЗначКритерия = "1" Тогда
				
				//код КБК раздела 1.2
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000120011003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000120011003.Значение;
				НовСтрока.ТребРез = 1;
				
			ИначеЕсли ЗначКритерия = "2" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000120011003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000120011003.Значение;
				НовСтрока.ТребРез = 2;
				
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ЗависимЗнач Из ТЗЗависимЗнач Цикл
			СвойстваЗависимогоПоказателя = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ЗависимЗнач.ИмяПоказателя);
			Если СвойстваЗависимогоПоказателя <> Неопределено И СвойстваЗависимогоПоказателя.ТаблицаЗначений <> Неопределено Тогда
				//поиск строки списка выбора, соответствующую текущему значению зависимого показателя
				СтрокиСписка=СвойстваЗависимогоПоказателя.ТаблицаЗначений.НайтиСтроки(Новый Структура("Код",СокрЛП(Строка(ЗависимЗнач.ОбластьПоказателя))));
				Если СтрокиСписка.Количество() > 0 Тогда
					СтрокаСписка = СтрокиСписка[0];
					Рез = ?(СтрокаСписка.РезультатПроверки = "",0,Число(СтрокаСписка.РезультатПроверки));
					Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(Рез) И Рез > 0 Тогда
						Если ЗависимЗнач.ТребРез <> Рез Тогда
							//очистка значения зависмого параметра - т.к. не соответствует измененному значению критерия
							ЗависимЗнач.ОбластьПоказателя = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	//расчет выполняется в структуре, обновляем каждое значение после ввода
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
	
	ИзменитьВариантыЗаполненияПоказателей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если ИмяПоказателя = "П002000000100" 
		ИЛИ ИмяПоказателя = "П002050000100" Тогда  //Будут автоматически сформированы разделы 1.1 и 1.2 и пересчитан весь отчет
		РасчетНаСервере();
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли; 
	
	Если ИмяРаздела    = "Титульный" 
		ИЛИ ИмяРаздела = "Раздел1_1" 
		ИЛИ ИмяРаздела = "Раздел1_2" 
		ИЛИ ИмяРаздела = "Лист02" 
		ИЛИ ИмяРаздела = "Лист02_1" 
		ИЛИ ИмяРаздела = "Лист02_2" 
		ИЛИ ИмяРаздела = "Лист02_3" 
		ИЛИ ИмяРаздела = "Лист02_4" 
		ИЛИ ИмяРаздела = "Лист02_5"
		ИЛИ ИмяРаздела = "Лист02_6"
		ИЛИ ИмяРаздела = "Лист02_6а" 
		ИЛИ ИмяРаздела = "Лист03А"
		ИЛИ ИмяРаздела = "Лист03Б"
		ИЛИ ИмяРаздела = "Лист04"
		ИЛИ ИмяРаздела = "Лист05"
		ИЛИ ИмяРаздела = "Лист06"
		ИЛИ ИмяРаздела = "Лист07" Тогда
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере всех разделов
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Истина;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = Истина;
	ИмяГруппы = "";
	Если ИмяРаздела = "Титульный" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяРаздела = "Лист06" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Лист07" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Ложь;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяРаздела = "Приложение" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Ложь;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	КонецЕсли; 
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	
	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
							Если СохранятьМногострКакТЗ Тогда
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела;
							Иначе
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела[ИмяГруппы];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			Если ИмяГруппы = Лев(ИмяПоказателя, 11) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 13);
				СтрИнд = Сред(ИмяПоказателя, 14);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначениеПоказателя;
				КонецЕсли; 
			КонецЕсли;
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = "Декларация по налогу на прибыль за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницыНаСервере(ИмяТекРаздела, ДанныеАктивнойСтраницы)
	
	ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницы(ЭтаФорма, ИмяТекРаздела, ДанныеАктивнойСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьВГруппуОПВходитОрганизацияИзДанныхАктивнойСтраницы(Форма, ИмяТекРаздела, ДанныеАктивнойСтраницы)
	
	Перем ЗначВГруппуОПВходитОрганизация;
	
	Если ИмяТекРаздела = "Лист02_5" Тогда
		
		ЦветБелый = Новый Цвет(255, 255, 255); // Белый.
		Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Значение    = "";
		Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветБелый;
		Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Ложь;
		
		Если ДанныеАктивнойСтраницы.Свойство("П002050001000", ЗначВГруппуОПВходитОрганизация) Тогда
			
			Если ЗначВГруппуОПВходитОрганизация = "4" Тогда
				
				Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
				
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					
					Форма.ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
					
					Если Форма.ВГруппуОПВходитОрганизация Тогда
						ЦветЖелтый = Новый Цвет(255, 255, 192); // Желтый.
						Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Значение    = "V";
						Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветЖелтый;
						Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Истина;
					КонецЕсли;
					
				Иначе
					
					Форма.ВГруппуОПВходитОрганизация = Ложь;
					
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		
		Форма.ВГруппуОПВходитОрганизация = Ложь;
		
	ИначеЕсли ИмяТекРаздела = "Лист02_6а" Тогда
		
		ЦветБелый = Новый Цвет(255, 255, 255); // Белый.
		Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Значение    = "";
		Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветБелый;
		Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Ложь;
		
		Если ДанныеАктивнойСтраницы.Свойство("П002150000501", ЗначВГруппуОПВходитОрганизация) Тогда
			
			Если ЗначВГруппуОПВходитОрганизация = "4" Тогда
				
				Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
				
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					
					Форма.ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
					
					Если Форма.ВГруппуОПВходитОрганизация Тогда
						ЦветЖелтый = Новый Цвет(255, 255, 192); // Желтый.
						Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Значение    = "V";
						Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").ЦветФона    = ЦветЖелтый;
						Форма.ТабличныйДокумент.Области.Найти("ВходитВГруппуОП").Гиперссылка = Истина;
					КонецЕсли;
					
				Иначе
					
					Форма.ВГруппуОПВходитОрганизация = Ложь;
					
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		
		Форма.ВГруппуОПВходитОрганизация = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницуНаСервере(НаимРаздела, Признак, СниматьРанееУстановленныеПризнаки)

	ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ЭтаФорма, НаимРаздела, Признак, СниматьРанееУстановленныеПризнаки);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Форма, НаимРаздела, Знач Признак, СниматьРанееУстановленныеПризнаки)
	
	Перем ДанныеСтраницы;
	
	Если НаимРаздела = "Лист02_5" Тогда 
	
		АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02_5.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		ДанныеСтраницы = Неопределено;
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			АктивнаяСтраница = АктивныеСтраницы[0];
			Если АктивнаяСтраница.Данные.Количество() > 0 Тогда
				ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
			КонецЕсли;
			Если ДанныеСтраницы = Неопределено Тогда
				Возврат;
			КонецЕсли; 
		Иначе
			Возврат;
		КонецЕсли; 
		
		ДанныеСтраницы.Вставить("ВГруппуОПВходитОрганизация", Признак);
		
		Если СниматьРанееУстановленныеПризнаки Тогда
			// Если флаг был возведен и на других листах декларации, тогда снимем его.
			Для каждого Страница Из Форма.ТаблицаСтраницыЛист02_5 Цикл
				ДанныеСтраницы = ?(Страница.Данные.Количество() > 0, Страница.Данные[0].Значение, Неопределено);
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ДанныеСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					Если (ДанныеСтраницы.ВГруппуОПВходитОрганизация) И (НЕ Страница.АктивнаяСтраница) И (Признак) Тогда
						
						// ДанныеСтраницы.ВГруппуОПВходитОрганизация = НЕ Признак; // Противоположный признак.
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = НСтр("ru='Уже введен экземпляр приложения 5 к листу 02 с признаком вхождения организации в группу обособленных подразделений.'");
						Сообщение.Сообщить();
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; // СниматьРанееУстановленныеПризнаки
		
	ИначеЕсли НаимРаздела = "Лист02_6а" Тогда
		
		АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02_6а.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		ДанныеСтраницы = Неопределено;
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			АктивнаяСтраница = АктивныеСтраницы[0];
			Если АктивнаяСтраница.Данные.Количество() > 0 Тогда
				ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
			КонецЕсли;
			Если ДанныеСтраницы = Неопределено Тогда
				Возврат;
			КонецЕсли; 
		Иначе
			Возврат;
		КонецЕсли; 
		
		ДанныеСтраницы.Вставить("ВГруппуОПВходитОрганизация", Признак);
		
		Если СниматьРанееУстановленныеПризнаки Тогда
			// Если флаг был возведен и на других листах декларации, тогда снимем его.
			Для каждого Страница Из Форма.ТаблицаСтраницыЛист02_6а Цикл
				ДанныеСтраницы = ?(Страница.Данные.Количество() > 0, Страница.Данные[0].Значение, Неопределено);
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ДанныеСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					Если (ДанныеСтраницы.ВГруппуОПВходитОрганизация) И (НЕ Страница.АктивнаяСтраница) И (Признак) Тогда
						
						// ДанныеСтраницы.ВГруппуОПВходитОрганизация = НЕ Признак; // Противоположный признак.
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = НСтр("ru='Уже введен экземпляр приложения 6а к листу 02 с признаком вхождения организации в группу обособленных подразделений.'");
						Сообщение.Сообщить();
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; // СниматьРанееУстановленныеПризнаки
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПримечаниеКПолюОКАТОЛиста02_6а(Форма)
	
	ОбластьОКАТО = Форма.ТабличныйДокумент.Области.П002150000301;
	ОКАТО = ОбластьОКАТО.Значение;
	
	Если НЕ ПустаяСтрока(ОКАТО) Тогда
		ОбластьОКАТО.Примечание.Текст = "Определен код субъекта РФ: " + КодСубъектаРФПоОКАТО(Форма, ОКАТО);
	Иначе
		ОбластьОКАТО.Примечание.Текст = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОКАТОРазделов(Форма, ОКАТО, ИмяРаздела = "")
	
	КодПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
	
	ТаблицаСтраницРаздела = Неопределено;
	
	Если КодПоМесту = "218" ИЛИ КодПоМесту = "231" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРаздела) ИЛИ ИмяРаздела = "Раздел1_1" Тогда
		
		Форма.мСтруктураМногостраничныхРазделов.Свойство("Раздел1_1", ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
		
		Для Каждого ЛистРаздела1_1 Из ТаблицаСтраницРаздела Цикл

			ЛистРаздела1_1.Данные[0].Значение.П000110001003 = ?(ЗначениеЗаполнено(ОКАТО), ОКАТО, ЛистРаздела1_1.Данные[0].Значение.П000110001003);
			ЛистРаздела1_1.Данные[0].Пометка = Ложь;
			
			Если ЛистРаздела1_1.АктивнаяСтраница И ИмяРаздела = "Раздел1_1" Тогда
				
				Форма.ТабличныйДокумент.Области.П000110001003.Значение = ?(ЗначениеЗаполнено(ОКАТО), ОКАТО, Форма.ТабличныйДокумент.Области.П000110001003.Значение);
				
			КонецЕсли;

		КонецЦикла;
				
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРаздела) ИЛИ ИмяРаздела = "Раздел1_2" Тогда
		
		Форма.мСтруктураМногостраничныхРазделов.Свойство("Раздел1_2", ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
		
		Для Каждого ЛистРаздела1_2 Из ТаблицаСтраницРаздела Цикл
			
			ЛистРаздела1_2.Данные[0].Значение.П000120001003 = ?(ЗначениеЗаполнено(ОКАТО), ОКАТО, ЛистРаздела1_2.Данные[0].Значение.П000120001003);
			ЛистРаздела1_2.Данные[0].Пометка = Ложь;
			
			Если ЛистРаздела1_2.АктивнаяСтраница И ИмяРаздела = "Раздел1_2" Тогда
				
				Форма.ТабличныйДокумент.Области.П000120001003.Значение = ?(ЗначениеЗаполнено(ОКАТО), ОКАТО, Форма.ТабличныйДокумент.Области.П000120001003.Значение);
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КодСубъектаРФПоОКАТО(Форма, ОКАТО)
	
	Результат = "99"; // По умолчанию - "Другие территории"
	
	Для Каждого СтрокаСоответствия Из Форма.СоответствиеОКАТОСубъектамРФ Цикл
		Если Лев(ОКАТО, СтрокаСоответствия.ДлинаМаски) = СтрокаСоответствия.МаскаОКАТО Тогда
			Результат = СтрокаСоответствия.КодСубъекта;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВГруппуОПВходитОрганизацияПриИзменении(Элемент)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_5" Тогда
		СохранитьДанныеРаздела("Лист02_5", Ложь, Ложь);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_6а" Тогда
		СохранитьДанныеРаздела("Лист02_6а", Ложь, Ложь);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Если Истина - рассчитываем при переходах, сохранении, печати.
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",		РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",			"1151006");
	ПараметрыВыгрузки.Вставить("ДатаДок",		Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",	Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",		СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",		Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",		СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",		СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",		СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("ФормРеорг", 	СокрЛП(Титульный.КодФормыОрг));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг",	СокрЛП(Титульный.ИНН_Реорг));
	ПараметрыВыгрузки.Вставить("КППРеорг",		СокрЛП(Титульный.КПП_Реорг));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",				"NO_PRIB_1_002_00_05_02_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_PRIB");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Прибыль");
	
	ПараметрыВыгрузки.Вставить("ИдФайл",		СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СтруктураXML504");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ВыгрузкаВозможна(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("218");
	ВозможныеКодыПоМесту.Добавить("220");
	ВозможныеКодыПоМесту.Добавить("223");
	ВозможныеКодыПоМесту.Добавить("225");
	ВозможныеКодыПоМесту.Добавить("226");
	ВозможныеКодыПоМесту.Добавить("231");
	
	ВозможныеЗначенияПоказателей = Новый Соответствие;
	ВозможныеЗначенияПоказателей.Вставить("П000110000100", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П000120000100", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П000130001003", "1|2|3|4|5");
	ВозможныеЗначенияПоказателей.Вставить("П002000000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002010000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002020000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002020013503", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П002030000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002040000100", "1|2|3");
	ВозможныеЗначенияПоказателей.Вставить("П002050001000", "1|2|3|4");
	ВозможныеЗначенияПоказателей.Вставить("П002050002002", "0|1");
	ВозможныеЗначенияПоказателей.Вставить("П002060000200", "1|2");
	ВозможныеЗначенияПоказателей.Вставить("П002060000300", "21|31|33|34|35|36|37|38|39|40|41|42|43|44|45|46|50");
	ВозможныеЗначенияПоказателей.Вставить("П002070000200", "1|2");
	
	РазрешенныеКодыПериодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("21,31,33,34,13,14,15,16,35,36,37,38,39,40,41,42,43,44,45,46,57,58,59,60,61,62,63,64,65,66,67,68,50");
		
	КодыПериодовКонсолидированнойГруппы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("13,14,15,16,57,58,59,60,61,62,63,64,65,66,67,68");
	
	КодыПоМестуКонсолидированнойГруппы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("218");

	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
		
	// Минимальное заполнение отчета.
	Если ЭтоКонсолидированнаяГруппа Тогда
		КодПериода = ПараметрыВыгрузки.ПериодОтч;
		Если НЕ ПустаяСтрока(КодПериода) И СтрНайти("57,58,60,61,63,64,66,67", КодПериода) > 0 Тогда
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1_1") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Раздел 1.1""", "Раздел1_1", "П000110000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист02") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Лист 02""", "Лист02", "П002000000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист02_6") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Приложение №6 к Листу 02""", "Лист02_6", "П002140000101");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист02_6а") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Приложение №6а к Листу 02""", "Лист02_6а", "П002150000101");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		ИначеЕсли НЕ ПустаяСтрока(КодПериода) И СтрНайти("13,14,15,16,59,62,65,68", КодПериода) > 0 Тогда
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1_1") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Раздел 1.1""", "Раздел1_1", "П000110000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист02") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Лист 02""", "Лист02", "П002000000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист02_1") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Приложение №1 к Листу 02""", "Лист02_1", "П002010000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист02_2") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Приложение №2 к Листу 02""", "Лист02_2", "П002020000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист02_6") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Приложение №6 к Листу 02""", "Лист02_6", "П002140000101");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист02_6а") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Приложение №6а к Листу 02""", "Лист02_6а", "П002150000101");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		ЗаполненРаздел1_1 = ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1_1");
		ЗаполненРаздел1_2 = ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1_2");
		ЗаполненРаздел1_3 = ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1_3");
		ЗаполненЛист02 = ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист02");
		ЗаполненЛист07 = ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Лист07");
		
		КодПериода = СокрЛП(ПараметрыВыгрузки.ПериодОтч);
		ОтчетЗаНалоговыйПериод = (КодПериода = "34" ИЛИ КодПериода = "50");
		
		СписокПоказателей = "П002000001003, П002000002003, П002000003003, П002000004003,
		                    |П002000005003, П002000007003, П002000008003";
		НетСведенийОПрибыли = НЕ ЕстьЗаполненныеПоказателиВРазделе("Лист02", СписокПоказателей);
		
		ПодразделыНеДопускаются = ОтчетЗаНалоговыйПериод
								И ЗаполненЛист02
								И ЗаполненЛист07
								И НетСведенийОПрибыли; // общее ограничение на заполнение подразделов раздела 1.
		
		Если НЕ ЗаполненРаздел1_1 И НЕ ЗаполненРаздел1_2 И НЕ ЗаполненРаздел1_3 Тогда
			
			Если НЕ ПодразделыНеДопускаются Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен хотя бы один из разделов 1.1, 1.2 и 1.3", "Лист02", "П002000000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе
			
			КодПоМесту = СокрЛП(ПараметрыВыгрузки.ПоМесту);
			
			// Раздел 1.1.
			НедопускаетсяПодраздел1_1 = (КодПоМесту = "231" ИЛИ ПодразделыНеДопускаются);
			
			// Раздел обязателен.
			Если НЕ ЗаполненРаздел1_1 Тогда
				Если НЕ НедопускаетсяПодраздел1_1 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнен раздел 1.1", "Раздел1_1", "П000110000100");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Раздел не допускается.
			Если ЗаполненРаздел1_1 Тогда
				Если НедопускаетсяПодраздел1_1 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "При заданных параметрах декларации раздел 1.1 не должен заполняться", "Раздел1_1", "П000110000100");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Раздел 1.2.
			
			// Раздел обязателен.
			Если НЕ ЗаполненРаздел1_2 Тогда
				Если ЗначениеСодержитсяВСписке(КодПоМесту, "213, 214, 215, 216, 218, 225, 226")
				   И НЕ ОтчетЗаНалоговыйПериод
				   И ЕстьЗаполненныеПоказателиВРазделе("Лист02", "П002000029003, П002000032003") Тогда
					// Возможно "нулевой" отчет.
				КонецЕсли;
				
				Если КодПоМесту = "220"
				   И НЕ ОтчетЗаНалоговыйПериод
				   И ЕстьЗаполненныеПоказателиВРазделе("Лист02_5", "П002050012003, П002050012103") Тогда
					// Возможно "нулевой" отчет.
				КонецЕсли;
			КонецЕсли;
			
			// Раздел не допускается.
			Если ЗаполненРаздел1_2 Тогда
				Если КодПоМесту = "231"
				 ИЛИ ОтчетЗаНалоговыйПериод
				 ИЛИ ПодразделыНеДопускаются Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "При заданных параметрах декларации раздел 1.2 не должен заполняться", "Раздел1_2", "П000120000100");
					СтатусПроверки = Ложь;
				КонецЕсли;

			КонецЕсли;
			
			// Раздел 1.3.
			
			// Раздел обязателен.
			Если НЕ ЗаполненРаздел1_3 Тогда
				Если ЗначениеСодержитсяВСписке(КодПоМесту, "213, 214, 215, 216, 225, 226, 231")
				   И (ЕстьЗаполненныеПоказателиВРазделе("Лист03А", СписокПоказателейРаздела("Лист03А"))
				 ИЛИ ЕстьЗаполненныеПоказателиВРазделе("Лист03Б", СписокПоказателейРаздела("Лист03Б"))
				 ИЛИ ЕстьЗаполненныеПоказателиВРазделе("Лист04", СписокПоказателейРаздела("Лист04"))) Тогда
					// Возможно "нулевой" отчет.
				КонецЕсли;
			КонецЕсли;
			
			// Раздел не допускается.
			Если ЗаполненРаздел1_3 Тогда
				Если ПодразделыНеДопускаются Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "При заданных параметрах декларации раздел 1.3 не должен заполняться", "Раздел1_3", "П000130001003");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		Возврат СтатусПроверки;
	КонецЕсли;
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации (обособленного подразделения)!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе код ОКВЭД не соответствует шаблонам ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра)!", "Титульный", "ОКВЭД");	
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ПериодОтч) Тогда
		ТекстОписанияОшибки = "На титульном листе не задан код налогового (отчетного периода)!";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "ПериодОтч");
		СтатусПроверки = Ложь;
	ИначеЕсли РазрешенныеКодыПериодов.Найти(ПараметрыВыгрузки.ПериодОтч) = Неопределено Тогда
		ТекстОписанияОшибки = "На титульном листе неверно задан код налогового (отчетного периода)!";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "ПериодОтч");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	ТекстОписанияОшибки = "Недопустимое сочетание кода периода """ + ПараметрыВыгрузки.ПериодОтч + """ и кода по месту нахождения (учета) """ + ПараметрыВыгрузки.ПоМесту + """!";
	Если (НЕ ПустаяСтрока(ПараметрыВыгрузки.ПериодОтч) И НЕ ПараметрыВыгрузки.ПериодОтч = "50") И НЕ ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда	
		
		ЗаданКодПериодаКГ = (КодыПериодовКонсолидированнойГруппы.Найти(ПараметрыВыгрузки.ПериодОтч) <> Неопределено);
		ЗаданКодПоМестуКГ = (КодыПоМестуКонсолидированнойГруппы.Найти(ПараметрыВыгрузки.ПоМесту) <> Неопределено);
		Если НЕ (ЗаданКодПериодаКГ = ЗаданКодПоМестуКГ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "ПериодОтч");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ИННЮЛРеорг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН реорганизованной организации (обособленного подразделения)!", "Титульный", "ИНН_Реорг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.КППРеорг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП реорганизованной организации (обособленного подразделения)!", "Титульный", "КПП_Реорг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ ПустаяСтрока(ПараметрыВыгрузки.ИННЮЛРеорг) ИЛИ НЕ ПустаяСтрока(ПараметрыВыгрузки.КППРеорг)) 
		И ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код формы реорганизации!", "Титульный", "КодФормыОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка раздела 1.1
	ДанныеРаздела11 = мДанныеОтчета.Раздел1_1;
	Для Каждого Стр Из ДанныеРаздела11 Цикл
		НомерСтраницы = ДанныеРаздела11.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_1", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан признак налогоплательщика!", "Раздел1_1", "П000110000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П000110000100", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 указан некорректный признак налогоплательщика!", "Раздел1_1", "П000110000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,"На странице " + НомерСтраницы + " раздела 1.1 не указан код по ОКАТО!", "Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110001003)) <> 11 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код по ОКАТО некорректной длины!", "Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110003003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации!", "Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110003003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины!", "Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в Федеральный бюджет)!", "Раздел1_1", "П000110004003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110006003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации!", "Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110006003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины!", "Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в бюджет субъекта Российской Федерации)!", "Раздел1_1", "П000110007003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЭтоКонсолидированнаяГруппа Тогда
		Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_1", "П000110000100") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела 1.1!", "Раздел1_1", "П000110000100");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ЗначенияГруппыПоказателейПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_1", "П000110000100, П000110001003") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Сочетание признака налогоплательщика и ОКАТО не должно повторяться на различных страницах раздела 1.1!", "Раздел1_1", "П000110000100");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проверка раздела 1.2
	ДанныеРаздела12 = мДанныеОтчета.Раздел1_2;
	
	Если (ПараметрыВыгрузки.ПериодОтч = "34" ИЛИ ПараметрыВыгрузки.ПериодОтч = "46" ИЛИ ПараметрыВыгрузки.ПериодОтч = "16" ИЛИ ПараметрыВыгрузки.ПериодОтч = "68") Тогда
		Для Каждого Стр Из ДанныеРаздела12 Цикл
			НомерСтраницы = ДанныеРаздела12.Индекс(Стр) + 1;
			ДанныеСтраницы = Стр.Данные[0].Значение;
			Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_2", ДеревоВыгрузки) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Заполнение раздела 1.2 в декларации за год не предусмотрено!", "Раздел1_2", "П000120000100", НомерСтраницы);
				СтатусПроверки = Ложь;
				Возврат СтатусПроверки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для Каждого Стр Из ДанныеРаздела12 Цикл
		НомерСтраницы = ДанныеРаздела12.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_2", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан признак налогоплательщика!", "Раздел1_2", "П000120000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П000120000100", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 указан некорректный признак налогоплательщика!", "Раздел1_2", "П000120000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,"На странице " + НомерСтраницы + " раздела 1.2 не указан код по ОКАТО!", "Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120001003)) <> 11 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код по ОКАТО некорректной длины!", "Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120012003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120013003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120014003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120011003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации!", "Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120011003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины!", "Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120022003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120023003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120024003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120021003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации!", "Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120021003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины!", "Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЭтоКонсолидированнаяГруппа Тогда
		Если ПараметрыВыгрузки.ПериодОтч = "33" ИЛИ ПараметрыВыгрузки.ПериодОтч = "45" Тогда
			Если ЗначенияГруппыПоказателейПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_2", "П000120000100, П000120000200") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Сочетание признака налогоплательщика и кода квартала не должен повторяться на различных страницах раздела 1.2!", "Раздел1_2", "П000120000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_2", "П000120000100") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела 1.2!", "Раздел1_2", "П000120000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначенияГруппыПоказателейПовторяютсяНаРазличныхЭкземплярахРаздела("Раздел1_2", "П000120000100, П000120000200, П000120001003") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Сочетание признака налогоплательщика, кода квартала И ОКАТО не должно повторяться на различных страницах раздела 1.2!", "Раздел1_2", "П000120000100");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;

	// проверка раздела 1.3
	ДанныеРаздела13 = мДанныеОтчета.Раздел1_3;
	Для Каждого Стр Из ДанныеРаздела13 Цикл
		НомерСтраницы = ДанныеРаздела13.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел1_3", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код вида платежа!", "Раздел1_3", "П000130001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П000130001003", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан некорректный код вида платежа!", "Раздел1_3", "П000130001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130002003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код по ОКАТО!", "Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000130002003)) <> 11 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан код по ОКАТО некорректной длины!", "Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130003003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код бюджетной классификации!", "Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000130003003)) <> 20 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан код бюджетной классификации некорректной длины!", "Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
			НомСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000130004001_" + Формат(НомСтроки, "ЧГ=")) Цикл
				СтрП000130004001 = ДанныеСтраницы["П000130004001_" + Формат(НомСтроки, "ЧГ=")];
				СтрП000130004003 = ДанныеСтраницы["П000130004003_" + Формат(НомСтроки, "ЧГ=")];
				Если ЗначениеЗаполнено(СтрП000130004001) ИЛИ ЗначениеЗаполнено(СтрП000130004003) Тогда
					СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрП000130004003) И НЕ ЗначениеЗаполнено(СтрП000130004001) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 в строке " + Формат(НомСтроки, "ЧГ=") + " не указан срок уплаты!", "Раздел1_3", "П000130004001_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомСтроки = НомСтроки + 1;
			КонецЦикла;
			Если НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не заполнена ни одна строка 040!", "Раздел1_3", "П000130004001_1", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 02
	КодыНалогоплательщикаНаЛисте02 = Новый Массив;
	ДанныеЛист02 = мДанныеОтчета.Лист02;
	
	Если ПараметрыВыгрузки.ПоМесту = "220" ИЛИ ПараметрыВыгрузки.ПоМесту = "231" Тогда
		
		Для Каждого Стр Из ДанныеЛист02 Цикл
			НомерСтраницы = ДанныеЛист02.Индекс(Стр) + 1;
			ДанныеСтраницы = Стр.Данные[0].Значение;
			Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02", ДеревоВыгрузки) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Заполнение листа 02 в декларации с кодом по месту нахождения (учета) 220 или 231 не предусмотрено!", "Лист02", "П002000000100", НомерСтраницы);
				СтатусПроверки = Ложь;
				Возврат СтатусПроверки;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Стр Из ДанныеЛист02 Цикл
			НомерСтраницы = ДанныеЛист02.Индекс(Стр) + 1;
			ДанныеСтраницы = Стр.Данные[0].Значение;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П002000000100) Тогда
				КодыНалогоплательщикаНаЛисте02.Добавить(СокрЛП(ДанныеСтраницы.П002000000100));
			КонецЕсли;
			Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02", ДеревоВыгрузки) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002000000100) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" не указан признак налогоплательщика!", "Лист02", "П002000000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002000000100", ВозможныеЗначенияПоказателей) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" указан некорректный признак налогоплательщика!", "Лист02", "П002000000100", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Строка180 = ДанныеСтраницы.П002000018003;
				Строка240 = ДанныеСтраницы.П002000024003;
				Если Строка240 > Строка180 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" значение в строке 240 превышает значение в строке 180!", "Лист02", "П002000024003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Строка190 = ДанныеСтраницы.П002000019003;
				Строка250 = ДанныеСтраницы.П002000025003;
				Если Строка250 > Строка190 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" значение в строке 250 превышает значение в строке 190!", "Лист02", "П002000025003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Строка200 = ДанныеСтраницы.П002000020003;
				Строка260 = ДанныеСтраницы.П002000026003;
				Если Строка260 > Строка200 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" значение в строке 260 превышает значение в строке 200!", "Лист02", "П002000026003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02", "П002000000100") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Лист 02""!", "Лист02", "П002000000100");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	// проверка приложения 1 к листу 02
	ДанныеЛист02Прил1 = мДанныеОтчета.Лист02_1;
	Для Каждого Стр Из ДанныеЛист02Прил1 Цикл
		НомерСтраницы = ДанныеЛист02Прил1.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_1", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002010000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 1 к листу 02"" не указан признак налогоплательщика!", "Лист02_1", "П002010000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002010000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 1 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_1", "П002010000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_1", "П002010000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 1 к листу 02""!", "Лист02_1", "П002010000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 2 к листу 02
	ДанныеЛист02Прил2 = мДанныеОтчета.Лист02_2;
	Для Каждого Стр Из ДанныеЛист02Прил2 Цикл
		НомерСтраницы = ДанныеЛист02Прил2.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_2", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002020000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" не указан признак налогоплательщика!", "Лист02_2", "П002020000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002020000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_2", "П002020000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П002020013503)) И НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002020013503", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" указан некорректный код метода начисления амортизации!", "Лист02_2", "П002020013503", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_2", "П002020000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 2 к листу 02""!", "Лист02_2", "П002020000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 3 к листу 02
	ДанныеЛист02Прил3 = мДанныеОтчета.Лист02_3;
	Для Каждого Стр Из ДанныеЛист02Прил3 Цикл
		НомерСтраницы = ДанныеЛист02Прил3.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_3", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002030000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" не указан признак налогоплательщика!", "Лист02_3", "П002030000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002030000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_3", "П002030000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Строка210 = ДанныеСтраницы.П002030021003;
			Строка211 = ДанныеСтраницы.П002030021103;
			Если Строка211 > Строка210 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" значение в строке 211 превышает значение в строке 210!", "Лист02_3", "П002030021103", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка220 = ДанныеСтраницы.П002030022003;
			Строка221 = ДанныеСтраницы.П002030022103;
			Если Строка221 > Строка220 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" значение в строке 221 превышает значение в строке 220!", "Лист02_3", "П002030022103", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_3", "П002030000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 3 к листу 02""!", "Лист02_3", "П002030000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 4 к листу 02
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П002040004001", "П002040004003");
	СоответствиеИменЯчеек.Вставить("П002040005001", "П002040005003");
	СоответствиеИменЯчеек.Вставить("П002040006001", "П002040006003");
	СоответствиеИменЯчеек.Вставить("П002040007001", "П002040007003");
	СоответствиеИменЯчеек.Вставить("П002040008001", "П002040008003");
	СоответствиеИменЯчеек.Вставить("П002040009001", "П002040009003");
	СоответствиеИменЯчеек.Вставить("П002040010001", "П002040010003");
	СоответствиеИменЯчеек.Вставить("П002040011001", "П002040011003");
	СоответствиеИменЯчеек.Вставить("П002040012001", "П002040012003");
	СоответствиеИменЯчеек.Вставить("П002040013001", "П002040013003");
	ДанныеЛист02Прил4 = мДанныеОтчета.Лист02_4;
	Для Каждого Стр Из ДанныеЛист02Прил4 Цикл
		НомерСтраницы = ДанныеЛист02Прил4.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_4", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002040000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" не указан признак налогоплательщика!", "Лист02_4", "П002040000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002040000100", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_4", "П002040000100", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Эл Из СоответствиеИменЯчеек Цикл
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение]) И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке " + Сред(Эл.Ключ, 9, 3) + " не задан год!", "Лист02_4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) И СтрДлина(СокрЛП(ДанныеСтраницы[Эл.Ключ])) <> 4 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке " + Сред(Эл.Ключ, 9, 3) + " задано значение года некорректной длины!", "Лист02_4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_4", "П002040000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 4 к листу 02""!", "Лист02_4", "П002040000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 5 к листу 02
	ДанныеЛист02Прил5 = мДанныеОтчета.Лист02_5;
	Для Каждого Стр Из ДанныеЛист02Прил5 Цикл
		НомерСтраницы = ДанныеЛист02Прил5.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_5", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак налогоплательщика!", "Лист02_5", "П002050000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002050000100", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указан некорректный признак налогоплательщика!", "Лист02_5", "П002050000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050001000) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак ""Расчет составлен""!", "Лист02_5", "П002050001000", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002050001000", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указано некорректное значение признака ""Расчет составлен""!", "Лист02_5", "П002050001000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050002001) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан КПП обособленного подразделения!", "Лист02_5", "П002050002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002050002001)) <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указан КПП обособленного подразделения некорректной длины!", "Лист02_5", "П002050002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050002003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указано наименование обособленного подразделения!", "Лист02_5", "П002050002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002050002002) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак возложения на обособленное подразделение обязанности по уплате налога!", "Лист02_5", "П002050002002", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002050002002", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указано некорректное значение признака возложения на обособленное подразделение обязанности по уплате налога!", "Лист02_5", "П002050002002", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П002050010003) И ЗначениеЗаполнено(ДанныеСтраницы.П002050011003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению!", "Лист02_5", "П002050010003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка приложения 6 к листу 02
	ЕстьЗаполненныеЛисты = Ложь;
	НомерПервойЗаполненнойСтраницы = 0;
	
	ДанныеРаздела = мДанныеОтчета.Лист02_6;
	Для Каждого Лист Из ДанныеРаздела Цикл
		НомерСтраницы = ДанныеРаздела.Индекс(Лист) + 1;
		ДанныеСтраницы = Лист.Данные[0].Значение;
		
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_6", ДеревоВыгрузки) Тогда
			ЕстьЗаполненныеЛисты = Истина;
			НомерПервойЗаполненнойСтраницы = ?(НомерПервойЗаполненнойСтраницы = 0, НомерСтраницы, НомерПервойЗаполненнойСтраницы);
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002140000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указан ИНН участника (обособленного подразделения)!", "Лист02_6", "П002140000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002140000201) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указан КПП участника (обособленного подразделения)!", "Лист02_6", "П002140000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002140000201)) <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" указан КПП участника (обособленного подразделения) некорректной длины!", "Лист02_6", "П002140000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002140000301) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указан ОКАТО участника (обособленного подразделения)!", "Лист02_6", "П002140000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002140000301)) <> 11 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" указан ОКАТО участника (обособленного подразделения) некорректной длины!", "Лист02_6", "П002140000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002140000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указано наименование участника (обособленного подразделения)!", "Лист02_6", "П002140000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002140000601) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указан код субъекта РФ!", "Лист02_6", "П002140000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002140000601)) <> 2 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" указан код субъекта РФ некорректной длины!", "Лист02_6", "П002140000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П002140010003) И ЗначениеЗаполнено(ДанныеСтраницы.П002140011003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению!", "Лист02_6", "П002140010003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныеЛисты И НЕ ЭтоКонсолидированнаяГруппа Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Листы приложения 6 к листу 02 заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218!", "Лист02_6", "П002140000101", НомерПервойЗаполненнойСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка приложения 6а к листу 02
	ЕстьЗаполненныеЛисты = Ложь;
	НомерПервойЗаполненнойСтраницы = 0;
	
	ДанныеРаздела = мДанныеОтчета.Лист02_6а;
	
	КоличествоЛистовСПризнакомНалогоплательщика1 = 0;
	НомерПервогоЛистаСПризнакомНалоголателщика1 = 0;
	ЕстьЛистСПризнакомНалогоплательщика4ИУстановленнымФлагом = Ложь;
	
	Для Каждого Лист Из ДанныеРаздела Цикл
		НомерСтраницы = ДанныеРаздела.Индекс(Лист) + 1;
		ДанныеСтраницы = Лист.Данные[0].Значение;
		
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_6а", ДеревоВыгрузки) Тогда
			ЕстьЗаполненныеЛисты = Истина;
			НомерПервойЗаполненнойСтраницы = ?(НомерПервойЗаполненнойСтраницы = 0, НомерСтраницы, НомерПервойЗаполненнойСтраницы);
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002150000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указан ИНН участника (обособленного подразделения)!", "Лист02_6а", "П002150000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002150000201) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указан КПП участника (обособленного подразделения)!", "Лист02_6а", "П002150000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002150000201)) <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" указан КПП участника (обособленного подразделения) некорректной длины!", "Лист02_6а", "П002150000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002150000301) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указан ОКАТО участника (обособленного подразделения)!", "Лист02_6а", "П002150000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002150000301)) <> 11 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" указан ОКАТО участника (обособленного подразделения) некорректной длины!", "Лист02_6а", "П002150000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002150000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указано наименование участника (обособленного подразделения)!", "Лист02_6а", "П002150000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002150000501) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указан признак ""Расчет составлен""!", "Лист02_6а", "П002150000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002150000501", ВозможныеЗначенияПоказателей) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" указано некорректное значение признака ""Расчет составлен""!", "Лист02_6а", "П002150000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				РасчетСоставлен = ДанныеСтраницы.П002150000501;
				Если РасчетСоставлен = "1" Тогда
					КоличествоЛистовСПризнакомНалогоплательщика1 = КоличествоЛистовСПризнакомНалогоплательщика1 + 1;
					НомерПервогоЛистаСПризнакомНалоголателщика1 = ?(НомерПервогоЛистаСПризнакомНалоголателщика1 = 0, НомерСтраницы, НомерПервогоЛистаСПризнакомНалоголателщика1);
				ИначеЕсли РасчетСоставлен = "4" И ДанныеСтраницы.ВГруппуОПВходитОрганизация Тогда
					ЕстьЛистСПризнакомНалогоплательщика4ИУстановленнымФлагом = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныеЛисты И НЕ ЭтоКонсолидированнаяГруппа Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Листы раздела ""Приложение 6а к Листу 02"" заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218!", "Лист02_6а", "П002150000101", НомерПервойЗаполненнойСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЕстьЛистСПризнакомНалогоплательщика4ИУстановленнымФлагом И КоличествоЛистовСПризнакомНалогоплательщика1 > 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "При заполнении листа раздела ""Приложение 6а к Листу 02"" с признаком ""Расчет составлен"" 4 и установленным флажком ""в группу входит организация"" не должно быть листов с признаком ""Расчет составлен"" 1!", "Лист02_6а", "П002150000101", НомерПервогоЛистаСПризнакомНалоголателщика1);
		СтатусПроверки = Ложь;
	ИначеЕсли КоличествоЛистовСПризнакомНалогоплательщика1 > 1 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Лист раздела ""Приложение 6а к Листу 02"" с признаком ""Расчет составлен"" 1 может быть заполнент только в единственном экземпляре!", "Лист02_6а", "П002150000101", НомерПервогоЛистаСПризнакомНалоголателщика1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка листа 03 (раздел А)
	ДанныеЛист03А = мДанныеОтчета.Лист03А;
	Для Каждого Стр Из ДанныеЛист03А Цикл
		НомерСтраницы = ДанныеЛист03А.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист03А", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002060000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указан вид дивидендов!", "Лист03А", "П002060000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002060000200", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" указано некорректное значение кода вида дивидендов!", "Лист03А", "П002060000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002060000300) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не задан налоговый (отчетный) период!", "Лист03А", "П002060000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002060000300", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" указано некорректное значение налогового (отчетного) периода!", "Лист03А", "П002060000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002060000400) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указан отчетный год!", "Лист03А", "П002060000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002060000400)) <> 4 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" задан отчетный год некорректной длины!", "Лист03А", "П002060000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 03 (раздел Б)
	ДанныеЛист03РазделБ = мДанныеОтчета.Лист03Б;
	Для Каждого Стр Из ДанныеЛист03РазделБ Цикл
		НомерСтраницы = ДанныеЛист03РазделБ.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист03Б", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002070000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел Б)"" не указан вид дивидендов!", "Лист03Б", "П002070000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, "П002070000200", ВозможныеЗначенияПоказателей) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел Б)"" указано некорректное значение кода вида дивидендов!", "Лист03Б", "П002070000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 03 (реестр)
	ДанныеЛист03В = мДанныеОтчета.Лист03В;
	Для Каждого Стр Из ДанныеЛист03В Цикл
		НомерСтраницы = ДанныеЛист03В.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист03В", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080005003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел В)"" не указана дата перечисления дивидендов!", "Лист03В", "П002080005003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел В)"" не указано наименование получателя дивидендов!", "Лист03В", "П002080001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080002003_02) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел В)"" не указан код субъекта Российской Федерации!", "Лист03В", "П002080002003_02", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П002080002003_02)) <> 2 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел В)"" указан код субъекта Российской Федерации некорректной длины!", "Лист03В", "П002080002003_02", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П002080002003_01)) И СтрДлина(СокрЛП(ДанныеСтраницы.П002080002003_01)) <> 6 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел В)"" указан индекс некорректной длины!", "Лист03В", "П002080002003_01", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_01) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_02) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_03) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_01) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел В)"" не указана фамилия руководителя организации!", "Лист03В", "П002080003003_01", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002080003003_02) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел В)"" не указано имя руководителя организации!", "Лист03В", "П002080003003_02", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 04
	ДанныеЛист04 = мДанныеОтчета.Лист04;
	Для Каждого Стр Из ДанныеЛист04 Цикл
		НомерСтраницы = ДанныеЛист04.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист04", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002090000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 04"" не указан вид дохода!", "Лист04", "П002090000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 05
	ДанныеЛист05 = мДанныеОтчета.Лист05;
	Для Каждого Стр Из ДанныеЛист05 Цикл
		НомерСтраницы = ДанныеЛист05.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист05", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П002100000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 05"" не указан вид операции!", "Лист05", "П002100000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// проверка листа 07
	ДанныеЛист07 = мДанныеОтчета.Лист07;
	НомСтроки = 1;
	КодВидаПоступления = Неопределено;
	СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
	Пока ДанныеЛист07.Свойство("П002120001001_" + Формат(НомСтроки, "ЧГ="), КодВидаПоступления) Цикл
		СтрНомСтроки = Формат(НомСтроки, "ЧГ=");
		Если ЗначениеЗаполнено(ДанныеЛист07["П002120001002_" + СтрНомСтроки]) ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001003_" + СтрНомСтроки])
		ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001004_" + СтрНомСтроки]) ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001005_" + СтрНомСтроки])
		ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001006_" + СтрНомСтроки]) ИЛИ ЗначениеЗаполнено(ДанныеЛист07["П002120001007_" + СтрНомСтроки]) Тогда
			СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
			Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" в строке " + Формат(НомСтроки, "ЧГ=") + " не указан код вида поступлений!", "Лист07", "П002120001001_" + Формат(НомСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодВидаПоступления)) <> 3 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" в строке " + Формат(НомСтроки, "ЧГ=") + " указан код вида поступлений некорректной длины!", "Лист07", "П002120001001_" + Формат(НомСтроки, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	Если НЕ РазделПуст(ДеревоВыгрузки, "Лист07") И НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" не заполнена ни одна строка!", "Лист07", "П002120001001_1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	   
КонецФункции

&НаСервере
Функция СписокПоказателейРаздела(ИмяСекцииРаздела)
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	СекцияРаздела = МакетСоставаПоказателей.Области[ИмяСекцииРаздела];
	
	СписокПоказателей = "";
	
	Для Инд = СекцияРаздела.Верх По СекцияРаздела.Низ Цикл
		
		КодПоказателя = СокрЛП(МакетСоставаПоказателей.Область(Инд, 1).Текст);
		
		Если ЗначениеЗаполнено(КодПоказателя) Тогда
			СписокПоказателей = СписокПоказателей + ?(ЗначениеЗаполнено(СписокПоказателей), ", ", "") + КодПоказателя;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПоказателей;
	
КонецФункции

&НаСервере
Функция ЕстьЗаполненныеПоказателиВРазделе(ИмяРаздела, СписокПоказателей)
	
	ЕстьЗаполненныеПоказатели = Ложь;
	
	ИменаПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПоказателей);
	
	ДанныеРаздела = мДанныеОтчета[ИмяРаздела];
	
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
			Если ЗначениеЗаполнено(ЛистРаздела.Данные[0].Значение[СокрЛП(ИмяПоказателя)]) Тогда
				ЕстьЗаполненныеПоказатели = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьЗаполненныеПоказатели Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьЗаполненныеПоказатели;
	
КонецФункции

&НаСервере
Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

&НаСервере
Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, парамРазделы)
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если СтрНайти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Истина;
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ РазделПуст(ДеревоВыгрузки, Раздел) Тогда
			РазделыПусты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ РазделыПусты;
	
КонецФункции

&НаСервере
Функция ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(Раздел, КодПокзателя)
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	ЗначенияПоказателя = Новый Массив;
	Для Каждого Стр Из ДанныеРаздела Цикл
		ЗначениеПоказателя = Стр.Данные[0].Значение[КодПокзателя];
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Если ЗначенияПоказателя.Найти(ЗначениеПоказателя) <> Неопределено Тогда
				Возврат Истина;
			Иначе
				ЗначенияПоказателя.Добавить(ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗначенияГруппыПоказателейПовторяютсяНаРазличныхЭкземплярахРаздела(Раздел, СтрокаПоказателей)
	
	СтруктураПоказателей = Новый Структура(СтрокаПоказателей);
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	Для Каждого Показатель Из СтруктураПоказателей Цикл
		ТаблицаПоказателей.Колонки.Добавить(Показатель.Ключ);
	КонецЦикла;
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	
	Для Каждого Стр Из ДанныеРаздела Цикл
		НоваяСтрокаТаблицыПоказателей = ТаблицаПоказателей.Добавить();
		Для Каждого Показатель Из СтруктураПоказателей Цикл
			СтруктураПоказателей[Показатель.Ключ] = Стр.Данные[0].Значение[Показатель.Ключ];
			НоваяСтрокаТаблицыПоказателей[Показатель.Ключ] = Стр.Данные[0].Значение[Показатель.Ключ];
		КонецЦикла;
		
		НайденныеСтроки = ТаблицаПоказателей.НайтиСтроки(СтруктураПоказателей);
		Если НайденныеСтроки.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000014003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000015003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000016003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000017003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002050006003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002070002003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002090003003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000110000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120000200");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120001003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120011003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120021003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002000000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002010000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002020000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002030000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002040000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П002050000100");
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция РазделПуст(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел);
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	РазделПуст = Истина;
	Если ТипЗнч(ДанныеРаздела) <> Тип("Структура") Тогда
		Для Каждого Стр Из ДанныеРаздела Цикл
			Если НЕ СтраницаПуста(Стр.Данные[0].Значение, ПоказателиРаздела) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗначениеПоказателяВСпискеВозможных(ДанныеСтраницы, КодПоказателя, ВозможныеЗначенияПоказателей)
	
	ЗначенияПоказетелей = ВозможныеЗначенияПоказателей[КодПоказателя];
	Если ЗначенияПоказетелей = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат СтрНайти(ЗначенияПоказетелей, СокрЛП(ДанныеСтраницы[КодПоказателя])) <> 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПринудительнаяВыгрузкаПриложений1И2КЛисту02()
	
	ДатаОкончанияПериодаОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
	ЭтоСдачаПоИтогамКвартала = (Месяц(ДатаОкончанияПериодаОтчета) % 3 = 0);
	
	ПризнакПоМесту = мДанныеОтчета.Титульный.ПоМесту;
	ЭтоСдачаЗаОбособленноеПодразделение = (ПризнакПоМесту = "220" ИЛИ ПризнакПоМесту = "223");
	СдачаЛиста02НеПредусмотрена = (ПризнакПоМесту = "220" ИЛИ ПризнакПоМесту = "231");
	
	Возврат ЭтоСдачаПоИтогамКвартала И НЕ ЭтоСдачаЗаОбособленноеПодразделение И НЕ СдачаЛиста02НеПредусмотрена;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьПустыеПриложенияКЛисту02ПриНеобходимости(ДеревоВыгрузки, СтурктураУзла)
	
	Если СтурктураУзла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПринудительнаяВыгрузкаПриложений1И2КЛисту02() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураУзлаЛист02 = СтурктураУзла.Строки.Найти("РасчНал", "Код", Истина);
	СтруктураУзлаПрил1КЛисту02 = СтурктураУзла.Строки.Найти("ДохРеалВнеРеал", "Код", Истина);
	СтруктураУзлаПрил2КЛисту02 = СтурктураУзла.Строки.Найти("РасхРеалВнеРеал", "Код", Истина);
	
	УзелПрибыль = ДеревоВыгрузки.Строки.Найти("Прибыль", "Код", Истина);
	
	УзлыРаздела11 = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код", "НалПУАв"), Истина);
	Для Каждого УзелРаздела11 Из УзлыРаздела11 Цикл
		
		// находим атрибут ТипНП
		УзелТипНП = УзелРаздела11.Строки.Найти("ТипНП", "Код");
		Если УзелТипНП = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// получаем значение атрибута
		ЗначениеТипНП = УзелТипНП.Значение;
		Если НЕ ЗначениеЗаполнено(ЗначениеТипНП) Тогда
			Продолжить;
		КонецЕсли;
		
		// ищем узел листа 02 с тем же признаком типа налогоплательщика
		УзлыТипНПЛист02 = УзелПрибыль.Строки.НайтиСтроки(Новый Структура("Код, Ключ, Значение", "ТипНП", "П002000000100", ЗначениеТипНП), Истина);
		Если УзлыТипНПЛист02.Количество() = 0 Тогда
			УзелЛист02 = Неопределено;
		Иначе
			УзелЛист02 = УзлыТипНПЛист02[0].Родитель;
		КонецЕсли;
		
		УзелПрил1КЛисту02 = ?(УзелЛист02 = Неопределено, Неопределено, УзелЛист02.Строки.Найти("ДохРеалВнеРеал", "Код"));
		УзелПрил2КЛисту02 = ?(УзелЛист02 = Неопределено, Неопределено, УзелЛист02.Строки.Найти("РасхРеалВнеРеал", "Код"));
		
		// выгружаем пустой лист 02, если его нет в тексте выгрузки
		Если УзелЛист02 = Неопределено ИЛИ УзелЛист02.Строки.НайтиСтроки(Новый Структура("Тип", "А")).Количество() = 1 Тогда
			
			УзелНалПУ = УзелПрибыль.Строки.Найти("НалПУ", "Код");
			Если УзелНалПУ = Неопределено Тогда
				УзелЛист02 = ЗагрузитьПустойУзелРаздела(УзелПрибыль, СтруктураУзлаЛист02, Истина, 0, УзелЛист02);
			Иначе
				УзелЛист02 = ЗагрузитьПустойУзелРаздела(УзелПрибыль, СтруктураУзлаЛист02, Истина, УзелПрибыль.Строки.Индекс(УзелНалПУ) + 1, УзелЛист02);
			КонецЕсли;
			
			УзелТипНП = УзелЛист02.Строки.Найти("ТипНП", "Код");
			УзелТипНП.Значение = ЗначениеТипНП;
			ЗаполнитьНулямиНезаполненныеАтрибуты(УзелЛист02);
			
		КонецЕсли;
		
		// выгружаем пустое приложение 1 к листу 02, если его нет в тексте выгрузки
		Если УзелПрил1КЛисту02 = Неопределено Тогда
			УзелПрил1КЛисту02 = ЗагрузитьПустойУзелРаздела(УзелЛист02, СтруктураУзлаПрил1КЛисту02, , ОпределитьИндексСледующегоПослеАтрибутовУзла(УзелЛист02));
			УзелТипНП = УзелПрил1КЛисту02.Строки.Найти("ТипНП", "Код");
			УзелТипНП.Значение = ЗначениеТипНП;
			ЗаполнитьНулямиНезаполненныеАтрибуты(УзелПрил1КЛисту02);
		КонецЕсли;
		
		// выгружаем пустое приложение 2 к листу 02, если его нет в тексте выгрузки
		Если УзелПрил2КЛисту02 = Неопределено Тогда
			УзелПрил2КЛисту02 = ЗагрузитьПустойУзелРаздела(УзелЛист02, СтруктураУзлаПрил2КЛисту02, , УзелЛист02.Строки.Индекс(УзелПрил1КЛисту02) + 1);
			УзелТипНП = УзелПрил2КЛисту02.Строки.Найти("ТипНП", "Код");
			УзелТипНП.Значение = ЗначениеТипНП;
			ЗаполнитьНулямиНезаполненныеАтрибуты(УзелПрил2КЛисту02);
			Узел_МетодНачАморт = УзелПрил2КЛисту02.Строки.Найти("МетодНачАморт", "Код", Истина);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_МетодНачАморт);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки);
	сохрСтруктураУзлаРасчНал = СохранитьСтруктураУзла(ДеревоВыгрузки, "РасчНал");
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	ВыгрузитьПустыеПриложенияКЛисту02ПриНеобходимости(ДеревоВыгрузки, сохрСтруктураУзлаРасчНал);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
			
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	// заполнение раздела 1
	НалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалПУ");
	
	// заполнение подраздела 1.1
	НалПУАв = ПолучитьПодчиненныйЭлемент(НалПУ, "НалПУАв");
	ДанныеРаздела11 = мДанныеОтчета.Раздел1_1;
	Для Каждого Стр Из ДанныеРаздела11 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Раздел1_1", УзелРодитель.Владелец()) Тогда
			ЭкзНалПУАв = СкопироватьУзел(НалПУ, НалПУАв);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалПУАв);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение подраздела 1.2
	НалПУМес = ПолучитьПодчиненныйЭлемент(НалПУ, "НалПУМес");
	ДанныеРаздела12 = мДанныеОтчета.Раздел1_2;
	Для Каждого Стр Из ДанныеРаздела12 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Раздел1_2", УзелРодитель.Владелец()) Тогда
			ЭкзНалПУМес = СкопироватьУзел(НалПУ, НалПУМес);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалПУМес);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение подраздела 1.3
	НалПУПроц = ПолучитьПодчиненныйЭлемент(НалПУ, "НалПУПроц");
	ДанныеРаздела13 = мДанныеОтчета.Раздел1_3;
	Для Каждого Стр Из ДанныеРаздела13 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Раздел1_3", УзелРодитель.Владелец()) Тогда
			ЭкзНалПУПроц = СкопироватьУзел(НалПУ, НалПУПроц);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалПУПроц);
		КонецЕсли;
	КонецЦикла;
	
	ПризнакПоМесту = мДанныеОтчета.Титульный.ПоМесту;
	ЭтоСдачаЗаОбособленноеПодразделение = (ПризнакПоМесту = "220" ИЛИ ПризнакПоМесту = "223");
	Если НЕ ЭтоСдачаЗаОбособленноеПодразделение Тогда
		// приложение 5 выгружается в составе листа 02
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "РаспрНалСубРФ"));
		
		// заполняем лист 02 и его приложения
		РасчНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНал");
		ДанныеЛиста02 = мДанныеОтчета.Лист02;
		ДанныеЛиста02Прил1  = мДанныеОтчета.Лист02_1;
		ДанныеЛиста02Прил2  = мДанныеОтчета.Лист02_2;
		ДанныеЛиста02Прил3  = мДанныеОтчета.Лист02_3;
		ДанныеЛиста02Прил4  = мДанныеОтчета.Лист02_4;
		ДанныеЛиста02Прил5  = мДанныеОтчета.Лист02_5;
		ДанныеЛиста02Прил6  = мДанныеОтчета.Лист02_6;
		ДанныеЛиста02Прил6а = мДанныеОтчета.Лист02_6а;

		СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02 = Новый Соответствие;
		
		// Лист 02.
		Лист02НеПредоставляется = (ПризнакПоМесту = "220" ИЛИ ПризнакПоМесту = "231");
		Для Каждого Стр Из ДанныеЛиста02 Цикл
			
			ПризнакНалогоплательщика = СокрЛП(Стр.Данные[0].Значение.П002000000100);
			Если Лист02НеПредоставляется ИЛИ НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭкзРасчНал = СкопироватьУзел(УзелРодитель, РасчНал);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзРасчНал);
			
			СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭкзРасчНал);
			
		КонецЦикла;
		
		// выгружаем "Приложение 1 к листу 02"
		Для Каждого ЭкзЛист02Прил1 из ДанныеЛиста02Прил1 Цикл
			
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил1.Данные[0].Значение.П002010000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил1.Данные[0].Значение, "Лист02_1", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 1 к листу 02
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил1.Данные[0].Значение, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ДохРеалВнеРеал")));
			
		КонецЦикла;
		
		// выгружаем "Приложение 2 к листу 02"
		Для Каждого ЭкзЛист02Прил2 из ДанныеЛиста02Прил2 Цикл
			
			// проверяем, заполнена ли страница
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил2.Данные[0].Значение.П002020000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил2.Данные[0].Значение, "Лист02_2", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 2 к листу 02
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил2.Данные[0].Значение, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РасхРеалВнеРеал")));
			
		КонецЦикла;
		
		// выгружаем "Приложение 3 к листу 02"
		Для Каждого ЭкзЛист02Прил3 из ДанныеЛиста02Прил3 Цикл
			
			// проверяем, заполнена ли страница
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил3.Данные[0].Значение.П002030000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил3.Данные[0].Значение, "Лист02_3", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 3 к листу 02
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил3.Данные[0].Значение, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РасчРасхОпер")));
			
		КонецЦикла;
		
		// выгружаем "Приложение 4 к листу 02"
		Для Каждого ЭкзЛист02Прил4 из ДанныеЛиста02Прил4 Цикл
			
			// проверяем, заполнена ли страница
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил4.Данные[0].Значение.П002040000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил4.Данные[0].Значение, "Лист02_4", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 4 к листу 02
			УбытУменНБ = СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "УбытУменНБ"));
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил4.Данные[0].Значение, УбытУменНБ);
			
			// вручную выгружаем остатки неперенесенного убытка по годам
			ОстУбытНачПерГод = ПолучитьПодчиненныйЭлемент(УбытУменНБ, "ОстУбытНачПерГод");
			Для НомСтрДес = 4 По 13 Цикл
				КопияОстУбытНачПерГод = СкопироватьУзел(УбытУменНБ, ОстУбытНачПерГод);
				КодПоказателяГрафа1 = "П0020400" + Формат(НомСтрДес, "ЧЦ=2; ЧВН=") + "001";
				КодПоказателяГрафа3 = "П0020400" + Формат(НомСтрДес, "ЧЦ=2; ЧВН=") + "003";
				ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(КопияОстУбытНачПерГод, "Год"), ЭкзЛист02Прил4.Данные[0].Значение[КодПоказателяГрафа1]);
				ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(КопияОстУбытНачПерГод, "ОстУбыт"), ЭкзЛист02Прил4.Данные[0].Значение[КодПоказателяГрафа3]);
			КонецЦикла;
			
		КонецЦикла;
		
		// выгружаем "Приложение 5 к листу 02"
		Для Каждого ЭкзЛист02Прил5 из ДанныеЛиста02Прил5 Цикл
			
			// проверяем, заполнена ли страница
			ПризнакНалогоплательщика = СокрЛП(ЭкзЛист02Прил5.Данные[0].Значение.П002050000100);
			Если НЕ ЗначениеЗаполнено(ПризнакНалогоплательщика) ИЛИ СтраницаПуста(ЭкзЛист02Прил5.Данные[0].Значение, "Лист02_5", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем узел Листа 02 с соответствующим признаком налогоплательщика
			ЭлементЛист02 = СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02[ПризнакНалогоплательщика];
			Если ЭлементЛист02 = Неопределено Тогда
				
				// если узел Листа 02 не найден, то создаем новый
				ЭлементЛист02 = СкопироватьУзел(УзелРодитель, РасчНал);
				ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "ТипНП").Значение = ПризнакНалогоплательщика;
				СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Вставить(ПризнакНалогоплательщика, ЭлементЛист02);
				
			КонецЕсли;
			
			// выгружаем экземпляр приложения 5 к листу 02
			ЗаполнитьДаннымиУзел(ЭкзЛист02Прил5.Данные[0].Значение, СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РаспрНалСубРФ")));
			
		КонецЦикла;
		
		// Выгрузка Приложений 6 к Листу 02.
		Листы02_6ПоСубъектамРФ = Новый Соответствие;
		Для Каждого ЭкземплярЛист02_6 из ДанныеЛиста02Прил6 Цикл
			
			Если ПризнакПоМесту <> "218" 
			  ИЛИ СтраницаПуста(ЭкземплярЛист02_6.Данные[0].Значение, "Лист02_6", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			КодСубъектаРФ = СокрЛП(ЭкземплярЛист02_6.Данные[0].Значение.П002140000601);
			
			// Первый узел Листа 02.
			ЭлементЛист02 = Неопределено;
			Если СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02.Количество() > 0 Тогда;
				Для Каждого ЭлементСоответствия Из СоответствиеПризнакаНалогоплательщикаЭлементуЛиста02 Цикл
					ЭлементЛист02 = ЭлементСоответствия.Значение;
					Прервать;
				КонецЦикла;
			Иначе
				// Нет возможности присоединить данные.
				Продолжить;
			КонецЕсли;
			
			Узел_РасчНалГруп = СкопироватьУзел(ЭлементЛист02, ПолучитьПодчиненныйЭлемент(ЭлементЛист02, "РасчНалГруп"));
			Листы02_6ПоСубъектамРФ.Вставить(КодСубъектаРФ, Узел_РасчНалГруп);
			
			ЗаполнитьДаннымиУзел(ЭкземплярЛист02_6.Данные[0].Значение, Узел_РасчНалГруп);
			
		КонецЦикла;
		
		// Выгрузка Приложений 6а к Листу 02.
		Для Каждого ЭкземплярЛист02_6а из ДанныеЛиста02Прил6а Цикл
			
			Если ПризнакПоМесту <> "218" 
			  ИЛИ СтраницаПуста(ЭкземплярЛист02_6а.Данные[0].Значение, "Лист02_6а", УзелРодитель.Владелец()) Тогда
				Продолжить;
			КонецЕсли;
			
			ОКАТО = СокрЛП(ЭкземплярЛист02_6а.Данные[0].Значение.П002150000301);
			КодСубъектаРФ = КодСубъектаРФПоОКАТО(ЭтаФорма, ОКАТО);
			
			// Узел Приложения 6 к Листу 02 с соответствующим кодом субъекта РФ.
			ЭлементЛист02_6 = Листы02_6ПоСубъектамРФ[КодСубъектаРФ];
			
			Если ЭлементЛист02_6 = Неопределено Тогда
				// Нет возможности присоединить данные.
				Продолжить;
			КонецЕсли;
			
			НовыйУзел_РасчНалУчГруп = СкопироватьУзел(ЭлементЛист02_6, ПолучитьПодчиненныйЭлемент(ЭлементЛист02_6, "РасчНалУчГруп"));
			
			ЗаполнитьДаннымиУзел(ЭкземплярЛист02_6а.Данные[0].Значение, НовыйУзел_РасчНалУчГруп);
			
		КонецЦикла;
		
	Иначе
		// приложение 5 выгружается самостоятельно, удаляем блок выгрузки листа 02
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНал"));
		
		// выгружаем "Приложение 5 к листу 02"
		РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РаспрНалСубРФ");
		ДанныеЛиста02Прил5 = мДанныеОтчета.Лист02_5;
		Для Каждого Стр Из ДанныеЛиста02Прил5 Цикл
			Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист02_5", УзелРодитель.Владелец()) Тогда
				ЭкзРаспрНалСубРФ = СкопироватьУзел(УзелРодитель, РаспрНалСубРФ);
				ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзРаспрНалСубРФ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// заполняем лист 03
	НалУдНА = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалУдНА");
	
	// заполняем лист 03 (раздел А)
	НалДохДив = ПолучитьПодчиненныйЭлемент(НалУдНА, "НалДохДив");
	ДанныеЛист03РазделА = мДанныеОтчета.Лист03А;
	Для Каждого Стр Из ДанныеЛист03РазделА Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист03А", УзелРодитель.Владелец()) Тогда
			ЭкзНалДохДив = СкопироватьУзел(НалУдНА, НалДохДив);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалДохДив);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 03 (раздел Б)
	НалДохЦБ = ПолучитьПодчиненныйЭлемент(НалУдНА, "НалДохЦБ");
	ДанныеЛист03РазделБ = мДанныеОтчета.Лист03Б;
	Для Каждого Стр Из ДанныеЛист03РазделБ Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист03Б", УзелРодитель.Владелец()) Тогда
			ЭкзНалДохЦБ = СкопироватьУзел(НалУдНА, НалДохЦБ);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалДохЦБ);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 03 (реестр)
	РеестрСумДив = ПолучитьПодчиненныйЭлемент(НалУдНА, "РеестрСумДив");
	ДанныеЛист03В = мДанныеОтчета.Лист03В;
	Для Каждого Стр Из ДанныеЛист03В Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист03В", УзелРодитель.Владелец()) Тогда
			ЭкзРеестрСумДив = СкопироватьУзел(НалУдНА, РеестрСумДив);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзРеестрСумДив);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 04
	НалДохСтав = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалДохСтав");
	ДанныеЛист04 = мДанныеОтчета.Лист04;
	Для Каждого Стр Из ДанныеЛист04 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист04", УзелРодитель.Владелец()) Тогда
			ЭкзНалДохДив = СкопироватьУзел(УзелРодитель, НалДохСтав);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалДохДив);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 05
	НалБазОпОсоб = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалБазОпОсоб");
	ДанныеЛист05 = мДанныеОтчета.Лист05;
	Для Каждого Стр Из ДанныеЛист05 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Лист05", УзелРодитель.Владелец()) Тогда
			ЭкзНалБазОпОсоб = СкопироватьУзел(УзелРодитель, НалБазОпОсоб);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзНалБазОпОсоб);
		КонецЕсли;
	КонецЦикла;
	
	// заполняем лист 06
	Если НЕ СтраницаПуста(мДанныеОтчета.Лист06, "Лист06", УзелРодитель.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Лист06, ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДохРасНалБазаНПФ"));
	КонецЕсли;
	
	// заполняем лист 07
	Если НЕ СтраницаПуста(мДанныеОтчета.Лист07, "Лист07", УзелРодитель.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Лист07, ПолучитьПодчиненныйЭлемент(УзелРодитель, "ЦелИспИмущ"));
	КонецЕсли;
	
	// заполняем Приложение
	Если НЕ СтраницаПуста(мДанныеОтчета.Приложение, "Приложение", УзелРодитель.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Приложение, ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДохНеУчНБ_РасхУчОКН"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИндексСледующегоПослеАтрибутовУзла(УзелЛист02)
	
	ИндексРезультат = 0;
	Для Каждого Стр Из  УзелЛист02.Строки Цикл
		Если Стр.Тип = "А" ИЛИ Стр.Тип = "A" Тогда
			ИндексРезультат = УзелЛист02.Строки.Индекс(Стр) + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат ИндексРезультат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНулямиНезаполненныеАтрибуты(Узел, Знач Исключения = Неопределено)
	
	Если Исключения = Неопределено Тогда
		Исключения = Новый Структура;
	КонецЕсли;
	
	Если (Узел.Тип = "А" ИЛИ Узел.Тип = "A") И НЕ ЗначениеЗаполнено(Узел.Значение) Тогда
		ЗначениеАтрибута = Неопределено;
		Узел.Значение = ?(Исключения.Свойство(Узел.Код, ЗначениеАтрибута), ЗначениеАтрибута, "0");
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ЗаполнитьНулямиНезаполненныеАтрибуты(Стр, Исключения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПустойУзелРаздела(УзелРодитель, СтруктураПустогоРаздела, ТолькоПервыйУровень = Ложь, ИндексУзла = Неопределено, УзелРаздела = Неопределено)
	
	Если ТолькоПервыйУровень Тогда
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		КонецЕсли;
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			Если (Стр.Тип = "А" ИЛИ Стр.Тип = "A") И УзелРаздела.Строки.Найти(Стр.Код, "Код") = Неопределено Тогда
				
				// ищем первое вхождение сложного элемента и вставляем на его место новый атрибут
				СложныйЭлемент = УзелРаздела.Строки.Найти("С", "Тип");
				Если СложныйЭлемент = Неопределено Тогда
					НовСтр = УзелРаздела.Строки.Добавить();
				Иначе
					НовСтр = УзелРаздела.Строки.Вставить(УзелРаздела.Строки.Индекс(СложныйЭлемент));
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			ЗагрузитьПустойУзелРаздела(УзелРаздела, Стр, ТолькоПервыйУровень);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УзелРаздела;
	
КонецФункции

&НаСервере
Функция СохранитьСтруктураУзла(Знач Узел, КодУзла = Неопределено, СтруктураУзла = Неопределено)
	
	ЭтоПервыйЗаход = (СтруктураУзла = Неопределено);
	
	Если ЭтоПервыйЗаход Тогда
		
		СтруктураУзла = Новый ДеревоЗначений;
		Для Каждого Колонка Из Узел.Колонки Цикл
			СтруктураУзла.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Узел = Узел.Строки.Найти(КодУзла, "Код", Истина);
		Если Узел = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	НовСтр = СтруктураУзла.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, Узел);
	
	Для Каждого Стр Из Узел.Строки Цикл
		СохранитьСтруктураУзла(Стр, , НовСтр);
	КонецЦикла;
	
	Если ЭтоПервыйЗаход Тогда
		Возврат СтруктураУзла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// обрабатываем суммы в разделе 1.1
	УзлыНалПУВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "НалПУВрем", "Раздел1_1"), Истина);
	Для Каждого УзелНалПУВрем Из УзлыНалПУВрем Цикл
		Если ЗначениеЗаполнено(УзелНалПУВрем.Значение) И УзелНалПУВрем.Значение <> "0" Тогда
			УзелНалПУ = УзелНалПУВрем.Родитель.Строки.Найти("НалПУ", "Код");
			УзелНалПУ.Значение = "-" + УзелНалПУВрем.Значение;
		КонецЕсли;
		УзелНалПУВрем.Родитель.Строки.Удалить(УзелНалПУВрем);
	КонецЦикла;
	
	// обрабатываем сумму в приложении 5 к листу 02
	УзлыСумНалПВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "СумНалПВрем", "Лист02_5"), Истина);
	Для Каждого УзелСумНалПВрем Из УзлыСумНалПВрем Цикл
		Если ЗначениеЗаполнено(УзелСумНалПВрем.Значение) И УзелСумНалПВрем.Значение <> "0" Тогда
			УзелСумНалП = УзелСумНалПВрем.Родитель.Строки.Найти("СумНалП", "Код");
			УзелСумНалП.Значение = "-" + УзелСумНалПВрем.Значение;
		КонецЕсли;
		УзелСумНалПВрем.Родитель.Строки.Удалить(УзелСумНалПВрем);
	КонецЦикла;
	
	// Обрабатка суммы в Приложении 6 к листу 02.
	УзлыСумНалПВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "СумНалПВрем", "Лист02_6"), Истина);
	Для Каждого УзелСумНалПВрем Из УзлыСумНалПВрем Цикл
		Если ЗначениеЗаполнено(УзелСумНалПВрем.Значение) И УзелСумНалПВрем.Значение <> "0" Тогда
			УзелСумНалП = УзелСумНалПВрем.Родитель.Строки.Найти("СумНалП", "Код");
			УзелСумНалП.Значение = "-" + УзелСумНалПВрем.Значение;
		КонецЕсли;
		УзелСумНалПВрем.Родитель.Строки.Удалить(УзелСумНалПВрем);
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
    	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");

		Сообщение.Сообщить();

		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли; 
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_3" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		               
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_3" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",	 "МЧБ_2012Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1_1",	 "МЧБ_2012Кв1_Раздел1_1");
	СоответствиеРазделовМакетам.Вставить("Раздел1_2",	 "МЧБ_2012Кв1_Раздел1_2");
	СоответствиеРазделовМакетам.Вставить("Раздел1_3",	 "МЧБ_2012Кв1_Раздел1_3");
	СоответствиеРазделовМакетам.Вставить("Лист02",		 "МЧБ_2012Кв1_Лист02");
	СоответствиеРазделовМакетам.Вставить("Лист02_1",	 "МЧБ_2012Кв1_Лист02_1");
	СоответствиеРазделовМакетам.Вставить("Лист02_2",	 "МЧБ_2012Кв1_Лист02_2");
	СоответствиеРазделовМакетам.Вставить("Лист02_3",	 "МЧБ_2012Кв1_Лист02_3");
	СоответствиеРазделовМакетам.Вставить("Лист02_4",	 "МЧБ_2012Кв1_Лист02_4");
	СоответствиеРазделовМакетам.Вставить("Лист02_5",	 "МЧБ_2012Кв1_Лист02_5");
	СоответствиеРазделовМакетам.Вставить("Лист02_6",	 "МЧБ_2012Кв1_Лист02_6");
	СоответствиеРазделовМакетам.Вставить("Лист02_6а",	 "МЧБ_2012Кв1_Лист02_6а");
	СоответствиеРазделовМакетам.Вставить("Лист03А",		 "МЧБ_2012Кв1_Лист03А");
	СоответствиеРазделовМакетам.Вставить("Лист03Б",		 "МЧБ_2012Кв1_Лист03Б");
	СоответствиеРазделовМакетам.Вставить("Лист03В",	 	 "МЧБ_2012Кв1_Лист03В");
	СоответствиеРазделовМакетам.Вставить("Лист04",		 "МЧБ_2012Кв1_Лист04");
	СоответствиеРазделовМакетам.Вставить("Лист05",		 "МЧБ_2012Кв1_Лист05");
	СоответствиеРазделовМакетам.Вставить("Лист06",		 "МЧБ_2012Кв1_Лист06");
	СоответствиеРазделовМакетам.Вставить("Лист07",		 "МЧБ_2012Кв1_Лист07");
	СоответствиеРазделовМакетам.Вставить("Приложение",	 "МЧБ_2012Кв1_Приложение");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу = 5;
	МакетМЧБ.ПолеСлева = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
		
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		//определение исходного количества строк на листе МЧБ
		Если Парам1.ИмяСтраницы = "Раздел1_3" Тогда
			ИсхКолвоСтрокБлока = 22;
		ИначеЕсли Парам1.ИмяСтраницы = "Лист07" Тогда
			ИсхКолвоСтрокБлока = 9;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение" Тогда
			ИсхКолвоСтрокБлока = 20;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			                  
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						//очищение происходит после этого цикла
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
				КонецЦикла;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);

				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
								
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
			
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН2";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН3";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);

	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП2";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП3";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
				       		
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
						
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									
									////исключение+ 
									// для строки 40 Прил 5 производится округление до 11 знака после запятой
									Если СтрНайти(Область.Имя, "П002050004003") Тогда
										ДлинаДробнойЧасти = СтрДлина(СтрДробнаяЧасть);
										Если ДлинаДробнойЧасти > 11 Тогда
											СтрДробнаяЧасть = Формат(Окр(СтрДробнаяЧасть, -(ДлинаДробнойЧасти - 11)), "ЧГ=0");
										КонецЕсли;
									КонецЕсли;
									////исключение- 
									
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеВыведено
						И  (ПараметрыПечати.ИмяСтраницы = "Раздел1_3"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Лист07"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение") Тогда
						ЗначениеВыведено = Истина;
					КонецЕсли;
										
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
										
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);

					Сообщение.Сообщить();

				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
					
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
								
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
									
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
		
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	НачатьЗамерВремени();
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			     СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("Периодичность", 			     СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ИНН",							 СтруктураДанныхТитульный.ИНН1);
	ПараметрыОтчета.Вставить("КПП", 						 СтруктураДанныхТитульный.КПП1);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки"); // Адрес временного хранилища, где размещена расшифровка результата автозаполнения.
		                                    		
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1_1",         		ТаблицаСтраницыРаздел1_1);
	Контейнер.Вставить("Раздел1_2",         		ТаблицаСтраницыРаздел1_2);
	Контейнер.Вставить("Раздел1_3",         		ТаблицаСтраницыРаздел1_3);
	Контейнер.Вставить("Лист02",            		ТаблицаСтраницыЛист02);
	Контейнер.Вставить("Лист02_1",      			ТаблицаСтраницыЛист02_1);
	Контейнер.Вставить("Лист02_2",      			ТаблицаСтраницыЛист02_2);
	Контейнер.Вставить("Лист02_3",      			ТаблицаСтраницыЛист02_3);
	Контейнер.Вставить("Лист02_4",      			ТаблицаСтраницыЛист02_4);
	Контейнер.Вставить("Лист02_5",      			ТаблицаСтраницыЛист02_5);
	Контейнер.Вставить("Лист02_6",      			ТаблицаСтраницыЛист02_6);
	Контейнер.Вставить("Лист02_6а",      			ТаблицаСтраницыЛист02_6а);
	Контейнер.Вставить("Лист03А",           		ТаблицаСтраницыЛист03А);
	Контейнер.Вставить("Лист03Б", 					ТаблицаСтраницыЛист03Б);
	Контейнер.Вставить("Лист03В",      				ТаблицаСтраницыЛист03В);
	Контейнер.Вставить("Лист04", 					ТаблицаСтраницыЛист04);
	Контейнер.Вставить("Лист05", 					ТаблицаСтраницыЛист05);
	Контейнер.Вставить("Лист06",					СтруктураДанныхЛист06);
	Контейнер.Вставить("Лист07", 					СтруктураДанныхЛист07);
	Контейнер.Вставить("Лист07_ДанныеДопСтрок", 	П0021200010);
	Контейнер.Вставить("Приложение", 		        СтруктураДанныхПриложение);
	Контейнер.Вставить("Приложение_ДанныеДопСтрок",	П0021300010);
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ЭтаФормаИмя = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ЭтаФормаИмя, ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета, Контейнер);
	
	НомерМесяца = Месяц(ЭтаФорма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если НЕ НомерМесяца = 3 И НЕ НомерМесяца = 6 И НЕ НомерМесяца = 9 И НЕ НомерМесяца = 12 Тогда
		
		Для Каждого СтраницаЛиста02_1 Из ТаблицаСтраницыЛист02_1 Цикл
			Если НЕ ЗначениеЗаполнено(СтраницаЛиста02_1.Данные[0].Значение.П002010000100) Тогда
				СтраницаЛиста02_1.Данные[0].Значение.П002010000100 = "1";
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_2 Из ТаблицаСтраницыЛист02_2 Цикл
			Если НЕ ЗначениеЗаполнено(СтраницаЛиста02_2.Данные[0].Значение.П002020000100) Тогда
				СтраницаЛиста02_2.Данные[0].Значение.П002020000100 = "1";
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_3 Из ТаблицаСтраницыЛист02_3 Цикл
			Если НЕ ЗначениеЗаполнено(СтраницаЛиста02_3.Данные[0].Значение.П002030000100) Тогда
				СтраницаЛиста02_3.Данные[0].Значение.П002030000100 = "1";
			КонецЕсли;
		КонецЦикла;
		
		РасчетНаСервере("Лист02_3");
		РасчетНаСервере("Лист02_2");
		РасчетНаСервере("Лист02_1");
		РасчетНаСервере("Лист02", , Истина);
		
		Для Каждого СтраницаЛиста02_1 Из ТаблицаСтраницыЛист02_1 Цикл
			
			Для Каждого Показатель Из СтраницаЛиста02_1.Данные[0].Значение Цикл
				
				Если ЗначениеЗаполнено(Показатель.Значение) Тогда
					Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
						СтраницаЛиста02_1.Данные[0].Значение.Вставить(Показатель.Ключ, 0);
					Иначе
						СтраницаЛиста02_1.Данные[0].Значение.Вставить(Показатель.Ключ, "");
					КонецЕсли;
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_2 Из ТаблицаСтраницыЛист02_2 Цикл
			
			Для Каждого Показатель Из СтраницаЛиста02_2.Данные[0].Значение Цикл
				
				Если ЗначениеЗаполнено(Показатель.Значение) Тогда
					Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
						СтраницаЛиста02_2.Данные[0].Значение.Вставить(Показатель.Ключ, 0);
					Иначе
						СтраницаЛиста02_2.Данные[0].Значение.Вставить(Показатель.Ключ, "");
					КонецЕсли;
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_3 Из ТаблицаСтраницыЛист02_3 Цикл
			
			Для Каждого Показатель Из СтраницаЛиста02_3.Данные[0].Значение Цикл
				
				Если ЗначениеЗаполнено(Показатель.Значение) Тогда
					Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
						СтраницаЛиста02_3.Данные[0].Значение.Вставить(Показатель.Ключ, 0);
					Иначе
						СтраницаЛиста02_3.Данные[0].Значение.Вставить(Показатель.Ключ, "");
					КонецЕсли;
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПараметрыОтчета.АдресВременногоХранилищаРасшифровки;
		
	ИзменитьОКАТОРазделов(ЭтаФорма, СтруктураРеквизитовФормы.ОКАТОДляРазделов);
		
	ЗаполнитьКБКРаздел1(Истина);
	ЗаполнитьКБКРаздел2(Истина);
		
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 				    	СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция НачатьЗамерВремени()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			
			КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетностьПрибыль";
			ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВыполнятьЗамерыПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачала <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетностьПрибыль";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЯЗЫК ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ
//

&НаСервере
Функция НовыйЭлементСтруктурыЯзыкаКС()
	Стр = Новый Структура;
	Стр.Вставить("Тип", "Неопознан");
	Стр.Вставить("Содержание", Неопределено);
	Возврат Стр;
КонецФункции

&НаСервере
Функция ЭтоСимволОператора(Символ)
	Возврат Символ = "(" 
	    Или Символ = ")"
		Или Символ = "+"
		Или Символ = "-"
		Или Символ = "/"
		Или Символ = "*" 
		Или Символ = ">"
		Или Символ = "<"
		Или Символ = "="
		Или Символ = "."
		Или Символ = ","
		Или Символ = "%"
		Или Символ = "["
		Или Символ = "]";
КонецФункции
		
&НаСервере
Функция ЭтоНезначащийСимвол(Символ)
	Возврат Символ = " "
	    Или Символ = Символы.ВК
		Или Символ = Символы.Таб
		Или Символ = Символы.ПС;
КонецФункции

&НаСервере
Функция РазбитьНаЭлементыЯзыкаКС (Стр)
	Если ПустаяСтрока(Стр) Тогда
		ВызватьИсключение "Ошибка парсинга: нет значащих символов в выражении";
	КонецЕсли;
	
	Инд = 1;
	МассивЭлементов = Новый Массив;
	Пока Инд <= СтрДлина(Стр) Цикл
		ТекСимвол = Сред(Стр, Инд, 1);
		
		// Пропускаем незначащие символы
		Если ЭтоНезначащийСимвол(ТекСимвол) Тогда
			инд = инд + 1;
			
		// Выделяем Числа
		ИначеЕсли ТекСимвол >= "0" И ТекСимвол <= "9" Тогда
			Содержание = "";
			
			Пока НЕ ЭтоСимволОператора(ТекСимвол) И Не ЭтоНезначащийСимвол(ТекСимвол) И ТекСимвол <> "" Цикл
				Если ТекСимвол < "0" ИЛИ ТекСимвол > "9" Тогда
					ВызватьИсключение "Ошибка парсинга: неверные символы в числе";
				КонецЕсли;
				Содержание = Содержание + ТекСимвол;
				Инд = Инд + 1;
				ТекСимвол = Сред(Стр, Инд, 1);
			КонецЦикла;
			
		    Элемент = НовыйЭлементСтруктурыЯзыкаКС();
			Элемент.Тип = "СимволыЦифры";
			Элемент.Содержание = Содержание;
			МассивЭлементов.Добавить(Элемент);
			
		// Выделяем Строки
		ИначеЕсли ТекСимвол = """" Или ТекСимвол = "'" Тогда
		    ОткрывающийСимвол = ТекСимвол;
			Содержание = "";
			
			Пока Истина Цикл
				Инд = Инд + 1;
				ТекСимвол = Сред(Стр, Инд, 1);
				Если ТекСимвол = "" Тогда
					ВызватьИсключение "Ошибка парсинга: неоконченная строка";
				ИначеЕсли ТекСимвол <> ОткрывающийСимвол Тогда
					Содержание = Содержание + ТекСимвол;
				Иначе
					Инд = Инд + 1;
					Если Инд  < СтрДлина(Стр) И Сред(Стр, Инд, 1) = ОткрывающийСимвол Тогда
						Содержание = Содержание + ОткрывающийСимвол;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		    Элемент = НовыйЭлементСтруктурыЯзыкаКС();
			Элемент.Тип = "Строка";
			Элемент.Содержание = Содержание;
			МассивЭлементов.Добавить(Элемент);
			
		// Выделяем символы операторов
		ИначеЕсли ЭтоСимволОператора(ТекСимвол) Тогда
			
			//Проверка на операторы сравнения из двух символов
			Если (ТекСимвол = ">" Или ТекСимвол = "<") И Инд < СтрДлина(Стр) И Сред(Стр, Инд + 1, 1) = "=" Тогда
				Содержание = ТекСимвол + "=";
				Инд = Инд + 1;
			ИначеЕсли ТекСимвол = "<" И Инд < СтрДлина(Стр) И Сред(Стр, Инд + 1, 1) = ">" Тогда
				Содержание = ТекСимвол + ">";
				Инд = Инд + 1;
			Иначе
				Содержание = ТекСимвол;
			КонецЕсли;
			
		    Элемент = НовыйЭлементСтруктурыЯзыкаКС();
			Элемент.Тип = "СимволОператора";
			Элемент.Содержание = Содержание;
			МассивЭлементов.Добавить(Элемент);
			Инд = Инд + 1;
			
		// Считаем, что это идентификатор
		Иначе
		    Содержание = "";
			
			Пока НЕ ЭтоСимволОператора(ТекСимвол) И Не ЭтоНезначащийСимвол(ТекСимвол) И ТекСимвол <> "" Цикл
				Содержание = Содержание + ТекСимвол;
				Инд = Инд + 1;
				ТекСимвол = Сред(Стр, Инд, 1);
			КонецЦикла;
			
		    Элемент = НовыйЭлементСтруктурыЯзыкаКС();
			Элемент.Тип = "Идентификатор";
			Элемент.Содержание = Содержание;
			МассивЭлементов.Добавить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЭлементов;
КонецФункции

&НаСервере
Процедура ПометитьОператоры (МассивЭлементов)
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если Элемент.Тип = "Идентификатор" 
			И (ВРег(Элемент.Содержание) = "И" ИЛИ ВРег(Элемент.Содержание) = "ИЛИ" 
			ИЛИ ВРег(Элемент.Содержание) = "НЕ") Тогда
			Элемент.Тип = "СимволОператора";
			Элемент.Содержание = ВРег(Элемент.Содержание);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПометитьЧисла (МассивЭлементов)
	Инд = 0;
	Пока Инд < МассивЭлементов.Количество() Цикл
		Если МассивЭлементов[Инд].Тип = "СимволыЦифры" Тогда
			ЭлементЧисло = НовыйЭлементСтруктурыЯзыкаКС();
			ЭлементЧисло.Тип = "Число";
			Если (Инд + 2) < МассивЭлементов.Количество() 
				И МассивЭлементов[Инд + 1].Тип = "СимволОператора" 
				И МассивЭлементов[Инд + 1].Содержание = "." Тогда
				Если МассивЭлементов[Инд + 2].Тип = "СимволыЦифры" Тогда
					ЭлементЧисло.Содержание = Число(МассивЭлементов[Инд].Содержание + МассивЭлементов[Инд + 1].Содержание + МассивЭлементов[Инд + 2].Содержание);
					МассивЭлементов.Удалить(Инд);
					МассивЭлементов.Удалить(Инд);
				Иначе
					ВызватьИсключение "Ошибка парсинга: Неправильное применение оператора .";
				КонецЕсли;
			Иначе
				ЭлементЧисло.Содержание = Число(МассивЭлементов[Инд].Содержание);
			КонецЕсли;
			МассивЭлементов[Инд] = ЭлементЧисло;			
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбъединитьЭлементыДоЗакрывающейСкобки (МассивЭлементов, ИндОткрывающейСкобки)
	Инд = ИндОткрывающейСкобки + 1;
	ОткрывающаяСкобка = МассивЭлементов[ИндОткрывающейСкобки].Содержание;
	Если ОткрывающаяСкобка="(" Тогда
		ЗакрывающаяСкобка = ")";
		Тип = "Скобки";
	Иначе
		ЗакрывающаяСкобка = "]";
		Тип = "КвадратныеСкобки";
	КонецЕсли;
	
	Содержание = Новый Массив;
	
	Пока Истина Цикл
		Если Инд >= МассивЭлементов.Количество() Тогда
			ВызватьИсключение "Ошибка парсинга: не хватает закрывающих скобок";
		КонецЕсли;
		
		Если МассивЭлементов[Инд].Тип = "СимволОператора" И МассивЭлементов[Инд].Содержание = ЗакрывающаяСкобка Тогда
			ЭлементСкобки = НовыйЭлементСтруктурыЯзыкаКС();
			ЭлементСкобки.Тип = Тип;
			ЭлементСкобки.Содержание = Содержание;
			МассивЭлементов.Удалить(Инд);
			МассивЭлементов[ИндОткрывающейСкобки] = ЭлементСкобки;
			Возврат;
		ИначеЕсли МассивЭлементов[Инд].Тип = "СимволОператора" 
			И (МассивЭлементов[Инд].Содержание = "(" ИЛИ МассивЭлементов[Инд].Содержание = "[") Тогда
			ОбъединитьЭлементыДоЗакрывающейСкобки(МассивЭлементов, Инд);
		Иначе
			Содержание.Добавить(МассивЭлементов[Инд]);
			МассивЭлементов.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбъединитьЭлементыВСкобкахВОдинЭлемент (МассивЭлементов)
	Инд = 0;
	Пока Инд < МассивЭлементов.Количество() Цикл
		Если МассивЭлементов[Инд].Тип = "СимволОператора" 
			И (МассивЭлементов[Инд].Содержание = "(" ИЛИ МассивЭлементов[Инд].Содержание = "[") Тогда
			ОбъединитьЭлементыДоЗакрывающейСкобки(МассивЭлементов, Инд);
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыделитьВызовыФункций (МассивЭлементов)
	Инд = 0;
	Пока Инд < МассивЭлементов.Количество() Цикл
		
		Если МассивЭлементов[Инд].Тип = "Идентификатор" 
			И (Инд < МассивЭлементов.Количество() - 1)
			И МассивЭлементов[Инд + 1].Тип = "Скобки" Тогда
			ЭлементФункция = НовыйЭлементСтруктурыЯзыкаКС();
			ЭлементФункция.Тип = "Функция";
			ЭлементФункция.Вставить("Имя", МассивЭлементов[Инд].Содержание);
			ЭлементФункция.Содержание = Новый Массив;
			
			//Разберем параметры
			СкобкиПараметры = МассивЭлементов[Инд + 1];
			Если СкобкиПараметры.Содержание.Количество() <> 0 Тогда
				ЭлементПараметр = НовыйЭлементСтруктурыЯзыкаКС();
				ЭлементПараметр.Тип = "Параметр";
				ЭлементПараметр.Содержание = Новый Массив;
				
				Для Каждого Элемент Из СкобкиПараметры.Содержание Цикл
					Если Элемент.Тип = "СимволОператора" И Элемент.Содержание = "," Тогда
						ЭлементФункция.Содержание.Добавить(ЭлементПараметр);
						ВыделитьВызовыФункций(ЭлементПараметр.Содержание);
						ЭлементПараметр = НовыйЭлементСтруктурыЯзыкаКС();
						ЭлементПараметр.Тип = "Параметр";
						ЭлементПараметр.Содержание = Новый Массив;
					Иначе
						ЭлементПараметр.Содержание.Добавить(Элемент);
						ВыделитьВызовыФункций(ЭлементПараметр.Содержание);
					КонецЕсли;
				КонецЦикла;
				
				ЭлементФункция.Содержание.Добавить(ЭлементПараметр);
			КонецЕсли;
			
			МассивЭлементов.Удалить(Инд);
			МассивЭлементов[Инд] = ЭлементФункция;
			
		ИначеЕсли МассивЭлементов[Инд].Тип = "Идентификатор"
			И (Инд < МассивЭлементов.Количество() - 1) 
			И МассивЭлементов[Инд + 1].Тип = "КвадратныеСкобки" Тогда
			ЭлементЯчейкаМассива = НовыйЭлементСтруктурыЯзыкаКС();
			ЭлементЯчейкаМассива.Тип = "ЯчейкаМассива";
			ЭлементЯчейкаМассива.Вставить("Имя", МассивЭлементов[Инд].Содержание);
			ЭлементЯчейкаМассива.Содержание = Новый Массив;
			
			//Добавляем размерности массива
			Пока (Инд < МассивЭлементов.Количество() - 1) И МассивЭлементов[Инд + 1].Тип = "КвадратныеСкобки" Цикл
				ЭлементПараметр = МассивЭлементов[Инд + 1];
				ЭлементПараметр.Тип = "Параметр";
				ВыделитьВызовыФункций(ЭлементПараметр.Содержание);
				ЭлементЯчейкаМассива.Содержание.Добавить(ЭлементПараметр);
				МассивЭлементов.Удалить(Инд + 1);
			КонецЦикла;
			
			МассивЭлементов[Инд] = ЭлементЯчейкаМассива;
					
		ИначеЕсли МассивЭлементов[Инд].Тип = "Скобки" 
			ИЛИ МассивЭлементов[Инд].Тип = "Параметр" 
			ИЛИ МассивЭлементов[Инд].Тип = "КвадратныеСкобки" Тогда
			
			ВыделитьВызовыФункций(МассивЭлементов[Инд].Содержание);
		КонецЕсли;			
					
		Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыделитьУнарныеОператоры (МассивЭлементов)
	Инд = 0;
	Пока Инд < МассивЭлементов.Количество() Цикл
		
		Если МассивЭлементов[Инд].Тип = "СимволОператора"
			И (МассивЭлементов[Инд].Содержание = "-" ИЛИ МассивЭлементов[Инд].Содержание = "+" ИЛИ МассивЭлементов[Инд].Содержание = "НЕ")
			И (Инд = 0 ИЛИ МассивЭлементов[Инд - 1].Тип = "СимволОператора") Тогда
			Если Инд < МассивЭлементов.Количество() - 1
				И (МассивЭлементов[Инд + 1].Тип = "Идентификатор" 
			   ИЛИ МассивЭлементов[Инд + 1].Тип = "Скобки"
			   ИЛИ МассивЭлементов[Инд + 1].Тип = "Функция"
			   ИЛИ МассивЭлементов[Инд + 1].Тип = "Число") Тогда
				ЭлементОператор = НовыйЭлементСтруктурыЯзыкаКС();	 
				ЭлементОператор.Вставить("Имя", МассивЭлементов[Инд].Содержание);
				ЭлементОператор.Содержание = Новый Массив;
				ЭлементОператор.Содержание.Добавить(МассивЭлементов[Инд + 1]);
				ЭлементОператор.Тип = "УнарныйОператор";
				МассивЭлементов.Удалить(Инд + 1);
				МассивЭлементов[Инд] = ЭлементОператор;
			Иначе
				ВызватьИсключение "Ошибка парсинга: Не хватает параметров для оператора";
			КонецЕсли;
		КонецЕсли;
		
		Если МассивЭлементов[Инд].Тип = "Скобки" 
			Или МассивЭлементов[Инд].Тип = "УнарныйОператор" 
			Или МассивЭлементов[Инд].Тип = "Параметр" Тогда
			ВыделитьУнарныеОператоры(МассивЭлементов[Инд].Содержание);
		ИначеЕсли МассивЭлементов[Инд].Тип = "Функция" Или МассивЭлементов[Инд].Тип = "ЯчейкаМассива" Тогда
			Для Каждого ПараметрФункции Из МассивЭлементов[Инд].Содержание Цикл
				ВыделитьУнарныеОператоры(ПараметрФункции.Содержание)
			КонецЦикла;
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ОдинИзОператоров (МассивОператоров, ИскомыйОператор)
	Для Каждого Оператор Из МассивОператоров Цикл
		Если Оператор = ИскомыйОператор Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ВыделитьГруппуБинарныхОператоров (МассивЭлементов, МассивОператоров)
	Инд = 0;
	Пока Инд < МассивЭлементов.Количество() Цикл
		Если МассивЭлементов[Инд].Тип = "СимволОператора"
			И ОдинИзОператоров(МассивОператоров, МассивЭлементов[Инд].Содержание) Тогда
			Если Инд >= 1 И Инд <= МассивЭлементов.Количество() - 1 Тогда
				ЭлементОператор = НовыйЭлементСтруктурыЯзыкаКС();	 
				ЭлементОператор.Вставить("Имя", МассивЭлементов[Инд].Содержание);
				ЭлементОператор.Содержание = Новый Массив;
				ЭлементОператор.Содержание.Добавить(МассивЭлементов[Инд - 1]);
				ЭлементОператор.Содержание.Добавить(МассивЭлементов[Инд + 1]);
				ЭлементОператор.Тип = "БинарныйОператор";
				МассивЭлементов.Удалить(Инд);
				МассивЭлементов.Удалить(Инд);
				Инд = Инд - 1;
				МассивЭлементов[Инд] = ЭлементОператор;
			Иначе
				ВызватьИсключение "Ошибка парсинга: Не хватает параметров для оператора " + МассивЭлементов[Инд].Содержание;
			КонецЕсли;
		КонецЕсли;
	
		Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыделитьБинарныеОператорыНаУровне (МассивЭлементов)
	Операторы = Новый Массив;
	Операторы.Добавить("*");
	Операторы.Добавить("/");
	Операторы.Добавить("%");
	ВыделитьГруппуБинарныхОператоров(МассивЭлементов, Операторы);
	
	Операторы = Новый Массив;
	Операторы.Добавить("+");
	Операторы.Добавить("-");
	ВыделитьГруппуБинарныхОператоров(МассивЭлементов, Операторы);
	
	Операторы = Новый Массив;
	Операторы.Добавить(">");
	Операторы.Добавить(">=");
	Операторы.Добавить("<");
	Операторы.Добавить("<=");
	ВыделитьГруппуБинарныхОператоров(МассивЭлементов, Операторы);
	
	Операторы = Новый Массив;
	Операторы.Добавить("=");
	Операторы.Добавить("<>");
	ВыделитьГруппуБинарныхОператоров(МассивЭлементов, Операторы);
	
	Операторы = Новый Массив;
	Операторы.Добавить("И");
	ВыделитьГруппуБинарныхОператоров(МассивЭлементов, Операторы);
	
	Операторы = Новый Массив;
	Операторы.Добавить("ИЛИ");
	ВыделитьГруппуБинарныхОператоров(МассивЭлементов, Операторы);
КонецПроцедуры

&НаСервере
Процедура ВыделитьВсеБинарныеОператоры (МассивЭлементов)
	ВыделитьБинарныеОператорыНаУровне(МассивЭлементов);
	
	Инд = 0;
	Пока Инд < МассивЭлементов.Количество() Цикл
		Если МассивЭлементов[Инд].Тип = "Скобки"
			Или МассивЭлементов[Инд].Тип = "УнарныйОператор"
			Или МассивЭлементов[Инд].Тип = "БинарныйОператор"
			Или МассивЭлементов[Инд].Тип = "Параметр" Тогда
			ВыделитьВсеБинарныеОператоры(МассивЭлементов[Инд].Содержание);
		ИначеЕсли МассивЭлементов[Инд].Тип = "Функция" Или МассивЭлементов[Инд].Тип = "ЯчейкаМассива" Тогда
			Для Каждого ПараметрФункции Из МассивЭлементов[Инд].Содержание Цикл
				ВыделитьВсеБинарныеОператоры(ПараметрФункции.Содержание)
			КонецЦикла;
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьВсеЭлементыОпознаны(МассивЭлементов)
	Если МассивЭлементов.Количество() <> 1 Тогда
		ВызватьИсключение "Ошибка парсинга: Не все элементы удалось обработать";
	Иначе
		ТекЭлемент = МассивЭлементов[0];
		
		Если ТекЭлемент.Тип = "Число" ИЛИ ТекЭлемент.Тип = "Строка" ИЛИ ТекЭлемент.Тип = "Идентификатор" Тогда
			//Ничего не делаем, эти типы не содержат вложенных элементов
		ИначеЕсли ТекЭлемент.Тип = "Скобки" Или ТекЭлемент.Тип = "УнарныйОператор" Или ТекЭлемент.Тип = "Параметр" Тогда
			ПроверитьВсеЭлементыОпознаны(ТекЭлемент.Содержание);
		ИначеЕсли ТекЭлемент.Тип = "БинарныйОператор" Тогда
			НовыйМассивЭлементов = Новый Массив;
			НовыйМассивЭлементов.Добавить(ТекЭлемент.Содержание[0]);
			ПроверитьВсеЭлементыОпознаны(НовыйМассивЭлементов);
			НовыйМассивЭлементов = Новый Массив;
			НовыйМассивЭлементов.Добавить(ТекЭлемент.Содержание[1]);
			ПроверитьВсеЭлементыОпознаны(НовыйМассивЭлементов);
		ИначеЕсли ТекЭлемент.Тип = "Функция" Или ТекЭлемент.Тип = "ЯчейкаМассива" Тогда
			Для Каждого ПараметрФункции Из ТекЭлемент.Содержание Цикл 
				ПроверитьВсеЭлементыОпознаны(ПараметрФункции.Содержание);
			КонецЦикла;
		Иначе
			ВызватьИсключение "Ошибка парсинга: Не все элементы удалось обработать";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПарсерЯзыкаКонтрольныхСоотношений(Стр)
	МассивЭлементов = РазбитьНаЭлементыЯзыкаКС(Стр);
	
	ПометитьЧисла (МассивЭлементов);
	ПометитьОператоры (МассивЭлементов);
	ОбъединитьЭлементыВСкобкахВОдинЭлемент (МассивЭлементов);
	ВыделитьВызовыФункций (МассивЭлементов);
	ВыделитьУнарныеОператоры (МассивЭлементов);
	ВыделитьВсеБинарныеОператоры (МассивЭлементов);
	ПроверитьВсеЭлементыОпознаны (МассивЭлементов);
	Возврат МассивЭлементов[0];
КонецФункции

&НаСервере
Функция НоваяСтруктураРезультатаЯзыкаКС()
	Результат = Новый Структура;
	Результат.Вставить("Значение", Неопределено);
	Результат.Вставить("СписокПоказателей", Новый Массив);
	Результат.Вставить("ПутьВычисления", "");
	Возврат Результат;
КонецФункции

&НаСервере
Функция НовыйЭлементСпискаПоказателей()
	Результат = Новый Структура;
	Результат.Вставить("ИмяПоказателя", Неопределено);
	Результат.Вставить("НомерСтраницы", Неопределено);
	Результат.Вставить("НомерПодСтроки", 0);
	Результат.Вставить("ИмяРаздела", Неопределено);
	Результат.Вставить("Значение", Неопределено);
	Возврат Результат;
КонецФункции

&НаСервере
Функция ОбъединитьСпискиПоказателей(Список1, Список2)
	Для Каждого ЭлементСписка2 Из Список2 Цикл
		Добавлять = Истина;
		Для Каждого ЭлементСписка1 Из Список1 Цикл
			Если ЭлементСписка1.ИмяПоказателя = ЭлементСписка2.ИмяПоказателя
				И ЭлементСписка1.НомерСтраницы = ЭлементСписка2.НомерСтраницы
				И ЭлементСписка1.Значение = ЭлементСписка2.Значение
				И ЭлементСписка1.ИмяРаздела = ЭлементСписка2.ИмяРаздела Тогда
				Добавлять = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если Добавлять Тогда
			Список1.Добавить(ЭлементСписка2);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Список1;
КонецФункции

&НаСервере
Функция ВычислитьФункциюЧисло(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	Результат.Значение = Число(Параметр0.Значение);
	Результат.СписокПоказателей = Параметр0.СписокПоказателей;
	Результат.ПутьВычисления = Параметр0.ПутьВычисления;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюСред(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	Параметр1 = ВычислитьРазобранноеВыражение(Контекст, Параметры[1]);
	Параметр2 = ВычислитьРазобранноеВыражение(Контекст, Параметры[2]);
	Результат.Значение = Сред(Параметр0.Значение, Параметр1.Значение, Параметр2.Значение);
	Результат.СписокПоказателей = Параметр0.СписокПоказателей;
	Результат.ПутьВычисления = Параметр0.ПутьВычисления;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюСуществует(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	Результат.ПутьВычисления = "";
	
	//Если попытаться получить значение переменной, которая не существует, то будет вызвано исключение
	Попытка
		Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
		Результат.Значение = Истина;
	Исключение
		Результат.Значение = Ложь;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюОкруглить(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	Результат.Значение = Окр(Параметр0.Значение);
	Результат.СписокПоказателей = Параметр0.СписокПоказателей;
	Результат.ПутьВычисления = "(" + Параметр0.ПутьВычисления + ")";
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция УчитыватьПоказатель(Показатель, НеУчитывать)
	Если Лев(Показатель,3) = "ИНН" ИЛИ Лев(Показатель,3)="КПП" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Элемент Из НеУчитывать Цикл
		Если Элемент = Показатель Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ВычислитьФункциюСтраницаЗаполнена(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	
	НеУчитыватьПоказатели = Новый Массив;
	Если Параметры.Количество()>=1 Тогда
		Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
		МногострочнаяСтрока = СтрЗаменить(Параметр0.Значение, ",",Символы.ПС);
		Для кСчЦ = 1 по СтрЧислоСтрок(МногострочнаяСтрока) Цикл
   			НеУчитыватьПоказатели.Добавить(СтрПолучитьСтроку(МногострочнаяСтрока,кСчЦ));
		КонецЦикла;
	КонецЕсли;
	
	ЕстьЗаполненныеСтроки = Ложь;
	Для Каждого Данные Из Контекст.Переменные Цикл
		Попытка
			Если УчитыватьПоказатель(Данные.Ключ, НеУчитыватьПоказатели)
				 И ((ТипЗнч(Данные.Значение) = Тип("Булево") И Данные.Значение) ИЛИ
				    (ТипЗнч(Данные.Значение) = Тип("Число") И Данные.Значение <>0 ) ИЛИ
					(ТипЗнч(Данные.Значение) = Тип("Строка") И НЕ ПустаяСтрока(Данные.Значение) И Данные.Значение <> "0")) Тогда
				ЕстьЗаполненныеСтроки = Истина;	 
				Прервать;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Результат.Значение = ЕстьЗаполненныеСтроки;
	Результат.ПутьВычисления = "";
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюСуммироватьЕсли(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	
	КоличествоСлагаемых = 0;
	Результат.Значение = 0;
	Для Каждого Лист Из Параметр0.Значение Цикл
		Параметр1 = ВычислитьРазобранноеВыражение(Лист, Параметры[1]);
		
		Если Параметр1.Значение Тогда
			Лист.ЛокальныеПеременные = Контекст.ЛокальныеПеременные;
			Параметр2 = ВычислитьРазобранноеВыражение(Лист, Параметры[2]);
			Результат.Значение = Результат.Значение + Параметр2.Значение;
			Результат.ПутьВычисления = ?(КоличествоСлагаемых>0 , Результат.ПутьВычисления + "+", "") + Параметр2.ПутьВычисления;
			ОбъединитьСпискиПоказателей(Результат.СписокПоказателей, Параметр2.СписокПоказателей);
			КоличествоСлагаемых = КоличествоСлагаемых + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоСлагаемых = 0 Тогда
		Результат.ПутьВычисления = "0";
	ИначеЕсли КоличествоСлагаемых > 1 Тогда
		Результат.ПутьВычисления = "(" + Результат.ПутьВычисления + ")";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюВыбратьСтраницу(Контекст, Параметры)
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	Параметр1 = ВычислитьРазобранноеВыражение(Контекст, Параметры[1]);
	
	Лист = Параметр0.Значение[Параметр1.Значение];
	Лист.ЛокальныеПеременные = Контекст.ЛокальныеПеременные;
	Параметр2 = ВычислитьРазобранноеВыражение(Лист, Параметры[2]);
	
	Возврат Параметр2;
КонецФункции

&НаСервере
Функция ВычислитьФункциюСчитатьСтраницыЕсли(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	
	Результат.Значение = 0;
	Для Каждого Лист Из Параметр0.Значение Цикл
		Лист.ЛокальныеПеременные = Контекст.ЛокальныеПеременные;
		Параметр1 = ВычислитьРазобранноеВыражение(Лист, Параметры[1]);
		
		Если Параметр1.Значение Тогда
			Результат.Значение = Результат.Значение + 1;	
			ОбъединитьСпискиПоказателей(Результат.СписокПоказателей, Параметр1.СписокПоказателей);
		КонецЕсли;
	КонецЦикла;
	Результат.ПутьВычисления = Строка(Результат.Значение);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюЕсли(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	Если Параметр0.Значение Тогда
		Параметр1 = ВычислитьРазобранноеВыражение(Контекст, Параметры[1]);
		Результат.Значение = Параметр1.Значение;
		Результат.СписокПоказателей = ОбъединитьСпискиПоказателей(Параметр0.СписокПоказателей, Параметр1.СписокПоказателей);
		Если Параметры.Количество()>=4 Тогда
			Параметр3 = ВычислитьРазобранноеВыражение(Контекст, Параметры[3]);
			Результат.ПутьВычисления = СтрЗаменить(Параметр3.Значение, "%r", Параметр1.Значение);
		Иначе
			Результат.ПутьВычисления = "(" + Параметр1.ПутьВычисления + ")";
		КонецЕсли
	Иначе
		Параметр2 = ВычислитьРазобранноеВыражение(Контекст, Параметры[2]);
		Результат.Значение = Параметр2.Значение;
		Результат.СписокПоказателей = ОбъединитьСпискиПоказателей(Параметр0.СписокПоказателей, Параметр2.СписокПоказателей);
		Если Параметры.Количество()>=5 Тогда
			Параметр4 = ВычислитьРазобранноеВыражение(Контекст, Параметры[4]);
			Результат.ПутьВычисления = СтрЗаменить(Параметр4.Значение, "%r", Параметр2.Значение);
		Иначе
			Результат.ПутьВычисления = "(" + Параметр2.ПутьВычисления + ")";
		КонецЕсли
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюСоздатьПеременную(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	Параметр1 = ВычислитьРазобранноеВыражение(Контекст, Параметры[1]);

	Контекст.ЛокальныеПеременные.Вставить(Параметр0.Значение, Параметр1);
	Параметр2 = ВычислитьРазобранноеВыражение(Контекст, Параметры[2]);
	Контекст.ЛокальныеПеременные.Удалить(Параметр0.Значение);
	
	Результат.Значение = Параметр2.Значение;
	Результат.СписокПоказателей = ОбъединитьСпискиПоказателей(Параметр1.СписокПоказателей, Параметр2.СписокПоказателей);
	Результат.ПутьВычисления = "(" + Параметр2.ПутьВычисления + ")";
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюСобратьПоказатель(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	
	Результат.Значение = "";
	Инд = 1;
	Пока Контекст.Переменные.Свойство(Параметр0.Значение + "_" + Инд) Цикл
	    Результат.Значение = Результат.Значение + Контекст.Переменные[Параметр0.Значение + "_" + Инд];
		Инд = Инд + 1;
	КонецЦикла;
	Результат.ПутьВычисления = Результат.Значение;	
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюСуммаМногострочногоПоказателя(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	Результат.Списокпоказателей = Новый Массив;
	
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	
	Результат.Значение = 0;
	Инд = 1;
	Пока Контекст.Переменные.Свойство(Параметр0.Значение + "_" + Инд) Цикл
		ЗначениеСтроки = Контекст.Переменные[Параметр0.Значение + "_" + Инд];
	    Результат.Значение = Результат.Значение + ЗначениеСтроки;
		
		Если ЗначениеСтроки <> 0 Тогда
			Показатель = НовыйЭлементСпискаПоказателей();
			Показатель.ИмяПоказателя = Параметр0.Значение ;
			Показатель.НомерПодСтроки = Инд;
			Показатель.Значение = ЗначениеСтроки; 
			Попытка
				Показатель.ИмяРаздела = Контекст.ИмяРаздела;
				Показатель.НомерСтраницы = Контекст.НомерСтраницы;
			Исключение
			КонецПопытки;
			Результат.Списокпоказателей.Добавить(Показатель);
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	Результат.ПутьВычисления = Результат.Значение;	
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьФункциюНеДобавлятьВРасшифровку(Контекст, Параметры)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, Параметры[0]);
	Результат.Значение = Параметр0.Значение;
	Результат.ПутьВычисления = Параметр0.ПутьВычисления;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВыполнитьФункцию(Контекст, ЭлементФункция)
	Если ЭлементФункция.Имя = "Число" Тогда
		Возврат ВычислитьФункциюЧисло(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "СуммироватьЕсли" Тогда
		Возврат ВычислитьФункциюСуммироватьЕсли(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "Округлить" Тогда
		Возврат ВычислитьФункциюОкруглить(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "ВыбратьСтраницу" Тогда
		Возврат ВычислитьФункциюВыбратьСтраницу(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "СчитатьСтраницыЕсли" Тогда
		Возврат ВычислитьФункциюСчитатьСтраницыЕсли(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "Если" Тогда
		Возврат ВычислитьФункциюЕсли(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "СтраницаЗаполнена" Тогда
		Возврат ВычислитьФункциюСтраницаЗаполнена(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "СоздатьПеременную" Тогда
		Возврат ВычислитьФункциюСоздатьПеременную(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "СобратьПоказатель" Тогда
		Возврат ВычислитьФункциюСобратьПоказатель(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "СуммаМногострочногоПоказателя" Тогда
		Возврат ВычислитьФункциюСуммаМногострочногоПоказателя(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "Существует" Тогда
		Возврат ВычислитьФункциюСуществует(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "Сред" Тогда
		Возврат ВычислитьФункциюСред(Контекст, ЭлементФункция.Содержание);
	ИначеЕсли ЭлементФункция.Имя = "НеДобавлятьВРасшифровку" Тогда
		Возврат ВычислитьФункциюНеДобавлятьВРасшифровку(Контекст, ЭлементФункция.Содержание);
	Иначе
		ВызватьИсключение "Неизвестная функция: " + ЭлементФункция.Имя;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВыполнитьУнарныйОператор (Контекст, ЭлементУнарныйОператор)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, ЭлементУнарныйОператор.Содержание[0]); 
	Результат.СписокПоказателей = Параметр0.СписокПоказателей;
	
	Если ЭлементУнарныйОператор.Имя = "-" Тогда
		Результат.Значение = -Параметр0.Значение;
		Результат.ПутьВычисления = "-" + Параметр0.ПутьВычисления;
	ИначеЕсли ЭлементУнарныйОператор.Имя = "+" Тогда
		Результат.Значение = Параметр0.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления;
	ИначеЕсли ЭлементУнарныйОператор.Имя = "НЕ" Тогда
		Результат.Значение = Не Параметр0.Значение;
		Результат.ПутьВычисления = "НЕ " + Параметр0.ПутьВычисления;
	Иначе
		ВызватьИсключение "Неизвестный унарный оператор: " + ЭлементУнарныйОператор.Имя;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВыполнитьБинарныйОператор (Контекст, ЭлементБинарныйОператор)
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	Параметр0 = ВычислитьРазобранноеВыражение(Контекст, ЭлементБинарныйОператор.Содержание[0]); 
	Параметр1 = ВычислитьРазобранноеВыражение(Контекст, ЭлементБинарныйОператор.Содержание[1]);
	Результат.СписокПоказателей = ОбъединитьСпискиПоказателей(Параметр0.СписокПоказателей, Параметр1.СписокПоказателей);
	
	Если ЭлементБинарныйОператор.Имя = "=" Тогда
		Результат.Значение = Параметр0.Значение = Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + "=" + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "+" Тогда
		Результат.Значение = Параметр0.Значение + Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + "+" + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "И" Тогда
		Результат.Значение = Параметр0.Значение И Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + " И " + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = ">" Тогда
		Результат.Значение = Параметр0.Значение > Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + ">" + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "ИЛИ" Тогда
		Результат.Значение = Параметр0.Значение ИЛИ Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + " ИЛИ " + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "*" Тогда
		Результат.Значение = Параметр0.Значение * Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + "x" + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "/" Тогда
		Результат.Значение = Параметр0.Значение / Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + ":" + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "%" Тогда
		Результат.Значение = Параметр0.Значение % Параметр1.Значение;
		Результат.ПутьВычисления = "остаток от деления " + Параметр0.ПутьВычисления + " на " + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "-" Тогда
		Результат.Значение = Параметр0.Значение - Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + "-" + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = ">=" Тогда
		Результат.Значение = Параметр0.Значение >= Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + ">=" + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "<" Тогда
		Результат.Значение = Параметр0.Значение < Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + "<" + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "<=" Тогда
		Результат.Значение = Параметр0.Значение <= Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + "<=" + Параметр1.ПутьВычисления;
	ИначеЕсли ЭлементБинарныйОператор.Имя = "<>" Тогда
		Результат.Значение = Параметр0.Значение <> Параметр1.Значение;
		Результат.ПутьВычисления = Параметр0.ПутьВычисления + "<>" + Параметр1.ПутьВычисления;
	Иначе
		ВызватьИсключение "Неизвестный бинарный оператор: " + ЭлементБинарныйОператор.Имя;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ЗначениеИдентификатора(Контекст, ЭлементИдентификатор)
	Если Лев(ЭлементИдентификатор.Содержание,1)="$" Тогда
		Результат = Контекст.ЛокальныеПеременные[Прав(ЭлементИдентификатор.Содержание,СтрДлина(ЭлементИдентификатор.Содержание)-1)];
	Иначе
		Результат = НоваяСтруктураРезультатаЯзыкаКС();
		Результат.Значение = Контекст.Переменные[ЭлементИдентификатор.Содержание];
		Результат.Списокпоказателей = Новый Массив;
		Результат.ПутьВычисления = Строка(Результат.Значение);
	
		Показатель = НовыйЭлементСпискаПоказателей();
		Показатель.ИмяПоказателя = ЭлементИдентификатор.Содержание;
		Показатель.Значение = Результат.Значение; 
		Попытка
			Показатель.ИмяРаздела = Контекст.ИмяРаздела;
			Показатель.НомерСтраницы = Контекст.НомерСтраницы;
		Исключение
		КонецПопытки;
		Результат.Списокпоказателей.Добавить(Показатель);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ЗначениеЯчейкиМассива(Контекст, ЭлементЯчейкаМассива)
	ИтоговоеИмя = ЭлементЯчейкаМассива.Имя;
	
	НомераЯчеек = "";
	Для Каждого Параметр Из ЭлементЯчейкаМассива.Содержание Цикл
		НомераЯчеек = НомераЯчеек + "_" + ВычислитьРазобранноеВыражение(Контекст, Параметр.Содержание[0]).Значение;
	КонецЦикла;
	ИтоговоеИмя = ИтоговоеИмя + НомераЯчеек;
	
	Результат = НоваяСтруктураРезультатаЯзыкаКС();
	Результат.Значение = Контекст.Переменные[ИтоговоеИмя];
	Результат.ПутьВычисления = Строка(Результат.Значение);
	
	Результат.Списокпоказателей = Новый Массив;
	Показатель = НовыйЭлементСпискаПоказателей();
	Показатель.ИмяПоказателя = ЭлементЯчейкаМассива.Имя;
	Показатель.НомерПодСтроки = СтрЗаменить(Сред(НомераЯчеек,2) ,"_" , ",");
	Показатель.Значение = Результат.Значение; 
	Попытка
		Показатель.ИмяРаздела = Контекст.ИмяРаздела;
		Показатель.НомерСтраницы = Контекст.НомерСтраницы;
	Исключение
	КонецПопытки;
	Результат.Списокпоказателей.Добавить(Показатель);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВычислитьРазобранноеВыражение (Контекст, РазобранноеВыражение)
	Если РазобранноеВыражение.Тип = "Число" Или РазобранноеВыражение.Тип = "Строка" Тогда
		Результат = НоваяСтруктураРезультатаЯзыкаКС();
		Результат.Значение = РазобранноеВыражение.Содержание;
		Результат.ПутьВычисления = Строка(Результат.Значение);
		Возврат Результат;
		
	ИначеЕсли РазобранноеВыражение.Тип = "Скобки" Тогда
		Результат = ВычислитьРазобранноеВыражение(Контекст, РазобранноеВыражение.Содержание[0]);
		Результат.ПутьВычисления = "(" + Результат.ПутьВычисления + ")";
		Возврат Результат;
		
	ИначеЕсли РазобранноеВыражение.Тип = "Параметр" Тогда
		Возврат ВычислитьРазобранноеВыражение(Контекст, РазобранноеВыражение.Содержание[0]);
		
	ИначеЕсли РазобранноеВыражение.Тип = "Функция" Тогда
		Возврат ВыполнитьФункцию(Контекст, РазобранноеВыражение);
		
	ИначеЕсли РазобранноеВыражение.Тип = "УнарныйОператор" Тогда
		Возврат ВыполнитьУнарныйОператор(Контекст, РазобранноеВыражение);
		
	ИначеЕсли РазобранноеВыражение.Тип = "БинарныйОператор" Тогда
		Возврат ВыполнитьБинарныйОператор(Контекст, РазобранноеВыражение);
		
	ИначеЕсли РазобранноеВыражение.Тип = "Идентификатор" Тогда
		Возврат ЗначениеИдентификатора(Контекст, РазобранноеВыражение);
		
	ИначеЕсли РазобранноеВыражение.Тип = "ЯчейкаМассива" Тогда
		Возврат ЗначениеЯчейкиМассива(Контекст, РазобранноеВыражение);
		
	Иначе
		ВызватьИсключение "Невозможно вычислить выражение: не удалось разобрать выражение, либо не для всех выражений созданы вычислители";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВычислитьВыражение (Контекст, Выражение)
	Если ТипЗнч(Выражение) = Тип ("Строка") Тогда
		РазобранноеВыражение = ПарсерЯзыкаКонтрольныхСоотношений(Выражение);
		Попытка
			Выражение = РазобранноеВыражение;
		Исключение
		КонецПопытки;
	Иначе
		РазобранноеВыражение = Выражение;
	КонецЕсли;
	
	Возврат ВычислитьРазобранноеВыражение(Контекст, РазобранноеВыражение);
КонецФункции

&НаСервере
Функция ВычислитьВыражениеУсловия (Контекст, Выражение)
	Если ПустаяСтрока(Выражение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ВычислитьВыражение (Контекст, Выражение).Значение;
КонецФункции

&НаСервере
Функция ВычислитьЗначениеВыражение (Контекст, Выражение)
	Если ПустаяСтрока(Выражение) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ВычислитьВыражение (Контекст, Выражение).Значение;
КонецФункции

&НаСервере
Функция СоздатьСтруктуруРезультата()
    СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);

	Возврат СтруктураРезультата;
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураРезультата,
										  ОписаниеКС,
										  ОбработкаКС,
										  Расшифровка,
										  ЭтоОшибка,
										  ОписаниеНарушения,
										  Норма)
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	НомерСтр = Формат(СтруктураРезультата.КоличествоНайденныхОшибок + СтруктураРезультата.КоличествоНайденныхБезОшибок, "ЧГ=0");	
	СтруктураОшибок.Вставить("Описание" + НомерСтр, ОписаниеНарушения);
	СтруктураОшибок.Вставить("Нарушение" + НомерСтр, Норма);
	СтруктураОшибок.Вставить("Расшифровка" + НомерСтр, Расшифровка);
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + НомерСтр, Число(НомерСтр));
	СтруктураОшибок.Вставить("ЭтоОшибка" + НомерСтр, ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + НомерСтр, ОписаниеКС);
	СтруктураОшибок.Вставить("Комментарий" + НомерСтр, "");
КонецПроцедуры

&НаСервере
Функция ПодготовкаКонтекста(Док)
	Контекст = Новый Структура;
	Контекст.Вставить("локальныеПеременные", Новый Структура);
	
	Разделы = Новый Структура;
	
	//Копируем данные многостраничных разделов
	Для Каждого ДокРаздел Из Док Цикл
		Если ТипЗнч(ДокРаздел.Значение) = Тип("ДанныеФормыКоллекция") Тогда
			Раздел = Новый Массив;
			НомерСтраницы = 0;
			
			Для Каждого ДокСтраница Из ДокРаздел.Значение Цикл
				Страница = Новый Структура;
				
				Если ДокРаздел.Значение.Количество() > 1 Тогда
					НомерСтраницы = НомерСтраницы + 1;
				КонецЕсли;
				Страница.Вставить("НомерСтраницы", НомерСтраницы);
				Страница.Вставить("ИмяРаздела", ДокРаздел.Ключ);
				
				ПеременныеСтраницы = Новый Структура;
				Для Каждого ДокЗначение ИЗ ДокСтраница.Данные.Получить(0).Значение Цикл
					ПеременныеСтраницы.Вставить(ДокЗначение.Ключ, ДокЗначение.Значение);
				КонецЦикла;
				Страница.Вставить("Переменные", ПеременныеСтраницы);
				Страница.Вставить("ЛокальныеПеременные", Новый Структура);
				Раздел.Добавить(Страница);
			КонецЦикла;
			Разделы.Вставить(ДокРаздел.Ключ, Раздел);		
		Иначе
			Раздел = Новый Массив;
			Страница = Новый Структура;
			Страница.Вставить("НомерСтраницы", 0); 
			Страница.Вставить("ИмяРаздела", ДокРаздел.Ключ);
			
			ПеременныеСтраницы = Новый Структура;
			Для Каждого ДокЗначение ИЗ ДокРаздел.Значение Цикл
				ПеременныеСтраницы.Вставить(ДокЗначение.Ключ, ДокЗначение.Значение);
			КонецЦикла;
			Страница.Вставить("Переменные", ПеременныеСтраницы);
			Страница.Вставить("ЛокальныеПеременные", Новый Структура);
			Раздел.Добавить(Страница);
				
			Разделы.Вставить(ДокРаздел.Ключ, Раздел);		
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	Контекст.Вставить("Переменные", Разделы);
	Разделы.Титульный[0].Переменные.Вставить("ПоМесту", Разделы.Титульный[0].Переменные.ПоМесту);
	Разделы.Титульный[0].Переменные.Вставить("Период1", Сред(Разделы.Титульный[0].Переменные.Период,1,1));	
	Разделы.Титульный[0].Переменные.Вставить("Период2", Сред(Разделы.Титульный[0].Переменные.Период,2,1));	
	Разделы.Титульный[0].Переменные.Вставить("НомерКорректировки1", Сред(Разделы.Титульный[0].Переменные.НомерКорректировки,1,1));	
	Разделы.Титульный[0].Переменные.Вставить("НомерКорректировки2", Сред(Разделы.Титульный[0].Переменные.НомерКорректировки,2,1));	
	Разделы.Титульный[0].Переменные.Вставить("НомерКорректировки3", Сред(Разделы.Титульный[0].Переменные.НомерКорректировки,3,1));	
	Возврат Контекст;
КонецФункции

&НаСервере
Процедура ЗарегистрироватьПоказатели(СписокПоказателей, ОбработкаКС, РасшифровкиПоказателей, СсылкаНаДокумент)
	Для Каждого Стр Из СписокПоказателей Цикл
		Если Стр.НомерПодСтроки = 0 Тогда
			ИмяПоказателя = Стр.ИмяПоказателя;
			РасшифровкаПоказателя = РасшифровкиПоказателей[Стр.ИмяРаздела][Стр.ИмяПоказателя];
		Иначе
			ИмяПоказателя = Стр.ИмяПоказателя + "_" + Стр.НомерПодСтроки;
			РасшифровкаПоказателя = СтрЗаменить(РасшифровкиПоказателей[Стр.ИмяРаздела][Стр.ИмяПоказателя],"%n", Стр.НомерПодСтроки);
		КонецЕсли;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, РасшифровкаПоказателя,
			?(ПустаяСтрока(Стр.Значение), "<>", Стр.Значение), "", СсылкаНаДокумент, Стр.ИмяРаздела, Неопределено, Стр.НомерСтраницы,
			СчетчикФормулДляРасшифровок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуКонтрольногоСоотношения (
													ОбработкаКС,
													Контекст,
													СтруктураРезультата,
													ОписаниеКонтрольногоСоотношения,
													ФормулаУсловияВыполненияПроверки,
													ФормулаКонтрольногоСоотношения,
													ФормулаРасшифровки,
													ФормулаОписанияОшибки,
													ФормулаНормыЗаконодательства)
													
		Если ВычислитьВыражениеУсловия (Контекст, ФормулаУсловияВыполненияПроверки) Тогда
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКонтрольногоСоотношения, , СчетчикФормулДляРасшифровок);
		
			РезультатИсполненияФормулы = ВычислитьВыражение(Контекст, ФормулаКонтрольногоСоотношения);
			ОшибкиНет = РезультатИсполненияФормулы.Значение;
			ЗарегистрироватьПоказатели(РезультатИсполненияФормулы.СписокПоказателей, ОбработкаКС, РасшифровкиПоказателей, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
			Расшифровка = ВычислитьЗначениеВыражение(Контекст, ФормулаРасшифровки);
		
			Если ОшибкиНет Тогда
				СтруктураРезультата.КоличествоНайденныхБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок + 1;
				ОписаниеОшибки = "";
				НормаЗаконодательства = "";
			Иначе
				СтруктураРезультата.КоличествоНайденныхОшибок = СтруктураРезультата.КоличествоНайденныхОшибок + 1;
				ОписаниеОшибки = ВычислитьЗначениеВыражение(Контекст, ФормулаОписанияОшибки);
				НормаЗаконодательства = ВычислитьЗначениеВыражение(Контекст, ФормулаНормыЗаконодательства);
			КонецЕсли;
		
			ДобавитьЭлементВСтруктуруОшибок(СтруктураРезультата,
											ОписаниеКонтрольногоСоотношения, 
											ОбработкаКС, 
											Расшифровка, 
											Не ОшибкиНет, 
											ОписаниеОшибки, 
											НормаЗаконодательства);
		КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьСтруктуруУсловияГруппировки()
	СтруктураУсловия = Новый Структура;
	СтруктураУсловия.Вставить("ИмяРаздела", Неопределено);
	СтруктураУсловия.Вставить("ФормулаПравилаСозданияГруппы", Неопределено);
	СтруктураУсловия.Вставить("ФормулаПравилаСоответсвияГруппе", Неопределено);
	Возврат СтруктураУсловия;
КонецФункции

&НаСервере
Процедура ДобавитьСтраницуВГруппу(Группа, ИмяРаздела, Страница)
	//Проверяем, что такой страницы еще нет в группе
	Для Каждого СтраницаВГруппе Из Группа.Переменные[ИмяРаздела] Цикл
		Если СтраницаВГруппе = Страница Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Группа.Переменные[ИмяРаздела].Добавить(Страница);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (ОбработкаКС,
													              Контекст,
													              СтруктураРезультата,
													              ОписаниеКонтрольногоСоотношения,
													              ФормулаУсловияВыполненияПроверки,
													              ПравилаГруппировки,
													              ФормулаУсловияВыполненияПроверкиГруппы,
													              ФормулаКонтрольногоСоотношения,
													              ФормулаРасшифровки,
													              ФормулаОписанияОшибки,
													              ФормулаНормыЗаконодательства)
												
		Если ВычислитьВыражениеУсловия (Контекст, ФормулаУсловияВыполненияПроверки) Тогда
												
		Группы = Новый Соответствие;
		Для Каждого Правило Из ПравилаГруппировки Цикл
			Если Правило.ФормулаПравилаСозданияГруппы <> Неопределено Тогда
				Для Каждого Страница Из Контекст.Переменные[Правило.ИмяРаздела] Цикл
					ИмяГруппы = ВычислитьЗначениеВыражение(Страница, Правило.ФормулаПравилаСозданияГруппы);
				
					Группа = Группы.Получить(ИмяГруппы);
					Если Группа = Неопределено Тогда 
						Группа = Новый Структура;
						Разделы = Новый Структура;
						Группа.Вставить("Переменные", Разделы);
						Для Каждого Раздел Из ПравилаГруппировки Цикл
							Разделы.Вставить(Раздел.ИмяРаздела, Новый Массив);
						КонецЦикла;
						Группа.Вставить("ЛокальныеПеременные", Контекст.ЛокальныеПеременные);
						Группы.Вставить(ИмяГруппы, Группа); 
					КонецЕсли;
					ДобавитьСтраницуВГруппу(Группа, Правило.ИмяРаздела, Страница);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	
		//Здесь должен быть текст кода обработки правил соответсвия группе.
	
		//Вызываем обработку для каждой группы
		Для Каждого Группа Из Группы Цикл
			ВыполнитьПроверкуКонтрольногоСоотношения (
													ОбработкаКС,
													Группа.Значение,
													СтруктураРезультата,
													ОписаниеКонтрольногоСоотношения,
													ФормулаУсловияВыполненияПроверкиГруппы,
													ФормулаКонтрольногоСоотношения,
													ФормулаРасшифровки,
													ФормулаОписанияОшибки,
													ФормулаНормыЗаконодательства);
		КонецЦикла;
	КонецЕсли;										

КонецПроцедуры		

&НаСервере
Процедура ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (ОбработкаКС,
													                 Контекст,
													                 СтруктураРезультата,
													                 ОписаниеКонтрольногоСоотношения,
													                 ФормулаУсловияВыполненияПроверки,
													                 СтруктураФормулЛокальныхПеременных,
													                 Раздел,
													                 ФормулаУсловиеВыполненияПроверкиДляСтраницы,
													                 ФормулаКонтрольногоСоотношения,
													                 ФормулаРасшифровки,
													                 ФормклаОписанияОшибки,
													                 ФормулаНормыЗаконодательства)
		
			Если ВычислитьВыражениеУсловия (Контекст, ФормулаУсловияВыполненияПроверки) Тогда
			ЛокальныеПеременные = Новый Структура;
			Если СтруктураФормулЛокальныхПеременных<>Неопределено Тогда
				Для Каждого Переменная Из СтруктураФормулЛокальныхПеременных Цикл
					ЗначениеПеременной = ВычислитьВыражение(Контекст, Переменная.Значение);
					ЛокальныеПеременные.Вставить(Переменная.Ключ, ЗначениеПеременной);
				КонецЦикла;
			КонецЕсли;
			Контекст.ЛокальныеПеременные = ЛокальныеПеременные;
													
			Страницы = ВычислитьЗначениеВыражение(Контекст, Раздел);
		
			Для Каждого Страница Из Страницы Цикл
				Страница.ЛокальныеПеременные = ЛокальныеПеременные;
				ВыполнитьПроверкуКонтрольногоСоотношения (ОбработкаКС,
													      Страница,
													      СтруктураРезультата,
													      ОписаниеКонтрольногоСоотношения,
													      ФормулаУсловиеВыполненияПроверкиДляСтраницы,
													      ФормулаКонтрольногоСоотношения,
													      ФормулаРасшифровки,
													      ФормклаОписанияОшибки,
													      ФормулаНормыЗаконодательства);
			КонецЦикла;
		КонецЕсли;
												
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтроки (ОбработкаКС,
													               Контекст,
													               СтруктураРезультата,
													               ОписаниеКонтрольногоСоотношения,
													               ФормулаУсловияВыполненияПроверки,
													               СтруктураФормулЛокальныхПеременных,
													               Раздел,
													               ФормулаУсловиеВыполненияПроверкиДляСтраницы,
													               ИмяСчетчикаСтрок,
													               ФормулаНачальногоЗначенияСчетчика,
													               ФормулаУсловияПродолженияЦикла,
													               ФормулаУсловиеВыполненияПроверкиДляСтроки,
													               ФормулаКонтрольногоСоотношения,
													               ФормулаРасшифровки,
													               ФормклаОписанияОшибки,
													               ФормулаНормыЗаконодательства)
		
			Если ВычислитьВыражениеУсловия (Контекст, ФормулаУсловияВыполненияПроверки) Тогда
			ЛокальныеПеременные = Новый Структура;
			Если СтруктураФормулЛокальныхПеременных<>Неопределено Тогда
				Для Каждого Переменная Из СтруктураФормулЛокальныхПеременных Цикл
					ЗначениеПеременной = ВычислитьВыражение(Контекст, Переменная.Значение);
					ЛокальныеПеременные.Вставить(Переменная.Ключ, ЗначениеПеременной);
				КонецЦикла;
			КонецЕсли;
			Контекст.ЛокальныеПеременные = ЛокальныеПеременные;
													
			Страницы = ВычислитьЗначениеВыражение(Контекст, Раздел);
		
			Для Каждого Страница Из Страницы Цикл
				
				Если ВычислитьВыражениеУсловия(Страница,ФормулаУсловиеВыполненияПроверкиДляСтраницы) Тогда
					
					НомерСтроки = ВычислитьЗначениеВыражение(Страница, ФормулаНачальногоЗначенияСчетчика);
					НомерСтрокиСтруктура = НоваяСтруктураРезультатаЯзыкаКС();
					НомерСтрокиСтруктура.Значение = НомерСтроки;
					ЛокальныеПеременные.Вставить(ИмяСчетчикаСтрок, НомерСтрокиСтруктура);
					Страница.ЛокальныеПеременные = ЛокальныеПеременные;
					
					Пока ВычислитьВыражениеУсловия(Страница, ФормулаУсловияПродолженияЦикла) Цикл
				
						ВыполнитьПроверкуКонтрольногоСоотношения (ОбработкаКС,
													              Страница,
													              СтруктураРезультата,
													              ОписаниеКонтрольногоСоотношения,
													              ФормулаУсловиеВыполненияПроверкиДляСтроки,
													              ФормулаКонтрольногоСоотношения,
													              ФормулаРасшифровки,
													              ФормклаОписанияОшибки,
													              ФормулаНормыЗаконодательства);
												
						НомерСтроки = НомерСтроки + 1;
						НомерСтрокиСтруктура.Значение = НомерСтроки;
						ЛокальныеПеременные.Вставить(ИмяСчетчикаСтрок, НомерСтрокиСтруктура);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
												
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции проверки контрольных соотношений.
//

&НаКлиенте
Процедура Проверить(Команда)
    РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Результат = СоздатьСтруктуруРезультата();
	СформироватьСтруктуруПоказателей();
	Контекст = ПодготовкаКонтекста(мДанныеОтчета);
	ОбъектКС = Неопределено;
	РасшифровкиПоказателей = РасшифровкиПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда 
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда 
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверитьКСРаздела1_1(ОбъектКС, Контекст, Результат);
	ПроверитьКСРаздела1_2(ОбъектКС, Контекст, Результат);
	ПроверитьКСРаздела1_3(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста02(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста02_1(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста02_2(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста02_3(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста02_4(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста02_5(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста02_6(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста02_6а(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста03А(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста03Б(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста03В(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста04(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста05(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста06(ОбъектКС, Контекст, Результат);
	ПроверитьКСЛиста07(ОбъектКС, Контекст, Результат);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		Результат.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда 
		Результат.Вставить("СписокРасшифровкиформулы", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция РасшифровкиТитульный()
	Раздел = Новый Структура;
	Раздел.Вставить("ПоМесту", "по месту нахождения (учета) (код) (Лист 01)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиРаздела1_1()
	Раздел = Новый Структура;
	Раздел.Вставить("П000110004003", "Сумма налога к доплате в федеральный бюджет (Раздел 1 Подраздел 1.1 Строка 040");
	Раздел.Вставить("П000110005003", "Сумма налога к уменьшению в федеральный бюджет (Раздел 1 Подраздел 1.1 Строка 050");
	Раздел.Вставить("П000110007003", "Сумма налога к доплате в бюджет субъекта Российской Федерации (Раздел 1 Подраздел 1.1 Строка 070");
	Раздел.Вставить("П000110008003", "Сумма налога к уменьшению в бюджет субъекта Российской Федерации (Раздел 1 Подраздел 1.1 Строка 080");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиРаздела1_2()
	Раздел = Новый Структура;
	Раздел.Вставить("П000120000200", "Риквизит ""Квартал, на который исчисляются ежемесячные авансовые платежи"" (Раздел 1 Подраздел 1.2");
	Раздел.Вставить("П000120012003", "Авансовый платеж в федеральный бюджет по 1 сроку (Раздел 1 Подраздел 1.2 строка 120)");
	Раздел.Вставить("П000120013003", "Авансовый платеж в федеральный бюджет по 2 сроку (Раздел 1 Подраздел 1.2 строка 130)");
	Раздел.Вставить("П000120014003", "Авансовый платеж в федеральный бюджет по 3 сроку (Раздел 1 Подраздел 1.2 строка 140)");
	Раздел.Вставить("П000120022003", "Авансовый платеж в бюджет субъекта Российской Федерации по 1 сроку (Раздел 1 Подраздел 1.2 строка 220)");
	Раздел.Вставить("П000120023003", "Авансовый платеж в бюджет субъекта Российской Федерации по 2 сроку (Раздел 1 Подраздел 1.2 строка 230)");
	Раздел.Вставить("П000120024003", "Авансовый платеж в бюджет субъекта Российской Федерации по 3 сроку (Раздел 1 Подраздел 1.2 строка 240)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиРаздела1_3()
	Раздел = Новый Структура;
	Раздел.Вставить("П000130004003", "Сумма налога с доходов в виде процентов, а также дивидендов, подлежащая уплате (Раздел 1 Подраздел 1.3 Строка 040 (%n))");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста02()
	Раздел = Новый Структура;
	Раздел.Вставить("П002000000100", "Признак налогоплатильщика (код) (Лист 02 строка 010)");
	Раздел.Вставить("П002000001003", "Доходы от реализации (Лист 02 строка 010)");
	Раздел.Вставить("П002000002003", "Внереализационные доходы (Лист 02 строка 020)");
	Раздел.Вставить("П002000003003", "Расходы, уменьшающие сумму доходов от реализации (Лист 02 строка 030)");
	Раздел.Вставить("П002000004003", "Внереализационные расходы (Лист 02 строка 040)");
	Раздел.Вставить("П002000005003", "Убытки (Лист 02 строка 050)");
	Раздел.Вставить("П002000006003", "Итого прибыль (убыток) (Лист 02 строка 060)");
	Раздел.Вставить("П002000007003", "Доходы, исключаемые из прибыли (Лист 02 строка 070)");
	Раздел.Вставить("П002000008003", "Прибыль, полученная Банком России от осуществления деятельности, связанной с выполнением его функций, и облагаемая по налоговой ставке 0 процентов (Лист 02 строка 080)");
	Раздел.Вставить("П002000009003", "Сумма льгот, предусмотренных законодательством Российской Федерации (Лист 02 строка 090)");
	Раздел.Вставить("П002000010003", "Налоговая база (Лист 02 строка 100)");
	Раздел.Вставить("П002000011003", "Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период (Лист 02 строка 110)");
	Раздел.Вставить("П002000012003", "Налоговая база для исчисления налога (Лист 02 строка 120)");
	Раздел.Вставить("П002000013003", "Налоговая база для исчисления налога в бюджет субъекта Российской Федерации (Лист 02 строка 130)");
	Раздел.Вставить("П002000014003", "Ставка налога на прибыль - всего (Лист 02 строка 140)");
	Раздел.Вставить("П002000015003", "Ставка налога на прибыль в федеральный бюджет (Лист 02 строка 150)");
	Раздел.Вставить("П002000016003", "Ставка налога на прибыль в бюджет субъекта Российской Федерации (Лист 02 строка 160)");
	Раздел.Вставить("П002000017003", "Ставка налога на прибыль в бюджет субъекта Российской Федерации (с учетом положений абзацев 4 и 5 п. 1 ст. 284 НК)(Лист 02 строка 170)");
	Раздел.Вставить("П002000018003", "Сумма исчисленного налога на прибыль - всего (Лист 02 строка 180)");
	Раздел.Вставить("П002000019003", "Сумма исчисленного налога на прибыль в федеральный бюджет - всего (Лист 02 строка 190)");
	Раздел.Вставить("П002000020003", "Сумма исчисленного налога на прибыль в бюджет субъекта Российской Федерации - всего (Лист 02 строка 200)");
	Раздел.Вставить("П002000021003", "Сумма начисленных авансовых платежей за отчетный (налоговый) период - всего (Лист 02 строка 210)");
	Раздел.Вставить("П002000022003", "Сумма начисленных авансовых платежей в федеральный бюджет за отчетный (налоговый) период (Лист 02 строка 220)");
	Раздел.Вставить("П002000023003", "Сумма начисленных авансовых платежей в бюджет субъекта Российской Федерации за отчетный (налоговый) период (Лист 02 строка 230)");
	Раздел.Вставить("П002000024003", "Сумма налога, выплаченная за пределами Российской Федерации и засчитываемая в уплату налога согласно порядку, установленному статьей 311 НК (Лист 02 строка 240)");
	Раздел.Вставить("П002000025003", "Сумма налога, выплаченная за пределами Российской Федерации и засчитываемая в уплату налога в федеральный бюджет согласно порядку, установленному статьей 311 НК (Лист 02 строка 250)");
	Раздел.Вставить("П002000026003", "Сумма налога, выплаченная за пределами Российской Федерации и засчитываемая в уплату налога в бюджет субъекта Российской Федерации согласно порядку, установленному статьей 311 НК (Лист 02 строка 260)");
	Раздел.Вставить("П002000027003", "Сумма налога на прибыль к доплате в федеральный бюджет (Лист 02 строка 270)");
	Раздел.Вставить("П002000027103", "Сумма налога на прибыль к доплате в бюджет субъекта Российской Федерации (Лист 02 строка 271)");
	Раздел.Вставить("П002000028003", "Сумма налога на прибыль к уменьшению в федеральный бюджет (Лист 02 строка 280)");
	Раздел.Вставить("П002000028103", "Сумма налога на прибыль к уменьшению в бюджет субъекта Российской Федерации (Лист 02 строка 281)");
	Раздел.Вставить("П002000029003", "Сумма ежемесячных авансовых платежей, подлежащих к уплате в квартале, следующем за текущим отчетным периодом (Лист 02 строка 290)");
	Раздел.Вставить("П002000030003", "Сумма ежемесячных авансовых платежей, подлежащих к уплате в федеральный бюджет в квартале, следующем за текущим отчетным периодом (Лист 02 строка 300)");
	Раздел.Вставить("П002000031003", "Сумма ежемесячных авансовых платежей, подлежащих к уплате в бюджет субъекта Российской Федерации в квартале, следующем за текущим отчетным периодом (Лист 02 строка 310)");
	Раздел.Вставить("П002000032003", "Сумма ежемесячных авансовых платежей, подлежащих уплате в 1 квартале следующего налогового периода (Лист 02 строка 320)");
	Раздел.Вставить("П002000033003", "Сумма ежемесячных авансовых платежей, подлежащих уплате в федеральный бюджет в 1 квартале следующего налогового периода (Лист 02 строка 330)");
	Раздел.Вставить("П002000034003", "Сумма ежемесячных авансовых платежей, подлежащих уплате в бюджет субъекта Российской Федерации в 1 квартале следующего налогового периода (Лист 02 строка 340)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста02_1()
	Раздел = Новый Структура;
	Раздел.Вставить("П002010001003", "Выручка от реализации - всего (Приложение 1 Лист 02 строка 010)");
	Раздел.Вставить("П002010001103", "Выручка от реализации товаров (работ, услуг) собственного производства (Приложение 1 Лист 02 строка 011)");
	Раздел.Вставить("П002010001203", "Выручка от реализации покупных товаров (Приложение 1 Лист 02 строка 012)");
	Раздел.Вставить("П002010001303", "Выручка от реализации имущественных прав, за исключением доходов от реализации прав требований долга (Приложение 1 Лист 02 строка 013)");
	Раздел.Вставить("П002010001403", "Выручка от реализации прочего имущества (Приложение 1 Лист 02 строка 014)");
	Раздел.Вставить("П002010002003", "Выручка от реализации (выбытия, в т.ч. доход от погашения) ценных бумаг профессиональных участников рынка ценных бумаг - всего (Приложение 1 Лист 02 строка 020)");
	Раздел.Вставить("П002010002303", "Выручка от реализации предприятия как имущественного комплекса (Приложение 1 Лист 02 строка 023)");
	
	Раздел.Вставить("П002010003003", "Выручка от реализации по операциям, отраженным в Приложении 3 к Листу 02 (Приложение 1 Лист 02 строка 030)");
	Раздел.Вставить("П002010004003", "Итого доходов от реализации (Приложение 1 Лист 02 строка 040)");
	Раздел.Вставить("П002010010003", "Внереализационные доходы - всего (Приложение 1 Лист 02 строка 100)");
	Раздел.Вставить("П002010010103", "Внереализационные доходы в виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде (Приложение 1 Лист 02 строка 101)");
	Раздел.Вставить("П002010010203", "Внереализационные доходы в виде стоимости полученных материалов или иного имущества при ликвидации выводимых из эксплуатации основных средств, при ремонте, модернизации, реконструкции, техническом перевооружении, частичной ликвидации основных средств (Приложение 1 Лист 02 строка 102)");
	Раздел.Вставить("П002010010303", "Внереализационные доходы в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав (кроме указанных в статье 251 НК) (Приложение 1 Лист 02 строка 103)");
	Раздел.Вставить("П002010010403", "Внереализационные доходы в виде стоимости излишков материально-производственных запасов и прочего имущества, которые выявлены в результате инвентаризации (Приложение 1 Лист 02 строка 104)");
	Раздел.Вставить("П002010010503", "Внереализационные доходы сумма восстановленных расходов на капитальные вложения в соответствии с абзацем четвертым пункта 9 статьи 258 НК (Приложение 1 Лист 02 строка 105)");
	Раздел.Вставить("П002010010603", "Внереализационные доходы доходы, полученные профессиональными участниками рынка ценных бумаг, осуществляющими дилерскую деятельность, включая банки, по операциям с финансовыми инструментами срочных сделок не обращающимися на организованном рынке (Приложение 1 Лист 02 строка 106)");
	Раздел.Вставить("П002010010703", "Внереализационные доходы в виде сумм корректировки прибыли вследствие применения методов определения  для целей налогообложения соответствия цен, примененных в сделках, рыночным ценам (рентабельности), предусмотренных статьями 105.12 и 105.13 НК (Приложение 1 Лист 02 строка 107)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста02_2()
	Раздел = Новый Структура;
	Раздел.Вставить("П002020001003", "Прямые расходы, относящиеся к реализованным товарам, работам, услугам (Приложение 2 Лист 02 строка 010)");
	Раздел.Вставить("П002020002003", "Прямые расходы налогоплательщиков, осуществляющих оптовую, мелкооптовую и розничную торговлю в текущем отчетном (налоговом) периоде, относящихся к реализованным товарам (Приложение 2 Лист 02 строка 020)");
	Раздел.Вставить("П002020004003", "Косвенные расходы - всего (Приложение 2 Лист 02 строка 040)");
	Раздел.Вставить("П002020004103", "Суммы налогов и сборов, начисленные в порядке, установленном законодательством Российской Федерации о налогах и сборах, за исключением налогов, перечисленных в статье 270 НК (Приложение 2 Лист 02 строка 041)");
	Раздел.Вставить("П002020004203", "Расходы на капитальные вложения в соответствии с абзацем вторым пункта 9 статьи 258 НК в размере не более 10% (Приложение 2 Лист 02 строка 042)");
	Раздел.Вставить("П002020004303", "Расходы на капитальные вложения в соответствии с абзацем вторым пункта 9 статьи 258 НК в размере не более 30% (Приложение 2 Лист 02 строка 043)");
	Раздел.Вставить("П002020004503", "Расходы, осуществленные налогоплательщиком-организацией, использующим труд инвалидов, согласно пп. 38 п. 1 ст. 264 НК (Приложение 2 Лист 02 строка 045)");
	Раздел.Вставить("П002020004603", "Расходы налогоплательщиков - общественных организаций инвалидов, а также налогоплательщиков-учреждений, единственными собственниками имущества которых являются общественные организации инвалидов, согласно пп. 39 п.1 ст.264 НК (Приложение 2 Лист 02 строка 046)");
	Раздел.Вставить("П002020004703", "Расходы на приобретение права на земельные участки, указанные в пунктах 1 и 2 ст. 264.1 НК, признаваемые расходами отчетного (налогового) периода - всего (Приложение 2 Лист 02 строка 047)");
	Раздел.Вставить("П002020004803", "Расходы на приобретение права на земельные участки, указанные в пунктах 1 и 2 ст. 264.1 НК, признаваемые расходами отчетного (налогового) периода в течение срока, определенного налогоплательщиком (но не менее 5 лет) (Приложение 2 Лист 02 строка 048)");
	Раздел.Вставить("П002020004903", "Расходы на приобретение права на земельные участки, указанные в пунктах 1 и 2 ст. 264.1 НК, признаваемые расходами отчетного (налогового) периода в размере, не превышающем 30% налоговой базы предыдущего налогового периода (Приложение 2 Лист 02 строка 049)");
	Раздел.Вставить("П002020005003", "Расходы на приобретение права на земельные участки, указанные в пунктах 1 и 2 ст. 264.1 НК, признаваемые расходами отчетного (налогового) периода в течение срока, установленного договором при приобретении земельного участка на условиях рассрочки (Приложение 2 Лист 02 строка 050)");
	Раздел.Вставить("П002020005103", "Расходы на приобретение права на земельные участки, указанные в пунктах 1 и 2 ст. 264.1 НК, признаваемые расходами отчетного (налогового) периода в течение срока действия договора аренды земельного участка, не подлежащего государственной регистрации (Приложение 2 Лист 02 строка 051)");
	Раздел.Вставить("П002020005203", "Расходы на НИОКР (Приложение 2 Лист 02 строка 052)");
	Раздел.Вставить("П002020005303", "Расходы на НИОКР, не давшие положительного результата (Приложение 2 Лист 02 строка 053)");
	Раздел.Вставить("П002020005403", "Расходы на НИОКР по перечню, установленному Правительством Российской Федерации (Приложение 2 Лист 02 строка 054)");
	Раздел.Вставить("П002020005503", "Расходы на НИОКР по перечню, установленному Правительством Российской Федерации, не давшие положительного результата (Приложение 2 Лист 02 строка 055)");
	Раздел.Вставить("П002020005903", "Стоимость реализованных имущественных прав (кроме прав требований долга, указанных в Прил.3 к Листу 02) (Приложение 2 Лист 02 строка 059)");
	Раздел.Вставить("П002020006003", "Цена приобретения реализованного прочего имущества и расходы, связанные с его реализацией (Приложение 2 Лист 02 строка 060)");
	Раздел.Вставить("П002020006103", "Стоимость чистых активов предприятия, реализованного как имущественный комплекс (Приложение 2 Лист 02 строка 061)");
	Раздел.Вставить("П002020007003", "Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением) ценных бумаг профессиональными участниками рынка ценных бумаг (Приложение 2 Лист 02 строка 070)");
	Раздел.Вставить("П002020008003", "Расходы по операциям, отраженным в Приложении 3 к Листу 02 (Приложение 2 Лист 02 строка 080)");
	Раздел.Вставить("П002020009003", "Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств, включая объекты жилищно - коммунальной и социально - культурной сферы, учитываемые в уменьшение прибыли текущего отчетного (налогового) периода, полученной по указанным видам деятельности (Приложение 2 Лист 02 строка 090)");
	Раздел.Вставить("П002020010003", "Сумма убытка от реализации амортизируемого имущества, относящаяся к расходам текущего отчетного (налогового) периода (Приложение 2 Лист 02 строка 100)");
	Раздел.Вставить("П002020011003", "Сумма убытка от реализации права на земельный участок, относящаяся к расходам текущего отчетного (налогового) периода (Приложение 2 Лист 02 строка 110)");
	Раздел.Вставить("П002020012003", "Сумма надбавки, уплачиваемая покупателем предприятия как имущественного комплекса, относящаяся к расходам текущего отчетного (налогового) периода (Приложение 2 Лист 02 строка 120)");
	Раздел.Вставить("П002020013003", "Итого признанных расходов (Приложение 2 Лист 02 строка 130)");
	Раздел.Вставить("П002020013103", "Сумма амортизации за отчетный (налоговый) период, начисленная линейным методом (Приложение 2 Лист 02 строка 131)");
	Раздел.Вставить("П002020013203", "Сумма амортизации за отчетный (налоговый) период, начисленная линейным методом по нематериальным активам (Приложение 2 Лист 02 строка 132)");
	Раздел.Вставить("П002020013303", "Сумма амортизации за отчетный (налоговый) период, начисленная нелинейным методом (Приложение 2 Лист 02 строка 133)");
	Раздел.Вставить("П002020013403", "Сумма амортизации за отчетный (налоговый) период, начисленная нелинейным методом по нематериальным активам (Приложение 2 Лист 02 строка 134)");
	Раздел.Вставить("П002020013503", "Метод начисления амортизации, отраженный в учетной политике (Приложение 2 Лист 02 строка 135)");
	Раздел.Вставить("П002020020003", "Внереализационные расходы - всего (Приложение 2 Лист 02 строка 200)");
	Раздел.Вставить("П002020020103", "Расходы в виде процентов по долговым обязательствам любого вида, в том числе процентов, начисленных по ценным бумагам и иным обязательствам, выпущенным (эмитированным) налогоплательщиком (Приложение Лист 02 строка 201)");
	Раздел.Вставить("П002020020203", "Расходы по созданию резерва предстоящих расходов, направляемых на цели, обеспечивающие социальную защиту инвалидов (Приложение Лист 02 строка 202)");
	Раздел.Вставить("П002020020303", "Убыток от реализации права требования долга, относящийся к внереализационным расходам текущего отчетного (налогового) периода (Приложение Лист 02 строка 203)");
	Раздел.Вставить("П002020020403", "Расходы на ликвидацию выводимых из эксплуатации основных средств, на списание нематериальных активов, на ликвидацию объектов незавершенного строительства и иного имущества, охрану недр и другие аналогичные работы (Приложение Лист 02 строка 204)");
	Раздел.Вставить("П002020020503", "Штрафы, пени и иные санкции за нарушение договорных или долговых обязательств, возмещение причиненного ущерба (Приложение Лист 02 строка 205)");
	Раздел.Вставить("П002020020603", "Расходы, полученные профессиональными участниками рынка ценных бумаг, осуществляющими дилерскую деятельность, включая банки, по операциям с финансовыми инструментами срочных сделок не обращающимися на организованном рынке (Приложение Лист 02 строка 206)");
	Раздел.Вставить("П002020030003", "Убытки, приравниваемые к внереализационным расходам - всего (Приложение 2 Лист 02 строка 300)");
	Раздел.Вставить("П002020030103", "Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде (Приложение 2 Лист 02 строка 301)");
	Раздел.Вставить("П002020030203", "Суммы безнадежных долгов, а в случае, если налогоплательщик принял решение о создании резерва по сомнительным долгам, суммы безнадежных долгов, не покрытые за счет средств резерва (Приложение 2 Лист 02 строка 302)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста02_3()
	Раздел = Новый Структура;
	Раздел.Вставить("П002030001003", "Количество объектов реализации амортизируемого имущества - всего (Приложение 3 Лист 02 строка 010)");
	Раздел.Вставить("П002030002003", "Количество объектов реализации амортизируемого имущества с убытком (Приложение 3 Лист 02 строка 020)");
	Раздел.Вставить("П002030003003", "Выручка от реализации амортизируемого имущества (Приложение 3 Лист 02 строка 030)");
	Раздел.Вставить("П002030004003", "Остаточная стоимость реализованного амортизируемого имущества и расходы, связанные с его реализацией (Приложение 3 Лист 02 строка 040)");
	Раздел.Вставить("П002030006003", "Убытки от реализации амортизируемого имущества (без учета объектов, реализованных с прибылью) (Приложение 3 Лист 02 строка 060)");
	Раздел.Вставить("П002030010003", "Выручка от реализации права требования долга до наступления срока платежа (п.1 ст. 279 НК) (Приложение 3 Лист 02 строка 100)");
	Раздел.Вставить("П002030011003", "Выручка от реализации права требования долга после наступления срока платежа (п.2 ст. 279 НК) (Приложение 3 Лист 02 строка 110)");
	Раздел.Вставить("П002030012003", "Стоимость реализованного права требования долга до наступления срока платежа (п.1 ст. 279 НК) (Приложение 3 Лист 02 строка 120)");
	Раздел.Вставить("П002030013003", "Стоимость реализованного права требования долга после наступления срока платежа (п.2 ст. 279 НК) (Приложение 3 Лист 02 строка 130)");
	Раздел.Вставить("П002030015003", "Размер убытка, превышающий сумму процентов, исчисленных в соответствии со статьей 269 НК (Приложение 3 Лист 02 строка 150)");
	Раздел.Вставить("П002030016003", "Убыток от реализации права требования долга (Приложение 3 Лист 02 строка 160)");
	Раздел.Вставить("П002030018003", "Выручка от реализации товаров (работ, услуг), имущественных прав по объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и социально-культурной сферы (Приложение 3 Лист 02 строка 180)");
	Раздел.Вставить("П002030019003", "Расходы, понесенные обслуживающими производствами и хозяйствами при реализации ими товаров (работ, услуг), имущественных прав в текущем отчетном (налоговом) периоде (Приложение 3 Лист 02 строка 190)");
	Раздел.Вставить("П002030020103", "убытки, не учитываемые для целей налогообложения в текущем отчетном (налоговом) периоде (пп.3 и 4 ст. 276 НК) (Приложение 3 Лист 02 строка 201)");
	Раздел.Вставить("П002030021003", "Доходы учредителя доверительного управления (доходы выгодоприобретателя), полученные в рамках договора доверительного управления имуществом (пп.3 и 4 ст. 276 НК) (Приложение 3 Лист 02 строка 210)");
	Раздел.Вставить("П002030021103", "Внереализационные доходы учредителя доверительного управления (доходы выгодоприобретателя), полученные в рамках договора доверительного управления имуществом (пп.3 и 4 ст. 276 НК) (Приложение 3 Лист 02 строка 211)");
	Раздел.Вставить("П002030022003", "Расходы учредителя доверительного управления (выгодоприобретателя), связанные с осуществлением договора доверительного управления имуществом (пп.3 и 4 ст. 276 НК) (Приложение 3 Лист 02 строка 220)");
	Раздел.Вставить("П002030022103", "Внереализационные расходы учредителя доверительного управления (выгодоприобретателя), связанные с осуществлением договора доверительного управления имуществом (пп.3 и 4 ст. 276 НК) (Приложение 3 Лист 02 строка 221)");
	Раздел.Вставить("П002030023003", "Убытки, полученные в отчетном (налоговом) периоде в рамках договора доверительного управления имуществом (п.4.1 ст. 276 НК) (Приложение 3 Лист 02 строка 230)");
	Раздел.Вставить("П002030024003", "Цена реализации права на земельный участок (Приложение 3 Лист 02 строка 240)");
	Раздел.Вставить("П002030025003", "Сумма не возмещенных налогоплательщику затрат, связанных с приобретением права на земельный участок (Приложение 3 Лист 02 строка 250)");
	Раздел.Вставить("П002030026003", "Убыток от реализации права на земельный участок (Приложение 3 Лист 02 строка 260)");
	Раздел.Вставить("П002030034003", "Итого выручка от реализации по операциям, отраженным в Приложении 3 к Листу 02 (Приложение 3 Лист 02 строка 340)");
	Раздел.Вставить("П002030035003", "Итого расходы по операциям, отраженным в Приложении 3 к Листу 02 (Приложение 3 Лист 02 строка 350)");
	Раздел.Вставить("П002030036003", "Убытки по операциям, отраженным в Приложении 3 к Листу 02 (Приложение 3 Лист 02 строка 360)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста02_4()
	Раздел = Новый Структура;
	Раздел.Вставить("П002040001003", "Остаток неперенесенного убытка на начало налогового периода - всего (Приложение 4 Лист 02 строка 010)");
	Раздел.Вставить("П002040004003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 040 Графа 3)");
	Раздел.Вставить("П002040005003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 050 Графа 3)");
	Раздел.Вставить("П002040006003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 060 Графа 3)");
	Раздел.Вставить("П002040007003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 070 Графа 3)");
	Раздел.Вставить("П002040008003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 080 Графа 3)");
	Раздел.Вставить("П002040009003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 090 Графа 3)");
	Раздел.Вставить("П002040010003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 100 Графа 3)");
	Раздел.Вставить("П002040011003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 110 Графа 3)");
	Раздел.Вставить("П002040012003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 120 Графа 3)");
	Раздел.Вставить("П002040013003", "Остаток неперенесенного убытка на начало налогового периода (Приложение 4 Лист 02 строка 130 Графа 3)");
	Раздел.Вставить("П002040014003", "Налоговая база за отчетный (налоговый) период (Приложение 4 Лист 02 строка 140)");
	Раздел.Вставить("П002040015003", "Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период (Приложение 4 Лист 02 строка 150)");
	Раздел.Вставить("П002040016003", "Остаток неперенесенного убытка на конец налогового периода - всего (Приложение 4 Лист 02 строка 160)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста02_Прил4()
	Раздел = Новый Структура;
	Раздел.Вставить("П002040018003", "Остаток неперенесенного убытка, полученного после 01.01.2002 (Приложение 4 Лист 02 строка 180)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста02_5()
	Раздел = Новый Структура;
	Раздел.Вставить("П002050002001", "КПП (Приложение 5 Лист 02)");
	Раздел.Вставить("П002050003003", "Налоговая база в целом по организации (Приложение 5 Лист 02 строка 030)");
	Раздел.Вставить("П002050003103", "Налоговая база в целом по организации без учета закрытых в течение текущего налогового периода обособленных подразделений (Приложение 5 Лист 02 строка 031)");
	Раздел.Вставить("П002050004003", "Доля налоговой базы (%) (Приложение 5 Лист 02 строка 040)");
	Раздел.Вставить("П002050005003", "Сумма налога (Приложение 5 Лист 02 строка 050)");
	Раздел.Вставить("П002050006003", "Ставка налога (%) в бюджет субъекта Российской Федерации (%) (Приложение 5 Лист 02 строка 060)");
	Раздел.Вставить("П002050007003", "Налоговая база, исходя из доли (Приложение 5 Лист 02 строка 070)");
	Раздел.Вставить("П002050008003", "Начислено налога в бюджет субъекта Российской Федерации (Приложение 5 Лист 02 строка 080)");
	Раздел.Вставить("П002050009003", "Сумма налога, выплаченная за пределами Российской Федерации и засчитываемая в уплату налога (Приложение 5 Лист 02 строка 090)");
	Раздел.Вставить("П002050010003", "Сумма налога к доплате (Приложение 5 Лист 02 строка 100)");
	Раздел.Вставить("П002050011003", "Сумма налога к уменьшению (Приложение 5 Лист 02 строка 110)");
	Раздел.Вставить("П002050012003", "Ежемесячные авансовые платежи в квартале, следующем за отчетным периодом (Приложение 5 Лист 02 строка 120)");
	Раздел.Вставить("П002050012103", "Ежемесячные авансовые платежи на I квартал следующего налогового периода (Приложение 5 Лист 02 строка 121)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста02_6()
	Раздел = Новый Структура;
	Раздел.Вставить("П002140003003", "Налоговая база в целом по консолидированной группе налогоплательщиков (Приложение 6 Лист 02 строка 030)");
	Раздел.Вставить("П002140003103", "Налоговая база в по консолидированной группе налогоплательщиков без учета закрытых в течение текущего налогового периода обособленных подразделений (Приложение 6 Лист 02 строка 031)");
	Раздел.Вставить("П002140004003", "Доля налоговой базы (%) (Приложение 6 Лист 02 строка 040)");
	Раздел.Вставить("П002140005003", "Налоговая база, исходя из доли (Приложение 6 Лист 02 строка 050)");
	Раздел.Вставить("П002140005103", "Налоговая база, исходя из доли для исчисления налога по пониженной ставке (Приложение 6 Лист 02 строка 051)");
	Раздел.Вставить("П002140007003", "Сумма налога (Приложение 6 Лист 02 строка 070)");
	Раздел.Вставить("П002140008003", "Начислено налога в бюджет субъекта Российской Федерации (Приложение 6 Лист 02 строка 080)");
	Раздел.Вставить("П002140009003", "Сумма налога, выплаченная за пределами Российской Федерации и засчитываемая в уплату налога (Приложение 6 Лист 02 строка 090)");
	Раздел.Вставить("П002140010003", "Сумма налога к доплате (Приложение 6 Лист 02 строка 100)");
	Раздел.Вставить("П002140011003", "Сумма налога к уменьшению (Приложение 6 Лист 02 строка 110)");
	Раздел.Вставить("П002140012003", "Ежемесячные авансовые платежи в квартале, следующим за отчетным периодом (Приложение 6 Лист 02 строка 120)");
	Раздел.Вставить("П002140012103", "Ежемесячные авансовые платежи на I квартал следующего налогового периода (Приложение 6 Лист 02 строка 121)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста02_6а()
	Раздел = Новый Структура;
	Раздел.Вставить("П002150003003", "Налоговая база в целом по консолидированной группе налогоплательщиков (Приложение 6а Лист 02 строка 030)");
	Раздел.Вставить("П002150003103", "Налоговая база в по консолидированной группе налогоплательщиков без учета закрытых в течение текущего налогового периода обособленных подразделений (Приложение 6а Лист 02 строка 031)");
	Раздел.Вставить("П002150004003", "Доля налоговой базы (%) (Приложение 6а Лист 02 строка 040)");
	Раздел.Вставить("П002150005003", "Налоговая база, исходя из доли (Приложение 6а Лист 02 строка 050)");
	Раздел.Вставить("П002150006003", "Ставка налога (%) в бюджет субъекта Российской Федерации (Приложение 6а Лист 02 строка 060)");
	Раздел.Вставить("П002150007003", "Сумма налога (Приложение 6а Лист 02 строка 070)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста03А()
	Раздел = Новый Структура;
	Раздел.Вставить("П002060001003", "Сумма дивидендов, подлежащих распределению между акционерами (участниками) в текущем налоговом периоде - всего (Лист 03 Раздел А строка 010)");
	Раздел.Вставить("П002060002003", "Дивиденды, начисленные иностранным организациям (Лист 03 Раздел А строка 020)");
	Раздел.Вставить("П002060003003", "Дивиденды, начисленные физическим лицам, не являющимся резидентами Российской Федерации (Лист 03 Раздел А строка 030)");
	Раздел.Вставить("П002060003103", "Дивиденды, налоги с которых согласно международным договорам исчислены по ставке 0 процентов (Лист 03 Раздел А строка 031)");
	Раздел.Вставить("П002060003203", "Дивиденды, налоги с которых согласно международным договорам исчислены до 5 процентов включительно (Лист 03 Раздел А строка 032)");
	Раздел.Вставить("П002060003303", "Дивиденды, налоги с которых согласно международным договорам исчислены свыше 5 до 10 процентов включительно (Лист 03 Раздел А строка 033)");
	Раздел.Вставить("П002060003403", "Дивиденды, налоги с которых согласно международным договорам исчислены свыше 10 процентов (Лист 03 Раздел А строка 034)");
	Раздел.Вставить("П002060004003", "Дивиденды, подлежащие распределению российским акционерам (участникам), - всего (Лист 03 Раздел А строка 040)");
	Раздел.Вставить("П002060004103", "Суммы дивидендов, подлежащие распределению российским организациям (налоговая ставка 9%) (Лист 03 Раздел А строка 041)");
	Раздел.Вставить("П002060004203", "Суммы дивидендов, подлежащие распределению российским организациям (налоговая ставка 0%) (Лист 03 Раздел А строка 042)");
	Раздел.Вставить("П002060004303", "Сумма дивидендов, распределяемая в пользу физических лиц - резидентов Российской Федерации (Лист 03 Раздел А строка 043)");
	Раздел.Вставить("П002060004403", "Сумма дивидендов, распределяемая в пользу акционеров (участников), не являющихся налогоплательщиками (Лист 03 Раздел А строка 044)");
	Раздел.Вставить("П002060007003", "Дивиденды, полученные самим налоговым агентом в предыдущем и в текущем налоговом периоде до распределения дивидендов между акционерами (участниками) (Лист 03 Раздел А строка 070)");
	Раздел.Вставить("П002060007103", "Дивиденды, полученные самим налоговым агентом в предыдущем и в текущем налоговом периоде до распределения дивидендов между акционерами (участниками) без учета полученных дивидендов, налог с которых исчислен по ставке 0% согласно пп.1 п.3 ст.284 НК (Лист 03 Раздел А строка 071)");
	Раздел.Вставить("П002060009003", "Сумма дивидендов, используемая для исчисления налога (Лист 03 Раздел А строка 090)");
	Раздел.Вставить("П002060009103", "Сумма дивидендов, используемая для исчисления налога по российским организациям (по налоговой ставке 9%) (Лист 03 Раздел А строка 091)");
	Раздел.Вставить("П002060009203", "Сумма дивидендов, используемая для исчисления налога по российским организациям (по налоговой ставке 0%) (Лист 03 Раздел А строка 092)");
	Раздел.Вставить("П002060011003", "Сумма налога, начисленная с дивидендов, выплаченных в предыдущие отчетные (налоговые) периоды (Лист 03 Раздел А строка 110)");
	Раздел.Вставить("П002060012003", "Сумма налога, начисленная с дивидендов, выплаченных в последнем квартале (месяце) отчетного (налогового) периода - всего (Лист 03 Раздел А строка 120)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста03Б()
	Раздел = Новый Структура;
	Раздел.Вставить("П002070001003", "Налоговая база (Лист 03 Раздел Б строка 010)");
	Раздел.Вставить("П002070002003", "Ставка налога (%) (Лист 03 Раздел Б строка 020)");
	Раздел.Вставить("П002070003003", "Исчислено налога с доходов (Лист 03 Раздел Б строка 030)");
	Раздел.Вставить("П002070004003", "Начислено налога в предыдущие отчетные периоды (Лист 03 Раздел Б строка 040)");
	Раздел.Вставить("П002070005003", "Сумма налога, начисленная с доходов, выплаченных в последнем квартале (месяце) отчетного (налогового) периода - всего (Лист 03 Раздел Б строка 050)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста03В()
	Раздел = Новый Структура;
	Раздел.Вставить("П002080007003", "Сумма налога (Лист 03 Раздел В строка 070)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста04()
	Раздел = Новый Структура;
	Раздел.Вставить("П002090001003", "Налоговая база (Лист 04 строка 010)");
	Раздел.Вставить("П002090002003", "Доходы, уменьшающие налоговую базу (Лист 04 строка 020)");
	Раздел.Вставить("П002090003003", "Ставка налога (%) (Лист 04 строка 030)");
	Раздел.Вставить("П002090004003", "Исчислено налога с доходов (Лист 04 строка 040)");
	Раздел.Вставить("П002090005003", "Сумма налога с выплаченных дивидендов за пределами Российской Федерации и засчитанная в уплату налога согласно порядку, установленному статьями 275, 311 НК, в предыдущие отчетные периоды (Лист 04 строка 050)");
	Раздел.Вставить("П002090006003", "Сумма налога с выплаченных дивидендов за пределами Российской Федерации и засчитываемая в уплату налога согласно порядку, установленному статьями 275, 311 НК (Лист 04 строка 060)");
	Раздел.Вставить("П002090007003", "Начислено налога, в предыдущие отчетные периоды (Лист 04 строка 070)");
	Раздел.Вставить("П002090008003", "Сумма налога, начисленная с доходов, полученных в последнем квартале (месяце) отчетного (налогового) периода - всего (Лист 04 строка 080)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста05()
	Раздел = Новый Структура;
	Раздел.Вставить("П002100001003", "Доход от выбытия, в т.ч. доход от погашения (Лист 05 строка 010)");
	Раздел.Вставить("П002100002003", "Сумма отклонения от минимальной (расчетной) цены (Лист 05 строка 020)");
	Раздел.Вставить("П002100003003", "Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением) (Лист 05 строка 030)");
	Раздел.Вставить("П002100003103", "Сумма отклонения от максимальной (расчетной) цены (Лист 05 строка 031)");
	Раздел.Вставить("П002100004003", "Итого прибыль (убыток) (Лист 05 строка 040)");
	Раздел.Вставить("П002100005003", "Сумма корректировки прибыли (убытка) (Лист 05 строка 050)");
	Раздел.Вставить("П002100006003", "Налоговая база без учета убытков, полученных в предыдущих налоговых периодах (Лист 05 строка 060)");
	Раздел.Вставить("П002100007003", "Сумма убытка или части убытка, полученного в предыдущем (предыдущих ) налоговом (налоговых) периоде (периодах) (Лист 05 строка 070)");
	Раздел.Вставить("П002100008003", "Сумма убытка или части убытка, признаваемая в отчетном (налоговом) периоде в целях налогообложения, уменьшающая налоговую базу за отчетный (налоговый) период (Лист 05 строка 080)");
	Раздел.Вставить("П002100009003", "Сумма неучтенного убытка, подлежащего переносу на будущий отчетный (налоговый) период (Лист 05 строка 090)");
	Раздел.Вставить("П002100010003", "Налоговая база (Лист 05 строка 100)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста06()
	Раздел = Новый Структура;
	Раздел.Вставить("П002110001003", "Доход негосударственного пенсионного фонда (Лист 06 строка 010)");
	Раздел.Вставить("П002110002003", "Доход негосударственного пенсионного фонда от реализации или иного выбытия ценных бумаг (в том числе погашения), обращающихся на организованном рынке ценных бумаг (Лист 06 строка 020)");
	Раздел.Вставить("П002110003003", "Доход негосударственного пенсионного фонда сумма отклонения фактической выручки от реализации ценных бумаг, обращающихся на организованном рынке ценных бумаг, от минимальной (расчетной) цены сделок на организованном рынке ценных бумаг (Лист 06 строка 030)");
	Раздел.Вставить("П002110004003", "Доход негосударственного пенсионного фонда от реализации или иного выбытия ценных бумаг (в том числе погашения), не обращающихся на организованном рынке ценных бумаг (Лист 06 строка 040)");
	Раздел.Вставить("П002110005003", "Доход негосударственного пенсионного фонда сумма отклонения фактической выручки от реализации ценных бумаг, не обращающихся на организованном рынке ценных бумаг, от минимальной (расчетной) цены (Лист 06 строка 050)");
	Раздел.Вставить("П002110006003", "Доход негосударственного пенсионного фонда в виде процентов по государственным ценным бумагам государств-участников Союзного государства, государственным ценным бумагам субъектов Российской Федерации и муниципальным ценным бумагам (Лист 06 строка 060)");
	Раздел.Вставить("П002110007003", "Доход негосударственного пенсионного фонда в виде процентов по муниципальным ценным бумагам, эмитированным на срок не менее трех лет до 01.01.2007, а также в виде процентов по облигациям с ипотечным покрытием, эмитированным до 01.01.2007, и доход учредителей доверительного правления ипотечным покрытием, полученный на основании приобретения ипотечных сертификатов участия, выданных управляющим ипотечным покрытием до 01.01.2007 (Лист 06 строка 070)");
	Раздел.Вставить("П002110008003", "Доход негосударственного пенсионного фонда от долевого участия в других организациях (Лист 06 строка 080)");
	Раздел.Вставить("П002110009003", "Доход негосударственного пенсионного фонда в виде процентов по государственным ценным бумагам государств-участников Союзного государства, государственным ценным бумагам субъектов Российской Федерации и муниципальным ценным бумагам, налог по которым удерживается налоговым агентом (Лист 06 строка 090)");
	
	Раздел.Вставить("П002110010003", "Доход негосударственного пенсионного фонда в виде процентов по муниципальным ценным бумагам, эмитированным на срок не менее трех лет до 01.01.2007, налог по которым удерживается налоговым агентом (Лист 06 строка 100)");
	Раздел.Вставить("П002110011003", "Доход негосударственного пенсионного фонда от осуществления других инвестиций (вложений) (Лист 06 строка 110)");
	Раздел.Вставить("П002110012003", "Сумма размещенных пенсионных резервов за отчетный период (Лист 06 строка 120)");
	Раздел.Вставить("П002110013003", "Доход негосударственного пенсионного фонда, рассчитанный исходя из ставки рефинансирования Банка России и суммы размещенного резерва (Лист 06 строка 130)");
	Раздел.Вставить("П002110014003", "Доход негосударственного пенсионного фонда, рассчитанный исходя из ставки рефинансирования Банка России и суммы размещенного резерва, приходящийся на ценные бумаги, обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 140)");
	Раздел.Вставить("П002110015003", "Доход негосударственного пенсионного фонда, рассчитанный исходя из ставки рефинансирования Банка России и суммы размещенного резерва, приходящийся на ценные бумаги, не обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 150)");
	Раздел.Вставить("П002110016003", "Доход негосударственного пенсионного фонда, рассчитанный исходя из ставки рефинансирования Банка России и суммы размещенного резерва в виде процентного дохода по государственным ценным бумагам государств-участников Союзного государства, государственным ценным бумагам субъектов Российской Федерации и муниципальным ценным бумагам (Лист 06 строка 160)");
	Раздел.Вставить("П002110017003", "Доход негосударственного пенсионного фонда, рассчитанный исходя из ставки рефинансирования Банка России и суммы размещенного резерва в виде процентов по муниципальным ценным бумагам, эмитированным на срок не менее трех лет до 01.01.2007, а также в виде процентов по облигациям с ипотечным покрытием, эмитированным до 01.01.2007, и доход учредителей доверительного управления ипотечным покрытием, полученный на основании приобретения ипотечных сертификатов участия, выданных управляющим ипотечным покрытием до 01.01.2007 (Лист 06 строка 170)");
	Раздел.Вставить("П002110018003", "Доход негосударственного пенсионного фонда, рассчитанный исходя из ставки рефинансирования Банка России и суммы размещенного резерва, полученный от других инвестиций (вложений) (Лист 06 строка 180)");
	Раздел.Вставить("П002110019003", "Расходы (Лист 06 строка 190)");
	
	Раздел.Вставить("П002110020003", "Расходы, приходящиеся на вложения в ценные бумаги, обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 200)");
	Раздел.Вставить("П002110020103", "Сумма отклонения от максимальной (расчетной) цены сделок на организованном рынке ценных бумаг (Лист 06 строка 201)");
	Раздел.Вставить("П002110021003", "Расходы, приходящиеся на вложения в ценные бумаги, не обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 210)");
	Раздел.Вставить("П002110021103", "Сумма отклонения от максимальной (расчетной) цены сделок на неорганизованном рынке ценных бумаг (Лист 06 строка 211)");
	Раздел.Вставить("П002110022003", "Расходы, приходящиеся на другие инвестиции (вложения) (Лист 06 строка 220)");
	Раздел.Вставить("П002110023003", "Процент отчислений на уставную деятельность от доходов, полученных от размещения пенсионных резервов, % (Лист 06 строка 230)");
	Раздел.Вставить("П002110024003", "Отчисления от доходов, полученных от размещения пенсионных резервов, направленных на формирование имущества, предназначенного для обеспечения уставной деятельности фонда (Лист 06 строка 240)");
	Раздел.Вставить("П002110025003", "Отчисления от размещения пенсионных резервов от вложений в ценные бумаги, обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 250)");
	Раздел.Вставить("П002110026003", "Отчисления от размещения пенсионных резервов от вложений в ценные бумаги, не обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 260)");
	Раздел.Вставить("П002110027003", "Отчисления от доходов, полученных в виде процентов по государственным ценным бумагам государств-участников Союзного государства, государственным ценным бумагам субъектов Российской Федерации и муниципальным ценным бумагам (Лист 06 строка 270)");
	Раздел.Вставить("П002110028003", "Отчисления от доходов в виде процентов по муниципальным ценным бумагам, эмитированным на срок не менее трех лет до 01.01.2007, а также от доходов в виде процентов по облигациям с ипотечным покрытием, эмитированным до 01.01.2007, и доходов учредителей доверительного управления ипотечным покрытием, полученным на основании приобретения ипотечных сертификатов участия, выданных управляющим ипотечным покрытием до 1 января 2007 года (Лист 06 строка 280)");
	Раздел.Вставить("П002110029003", "Отчисления от доходов, полученных от долевого участия в других организациях (Лист 06 строка 290)");
	
	Раздел.Вставить("П002110030003", "Отчисления от доходов в виде процентов по государственным ценным бумагам государств-участников Союзного государства, государственным ценным бумагам субъектов Российской Федерации и муниципальным ценным бумагам, удерживаемых налоговым агентом (Лист 06 строка 300)"); 
	Раздел.Вставить("П002110031003", "Отчисления от доходов в виде процентов по муниципальным ценным бумагам, эмитированным на срок не менее трех лет до 01.01.2007, удерживаемых налоговым агентом (источником выплаты доходов) (Лист 06 строка 310)");
	Раздел.Вставить("П002110032003", "Отчисления от осуществления других инвестиций (вложений) (Лист 06 строка 320)");
	Раздел.Вставить("П002110033003", "Прибыль (убыток) от вложений в ценные бумаги, обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 330)");
	Раздел.Вставить("П002110034003", "Суммы, исключаемые из прибыли от вложений в ценные бумаги, обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 340)");
	Раздел.Вставить("П002110035003", "Прибыль (убыток) от вложений в ценные бумаги, не обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 350)");
	Раздел.Вставить("П002110036003", "Суммы, исключаемые из прибыли от вложений в ценные бумаги, не обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 360)");
	Раздел.Вставить("П002110037003", "Доход в виде процентов по государственным ценным бумагам государств-участников Союзного государства, государственным ценным бумагам субъектов Российской Федерации и муниципальным ценным бумагам (Лист 06 строка 370)");
	Раздел.Вставить("П002110038003", "Доход в виде процентов по муниципальным ценным бумагам, эмитированным на срок не менее трех лет до 01.01.2007, а также доход в виде процентов по облигациям с ипотечным покрытием, эмитированным до 01.01.2007, и доход учредителей доверительного управления ипотечным покрытием, полученный на основании приобретения ипотечных сертификатов участия, выданных управляющим ипотечным покрытием до 01.01.2007 (Лист 06 строка 380)");
	Раздел.Вставить("П002110039003", "Прибыль (убыток) от осуществления других инвестиций (вложений) (Лист 06 строка 390)");
	
	Раздел.Вставить("П002110040003", "Суммы, исключаемые из прибыли от осуществления других инвестиций (вложений) (Лист 06 строка 400)");
	Раздел.Вставить("П002110041003", "Налоговая база от вложений в ценные бумаги, обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 410)");
	Раздел.Вставить("П002110042003", "Сумма убытка или части убытка, полученного в предыдущем (предыдущих) налоговом (налоговых) периоде (периодах). Входящее сальдо (Лист 06 строка 420)");
	Раздел.Вставить("П002110043003", "Сумма убытка, признаваемая в отчетном (налоговом) периоде в целях налогообложения (Лист 06 строка 430)");
	Раздел.Вставить("П002110044003", "Сумма неучтенного убытка, подлежащего переносу на будущий отчетный (налоговый) период. Исходящее сальдо (Лист 06 строка 440)");
	Раздел.Вставить("П002110045003", "Налоговая база от вложений в ценные бумаги, не обращающиеся на организованном рынке ценных бумаг (Лист 06 строка 450)");
	Раздел.Вставить("П002110046003", "Сумма убытка или части убытка, полученного в предыдущем (предыдущих ) налоговом (налоговых) периоде (периодах). Входящее сальдо (Лист 06 строка 460)");
	Раздел.Вставить("П002110047003", "Сумма убытка, признаваемая в отчетном (налоговом) периоде в целях налогообложения (Лист 06 строка 470)");
	Раздел.Вставить("П002110048003", "Сумма неучтенного убытка, подлежащего переносу на будущий отчетный (налоговый) период. Исходящее сальдо (Лист 06 строка 480)");
	Раздел.Вставить("П002110049003", "Налоговая база от осуществления других инвестиций (Лист 06 строка 490)");
	
	Раздел.Вставить("П002110050003", "Сумма убытка или части убытка, полученного в предыдущем (предыдущих ) налоговом (налоговых) периоде (периодах). Входящее сальдо (Лист 06 строка 500)");
	Раздел.Вставить("П002110051003", "Сумма убытка, признаваемая в отчетном (налоговом) периоде в целях налогообложения (Лист 06 строка 510)");
	Раздел.Вставить("П002110052003", "Сумма неучтенного убытка, подлежащего переносу на будущий отчетный (налоговый) период. Исходящее сальдо (Лист 06 строка 520)");
	Раздел.Вставить("П002110053003", "Налоговая база для исчисления налога (Лист 06 строка 530)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиЛиста07()
	Раздел = Новый Структура;
	Раздел.Вставить("П002120001003", "Стоимость имущества, работ, услуг или сумма денежных средств (Лист 07 строка (%n) графа 3)");
	Раздел.Вставить("П002120001004", "Сумма средств, использованных по назначению в течение установленного срока (Лист 07 строка (%n) графа 4)");
	Раздел.Вставить("П002120001006", "Сумма средств, срок использования которых не истек (Лист 07 строка (%n) графа 6)");
	Раздел.Вставить("П002120001007", "Сумма средств, использованных не по назначению или не использованных в установленный срок (Лист 07 строка (%n) графа 7)");
	Возврат Раздел;
КонецФункции

&НаСервере
Функция РасшифровкиПоказателей()
	Разделы = Новый Структура;
	Разделы.Вставить("Титульный", РасшифровкиТитульный()); 
	Разделы.Вставить("Раздел1_1", РасшифровкиРаздела1_1()); 
	Разделы.Вставить("Раздел1_2", РасшифровкиРаздела1_2()); 
	Разделы.Вставить("Раздел1_3", РасшифровкиРаздела1_3()); 
	Разделы.Вставить("Лист02", РасшифровкиЛиста02()); 
	Разделы.Вставить("Лист02_1", РасшифровкиЛиста02_1()); 
	Разделы.Вставить("Лист02_2", РасшифровкиЛиста02_2()); 
	Разделы.Вставить("Лист02_3", РасшифровкиЛиста02_3()); 
	Разделы.Вставить("Лист02_4", РасшифровкиЛиста02_4());
	Разделы.Вставить("Лист02_Прил4", РасшифровкиЛиста02_Прил4());
	Разделы.Вставить("Лист02_5", РасшифровкиЛиста02_5()); 
	Разделы.Вставить("Лист02_6", РасшифровкиЛиста02_6()); 
	Разделы.Вставить("Лист02_6а", РасшифровкиЛиста02_6а()); 
	Разделы.Вставить("Лист03А", РасшифровкиЛиста03А()); 
	Разделы.Вставить("Лист03Б", РасшифровкиЛиста03Б()); 
	Разделы.Вставить("Лист03В", РасшифровкиЛиста03В()); 
	Разделы.Вставить("Лист04", РасшифровкиЛиста04()); 
	Разделы.Вставить("Лист05", РасшифровкиЛиста05()); 
	Разделы.Вставить("Лист06", РасшифровкиЛиста06()); 
	Разделы.Вставить("Лист07", РасшифровкиЛиста07()); 
	Возврат Разделы;
КонецФункции

&НаСервере
Процедура ПроверитьКСРаздела1_1(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.1
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к доплате в федеральный бюджет (строка 040 подраздела 1.1 раздела 1) должна быть равна сумме налога на прибыль к доплате по строке 270 Листа 02 (Признак налогоплательщика (код) 1 и 3)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_1,П000110000100='1') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='1', Округлить(П000110004003)) = СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000027003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110004003)) + ' = ' + СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000027003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110004003)) > СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000027003)), 'Завышена сумма налога на прибыль к доплате', 'Занижена сумма налога на прибыль к доплате')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.2
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к уменьшению в федеральный бюджет (строка 050 подраздела 1.1 раздела 1) должна быть равна сумме налога на прибыль к уменьшению по строке 280 Листа 02 (Признак налогоплательщика (код) 1 и 3)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_1,П000110000100='1')>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110005003)) = СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000028003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110005003)) + ' = ' + СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000028003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110005003))>СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000028003)),'Завышена сумма налога на прибыль к уменьшению','Занижена сумма налога на прибыль к уменьшению')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.3
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к доплате в бюджет субъекта РФ (строка 070 подраздела 1.1 раздела 1) должна быть равна сумме налога на прибыль к доплате по строке 271 Листа 02 (Признак налогоплательщика (код) 1 и 3) при отсутствии Приложения 5 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена()) = 0 И СчитатьСтраницыЕсли(Раздел1_1,П000110000100='1')>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110007003)) = СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000027103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110007003)) + ' = ' + СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000027103))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110007003))>СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000027103)),'Завышена сумма налога на прибыль к доплате','Занижена сумма налога на прибыль к доплате')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.4
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к доплате в бюджет субъекта РФ (строка 070 подраздела 1.1 раздела 1) должна быть равна сумме налога на прибыль к доплате по строке 100 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 1) или сумма налога к доплате в бюджет субъекта РФ (строка 070) должна быть равна сумме налога на прибыль к доплате по строке 100 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 4), при условии соответствия КПП Приложения 5 к Листу 02 и КПП Титульного листа.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена()) > 0 И СчитатьСтраницыЕсли(Раздел1_1,П000110000100='1') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110007003)) = СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110007003)) + ' = ' + СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050010003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110007003))>СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050010003)),'Завышена сумма налога на прибыль к доплате','Занижена сумма налога на прибыль к доплате')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.5
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к уменьшению в бюджет субъекта РФ (строка 080 подраздела 1.1 раздела 1) должна быть равна сумме налога на прибыль к уменьшению по строке 281 Листа 02 (Признак налогоплательщика (код) 1 и 3) при отсутствии Приложения 5 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена()) = 0 И СчитатьСтраницыЕсли(Раздел1_1,П000110000100='1') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110008003)) = СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000028103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110008003)) + ' = ' + СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000028103))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110008003))>СуммироватьЕсли(Лист02,П002000000100='1' ИЛИ П002000000100='3',Округлить(П002000028103)),'Завышена сумма налога на прибыль к доплате','Занижена сумма налога на прибыль к доплате')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.6
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к уменьшению в бюджет субъекта РФ (строка 080 подраздела 1.1 раздела 1) должна быть равна сумме налога на прибыль к уменьшению по строке 110 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 1) или сумма налога к доплате в бюджет субъекта РФ (строка 080) должна быть равна сумме налога на прибыль к доплате по строке 110 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 4), при условии соответствия КПП Приложения 5 к Листу 02 и КПП Титульного листа.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, (ПоМесту='218')) И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена()) > 0 И СчитатьСтраницыЕсли(Раздел1_1,П000110000100='1') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110008003)) = СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050011003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110008003)) + ' = ' + СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050011003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110008003))>СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050011003)),'Завышена сумма налога на прибыль к доплате','Занижена сумма налога на прибыль к доплате')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.172
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к доплате в бюджет субъекта РФ по строке 070 подраздела 1.1 раздела 1 должна быть равна значению строки 100 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_1,П000110000100='1')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110007003)) = СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110007003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050010003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110007003)) > СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050010003)), 'Сумма налога к доплате завышена', 'Сумма налога к доплате занижена')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к доплате в бюджет субъекта РФ по строке 070 подраздела 1.1 раздела 1 должна быть равна значению строки 100 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_1,П000110000100='2')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5, П002050000100='2')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='2',Округлить(П000110007003)) = СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='2',Округлить(П000110007003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050010003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='2',Округлить(П000110007003)) > СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050010003)), 'Сумма налога к доплате завышена', 'Сумма налога к доплате занижена')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.173
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к уменьшению в бюджет субъекта РФ по строке 080 подраздела 1.1 раздела 1 должна быть равна значению строки 110 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_1,П000110000100='1')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110008003)) = СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050011003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110008003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050011003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='1',Округлить(П000110008003)) > СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050011003)), 'Сумма налога к уменьшению завышена', 'Сумма налога к уменьшению занижена')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к уменьшению в бюджет субъекта РФ по строке 080 подраздела 1.1 раздела 1 должна быть равна значению строки 110 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_1,П000110000100='2')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5, П002050000100='2')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1,П000110000100='2',Округлить(П000110008003)) = СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050011003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1,П000110000100='2',Округлить(П000110008003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050011003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_1,П000110000100='2',Округлить(П000110008003)) > СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050011003)), 'Сумма налога к уменьшению завышена', 'Сумма налога к уменьшению занижена')",
			//ФормулаНормыЗаконодательства
			"'п.п.1-3 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.189
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Раздел1_1";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П000110001003, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к доплате в бюджет субъекта РФ по строке 070 подраздела 1.1 раздела 1 должна быть равна значению по строке 100 Приложения 6 к Листу 02 по одному и тому же ОКАТО",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту='218'))",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1, 1=1, Округлить(П000110007003)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1, 1=1, Округлить(П000110007003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140010003))",
			//ФормулаОписанияОшибки,
			"'Сумма налога к доплате либо занижена, либо завышена'",
			//ФормулаНормыЗаконодательства
			"'п.1 и 2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.190
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Раздел1_1";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П000110001003, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к уменьшению в бюджет субъекта РФ по строке 080 подраздела 1.1 раздела 1 должна быть равна значению по строке 110 Приложения 6 к Листу 02 по одному и тому же ОКАТО",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту='218'))",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_1, 1=1, Округлить(П000110008003)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140011003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_1, 1=1, Округлить(П000110008003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140011003))",
			//ФормулаОписанияОшибки,
			"'Сумма налога к доплате либо занижена, либо завышена'",
			//ФормулаНормыЗаконодательства
			"'п.1 и 2 ст.286 НК РФ и ст.288 НК РФ'");
												
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСРаздела1_2(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.7
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"По строкам 120, 130, 140 подраздела 1.2 Раздела 1 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в федеральный бюджет, и определяемые как одна треть суммы, указанной по строке 300 Листа 02 (Признак налогоплательщика (код) 1 и 3)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, СтраницаЗаполнена() И П000120000100='1') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120012003)) = Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003))/ 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120012003)) + ' = ' + СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003))/ 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120012003)) > Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003))/ 3),'Завышена сумма ежемесячного авансового платежа','Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"По строкам 120, 130, 140 подраздела 1.2 Раздела 1 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в федеральный бюджет, и определяемые как одна треть суммы, указанной по строке 300 Листа 02 (Признак налогоплательщика (код) 1 и 3)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, СтраницаЗаполнена() И П000120000100='1') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120013003)) = Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003))/ 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120013003)) + ' = ' + СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003))/ 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120013003)) > Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003))/ 3),'Завышена сумма ежемесячного авансового платежа','Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"По строкам 120, 130, 140 подраздела 1.2 Раздела 1 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в федеральный бюджет, и определяемые как одна треть суммы, указанной по строке 300 Листа 02 (Признак налогоплательщика (код) 1 и 3)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, СтраницаЗаполнена() И П000120000100='1') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120014003)) = СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003)) - 2 * Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003))/3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120014003)) + ' = ' + СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003)) + ' : 3 Итог [' + (СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003)) - 2 * Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003))/3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120014003)) > СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003)) - 2 * Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000030003))/3), 'Завышена сумма ежемесячного авансового платежа','Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.8
		// Проверяем только, если это неконсолидированная отчетность за 9 месяцев
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Реквизит ""Квартал, на который исчисляются ежемесячные авансовые платежи"" подраздела 1.2 раздела 1 должен иметь значение ""21"" и ""24"", если строка 330 не равна строке 300 и/или строка 340 не равна строке 310 Листа 02 при условии, если период отчетности равен 9 месяцев.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И ВыбратьСтраницу(Титульный,0, Период1='3' И Период2='3') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1') > 0 И (СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', П002000030003)<>СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', П002000033003) ИЛИ СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', П002000031003)<>СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', П002000034003))",
			//ФормулаКонтрольногоСоотношения,
			"НеДобавлятьВРасшифровку(СчитатьСтраницыЕсли(Раздел1_2, П000120000100 = '1' И П000120000200='21') = 1 И СчитатьСтраницыЕсли(Раздел1_2, П000120000100 = '1' И П000120000200='24') = 1)",
			//ФормулаРасшифровки,
			"'' + СчитатьСтраницыЕсли(Раздел1_2, П000120000100 = '1' И П000120000200='21') + ' = 1" + Символы.ВК + 
			"' + СчитатьСтраницыЕсли(Раздел1_2, П000120000100 = '1' И П000120000200='24') + ' = 1" + Символы.ВК + "'",
			//ФормулаОписанияОшибки,
			"'Возможно завышение или занижение ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.9
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей (строка 120, строка 130, строка 140) должна быть равна величине по строке 330 Листа 02 (Признак налогоплательщика (код) 1 и 3), если код ""Квартала, на который исчисляются ежемесячные авансовые платежи"" подраздела 1.2  Раздела 1 равен ""21"" в декларации за 9 месяцев.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И ВыбратьСтраницу(Титульный,0, Период1='3' И Период2='3') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1' И П000120000200='21') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200='21', Округлить(П000120012003) + Округлить(П000120013003) + Округлить(П000120014003)) = СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000033003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200='21', Округлить(П000120012003)) + ' + ' + СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200='21', Округлить(П000120013003)) + ' + ' + СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200='21', Округлить(П000120014003)) + ' Итог [' + (СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200='21', Округлить(П000120012003) + Округлить(П000120013003) + Округлить(П000120014003))) + '] = ' + СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000033003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200='21', Округлить(П000120012003) + Округлить(П000120013003) + Округлить(П000120014003)) > СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000033003)), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.10
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"По строкам 220, 230, 240 подраздела 1.2 раздела 1 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в бюджет субъекта Российской Федерации, и определяемые как одна треть суммы, указанной по строке 310 Листа 02 при отсутствии Приложения 5 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) = 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120022003)) = Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))/ 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120022003)) + ' = ' + СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))/ 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120022003)) > Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))/ 3),'Завышена сумма ежемесячного авансового платежа','Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"По строкам 220, 230, 240 подраздела 1.2 раздела 1 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в бюджет субъекта Российской Федерации, и определяемые как одна треть суммы, указанной по строке 310 Листа 02 при отсутствии Приложения 5 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) = 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120023003)) = Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))/ 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120023003)) + ' = ' + СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))/ 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120023003)) > Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))/ 3), 'Завышена сумма ежемесячного авансового платежа','Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"По строкам 220, 230, 240 подраздела 1.2 раздела 1 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в бюджет субъекта Российской Федерации, и определяемые как одна треть суммы, указанной по строке 310 Листа 02 при отсутствии Приложения 5 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) = 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120024003)) = СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003)) - 2 * Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))/ 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120024003)) + ' = ' + СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003)) + ' : 3 Итог [' + (СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003)) - 2 * Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))/ 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120024003)) > СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003)) - 2 * Округлить(СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))/ 3), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.11
		// Проверяем только для организаций, не имеющих обособленные подразделения
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей (строка 220, строка 230, строка 240 подраздела 1.2 раздела 1) должна быть равна величине по строке 340 Листа 02 (Признак налогоплательщика (код) 1 и 3) при отсутствии Приложения 5 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) = 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) = СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120022003)) + ' + ' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120023003)) + ' + ' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120024003)) + ' Итог [' + (СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003))) + '] = ' + СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000031003))",
			//ФормулаОписанияОшибки,
			"'Возможно завышение или занижение ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.12
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей (строка 220, строка 230, строка 240) должна быть равна величине по строке 340 Листа 02 (Признак налогоплательщика (код) 1 и 3), если код ""Квартала, на который исчисляются ежемесячные авансовые платежи"" подраздела 1.2  Раздела 1 равен ""21"" в декларации за 9 месяцев при отсутствии Приложения 5 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И ВыбратьСтраницу(Титульный,0, Период1='3' И Период2='3') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1' И П000120000200 = '21') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) = 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) = СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000034003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120022003)) + ' + ' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120023003)) + ' + ' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120024003)) + ' Итог [' + (СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003))) + '] = ' + СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000034003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) > СуммироватьЕсли(Лист02, П002000000100='1' ИЛИ П002000000100='3', Округлить(П002000034003)), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.13
		// Проверяем только для организаций, имеющих обособленные подразделения
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячного авансового платежа в бюджет субъекта РФ по строке 220 должна быть равна одной трети величины по строке 120 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 1) или сумма ежемесячного авансового платежа в бюджет субъекта РФ по строке 220 должна быть равна одной трети величины по строке 120 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 4), при условии соответствия КПП Приложения 5 к Листу 02 и КПП Титульного листа.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120022003)) = Округлить(СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) / 3 )",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120022003)) + ' = ' + СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) / 3 )) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120022003)) > Округлить(СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) / 3), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ и ст. 288 НК РФ'");
			
		//===================================================================================================
		// ПроверитьКС 1.14
		// Проверяем только для организаций, имеющих обособленные подразделения
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячного авансового платежа в бюджет субъекта РФ по строке 230 должна быть равна одной трети величины по строке 120 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 1) или сумма ежемесячного авансового платежа в бюджет субъекта РФ по строке 230 должна быть равна одной трети величины по строке 120 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 4), при условии соответствия КПП Приложения 5 к Листу 02 и КПП Титульного листа.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120023003)) = Округлить(СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) / 3 )",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120023003)) + ' = ' + СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) / 3 )) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120023003)) > Округлить(СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) / 3), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ и ст. 288 НК РФ'");
			
		//===================================================================================================
		// ПроверитьКС 1.15
		// Проверяем только для организаций, имеющих обособленные подразделения
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячного авансового платежа в бюджет субъекта РФ по строке 240 должна быть равна одной трети величины по строке 120 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 1) или сумма ежемесячного авансового платежа в бюджет субъекта РФ по строке 240 должна быть равна одной трети величины по строке 120 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 4), при условии соответствия КПП Приложения 5 к Листу 02 и КПП Титульного листа.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120024003)) = СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) / 3 )",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120024003)) + ' = ' + СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) + ' : 3 Итог [' + (СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) / 3 )) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 <> '21', Округлить(П000120024003)) > СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012003)) / 3 ), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ и ст. 288 НК РФ'");
			
		//===================================================================================================
		// ПроверитьКС 1.16
		// Проверяем только для организаций, имеющих обособленные подразделения,
		//           только, если декларация за 9 месяцев,
		//           только, если есть листы Подраздела 1.2 с 
		//					Риквизитом "Квартал, на который начисляются авансовые платежи" 21
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей (строка 220, строка 230, строка 240) должна быть равна величине по строке 121 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 1) или сумма ежемесячных авансовых платежей в бюджет субъекта РФ (строка 220, строка 230, строка 240) должна быть равна величне по строке 121 Приложения 5 к Листу 02 (Признак налогоплательщика (код) 1 и 3; Расчет составлен (код) 4), при условии соответствия КПП Приложения 5 к Листу 02 и КПП Титульного листа.), если код ""Квартала, на который исчисляются ежемесячные авансовые платежи"" подраздела 1.2  Раздела 1 равен ""21"" в декларации за 9 месяцев",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту <> '218' И Период1='3' И Период2='3') И СчитатьСтраницыЕсли(Раздел1_2, П000120000100='1' И П000120000200 = '21') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) = СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120022003)) + ' + ' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120023003)) + ' + ' + СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120024003)) + ' Итог [' + (СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003))) + '] = ' + СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012103))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100 = '1' И П000120000200 = '21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) > СуммироватьЕсли(Лист02_5,(П002050000100='1' ИЛИ П002050000100='3') И (П002050001000='1' ИЛИ (П002050001000='4' И СобратьПоказатель('КПП1')=П002050002001)), Округлить(П002050012103)), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ и ст. 288'");
			
		//===================================================================================================
		// ПроверитьКС 1.17
		// Проверяем только, если это отчетность за год
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Значения строк 120, 130, 140, 220, 230, 240 подраздела 1.2 раздела 1 должны быть равны нулю, если Код налогового отчетного периода на Титульном листе равен одному из значений 34, 46, 68, 50",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, (Период1='1' И Период2='6') ИЛИ (Период1='3' И Период2='4') ИЛИ (Период1='4' И Период2='6') ИЛИ (Период1='6' И Период2='8') ИЛИ (Период1='5' И Период2='0'))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Раздел1_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П000120012003) = 0 И Округлить(П000120013003) = 0 И Округлить(П000120014003) = 0 И Округлить(П000120022003) = 0 И Округлить(П000120023003) = 0 И Округлить(П000120024003) = 0",
			//ФормулаРасшифровки,
			"'" + Символы.ВК + "' + "
			+ "'' + Округлить(П000120012003) + ' = 0," + Символы.ВК + "' + "
			+ "'' + Округлить(П000120013003) + ' = 0," + Символы.ВК + "' + "
			+ "'' + Округлить(П000120014003) + ' = 0," + Символы.ВК + "' + "
			+ "'' + Округлить(П000120022003) + ' = 0," + Символы.ВК + "' + "
			+ "'' + Округлить(П000120023003) + ' = 0," + Символы.ВК + "' + "
			+ "'' + Округлить(П000120024003) + ' = 0," + Символы.ВК + "'",			
			//ФормулаОписанияОшибки,
			"Если(Округлить(П000120012003) > 0 ИЛИ Округлить(П000120013003) > 0 ИЛИ Округлить(П000120014003) > 0 ИЛИ Округлить(П000120022003) > 0 ИЛИ Округлить(П000120023003) > 0 ИЛИ Округлить(П000120024003) > 0, 'Сумма ежемесячного авансового платежа необоснованно заявлена', '')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст. 286 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.174
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Суммы ежемесячных авансовых платежей в бюджет субъекта РФ по строкам 220, 230, 240 должны быть равны одной трети значения строки 120 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='1' ИЛИ П002050000100='3') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200 <> '21', Округлить(П000120022003)) = Округлить(СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) / 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200 <> '21', Округлить(П000120022003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) / 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21',Округлить(П000120022003)) > Округлить(СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) / 3), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Суммы ежемесячных авансовых платежей в бюджет субъекта РФ по строкам 220, 230, 240 должны быть равны одной трети значения строки 120 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='2')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21',Округлить(П000120022003)) = Округлить(СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) / 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21',Округлить(П000120022003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) / 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21',Округлить(П000120022003)) > Округлить(СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) / 3), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Суммы ежемесячных авансовых платежей в бюджет субъекта РФ по строкам 220, 230, 240 должны быть равны одной трети значения строки 120 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='1' ИЛИ П002050000100='3')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21',Округлить(П000120023003)) = Округлить(СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) / 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21',Округлить(П000120023003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) / 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21',Округлить(П000120023003)) > Округлить(СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) / 3), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Суммы ежемесячных авансовых платежей в бюджет субъекта РФ по строкам 220, 230, 240 должны быть равны одной трети значения строки 120 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='2')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21',Округлить(П000120023003)) = Округлить(СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) / 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21',Округлить(П000120023003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) / 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21',Округлить(П000120023003)) > Округлить(СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) / 3), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Суммы ежемесячных авансовых платежей в бюджет субъекта РФ по строкам 220, 230, 240 должны быть равны одной трети значения строки 120 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='1' ИЛИ П002050000100='3')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21',Округлить(П000120024003)) = СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) / 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21',Округлить(П000120024003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) + ' : 3 Итог [' + (СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) / 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200 <> '21',Округлить(П000120024003)) > СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012003)) / 3), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Суммы ежемесячных авансовых платежей в бюджет субъекта РФ по строкам 220, 230, 240 должны быть равны одной трети значения строки 120 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220') И (СчитатьСтраницыЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='2')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21',Округлить(П000120024003)) = СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) / 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21',Округлить(П000120024003)) + ' = ' + СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) + ' : 3 Итог [' + (СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) / 3)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200 <> '21',Округлить(П000120024003)) > СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012003)) / 3), 'Завышена сумма ежемесячного авансового платежа', 'Занижена сумма ежемесячного авансового платежа')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		
		//===================================================================================================
		// ПроверитьКС 1.175
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей по строкам 220, 230, 240 должна быть равна значению строки 121 Приложения 5 к Листу 02, если декларация представлена за 9 месяцев и код квартала, на который исчисляются ежемесячные авансовые платежи равен ""21""",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220' И ((Период1='1' И Период2='5') ИЛИ (Период1='3' И Период2='3'))) И (СчитатьСтраницыЕсли(Раздел1_2,П000120000100='1' И П000120000200 = '21')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='1' ИЛИ П002050000100='3')>0 )",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200='21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) = СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200='21',Округлить(П000120022003)) + ' + ' + СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200='21',Округлить(П000120023003)) + ' + ' + СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200='21',Округлить(П000120024003)) + ' Итог [' + (СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200='21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003))) + '] = ' + СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012103))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100='1' И П000120000200='21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) > СуммироватьЕсли(Лист02_5, П002050000100='1' ИЛИ П002050000100='3', Округлить(П002050012103)), 'Сумма ежемесячного авансового платежа завышена', 'Сумма ежемесячного авансового платежа занижена')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей по строкам 220, 230, 240 должна быть равна значению строки 121 Приложения 5 к Листу 02, если декларация представлена за 9 месяцев и код квартала, на который исчисляются ежемесячные авансовые платежи равен ""21""",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='220' И ((Период1='1' И Период2='5') ИЛИ (Период1='3' И Период2='3'))) И (СчитатьСтраницыЕсли(Раздел1_2,П000120000100='2' И П000120000200 = '21')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='2')>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000100='2' И П000120000200='21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) = СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2,П000120000100='2' И П000120000200='21',Округлить(П000120022003)) + ' + ' + СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200='21',Округлить(П000120023003)) + ' + ' + СуммироватьЕсли(Раздел1_2,П000120000100='1' И П000120000200='21',Округлить(П000120024003)) + ' Итог [' + (СуммироватьЕсли(Раздел1_2, П000120000100='2' И П000120000200='21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003))) + '] = ' + СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012103))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_2, П000120000100='2' И П000120000200='21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) > СуммироватьЕсли(Лист02_5, П002050000100='2', Округлить(П002050012103)), 'Сумма ежемесячного авансового платежа завышена', 'Сумма ежемесячного авансового платежа занижена')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.191
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Раздел1_2";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П000120001003, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячного авансового платежа в бюджет субъекта РФ по строке 220 должна быть равна одной трети величины по строке 120 Приложения 6 к Листу 02 по одному и тому же ОКАТО",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000200 <> '21', Округлить(П000120022003)) = Округлить(СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) / 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, 1=1, Округлить(П000120022003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) / 3)) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма ежемесячного авансового платежа завышена либо занижена'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.192
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Раздел1_2";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П000120001003, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячного авансового платежа в бюджет субъекта РФ по строке 230 должна быть равна одной трети величины по строке 120 Приложения 6 к Листу 02 по одному и тому же ОКАТО",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту='218'))",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, 1=1, Округлить(П000120023003)) = Округлить(СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) / 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000200 <> '21', Округлить(П000120023003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) + ' : 3 Итог [' + (Округлить(СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) / 3)) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма ежемесячного авансового платежа завышена либо занижена'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.193
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Раздел1_2";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П000120001003, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячного авансового платежа в бюджет субъекта РФ по строке 240 должна быть равна одной трети величины по строке 120 Приложения 6 к Листу 02 по одному и тому же ОКАТО",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту='218'))",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, 1=1, Округлить(П000120024003)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) / 3)",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000200 <> '21', Округлить(П000120024003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) + ' : 3 Итог [' + (СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) - 2 * Округлить(СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003)) / 3)) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма ежемесячного авансового платежа завышена либо занижена'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.194
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Раздел1_2";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П000120001003, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей по строкам 220, 230, 240 должна быть равна значению строки 121 Приложения 6 к Листу 02 по одному и тому же ОКАТО, если декларация представлена за 9 месяцев и код квартала, на который исчисляются ежемесячные авансовые платежи равен ""21""",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='218' И ((Период1='1' И Период2='5') ИЛИ (Период1='3' И Период2='3')))",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"СчитатьСтраницыЕсли(Раздел1_2, П000120000200='21') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_6, 1=1) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_2, П000120000200='21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_2, П000120000200='21', Округлить(П000120022003)) + ' + ' + СуммироватьЕсли(Раздел1_2, 1=1, Округлить(П000120023003)) + ' + ' + СуммироватьЕсли(Раздел1_2, 1=1, Округлить(П000120024003)) + ' Итог [' + (СуммироватьЕсли(Раздел1_2, П000120000200='21', Округлить(П000120022003) + Округлить(П000120023003) + Округлить(П000120024003))) + '] = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012103))",
			//ФормулаОписанияОшибки,
			"'Сумма ежемесячного авансового платежа завышена либо занижена'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСРаздела1_3(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.18
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, подлежащая уплате (сумма строк 040) должна быть равна сумме налога, начисленной с дивидендов (строка 120 Листа 03 Раздел А), если код вида платежа в Подразделе 1.3 Раздела 1 равен ""1""",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Раздел1_3, П000130001003 = '1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист03А, СтраницаЗаполнена()) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_3, П000130001003='1', СуммаМногострочногоПоказателя('П000130004003')) = СуммироватьЕсли(Лист03А, 1=1, Округлить(П002060012003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_3, П000130001003='1', СуммаМногострочногоПоказателя('П000130004003')) + ' = ' + СуммироватьЕсли(Лист03А, 1=1, Округлить(П002060012003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_3, П000130001003='1', СуммаМногострочногоПоказателя('П000130004003')) > СуммироватьЕсли(Лист03А, 1=1, Округлить(П002060012003)), 'Завышена сумма налога', 'Занижена сумма налога')",
			//ФормулаНормыЗаконодательства
			"'п.2 и п.2.1 ст.275 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.19
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, подлежащая уплате (сумма строк 040) должна быть равна сумме налога, начисленной с доходов (строка 050 Листа 03 Раздел Б с кодом ""1"" и с кодом ""2""), если код вида платежа в Подразделе 1.3 Раздела 1 равен ""2""",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Раздел1_3, П000130001003 = '2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист03Б, П002070000200='1' ИЛИ П002070000200='2') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_3, П000130001003='2', СуммаМногострочногоПоказателя('П000130004003')) = СуммироватьЕсли(Лист03Б, П002070000200='1' ИЛИ П002070000200='2', Округлить(П002070005003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_3, П000130001003='2', СуммаМногострочногоПоказателя('П000130004003')) + ' = ' + СуммироватьЕсли(Лист03Б, П002070000200='1' ИЛИ П002070000200='2', Округлить(П002070005003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_3, П000130001003='2', СуммаМногострочногоПоказателя('П000130004003')) > СуммироватьЕсли(Лист03Б, П002070000200='1' ИЛИ П002070000200='2', Округлить(П002070005003)), 'Завышена сумма налога', 'Занижена сумма налога')",
			//ФормулаНормыЗаконодательства
			"'ст. 281 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.20
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, подлежащая уплате (сумма строк 040) должна быть равна сумме налога, начисленной с доходов (строка 080 Листа 04 с кодом ""1"" и с кодом ""2""), если код вида платежа в Подразделе 1.3 Раздела 1 равен ""3""",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Раздел1_3, П000130001003 = '3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист04, П002090000200='1' ИЛИ П002090000200='2') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_3, П000130001003='3', СуммаМногострочногоПоказателя('П000130004003')) = СуммироватьЕсли(Лист04, П002090000200='1' ИЛИ П002090000200='2', Округлить(П002090008003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_3, П000130001003='3', СуммаМногострочногоПоказателя('П000130004003')) + ' = ' + СуммироватьЕсли(Лист04, П002090000200='1' ИЛИ П002090000200='2', Округлить(П002090008003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_3, П000130001003='3', СуммаМногострочногоПоказателя('П000130004003')) > СуммироватьЕсли(Лист04, П002090000200='1' ИЛИ П002090000200='2', Округлить(П002090008003)), 'Завышена сумма налога', 'Занижена сумма налога')",
			//ФормулаНормыЗаконодательства
			"'ст. 281 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.21
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, подлежащая уплате (сумма строк 040) должна быть равна сумме налога, начисленной с доходов (строка 080 Листа 04 с кодом ""4""), если код вида платежа в Подразделе 1.3 Раздела 1 равен ""4""",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Раздел1_3, П000130001003 = '4') > 0 ИЛИ СчитатьСтраницыЕсли(Лист04, П002090000200='4') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_3, П000130001003='4', СуммаМногострочногоПоказателя('П000130004003')) = СуммироватьЕсли(Лист04, П002090000200='4', Округлить(П002090008003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_3, П000130001003='4', СуммаМногострочногоПоказателя('П000130004003')) + ' = ' + СуммироватьЕсли(Лист04, П002090000200='4', Округлить(П002090008003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_3, П000130001003='4', СуммаМногострочногоПоказателя('П000130004003')) > СуммироватьЕсли(Лист04, П002090000200='4', Округлить(П002090008003)), 'Завышена сумма налога', 'Занижена сумма налога')",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.275 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.22
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, подлежащая уплате (сумма строк 040) должна быть равна сумме налога, начисленной с доходов (строка 080 Листа 04 с кодом ""6""), если код вида платежа в Подразделе 1.3 Раздела 1 равен ""5""",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Раздел1_3, П000130001003 = '5') > 0 ИЛИ СчитатьСтраницыЕсли(Лист04, П002090000200='6') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Раздел1_3, П000130001003='5', СуммаМногострочногоПоказателя('П000130004003')) = СуммироватьЕсли(Лист04, П002090000200='6', Округлить(П002090008003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Раздел1_3, П000130001003='5', СуммаМногострочногоПоказателя('П000130004003')) + ' = ' + СуммироватьЕсли(Лист04, П002090000200='6', Округлить(П002090008003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Раздел1_3, П000130001003='5', СуммаМногострочногоПоказателя('П000130004003')) > СуммироватьЕсли(Лист04, П002090000200='6', Округлить(П002090008003)), 'Завышена сумма налога', 'Занижена сумма налога')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.282 НК РФ'");
												
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста02(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.23
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма доходов от реализации (строка 010 Листа 02) должна быть равна итоговой сумме доходов от реализации по строке 040 Приложения 1 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_1, П002010000100='1') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000001003)) = СуммироватьЕсли(Лист02_1, П002010000100='1', Округлить(П002010004003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000001003)) + ' = ' + СуммироватьЕсли(Лист02_1, П002010000100='1', Округлить(П002010004003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма доходов от реализации (строка 010 Листа 02) должна быть равна итоговой сумме доходов от реализации по строке 040 Приложения 1 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_1, П002010000100='2') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000001003)) = СуммироватьЕсли(Лист02_1, П002010000100='2', Округлить(П002010004003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000001003)) + ' = ' + СуммироватьЕсли(Лист02_1, П002010000100='2', Округлить(П002010004003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма доходов от реализации (строка 010 Листа 02) должна быть равна итоговой сумме доходов от реализации по строке 040 Приложения 1 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_1, П002010000100='3') > 0)  И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000001003)) = СуммироватьЕсли(Лист02_1, П002010000100='3', Округлить(П002010004003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000001003)) + ' = ' + СуммироватьЕсли(Лист02_1, П002010000100='3', Округлить(П002010004003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.24
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма доходов от реализации (строка 010 Листа 02) не должна быть меньше, чем отчисления от доходов, полученных от размещения пенсионных резервов, направленных на формирование имущества, предназначенного для обеспечения уставной деятельности фонда (строка 240 Листа 06)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист06, СтраницаЗаполнена()) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, 1=1, Округлить(П002000001003)) >= СуммироватьЕсли(Лист06, 1=1, Округлить(П002110024003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, 1=1, Округлить(П002000001003)) + ' >= ' + СуммироватьЕсли(Лист06, 1=1, Округлить(П002110024003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.25
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма внереализационных доходов (строка 020 Листа 02) должна быть равна итоговой сумме внереализационных доходов по строке 100 Приложения 1 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_1, П002010000100='1') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000002003)) = СуммироватьЕсли(Лист02_1, П002010000100='1', Округлить(П002010010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000002003)) + ' = ' + СуммироватьЕсли(Лист02_1, П002010000100='1', Округлить(П002010010003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма внереализационных доходов (строка 020 Листа 02) должна быть равна итоговой сумме внереализационных доходов по строке 100 Приложения 1 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_1, П002010000100='2') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000002003)) = СуммироватьЕсли(Лист02_1, П002010000100='2', Округлить(П002010010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000002003)) + ' = ' + СуммироватьЕсли(Лист02_1, П002010000100='2', Округлить(П002010010003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма внереализационных доходов (строка 020 Листа 02) должна быть равна итоговой сумме внереализационных доходов по строке 100 Приложения 1 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_1, П002010000100='3') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000002003)) = СуммироватьЕсли(Лист02_1, П002010000100='3', Округлить(П002010010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000002003)) + ' = ' + СуммироватьЕсли(Лист02_1, П002010000100='3', Округлить(П002010010003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.26
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов, уменьшающих сумму доходов от реализации (строка 030 Листа 02) должна быть равна итоговой сумме признанных расходов по строке 130 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_2, П002020000100='1') > 0) И СчитатьСтраницыЕсли(Лист06, СтраницаЗаполнена()) = 0 И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000003003)) = СуммироватьЕсли(Лист02_2, П002020000100='1', Округлить(П002020013003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000003003)) + ' = ' + СуммироватьЕсли(Лист02_2, П002020000100='1', Округлить(П002020013003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов, уменьшающих сумму доходов от реализации (строка 030 Листа 02) должна быть равна итоговой сумме признанных расходов по строке 130 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_2, П002020000100='2') > 0) И СчитатьСтраницыЕсли(Лист06, СтраницаЗаполнена()) = 0 И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000003003)) = СуммироватьЕсли(Лист02_2, П002020000100='2', Округлить(П002020013003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000003003)) + ' = ' + СуммироватьЕсли(Лист02_2, П002020000100='2', Округлить(П002020013003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов, уменьшающих сумму доходов от реализации (строка 030 Листа 02) должна быть равна итоговой сумме признанных расходов по строке 130 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_2, П002020000100='3') > 0) И СчитатьСтраницыЕсли(Лист06, СтраницаЗаполнена()) = 0 И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000003003)) = СуммироватьЕсли(Лист02_2, П002020000100='3', Округлить(П002020013003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000003003)) + ' = ' + СуммироватьЕсли(Лист02_2, П002020000100='3', Округлить(П002020013003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.27
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма внереализационных расходов (строка 040 Листа 02) должна быть равна сумме величин по строке 200 и строке 300 Приложения 2 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_2, П002020000100='1') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000004003)) = СуммироватьЕсли(Лист02_2, П002020000100='1', Округлить(П002020020003) + Округлить(П002020030003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000004003)) + ' = ' + СуммироватьЕсли(Лист02_2, П002020000100='1', Округлить(П002020020003)) + ' + ' + СуммироватьЕсли(Лист02_2, П002020000100='1', Округлить(П002020030003)) + ' Итог [' + (СуммироватьЕсли(Лист02_2, П002020000100='1', Округлить(П002020020003) + Округлить(П002020030003))) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма внереализационных расходов (строка 040 Листа 02) должна быть равна сумме величин по строке 200 и строке 300 Приложения 2 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_2, П002020000100='2') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000004003)) = СуммироватьЕсли(Лист02_2, П002020000100='2', Округлить(П002020020003) + Округлить(П002020030003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000004003)) + ' = ' + СуммироватьЕсли(Лист02_2, П002020000100='2', Округлить(П002020020003)) + ' + ' + СуммироватьЕсли(Лист02_2, П002020000100='2', Округлить(П002020030003)) + ' Итог [' + (СуммироватьЕсли(Лист02_2, П002020000100='2', Округлить(П002020020003) + Округлить(П002020030003))) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма внереализационных расходов (строка 040 Листа 02) должна быть равна сумме величин по строке 200 и строке 300 Приложения 2 к Листу 02.",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_2, П002020000100='3') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000004003)) = СуммироватьЕсли(Лист02_2, П002020000100='3', Округлить(П002020020003) + Округлить(П002020030003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000004003)) + ' = ' + СуммироватьЕсли(Лист02_2, П002020000100='3', Округлить(П002020020003)) + ' + ' + СуммироватьЕсли(Лист02_2, П002020000100='3', Округлить(П002020030003)) + ' Итог [' + (СуммироватьЕсли(Лист02_2, П002020000100='3', Округлить(П002020020003) + Округлить(П002020030003))) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.28
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма убытков (строка 050 Листа 02) должна быть равна величине убытков по строке 360 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_3, П002030000100='1') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000005003)) = СуммироватьЕсли(Лист02_3, П002030000100='1', Округлить(П002030036003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000005003)) + ' = ' + СуммироватьЕсли(Лист02_3, П002030000100='1', Округлить(П002030036003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма убытков (строка 050 Листа 02) должна быть равна величине убытков по строке 360 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_3, П002030000100='2') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000005003)) = СуммироватьЕсли(Лист02_3, П002030000100='2', Округлить(П002030036003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000005003)) + ' = ' + СуммироватьЕсли(Лист02_3, П002030000100='2', Округлить(П002030036003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма убытков (строка 050 Листа 02) должна быть равна величине убытков по строке 360 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_3, П002030000100='3') > 0) И ВыбратьСтраницу(Титульный,0, Период1='1' ИЛИ Период1='2' ИЛИ (Период1='3' И (Период2='1' ИЛИ Период2='3' ИЛИ Период2='4' ИЛИ Период2='7')) ИЛИ (Период1='4' И (Период2='0' ИЛИ Период2='3' ИЛИ Период2='6')) ИЛИ (Период1='5' И (Период2='0' ИЛИ Период2='9')) ИЛИ (Период1='6' И (Период2='2' ИЛИ Период2='5' ИЛИ Период2='8')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000005003)) = СуммироватьЕсли(Лист02_3, П002030000100='3', Округлить(П002030036003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000005003)) + ' = ' + СуммироватьЕсли(Лист02_3, П002030000100='3', Округлить(П002030036003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.29
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Итоговая сумма прибыли (или убытка) по строке 060 Листа 02 должна быть равна величине, рассчитанной как сумма значений строк 010 и 020 минус значения по строкам 030 и 040 и плюс значение строки 050 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000006003) = Округлить(П002000001003) + Округлить(П002000002003) - Округлить(П002000003003) - Округлить(П002000004003) + Округлить(П002000005003)",
			//ФормулаРасшифровки,
			"'' + П002000006003 + ' = ' + П002000001003 + ' + ' + П002000002003 + ' - ' + П002000003003 + ' - ' + П002000004003 + ' + ' + П002000005003 + ' Итог [' + (Округлить(П002000001003) + Округлить(П002000002003) - Округлить(П002000003003) - Округлить(П002000004003) + Округлить(П002000005003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.30
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма льгот, предусмотренных законодательством Российской Федерации (строка 090 Листа 02) равна нулю",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000009003) = 0",
			//ФормулаРасшифровки,
			"'' + П002000009003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"'Возможно неправомерное применение льготы'",
			//ФормулаНормыЗаконодательства
			"'ст.5 Федерального закона от 31.05.1999 №104-ФЗ'");
												
		//===================================================================================================
		// ПроверитьКС 1.31
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л05Ст100", "СуммироватьЕсли(Лист05,1=1,Округлить(П002100010003))");
		СтруктураФормулЛокальныхПееременных.Вставить("Л06Ст530", "СуммироватьЕсли(Лист06,1=1,Округлить(П002110053003))");
		
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база (строка 100 Листа 02) должна быть рассчитана как разница строк 060, 070, 080, 090 плюс строка 100 Листа 5 плюс строка 530 Листа 6, при условии что строка 100 Листа 5 больше нуля и (или) строка 530 Листа 6 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СуммироватьЕсли(Лист05,1=1,Округлить(П002100010003)) > 0 ИЛИ СуммироватьЕсли(Лист06,1=1,Округлить(П002110053003)) > 0)",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000010003) = Округлить(П002000006003) - Округлить(П002000007003) - Округлить(П002000008003) - Округлить(П002000009003) + $Л05Ст100 + $Л06Ст530",
			//ФормулаРасшифровки,
			"'' + П002000010003 + ' = ' + П002000006003 + ' - ' + П002000007003 + ' - ' + П002000008003 + ' - ' + П002000009003 + ' + ' + $Л05Ст100 + ' + ' + $Л06Ст530 + ' Итог [' + (Округлить(П002000006003) - Округлить(П002000007003) - Округлить(П002000008003) - Округлить(П002000009003) + $Л05Ст100 + $Л06Ст530) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.32
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база (строка 100 Листа 02) должна быть рассчитана как разница строк 060, 070, 080, 090 , при условии что строка 100 Листов 5 меньше либо равна нулю и (или) строка 530 Листа 6 меньше либо равна нулю",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СуммироватьЕсли(Лист05,1=1,Округлить(П002100010003)) < 0 ИЛИ СуммироватьЕсли(Лист06,1=1,Округлить(П002110053003)) < 0)",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000010003) = Округлить(П002000006003) - Округлить(П002000007003) - Округлить(П002000008003) - Округлить(П002000009003)",
			//ФормулаРасшифровки,
			"'' + П002000010003 + ' = ' + П002000006003 + ' - ' + П002000007003 + ' - ' + П002000008003 + ' - ' + П002000009003 + ' Итог [' + (Округлить(П002000006003) - Округлить(П002000007003) - Округлить(П002000008003) - Округлить(П002000009003)) + ']'",
			//ФормулаОписанияОшибки,
			"Если(Округлить(П002000010003) < Округлить(П002000006003) - Округлить(П002000007003) - Округлить(П002000008003) - Округлить(П002000009003), 'Занижена налоговая база на убытки по ценным бумагам и ФИСС.', '')",
			//ФормулаНормыЗаконодательства
			"'п.10 ст.280 НК РФ, п.1 ст.283 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.33
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Если налоговая база (строка 100 Листа 02) меньше или равна нулю, то значения строк 110, 120, 130, 180, 190, 200, 270, 271, 290, 300, 310 должны быть равны нулю",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000010003) <= 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000011003) = 0 И Округлить(П002000012003) = 0 И Округлить(П002000013003) = 0 И Округлить(П002000018003) = 0 И Округлить(П002000019003) = 0 И Округлить(П002000020003) = 0 И Округлить(П002000027003) = 0 И Округлить(П002000027103) = 0 И Округлить(П002000029003) = 0 И Округлить(П002000030003) = 0 И Округлить(П002000031003) = 0",
			//ФормулаРасшифровки,
			  "'' + П002000011003 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000012003 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000013003 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000018003 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000019003 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000020003 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000027003 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000027103 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000029003 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000030003 + ' = 0," + Символы.ВК + "' + "
			  + "'' + П002000031003 + ' = 0," + Символы.ВК + "'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.34
		//===================================================================================================
		ДопустимыеПериоды = "(Период1='1' И Период2='3') ИЛИ "
						  + "(Период1='1' И Период2='6') ИЛИ "
						  + "(Период1='2' И Период2='1') ИЛИ "
						  + "(Период1='3' И Период2='4') ИЛИ "
						  + "(Период1='3' И Период2='7') ИЛИ "
						  + "(Период1='4' И Период2='6') ИЛИ "
						  + "(Период1='5' И Период2='9') ИЛИ "
						  + "(Период1='6' И Период2='8')";
		
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма убытка или части убытка, уменьшающего налоговую базу (строка 110 Листа 02) должна быть равна величине убытка по строке 150 Приложения 4 к Листу 02, при условии если отчетный период равен I кварталу (или 3 месяца)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_4, П002040000100='1') > 0) И ВыбратьСтраницу(Титульный, 0, " + ДопустимыеПериоды + ")",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000011003)) = СуммироватьЕсли(Лист02_4, П002040000100='1', Округлить(П002040015003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000011003)) + ' = ' + СуммироватьЕсли(Лист02_4, П002040000100='1', Округлить(П002040015003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма убытка или части убытка, уменьшающего налоговую базу (строка 110 Листа 02) должна быть равна величине убытка по строке 150 Приложения 4 к Листу 02, при условии если отчетный период равен I кварталу (или 3 месяца)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_4, П002040000100='2') > 0) И ВыбратьСтраницу(Титульный, 0, " + ДопустимыеПериоды + ")",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000011003)) = СуммироватьЕсли(Лист02_4, П002040000100='2', Округлить(П002040015003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000011003)) + ' = ' + СуммироватьЕсли(Лист02_4, П002040000100='2', Округлить(П002040015003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма убытка или части убытка, уменьшающего налоговую базу (строка 110 Листа 02) должна быть равна величине убытка по строке 150 Приложения 4 к Листу 02, при условии если отчетный период равен I кварталу (или 3 месяца)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_4, П002040000100='3') > 0) И ВыбратьСтраницу(Титульный, 0, " + ДопустимыеПериоды + ")",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000011003)) = СуммироватьЕсли(Лист02_4, П002040000100='3', Округлить(П002040015003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000011003)) + ' = ' + СуммироватьЕсли(Лист02_4, П002040000100='3', Округлить(П002040015003))",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.35
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база для исчисления налога (строка 120 Листа 02) должна быть равна разнице строк 100 и 110 Листа 02 при условии, что строка 100 Листа 02 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000010003) > 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000012003) = Округлить(П002000010003) - Округлить(П002000011003)",
			//ФормулаРасшифровки,
			"'' + П002000012003 + ' = ' + П002000010003 + ' - ' + П002000011003 + ' Итог [' + (Округлить(П002000010003) - Округлить(П002000011003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		//===================================================================================================
		// ПроверитьКС 1.36
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база для исчисления налога (строка 120 Листа 02) равна нулю, если величина строки 100 Листа 02 равна величине строки 110 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000010003) = Округлить(П002000011003)",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000012003) = 0",
			//ФормулаРасшифровки,
			"'' + П002000012003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		//===================================================================================================
		// ПроверитьКС 1.37
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база для исчисления налога в бюджет субъекта РФ (строка 130 Листа 02) равна нулю",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000013003) = 0",
			//ФормулаРасшифровки,
			"'' + П002000013003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"Если(Округлить(П002000013003) > 0 И Округлить(П002000013003) <= Округлить(П002000012003), 'Возможно завышение налоговой базы, к которой применяется пониженная ставка налога', '')",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.284 НК РФ'");
			
		//===================================================================================================
		// ПроверитьКС 1.38
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога на прибыль по строке 140 Листа 02 равна сумме значений по строкам 150 и 160 Листа 02, если налоговая база для исчисления налога в бюджет субъекта РФ (строка 130 Листа 02) равна нулю",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000013003) = 0",
			//ФормулаКонтрольногоСоотношения,
			"Число(П002000014003) = Число(П002000015003) + Число(П002000016003)",
			//ФормулаРасшифровки,
			"'' + П002000014003 + ' = ' + П002000015003 + ' + ' + П002000016003 + ' Итог [' + (Число(П002000015003) + Число(П002000016003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		//===================================================================================================
		// ПроверитьКС 1.39
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога на прибыль по строке 140 Листа 02 равна сумме значений по строкам 150 и 170 Листа 02, если налоговая база для исчисления налога в бюджет субъекта РФ (строка 130 Листа 02) равна значению общей налоговой базы (строка 120 Листа 02)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000013003) = Округлить(П002000012003) И Округлить(П002000013003) > 0",
			//ФормулаКонтрольногоСоотношения,
			"Число(П002000014003) = Число(П002000015003) + Число(П002000017003)",
			//ФормулаРасшифровки,
			"'' + П002000014003 + ' = ' + П002000015003 + ' + ' + П002000017003 + ' Итог [' + (Число(П002000015003) + Число(П002000017003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		//===================================================================================================
		// ПроверитьКС 1.40
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога на прибыль по строке 140 Листа 02 не должна быть заполнена, если налоговая база для исчисления налога в бюджет субъекта РФ (строка 130 Листа 02) не равна нулю и меньше общей суммы налоговой базы (строка 120 Листа 02)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000013003) < Округлить(П002000012003) И Округлить(П002000013003) <> 0",
			//ФормулаКонтрольногоСоотношения,
			"Число(П002000014003) = 0",
			//ФормулаРасшифровки,
			"'' + П002000014003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		//===================================================================================================
		// ПроверитьКС 1.41
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога на прибыль в федеральный бюджет (строка 150 Листа 02) должна быть равна 2% при условии, если код признака налогоплательщика Листа 02 равен ""1""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002000000100 = '1'",
			//ФормулаКонтрольногоСоотношения,
			"Число(П002000015003) = 2",
			//ФормулаРасшифровки,
			"'' + П002000015003 + ' = 2%'",
			//ФормулаОписанияОшибки,
			"Если(Число(П002000015003) < 2, 'Необходимо проверить доументальное обоснование применения пониженной ставки налога на прибыль в федеральный бюджет.', '')",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.284 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.42
		//===================================================================================================
		СтруктураФормулЛокальныхПеременных = Новый Соответствие;
		СтруктураФормулЛокальныхПеременных.Вставить("Код225или226", "ВыбратьСтраницу(Титульный, 0, ПоМесту)");
		
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога на прибыль в федеральный бюджет (строка 150 Листа 02) равна 0%, если код признака налогоплательщика на Листе 02 равен ""2"" и код места нахождения (учета) на титульном листе равен ""225"" или ""226""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПеременных,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Число(П002000015003) = 0 И НЕ (П002000000100='3')",
			//ФормулаКонтрольногоСоотношения,
			"П002000000100='2' ИЛИ $Код225или226 = '225' ИЛИ $Код225или226 = '226'",
			//ФормулаРасшифровки,
			"'' + П002000000100 + ' = 2" + Символы.ВК 
			+ "' + $Код225или226 + ' = 225 или 226'",
			//ФормулаОписанияОшибки,
			"Если(Число(П002000015003) < 2, 'Необходимо проверить документальное обоснование применения пониженной ставки налога на прибыль в федеральный бюджет.', '')",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.284 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.43
		//===================================================================================================
		СтруктураФормулЛокальныхПеременных = Новый Структура;
		СтруктураФормулЛокальныхПеременных.Вставить("Код225или226", "ВыбратьСтраницу(Титульный, 0, ПоМесту)");
		
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога на прибыль в федеральный бюджет (строка 150 Листа 02) равна 0% или 1%, если код признака налогоплательщика на Листе 02 равен ""3"" (для резидентов Калининградской ОЭЗ)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПеременных,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Число(П002000015003) = 1 ИЛИ (Число(П002000015003) = 0 И НЕ (П002000000100='2' ИЛИ $Код225или226 = '225' ИЛИ $Код225или226 = '226'))",
			//ФормулаКонтрольногоСоотношения,
			"П002000000100='3'",
			//ФормулаРасшифровки,
			"'' + П002000000100 + ' = 3'",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");

		//===================================================================================================
		// ПроверитьКС 1.44
		//===================================================================================================
		
		ПроверкаКС_1_44(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.45
		//===================================================================================================
		СтруктураФормулЛокальныхПеременных = Новый Структура;
		СтруктураФормулЛокальныхПеременных.Вставить("Код225или226", "ВыбратьСтраницу(Титульный, 0, ПоМесту)");
		
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога на прибыль в бюджет субъекта РФ (строка 160 Листа 02) равна 0%, если код признака налогоплательщика на Листе 02 равен ""2"" и код места нахождения (учета) на титульном листе равен ""225"" или ""226""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПеременных,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Число(П002000016003) = 0 И НЕ (П002000000100='3')",
			//ФормулаКонтрольногоСоотношения,
			"П002000000100='2' ИЛИ $Код225или226 = '225' ИЛИ $Код225или226 = '226'",
			//ФормулаРасшифровки,
			"'' + П002000000100 + ' = 2" + Символы.ВК 
			+ "' + $Код225или226 + ' = 225 или 226'",
			//ФормулаОписанияОшибки,
			"Если(Число(П002000016003) < 2, 'Необходимо проверить документальное обоснование применения пониженной ставки налога на прибыль в бюджет субъекта РФ.', '')",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.284 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.46
		//===================================================================================================
		СтруктураФормулЛокальныхПеременных = Новый Структура;
		СтруктураФормулЛокальныхПеременных.Вставить("Код225или226", "ВыбратьСтраницу(Титульный, 0, ПоМесту)");
		
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога на прибыль в бюджет субъекта РФ (строка 160 Листа 02) равна 0% или 9%, если код признака налогоплательщика на Листе 02 равен ""3"" (для резидентов Калининградской ОЭЗ)",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПеременных,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Число(П002000016003) = 9 ИЛИ (Число(П002000016003) = 0 И НЕ (П002000000100='2' ИЛИ $Код225или226 = '225' ИЛИ $Код225или226 = '226'))",
			//ФормулаКонтрольногоСоотношения,
			"П002000000100='3'",
			//ФормулаРасшифровки,
			"'' + П002000000100 + ' = 3'",
			//ФормулаОписанияОшибки,
			"",
			//НормаЗаконодательства
			"'Арифметическая ошибка'");

		//===================================================================================================
		// ПроверитьКС 1.47
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога на прибыль в бюджет субъекта РФ по строке 170 Листа 02 равна 0",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Число(П002000017003) = 0",
			//ФормулаРасшифровки,
			"'' + П002000017003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"Если(Число(П002000017003) > 0, 'Возможно необоснованное применение пониженной ставки налога на прибыль в бюджет субъекта РФ', '')",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.284 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.48
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма исчисленного налога на прибыль - всего (строка 180 Листа 02) должна быть равна сумме строки 190 и строки 200 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000018003) = Округлить(П002000019003) + Округлить(П002000020003)",
			//ФормулаРасшифровки,
			"'' + П002000018003 + ' = ' + П002000019003 + ' + ' + П002000020003 + ' Итог [' + (Округлить(П002000019003) + Округлить(П002000020003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

		//===================================================================================================
		// ПроверитьКС 1.49
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма исчисленного налога на прибыль в федеральный бюджет (строка 190 Листа 02) должна быть равна произведению строки 120 Листа 02 и строки 150 Листа 02, деленое на 100",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000019003) = Округлить(Округлить(П002000012003) * Число(П002000015003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002000019003 + ' = ' + П002000012003 + ' х ' + П002000015003 + ' : 100 Итог [' + (Округлить(Округлить(П002000012003) * Число(П002000015003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

		//===================================================================================================
		// ПроверитьКС 1.50
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма исчисленного налога на прибыль в бюджет субъекта РФ (строка 200 Листа 02) должна быть равна результату суммирования: ((строка 120 - строка 130) х строка 160 / 100)) + (строка 130 х строка 170 / 100), при условии отстутствия Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) = 0",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000020003) = Округлить(((Округлить(П002000012003) - Округлить(П002000013003)) * Число(П002000016003) + Округлить(П002000013003) * Число(П002000017003)) /100)",
			//ФормулаРасшифровки,
			"'' + П002000020003 + ' = ((' + П002000012003 + ' - ' + П002000013003 + ') х ' + П002000016003 + ' : 100) + (' + П002000013003 + ' х ' + П002000017003 + ' : 100) Итог [' + (Округлить(((Округлить(П002000012003) - Округлить(П002000013003)) * Число(П002000016003) + Округлить(П002000013003) * Число(П002000017003)) /100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

		//===================================================================================================
		// ПроверитьКС 1.51
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма исчисленного налога на прибыль в бюджет субъекта РФ (строка 200 Листа 02) должна быть равна результату суммирования всех строк 070 Приложения 5 к Листу 02 при условии наличия Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000020003)) = СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050007003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000020003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050007003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000020003)) > СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050007003)), 'Завышена сумма налога на прибыль в бюджет субъекта РФ', 'Занижена сумма налога на прибыль в бюджет субъекта РФ')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма исчисленного налога на прибыль в бюджет субъекта РФ (строка 200 Листа 02) должна быть равна результату суммирования всех строк 070 Приложения 5 к Листу 02 при условии наличия Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000020003)) = СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050007003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000020003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050007003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000020003)) > СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050007003)), 'Завышена сумма налога на прибыль в бюджет субъекта РФ', 'Занижена сумма налога на прибыль в бюджет субъекта РФ')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма исчисленного налога на прибыль в бюджет субъекта РФ (строка 200 Листа 02) должна быть равна результату суммирования всех строк 070 Приложения 5 к Листу 02 при условии наличия Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000020003)) = СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050007003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000020003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050007003))",
			//ФормулаОписанияОшибки,
			"Если(СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000020003)) > СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050007003)), 'Завышена сумма налога на прибыль в бюджет субъекта РФ', 'Занижена сумма налога на прибыль в бюджет субъекта РФ')",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.52
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленных авансовых платежей -всего (строка 210 Листа 02) должна быть равна сумме строки 220 Листа 02 и строки 230 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000021003) = Округлить(П002000022003) + Округлить(П002000023003)",
			//ФормулаРасшифровки,
			"'' + П002000021003 + ' = ' + П002000022003 + ' + ' + П002000023003 + ' Итог [' + (Округлить(П002000022003) + Округлить(П002000023003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		ПроверкаКС_1_53(СтруктураРезультата);
		ПроверкаКС_1_54(СтруктураРезультата);
		ПроверкаКС_1_55(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.56
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленных авансовых платежей в федеральный бюджет (строка 220 Листа 02) зя январь равна нулю, если налоговый (отчетный) период равен ""35"" или ""57""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ВыбратьСтраницу(Титульный,0,(Период1='3' И Период2='5') ИЛИ (Период1='5' И Период2='7'))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000022003) = 0",
			//ФормулаРасшифровки,
			"'' + П002000022003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"'Неверно отражены начисленные авансовые платежи'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ'");
		ПроверкаКС_1_57(СтруктураРезультата);
		ПроверкаКС_1_58(СтруктураРезультата);
		ПроверкаКС_1_59(СтруктураРезультата);
		//===================================================================================================
		// ПроверитьКС 1.60
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленных авансовых платежей в бюджет субъекта Российской Федерации (строка 230 Листа 02) зя январь равна нулю, если налоговый (отчетный) период равен ""35"" или ""57""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ВыбратьСтраницу(Титульный,0,(Период1='3' И Период2='5') ИЛИ (Период1='5' И Период2='7'))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000023003)=0",
			//ФормулаРасшифровки,
			"'' + П002000023003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"'Неверно отражены начисленные авансовые платежи'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.61
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленного авансового платежа в бюджет субъекта Российской Федерации (строка 230 Листа 02) должна быть равна сумме величин по всем строкам 080 Приложения 5 к Листу 02, при условии наличия хотя бы одного Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000023003)) = СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050008003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000023003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050008003))",
			//ФормулаОписанияОшибки,
			"'Неверно отражены начисленные авансовые платежи'",
			//ФормулаНормыЗаконодательства
			"'п.1 и 2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленного авансового платежа в бюджет субъекта Российской Федерации (строка 230 Листа 02) должна быть равна сумме величин по всем строкам 080 Приложения 5 к Листу 02, при условии наличия хотя бы одного Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000023003)) = СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050008003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000023003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050008003))",
			//ФормулаОписанияОшибки,
			"'Неверно отражены начисленные авансовые платежи'",
			//ФормулаНормыЗаконодательства
			"'п.1 и 2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленного авансового платежа в бюджет субъекта Российской Федерации (строка 230 Листа 02) должна быть равна сумме величин по всем строкам 080 Приложения 5 к Листу 02, при условии наличия хотя бы одного Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000023003)) = СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050008003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000023003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050008003))",
			//ФормулаОписанияОшибки,
			"'Неверно отражены начисленные авансовые платежи'",
			//ФормулаНормыЗаконодательства
			"'п.1 и 2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.62
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, выплаченная за пределами РФ (строка 240 Листа 02) должна быть равна сумме величин по строкам 250 и 260 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000024003) = Округлить(П002000025003) + Округлить(П002000026003)",
			//ФормулаРасшифровки,
			"'' + П002000024003 + ' = ' + П002000025003 + ' + ' + П002000026003 + ' Итог [' + (Округлить(П002000025003) + Округлить(П002000026003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

		//===================================================================================================
		// ПроверитьКС 1.63
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленного авансового платежа в бюджет субъекта Российской Федерации (строка 260 Листа 02) должна быть равна сумме величин по всем строкам 090 Приложения 5 к Листу 02, при условии наличия хотя бы одного Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000026003)) = СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050009003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000026003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050009003))",
			//ФормулаОписанияОшибки,
			"'Неверно определена сумма зачтенных платежей'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.288 НК РФ и ст.311 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленного авансового платежа в бюджет субъекта Российской Федерации (строка 260 Листа 02) должна быть равна сумме величин по всем строкам 090 Приложения 5 к Листу 02, при условии наличия хотя бы одного Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000026003)) = СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050009003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000026003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050009003))",
			//ФормулаОписанияОшибки,
			"'Неверно определена сумма зачтенных платежей'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.288 НК РФ и ст.311 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленного авансового платежа в бюджет субъекта Российской Федерации (строка 260 Листа 02) должна быть равна сумме величин по всем строкам 090 Приложения 5 к Листу 02, при условии наличия хотя бы одного Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000026003)) = СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050009003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000026003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050009003))",
			//ФормулаОписанияОшибки,
			"'Неверно определена сумма зачтенных платежей'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.288 НК РФ и ст.311 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.64
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к доплате в федеральный бюджет (строка 270 Листа 02) должна быть равна разнице показателей строки 190 и суммы строк 220 и 250 Листа 02, если сумма исчисленного налога на прибыль в федеральный бюджет (строка 190 Листа 02) больше суммы строк 220 и 250 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000019003) > Округлить(П002000022003) + Округлить(П002000025003)",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000027003) = Округлить(П002000019003) - Округлить(П002000022003) - Округлить(П002000025003)",
			//ФормулаРасшифровки,
			"'' + П002000027003 + ' = ' + П002000019003 + ' - ' + П002000022003 + ' - ' + П002000025003 + ' Итог [' + (Округлить(П002000019003) - Округлить(П002000022003) - Округлить(П002000025003)) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к доплате может быть завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.65
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к доплате в бюджет субъекта РФ (строка 271 Листа 02) должна быть равна разнице показателей строки 200 и суммы строк 230 и 260 Листа 02, если сумма исчисленного налога на прибыль в бюджет субъекта РФ (строка 200 Листа 02) больше суммы строк 230 и 260 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000020003) > Округлить(П002000023003) + Округлить(П002000026003)",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000027103) = Округлить(П002000020003) - Округлить(П002000023003) - Округлить(П002000026003)",
			//ФормулаРасшифровки,
			"'' + П002000027103 + ' = ' + П002000020003 + ' - ' + П002000023003 + ' - ' + П002000026003 + ' Итог [' + (Округлить(П002000020003) - Округлить(П002000023003) - Округлить(П002000026003)) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к доплате завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.66
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к доплате в бюджет субъекта РФ (строка 271 Листа 02) должна быть равна разнице показателей строки 100 и строки 110 по всем Приложениям 5 к Листу 02, если  сумма налога к доплате по строке 100 всех Приложений №5 к Листу 02 больше суммы налога к уменьшению по строке 110 всех Приложений №5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0) И СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050011003) - Округлить(П002050010003)) < 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000027103)) = СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050010003) - Округлить(П002050011003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000027103)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050010003)) + ' - ' + СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050011003)) + ' Итог [' + (СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050010003) - Округлить(П002050011003))) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к доплате завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к доплате в бюджет субъекта РФ (строка 271 Листа 02) должна быть равна разнице показателей строки 100 и строки 110 по всем Приложениям 5 к Листу 02, если  сумма налога к доплате по строке 100 всех Приложений №5 к Листу 02 больше суммы налога к уменьшению по строке 110 всех Приложений №5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0) И СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050011003) - Округлить(П002050010003)) < 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000027103)) = СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050010003) - Округлить(П002050011003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000027103)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050010003)) + ' - ' + СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050011003)) + ' Итог [' + (СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050010003) - Округлить(П002050011003))) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к доплате завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к доплате в бюджет субъекта РФ (строка 271 Листа 02) должна быть равна разнице показателей строки 100 и строки 110 по всем Приложениям 5 к Листу 02, если  сумма налога к доплате по строке 100 всех Приложений №5 к Листу 02 больше суммы налога к уменьшению по строке 110 всех Приложений №5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0) И СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050011003) - Округлить(П002050010003)) < 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000027103)) = СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050010003) - Округлить(П002050011003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000027103)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050010003)) + ' - ' + СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050011003)) + ' Итог [' + (СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050010003) - Округлить(П002050011003))) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к доплате завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.67
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к уменьшению в федеральный бюджет (строка 280 Листа 02) должна быть равна разнице суммы строк 220 и 250 и величины строки 190 Листа 02, если сумма исчисленного налога на прибыль в федеральный бюджет (строка 190 Листа 02) меньше суммы строк 220 и 250 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000019003) < Округлить(П002000022003) + Округлить(П002000025003)",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000028003) = Округлить(П002000022003) + Округлить(П002000025003) - Округлить(П002000019003)",
			//ФормулаРасшифровки,
			"'' + П002000028003 + ' = ' + П002000022003 + ' + ' + П002000025003 + ' - ' + П002000019003 + ' Итог [' + (Округлить(П002000022003) + Округлить(П002000025003) - Округлить(П002000019003)) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к уменьшению завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.68
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к уменьшению в бюджет субъекта РФ (строка 281 Листа 02) должна быть равна разнице суммы строк 230 и 260 и строки 200 Листа 02, если сумма исчисленного налога на прибыль в бюджет субъекта РФ (строка 200 Листа 02) меньше суммы строк 230 и 260 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000020003) < Округлить(П002000023003) + Округлить(П002000026003)",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000028103) = Округлить(П002000023003) + Округлить(П002000026003) - Округлить(П002000020003)",
			//ФормулаРасшифровки,
			"'' + П002000028103 + ' = ' + П002000023003 + ' + ' + П002000026003 + ' - ' + П002000020003 + ' Итог [' + (Округлить(П002000023003) + Округлить(П002000026003) - Округлить(П002000020003)) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к уменьшению завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.69
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к уменьшению в бюджет субъекта РФ (строка 281 Листа 02) должна быть равна разнице показателей строки 110 и строки 100 по всем Приложениям 5 к Листу 02, если  сумма налога к уменьшению по строке 110 всех Приложений №5 к Листу 02 больше суммы налога к доплате по строке 100 всех Приложений №5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0) И СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050011003) - Округлить(П002050010003)) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000028103)) = СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050011003) - Округлить(П002050010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000028103)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050011003)) + ' - ' + СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050010003)) + ' Итог [' + (СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050011003) - Округлить(П002050010003))) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к уменьшению завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к уменьшению в бюджет субъекта РФ (строка 281 Листа 02) должна быть равна разнице показателей строки 110 и строки 100 по всем Приложениям 5 к Листу 02, если  сумма налога к уменьшению по строке 110 всех Приложений №5 к Листу 02 больше суммы налога к доплате по строке 100 всех Приложений №5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0) И СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050011003) - Округлить(П002050010003)) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000028103)) = СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050011003) - Округлить(П002050010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000028103)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050011003)) + ' - ' + СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050010003)) + ' Итог [' + (СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050011003) - Округлить(П002050010003))) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к уменьшению завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к уменьшению в бюджет субъекта РФ (строка 281 Листа 02) должна быть равна разнице показателей строки 110 и строки 100 по всем Приложениям 5 к Листу 02, если  сумма налога к уменьшению по строке 110 всех Приложений №5 к Листу 02 больше суммы налога к доплате по строке 100 всех Приложений №5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0) И СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050011003) - Округлить(П002050010003)) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000028103)) = СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050011003) - Округлить(П002050010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000028103)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050011003)) + ' - ' + СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050010003)) + ' Итог [' + (СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050011003) - Округлить(П002050010003))) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога на прибыль к уменьшению завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ и ст.288 НК РФ'");
		
		ПроверкаКС_1_70(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.71
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей (строка 290 Листа 02) должна быть равна нулю, если декларация представлена за отчетный налоговый период",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ВыбратьСтраницу(Титульный,0,(Период1='1' И Период2='6') ИЛИ (Период1='3' И Период2='4') ИЛИ (Период1='4' И Период2='6') ИЛИ (Период1='6' И Период2='8'))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000029003) = 0",
			//ФормулаРасшифровки,
			"'' + П002000029003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

		//===================================================================================================
		// ПроверитьКС 1.72
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей (строка 290 Листа 02) должна быть равна сумме величин по строкам 300 и 310 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000029003) = Округлить(П002000030003) + Округлить(П002000031003)",
			//ФормулаРасшифровки,
			"'' + П002000029003 + ' = ' + П002000030003 + ' + ' + П002000031003 + ' Итог [' + (Округлить(П002000030003) + Округлить(П002000031003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

		//===================================================================================================
		// ПроверитьКС 1.73
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Значения строк 300 и 310 Листа 02 должны быть равны нулю, если сумма ежемесячных авансовых платежей (строка 290 Листа 02) равна нулю",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002000029003) = 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000030003) = 0 И Округлить(П002000031003) = 0",
			//ФормулаРасшифровки,
			"'' + П002000030003 + ' = 0 и ' + П002000031003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		ПроверкаКС_1_74(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.75
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей (строка 290 Листа 02) должна быть равна значению строки 180 Листа 02, если декларация представлена за 1 квартал",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ВыбратьСтраницу(Титульный, 0, (Период1='1' И Период2='3') ИЛИ (Период1='2' И Период2='1')) И СчитатьСтраницыЕсли(Раздел1_2, Число(П000120012003) <> 0 ИЛИ Число(П000120013003) <> 0 ИЛИ Число(П000120014003) <> 0 ИЛИ Число(П000120022003) <> 0 ИЛИ Число(П000120023003) <> 0 ИЛИ Число(П000120024003) <> 0) > 0 И СчитатьСтраницыЕсли(Лист02, Число(П002000029003) <> 0 ИЛИ Число(П002000030003) <> 0 ИЛИ Число(П002000031003) <> 0 ИЛИ Число(П002000032003) <> 0 ИЛИ Число(П002000033003) <> 0 ИЛИ Число(П002000034003) <> 0) > 0",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000029003) = Округлить(П002000018003)",
			//ФормулаРасшифровки,
			"'' + П002000029003 + ' = ' + П002000018003",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		ПроверкаКС_1_76(СтруктураРезультата);
		ПроверкаКС_1_77(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.78
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в бюджет субъекта РФ (строка 310 Листа 02) должна быть равна сумме величин по строке 120 всех Приложений 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000031003)) = СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050012003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000031003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050012003))",
			//ФормулаОписанияОшибки,
			"'Возможно неправильное распределение суммы ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в бюджет субъекта РФ (строка 310 Листа 02) должна быть равна сумме величин по строке 120 всех Приложений 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000031003)) = СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050012003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000031003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050012003))",
			//ФормулаОписанияОшибки,
			"'Возможно неправильное распределение суммы ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в бюджет субъекта РФ (строка 310 Листа 02) должна быть равна сумме величин по строке 120 всех Приложений 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='218' ИЛИ ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000031003)) = СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050012003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000031003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050012003))",
			//ФормулаОписанияОшибки,
			"'Возможно неправильное распределение суммы ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.79
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей, подлежащих уплате в 1 квартале следующего налогового периода (строка 320 Листа 02) должна быть равна сумме величин по строкам 330 и 340 Листа 02, если декларация представлена за 9 месяцев",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ВыбратьСтраницу(Титульный,0,(Период1='1' И Период2='5') ИЛИ (Период1='3' И Период2='3'))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000032003) = Округлить(П002000033003) + Округлить(П002000034003)",
			//ФормулаРасшифровки,
			"'' + П002000032003 + ' = ' + П002000033003 + ' + ' + П002000034003 + ' Итог [' + (Округлить(П002000033003) + Округлить(П002000034003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

		//===================================================================================================
		// ПроверитьКС 1.80
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в 1 квартале следующего налогового периода (строка 320 Листа 02) должна быть равна сумме ежемесячных авансовых платежей, подлежащих к уплате в квартале, следующем за текущим отчетным периодом (строка 290 Листа 02), если декларация представлена за 9 месяцев",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ВыбратьСтраницу(Титульный,0,(Период1='1' И Период2='5') ИЛИ (Период1='3' И Период2='3'))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002000032003) = Округлить(П002000029003)",
			//ФормулаРасшифровки,
			"'' + П002000032003 + ' = ' + П002000029003",
			//ФормулаОписанияОшибки,
			"'Возможно неправильное исчисление суммы ежемесячного авансового платежа. Необходимо проверить наличие данных о реорганизации, ликвидации организации, наличие заявления об изменении налогоплательщиком  порядка уплаты налога.'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.81
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в 1 квартале следующего налогового периода в бюджет субъекта РФ должна быть равна сумме строк 121 по всем Приложениям 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту <> '218' И ПоМесту <> '220' И ПоМесту <> '223') И ((Период1='1' И Период2='5') ИЛИ (Период1='3' И Период2='3'))) И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='1') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000034003)) = СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050012103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000034003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='1',Округлить(П002050012103))",
			//ФормулаОписанияОшибки,
			"'Возможно неправильное распределение суммы ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");

		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в 1 квартале следующего налогового периода в бюджет субъекта РФ должна быть равна сумме строк 121 по всем Приложениям 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту <> '218' И ПоМесту <> '220' И ПоМесту <> '223') И ((Период1='1' И Период2='5') ИЛИ (Период1='3' И Период2='3'))) И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='2') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='2') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000034003)) = СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050012103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000034003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='2',Округлить(П002050012103))",
			//ФормулаОписанияОшибки,
			"'Возможно неправильное распределение суммы ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в 1 квартале следующего налогового периода в бюджет субъекта РФ должна быть равна сумме строк 121 по всем Приложениям 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту <> '218' И ПоМесту <> '220' И ПоМесту <> '223') И ((Период1='1' И Период2='5') ИЛИ (Период1='3' И Период2='3'))) И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена()) > 0 И (СчитатьСтраницыЕсли(Лист02_5, П002050000100='3') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02, П002000000100='3') > 0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000034003)) = СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050012103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000034003)) + ' = ' + СуммироватьЕсли(Лист02_5,П002050000100='3',Округлить(П002050012103))",
			//ФормулаОписанияОшибки,
			"'Возможно неправильное распределение суммы ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.195
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма исчисленного налога на прибыль в бюджет субъекта РФ (строка 200 Листа 02) должна быть равна результату суммирования значений по строке 070 Приложения 6 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='218')",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, 1=1, Округлить(П002000020003)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140007003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, 1=1, Округлить(П002000020003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140007003))",
			//ФормулаОписанияОшибки,
			"'Сумма исчисленного налога в бюджет субъекта РФ либо занижена, либо завышена'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.196
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленных авансовых платежей в бюджет субъекта РФ (строка 230 Листа 02) должна быть равна результату суммирования значений по строке 080 Приложения 6 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='218')",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, 1=1, Округлить(П002000023003)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140008003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, 1=1, Округлить(П002000023003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140008003))",
			//ФормулаОписанияОшибки,
			"'Неверно отражено начисление авансовых платежей'",
			//ФормулаНормыЗаконодательства
			"'п.1 и 2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.197
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, выплаченная за пределами РФ, засчитываемая в уплату платежей в бюджет субъекта РФ (строка 260 Листа 02) должна быть равна результату суммирования значений по строке 090 Приложения 6 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='218')",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, 1=1, Округлить(П002000026003)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140009003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, 1=1, Округлить(П002000026003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140009003))",
			//ФормулаОписанияОшибки,
			"'Неверно отражено определение суммы зачтенных платежей'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.288 НК РФ и ст.311 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.198
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к доплате в бюджет субъекта РФ (строка 271 Листа 02) должна быть равна разнице значений строки 100 всех Приложений 6 к Листу 02 и строки 110 всех Приложений 6 к Листу 02, если сумма значений по строке 100 всех Приложений 6 к Листу 02 больше суммы значений строки 110 всех Приложений 6 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='218') И СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140010003) - Округлить(П002140011003)) > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, 1=1, Округлить(П002000027103)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140010003) - Округлить(П002140011003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, 1=1, Округлить(П002000027103)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140010003)) + ' - ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140011003)) + ' Итог [' + (СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140010003) - Округлить(П002140011003))) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога к доплате завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ и ст.288 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.199
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога на прибыль к уменьшению в бюджет субъекта РФ (строка 281 Листа 02) должна быть равна разнице значений строки 110 всех Приложений 6 к Листу 02 и строки 100 всех Приложений 6 к Листу 02, если сумма значений по строке 110 всех Приложений 6 к Листу 02 больше суммы значений строки 100 всех Приложений 6 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='218') И СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140010003) - Округлить(П002140011003)) < 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, 1=1, Округлить(П002000028103)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140011003) - Округлить(П002140010003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, 1=1, Округлить(П002000028103)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140011003)) + ' - ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140010003)) + ' Итог [' + (СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140011003) - Округлить(П002140010003))) + ']'",
			//ФормулаОписанияОшибки,
			"'Сумма налога к уменьшению завышена или занижена'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ и ст.288 НК РФ'");

		//===================================================================================================
		// ПроверитьКС 1.200
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в бюджет субъекта РФ (строка 310 Листа 020) должна быть равна сумме значений строки 120 по всем Приложениям 6 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, ПоМесту='218')",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, 1=1, Округлить(П002000031003)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, 1=1, Округлить(П002000031003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012003))",
			//ФормулаОписанияОшибки,
			"'Возможно неправильно распределены суммы ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.201
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в 1 квартале следующего налогового периода в бюджет субъекта РФ (строка 340 Листа 02) должна быть равна сумме значений строки 121 по всем Приложениям 6 к Листу 02, если декларация представлена за 9 месяцев",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218' И ((Период1='1' И Период2='5') ИЛИ (Период1='4' И Период2='3')))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02, 1=1, Округлить(П002000034003)) = СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012103))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02, 1=1, Округлить(П002000034003)) + ' = ' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140012103))",
			//ФормулаОписанияОшибки,
			"'Возможно неправильно распределены суммы ежемесячного авансового платежа'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ и ст.288 НК РФ'");

КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста02_1(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.82
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Выручка от реализации (строка 010 Приложения 1 к Листу 02) должна быть больше либо равна сумме величин по строкам 011, 012, 013, 014 Приложения 1 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_1",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002010001003) >= Округлить(П002010001103) + Округлить(П002010001203) + Округлить(П002010001303) + Округлить(П002010001403)",
			//ФормулаРасшифровки,
			"'' + П002010001003 + ' >= ' + П002010001103 + ' + ' + П002010001203 + ' + ' + П002010001303 + ' + ' + П002010001403 + ' Итог [' + (Округлить(П002010001103) + Округлить(П002010001203) + Округлить(П002010001303) + Округлить(П002010001403)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.83
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Выручка от реализации по операциям, отраженным в Приложении 3 к Листу 02 (строка 030 Приложения 1 к Листу 02) должна быть равна величине по строке 340 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Лист02_1,П002010000100='1')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_3,П002030000100='1')>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_1,П002010000100='1',Округлить(П002010003003)) = СуммироватьЕсли(Лист02_3,П002030000100='1',Округлить(П002030034003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_1,П002010000100='1',Округлить(П002010003003)) + ' = ' + СуммироватьЕсли(Лист02_3,П002030000100='1',Округлить(П002030034003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Выручка от реализации по операциям, отраженным в Приложении 3 к Листу 02 (строка 030 Приложения 1 к Листу 02) должна быть равна величине по строке 340 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Лист02_1,П002010000100='2')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_3,П002030000100='2')>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_1,П002010000100='2',Округлить(П002010003003)) = СуммироватьЕсли(Лист02_3,П002030000100='2',Округлить(П002030034003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_1,П002010000100='2',Округлить(П002010003003)) + ' = ' + СуммироватьЕсли(Лист02_3,П002030000100='2',Округлить(П002030034003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Выручка от реализации по операциям, отраженным в Приложении 3 к Листу 02 (строка 030 Приложения 1 к Листу 02) должна быть равна величине по строке 340 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Лист02_1,П002010000100='3')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_3,П002030000100='3')>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_1,П002010000100='3',Округлить(П002010003003)) = СуммироватьЕсли(Лист02_3,П002030000100='3',Округлить(П002030034003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_1,П002010000100='3',Округлить(П002010003003)) + ' = ' + СуммироватьЕсли(Лист02_3,П002030000100='3',Округлить(П002030034003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.84
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Итоговая сумма доходов от реализации (строка 040 Приложения 1 к Листу 02) должна быть равна сумме величин строк 010, 020, 023, 030 Приложения 1 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_1",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002010004003) = Округлить(П002010001003) + Округлить(П002010002003) + Округлить(П002010002303) + Округлить(П002010003003)",
			//ФормулаРасшифровки,
			"'' + П002010004003 + ' = ' + П002010001003 + ' + ' + П002010002003 + ' + ' + П002010002303 + ' + ' + П002010003003 + ' Итог [' + (Округлить(П002010001003) + Округлить(П002010002003) + Округлить(П002010002303) + Округлить(П002010003003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.85
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма внереализационных доходов (строка 100 Приложения 1 к Листу 02) должна быть больше либо равна сумме строк 101, 102, 103,104, 105, 106, 107 Приложения 1 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_1",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002010010003) >= Округлить(П002010010103) + Округлить(П002010010203) + Округлить(П002010010303) + Округлить(П002010010403) + Округлить(П002010010503) + Округлить(П002010010603) + Округлить(П002010010703)",
			//ФормулаРасшифровки,
			"'' + П002010010003 + ' >= ' + П002010010103 + ' + ' + П002010010203 + ' + ' + П002010010303 + ' + ' + П002010010403 + ' + ' + П002010010503 + ' + ' + П002010010603 + ' + ' + П002010010703 + ' Итог [' + (Округлить(П002010010103) + Округлить(П002010010203) + Округлить(П002010010303) + Округлить(П002010010403) + Округлить(П002010010503) + Округлить(П002010010603) + Округлить(П002010010703)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста02_2(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.86
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма косвенных расходов (строка 040 Приложения 2 к Листу 02) должна быть больше либо равна сумме величин строк 041, 042, 043, 045, 046, 047, 052 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020004003) >= Округлить(П002020004103) + Округлить(П002020004203) + Округлить(П002020004303) + Округлить(П002020004503) + Округлить(П002020004603) + Округлить(П002020004703) + Округлить(П002020005203)",
			//ФормулаРасшифровки,
			"'' + П002020004003 + ' >= ' + П002020004103 + ' + ' + П002020004203 + ' + ' + П002020004303 + ' + ' + П002020004503 + ' + ' + П002020004603 + ' + ' + П002020004703 + ' + ' + П002020005203 + ' Итог [' + (Округлить(П002020004103) + Округлить(П002020004203) + Округлить(П002020004303) + Округлить(П002020004503) + Округлить(П002020004603) + Округлить(П002020004703) + Округлить(П002020005203)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.87
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов на приобретение права на земельные участки (строка 047 Приложения 2 к Листу 02) должна быть равна сумме строк 048, 049, 050, 051 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020004703) = Округлить(П002020004803) + Округлить(П002020004903) + Округлить(П002020005003) + Округлить(П002020005103)",
			//ФормулаРасшифровки,
			"'' + П002020004703 + ' = ' + П002020004803 + ' + ' + П002020004903 + ' + ' + П002020005003 + ' + ' + П002020005103 + ' Итог [' + (Округлить(П002020004803) + Округлить(П002020004903) + Округлить(П002020005003) + Округлить(П002020005103)) + ']'",
			//ФормулаОписанияОшибки,
			"'Возможно завышение или занижение налоговой базы'",
			//ФормулаНормыЗаконодательства
			"'ст.264.1 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.88
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов на НИОКР (строка 052 Приложения 2 к Листу 02) должна быть больше либо равна величине строки 053 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020005203) >= Округлить(П002020005303)",
			//ФормулаРасшифровки,
			"'' + П002020005203 + ' >= ' + П002020005303",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.89
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов на НИОКР (строка 052 Приложения 2 к Листу 02) должна быть больше либо равна величине расходов на НИОКР по строке 054 Приложения 2 к Листу 02, если величина по строке 054 Приложения 2 к Листу 02 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002020005403) > 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020005203) >= Округлить(П002020005403)",
			//ФормулаРасшифровки,
			"'' + П002020005203 + ' >= ' + П002020005403",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.90
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина расходов на НИОКР по строке 054 Приложения 2 к Листу должна быть больше либо равна величине по строке 055 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020005403) >= Округлить(П002020005503)",
			//ФормулаРасшифровки,
			"'' + П002020005403 + ' >= ' + П002020005503",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.91
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов по операциям по строке 080 Приложения 2 к Листу 02 должна быть равна величине значения строки 350 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Лист02_2,П002020000100='1') > 0 ИЛИ СчитатьСтраницыЕсли(Лист02_3,П002030000100='1')>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_2,П002020000100='1',Округлить(П002020008003)) = СуммироватьЕсли(Лист02_3,П002030000100='1',Округлить(П002030035003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_2,П002020000100='1',Округлить(П002020008003)) + ' = ' + СуммироватьЕсли(Лист02_3,П002030000100='1',Округлить(П002030035003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов по операциям по строке 080 Приложения 2 к Листу 02 должна быть равна величине значения строки 350 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Лист02_2,П002020000100='2')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_3,П002030000100='2')>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_2,П002020000100='2',Округлить(П002020008003)) = СуммироватьЕсли(Лист02_3,П002030000100='2',Округлить(П002030035003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_2,П002020000100='2',Округлить(П002020008003)) + ' = ' + СуммироватьЕсли(Лист02_3,П002030000100='2',Округлить(П002030035003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов по операциям по строке 080 Приложения 2 к Листу 02 должна быть равна величине значения строки 350 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"СчитатьСтраницыЕсли(Лист02_2,П002020000100='3')>0 ИЛИ СчитатьСтраницыЕсли(Лист02_3,П002030000100='3')>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_2,П002020000100='3',Округлить(П002020008003)) = СуммироватьЕсли(Лист02_3,П002030000100='3',Округлить(П002030035003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_2,П002020000100='3',Округлить(П002020008003)) + ' = ' + СуммироватьЕсли(Лист02_3,П002030000100='3',Округлить(П002030035003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.92
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Итоговая сумма признанных расходов (строка 130 Приложения 2 к Листу 02) должна быть равна сумме величин по строкам 010, 020, 040, 059, 060, 061, 070, 080, 090, 100, 110, 120 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020013003) = Округлить(П002020001003) + Округлить(П002020002003) + Округлить(П002020004003) + Округлить(П002020005903) + Округлить(П002020006003) + Округлить(П002020006103) + Округлить(П002020007003) + Округлить(П002020008003) + Округлить(П002020009003) + Округлить(П002020010003) + Округлить(П002020011003) + Округлить(П002020012003)",
			//ФормулаРасшифровки,
			"'' + П002020013003 + ' = ' + П002020001003 + ' + ' + П002020002003 + ' + ' + П002020004003 + ' + ' + П002020005903 + ' + ' + П002020006003 + ' + ' + П002020006103 + ' + ' + П002020007003 + ' + ' + П002020008003 + ' + ' + П002020009003 + ' + ' + П002020010003 + ' + ' + П002020011003 + ' + ' + П002020012003 + ' Итог [' + (Округлить(П002020001003) + Округлить(П002020002003) + Округлить(П002020004003) + Округлить(П002020005903) + Округлить(П002020006003) + Округлить(П002020006103) + Округлить(П002020007003) + Округлить(П002020008003) + Округлить(П002020009003) + Округлить(П002020010003) + Округлить(П002020011003) + Округлить(П002020012003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.93
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма амортизации по строке 131 Приложения 2 к Листу 02 должна быть больше либо равна величине значения по строке 132 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020013103) >= Округлить(П002020013203)",
			//ФормулаРасшифровки,
			"'' + П002020013103 + ' >= ' + П002020013203",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.94
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма амортизации по строке 133 Приложения 2 к Листу 02 должна быть больше либо равна величине значения по строке 134 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020013303) >= Округлить(П002020013403)",
			//ФормулаРасшифровки,
			"'' + П002020013303 + ' >= ' + П002020013403",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.95
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина значения метода начисления амортизации (строка 135 Приложения 2 к Листу 02) больше нуля, если сумма амортизации по строке 131 Приложения 2 к Листу 02 и (или) по строке 133 Приложения 2 к Листу 02 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002020013103) > 0 ИЛИ Округлить(П002020013303) > 0",
			//ФормулаКонтрольногоСоотношения,
			"П002020013503 <> ''",
			//ФормулаРасшифровки,
			"'' + Если(П002020013503 = '', 'Пусто', П002020013503) + ' > 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.96
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Значение метода начисления по строке 135 Приложения 2 к Листу 02 должно быть равно ""1"", если сумма амортизации по строке 131 Приложения 2 к Листу 02 больше нуля и значение строки 133 Приложения 2 к Листу 02 равно нулю, кроме деклараций представляемых с кодом ""218"" по месту нахождения (учета)",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, НЕ (ПоМесту='218'))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002020013103) > 0 И Округлить(П002020013303) = 0",
			//ФормулаКонтрольногоСоотношения,
			"П002020013503 = '1'",
			//ФормулаРасшифровки,
			"'' + Если(П002020013503 = '', 'Пусто', П002020013503) + ' = 1'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.97
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Значение метода начисления по строке 135 Приложения 2 к Листу 02 должно быть равно ""2"", если сумма амортизации по строке 131 Приложения 2 к Листу 02 больше либо равна нулю и значение строки 133 Приложения 2 к Листу 02 больше нуля, кроме деклараций представляемых с кодом ""218"" по месту нахождения (учета)",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, НЕ (ПоМесту='218'))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002020013103)>=0 И Округлить(П002020013303)>0",
			//ФормулаКонтрольногоСоотношения,
			"П002020013503 = '2'",
			//ФормулаРасшифровки,
			"'' + Если(П002020013503 = '', 'Пусто', П002020013503) + ' = 2'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.98
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма внереализационных расходов (Строка 200 Приложения 2 к Листу 02) должна быть больше либо равна сумме значений по строкам 201, 202, 203, 204, 205, 206 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020020003) >= Округлить(П002020020103) + Округлить(П002020020203) + Округлить(П002020020303) + Округлить(П002020020403) + Округлить(П002020020503) + Округлить(П002020020603)",
			//ФормулаРасшифровки,
			"'' + П002020020003 + ' = ' + П002020020103 + ' + ' + П002020020203 + ' + ' + П002020020303 + ' + ' + П002020020403 + ' + ' + П002020020503 + ' + ' + П002020020603 + ' Итог [' + (Округлить(П002020020103) + Округлить(П002020020203) + Округлить(П002020020303) + Округлить(П002020020403) + Округлить(П002020020503) + Округлить(П002020020603)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.99
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина убытков, приравниваемых к внереализационным расходам (строка 300 Приложения 2 к Листу 02) должна быть больше либо равна сумме значений по строкам 301 и 302 Приложения 2 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_2",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002020030003) >= Округлить(П002020030103) + Округлить(П002020030203)",
			//ФормулаРасшифровки,
			"'' + П002020030003 + ' = ' + П002020030103 + ' + ' + П002020030203 + ' Итог [' + (Округлить(П002020030103) + Округлить(П002020030203)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста02_3(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.100
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Количество объектов реализации амортизируемого имущества (строка 010 Приложения 3 к Листу 02) должна быть больше либо равна значению по строке 020 Приложения 3 к Листу 02, если строка 010 Приложения 3 к Листу 02 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_3",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002030001003) >= Округлить(П002030002003)",
			//ФормулаРасшифровки,
			"'' + П002030001003 + ' >= ' + П002030002003",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.101
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Итоговая выручка от реализации по строке 340 Приложения 3 к Листу 02 должна быть равна сумме значений по строкам 030, 100, 110, 180, 240 и результата разницы строк 210 и 211 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_3",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002030034003) = Округлить(П002030003003) + Округлить(П002030010003) + Округлить(П002030011003) + Округлить(П002030018003) + Округлить(П002030021003) - Округлить(П002030021103) + Округлить(П002030024003)",
			//ФормулаРасшифровки,
			"'' + П002030034003 + ' = ' + П002030003003 + ' + ' + П002030010003 + ' + ' + П002030011003 + ' + ' + П002030018003 + ' + ' + П002030021003 + ' - ' + П002030021103 + ' + ' + П002030024003 + ' Итог [' + (Округлить(П002030003003) + Округлить(П002030010003) + Округлить(П002030011003) + Округлить(П002030018003) + Округлить(П002030021003) - Округлить(П002030021103) + Округлить(П002030024003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.102
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Итоговая сумма расходов по строке 350 Приложения 3 к Листу 02 должна быть равна сумме значений по строкам 040, 120, 130, 190, 250 и результата разницы строк 220 и 221 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_3",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002030035003) = Округлить(П002030004003) + Округлить(П002030012003) + Округлить(П002030013003) + Округлить(П002030019003) + Округлить(П002030022003) - Округлить(П002030022103) + Округлить(П002030025003)",
			//ФормулаРасшифровки,
			"'' + П002030035003 + ' = ' + П002030004003 + ' + ' + П002030012003 + ' + ' + П002030013003 + ' + ' + П002030019003 + ' + ' + П002030022003 + ' - ' + П002030022103 + ' + ' + П002030025003 + ' Итог [' + (Округлить(П002030004003) + Округлить(П002030012003) + Округлить(П002030013003) + Округлить(П002030019003) + Округлить(П002030022003) - Округлить(П002030022103) + Округлить(П002030025003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.103
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Итоговая сумма убытков по строке 360 Приложения 3 к Листу 02 должна быть равна сумме значений по строкам 060, 150, 160, 201, 230, 260 Приложения 3 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_3",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002030036003) = Округлить(П002030006003) + Округлить(П002030015003) + Округлить(П002030016003) + Округлить(П002030020103) + Округлить(П002030023003) + Округлить(П002030026003)",
			//ФормулаРасшифровки,
			"'' + П002030036003 + ' = ' + П002030006003 + ' + ' + П002030015003 + ' + ' + П002030016003 + ' + ' + П002030020103 + ' + ' + П002030023003 + ' + ' + П002030026003 + ' Итог [' + (Округлить(П002030006003) + Округлить(П002030015003) + Округлить(П002030016003) + Округлить(П002030020103) + Округлить(П002030023003) + Округлить(П002030026003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста02_4(ОбработкаКС, Контекст, СтруктураРезультата)

	ПроверкаКС_1_104(СтруктураРезультата);
	
	//===================================================================================================
	// ПроверитьКС 1.105
	//===================================================================================================
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма остатка неперенесенного убытка на начало налогового периода должна быть равна сумме величин по строкам 040, 050, 060, 070, 080, 090, 100, 110, 120, 130 Приложения 4 к Листу 02",
		//ФормулаУсловияВыполненияПроверки,
		"",
		//СтруктураФормулЛокальныхПеременных,
		Неопределено,
		//Раздел,
		"Лист02_4",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"СтраницаЗаполнена()",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002040001003) = Округлить(П002040004003) + Округлить(П002040005003) + Округлить(П002040006003) + Округлить(П002040007003) + Округлить(П002040008003) + Округлить(П002040009003) + Округлить(П002040010003) + Округлить(П002040011003) + Округлить(П002040012003) + Округлить(П002040013003)",
		//ФормулаРасшифровки,
		"'' + П002040001003 + ' = ' + П002040004003 + ' + ' + П002040005003 + ' + ' + П002040006003 + ' + ' + П002040007003 + ' + ' + П002040008003 + ' + ' + П002040009003 + ' + ' + П002040010003 + ' + ' + П002040011003 + ' + ' + П002040012003 + ' + ' + П002040013003 + ' Итог [' + (Округлить(П002040004003) + Округлить(П002040005003) + Округлить(П002040006003) + Округлить(П002040007003) + Округлить(П002040008003) + Округлить(П002040009003) + Округлить(П002040010003) + Округлить(П002040011003) + Округлить(П002040012003) + Округлить(П002040013003)) + ']'",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
											
	//===================================================================================================
	// ПроверитьКС 1.106
	//===================================================================================================
	ВыполнитьПроверкуКонтрольногоСоотношения (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Налоговая база за отчетный (налоговый) период (строка 140 Приложения 4 к Листу 02 должна быть равна значению строки 100 Листа 02, если значение строки 100 Листа 02) больше нуля",
		//ФормулаУсловияВыполненияПроверки,
		"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_4,П002040000100='1') > 0 И СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000010003)) > 0",
		//ФормулаКонтрольногоСоотношения,
		"СуммироватьЕсли(Лист02_4, П002040000100='1' ,Округлить(П002040014003)) = СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000010003))",
		//ФормулаРасшифровки,
		"'' + СуммироватьЕсли(Лист02_4,П002040000100='1',Округлить(П002040014003)) + ' = ' + СуммироватьЕсли(Лист02, П002000000100='1', Округлить(П002000010003))",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
											
	ВыполнитьПроверкуКонтрольногоСоотношения (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Налоговая база за отчетный (налоговый) период (строка 140 Приложения 4 к Листу 02 должна быть равна значению строки 100 Листа 02, если значение строки 100 Листа 02) больше нуля",
		//ФормулаУсловияВыполненияПроверки,
		"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_4,П002040000100='2')>0 И СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000010003)) > 0",
		//ФормулаКонтрольногоСоотношения,
		"СуммироватьЕсли(Лист02_4,П002040000100='2',Округлить(П002040014003)) = СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000010003))",
		//ФормулаРасшифровки,
		"'' + СуммироватьЕсли(Лист02_4,П002040000100='2',Округлить(П002040014003)) + ' = ' + СуммироватьЕсли(Лист02, П002000000100='2', Округлить(П002000010003))",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
											
	ВыполнитьПроверкуКонтрольногоСоотношения (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Налоговая база за отчетный (налоговый) период (строка 140 Приложения 4 к Листу 02 должна быть равна значению строки 100 Листа 02, если значение строки 100 Листа 02) больше нуля",
		//ФормулаУсловияВыполненияПроверки,
		"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_4,П002040000100='3')>0 И СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000010003)) > 0",
		//ФормулаКонтрольногоСоотношения,
		"СуммироватьЕсли(Лист02_4,П002040000100='3',Округлить(П002040014003)) = СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000010003))",
		//ФормулаРасшифровки,
		"'' + СуммироватьЕсли(Лист02_4,П002040000100='3',Округлить(П002040014003)) + ' = ' + СуммироватьЕсли(Лист02, П002000000100='3', Округлить(П002000010003))",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
											
	//===================================================================================================
	// ПроверитьКС 1.109
	//===================================================================================================
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма убытка или части убытка, уменьшающего налоговую базу (строка 150 Приложения 4 к Листу 02) должна быть меньше либо равна величине по строке 010 Приложения 4 к Листу 02, если величина по строке 010 Приложения 4 к Листу 02 меньше значения строки 140 Приложения 4 к Листу 02",
		//ФормулаУсловияВыполненияПроверки,
		"",
		//СтруктураФормулЛокальныхПеременных,
		Неопределено,
		//Раздел,
		"Лист02_4",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"Округлить(П002040001003) < Округлить(П002040014003)",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002040015003) <= Округлить(П002040001003)",
		//ФормулаРасшифровки,
		"'' + П002040015003 + ' <= ' + П002040001003",
		//ФормулаОписанияОшибки,
		"'Неверно определена сумма убытка, уменьшающая налоговую базу'",
		//ФормулаНормыЗаконодательства
		"'п.1-3 ст.283 НК РФ'");
											
	//===================================================================================================
	// ПроверитьКС 1.110
	//===================================================================================================
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма убытка или части убытка, уменьшающего налоговую базу (строка 150 Приложения 4 к Листу 02) должна быть равна нулю, если налоговая база по строке 140 Приложения 4 к Листу 02 равна нулю",
		//ФормулаУсловияВыполненияПроверки,
		"",
		//СтруктураФормулЛокальныхПеременных,
		Неопределено,
		//Раздел,
		"Лист02_4",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"СтраницаЗаполнена() И Округлить(П002040014003) = 0",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002040015003) = 0",
		//ФормулаРасшифровки,
		"'' + П002040015003 + ' = 0'",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
											
	//===================================================================================================
	// ПроверитьКС 1.111
	//===================================================================================================
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма остатка неперенесенного убытка на конец налогового периода должна быть равна разнице строк 010 и 150 Приложения 4 к Листу 02, если значение строки 100 Листа 02 соответствующего налогового периода больше либо равно нулю",
		//ФормулаУсловияВыполненияПроверки,
		"ВыбратьСтраницу(Титульный, 0 , (Период1='1' И Период2='6') ИЛИ (Период1='3' И Период2='4') ИЛИ (Период1='4' И Период2='6') ИЛИ (Период1='6' И Период2='8')) И СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000010003)) >= 0",
		//СтруктураФормулЛокальныхПеременных,
		Неопределено,
		//Раздел,
		"Лист02_4",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"П002040000100='1'",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002040016003) = Округлить(П002040001003) - Округлить(П002040015003)",
		//ФормулаРасшифровки,
		"'' + П002040016003 + ' = ' + П002040001003 + ' - ' + П002040015003 + ' Итог [' + (Округлить(П002040001003) - Округлить(П002040015003)) + ']'",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
											
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма остатка неперенесенного убытка на конец налогового периода должна быть равна разнице строк 010 и 150 Приложения 4 к Листу 02, если значение строки 100 Листа 02 соответствующего налогового периода больше либо равно нулю",
		//ФормулаУсловияВыполненияПроверки,
		"ВыбратьСтраницу(Титульный,0,(Период1='1' И Период2='6') ИЛИ (Период1='3' И Период2='4') ИЛИ (Период1='4' И Период2='6') ИЛИ (Период1='6' И Период2='8')) И СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000010003)) >= 0",
		//СтруктураФормулЛокальныхПеременных,
		Неопределено,
		//Раздел,
		"Лист02_4",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"П002040000100='2'",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002040016003) = Округлить(П002040001003) - Округлить(П002040015003)",
		//ФормулаРасшифровки,
		"'' + П002040016003 + ' = ' + П002040001003 + ' - ' + П002040015003 + ' Итог [' + (Округлить(П002040001003) - Округлить(П002040015003)) + ']'",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
											
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма остатка неперенесенного убытка на конец налогового периода должна быть равна разнице строк 010 и 150 Приложения 4 к Листу 02, если значение строки 100 Листа 02 соответствующего налогового периода больше либо равно нулю",
		//ФормулаУсловияВыполненияПроверки,
		"ВыбратьСтраницу(Титульный,0,(Период1='1' И Период2='6') ИЛИ (Период1='3' И Период2='4') ИЛИ (Период1='4' И Период2='6') ИЛИ (Период1='6' И Период2='8')) И СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000010003)) >= 0",
		//СтруктураФормулЛокальныхПеременных,
		Неопределено,
		//Раздел,
		"Лист02_4",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"П002040000100='3'",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002040016003) = Округлить(П002040001003) - Округлить(П002040015003)",
		//ФормулаРасшифровки,
		"'' + П002040016003 + ' = ' + П002040001003 + ' - ' + П002040015003 + ' Итог [' + (Округлить(П002040001003) - Округлить(П002040015003)) + ']'",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
											
	//===================================================================================================
	// ПроверитьКС 1.112
	//===================================================================================================
	СтруктураФормулЛокальныхПееременных = Новый Структура;
	СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст100", "СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000010003))");
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма остатка неперенесенного убытка на конец налогового периода должна быть равна разнице значений строки 010 Приложения 4 к Листу 02 и строки 100 Листа 02, если значение строки 100 Листа 02 соответствующего налогового периода меньше нуля",
		//ФормулаУсловияВыполненияПроверки,
		"ВыбратьСтраницу(Титульный,0,(Период1='1' И Период2='6') ИЛИ (Период1='3' И Период2='4') ИЛИ (Период1='4' И Период2='6') ИЛИ (Период1='6' И Период2='8')) И СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000010003)) < 0",
		//СтруктураФормулЛокальныхПеременных,
		СтруктураФормулЛокальныхПееременных,
		//Раздел,
		"Лист02_4",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"П002040000100='1'",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002040016003) = Округлить(П002040001003) - $Л02Ст100",
		//ФормулаРасшифровки,
		"'' + П002040016003 + ' = ' + П002040001003 + ' - ' + $Л02Ст100 + ' Итог [' + (Округлить(П002040001003) - $Л02Ст100) + ']'",
		//ФормулаОписанияОшибки,
		"'Возможно неверно определена сумма остатка убытка, переносимого на будущее'",
		//ФормулаНормыЗаконодательства
		"'п.1-3 ст.283 НК РФ'");
											
	СтруктураФормулЛокальныхПееременных = Новый Структура;
	СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст100", "СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000010003))");
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма остатка неперенесенного убытка на конец налогового периода должна быть равна разнице значений строки 010 Приложения 4 к Листу 02 и строки 100 Листа 02, если значение строки 100 Листа 02 соответствующего налогового периода меньше нуля",
		//ФормулаУсловияВыполненияПроверки,
		"ВыбратьСтраницу(Титульный,0,(Период1='1' И Период2='6') ИЛИ (Период1='3' И Период2='4') ИЛИ (Период1='4' И Период2='6') ИЛИ (Период1='6' И Период2='8')) И СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000010003)) < 0",
		//СтруктураФормулЛокальныхПеременных,
		СтруктураФормулЛокальныхПееременных,
		//Раздел,
		"Лист02_4",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"П002040000100='2'",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002040016003) = Округлить(П002040001003) - $Л02Ст100",
		//ФормулаРасшифровки,
		"'' + П002040016003 + ' = ' + П002040001003 + ' - ' + $Л02Ст100 + ' Итог [' + (Округлить(П002040001003) - $Л02Ст100) + ']'",
		//ФормулаОписанияОшибки,
		"'Возможно неверно определена сумма остатка убытка, переносимого на будущее'",
		//ФормулаНормыЗаконодательства
		"'п.1-3 ст.283 НК РФ'");
											
	СтруктураФормулЛокальныхПееременных = Новый Структура;
	СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст100", "СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000010003))");
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма остатка неперенесенного убытка на конец налогового периода должна быть равна разнице значений строки 010 Приложения 4 к Листу 02 и строки 100 Листа 02, если значение строки 100 Листа 02 соответствующего налогового периода меньше нуля",
		//ФормулаУсловияВыполненияПроверки,
		"ВыбратьСтраницу(Титульный,0,(Период1='1' И Период2='6') ИЛИ (Период1='3' И Период2='4') ИЛИ (Период1='4' И Период2='6') ИЛИ (Период1='6' И Период2='8')) И СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000010003)) < 0",
		//СтруктураФормулЛокальныхПеременных,
		СтруктураФормулЛокальныхПееременных,
		//Раздел,
		"Лист02_4",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"П002040000100='3'",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002040016003) = Округлить(П002040001003) - $Л02Ст100",
		//ФормулаРасшифровки,
		"'' + П002040016003 + ' = ' + П002040001003 + ' - ' + $Л02Ст100 + ' Итог [' + (Округлить(П002040001003) - $Л02Ст100) + ']'",
		//ФормулаОписанияОшибки,
		"'Возможно неверно определена сумма остатка убытка, переносимого на будущее'",
		//ФормулаНормыЗаконодательства
		"'п.1-3 ст.283 НК РФ'");

КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста02_5(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.113
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000012003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина налоговой базы по строке 030 Приложения 5 к Листу 02 должна быть равна значению строки 120 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='1'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050003003) = $Л02Ст120",
			//ФормулаРасшифровки,
			"'' + П002050003003 + ' = ' + $Л02Ст120",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000012003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина налоговой базы по строке 030 Приложения 5 к Листу 02 должна быть равна значению строки 120 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='2'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050003003) = $Л02Ст120",
			//ФормулаРасшифровки,
			"'' + П002050003003 + ' = ' + $Л02Ст120",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000012003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина налоговой базы по строке 030 Приложения 5 к Листу 02 должна быть равна значению строки 120 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='3'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050003003) = $Л02Ст120",
			//ФормулаРасшифровки,
			"'' + П002050003003 + ' = ' + $Л02Ст120",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.114
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000012003))");
		СтруктураФормулЛокальныхПееременных.Вставить("Прил05Л02Ст050Код3", "СуммироватьЕсли(Лист02_5,П002050000100='1' И П002050001000='3',Округлить(П002050005003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина налоговой базы без учета закрытых обособленных подразделений (строка 031 Приложения 5 к Листу 02) должна быть равна значению строки 120 Листа 02 за минусом величин по строке 050 всех Приложений 5 к Листу 02 с кодом ""3"" по реквизиту ""Расчет составлен""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, П002050000100='1' И П002050001000='3') > 0",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='1'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050003103) = $Л02Ст120 - $Прил05Л02Ст050Код3",
			//ФормулаРасшифровки,
			"'' + П002050003103 + ' = ' + $Л02Ст120 + ' - ' + $Прил05Л02Ст050Код3 + ' Итог [' + ($Л02Ст120 - $Прил05Л02Ст050Код3) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000012003))");
		СтруктураФормулЛокальныхПееременных.Вставить("Прил05Л02Ст050Код3", "СуммироватьЕсли(Лист02_5,П002050000100='2' И П002050001000='3',Округлить(П002050005003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина налоговой базы без учета закрытых обособленных подразделений (строка 031 Приложения 5 к Листу 02) должна быть равна значению строки 120 Листа 02 за минусом величин по строке 050 всех Приложений 5 к Листу 02 с кодом ""3"" по реквизиту ""Расчет составлен""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, П002050000100='2' И П002050001000='3') > 0",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='2'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050003103) = $Л02Ст120 - $Прил05Л02Ст050Код3",
			//ФормулаРасшифровки,
			"'' + П002050003103 + ' = ' + $Л02Ст120 + ' - ' + $Прил05Л02Ст050Код3 + ' Итог [' + ($Л02Ст120 - $Прил05Л02Ст050Код3) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000012003))");
		СтруктураФормулЛокальныхПееременных.Вставить("Прил05Л02Ст050Код3", "СуммироватьЕсли(Лист02_5,П002050000100='3' И П002050001000='3',Округлить(П002050005003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина налоговой базы без учета закрытых обособленных подразделений (строка 031 Приложения 5 к Листу 02) должна быть равна значению строки 120 Листа 02 за минусом величин по строке 050 всех Приложений 5 к Листу 02 с кодом ""3"" по реквизиту ""Расчет составлен""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5, П002050000100='3' И П002050001000='3') > 0",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='3'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050003103) = $Л02Ст120 - $Прил05Л02Ст050Код3",
			//ФормулаРасшифровки,
			"'' + П002050003103 + ' = ' + $Л02Ст120 + ' - ' + $Прил05Л02Ст050Код3 + ' Итог [' + ($Л02Ст120 - $Прил05Л02Ст050Код3) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.115
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Общая сумма всех долей налоговой базы (строка 040 всех Приложений 5 к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""4"") должна быть равна 100%",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5,П002050000100='1') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_5, П002050000100='1' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4'), Число(П002050004003)) = 100",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_5, П002050000100='1' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4'), Число(П002050004003)) + ' = 100%'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Общая сумма всех долей налоговой базы (строка 040 всех Приложений 5 к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""4"") должна быть равна 100%",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5,П002050000100='2') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_5, П002050000100='2' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4'), Число(П002050004003)) = 100",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_5, П002050000100='2' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4'), Число(П002050004003)) + ' = 100%'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Общая сумма всех долей налоговой базы (строка 040 всех Приложений 5 к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""4"") должна быть равна 100%",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист02_5,П002050000100='3') > 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_5, П002050000100='3' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4'), Число(П002050004003)) = 100",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_5, П002050000100='3' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4'), Число(П002050004003)) + ' = 100%'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
	ПроверкаКС_1_116(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.117
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база по строке 050 Приложения 5 к Листу 02 должна быть равна произведению доли налоговой базы (строка 040) и налоговой базы по строке 031 Приложения 5 к Листу 02 по кодам  ""Расчет составлен"" - ""1"", ""2"", ""4"", если значение строки 031 Приложения 5 к Листу 02 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002050003103) > 0 И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4')",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050005003) = Округлить(Округлить(П002050003103) * Число(П002050004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002050005003 + ' = ' + П002050003103 + ' х ' + П002050004003 + ' : 100 Итог [' + (Округлить(Округлить(П002050003103) * Число(П002050004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.118
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база по строке 050 Приложения 5 к Листу 02 должна быть равна произведению доли налоговой базы (строка 040) и налоговой базы по строке 030 Приложения 5 к Листу 02, если значение строки 031 Приложения 5 к Листу 02 равно нулю",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена() И Округлить(П002050003103) = 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050005003) = Округлить(Округлить(П002050003003) * Число(П002050004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002050005003 + ' = ' + П002050003003 + ' х ' + П002050004003 + ' : 100 Итог [' + (Округлить(Округлить(П002050003003) * Число(П002050004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.119
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Общая сумма налоговой базы (строка 050 всех Приложений 5 к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""3"", ""4"") должна быть равна значению по строке 120 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02_5,П002050000100='1')>0 ИЛИ (СчитатьСтраницыЕсли(Лист02,П002000000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена())>0))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_5,П002050000100='1' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '3' ИЛИ П002050001000 = '4'),Округлить(П002050005003)) = СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000012003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_5,П002050000100='1' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '3' ИЛИ П002050001000 = '4'),Округлить(П002050005003)) + ' = ' + СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000012003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Общая сумма налоговой базы (строка 050 всех Приложений 5 к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""3"", ""4"") должна быть равна значению по строке 120 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02_5,П002050000100='2')>0 ИЛИ (СчитатьСтраницыЕсли(Лист02,П002000000100='2') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена())>0))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_5,П002050000100='2' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '3' ИЛИ П002050001000 = '4'),Округлить(П002050005003)) = СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000012003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_5,П002050000100='2' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '3' ИЛИ П002050001000 = '4'),Округлить(П002050005003)) + ' = ' + СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000012003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Общая сумма налоговой базы (строка 050 всех Приложений 5 к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""3"", ""4"") должна быть равна значению по строке 120 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И (СчитатьСтраницыЕсли(Лист02_5,П002050000100='3')>0 ИЛИ (СчитатьСтраницыЕсли(Лист02,П002000000100='3') > 0 И СчитатьСтраницыЕсли(Лист02_5, СтраницаЗаполнена())>0))",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_5,П002050000100='3' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '3' ИЛИ П002050001000 = '4'),Округлить(П002050005003)) = СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000012003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_5,П002050000100='3' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '3' ИЛИ П002050001000 = '4'),Округлить(П002050005003)) + ' = ' + СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000012003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.120
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога в бюджет субъекта РФ(строка 060) должна быть равна 18%",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Число(П002050006003) = 18",
			//ФормулаРасшифровки,
			"'' + П002050006003 + ' = 18%'",
			//ФормулаОписанияОшибки,
			"Если(Число(П002050006003)<18,'Необходимо проверить обоснованность применения пониженной ставки налога в бюджет субъекта РФ','')",
			//ФормулаНормыЗаконодательства
			"Если(Число(П002050006003)<18,'п.1 ст.284 НК РФ','Арифметическая ошибка')");
												
		//===================================================================================================
		// ПроверитьКС 1.121
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога (строка 070 Приложения 5 к Листу 02) должна быть равна произведению налоговой базы (строка 050) и ставки налога (строка 060)",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050007003) = Округлить(Округлить(П002050005003) * Число(П002050006003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002050007003 + ' = ' + П002050005003 + ' x ' + П002050006003 + ' : 100 Итог [' + (Округлить(Округлить(П002050005003) * Число(П002050006003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
	ПроверкаКС_1_122(СтруктураРезультата);
	ПроверкаКС_1_123(СтруктураРезультата);
	ПроверкаКС_1_124(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.125
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленного налога в бюджет субъекта РФ (строка 080 Приложения 5 к Листу 02) должна быть равна нулю, если декларация представлена за январь",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0,(Период1='3' И Период2='5') ИЛИ (Период1='5' И Период2='7'))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050008003) = 0",
			//ФормулаРасшифровки,
			"'' + П002050008003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"'Неверно определена исчисленная сумма авансовых платежей'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.126
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст260", "СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000026003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, выплаченная за пределами РФ (строка 090 Приложения 5 к Листу 02) должна быть равна произведению значения строки 260 Листа 02 и значения по строке 040 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ((СчитатьСтраницыЕсли(Лист02,П002000000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена())>0) ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='1')>0)",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='1'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050009003) = Округлить($Л02Ст260 * Число(П002050004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002050009003 + ' = ' + $Л02Ст260 + ' х ' + П002050004003 + ' : 100 Итог [' + (Округлить($Л02Ст260 * Число(П002050004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст260", "СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000026003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, выплаченная за пределами РФ (строка 090 Приложения 5 к Листу 02) должна быть равна произведению значения строки 260 Листа 02 и значения по строке 040 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ((СчитатьСтраницыЕсли(Лист02,П002000000100='2') > 0 И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена())>0) ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='2')>0)",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='2'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050009003) = Округлить($Л02Ст260 * Число(П002050004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002050009003 + ' = ' + $Л02Ст260 + ' х ' + П002050004003 + ' : 100 Итог [' + (Округлить($Л02Ст260 * Число(П002050004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст260", "СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000026003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, выплаченная за пределами РФ (строка 090 Приложения 5 к Листу 02) должна быть равна произведению значения строки 260 Листа 02 и значения по строке 040 Приложения 5 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ((СчитатьСтраницыЕсли(Лист02,П002000000100='3') > 0 И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена())>0) ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='3')>0)",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='3'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050009003) = Округлить($Л02Ст260 * Число(П002050004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002050009003 + ' = ' + $Л02Ст260 + ' х ' + П002050004003 + ' : 100 Итог [' + (Округлить($Л02Ст260 * Число(П002050004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.127
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к доплате (строка 100 Приложения 5 к Листу 02) должна быть равна разнице значений по строкам 070, 080, 090 Приложения 5 к Листу 02, если сумма значений по строкам 080 и 090 Приложения 5 к Листу 02 меньше величины по строке 070",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002050008003) + Округлить(П002050009003) < Округлить(П002050007003)",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050010003) = Округлить(П002050007003) - Округлить(П002050008003) - Округлить(П002050009003)",
			//ФормулаРасшифровки,
			"'' + П002050010003 + ' = ' + П002050007003 + ' - ' + П002050008003 + ' - ' + П002050009003 + ' Итог [' + (Округлить(П002050007003) - Округлить(П002050008003) - Округлить(П002050009003)) + ']'",
			//ФормулаОписанияОшибки,
			"'Возможно завышение или занижение суммы налога к доплате'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.128
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к уменьшению (строка 110 Приложения 5 к Листу 02) должна быть равна разнице суммы значений по строкам 080 и 090 и значения по строке 070 Приложения 5 к Листу 02, если сумма значений по строкам 080 и 090 Приложения 5 к Листу 02 больше величины по строке 070",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002050008003) + Округлить(П002050009003) > Округлить(П002050007003)",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050011003) = Округлить(П002050008003) + Округлить(П002050009003) - Округлить(П002050007003)",
			//ФормулаРасшифровки,
			"'' + П002050011003 + ' = ' + П002050008003 + ' + ' + П002050009003 + ' - ' + П002050007003 + ' Итог [' + (Округлить(П002050008003) + Округлить(П002050009003) - Округлить(П002050007003)) + ']'",
			//ФормулаОписанияОшибки,
			"'Возможно завышение или занижение суммы налога к доплате'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.129
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст310", "СуммироватьЕсли(Лист02,П002000000100='1',Округлить(П002000031003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в квартале, следующим за отчетным периодом (строка 120 Приложения 5 к Листу 02) должна быть равна произведению значения строки 310 Листа 02 и значения по строке 040 Приложения 5 к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""4""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ((СчитатьСтраницыЕсли(Лист02,П002000000100='1') > 0 И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена())>0) ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='1')>0)",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='1' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4')",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050012003) = Округлить($Л02Ст310 * Число(П002050004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002050012003 + ' = ' + $Л02Ст310 + ' х ' + П002050004003 + ' : 100 Итог [' + (Округлить($Л02Ст310 * Число(П002050004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст310", "СуммироватьЕсли(Лист02,П002000000100='2',Округлить(П002000031003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в квартале, следующим за отчетным периодом (строка 120 Приложения 5 к Листу 02) должна быть равна произведению значения строки 310 Листа 02 и значения по строке 040 Приложения 5 к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""4""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ((СчитатьСтраницыЕсли(Лист02,П002000000100='2') > 0 И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена())>0) ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='2')>0)",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='2' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4')",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050012003) = Округлить($Л02Ст310 * Число(П002050004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002050012003 + ' = ' + $Л02Ст310 + ' х ' + П002050004003 + ' : 100 Итог [' + (Округлить($Л02Ст310 * Число(П002050004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст310", "СуммироватьЕсли(Лист02,П002000000100='3',Округлить(П002000031003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в квартале, следующим за отчетным периодом (строка 120 Приложения 5 к Листу 02) должна быть равна произведению значения строки 310 Листа 02 и значения по строке 040 Приложения 5 к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""4""",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И ((СчитатьСтраницыЕсли(Лист02,П002000000100='3') > 0 И СчитатьСтраницыЕсли(Лист02_5,СтраницаЗаполнена())>0) ИЛИ СчитатьСтраницыЕсли(Лист02_5,П002050000100='3')>0)",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050000100='3' И (П002050001000 = '1' ИЛИ П002050001000 = '2' ИЛИ П002050001000 = '4')",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050012003) = Округлить($Л02Ст310 * Число(П002050004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002050012003 + ' = ' + $Л02Ст310 + ' х ' + П002050004003 + ' : 100 Итог [' + (Округлить($Л02Ст310 * Число(П002050004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.130
		//===================================================================================================
		
		ПроверкаКС_1_130(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.131
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Значения строк 120 и 121 Приложения 5 к Листу 02 должны быть равны нулю, если декларация составлена с кодом ""3"" по реквизиту ""Расчет составлен""",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_5",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"П002050001000='3'",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002050012003) = 0 И Округлить(П002050012103) = 0",
			//ФормулаРасшифровки,
			"'' + П002050012003 + ' = 0, ' + П002050012103 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		ПроверкаКС_1_176(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.177 полный аналог 1.117
		//===================================================================================================
												
		//===================================================================================================
		// ПроверитьКС 1.178 полный аналог 1.118
		//===================================================================================================
												
		//===================================================================================================
		// ПроверитьКС 1.179 полный аналог 1.120
		//===================================================================================================
												
		//===================================================================================================
		// ПроверитьКС 1.180 полный аналог 1.121
		//===================================================================================================
												
		//===================================================================================================
		// ПроверитьКС 1.184 полный аналог 1.125
		//===================================================================================================
												
		//===================================================================================================
		// ПроверитьКС 1.185 полный аналог 1.127
		//===================================================================================================
												
		//===================================================================================================
		// ПроверитьКС 1.186 полный аналог 1.128
		//===================================================================================================
												
		//===================================================================================================
		// ПроверитьКС 1.187 полный аналог 1.130
		//===================================================================================================
												
		//===================================================================================================
		// ПроверитьКС 1.188 полный аналог 1.131
		//===================================================================================================

КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста02_6(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.211
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,1=1,Округлить(П002000012003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база по консолидированной группе по строке 030 Приложения 6 к Листу 02 должна быть равна значению строки 120 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_6",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002140003003) = $Л02Ст120",
			//ФормулаРасшифровки,
			"'' + П002140003003 + ' = ' + $Л02Ст120",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.212
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,1=1,Округлить(П002000012003))");
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Прил6аСт050Код3", "СуммироватьЕсли(Лист02_6а, П002150000501='3', Округлить(П002150005003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина налоговой базы по строке 031 Приложения 6 к Листу 02 должна быть равна разнице значений строки 120 Листа 02 и строки 050 по всем Приложениям 6а к Листу 02 с кодом ""3"" по реквизиту ""Расчет составлен""",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_6",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002140003103) = $Л02Ст120 - $Л02Прил6аСт050Код3",
			//ФормулаРасшифровки,
			"'' + П002140003103 + ' = ' + $Л02Ст120 + ' - ' + $Л02Прил6аСт050Код3 + ' Итог [' + ($Л02Ст120 - $Л02Прил6аСт050Код3) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.213
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6а";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002150000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина доли налоговой базы по строке 040 Приложения 6 к Листу 02 должна быть равна значению строки 040 всех Приложений 6а по кодам 1, 2, 4 по реквизиту ""Расчет составлен"" по одному и тому же ОКАТО",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту='218'))",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_6, 1=1, Число(П002140004003)) = СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='4', Число(П002150004003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_6, 1=1, Число(П002140004003)) + ' = ' + СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='4', Число(П002150004003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.214
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма значений по строке 040 всех Приложений 6 к Листу 02 должна составлять с100%, если значение строки 031Приложения 6 к Листу 02 равно нулю",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту='218')) И СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140003103)) = 0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_6, 1=1, Число(П002140004003)) = 100",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_6, 1=1, Число(П002140004003)) + ' = 100%'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.215
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6а";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002150000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налоговой базы по строке 050 Приложения 6 к Листу 02 должна быть равна сумме значений строки 050 всех Приложений 6а к Листу 02 по кодам 1, 2, 3, 4 по реквизиту ""Расчет составлен"" по одному и тому же ОКАТО",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту='218'))",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140005003)) = СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='3' ИЛИ П002150000501='4', Округлить(П002150005003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_6, 1=1, Число(П002140004003)) + ' = ' + СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='3' ИЛИ П002150000501='4', Округлить(П002150005003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.216
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6а";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002150000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налоговой базы по строке 051 Приложения 6 к Листу 02 должна быть равна сумме значений строки 050 всех Приложений 6а к Листу 02 по кодам 1, 2, 3, 4 по реквизиту ""Расчет составлен"" по одному и тому же ОКАТО, для которых значение строки 060 меньше 18%",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту='218'))",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140005103)) = СуммироватьЕсли(Лист02_6а, (П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='3' ИЛИ П002150000501='4') И Число(П002150006003)<18, Округлить(П002150005003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140005103)) + ' = ' + СуммироватьЕсли(Лист02_6а, (П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='3' ИЛИ П002150000501='4') И Число(П002150006003)<18, Округлить(П002150005003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.217
		//===================================================================================================
		ПравилаГруппировки = Новый Массив;
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002140000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		Правило = СоздатьСтруктуруУсловияГруппировки();
		Правило.ИмяРаздела = "Лист02_6а";
		Правило.ФормулаПравилаСозданияГруппы = "Сред(П002150000301, 1, 2)";
		ПравилаГруппировки.Добавить(Правило);
		
		ВыполнитьПроверкуКонтрольногоСоотношенияСГруппировками (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога по строке 070 Приложения 6 к Листу 02 должна быть равна сумме значений строки 070 всех Приложений 6а к Листу 02 по кодам 1, 2, 3, 4 по реквизиту ""Расчет составлен"" по одному и тому же ОКАТО",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0, (ПоМесту='218'))",
			//ПравилаГруппировки,
			ПравилаГруппировки,
			//ФормулаУсловияВыполненияПроверкиГруппы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140007003)) = СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='3' ИЛИ П002150000501='4', Округлить(П002150007003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_6, 1=1, Округлить(П002140007003)) + ' = ' + СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='3' ИЛИ П002150000501='4', Округлить(П002150007003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
		
		ПроверкаКС_1_218(СтруктураРезультата);
		ПроверкаКС_1_219(СтруктураРезультата);
		ПроверкаКС_1_220(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.221
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма начисленного налога в бюджет субъекта РФ (строка 080 Приложения 6 к Листу 02) должна быть равна нулю, если декларация представлена за январь",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218' И ((Период1='3' И Период2='5') ИЛИ (Период1='5' И Период2='7')))",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_6",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002140008003) = 0",
			//ФормулаРасшифровки,
			"'' + П002140008003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"'Неверно определена исчисленная сумма авансовых платежей'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.222
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст260", "СуммироватьЕсли(Лист02,1=1,Округлить(П002000026003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, выплаченная за пределами РФ (строка 090 Приложения 6 к Листу 02) должна быть равна произведению значения строки 260 Листа 02 и значения по строке 040 Приложения 6 к Листу 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_6",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002140009003) = Округлить($Л02Ст260 * Число(П002140004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002140009003 + ' = ' + $Л02Ст260 + ' х ' + П002140009003 + ' : 100 Итог [' + (Округлить($Л02Ст260 * Число(П002140004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.223
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к доплате (строка 100 Приложения 6 к Листу 02) должна быть равна разнице значений по строкам 070, 080, 090 Приложения 6 к Листу 02, если сумма значений по строкам 080 и 090 Приложения 6 к Листу 02 меньше величины по строке 070",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_6",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002140008003) + Округлить(П002140009003) < Округлить(П002140007003)",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002140010003) = Округлить(П002140007003) - Округлить(П002140008003) - Округлить(П002140009003)",
			//ФормулаРасшифровки,
			"'' + П002140010003 + ' = ' + П002140007003 + ' - ' + П002140008003 + ' - ' + П002140009003 + ' Итог [' + (Округлить(П002140007003) - Округлить(П002140008003) - Округлить(П002140009003)) + ']'",
			//ФормулаОписанияОшибки,
			"'Возможно завышение или занижение суммы налога к доплате'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.224
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога к уменьшению (строка 110 Приложения 6 к Листу 02) должна быть равна разнице суммы значений по строкам 080 и 090 и значения по строке 070 Приложения 6 к Листу 02, если сумма значений по строкам 080 и 090 Приложения 6 к Листу 02 больше величины по строке 070",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_6",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002140008003) + Округлить(П002140009003) > Округлить(П002140007003)",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002140011003) = Округлить(П002140008003) + Округлить(П002140009003) - Округлить(П002140007003)",
			//ФормулаРасшифровки,
			"'' + П002140011003 + ' = ' + П002140008003 + ' + ' + П002140009003 + ' - ' + П002140007003 + ' Итог [' + (Округлить(П002140008003) + Округлить(П002140009003) - Округлить(П002140007003)) + ']'",
			//ФормулаОписанияОшибки,
			"'Возможно завышение или занижение суммы налога к доплате'",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.287 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.225
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст310", "СуммироватьЕсли(Лист02,1=1,Округлить(П002000031003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в квартале, следующим за отчетным периодом (строка 120 Приложения 6 к Листу 02) должна быть равна произведению значения строки 310 Листа 02 и значения по строке 040 Приложения 6 к Листу 02 ",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_6",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002140012003) = Округлить($Л02Ст310 * Число(П002140004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002140012003 + ' = ' + $Л02Ст310 + ' х ' + П002140009003 + ' : 100 Итог [' + (Округлить($Л02Ст310 * Число(П002140004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.226
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма ежемесячных авансовых платежей в квартале, следующим за отчетным периодом (строка 120 Приложения 6 к Листу 02) равна сумме ежемесячных авансовых платежей на 1 квартал следующего налогового периода (строка 121 Приложения 6 к Листу 02)",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_6",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002140012003) = Округлить(П002140012103)",
			//ФормулаРасшифровки,
			"'' + П002140012003 + ' = ' + П002140012103",
			//ФормулаОписанияОшибки,
			"'Возможно неправильное исчисление суммы ежемесячного авансового платежа. Необходимо проверить наличие данных о реорганизации, ликвидации организации, закрытии обособленного подразделения, наличие заявления об изменении налогоплательщиком  порядка уплаты налога.'",
			//ФормулаНормыЗаконодательства
			"'п.2 ст.286 НК РФ'");

КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста02_6а(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.202
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,1=1,Округлить(П002000012003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база по консолидированной группе по строке 030 Приложения 6а к Листу 02 должна быть равна значению строки 120 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_6а",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002150003003) = $Л02Ст120",
			//ФормулаРасшифровки,
			"'' + П002150003003 + ' = ' + $Л02Ст120",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.203
		//===================================================================================================
		СтруктураФормулЛокальныхПееременных = Новый Структура;
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Ст120", "СуммироватьЕсли(Лист02,1=1,Округлить(П002000012003))");
		СтруктураФормулЛокальныхПееременных.Вставить("Л02Прил6аСт050Код3", "СуммироватьЕсли(Лист02_6а, П002150000501='3', Округлить(П002150005003))");
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина налоговой базы по строке 031 Приложения 6а к Листу 02 должна быть равна разнице значений строки 120 Листа 02 и строки 050 по всем Приложениям 6а к Листу 02 с кодом ""3"" по реквизиту ""Расчет составлен""",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			СтруктураФормулЛокальныхПееременных,
			//Раздел,
			"Лист02_6а",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002150003103) = $Л02Ст120 - $Л02Прил6аСт050Код3",
			//ФормулаРасшифровки,
			"'' + П002150003103 + ' = ' + $Л02Ст120 + ' - ' + $Л02Прил6аСт050Код3 + ' Итог [' + ($Л02Ст120 - $Л02Прил6аСт050Код3) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.204
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма значений строки 040 всех Приложений 6а к Листу 02 с кодами ""1"", ""2"", ""4"" по реквизиту ""Расчет составлен"" должна составлять 100%",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='4', Число(П002150004003)) = 100",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='4', Число(П002150004003)) + ' = 100%'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.206
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база по строке 050 Приложения 6а к Листу 02 должна быть равна произведению доли налоговой базы (строка 040) и налоговой базы по строке 031 Приложения 6а к Листу 02 по кодам  ""Расчет составлен"" - ""1"", ""2"", ""4"", если значение строки 031 Приложения 6а к Листу 02 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_6а",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002150003103) > 0 И (П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='4')",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002150005003) = Округлить(Округлить(П002150003103) * Число(П002150004003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002150005003 + ' = ' + П002150003103 + ' х ' + П002150004003 + ' : 100 Итог [' + (Округлить(Округлить(П002150003103) * Число(П002150004003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.207
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база по строке 050 Приложения 6а к Листу 02 должна быть равна произведению доли налоговой базы (строка 040) и налоговой базы по строке 030 Приложения 6а к Листу 02, если значение строки 031 Приложения 6а к Листу 02 равно нулю",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_6а",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002150003103) = 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002150005003) = Округлить(Округлить(П002150003003) * Число(П002150004003 / 100))",
			//ФормулаРасшифровки,
			"'' + П002150005003 + ' = ' + П002150003003 + ' х ' + П002150004003 + ' : 100 Итог [' + (Округлить(Округлить(П002150003003) * Число(П002150004003 / 100))) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.208
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Общая сумма налоговой базы (строка 050 всех Приложений 6а к Листу 02 по кодам ""Расчет составлен"" - ""1"", ""2"", ""3"", ""4"") должна быть равна значению по строке 120 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='3' ИЛИ П002150000501='4', Округлить(П002150005003)) = СуммироватьЕсли(Лист02,1=1,Округлить(П002000012003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист02_6а, П002150000501='1' ИЛИ П002150000501='2' ИЛИ П002150000501='3' ИЛИ П002150000501='4', Округлить(П002150005003)) + ' = ' + СуммироватьЕсли(Лист02,1=1,Округлить(П002000012003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.209
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Ставка налога в бюджет субъекта РФ (строка 060) должна быть равна 18%",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_6а",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"",
			//ФормулаКонтрольногоСоотношения,
			"Число(П002150006003) = 18",
			//ФормулаРасшифровки,
			"'' + П002150006003 + ' = 18%'",
			//ФормулаОписанияОшибки,
			"Если(Число(П002150006003) < 18, 'Необходимо проверить обоснованность применения пониженной ставки налога в бюджет субъекта РФ', '')",
			//ФормулаНормыЗаконодательства
			"'п.1 ст.284 НК РФ'");
												
		//===================================================================================================
		// ПроверитьКС 1.210
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога (строка 070 Приложения 6а к Листу 02) должна быть равна произведению налоговой базы (строка 050) и ставки налога (строка 060)  ",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный, 0, ПоМесту='218')",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист02_6а",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Число(П002150006003) = 18",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002150007003) = Округлить(Округлить(П002150005003) * Число(П002150006003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002150007003 + ' = ' + П002150005003 + ' х ' + П002150006003 + ' : 100 Итог [' + (Округлить(Округлить(П002150005003) * Число(П002150006003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста03А(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.132
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма дивидендов, подлежащих распределению между акционерами (участниками) по строке 010 Листа 03 Раздела А должна быть равна сумме значений по строкам 020, 030, 040 Листа 03 Раздела А",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист03А",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002060001003) = Округлить(П002060002003) + Округлить(П002060003003) + Округлить(П002060004003)",
			//ФормулаРасшифровки,
			"'' + П002060001003 + ' = ' + П002060002003 + ' + ' + П002060003003 + ' + ' + П002060004003 + ' Итог [' + (Округлить(П002060002003) + Округлить(П002060003003) + Округлить(П002060004003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.133
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма значений по строкам 020 и 030 должна быть больше либо равна сумме величин по строкам 031, 032, 033, 034 Листа 03 Раздела А",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист03А",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002060003003) + Округлить(П002060002003) >= Округлить(П002060003103) + Округлить(П002060003203) + Округлить(П002060003303) + Округлить(П002060003403)",
			//ФормулаРасшифровки,
			"'' + П002060002003 + ' + ' + П002060003003 + ' >= ' + П002060003103 + ' + ' + П002060003203 + ' + ' + П002060003303 + ' + ' + П002060003403 + ' Итог [' + (Округлить(П002060003103) + Округлить(П002060003203) + Округлить(П002060003303) + Округлить(П002060003403)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.134
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина дивидендов, подлежащая распределению российским акционерам (участникам) (строка 040 Листа 03 Раздела А) должна быть равна результату вычитания суммы значений по строкам 020 и 030 Листа 03 Раздела А из величины по строке 010 Листа 03 Раздела А",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист03А",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002060004003) = Округлить(П002060001003) - Округлить(П002060002003) - Округлить(П002060003003)",
			//ФормулаРасшифровки,
			"'' + П002060004003 + ' = ' + П002060001003 + ' - ' + П002060002003 + ' - ' + П002060003003 + ' Итог [' + (Округлить(П002060001003) - Округлить(П002060002003) - Округлить(П002060003003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.135
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина дивидендов, подлежащая распределению российским акционерам (участникам) (строка 040 Листа 03 Раздела А) должна быть равна сумме значений по строкам 041, 042, 043, 044 Листа 03 Раздела А",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист03А",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002060004003) = Округлить(П002060004103) + Округлить(П002060004203) + Округлить(П002060004303) + Округлить(П002060004403)",
			//ФормулаРасшифровки,
			"'' + П002060004003 + ' = ' + П002060004103 + ' + ' + П002060004203 + ' + ' + П002060004303 + ' + ' + П002060004403 + ' Итог [' + (Округлить(П002060004103) + Округлить(П002060004203) + Округлить(П002060004303) + Округлить(П002060004403)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.136
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма дивидендов по строке 070 Листа 03 Раздела А должна быть больше или равна величине по строке 071 Листа 03 Раздела А",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист03А",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002060007003) >= Округлить(П002060007103)",
			//ФормулаРасшифровки,
			"'' + П002060007003 + ' >= ' + П002060007103",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.137
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма дивидендов по строке 090 Листа 03 Раздела А должна быть равна разности значений строк 040 и 071 Листа 03 Раздела А",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист03А",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002060009003) = Округлить(П002060004003) - Округлить(П002060007103)",
			//ФормулаРасшифровки,
			"'' + П002060009003 + ' = ' + П002060004003 + ' - ' + П002060007103 + ' Итог [' + (Округлить(П002060004003) - Округлить(П002060007103)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.138
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма дивидендов по строке 090 Листа 03 Раздела А должна быть больше либо равна суммы значений по строкам 091 и 092 Листа 03 Раздела А",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист03А",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002060009003) >= Округлить(П002060009103) + Округлить(П002060009203)",
			//ФормулаРасшифровки,
			"'' + П002060009003 + ' >= ' + П002060009103 + ' + ' + П002060009203 + ' Итог [' + (Округлить(П002060009103) + Округлить(П002060009203)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
		
		ПроверкаКС_2_4_1(СтруктураРезультата);
		ПроверкаКС_2_4_2(СтруктураРезультата);
		ПроверкаКС_2_5(СтруктураРезультата);
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста03Б(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.139
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Исчисленная сумма налога с доходов (строка 030 Листа 03 Раздел Б) должна быть равна произведению значения строки 010 Листа 03 Раздела Б и значения строки 020 Листа 03 Раздела Б",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист03Б",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002070003003) = Округлить(Округлить(П002070001003) * Округлить(П002070002003) / 100)",
			//ФормулаРасшифровки,
			"'' + П002070003003 + ' = ' + П002070001003 + ' х ' + П002070002003 + ' : 100 Итог [' + (Округлить(Округлить(П002070001003) * Округлить(П002070002003) / 100)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.140
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Исчисленная сумма налога с доходов (строка 030 Листа 03 Раздел Б) должна быть равна сумме значений по строкам 040 и 050 Листа 03 Раздела Б",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист03Б",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002070003003) = Округлить(П002070004003) + Округлить(П002070005003)",
			//ФормулаРасшифровки,
			"'' + П002070003003 + ' = ' + П002070004003 + ' + ' + П002070005003 + ' Итог [' + (Округлить(П002070004003) + Округлить(П002070005003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста03В(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.141
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма налога, начисленная с дивидендов по строке 120 Листа 03 Раздела А должна быть равна сумме всех значений строки 070 Листа 03 Раздела В при условии, что декларация имеет статут ""первичной""",
			//ФормулаУсловияВыполненияПроверки,
			"ВыбратьСтраницу(Титульный,0,НомерКорректировки1='0' И НомерКорректировки2='-' И НомерКорректировки3='-') И (СчитатьСтраницыЕсли(Лист03А,СтраницаЗаполнена())>0 ИЛИ СчитатьСтраницыЕсли(Лист03В,СтраницаЗаполнена())>0)",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист03А,1=1,Округлить(П002060012003)) = СуммироватьЕсли(Лист03В,1=1,Округлить(П002080007003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист03А,1=1,Округлить(П002060012003)) + ' = ' + СуммироватьЕсли(Лист03В,1=1,Округлить(П002080007003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста04(ОбработкаКС, Контекст, СтруктураРезультата)
	
	//===================================================================================================
	// ПроверитьКС 1.142
	//===================================================================================================
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма исчисленного налога с доходов (строка 040 Листа 04) должна быть равна произведению разности значений по строкам 010 и 020 Листа 04 и ставки налога (строка 030 Листа 04)",
		//ФормулаУсловияВыполненияПроверки,
		"",
		//СтруктураФормулЛокальныхПеременных,
		Неопределено,
		//Раздел,
		"Лист04",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"СтраницаЗаполнена()",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002090004003) = Округлить((Округлить(П002090001003) - Округлить(П002090002003)) * Округлить(П002090003003) / 100)",
		//ФормулаРасшифровки,
		"'' + П002090004003 + ' = (' + П002090001003 + ' - ' + П002090002003 + ') х ' + П002090003003 + ' : 100 Итог [' + (Округлить((Округлить(П002090001003) - Округлить(П002090002003)) * Округлить(П002090003003) / 100)) + ']'",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
		
	ПроверкаКС_1_143(СтруктураРезультата);
	ПроверкаКС_1_144(СтруктураРезультата);
	
	//===================================================================================================
	// ПроверитьКС 1.145
	//===================================================================================================
	ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
		ОбработкаКС,
		Контекст,
		СтруктураРезультата,
		//ОписаниеКонтрольногоСоотношения,
		"Сумма налога, начисленная с доходов по строке 080 Листа 04 должна быть равна результату вычитания значений строк 050, 060, 070 из величины по строке 040 Листа 04",
		//ФормулаУсловияВыполненияПроверки,
		"",
		//СтруктураФормулЛокальныхПеременных,
		Неопределено,
		//Раздел,
		"Лист04",
		//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
		"СтраницаЗаполнена()",
		//ФормулаКонтрольногоСоотношения,
		"Округлить(П002090008003) = Округлить(П002090004003) - Округлить(П002090005003) - Округлить(П002090006003) - Округлить(П002090007003)",
		//ФормулаРасшифровки,
		"'' + П002090008003 + ' = ' + П002090004003 + ' - ' + П002090005003 + ' - ' + П002090006003 + ' - ' + П002090007003 + ' Итог [' + (Округлить(П002090004003) - Округлить(П002090005003) - Округлить(П002090006003) - Округлить(П002090007003)) + ']'",
		//ФормулаОписанияОшибки,
		"",
		//ФормулаНормыЗаконодательства
		"'Арифметическая ошибка'");
											
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста05(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.146
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"тоговая сумма прибыли (строка 040 Листа 05) должна быть равна сумме значений по строкам 010 и 020 Листа 05 за минусом суммы по строке 030 Листа 05, если величина по строке 031 равна нулю",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист05",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена() И Округлить(П002100003103) = 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002100004003) = Округлить(П002100001003) + Округлить(П002100002003) - Округлить(П002100003003)",
			//ФормулаРасшифровки,
			"'' + П002100004003 + ' = ' + П002100001003 + ' + ' + П002100002003 + ' - ' + П002100003003 + ' Итог [' + (Округлить(П002100001003) + Округлить(П002100002003) - Округлить(П002100003003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.147
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Итоговая сумма прибыли (строка 040 Листа 05) должна быть равна сумме значений по строкам 010, 020, 031 Листа 05 за минусом суммы по строке 030 Листа 05, если величина по строке 031 не равна нулю",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист05",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002100004003) = Округлить(П002100001003) + Округлить(П002100002003) - Округлить(П002100003003) + Округлить(П002100003103)",
			//ФормулаРасшифровки,
			"'' + П002100004003 + ' = ' + П002100001003 + ' + ' + П002100002003 + ' - ' + П002100003003 + ' + ' + П002100003103 + ' Итог [' + (Округлить(П002100001003) + Округлить(П002100002003) - Округлить(П002100003003) + Округлить(П002100003103)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.148
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база по строке 060 Листа 05 должна быть равна разнице значений по строкам 040 и 050 Листа 05",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист05",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002100006003) = Округлить(П002100004003) - Округлить(П002100005003)",
			//ФормулаРасшифровки,
			"'' + П002100006003 + ' = ' + П002100004003 + ' - ' + П002100005003 + ' Итог [' + (Округлить(П002100004003) - Округлить(П002100005003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.149
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма убытка или части убытка по строке 080 Листа 05 должна быть меньше либо равна величине строки 070 Листа 05",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист05",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002100008003) <= Округлить(П002100007003)",
			//ФормулаРасшифровки,
			"'' + П002100008003 + ' <= ' + П002100007003",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.150
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма неучтенного убытка по строке 090 должна быть равна разнице значений по стркоам 070 и 080 Листа 05",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист05",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002100009003) = Округлить(П002100007003) - Округлить(П002100008003)",
			//ФормулаРасшифровки,
			"'' + П002100009003 + ' = ' + П002100007003 + ' - ' + П002100008003 + ' Итог [' + (Округлить(П002100007003) - Округлить(П002100008003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.151
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма неучтенного убытка должна быть равна сумме значений по строкам 060 и 070 Листа 05, если налоговая база по строке 060 Листа 05  меньше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист05",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002100006003) < 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002100009003) = Округлить(П002100006003) + Округлить(П002100007003)",
			//ФормулаРасшифровки,
			"'' + П002100009003 + ' = ' + П002100006003 + ' - ' + П002100007003 + ' Итог [' + (Округлить(П002100006003) + Округлить(П002100007003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.152
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Итоговая сумма налоговой базы должна быть равна разнице значений по строкам 060 и 080 Листа 05",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист05",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002100010003) = Округлить(П002100006003) - Округлить(П002100008003)",
			//ФормулаРасшифровки,
			"'' + П002100010003 + ' = ' + П002100006003 + ' - ' + П002100008003 + ' Итог [' + (Округлить(П002100006003) - Округлить(П002100008003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста06(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.153
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма дохода негосударственного пенсионного фонда должна быть равна сумме занчений по строкам 020, 030, 040, 050, 060, 070, 080, 090, 100, 110 Листа 06",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110001003) = Округлить(П002110002003) + Округлить(П002110003003) + Округлить(П002110004003) + Округлить(П002110005003) + Округлить(П002110006003) + Округлить(П002110007003) + Округлить(П002110008003) + Округлить(П002110009003) + Округлить(П002110010003) + Округлить(П002110011003)",
			//ФормулаРасшифровки,
			"'' + П002110001003 + ' = ' + П002110002003 + ' + ' + П002110003003 + ' + ' + П002110004003 + ' + ' + П002110005003 + ' + ' + П002110006003 + ' + ' + П002110007003 + ' + ' + П002110008003 + ' + ' + П002110009003 + ' + ' + П002110010003 + ' + ' + П002110011003 + ' Итог [' + (Округлить(П002110002003) + Округлить(П002110003003) + Округлить(П002110004003) + Округлить(П002110005003) + Округлить(П002110006003) + Округлить(П002110007003) + Округлить(П002110008003) + Округлить(П002110009003) + Округлить(П002110010003) + Округлить(П002110011003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.154
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Сумма расходов по строке 190 Листа 06 должна быть равна сумме строк 200, 210, 220 Листа 06",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110019003) = Округлить(П002110020003) + Округлить(П002110021003) + Округлить(П002110022003)",
			//ФормулаРасшифровки,
			"'' + П002110019003 + ' = ' + П002110020003 + ' + ' + П002110021003 + ' + ' + П002110022003 + ' Итог [' + (Округлить(П002110020003) + Округлить(П002110021003) + Округлить(П002110022003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.155
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина отчислений от доходов, полученных от размещения пенсионных резервов по строке 240 Листа 06 должна быть меньше либо равна значению строки 010 Листа 02",
			//ФормулаУсловияВыполненияПроверки,
			"НЕ ВыбратьСтраницу(Титульный,0, ПоМесту='220' ИЛИ ПоМесту='223') И СчитатьСтраницыЕсли(Лист06,СтраницаЗаполнена())>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист06,1=1,Округлить(П002110024003)) = СуммироватьЕсли(Лист02,1=1,Округлить(П002000001003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист06,1=1,Округлить(П002110024003)) + ' = ' + СуммироватьЕсли(Лист02,1=1,Округлить(П002000001003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.156
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина отчислений от размещения пенсионных резервов от вложений в ценные бумаги по строке 250 Листа 06 должна быть равна нулю, если сумма значений строк 020, 030, 201 Листа 06 за минусом значений строк 140,200 Листа 06 меньше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002110002003) + Округлить(П002110003003) - Округлить(П002110014003) - Округлить(П002110020003) + Округлить(П002110020103) < 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110025003) = 0",
			//ФормулаРасшифровки,
			"'' + П002110025003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.157
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина отчислений от размещения пенсионных резервов от вложений в ценные бумаги по строке 260 Листа 06 должна быть равна нулю, если сумма значений строк 040, 050, 211 Листа 06 за минусом значений строк 150,210 Листа 06 меньше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002110004003) + Округлить(П002110005003) - Округлить(П002110015003) - Округлить(П002110021003) + Округлить(П002110021103) < 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110025003) = 0",
			//ФормулаРасшифровки,
			"'' + П002110026003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.158
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина отчислений от доходов, полученных в виде процентов по строке 270 Листа 06 должна быть равна нулю, если разница величин по строкам 060 и 160 Листа 06 меньше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002110006003) - Округлить(П002110016003) < 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110027003) = 0",
			//ФормулаРасшифровки,
			"'' + П002110027003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.159
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина отчислений от доходов, полученных в виде процентов по строке 280 Листа 06 должна быть равна нулю, если разница величин по строкам 070 и 170 Листа 06 меньше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002110007003) - Округлить(П002110017003) < 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110028003) = 0",
			//ФормулаРасшифровки,
			"'' + П002110028003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.160
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина отчислений от доходов, полученных от долевого участия по строке 290 Листа 06 должна быть меньше значения по строке 080 Листа 06, если значение по строке 080 Листа 06 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002110008003) > 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110029003) < Округлить(П002110008003)",
			//ФормулаРасшифровки,
			"'' + П002110029003 + ' < ' + П002110008003",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.161
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина отчислений от доходов в виде процентов по строке 300 Листа 06 должна быть меньше значения по строке 090 Листа 06, если значение по строке 090 Листа 06 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002110009003) > 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110030003) < Округлить(П002110009003)",
			//ФормулаРасшифровки,
			"'' + П002110030003 + ' < ' + П002110009003",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.162
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина отчислений ри доходов в виде процентов по строке 310 Листа 06 должна быть меньше значения по строке 100 Листа 06, если значение по строке 100 Листа 06 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002110010003) > 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110031003) < Округлить(П002110010003)",
			//ФормулаРасшифровки,
			"'' + П002110031003 + ' < ' + П002110010003",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.163
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина отчислений от осуществления других инвестиций (строка 320 Листа 06) должна быть равна нулю, если разность значений строки 110 и суммы строк 180 и 220  Листа 06 меньше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002110011003) - Округлить(П002110018003) - Округлить(П002110022003) < 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110032003) = 0",
			//ФормулаРасшифровки,
			"'' + П002110032003 + ' = 0'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.164
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина доли доходов в виде процентов по государственным ценным бумагам по строке 370 Листа 06  должна быть равна разнице значений строки 060 Листа 06 и суммы строк 160 и 270 Листа 06",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110037003) = Округлить(П002110006003) - Округлить(П002110016003) - Округлить(П002110027003)",
			//ФормулаРасшифровки,
			"'' + П002110037003 + ' = ' + П002110006003 + ' - ' + П002110016003 + ' - ' + П002110027003 + ' Итог [' + (Округлить(П002110006003) - Округлить(П002110016003) - Округлить(П002110027003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.165
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина доли доходов в виде процентов по государственным ценным бумагам по строке 370 Листа 06  должна быть больше нуля, если значение строки 370 Листа 02 меньше либо равно значению строки 010 Листа 04 с кодом ""1"" или ""2""",
			//ФормулаУсловияВыполненияПроверки,
			"СуммироватьЕсли(Лист06, 1=1, Округлить(П002110037003))>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист06, 1=1, Округлить(П002110037003)) <= СуммироватьЕсли(Лист04,П002090000200='1' ИЛИ П002090000200='2', Округлить(П002090001003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист06, 1=1, Округлить(П002110037003)) + ' <= ' + СуммироватьЕсли(Лист04,П002090000200='1' ИЛИ П002090000200='2', Округлить(П002090001003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
			
		ПроверкаКС_1_166(СтруктураРезультата);
		ПроверкаКС_1_167(СтруктураРезультата);
		
		//===================================================================================================
		// ПроверитьКС 1.168
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина доли доходов в виде процентов по муниципальным ценным бумагам по строке 380 Листа 06  должна быть равна разнице значений строки 070 Листа 06 и суммы строк 170 и 280 Листа 06",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"СтраницаЗаполнена()",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110038003) = Округлить(П002110007003) - Округлить(П002110017003) - Округлить(П002110028003)",
			//ФормулаРасшифровки,
			"'' + П002110038003 + ' = ' + П002110007003 + ' - ' + П002110017003 + ' - ' + П002110028003 + ' Итог [' + (Округлить(П002110007003) - Округлить(П002110017003) - Округлить(П002110028003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.169
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношения (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Величина доли доходов в виде процентов по муниципальным ценным бумагам по строке 380 Листа 06 должна быть меньше либо равна значению по строке 010 Листа 04 с кодом ""1"" или ""2"" , если строка 380 Листа 06 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"СуммироватьЕсли(Лист06, 1=1, Округлить(П002110038003))>0",
			//ФормулаКонтрольногоСоотношения,
			"СуммироватьЕсли(Лист06, 1=1, Округлить(П002110038003)) <= СуммироватьЕсли(Лист04,П002090000200='1' ИЛИ П002090000200='2', Округлить(П002090001003))",
			//ФормулаРасшифровки,
			"'' + СуммироватьЕсли(Лист06, 1=1, Округлить(П002110038003)) + ' <= ' + СуммироватьЕсли(Лист04,П002090000200='1' ИЛИ П002090000200='2', Округлить(П002090001003))",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
		//===================================================================================================
		// ПроверитьКС 1.170
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтраницы (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения,
			"Налоговая база для исчисления налога (строка 530 Листа 06) должна быть равна сумме значений по строкам 410, 450, 490 Листа 06 за минусом величин по строкам 430, 470, 510 Листа 06 при условии, что значения по строкам 410, 450, 490 больше нуля",
			//ФормулаУсловияВыполненияПроверки,
			"",
			//СтруктураФормулЛокальныхПеременных,
			Неопределено,
			//Раздел,
			"Лист06",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы,
			"Округлить(П002110041003) > 0 ИЛИ Округлить(П002110045003) > 0 ИЛИ Округлить(П002110049003) > 0",
			//ФормулаКонтрольногоСоотношения,
			"Округлить(П002110053003) = Округлить(П002110041003) - Округлить(П002110043003) + Округлить(П002110045003) - Округлить(П002110047003) + Округлить(П002110049003) - Округлить(П002110051003)",
			//ФормулаРасшифровки,
			"'' + П002110053003 + ' = ' + П002110041003 + ' - ' + П002110043003 + ' + ' + П002110045003 + ' - ' + П002110047003 + ' + ' + П002110049003 + ' - ' + П002110051003 + ' Итог [' + (Округлить(П002110041003) - Округлить(П002110043003) + Округлить(П002110045003) - Округлить(П002110047003) + Округлить(П002110049003) - Округлить(П002110051003)) + ']'",
			//ФормулаОписанияОшибки,
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");
												
КонецПроцедуры

&НаСервере
Процедура ПроверитьКСЛиста07(ОбработкаКС, Контекст, СтруктураРезультата)
	
		//===================================================================================================
		// ПроверитьКС 1.171
		//===================================================================================================
		ВыполнитьПроверкуКонтрольногоСоотношенияДляКаждойСтроки (
			ОбработкаКС,
			Контекст,
			СтруктураРезультата,
			//ОписаниеКонтрольногоСоотношения
			"Сумма средств, использованных не по назначению или не использованных в установленный срок (графа 7 Листа 07) должна быть равна значению по графе 3 за минусо значений по графам 4 и 6 Листа 07 по каждому виду поступлений",
			//ФормулаУсловияВыполненияПроверки
			"",
			//СтруктураФормулЛокальныхПеременных
			Неопределено,
			//Раздел
			"Лист07",
			//ФормулаУсловиеВыполненияПроверкиДляСтраницы
			"",
			//ИмяСчетчикаСтрок
			"Номер",
			//ФормулаНачальногоЗначенияСчетчика
			"1",
			//ФормулаУсловияПродолженияЦикла
			"Существует(П002120001007[$Номер])",
			//ФормулаУсловиеВыполненияПроверкиДляСтроки
			"Округлить(П002120001007[$Номер]) <> 0 ИЛИ Округлить(П002120001003[$Номер]) <> 0 ИЛИ Округлить(П002120001004[$Номер]) <> 0 ИЛИ Округлить(П002120001006[$Номер]) <> 0",
			//ФормулаКонтрольногоСоотношения
			"Округлить(П002120001007[$Номер]) = Округлить(П002120001003[$Номер]) - Округлить(П002120001004[$Номер]) - Округлить(П002120001006[$Номер])",
			//ФормулаРасшифровки
			"'' + П002120001007[$Номер] + ' = ' + П002120001003[$Номер] + ' - ' + П002120001004[$Номер] + ' - ' + П002120001006[$Номер] + ' Итог [' + (Округлить(П002120001003[$Номер]) - Округлить(П002120001004[$Номер]) - Округлить(П002120001006[$Номер])) + ']'",
			//ФормклаОписанияОшибки
			"",
			//ФормулаНормыЗаконодательства
			"'Арифметическая ошибка'");

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_44(СтруктураРезультата)
	
	//Актуально только для организации не имеющей обособленных подразделений
	СписокОбособленныхПодразделений = 
		РегламентированнаяОтчетность.ПолучитьСписокОбособленныхПодразделенийОрганизации(СтруктураРеквизитовФормы.Организация);
	Если СписокОбособленныхПодразделений.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Ставка налога на прибыль в бюджет субъекта РФ (строка 160 Листа 02) равна 18%.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "218" ИЛИ мДанныеОтчета.Титульный.ПоМесту = "220" ИЛИ мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000016003";
		
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			ЛеваяЧастьСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено, НомерСтраницы,
			СчетчикФормулДляРасшифровок);
		
		Если ЛеваяЧасть = 18 Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Расшифровка = ЛеваяЧастьСтр + " = 18%";
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ?(ЛеваяЧасть < 18, НСтр("ru='Необходимо проверить документальное обоснование применения пониженной ставки налога на прибыль в бюджет субъекта РФ'"), ""));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.1 ст.284 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_53(СтруктураРезультата)
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = Перечисления.Периодичность.Квартал Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленных авансовых платежей по строке 220 Листа 02 должна быть равна разнице значений строки 190 Листа 02 и строки 250 Листа 02 плюс значение строки 300 Листа 02 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикЕжемесячныхАвансовыхПлатежей = Ложь;
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		Если Число(СтраницаЛ02.Данные[0].Значение["П002000029003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000030003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000031003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000032003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000033003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000034003"]) <> 0 Тогда
			ПлательщикЕжемесячныхАвансовыхПлатежей = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПлательщикЕжемесячныхАвансовыхПлатежей Тогда
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		Если ДокументПНП = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Для каждого СтраницаЛ02 Из ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела] Цикл
			Если Число(СтраницаЛ02.Данные["П002000029003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000030003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000031003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000032003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000033003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000034003"]) <> 0 Тогда
				ПлательщикЕжемесячныхАвансовыхПлатежей = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если пользователь не заполнил ни один показатель, связанный с ежемесячными платежами,
	// считаем, что это сознательное решение, и организация не является платильщиком
	// ежемесячных авансовых платежей.
	Если Не ПлательщикЕжемесячныхАвансовыхПлатежей Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000022003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					ИмяЛ02Ст190 = "П002000019003";
					ЗначениеЛ02Ст190 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст190]);
					ЗначениеЛ02Ст190Стр = Формат(ЗначениеЛ02Ст190, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст190 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст190] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст190, НаименованиеЛ02Ст190,
						ЗначениеЛ02Ст190, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ02Ст250 = "П002000025003";
					ЗначениеЛ02Ст250 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст250]);
					ЗначениеЛ02Ст250Стр = Формат(ЗначениеЛ02Ст250, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст250 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст250] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст250, НаименованиеЛ02Ст250,
						ЗначениеЛ02Ст250, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ИмяЛ02Ст300 = "П002000030003";
					ЗначениеЛ02Ст300 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст300]);
					ЗначениеЛ02Ст300Стр = Формат(ЗначениеЛ02Ст300, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст300 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст300] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст300, НаименованиеЛ02Ст300,
						ЗначениеЛ02Ст300, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ02Ст190 - ЗначениеЛ02Ст250 + ЗначениеЛ02Ст300;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " =  [...]";
		Иначе
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст190Стр + " - " + ЗначениеЛ02Ст250Стр + " + " + ЗначениеЛ02Ст300Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.1 и п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_54(СтруктураРезультата)
	
	//Актуально только для декларации за 1-й квартал
	СохрДокДата			 = СтруктураРеквизитовФормы.мСохраненныйДок.Дата;
	СохрДокДатаНачала	 = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала;
	СохрДокДатаОкончания = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
	Если НЕ (СохрДокДатаНачала = НачалоГода(СохрДокДата) И СохрДокДатаОкончания = НачалоДня(КонецКвартала(НачалоГода(СохрДокДата)))) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленных авансовых платежей по строке 220 Листа 02 должна быть равна значению строки 330 Листа 02 Декларации за 9 месяцев предыдущего налогового периода.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикЕжемесячныхАвансовыхПлатежей = Ложь;
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		Если Число(СтраницаЛ02.Данные[0].Значение["П002000029003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000030003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000031003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000032003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000033003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000034003"]) <> 0 Тогда
			ПлательщикЕжемесячныхАвансовыхПлатежей = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПлательщикЕжемесячныхАвансовыхПлатежей Тогда
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		Если ДокументПНП = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Для каждого СтраницаЛ02 Из ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела] Цикл
			Если Число(СтраницаЛ02.Данные["П002000029003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000030003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000031003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000032003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000033003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000034003"]) <> 0 Тогда
				ПлательщикЕжемесячныхАвансовыхПлатежей = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если пользователь не заполнил ни один показатель, связанный с ежемесячными платежами,
	// считаем, что это сознательное решение, и организация не является платильщиком
	// ежемесячных авансовых платежей.
	Если Не ПлательщикЕжемесячныхАвансовыхПлатежей Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000022003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, -109);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст330 = "П002000033003";
					ЗначениеЛ02Ст330 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст330]);
					ЗначениеЛ02Ст330Стр = Формат(ЗначениеЛ02Ст330, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст330 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст330] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст330, НаименованиеЛ02Ст330,
						ЗначениеЛ02Ст330, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст330;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
			
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_55(СтруктураРезультата)
	
	//Для тех организаций, кто уплачивает ав платежи исходя из фактической прибыли
	КодПериода = ?(ЗначениеЗаполнено(мДанныеОтчета.Титульный.Период), Число(мДанныеОтчета.Титульный.Период), 0);
	Если НЕ (КодПериода >= 35 И КодПериода <= 45) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленных авансовых платежей по строке 220 Листа 02 должна быть равна разнице значений строки 190 Листа 02 и строки 250 Листа 02 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикЕжемесячныхАвансовыхПлатежей = Ложь;
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		Если Число(СтраницаЛ02.Данные[0].Значение["П002000029003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000030003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000031003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000032003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000033003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000034003"]) <> 0 Тогда
			ПлательщикЕжемесячныхАвансовыхПлатежей = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПлательщикЕжемесячныхАвансовыхПлатежей Тогда
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		Если ДокументПНП = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Для каждого СтраницаЛ02 Из ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела] Цикл
			Если Число(СтраницаЛ02.Данные["П002000029003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000030003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000031003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000032003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000033003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000034003"]) <> 0 Тогда
				ПлательщикЕжемесячныхАвансовыхПлатежей = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если пользователь не заполнил ни один показатель, связанный с ежемесячными платежами,
	// считаем, что это сознательное решение, и организация не является платильщиком
	// ежемесячных авансовых платежей.
	Если Не ПлательщикЕжемесячныхАвансовыхПлатежей Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000022003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст190 = "П002000019003";
					ЗначениеЛ02Ст190 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст190]);
					ЗначениеЛ02Ст190Стр = Формат(ЗначениеЛ02Ст190, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст190 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст190] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст190, НаименованиеЛ02Ст190,
						ЗначениеЛ02Ст190, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ02Ст250 = "П002000025003";
					ЗначениеЛ02Ст250 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст250]);
					ЗначениеЛ02Ст250Стр = Формат(ЗначениеЛ02Ст250, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст250 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст250] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст250, НаименованиеЛ02Ст250,
						ЗначениеЛ02Ст250, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ02Ст190 - ЗначениеЛ02Ст250;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст190Стр + " - " + ЗначениеЛ02Ст250Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.1 и п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_57(СтруктураРезультата)
	
	//Для тех организаций, которые уплачивают авансовые платежи за квартал
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = Перечисления.Периодичность.Квартал Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленных авансовых платежей по строке 230 Листа 02 должна быть равна разнице значений строки 200 Листа 02 и строки 260 Листа 02 плюс значение строки 310 Листа 02 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000023003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст200 = "П002000020003";
					ЗначениеЛ02Ст200 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст200]);
					ЗначениеЛ02Ст200Стр = Формат(ЗначениеЛ02Ст200, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст200 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст200] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст200, НаименованиеЛ02Ст200,
						ЗначениеЛ02Ст200, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ02Ст260 = "П002000026003";
					ЗначениеЛ02Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст260]);
					ЗначениеЛ02Ст260Стр = Формат(ЗначениеЛ02Ст260, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст260 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст260] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст260, НаименованиеЛ02Ст260,
						ЗначениеЛ02Ст260, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ИмяЛ02Ст310 = "П002000031003";
					ЗначениеЛ02Ст310 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст310]);
					ЗначениеЛ02Ст310Стр = Формат(ЗначениеЛ02Ст310, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст310 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст310] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст310, НаименованиеЛ02Ст310,
						ЗначениеЛ02Ст310, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ02Ст200 - ЗначениеЛ02Ст260 + ЗначениеЛ02Ст310;
					КодыСовпадают = Истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст200Стр + " - " + ЗначениеЛ02Ст260Стр + " + " + ЗначениеЛ02Ст310Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.1 и п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_58(СтруктураРезультата)
	
	//Актуально только для декларации за 1-й квартал
	СохрДокДата			 = СтруктураРеквизитовФормы.мСохраненныйДок.Дата;
	СохрДокДатаНачала	 = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала;
	СохрДокДатаОкончания = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
	Если НЕ (СохрДокДатаНачала = НачалоГода(СохрДокДата) И СохрДокДатаОкончания = НачалоДня(КонецКвартала(НачалоГода(СохрДокДата)))) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленных авансовых платежей по строке 230 Листа 02 должна быть равна значению строки 340 Листа 02 Декларации за 9 месяцев предыдущего отчетного периода.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000023003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, -109);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст340 = "П002000034003";
					ЗначениеЛ02Ст340 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст340]);
					ЗначениеЛ02Ст340Стр = Формат(ЗначениеЛ02Ст340, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст340 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст340] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст340, НаименованиеЛ02Ст340,
						ЗначениеЛ02Ст340, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст340;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе
			Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_59(СтруктураРезультата)
	
	//Для тех организаций, кто уплачивает ав платежи исходя из фактической прибыли
	КодПериода = ?(ЗначениеЗаполнено(мДанныеОтчета.Титульный.Период), Число(мДанныеОтчета.Титульный.Период), 0);
	Если НЕ (КодПериода >= 35 И КодПериода <= 45) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленных авансовых платежей по строке 230 Листа 02 должна быть равна разнице значений строки 200 Листа 02 и строки 260 Листа 02 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000023003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст200 = "П002000020003";
					ЗначениеЛ02Ст200 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст200]);
					ЗначениеЛ02Ст200Стр = Формат(ЗначениеЛ02Ст200, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст200 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст200] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст200, НаименованиеЛ02Ст200,
						ЗначениеЛ02Ст200, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ02Ст260 = "П002000026003";
					ЗначениеЛ02Ст260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст260]);
					ЗначениеЛ02Ст260Стр = Формат(ЗначениеЛ02Ст260, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст260 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст260] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст260, НаименованиеЛ02Ст260,
						ЗначениеЛ02Ст260, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ02Ст200 - ЗначениеЛ02Ст260;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст200Стр + " - " + ЗначениеЛ02Ст260Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.1 и п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_70(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма ежемесячных авансовых платежей по строке 290 Листа 02 должна быть равна разнице значений строки 180 Листа 02 отчетного периода и строки 180 Листа 02 предыдущего отчетного периода, при условии, если результат этой разницы больше нуля.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикЕжемесячныхАвансовыхПлатежей = Ложь;
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		Если Число(СтраницаЛ02.Данные[0].Значение["П002000029003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000030003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000031003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000032003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000033003"]) <> 0
			Или Число(СтраницаЛ02.Данные[0].Значение["П002000034003"]) <> 0 Тогда
			ПлательщикЕжемесячныхАвансовыхПлатежей = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПлательщикЕжемесячныхАвансовыхПлатежей Тогда
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		Если ДокументПНП = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Для каждого СтраницаЛ02 Из ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела] Цикл
			Если Число(СтраницаЛ02.Данные["П002000029003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000030003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000031003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000032003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000033003"]) <> 0
				Или Число(СтраницаЛ02.Данные["П002000034003"]) <> 0 Тогда
				ПлательщикЕжемесячныхАвансовыхПлатежей = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если пользователь не заполнил ни один показатель, связанный с ежемесячными платежами,
	// считаем, что это сознательное решение, и организация не является платильщиком
	// ежемесячных авансовых платежей.
	Если Не ПлательщикЕжемесячныхАвансовыхПлатежей Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000029003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		ИмяЛ02Ст180 = "П002000018003";
		ЗначениеЛ02Ст180 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяЛ02Ст180]);
		ЗначениеЛ02Ст180Стр = Формат(ЗначениеЛ02Ст180, "ЧРД=.;ЧН=0");
		НаименованиеЛ02Ст180 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст180];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст180, НаименованиеЛ02Ст180,
			ЗначениеЛ02Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
				
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст180ПНП = "П002000018003";
					ЗначениеЛ02Ст180ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст180ПНП]);
					ЗначениеЛ02Ст180ПНПСтр = Формат(ЗначениеЛ02Ст180ПНП, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст180ПНП = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст180ПНП] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст180ПНП, НаименованиеЛ02Ст180ПНП,
						ЗначениеЛ02Ст180ПНП, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст180 - ЗначениеЛ02Ст180ПНП;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если  КодыСовпадают Тогда 
			Если ДокументПНП = Неопределено ИЛИ (НЕ ДокументПНП = Неопределено И НЕ ПраваяЧасть > 0) 
				ИЛИ (НЕ ДокументПНП = Неопределено И ПраваяЧасть > 0 И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И ПраваяЧасть > 0 И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст180Стр + " - " + ЗначениеЛ02Ст180ПНПСтр + " Итог [" + ПраваяЧастьСтр  + "], если " + ЗначениеЛ02Ст180Стр + " - " + ЗначениеЛ02Ст180ПНПСтр + " Итог [" + ПраваяЧастьСтр  + "] > 0.";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_74(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма ежемесячных авансовых платежей по строке 290 Листа 02 должно быть равна нулю, если разница значений строки 180 Листа 02 отчетного периода и строки 180 Листа 02 предыдущего отчетного периода меньше нуля.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000029003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		ИмяЛ02Ст180 = "П002000018003";
		ЗначениеЛ02Ст180 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяЛ02Ст180]);
		ЗначениеЛ02Ст180Стр = Формат(ЗначениеЛ02Ст180, "ЧРД=.;ЧН=0");
		НаименованиеЛ02Ст180 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст180];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст180, НаименованиеЛ02Ст180,
			ЗначениеЛ02Ст180, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
				
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст180ПНП = "П002000018003";
					ЗначениеЛ02Ст180ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст180ПНП]);
					ЗначениеЛ02Ст180ПНПСтр = Формат(ЗначениеЛ02Ст180ПНП, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст180ПНП = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст180ПНП] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст180ПНП, 
						НаименованиеЛ02Ст180ПНП, ЗначениеЛ02Ст180ПНП, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП,
						СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст180 - ЗначениеЛ02Ст180ПНП;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И НЕ ПраваяЧасть < 0) 
				ИЛИ (НЕ ДокументПНП = Неопределено И ПраваяЧасть < 0 И ЛеваяЧасть = 0) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И ПраваяЧасть < 0 И НЕ ЛеваяЧасть = 0 Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе
			Расшифровка = ЛеваяЧастьСтр + " = " + " 0, если " + ЗначениеЛ02Ст180Стр + " - " + ЗначениеЛ02Ст180ПНПСтр + " Итог [" + ПраваяЧастьСтр  + "] < 0.";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_76(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма ежемесячных авансовых платежей по строке 300 Листа 02 должна быть равна разнице значений строки 190 Листа 02 отчетного периода и строки 190 Листа 02 предыдущего отчетного периода, при условии, если значение строки 290 Листа 02 больше нуля.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000030003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		ИмяЛ02Ст290 = "П002000029003";
		ЗначениеЛ02Ст290 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяЛ02Ст290]);
		ЗначениеЛ02Ст290Стр = Формат(ЗначениеЛ02Ст290, "ЧРД=.;ЧН=0");
		НаименованиеЛ02Ст290 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст290];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст290, НаименованиеЛ02Ст290,
			ЗначениеЛ02Ст290, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ИмяЛ02Ст190 = "П002000019003";
		ЗначениеЛ02Ст190 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяЛ02Ст190]);
		ЗначениеЛ02Ст190Стр = Формат(ЗначениеЛ02Ст190, "ЧРД=.;ЧН=0");
		НаименованиеЛ02Ст190 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст190];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст190, НаименованиеЛ02Ст190,
			ЗначениеЛ02Ст190, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
				
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст190ПНП = "П002000019003";
					ЗначениеЛ02Ст190ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст190ПНП]);
					ЗначениеЛ02Ст190ПНПСтр = Формат(ЗначениеЛ02Ст190ПНП, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст190ПНП = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст190ПНП] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст190ПНП,
						НаименованиеЛ02Ст190ПНП, ЗначениеЛ02Ст190ПНП, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП,
						СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст190 - ЗначениеЛ02Ст190ПНП;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И НЕ ЗначениеЛ02Ст290 > 0)
				ИЛИ (НЕ ДокументПНП = Неопределено И ЗначениеЛ02Ст290 > 0 И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И ЗначениеЛ02Ст290 > 0 И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст190Стр + " - " + ЗначениеЛ02Ст190ПНПСтр + " Итог [" + ПраваяЧастьСтр  + "] , если " + ЗначениеЛ02Ст290Стр + " > 0.";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_77(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма ежемесячных авансовых платежей по строке 310 Листа 02 должна быть равна разнице значений строки 200 Листа 02 отчетного периода и строки 200 Листа 02 предыдущего отчетного периода, при условии, если значение строки 290 Листа 02 больше нуля.";
	ИмяРаздела = "Лист02";
	
	Если мДанныеОтчета.Титульный.ПоМесту = "220" Или мДанныеОтчета.Титульный.ПоМесту = "223" Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002000000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002000031003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		ИмяЛ02Ст290 = "П002000029003";
		ЗначениеЛ02Ст290 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяЛ02Ст290]);
		ЗначениеЛ02Ст290Стр = Формат(ЗначениеЛ02Ст290, "ЧРД=.;ЧН=0");
		НаименованиеЛ02Ст290 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст290];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст290, НаименованиеЛ02Ст290,
			ЗначениеЛ02Ст290, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ИмяЛ02Ст200 = "П002000020003";
		ЗначениеЛ02Ст200 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяЛ02Ст200]);
		ЗначениеЛ02Ст200Стр = Формат(ЗначениеЛ02Ст200, "ЧРД=.;ЧН=0");
		НаименованиеЛ02Ст200 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст200];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст200, НаименованиеЛ02Ст200,
			ЗначениеЛ02Ст200, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
				
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002000000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст200ПНП = "П002000020003";
					ЗначениеЛ02Ст200ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст200ПНП]);
					ЗначениеЛ02Ст200ПНПСтр = Формат(ЗначениеЛ02Ст200ПНП, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст200ПНП = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст200ПНП] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст200ПНП, НаименованиеЛ02Ст200ПНП,
						ЗначениеЛ02Ст200ПНП, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст200 - ЗначениеЛ02Ст200ПНП;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И НЕ ЗначениеЛ02Ст290 > 0)
				ИЛИ (НЕ ДокументПНП = Неопределено И ЗначениеЛ02Ст290 > 0 И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И ЗначениеЛ02Ст290 > 0 И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст200Стр + " - " + ЗначениеЛ02Ст200ПНПСтр + " Итог [" + ПраваяЧастьСтр  + "] , если " + ЗначениеЛ02Ст290Стр + " > 0.";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_104(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Значение строки 010 Приложения 4 к Листу 02 должно быть равно значению строки 160 Приложения 4 к Листу 02 за предыдущий налоговый период. Исключение: за 2012 год (и ранее)  значение строки 010 Приложения 4 к Листу 02 должно быть равно значению строки 180.";
	ИмяРаздела = "Лист02_4";
	
	Для каждого СтраницаЛ02_4 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02_4) + 1);
		
		ПризнакНП = СтраницаЛ02_4.Данные[0].Значение["П002040000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002040001003";
	
		ЛеваяЧасть = СтраницаЛ02_4.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02_4.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, -112, Истина); // ПНП = 1 год
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			Если ДокументПНП.ВыбраннаяФорма = "ФормаОтчета2012Кв1" Тогда 
				ИмяЛ02_4ПНП = "П002040016003";
			Иначе
				ИмяЛ02_4ПНП = "П002040018003";
				ИмяРаздела = "Лист02_Прил4";
			КонецЕсли;
			
			Лист02_4ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02_4ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02_4ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002040000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ЗначениеЛ02_4ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02_4ПНП]);
					ЗначениеЛ02_4ПНПСтр = Формат(ЗначениеЛ02_4ПНП, "ЧРД=.;ЧН=0");
					НаименованиеЛ02_4ПНП = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02_4ПНП] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02_4ПНП, НаименованиеЛ02_4ПНП,
						ЗначениеЛ02_4ПНП, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02_4ПНП;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Арифметическая ошибка.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru=''"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_116(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Доля налоговой базы по строке 040 Приложения 5 к Листу 02 с кодом Расчет составлен = ""3"" должна быть равна значению строки 040 Приложения 5 к Листу 02 с кодом Расчет составлен = ""3"" предыдущего отчетного периода, при условии, если значение строки 120 Листа 02 больше значения строки 120 Листа 02 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02_5";
	
	Для каждого СтраницаЛ02_5 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02_5) + 1);
		
		РасчетСоставлен = СтраницаЛ02_5.Данные[0].Значение["П002050001000"];
		Если ПустаяСтрока(РасчетСоставлен) ИЛИ НЕ РасчетСоставлен = "3" Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002050004003";
	
		ЛеваяЧасть = СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
		ИмяЛ02Ст120 = "П002050012003";
		ЗначениеЛ02Ст120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02_5.Данные[0].Значение[ИмяЛ02Ст120]);
		ЗначениеЛ02Ст120Стр = Формат(ЗначениеЛ02Ст120, "ЧРД=.;ЧН=0");
		НаименованиеЛ02Ст120 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст120];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст120, НаименованиеЛ02Ст120,
			ЗначениеЛ02Ст120, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02_5ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02_5ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02_5ПНП Цикл 
					Если НЕ РасчетСоставлен = СтраницаПНП.Данные["П002050001000"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст040ПНП = "П002050004003";
					ЗначениеЛ02Ст040ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст040ПНП]);
					ЗначениеЛ02Ст040ПНПСтр = Формат(ЗначениеЛ02Ст040ПНП, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст040ПНП = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст040ПНП] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст040ПНП, НаименованиеЛ02Ст040ПНП,
						ЗначениеЛ02Ст040ПНП, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ИмяЛ02Ст120ПНП = "П002050012003";
					ЗначениеЛ02Ст120ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст120ПНП]);
					ЗначениеЛ02Ст120ПНПСтр = Формат(ЗначениеЛ02Ст120ПНП, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст120ПНП = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст120ПНП] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст120ПНП, НаименованиеЛ02Ст120ПНП,
						ЗначениеЛ02Ст120ПНП, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст040ПНП;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И НЕ ЗначениеЛ02Ст120 > ЗначениеЛ02Ст120ПНП)
				ИЛИ (НЕ ДокументПНП = Неопределено И ЗначениеЛ02Ст120 > ЗначениеЛ02Ст120ПНП И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И ЗначениеЛ02Ст120 > ЗначениеЛ02Ст120ПНП И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено Или НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр + ", если код Расчет составлен = 3 и " + ЗначениеЛ02Ст120Стр + " > " + ЗначениеЛ02Ст120ПНПСтр;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Арифметическая ошибка.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru=''"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_122(СтруктураРезультата)
	
	//Для тех организаций, которые уплачивают авансовые платежи за квартал
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = Перечисления.Периодичность.Квартал Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленного налога по строке 080 Приложения 5 к Листу 02 должна быть равна разнице значений строки 070 и строки 090  плюс значение строки 120 Приложения 5 к Листу 02 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02_5";
	
	Для каждого СтраницаЛ02_5 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02_5) + 1);
		
		ПризнакНП = СтраницаЛ02_5.Данные[0].Значение["П002050000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		РасчетСоставлен = СтраницаЛ02_5.Данные[0].Значение["П002050001000"];
		Если ПустаяСтрока(РасчетСоставлен) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002050008003";
	
		ЛеваяЧасть = СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002050000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если НЕ РасчетСоставлен = СтраницаПНП.Данные["П002050001000"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст070 = "П002050007003";
					ЗначениеЛ02Ст070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст070]);
					ЗначениеЛ02Ст070Стр = Формат(ЗначениеЛ02Ст070, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст070 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст070] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст070, НаименованиеЛ02Ст070,
						ЗначениеЛ02Ст070, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ02Ст090 = "П002050009003";
					ЗначениеЛ02Ст090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст090]);
					ЗначениеЛ02Ст090Стр = Формат(ЗначениеЛ02Ст090, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст090 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст090] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст090, НаименованиеЛ02Ст090,
						ЗначениеЛ02Ст090, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ИмяЛ02Ст120 = "П002050012003";
					ЗначениеЛ02Ст120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст120]);
					ЗначениеЛ02Ст120Стр = Формат(ЗначениеЛ02Ст120, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст120 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст120] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст120, НаименованиеЛ02Ст120,
						ЗначениеЛ02Ст120, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ02Ст070 - ЗначениеЛ02Ст090 + ЗначениеЛ02Ст120;
					КодыСовпадают = Истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст070Стр + " - " + ЗначениеЛ02Ст090Стр + " + " + ЗначениеЛ02Ст120Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.1 и п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_123(СтруктураРезультата)
	
	//Актуально только для декларации за 1-й квартал
	СохрДокДата			 = СтруктураРеквизитовФормы.мСохраненныйДок.Дата;
	СохрДокДатаНачала	 = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала;
	СохрДокДатаОкончания = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
	Если НЕ (СохрДокДатаНачала = НачалоГода(СохрДокДата) И СохрДокДатаОкончания = НачалоДня(КонецКвартала(НачалоГода(СохрДокДата)))) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленного налога по строке 080 Приложения 5 к  Листу 02 должна быть равна значению строки 121 Приложения 5 к Листу 02 Декларации за 9 месяцев предыдущего налогового периода.";
	ИмяРаздела = "Лист02_5";
	
	Для каждого СтраницаЛ02_5 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02_5) + 1);
		
		ПризнакНП = СтраницаЛ02_5.Данные[0].Значение["П002050000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		РасчетСоставлен = СтраницаЛ02_5.Данные[0].Значение["П002050001000"];
		Если ПустаяСтрока(РасчетСоставлен) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002050008003";
	
		ЛеваяЧасть = СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, -109, Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002050000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если НЕ РасчетСоставлен = СтраницаПНП.Данные["П002050001000"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст121 = "П002050012103";
					ЗначениеЛ02Ст121 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст121]);
					ЗначениеЛ02Ст121Стр = Формат(ЗначениеЛ02Ст121, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст121 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст121] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст121, НаименованиеЛ02Ст121,
						ЗначениеЛ02Ст121, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст121;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе
			Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_124(СтруктураРезультата)
	
	//Для тех организаций, кто уплачивает ав платежи исходя из фактической прибыли
	КодПериода = ?(ЗначениеЗаполнено(мДанныеОтчета.Титульный.Период), Число(мДанныеОтчета.Титульный.Период), 0);
	Если НЕ (КодПериода >= 35 И КодПериода <= 45) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленного налога по строке 080 Приложения 5 к Листу 02 должна быть равна разнице значений строки 070 и строки 090 Приложения 5 Листа 02 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02_5";
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ПризнакНП = СтраницаЛ02.Данные[0].Значение["П002050000100"];
		Если ПустаяСтрока(ПризнакНП) Тогда 
			Продолжить;
		КонецЕсли;
		
		РасчетСоставлен = СтраницаЛ02.Данные[0].Значение["П002050001000"];
		Если ПустаяСтрока(РасчетСоставлен) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002050008003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ПризнакНП = СтраницаПНП.Данные["П002050000100"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если НЕ РасчетСоставлен = СтраницаПНП.Данные["П002050001000"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст070 = "П002050007003";
					ЗначениеЛ02Ст070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст070]);
					ЗначениеЛ02Ст070Стр = Формат(ЗначениеЛ02Ст070, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст070 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст070] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст070, НаименованиеЛ02Ст070,
						ЗначениеЛ02Ст070, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ02Ст090 = "П002050009003";
					ЗначениеЛ02Ст090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст090]);
					ЗначениеЛ02Ст090Стр = Формат(ЗначениеЛ02Ст090, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст090 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст090] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст090, НаименованиеЛ02Ст090,
						ЗначениеЛ02Ст090, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ02Ст070 - ЗначениеЛ02Ст090;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст070Стр + " - " + ЗначениеЛ02Ст090Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.1 ст. 284 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_130(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма ежемесячных авансовых платежей в квартале, следующим за отчетным периодом (строка 120 Приложения 5 к Листу 02) равна сумме ежемесячных авансовых платежей на 1 квартал следующего налогового периода (строка 121 Приложения к Листу 02)";
	ИмяРаздела = "Лист02_5";
	
	Для каждого СтраницаЛ02_5 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02_5) + 1);
		
		// Актуально только для декларации за 9 месяцев
		ДатаКонцаПериодаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		ДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		Если НЕ (КонецКвартала(Дата(Год(ДатаКонцаПериодаОтчета), 9, 30)) = ДатаКонцаПериодаОтчета И 
			НачалоГода(ДатаНачалаПериодаОтчета) = ДатаНачалаПериодаОтчета) Тогда
			Возврат;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002050012003";
		
		ЛеваяЧасть = СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя];
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		ИмяПоказателя = "П002050012103";
	
		ПраваяЧасть = СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя];
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), 
			НСтр("ru='Возможно неправильное исчисление суммы ежемесячного авансового платежа. Необходимо проверить наличие данных о реорганизации, ликвидации организации, закрытии обособленного подразделения, наличие заявления об изменении налогоплательщиком порядка уплаты налога.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_143(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма налога по строке 050 Листа 04 должна быть равна сумме значений по строке 050 и по строке 060 предыдущего отчетного периода, если вид дохода установлен равным ""4"" на Листе 04.";
	ИмяРаздела = "Лист04";
	
	Для каждого СтраницаЛ04 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ04) + 1);
		
		ВидДохода = СтраницаЛ04.Данные[0].Значение["П002090000200"];
		Если ПустаяСтрока(ВидДохода) ИЛИ НЕ ВидДохода = "4" Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002090005003";
	
		ЛеваяЧасть = СтраницаЛ04.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ04.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист04ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист04ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист04ПНП Цикл 
					Если НЕ ВидДохода = СтраницаПНП.Данные["П002090000200"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ04Ст050 = "П002090005003";
					ЗначениеЛ04Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ04Ст050]);
					ЗначениеЛ04Ст050Стр = Формат(ЗначениеЛ04Ст050, "ЧРД=.;ЧН=0");
					НаименованиеЛ04Ст050 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ04Ст050] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ04Ст050, НаименованиеЛ04Ст050,
						ЗначениеЛ04Ст050, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ04Ст060 = "П002090006003";
					ЗначениеЛ04Ст060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ04Ст060]);
					ЗначениеЛ04Ст060Стр = Формат(ЗначениеЛ04Ст060, "ЧРД=.;ЧН=0");
					НаименованиеЛ04Ст060 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ04Ст060] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ04Ст060, НаименованиеЛ04Ст060,
						ЗначениеЛ04Ст060, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ04Ст050 + ЗначениеЛ04Ст060;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ04Ст050Стр + " + " + ЗначениеЛ04Ст060Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Арифметическая ошибка.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru=''"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_144(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма налога по строке 070 Листа 04 должна быть равна сумме значений по строке 070 и по строке 080 предыдущего отчетного периода, если вид дохода установлен равным ""4"" на Листе 04.";
	ИмяРаздела = "Лист04";
	
	Для каждого СтраницаЛ04 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ04) + 1);
		
		ВидДохода = СтраницаЛ04.Данные[0].Значение["П002090000200"];
		Если ПустаяСтрока(ВидДохода) ИЛИ НЕ ВидДохода = "4" Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002090007003";
	
		ЛеваяЧасть = СтраницаЛ04.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ04.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист04ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист04ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист04ПНП Цикл 
					Если НЕ ВидДохода = СтраницаПНП.Данные["П002090000200"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ04Ст070 = "П002090007003";
					ЗначениеЛ04Ст070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ04Ст070]);
					ЗначениеЛ04Ст070Стр = Формат(ЗначениеЛ04Ст070, "ЧРД=.;ЧН=0");
					НаименованиеЛ04Ст070 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ04Ст070] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ04Ст070, НаименованиеЛ04Ст070,
						ЗначениеЛ04Ст070, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ04Ст080 = "П002090008003";
					ЗначениеЛ04Ст080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ04Ст080]);
					ЗначениеЛ04Ст080Стр = Формат(ЗначениеЛ04Ст080, "ЧРД=.;ЧН=0");
					НаименованиеЛ04Ст080 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ04Ст080] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ04Ст080, НаименованиеЛ04Ст080,
						ЗначениеЛ04Ст080, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ04Ст070 + ЗначениеЛ04Ст080;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ04Ст070Стр + " + " + ЗначениеЛ04Ст080Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Арифметическая ошибка.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru=''"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_166(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Доход в виде процентов по строке 370 Листа 06 отчетного периода должен быть больше или равен значению по строке 370 Листа 06 предыдущего отчетного периода.";
	ИмяРаздела = "Лист06";
	
	// Проверяем КС.
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	ИмяПоказателя = "П002110037003";

	ЛеваяЧасть = мДанныеОтчета[ИмяРаздела][ИмяПоказателя];
	ПраваяЧасть = 0;
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, мДанныеОтчета[ИмяРаздела][ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		ИмяРаздела, Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
	
	// Механизм ПНП
	ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
	
	Если ДокументПНП <> Неопределено Тогда 
		
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Лист06ПНП = Неопределено;
		Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист06ПНП) Тогда 
			
			ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Лист06ПНП[ИмяПоказателя]);
			ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
			НаименованиеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя] + "(по данным за предыдущий отчетный период)";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
				НаименованиеПоказателя, ПраваяЧасть, "", ДокументПНП, ИмяРаздела, Неопределено, , СчетчикФормулДляРасшифровок);
				
		КонецЕсли;
		
	КонецЕсли;
	// Механизм ПНП
	
	Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть >= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть >= ПраваяЧасть Тогда 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр + " >= " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Арифметическая ошибка.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru=''"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_167(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Доход в виде процентов по строке 370 Листа 06 отчетного периода должен быть больше или равен значению по строке 370 Листа 06 предыдущего отчетного периода.";
	ИмяРаздела = "Лист06";
	
	// Проверяем КС.
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	ИмяПоказателя = "П002110038003";

	ЛеваяЧасть = мДанныеОтчета[ИмяРаздела][ИмяПоказателя];
	ПраваяЧасть = 0;
	
	// Зарегистрируем левую часть соотношения.
	НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, мДанныеОтчета[ИмяРаздела][ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		ИмяРаздела, Неопределено, , СчетчикФормулДляРасшифровок);
	
	ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
	
	// Механизм ПНП
	ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
	
	Если ДокументПНП <> Неопределено Тогда 
		
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Лист06ПНП = Неопределено;
		Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист06ПНП) Тогда 
			
			ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Лист06ПНП[ИмяПоказателя]);
			ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
			НаименованиеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя] + "(по данным за предыдущий отчетный период)";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
				НаименованиеПоказателя, ПраваяЧасть, "", ДокументПНП, ИмяРаздела, Неопределено, , СчетчикФормулДляРасшифровок);
				
		КонецЕсли;
		
	КонецЕсли;
	// Механизм ПНП
	
	Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть >= ПраваяЧасть) Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть >= ПраваяЧасть Тогда 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
	Расшифровка = ЛеваяЧастьСтр + " >= " + ПраваяЧастьСтр;
	
	ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Арифметическая ошибка.'"));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru=''"));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_176(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Доля налоговой базы по строке 040 Приложения 5 к Листу 02 должна быть равна значению по строке 040 Приложения 5 к Листу 05 предыдущего отчетного периода для ""Расчет составлен"" = ""3"", при условии, что строка 030 отчетного периода больше значения строки 030 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02_5";
	
	Для каждого СтраницаЛ02_5 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02_5) + 1);
		
		РасчетСоставлен = СтраницаЛ02_5.Данные[0].Значение["П002050001000"];
		Если ПустаяСтрока(РасчетСоставлен) ИЛИ НЕ РасчетСоставлен = "3" Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002050004003";
	
		ЛеваяЧасть = СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02_5.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
		ИмяЛ02Ст030 = "П002050003003";
		ЗначениеЛ02Ст030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02_5.Данные[0].Значение[ИмяЛ02Ст030]);
		ЗначениеЛ02Ст030Стр = Формат(ЗначениеЛ02Ст030, "ЧРД=.;ЧН=0");
		НаименованиеЛ02Ст030 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст030];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст030, НаименованиеЛ02Ст030,
			ЗначениеЛ02Ст030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02_5ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02_5ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02_5ПНП Цикл 
					Если НЕ РасчетСоставлен = СтраницаПНП.Данные["П002050001000"] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст040ПНП = "П002050004003";
					ЗначениеЛ02Ст040ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст040ПНП]);
					ЗначениеЛ02Ст040ПНПСтр = Формат(ЗначениеЛ02Ст040ПНП, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст040ПНП = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст040ПНП] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст040ПНП, НаименованиеЛ02Ст040ПНП,
						ЗначениеЛ02Ст040ПНП, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ИмяЛ02Ст030ПНП = "П002050003003";
					ЗначениеЛ02Ст030ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст030ПНП]);
					ЗначениеЛ02Ст030ПНПСтр = Формат(ЗначениеЛ02Ст030ПНП, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст030ПНП = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст030ПНП] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст030ПНП, НаименованиеЛ02Ст030ПНП,
						ЗначениеЛ02Ст030ПНП, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст040ПНП;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И НЕ ЗначениеЛ02Ст030 > ЗначениеЛ02Ст030ПНП)
				ИЛИ (НЕ ДокументПНП = Неопределено И ЗначениеЛ02Ст030 > ЗначениеЛ02Ст030ПНП И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И ЗначениеЛ02Ст030 > ЗначениеЛ02Ст030ПНП И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
			
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр + ", если код Расчет составлен = 3 и " + ЗначениеЛ02Ст030Стр + " > [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр + ", если код Расчет составлен = 3 и " + ЗначениеЛ02Ст030Стр + " > " +
				ЗначениеЛ02Ст030ПНПСтр;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Арифметическая ошибка.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru=''"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_218(СтруктураРезультата)
	
	//Для тех организаций, которые уплачивают авансовые платежи за квартал
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = Перечисления.Периодичность.Квартал Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленного налога по строке 080 Приложения 6 к Листу 02 должна быть равна разнице значений строки 070 и строки 090  плюс значение строки 120 Приложения 6 к Листу 02 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02_6";
	
	Для каждого СтраницаЛ02_6 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02_6) + 1);
		ИмяИНН = "П002140000101";
		ЗначениеИНН = СтраницаЛ02_6.Данные[0].Значение[ИмяИНН];
		Если ПустаяСтрока(ЗначениеИНН) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002140008003";
	
		ЛеваяЧасть = СтраницаЛ02_6.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02_6.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ЗначениеИНН = СтраницаПНП.Данные[ИмяИНН] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст070 = "П002140007003";
					ЗначениеЛ02Ст070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст070]);
					ЗначениеЛ02Ст070Стр = Формат(ЗначениеЛ02Ст070, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст070 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст070] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст070, НаименованиеЛ02Ст070,
						ЗначениеЛ02Ст070, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ02Ст090 = "П002140009003";
					ЗначениеЛ02Ст090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст090]);
					ЗначениеЛ02Ст090Стр = Формат(ЗначениеЛ02Ст090, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст090 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст090] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст090, НаименованиеЛ02Ст090,
						ЗначениеЛ02Ст090, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ИмяЛ02Ст120 = "П002140012003";
					ЗначениеЛ02Ст120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст120]);
					ЗначениеЛ02Ст120Стр = Формат(ЗначениеЛ02Ст120, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст120 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст120] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст120, НаименованиеЛ02Ст120,
						ЗначениеЛ02Ст120, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ02Ст070 - ЗначениеЛ02Ст090 + ЗначениеЛ02Ст120;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст070Стр + " - " + ЗначениеЛ02Ст090Стр + " + " + ЗначениеЛ02Ст120Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.1 и п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_219(СтруктураРезультата)
	
	//Актуально только для декларации за 1-й квартал
	СохрДокДата			 = СтруктураРеквизитовФормы.мСохраненныйДок.Дата;
	СохрДокДатаНачала	 = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала;
	СохрДокДатаОкончания = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
	Если НЕ (СохрДокДатаНачала = НачалоГода(СохрДокДата) И СохрДокДатаОкончания = НачалоДня(КонецКвартала(НачалоГода(СохрДокДата)))) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленного налога по строке 080 Приложения 6 к  Листу 02 должна быть равна значению строки 121 Приложения 6 к Листу 02 Декларации за 9 месяцев предыдущего налогового периода.";
	ИмяРаздела = "Лист02_6";
	
	Для каждого СтраницаЛ02_6 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02_6) + 1);
		
		ИмяИНН = "П002140000101";
		ЗначениеИНН = СтраницаЛ02_6.Данные[0].Значение[ИмяИНН];
		Если ПустаяСтрока(ЗначениеИНН) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002140008003";
	
		ЛеваяЧасть = СтраницаЛ02_6.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02_6.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, -109, Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ЗначениеИНН = СтраницаПНП.Данные[ИмяИНН] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст121 = "П002140012103";
					ЗначениеЛ02Ст121 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст121]);
					ЗначениеЛ02Ст121Стр = Формат(ЗначениеЛ02Ст121, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст121 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст121] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст121, НаименованиеЛ02Ст121,
						ЗначениеЛ02Ст121, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ПраваяЧасть = ЗначениеЛ02Ст121;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.2 ст.286 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_220(СтруктураРезультата)
	
	//Для тех организаций, кто уплачивает ав платежи исходя из фактической прибыли
	КодПериода = ?(ЗначениеЗаполнено(мДанныеОтчета.Титульный.Период), Число(мДанныеОтчета.Титульный.Период), 0);
	Если НЕ (КодПериода >= 35 И КодПериода <= 45) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма начисленного налога по строке 080 Приложения 6 к Листу 02 должна быть равна разнице значений строки 070 и строки 090 Приложения 6 Листа 02 предыдущего отчетного периода.";
	ИмяРаздела = "Лист02_6";
	
	Для каждого СтраницаЛ02 Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ02) + 1);
		
		ИмяИНН = "П002140000101";
		ЗначениеИНН = СтраницаЛ02.Данные[0].Значение[ИмяИНН];
		Если ПустаяСтрока(ЗначениеИНН) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверяем КС.
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ИмяПоказателя = "П002140008003";
	
		ЛеваяЧасть = СтраницаЛ02.Данные[0].Значение[ИмяПоказателя];
		ПраваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаЛ02.Данные[0].Значение[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			ИмяРаздела, Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ЛеваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть), "ЧРД=.;ЧН=0");
		
		// Механизм ПНП
		КодыСовпадают = Истина;
		ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок, , Истина);
		
		Если ДокументПНП <> Неопределено Тогда 
			
			ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
			
			Лист02ПНП = Неопределено;
			Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, Лист02ПНП) Тогда 
				Для Каждого СтраницаПНП Из Лист02ПНП Цикл 
					Если НЕ ЗначениеИНН = СтраницаПНП.Данные[ИмяИНН] Тогда
						КодыСовпадают = Ложь;
						Продолжить;
					КонецЕсли;
					
					НомерСтраницыПНП = Строка(ДанныеПНП.ДанныеРазделовРеглОтчета[ИмяРаздела].Индекс(СтраницаПНП) + 1);
					
					ИмяЛ02Ст070 = "П002140007003";
					ЗначениеЛ02Ст070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст070]);
					ЗначениеЛ02Ст070Стр = Формат(ЗначениеЛ02Ст070, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст070 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст070] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст070, НаименованиеЛ02Ст070,
						ЗначениеЛ02Ст070, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
					
					ИмяЛ02Ст090 = "П002140009003";
					ЗначениеЛ02Ст090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаПНП.Данные[ИмяЛ02Ст090]);
					ЗначениеЛ02Ст090Стр = Формат(ЗначениеЛ02Ст090, "ЧРД=.;ЧН=0");
					НаименованиеЛ02Ст090 = РасшифровкиПоказателей[ИмяРаздела][ИмяЛ02Ст090] + "(по данным за предыдущий отчетный период)";
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяЛ02Ст090, НаименованиеЛ02Ст090,
						ЗначениеЛ02Ст090, "", ДокументПНП, ИмяРаздела, Неопределено, НомерСтраницыПНП, СчетчикФормулДляРасшифровок);
						
					ПраваяЧасть = ЗначениеЛ02Ст070 - ЗначениеЛ02Ст090;
					КодыСовпадают = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Механизм ПНП
		
		Если КодыСовпадают Тогда 
			Если (ДокументПНП = Неопределено) ИЛИ (НЕ ДокументПНП = Неопределено И ЛеваяЧасть = ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ИначеЕсли НЕ ДокументПНП = Неопределено И НЕ ЛеваяЧасть = ПраваяЧасть Тогда 
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
		Иначе 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ПраваяЧастьСтр = Формат(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть), "ЧРД=.;ЧН=0");
		Если ДокументПНП = Неопределено ИЛИ НЕ КодыСовпадают Тогда 
			Расшифровка = ЛеваяЧастьСтр + " = [...]";
		Иначе 
			Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеЛ02Ст070Стр + " - " + ЗначениеЛ02Ст090Стр + " Итог [" + ПраваяЧастьСтр  + "].";
		КонецЕсли;
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно, неправильное отражение начисленных авансовых платежей.'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п.1 ст. 284 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_4_1(СтруктураРезультата)
	
	Если ДанныеФормыВЗначение(мДеревоСтраницОтчета, Тип("ДеревоЗначений")).Строки.Найти("Лист02_3").ПоказатьСтраницу = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументМДКС = РегламентированнаяОтчетность.ПолучитьДокументМДКС(СтруктураРеквизитовФормы.мСохраненныйДок,
		"РегламентированныйОтчетБухОтчетность");
	Если ДокументМДКС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Значение строки 010 Приложения 3 Листа 02 отчетного налогового периода должно быть больше нуля, если значение строки 4211 ""Поступления от продажи внеоборотных активов (кроме финансовых вложений)"" Отчета о движении денежных средств в отчетном налоговом периоде больше нуля";
	
	// Проверяем КС.
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	
	ДанныеМДКС = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументМДКС);
	НазваниеПоказателя = "Поступления от продажи внеоборотных активов (кроме финансовых вложений) (Бухгалтерская отчетность)";
	ИмяПоказателя = "П000100421103";
	ИмяРаздела = "ОДДС";
	РазделОДДС = Неопределено;
	ЛеваяЧастьУсловия = Неопределено;
	Если ДанныеМДКС.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, РазделОДДС) Тогда 
		ЛеваяЧастьУсловия = РазделОДДС[ИмяПоказателя];
	КонецЕсли;
	ЛеваяЧастьУсловияСтр = Формат(ЛеваяЧастьУсловия, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
		ЛеваяЧастьУсловия, "", ДокументМДКС, ИмяРаздела, Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяРаздела = "Лист02_3";
	
	Для каждого СтраницаЛ03_А Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ03_А) + 1);
		
		ЛеваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		ИмяПоказателя = "П002030001003";
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		Если Прав(НазваниеПоказателя, 1) = ")" Тогда
			НазваниеПоказателя = СтрЗаменить(НазваниеПоказателя, ")", " Страница " + НомерСтраницы);
		КонецЕсли;
		ЗначениеПоказателя = СтраницаЛ03_А.Данные[0].Значение[ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено,
			НомерСтраницы, СчетчикФормулДляРасшифровок);
		Расшифровка = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		ЛеваяЧасть = ЗначениеПоказателя;
		
		ЛеваяЧасть = ЗначениеПоказателя;
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		
		УсловиеВыполнено = ЛеваяЧастьУсловия > 0;
		
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И ЛеваяЧасть > 0) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Расшифровка = ЛеваяЧастьСтр + " > 0, когда " + ЛеваяЧастьУсловияСтр + " > 0";
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно занижен доход от реализации внеоборотных активов'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п. 1 ст. 268 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_4_2(СтруктураРезультата)
	
	Если ДанныеФормыВЗначение(мДеревоСтраницОтчета, Тип("ДеревоЗначений")).Строки.Найти("Лист02_3").ПоказатьСтраницу = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументМДКС = РегламентированнаяОтчетность.ПолучитьДокументМДКС(СтруктураРеквизитовФормы.мСохраненныйДок,
		"РегламентированныйОтчетБухОтчетность");
	Если ДокументМДКС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Значение строки 030 Приложения 3 Листа 02 отчетного налогового периода должно быть больше нуля, если значение строки 4211 ""Поступления от продажи внеоборотных активов (кроме финансовых вложений)"" Отчета о движении денежных средств в отчетном налоговом периоде больше нуля";
	
	// Проверяем КС.
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	
	ДанныеМДКС = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументМДКС);
	НазваниеПоказателя = "Поступления от продажи внеоборотных активов (кроме финансовых вложений) (Бухгалтерская отчетность)";
	ИмяПоказателя = "П000100421103";
	ИмяРаздела = "ОДДС";
	РазделОДДС = Неопределено;
	ЛеваяЧастьУсловия = Неопределено;
	Если ДанныеМДКС.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, РазделОДДС) Тогда 
		ЛеваяЧастьУсловия = РазделОДДС[ИмяПоказателя];
	КонецЕсли;
	ЛеваяЧастьУсловияСтр = Формат(ЛеваяЧастьУсловия, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
		ЛеваяЧастьУсловия, "", ДокументМДКС, ИмяРаздела, Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяРаздела = "Лист02_3";
	
	Для каждого СтраницаЛ03_А Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ03_А) + 1);
		
		ЛеваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		ИмяПоказателя = "П002030003003";
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		Если Прав(НазваниеПоказателя, 1) = ")" Тогда
			НазваниеПоказателя = СтрЗаменить(НазваниеПоказателя, ")", " Страница " + НомерСтраницы);
		КонецЕсли;
		ЗначениеПоказателя = СтраницаЛ03_А.Данные[0].Значение[ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено,
			НомерСтраницы, СчетчикФормулДляРасшифровок);
		Расшифровка = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		ЛеваяЧасть = ЗначениеПоказателя;
		
		ЛеваяЧасть = ЗначениеПоказателя;
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		
		УсловиеВыполнено = ЛеваяЧастьУсловия > 0;
		
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И ЛеваяЧасть > 0) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Расшифровка = ЛеваяЧастьСтр + " > 0, когда " + ЛеваяЧастьУсловияСтр + " > 0";
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно занижен доход от реализации внеоборотных активов'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='п. 1 ст. 268 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_5(СтруктураРезультата)
	
	Если ДанныеФормыВЗначение(мДеревоСтраницОтчета, Тип("ДеревоЗначений")).Строки.Найти("Лист03А").ПоказатьСтраницу = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДокументМДКС = РегламентированнаяОтчетность.ПолучитьДокументМДКС(СтруктураРеквизитовФормы.мСохраненныйДок, "РегламентированныйОтчетБухОтчетность");
	Если ДокументМДКС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	ОписаниеКС = "Сумма значений строк 110 и 120 Листа 03 в отчетном налоговом периоде должна быть больше нуля, если значение строки 4322 (Платежи на выплату дивидендов и иных платежей по расределению прибыли в пользу собственников (участников)) Отчета о движении денежных средств отчетного налогового периода больше нуля";
	
	// Проверяем КС.
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть условия.
	
	ДанныеМДКС = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументМДКС);
	НазваниеПоказателя = "Платежи на выплату дивидендов и иных платежей по распределению прибыли в пользу собственников (участников) (Бухгалтерская отчетность)";
	ИмяПоказателя = "П000100432203";
	ИмяРаздела = "ОДДС";
	РазделОДДС = Неопределено;
	ЛеваяЧастьУсловия = Неопределено;
	Если ДанныеМДКС.ДанныеРазделовРеглОтчета.Свойство(ИмяРаздела, РазделОДДС) Тогда 
		ЛеваяЧастьУсловия = РазделОДДС[ИмяПоказателя];
	КонецЕсли;
	ЛеваяЧастьУсловияСтр = Формат(ЛеваяЧастьУсловия, "ЧРД=.;ЧН=0");
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
		ЛеваяЧастьУсловия, "", ДокументМДКС, ИмяРаздела, Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяРаздела = "Лист03А";
	
	Для каждого СтраницаЛ03_А Из мДанныеОтчета[ИмяРаздела] Цикл
		НомерСтраницы = Строка(мДанныеОтчета[ИмяРаздела].Индекс(СтраницаЛ03_А) + 1);
		
		ЛеваяЧасть = 0;
		
		// Зарегистрируем левую часть соотношения.
		ИмяПоказателя = "П002060011003";
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		ЗначениеПоказателя = СтраницаЛ03_А.Данные[0].Значение[ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено,
			НомерСтраницы, СчетчикФормулДляРасшифровок);
		Расшифровка = Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		ЛеваяЧасть = ЛеваяЧасть + ЗначениеПоказателя;
		
		ИмяПоказателя = "П002060012003";
		НазваниеПоказателя = РасшифровкиПоказателей[ИмяРаздела][ИмяПоказателя];
		ЗначениеПоказателя = СтраницаЛ03_А.Данные[0].Значение[ИмяПоказателя];
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, НазваниеПоказателя,
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела, Неопределено,
			НомерСтраницы, СчетчикФормулДляРасшифровок);
		Расшифровка = Расшифровка + " + " + Формат(ЗначениеПоказателя, "ЧРД=.;ЧН=0");
		ЛеваяЧасть = ЛеваяЧасть + ЗначениеПоказателя;
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		
		УсловиеВыполнено = ЛеваяЧастьУсловия > 0;
		
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И ЛеваяЧасть > 0) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Расшифровка + " Итог [" + ЛеваяЧастьСтр + "] > 0, когда " + ЛеваяЧастьУсловияСтр + " > 0";
		
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='Возможно занижение налога на доходы в виде дивидендов'"));
		СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НСтр("ru='ст. 275 НК РФ'"));
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Если Элемент.ТекущаяОбласть.Имя = "ВходитВГруппуОП" И Элемент.ТекущаяОбласть.Гиперссылка Тогда
		
		Если Элемент.ТекущаяОбласть.Значение = "" Тогда
			Элемент.ТекущаяОбласть.Значение = "V";
			ЭтаФорма.ВГруппуОПВходитОрганизация = Истина;
		Иначе
			Элемент.ТекущаяОбласть.Значение = "";
			ЭтаФорма.ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;
		
		ВГруппуОПВходитОрганизацияПриИзменении(Элемент);
		
	КонецЕсли;
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0001300040") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0021300010") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0021200010") > 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
КонецФункции