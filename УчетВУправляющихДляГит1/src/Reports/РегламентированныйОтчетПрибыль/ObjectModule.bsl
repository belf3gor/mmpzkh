#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
			
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, "1", "0"));
	
	ЗаполнитьРеглОтчет(ИмяФормы,
					   ПараметрыАвтоформирования,
					   КорректирующийОтчет,
					   РазделыОтчета,
					   ДанныеРеглОтчета);
		
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ПараметрыАвтоформирования.ДатаНачала;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = ПараметрыАвтоформирования.ДатаОкончания;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПериодичность 		   = Перечисления.Периодичность.Квартал;
	
	ДанныеРеглОтчета.Вставить("СтруктураВариантыЗаполнения", Новый Структура);
	СформироватьВариантыЗаполнения(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
								   
	ЗаполнитьСоответствиеНомераМесяцаКодуОтчетногоПериода(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	РазделыОтчета.Титульный.Данные.Вставить("ПоМесту",
		СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПоМесту));
		
	ПоказатьПериод(ИмяФормы, РазделыОтчета.Титульный.Данные, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияОбОрганизации(ИмяФормы,
								   РазделыОтчета.Титульный.Данные,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.ДатаПодписи);
								   
	ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета);							   
										   
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
													  
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Периодичность", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыЗаписи.Вставить("Комментарий", "");
	ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.Данные.КодИМНС);
	ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.Данные.КПП1);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("СтруктураВариантыЗаполнения", ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
	ПараметрыЗаписи.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
	ПараметрыЗаписи.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
	ПараметрыЗаписи.Вставить("СохранятьРасшифровку", Ложь);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
	ПараметрыЗаписи.Вставить("ОКТМОДляРазделов", ДанныеРеглОтчета.СтруктураРеквизитовФормы.ОКТМОДляРазделов);
	 				
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел1_3", 	 		   Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Лист02_6б",		 	   Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Лист03А", 		 	 	   Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Лист03Б", 		 	 	   Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Лист07", 		 		   Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Лист08", 		 	 	   Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Лист09", 		 	 	   Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Приложение1", 	 		   Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Приложение2",		       Новый Структура);
	ДанныеДопСтрок.Приложение2.Вставить("П0000200040", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Приложение2.Вставить("П0000200051", Новый ТаблицаЗначений);
		
	ДанныеДопСтрок.Раздел1_3.Колонки.Добавить("П000130004001",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));	
	ДанныеДопСтрок.Раздел1_3.Колонки.Добавить("П000130004003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280002003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280002103",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280003003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280003103",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280004003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280005003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280006003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280006103",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280006203",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280007003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
		
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330000503",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330000504",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330000505",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(2)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330002001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330002002",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330002003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330003003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330004003",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330005003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330006003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340000503",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340000504",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340000505",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(2)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340002001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340002002",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340002003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340003003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340004003",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340005003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340006003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
		
	ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
	ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001002",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001004",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001005",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001006",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001007",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
		
	ДанныеДопСтрок.Лист08.Колонки.Добавить("П000800000201",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));	
		
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910000101",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910000201",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910001003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910002003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));			
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910003001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910003003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910004001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910004003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910005001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910005003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910006001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910006003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910007001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910007003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910008001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910008003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910009001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910009003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910010001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910010003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910011001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910011003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910012001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910012003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));		
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910013003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));		
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910014003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910015003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
	ДанныеДопСтрок.Приложение1.Колонки.Добавить("П000010001001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));	
	ДанныеДопСтрок.Приложение1.Колонки.Добавить("П000010001002",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Приложение1.Колонки.Добавить("П000010001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));	
	ДанныеДопСтрок.Приложение1.Колонки.Добавить("П000010001004",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));	
				
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004001",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));	
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004101",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004201",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));	
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004301",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004202",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));	
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004302",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004203",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));	
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004303",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004204",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));	
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004304",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004205",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));	
	ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004305",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
	ДанныеДопСтрок.Приложение2.П0000200051.Колонки.Добавить("П000020005101",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));	
	ДанныеДопСтрок.Приложение2.П0000200051.Колонки.Добавить("П000020005201",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));		
		
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел1_1", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Раздел1_2",   Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Раздел1_3", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист02", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист02_1", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист02_2", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист02_3", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист02_4", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист02_5", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист02_6", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист02_6а", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист03А", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист03Б", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист04", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист05", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист08", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Лист09", 	 Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Приложение2", Новый ТаблицаЗначений);
		                 	
	ДанныеДопСтраниц.Раздел1_1.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел1_1.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел1_1.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел1_1.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
		
	ДанныеДопСтраниц.Раздел1_2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел1_2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел1_2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел1_2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));	
		
	ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));	
	ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("ТаблицаЗначений"));	
		
	ДанныеДопСтраниц.Лист02.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист02.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));		
		
	ДанныеДопСтраниц.Лист02_1.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист02_1.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_1.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_1.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));			
		
	ДанныеДопСтраниц.Лист02_2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист02_2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));				
		
	ДанныеДопСтраниц.Лист02_3.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист02_3.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_3.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_3.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));					
		
	ДанныеДопСтраниц.Лист02_4.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист02_4.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_4.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_4.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));						
		
	ДанныеДопСтраниц.Лист02_5.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист02_5.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_5.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_5.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));						
		
	ДанныеДопСтраниц.Лист02_6.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист02_6.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_6.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_6.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));						
		
	ДанныеДопСтраниц.Лист02_6а.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист02_6а.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_6а.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист02_6а.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));						
		
	ДанныеДопСтраниц.Лист03А.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист03А.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист03А.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист03А.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));	
	ДанныеДопСтраниц.Лист03А.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("ТаблицаЗначений"));		
		
	ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));	
	ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("ТаблицаЗначений"));			
		
	ДанныеДопСтраниц.Лист04.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист04.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист04.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист04.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));							
		
	ДанныеДопСтраниц.Лист05.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист05.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист05.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист05.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));								
		
	ДанныеДопСтраниц.Лист08.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист08.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист08.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист08.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));	
	ДанныеДопСтраниц.Лист08.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("ТаблицаЗначений"));				
		
	ДанныеДопСтраниц.Лист09.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Лист09.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист09.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Лист09.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));	
	ДанныеДопСтраниц.Лист09.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("ТаблицаЗначений"));					
		
	ДанныеДопСтраниц.Приложение2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Приложение2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Приложение2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Приложение2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));	
	ДанныеДопСтраниц.Приложение2.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("Структура"));						
		
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел1_1",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Раздел1_1));
						
	РазделыОтчета.Вставить("Раздел1_2",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Раздел1_2));
	
	РазделыОтчета.Вставить("Раздел1_3",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Истина, ДанныеДопСтраниц.Раздел1_3, ДанныеДопСтрок.Раздел1_3, "П0001300040"));
						
	РазделыОтчета.Вставить("Лист02",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист02));
						
	РазделыОтчета.Вставить("Лист02_1",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист02_1));
						
	РазделыОтчета.Вставить("Лист02_2",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист02_2));
						
	РазделыОтчета.Вставить("Лист02_3",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист02_3));					
						
	РазделыОтчета.Вставить("Лист02_4",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист02_4));
						
	РазделыОтчета.Вставить("Лист02_5",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист02_5));
						
	РазделыОтчета.Вставить("Лист02_6",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист02_6));					
						
	РазделыОтчета.Вставить("Лист02_6а",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист02_6а));					
						
	РазделыОтчета.Вставить("Лист02_6б",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Ложь, Новый Структура, ДанныеДопСтрок.Лист02_6б, "П0002800010"));
						
	РазделыОтчета.Вставить("Лист03А",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Истина, ДанныеДопСтраниц.Лист03А, ДанныеДопСтрок.Лист03А, "П0003300005"));
						
	РазделыОтчета.Вставить("Лист03Б",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Истина, ДанныеДопСтраниц.Лист03Б, ДанныеДопСтрок.Лист03Б, "П0003400005"));
						
	РазделыОтчета.Вставить("Лист04",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист04));
						
	РазделыОтчета.Вставить("Лист05",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Лист05));
						
	РазделыОтчета.Вставить("Лист06",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Ложь, Новый Структура));
						
	РазделыОтчета.Вставить("Лист07",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Ложь, Новый Структура, ДанныеДопСтрок.Лист07, "П0007000010"));					
						
	РазделыОтчета.Вставить("Лист08",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Истина, ДанныеДопСтраниц.Лист08, ДанныеДопСтрок.Лист08, "П0008000002"));
						
	РазделыОтчета.Вставить("Лист09",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Истина, ДанныеДопСтраниц.Лист09, ДанныеДопСтрок.Лист09, "П0009100001"));
						
	РазделыОтчета.Вставить("Приложение1",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Ложь, Новый Структура, ДанныеДопСтрок.Приложение1, "П0000100010"));					
						
	РазделыОтчета.Вставить("Приложение2",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок",
						Истина, ДанныеДопСтраниц.Приложение2, ДанныеДопСтрок.Приложение2));
						                                                                   			
	Возврат РазделыОтчета;
	
КонецФункции

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 ДанныеРеглОтчета)
		
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
			
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
		
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
			
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
	
	ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета);
		
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
		
	Контейнер = Новый Структура;
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
			
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
					
	КонецЕсли;
			
КонецПроцедуры

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт

	СтруктураРеквизитовФормы = Новый Структура;
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2016Кв4") Тогда
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "22/02/2017");
	КонецЕсли;	
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей", "СоставПоказателей" + Прав(СокрЛП(ИмяФормы), 7));
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Декларация по налогу на прибыль");
	СтруктураРеквизитовФормы.Вставить("ИмяОтчета", ЭтотОбъект.Метаданные().Имя);
	СтруктураРеквизитовФормы.Вставить("ИмяФормы", ИмяФормы);
	СтруктураРеквизитовФормы.Вставить("КБК_ФБ", "18210101011011000110");
	СтруктураРеквизитовФормы.Вставить("КБК_ФБ_КГН", "18210101013011000110");
	СтруктураРеквизитовФормы.Вставить("КБК_ФБ_КИК", "18210101080011000110");
	СтруктураРеквизитовФормы.Вставить("КБК_БСРФ", "18210101012021000110");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел1_3", "П0001300040");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист02_6б", "П0002800010");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист03А", "П0003300005");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист03Б", "П0003400005");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист07", "П0007000010");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист08", "П0008000002");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист09", "П0009100001");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение1", "П0000100010");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение2_1", "П0000200040");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение2_2", "П0000200051");
	СтруктураРеквизитовФормы.Вставить("СоответствиеЕдиницыИзмеренияДелителю", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("НалоговыеОрганы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВГруппуОПВходитОрганизацияДоступность", Ложь);
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоМесту", "214");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоДНБ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповНеотрицательноеЧислоДНБ");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьКвартал");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьМесяц");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН");
	СтруктураРеквизитовФормы.Вставить("СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ОКТМОДляРазделов");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаДопСтрокПриложение2");
	СтруктураРеквизитовФормы.Вставить("РежимНаличияОбособленныхПодразделенийПоДаннымОтчета", Ложь);
	
	СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
			
КонецПроцедуры

Процедура ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
			
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Данные.Количество() = 0 Тогда
			
			ТабличныйДокумент.Очистить();
				
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Раздел.Ключ));
				
			ДанныеТабличногоДокумента = СобратьДанные(ИмяФормы, ТабличныйДокумент);
			
			Если Раздел.Значение.МногостраничностьВРазделе Тогда
				
				ДопСтраницаРаздела = Раздел.Значение.Данные.Добавить();
												
				Если Раздел.Ключ = "Раздел1_3"
				 ИЛИ Раздел.Ключ = "Лист03А"
				 ИЛИ Раздел.Ключ = "Лист03Б"
				 ИЛИ Раздел.Ключ = "Лист08"
				 ИЛИ Раздел.Ключ = "Лист09" Тогда
					ДопСтраницаРаздела.Представление = "Лист N 1";
				Иначе
					ДопСтраницаРаздела.Представление = "Новая страница";
				КонецЕсли;
								
				ДопСтраницаРаздела.АктивнаяСтраница = Истина;
				ДопСтраницаРаздела.АвтоматическоеПредставление = Истина;
				ДопСтраницаРаздела.Данные = ДанныеТабличногоДокумента;
				
				Если Раздел.Ключ = "Лист02_5"
				 ИЛИ Раздел.Ключ = "Лист02_6а" Тогда
				 
				 	ДопСтраницаРаздела.Данные.Вставить("ВГруппуОПВходитОрганизация", Ложь);
										
				КонецЕсли;	
										
				Если Раздел.Значение.Свойство("ДанныеДопСтрок")
				   И ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
				   
				    Раздел.Значение.ДанныеДопСтрок.Добавить();
								   							
					Если ТипЗнч(ДопСтраницаРаздела.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						ДопСтраницаРаздела.ДанныеДопСтрок = Раздел.Значение.ДанныеДопСтрок;
						
					КонецЕсли;	
					
				ИначеЕсли Раздел.Значение.Свойство("ДанныеДопСтрок")
				   		И ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("Структура") Тогда
						
					Для Каждого ДопСтрока Из Раздел.Значение.ДанныеДопСтрок Цикл
							
						ДопСтрока.Значение.Добавить();
							
					КонецЦикла;
					
					ДопСтраницаРаздела.ДанныеДопСтрок = Раздел.Значение.ДанныеДопСтрок;
				   				   
				КонецЕсли;   
												
			Иначе
				
				Раздел.Значение.Данные = ДанныеТабличногоДокумента;
				
				Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
					
					Если ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ДопСтрока Из Раздел.Значение.ДанныеДопСтрок Цикл
							
							ДопСтрока.Значение.Добавить();
							
						КонецЦикла;
						
					Иначе
							
						Раздел.Значение.ДанныеДопСтрок.Добавить();
						
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
							
		КонецЕсли;
	
	КонецЦикла;
			
КонецПроцедуры

Функция СобратьДанные(ИмяФормы, ТабличныйДокумент)

	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		Если НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ТекущаяОбласть.СодержитЗначение = Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	// Пример.
	Приемник.Титульный.ТелОрганизации = Источник.Титульный.ТелОрганизации;
					 	 	
КонецПроцедуры

Процедура СформироватьВариантыЗаполнения(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураВариантыЗаполнения,
										 ТаблицаСоставПоказателей = Неопределено) Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
			
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
			
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;			
					
			КодПоказателяПоФорме 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита	     = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);						
			
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
								   	МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный  = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если КодПоказателя = "П000200032003"
			 ИЛИ КодПоказателя = "П000200033003"
			 ИЛИ КодПоказателя = "П000200034003"
			 ИЛИ КодПоказателя = "П000260000601" Тогда
			
				чВариантЗаполнения = 5;
			
			КонецЕсли;
			
			Если ТипЗнч(ТаблицаСоставПоказателей) = Тип("ТаблицаЗначений") Тогда
				
				НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
				НоваяСтрока.ИмяПоляТаблДокумента   	 = ИмяСтраницы;
				НоваяСтрока.КодПоказателяПоСоставу 	 = КодПоказателя;
				НоваяСтрока.КодПоказателяПоФорме   	 = КодПоказателяПоФорме;
				НоваяСтрока.ПризнМногострочности   	 = ПризнМногострочность;
				НоваяСтрока.ТипДанныхПоказателя 	 = ТипДанныхРеквизита;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
				
			КонецЕсли;	
							
			Если чВариантЗаполнения <> 0
			 ИЛИ ИмяСтраницы = "Раздел1_3" Тогда
				
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ?(НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			СтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьПериод(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы) Экспорт
	
	ОтчетныйПериод = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		ОтчетныйПериод = СтруктураДанныхТитульный.Области.Период.Значение;
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		ОтчетныйПериод = СтруктураДанныхТитульный.Период;
    КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ОтчетныйПериод) И СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьПериодОтчета(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы);
	КонецЕсли;
	
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		СтруктураДанныхТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		СтруктураДанныхТитульный.ОтчетГод = ОтчетныйГод;
    КонецЕсли;
		
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
		СтруктураРеквизитовФормы.СтрПериодОтчета
			= РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(
			НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
			КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Ложь");
	Иначе
		СтруктураРеквизитовФормы.СтрПериодОтчета
			= ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
			КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьСоответствиеНомераМесяцаКодуОтчетногоПериода(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН   = Новый Соответствие;
	СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН = Новый Соответствие;
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(3,  "13");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(6,  "14");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(9,  "15");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(12, "16");
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(3,  "21");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(6,  "31");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(9,  "33");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(12, "34");
		
	Иначе
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(1,  "57");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(2,  "58");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(3,  "59");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(4,  "60");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(5,  "61");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(6,  "62");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(7,  "63");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(8,  "64");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(9,  "65");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(10, "66");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(11, "67");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(12, "68");
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(1,  "35");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(2,  "36");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(3,  "37");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(4,  "38");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(5,  "39");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(6,  "40");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(7,  "41");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(8,  "42");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(9,  "43");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(10, "44");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(11, "45");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(12, "46");
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН
		= СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН;
	
	СтруктураРеквизитовФормы.СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН
		= СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН;
	
КонецПроцедуры
	
Процедура ЗаполнитьПериодОтчета(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы) Экспорт
	
	ОтчетныйПериод = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		ОтчетныйПериод = СтруктураДанныхТитульный.Области.Период.Значение;
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		ОтчетныйПериод = СтруктураДанныхТитульный.Период;
    КонецЕсли;
	
	Если ОтчетныйПериод <> "50" Тогда
		
		ПоМесту = "";
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			ПоМесту = СтруктураДанныхТитульный.Области.ПоМесту.Значение;
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			ПоМесту = СтруктураДанныхТитульный.ПоМесту;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоМесту) Тогда
			
			ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");
			
			Если ЭтоКонсолидированнаяГруппа Тогда
				КодОтчетногоПериода
					= СтруктураРеквизитовФормы.СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН[
						Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
			Иначе
				КодОтчетногоПериода
					= СтруктураРеквизитовФормы.СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН[
						Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
			КонецЕсли;
			
		Иначе
			
			КодОтчетногоПериода = "";
			
		КонецЕсли;
						
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			СтруктураДанныхТитульный.Области.Период.Значение = КодОтчетногоПериода;
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			СтруктураДанныхТитульный.Период = КодОтчетногоПериода;
		КонецЕсли;
		
	КонецЕсли;
			
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		СтруктураДанныхТитульный.Области.ОтчетГод.Значение
			= Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		СтруктураДанныхТитульный.ОтчетГод
			= Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
    КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураДанныхТитульный,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 ИзмененаДатаПодписи = Ложь) Экспорт
			
	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
								
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			СтруктураДанныхТитульный.Области.ИНН1.Значение = ИНН;
			СтруктураДанныхТитульный.Области.КПП1.Значение = КПП;
			СтруктураДанныхТитульный.Области.КодИМНС.Значение = КодНО;
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			СтруктураДанныхТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			СтруктураДанныхТитульный.ИНН1 = ИНН;
			СтруктураДанныхТитульный.КПП1 = КПП;
			СтруктураДанныхТитульный.КодИМНС = КодНО;
			СтруктураДанныхТитульный.НаимОрг = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
		КонецЕсли;	
		
		СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		СтруктураРеквизитовФормы.ОКТМОДляРазделов = СведенияОбОрганизации.ОКТМО;
				
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
								?(ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент"),
								 			  СтруктураДанныхТитульный.Области.ОКВЭД.Значение,
											  				   СтруктураДанныхТитульный.ОКВЭД));	
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы,
								  СтруктураРеквизитовФормы,
								  СтруктураДанныхТитульный,
								  ДатаПодписи);
		              	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
			
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.Области.КодИМНС.Значение);
		КПП   = СокрЛП(СтруктураДанныхТитульный.Области.КПП1.Значение);
						
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.КодИМНС);
		КПП   = СокрЛП(СтруктураДанныхТитульный.КПП1);
		
	КонецЕсли;	
			
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
								СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук,
																				  СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
	    Подписант 							 = СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 				 = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхТитульный.Области.ПрПодп.Значение       = ТипПодписанта;
		СтруктураДанныхТитульный.Области.ОргПодписант.Значение = Подписант;
		СтруктураДанныхТитульный.Области.ОргУп.Значение        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.Области.ДокУпПред.Значение    = ДокументПредставителя;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		СтруктураДанныхТитульный.ПрПодп       = ТипПодписанта;
		СтруктураДанныхТитульный.ОргПодписант = Подписант;
		СтруктураДанныхТитульный.ОргУп        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.ДокУпПред    = ДокументПредставителя;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));	
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
			
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1_1";
	СтрокаУровня1.Представление      = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1_2";
	СтрокаУровня1.Представление      = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1_3";
	СтрокаУровня1.Представление      = "Раздел 1.3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02";
	СтрокаУровня1.Представление      = "Лист 02";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_1";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_2";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_3";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_4";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_5";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 5";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_6";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 6";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_6а";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 6а";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_6б";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 6б";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист03А";
	СтрокаУровня1.Представление      = "Лист 03. Раздел А";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист03Б";
	СтрокаУровня1.Представление      = "Лист 03. Раздел Б";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист04";
	СтрокаУровня1.Представление      = "Лист 04";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист05";
	СтрокаУровня1.Представление      = "Лист 05";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист06";
	СтрокаУровня1.Представление      = "Лист 06";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист07";
	СтрокаУровня1.Представление      = "Лист 07";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист08";
	СтрокаУровня1.Представление      = "Лист 08";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист09";
	СтрокаУровня1.Представление      = "Лист 09";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение1";
	СтрокаУровня1.Представление      = "Приложение 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение2";
	СтрокаУровня1.Представление      = "Приложение 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
			
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
			
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
		   И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
						ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет),  ПараметрыЗаписи.НаименованиеОтчета));
						
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
		
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
		
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
				
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = ПараметрыЗаписи.Периодичность;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.
															   ПредставлениеВидаДокумента(
															   ДокументРегламентированныйОтчет.Вид);
															   
	ПоказателиОтчета = Новый Структура;
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из ПараметрыЗаписи.РазделыОтчета Цикл
		Если НЕ Раздел.Значение.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.Ключ, Раздел.Значение.Данные);
		КонецЕсли;
	КонецЦикла;
			
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ПараметрыЗаписи.РазделыОтчета Цикл
		ДанныеДопСтрок = Неопределено;
		Если ЭлементСтруктуры.Значение.Свойство("ДанныеДопСтрок", ДанныеДопСтрок) Тогда
			Если ТипЗнч(ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
				ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Значение.ИдентификаторДопСтрок,
					ЭлементСтруктуры.Значение.ДанныеДопСтрок);
			ИначеЕсли ТипЗнч(ДанныеДопСтрок) = Тип("Структура") Тогда		
				Для Каждого ДопСтрока Из ДанныеДопСтрок Цикл
					ДанныеМногострочныхРазделов.Вставить(ДопСтрока.Ключ, ДопСтрока.Значение);
				КонецЦикла;
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
		
	ДанныеМногостраничныхРазделов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ПараметрыЗаписи.РазделыОтчета Цикл
		Если ЭлементСтруктуры.Значение.МногостраничностьВРазделе
		   И НЕ ЭлементСтруктуры.Значение.Данные = Неопределено Тогда
			ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение.Данные);
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ПараметрыЗаписи.СтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("Автозаполнение", ПараметрыЗаписи.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ВерсияФормы", ПараметрыЗаписи.ВерсияФормы);
	СписокСохранения.Вставить("СохранятьРасшифровку", ПараметрыЗаписи.СохранятьРасшифровку);
	
	Если ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки);

		Если ПараметрыЗаписи.СохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ПараметрыЗаписи.ФлПодсчетСтраниц);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
		ПараметрыЗаписи.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ПараметрыЗаписи.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ОКТМОДляРазделов", ПараметрыЗаписи.ОКТМОДляРазделов);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(
												 ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
						
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета)
	
	РазделыОтчета.Раздел1_1.Данные[0].Данные.Вставить("П000110001003",
		СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.ОКТМОДляРазделов));
		
	РазделыОтчета.Раздел1_1.Данные[0].Данные.Вставить("П000110003003",
		СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.КБК_ФБ));	
		
	РазделыОтчета.Раздел1_1.Данные[0].Данные.Вставить("П000110006003",
		СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.КБК_БСРФ));		
		
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтавкаПрибФед");
	Сведения.Добавить("", "СтавкаПрибРесп");

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация,
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		Сведения);
	
	СтавкаФедеральная = 0;
	СтавкаСубъекта	  = 0;

	ОргСведения.Свойство("СтавкаПрибФед",  СтавкаФедеральная);
	ОргСведения.Свойство("СтавкаПрибРесп", СтавкаСубъекта);	
	
	РазделыОтчета.Лист02.Данные[0].Данные.Вставить("П000200015003", СтавкаФедеральная);
	РазделыОтчета.Лист02.Данные[0].Данные.Вставить("П000200016003", СтавкаСубъекта);
	РазделыОтчета.Лист02.Данные[0].Данные.Вставить("П000200014003",
		СтавкаФедеральная + СтавкаСубъекта + РазделыОтчета.Лист02.Данные[0].Данные.П000200017003);
		
	НомерМесяца = Месяц(ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	РазделыОтчета.Лист02.Данные[0].Данные.Вставить("П000200000100", "1");
	
	Если КвартальноеЗаполнение Тогда
		РазделыОтчета.Лист02_1.Данные[0].Данные.Вставить("П000210000100", "1");
		РазделыОтчета.Лист02_2.Данные[0].Данные.Вставить("П000220000100", "1");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
			
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы	      = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
		
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
																  
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
																	  
	СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
		
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета);
		
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ВыгрузкаВозможна(ИмяФормы,
							 ПараметрыВыгрузки,
							 РезультатВыгрузки,
							 СтруктураРеквизитовФормы,
							 ДеревоВыгрузки,
							 ДанныеОтчета) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 ДанныеОтчета,
					 СтруктураРеквизитовФормы);
										
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(РезультатВыгрузки, ДеревоВыгрузки) Тогда
											
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
														
	КодировкаФайлаВыгрузки = "windows-1251";									
										
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки);
																
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "Прибыль");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
		
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	
	ДанныеОтчета = Новый Структура;
		
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы);
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
						
		ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
	КонецЦикла;
	    				
	Для Каждого Раздел Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
						
		Для Каждого Лист Из Раздел.Значение Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		
		ДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
		
	КонецЦикла;	
	
	ДополнитьСохраненныеПоказателиОтчета(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
						
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								СохраненныеДанныеОтчета = Неопределено) Экспорт
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы, СохраненныеДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.мВерсияФормы <> "01/01/2017"
		   И СохраненныеДанныеОтчета.ВерсияФормы = "01/01/2017" Тогда
			
			// Конвертация в многостраничном разделе Лист 09 немногострочных данных
			// приложения 1 в многострочную часть.
			//
			ИменаГрафМнЧ_Лист09 = Новый Массив;
			ИменаГрафМнЧ_Лист09.Добавить("П000910000101");
			ИменаГрафМнЧ_Лист09.Добавить("П000910000201");
			ИменаГрафМнЧ_Лист09.Добавить("П000910001003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910002003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910003001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910003003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910004001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910004003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910005001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910005003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910006001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910006003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910007001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910007003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910008001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910008003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910009001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910009003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910010001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910010003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910011001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910011003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910012001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910012003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910013003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910014003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910015003");
			
			ТаблицаЛистов09 = СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Лист09;
			
			ТаблицаЛистов09.Колонки.Вставить(3, "ДанныеДопСтрок");
															
			ГруппаЛист09 = РазделыРеглОтчета(ИмяФормы).Лист09.ДанныеДопСтрок.Скопировать();
			
			Для Инд = 0 По ТаблицаЛистов09.Количество() - 1 Цикл
				
				Лист09 = ТаблицаЛистов09[Инд];
				
				ГруппаЛист09.Очистить();
				
				СтрокаГруппыЛист09 = ГруппаЛист09.Добавить();
				
				Для каждого ИмяГрафыМнЧ_Лист09 Из ИменаГрафМнЧ_Лист09 Цикл
					
					СтрокаГруппыЛист09[ИмяГрафыМнЧ_Лист09] = Лист09.Данные[ИмяГрафыМнЧ_Лист09];
					Лист09.Данные.Вставить(ИмяГрафыМнЧ_Лист09 + "_1", Лист09.Данные[ИмяГрафыМнЧ_Лист09]);
					Лист09.Данные.Удалить(ИмяГрафыМнЧ_Лист09);
					
				КонецЦикла;
				
				Лист09.ДанныеДопСтрок = ГруппаЛист09.Скопировать();
				
			КонецЦикла;
			
			СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Вставить("Лист09", ТаблицаЛистов09);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы, СписокСохранения, СтруктураРеквизитовФормы)
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	
	// Титульный лист.
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	Для Каждого Показатель Из ДанныеТит Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				ДанныеТит.ИНН1 = СокрЛП(ДанныеТит.ИНН1) + ДанныеТит["ИНН1_" + Ном];
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(ДанныеТит.ИНН1, 2) = "00" Тогда
				ДанныеТит.ИНН1 = Сред(ДанныеТит.ИНН1, 3);
			КонецЕсли;
			Если Прав(ДанныеТит.ИНН1, 2) = "--" Тогда
				ДанныеТит.ИНН1 = Лев(ДанныеТит.ИНН1, СтрНайти(ДанныеТит.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП1 = СокрЛП(ДанныеТит.КПП1) + ДанныеТит["КПП1_" + Ном];
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки + СокрЛП(ДанныеТит["НомерКорректировки" + Ном]);
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
			ДанныеТит.НомерКорректировки = СтрЗаменить(ДанныеТит.НомерКорректировки, "-", "");
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = СокрЛП(ДанныеТит.Период) + ДанныеТит["Период" + Ном];
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = СокрЛП(ДанныеТит.ОтчетГод) + ДанныеТит["ОтчетГод" + Ном];
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			ДанныеТит.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.КодИМНС = СокрЛП(ДанныеТит.КодИМНС) + ДанныеТит["КодИМНС" + Ном];
				ДанныеТит.Удалить("КодИМНС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = СокрЛП(ДанныеТит.ПоМесту) + ДанныеТит["ПоМесту" + Ном];
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ТелОрганизации_1" Тогда
			ДанныеТит.Вставить("ТелОрганизации");
			Для Ном = 1 По 20 Цикл
				ДанныеТит.ТелОрганизации = СокрЛП(ДанныеТит.ТелОрганизации) + ДанныеТит["ТелОрганизации_" + Ном];
				ДанныеТит.Удалить("ТелОрганизации_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН_Реорг_1" Тогда
			ДанныеТит.Вставить("ИНН_Реорг");
			Для Ном = 1 По 10 Цикл
				ДанныеТит.ИНН_Реорг = СокрЛП(ДанныеТит.ИНН_Реорг) + ДанныеТит["ИНН_Реорг_" + Ном];
				ДанныеТит.Удалить("ИНН_Реорг_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КПП_Реорг_1" Тогда
			ДанныеТит.Вставить("КПП_Реорг");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП_Реорг = СокрЛП(ДанныеТит.КПП_Реорг) + ДанныеТит["КПП_Реорг_" + Ном];
				ДанныеТит.Удалить("КПП_Реорг_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭД_1" Тогда
			ДанныеТит.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				ДанныеТит.ОКВЭД = СокрЛП(ДанныеТит.ОКВЭД) + ДанныеТит["ОКВЭД_" + Ном];
				ДанныеТит.Удалить("ОКВЭД_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = СокрЛП(ДанныеТит.Прил) + ДанныеТит["Прил" + Ном];
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеТит.Вставить("ДатаПодписи", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи);
	
	// Приложение № 6б к Листу 02.
	ИменаПоказателейЛист02_6б = Новый Массив;
	ИменаПоказателейЛист02_6б.Добавить("П000280001003");
	ИменаПоказателейЛист02_6б.Добавить("П000280002003");
	ИменаПоказателейЛист02_6б.Добавить("П000280002103");
	ИменаПоказателейЛист02_6б.Добавить("П000280003003");
	ИменаПоказателейЛист02_6б.Добавить("П000280003103");
	ИменаПоказателейЛист02_6б.Добавить("П000280004003");
	ИменаПоказателейЛист02_6б.Добавить("П000280005003");
	ИменаПоказателейЛист02_6б.Добавить("П000280006003");
	ИменаПоказателейЛист02_6б.Добавить("П000280006103");
	ИменаПоказателейЛист02_6б.Добавить("П000280006203");
	ИменаПоказателейЛист02_6б.Добавить("П000280007003");
	
	СтараяТаблицаЛистов02_6б = СписокСохранения.ДанныеМногостраничныхРазделов.Лист02_6б;
	НоваяСтруктураЛиста02_6б = Новый Структура;
	ГруппаЛист02_6б = РазделыРеглОтчета(ИмяФормы).Лист02_6б.ДанныеДопСтрок.Скопировать();
	ГруппаЛист02_6б.Очистить();
	
	Для Инд = 0 По СтараяТаблицаЛистов02_6б.Количество() - 1 Цикл
		
		СтарыйЛист02_6б = СтараяТаблицаЛистов02_6б[Инд];
		ИндСтр = Формат(Инд + 1, "ЧГ=");
		СтрокаГруппыЛист02_6б = ГруппаЛист02_6б.Добавить();
		
		Для каждого ИмяПоказателяЛист02_6б Из ИменаПоказателейЛист02_6б Цикл
			НоваяСтруктураЛиста02_6б.Вставить(
				ИмяПоказателяЛист02_6б + "_" + ИндСтр, СтарыйЛист02_6б.Данные[ИмяПоказателяЛист02_6б]);
			СтрокаГруппыЛист02_6б[ИмяПоказателяЛист02_6б] = СтарыйЛист02_6б.Данные[ИмяПоказателяЛист02_6б];
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.ПоказателиОтчета.Вставить(ПрефиксТД + "Лист02_6б", НоваяСтруктураЛиста02_6б);
	СписокСохранения.ДанныеМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б,
														  ГруппаЛист02_6б.Скопировать());
	СписокСохранения.ДанныеМногостраничныхРазделов.Удалить("Лист02_6б");
	
	// Многострочные данные Листа 07.
	МнЧ = СписокСохранения.ДанныеМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Лист07];
	Лист07 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛист07;
	Для каждого СтрокаМнЧ Из МнЧ Цикл
		Постфикс = "_" + Формат(МнЧ.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
		Для каждого КолонкаМнЧ Из МнЧ.Колонки Цикл
			Если Лист07.Свойство(КолонкаМнЧ.Имя + Постфикс) Тогда
				СтрокаМнЧ[КолонкаМнЧ.Имя] = Лист07[КолонкаМнЧ.Имя + Постфикс];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Многострочные части многостраничного раздела Листа 08.
	ИменаГрафСтаройМнЧ_Лист08 = Новый Массив;
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000201");
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000202");
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000203");
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000204");
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000205");
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000206");
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000207");
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000208");
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000209");
	ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000210");
	
	ТаблицаЛистов08 = СписокСохранения.ДанныеМногостраничныхРазделов.Лист08;
	ГруппаЛист08 = РазделыРеглОтчета(ИмяФормы).Лист08.ДанныеДопСтрок.Скопировать();
	
	Для Инд = 0 По ТаблицаЛистов08.Количество() - 1 Цикл
		
		Лист08 = ТаблицаЛистов08[Инд];
		ИндСтр = Формат(Инд + 1, "ЧГ=");
		ГруппаЛист08.Очистить();
		СтараяТаблицаДопСтрокЛист08 = Лист08.ДанныеДопСтрок.П0008000002;
		
		Для Каждого СтараяДопСтрокаЛист08 Из СтараяТаблицаДопСтрокЛист08 Цикл
			
			Для Каждого ИмяГрафыСтаройМнЧ_Лист08 Из ИменаГрафСтаройМнЧ_Лист08 Цикл
				
				КодОснования = СокрЛП(СтараяДопСтрокаЛист08[ИмяГрафыСтаройМнЧ_Лист08]);
				
				Если ЗначениеЗаполнено(КодОснования) Тогда
					
					СтрокаГруппыЛист08 = ГруппаЛист08.Добавить();
					СтрокаГруппыЛист08.П000800000201 = КодОснования;
					Лист08.Данные.Вставить("П000800000201_" + Формат(ГруппаЛист08.Количество(), "ЧГ="), КодОснования);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ГруппаЛист08.Количество() = 0 Тогда
			
			СтрокаГруппыЛист08 = ГруппаЛист08.Добавить();
			СтрокаГруппыЛист08.П000800000201 = "";
			Лист08.Данные.Вставить("П000800000201_1", "");
			
		КонецЕсли;
		
		Лист08.ДанныеДопСтрок = ГруппаЛист08.Скопировать();
		
	КонецЦикла;
	
	СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("Лист08", ТаблицаЛистов08);
		
КонецПроцедуры

Процедура ДополнитьСохраненныеПоказателиОтчета(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы) Экспорт
	
	Владелец = Новый Структура;
	Владелец.Вставить("СоответствиеЕдиницыИзмеренияДелителю",
		СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю);
	Владелец.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	Раздел1_1 = ДанныеОтчета.Раздел1_1;
	Для Каждого Страница Из Раздел1_1 Цикл
				
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000110004003);
		Строка050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000110005003);
		Данные.Вставить("П100110004003", Строка040 - Строка050);
		
		Строка070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000110007003);
		Строка080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000110008003);
		Данные.Вставить("П100110007003", Строка070 - Строка080);
	КонецЦикла;
	
	Лист02_2 = ДанныеОтчета.Лист02_2;
	Для Каждого Страница Из Лист02_2 Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		НомерСтроки = 0;
		Для Инд = 1 По 3 Цикл
			Год = Данные["П000220040" + Инд + "01"];
			Сумма = Данные["П000220040" + Инд + "03"];
			
			Если ЗначениеЗаполнено(Год) ИЛИ ЗначениеЗаполнено(Сумма) Тогда
				НомерСтроки = НомерСтроки + 1;
				Данные.Вставить("П100220040101_" + СтрокаЧГ0(ИмяФормы, НомерСтроки), Год);
				Данные.Вставить("П100220040103_" + СтрокаЧГ0(ИмяФормы, НомерСтроки), Сумма);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Лист02_4 = ДанныеОтчета.Лист02_4;
	Для Каждого Страница Из Лист02_4 Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		НомерСтроки = 0;
		Для Инд = 4 По 13 Цикл
			Год = Данные["П0002400" + Формат(Инд * 10, "ЧЦ=3; ЧВН=") + "01"];
			Сумма = Данные["П0002400" + Формат(Инд * 10, "ЧЦ=3; ЧВН=") + "03"];
			
			Если ЗначениеЗаполнено(Год) ИЛИ ЗначениеЗаполнено(Сумма) Тогда
				НомерСтроки = НомерСтроки + 1;
				Данные.Вставить("П100240004001_" + СтрокаЧГ0(ИмяФормы, НомерСтроки), Год);
				Данные.Вставить("П100240004003_" + СтрокаЧГ0(ИмяФормы, НомерСтроки), Сумма);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Лист02_5 = ДанныеОтчета.Лист02_5;
	Для Каждого Страница Из Лист02_5 Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000250010003);
		Строка110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000250011003);
		Данные.Вставить("П100250010003", Строка100 - Строка110);
	КонецЦикла;
	
	Лист02_6 = ДанныеОтчета.Лист02_6;
	Для Каждого Страница Из Лист02_6 Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000260010003);
		Строка110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000260011003);
		Данные.Вставить("П100260010003", Строка100 - Строка110);
	КонецЦикла;
	
	Лист03А = ДанныеОтчета.Лист03А;
	Для Каждого Страница Из Лист03А Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		Данные.Вставить("П100310000500", Формат(Данные["П000310000500"], "ЧГ="));
		
		НомерСтроки = 1;
		Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
		ЗначениеПоказателя = Неопределено;
		
		Пока Данные.Свойство("П000330000505" + Постфикс, ЗначениеПоказателя) Цикл
			
			Данные.Вставить("П100330000501" + Постфикс, ?(ЗначениеЗаполнено(ЗначениеПоказателя), "А", ""));
			
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
			
		КонецЦикла;
	КонецЦикла;
	
	Лист03Б = ДанныеОтчета.Лист03Б;
	Для Каждого Страница Из Лист03Б Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		НомерСтроки = 1;
		Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
		ЗначениеПоказателя = Неопределено;
		
		Пока Данные.Свойство("П000340000505" + Постфикс, ЗначениеПоказателя) Цикл
			
			Данные.Вставить("П100340000501" + Постфикс, ?(ЗначениеЗаполнено(ЗначениеПоказателя), "Б", ""));
			
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыВыгрузкиОтчета(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета) Экспорт
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	
	ПараметрыВыгрузки.Вставить("КодНО",   СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф",   СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",  СокрЛП(Титульный.КПП1));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыОрг));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИНН_Реорг));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КПП_Реорг));
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(
		СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_PRIB");
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
					ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
					СокрЛП(ПараметрыВыгрузки.ИННОрг),
					СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции
	
Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
			
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2016Кв4") Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки507");
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ВыгрузкаВозможна(ИмяФормы,
						 ПараметрыВыгрузки,
						 РезультатВыгрузки,
						 СтруктураРеквизитовФормы,
						 ДеревоВыгрузки,
						 ДанныеОтчета) Экспорт
						 
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(ИмяФормы, ПараметрыВыгрузки, РезультатВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1_1(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1_2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1_3(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_1(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_3(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_4(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета,
								 СтруктураРеквизитовФормы, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_5(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_6(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_6а(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_6б(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист03А(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист03Б(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист04(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист05(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист07(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист08(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета,
							   СтруктураРеквизитовФормы, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист09(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета,
							   СтруктураРеквизитовФормы, СтатусПроверки);
	
	ПроверитьЗаполнение_Приложение2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									РезультатВыгрузки, ДанныеОтчета,
									СтруктураРеквизитовФормы, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьЗаполнение_ТитульныйЛист(ИмяФормы, ПараметрыВыгрузки, РезультатВыгрузки, СтатусПроверки)
	
	КодыПериодовСтр
		= "21,31,33,34,13,14,15,16,35,36,37,38,39,40,41,42,43,44,45,46,57,58,59,60,61,62,63,64,65,66,67,68,50";
	РазрешенныеКодыПериодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПериодовСтр);
	
	Если Год(ПараметрыВыгрузки.ДатаКонцаПериодаОтчета) >= 2018 Тогда
		КодыПоМестуСтр = "213,214,215,216,218,220,223,225,226,228,229,231,234,235,236,237,238,239";
	Иначе
		КодыПоМестуСтр = "213,214,215,216,218,220,223,225,226,228,229,231,234,235,236,237,238";
	КонецЕсли;
	ВозможныеКодыПоМесту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПоМестуСтр);
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задан ИНН организации", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе задан ИНН организации, не состоящий из 10 цифр", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задан КПП организации", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе задан КПП организации, не состоящий из 9 символов", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
			Если ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На титульном листе задан некорректный код места, по которому представляется документ", "Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			Иначе
				Символы56КПП = Сред(ПараметрыВыгрузки.КППОрг, 5, 2);
				Если ПараметрыВыгрузки.ПоМесту = "213" Тогда
					Если НЕ (Символы56КПП = "50") Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"Если код места представления декларации равен 213, 5-й и 6-й символы КПП организации должны быть равны ""50""", "Титульный", "КПП1");
						СтатусПроверки = Ложь;
					КонецЕсли;
				ИначеЕсли ПараметрыВыгрузки.ПоМесту = "218" Тогда
					Если НЕ (Символы56КПП = "50" ИЛИ Символы56КПП = "01" ИЛИ Символы56КПП = "4U") Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"Если код места представления декларации равен 218, 5-й и 6-й символы КПП организации должны быть равны ""50"", ""01"" или ""4U""", "Титульный", "КПП1");
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе
					Если Символы56КПП = "4U" Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"Если код места представления декларации равен "
							+ ПараметрыВыгрузки.ПоМесту
							+ ", 5-й и 6-й символы КПП организации не должны быть равны ""4U""", "Титульный", "КПП1");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если (ПараметрыВыгрузки.ПоМесту = "229" ИЛИ ПараметрыВыгрузки.ПоМесту = "234")
				И НЕ (ПараметрыВыгрузки.Период = "34" ИЛИ ПараметрыВыгрузки.Период = "50") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Если код места представления декларации равен 229 или 234, код налогового (отчетного) периода должен быть равен 34 или 50", "Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.Период) Тогда
		ТекстОписанияОшибки = "На титульном листе не задан код налогового периода";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			ТекстОписанияОшибки, "Титульный", "Период");
		СтатусПроверки = Ложь;
	Иначе
		Если СтрДлина(СокрЛП(ПараметрыВыгрузки.Период)) = 2 Тогда
			Если РазрешенныеКодыПериодов.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
				ТекстОписанияОшибки = "На титульном листе неверно задан код налогового периода";
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					ТекстОписанияОшибки, "Титульный", "Период");
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "На титульном листе задан код налогового периода некорректной длины";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				ТекстОписанияОшибки, "Титульный", "Период");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не указано полное наименование организации (обособленного подразделения)", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задан код налогового органа", "Титульный", "КодИМНС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задан код места, по которому представляется документ", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задано значение кода вида деятельности по ОКВЭД", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задано наименование документа, удостоверяющего полномочия представителя", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг) 
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"На титульном листе не задан код формы реорганизации", "Титульный", "КодФормыОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
			Если ДлинаИННРеорг <> 10
			 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИННРеорг) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На титульном листе не"
					+ ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации", "Титульный", "ИНН_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На титульном листе не"
					+ ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации", "Титульный", "КПП_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел1_1(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделНеВыгружается = (ПараметрыВыгрузки.ПоМесту = "231"
					   ИЛИ ПараметрыВыгрузки.ПоМесту = "229"
					   ИЛИ ПараметрыВыгрузки.ПоМесту = "235");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Раздел1_1");
	
	РазделПуст = Истина;
	
	Раздел1_1 = ДанныеОтчета.Раздел1_1;
	
	Для Каждого СтраницаРаздела Из Раздел1_1 Цикл
		
		НомерСтраницы = Раздел1_1.Индекс(СтраницаРаздела) + 1;
				
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			Если РазделНеВыгружается Тогда
				Продолжить;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеСтраницы.П000110001003);
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.1 не указан код по ОКТМО",
					"Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.1 задан код по ОКТМО некорректной длины",
					"Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110003003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации",
						"Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110003003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины",
						"Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в Федеральный бюджет)",
						"Раздел1_1", "П000110004003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110006003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации",
						"Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110006003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины",
						"Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в бюджет субъекта Российской Федерации)",
						"Раздел1_1", "П000110007003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст Тогда
		Если НЕ РазделНеВыгружается Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Должен быть заполнен раздел 1.1", "Раздел1_1", "П000110001003");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если РазделНеВыгружается Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"При заданных параметрах декларации раздел 1.1 не должен заполняться", "Раздел1_1", "П000110001003");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел1_2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделНеВыгружается = (СтрНайти("231,229", ПараметрыВыгрузки.ПоМесту) > 0
					   ИЛИ СтрНайти("34,46,50,68", ПараметрыВыгрузки.Период) > 0);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Раздел1_2");
	
	РазделПуст = Истина;
	
	Раздел1_2 = ДанныеОтчета.Раздел1_2;
	
	Для Каждого СтраницаРаздела Из Раздел1_2 Цикл
		
		НомерСтраницы = Раздел1_2.Индекс(СтраницаРаздела) + 1;
						
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
				
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если РазделНеВыгружается Тогда
				Продолжить;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеСтраницы.П000120001003);
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.2 не указан код по ОКТМО",
					"Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.2 задан код по ОКТМО некорректной длины",
					"Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120012003)
			 ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120013003)
			 ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120014003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120011003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации",
						"Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120011003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины",
						"Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120022003)
			 ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120023003)
			 ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120024003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120021003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации",
						"Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120021003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины",
						"Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120012003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120013003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120014003) Тогда
			ДанныеСтраницы.П000120011003 = "";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120022003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120023003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120024003) Тогда
			ДанныеСтраницы.П000120021003 = "";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120000103)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120011003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120021003) Тогда
			ДанныеСтраницы.П000120001003 = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ РазделПуст И РазделНеВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"При заданных параметрах декларации раздел 1.2 не должен заполняться",
			"Раздел1_2", "П000110001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел1_3(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Раздел1_3");
	
	РазделПуст = Истина;
	
	Раздел1_3 = ДанныеОтчета.Раздел1_3;
	
	Для Каждого СтраницаРаздела Из Раздел1_3 Цикл
		
		НомерСтраницы = Раздел1_3.Индекс(СтраницаРаздела) + 1;
				
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 не указан код вида платежа",
					"Раздел1_3", "П000130001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеСтраницы.П000130002003);
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 не указан код по ОКТМО",
					"Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 указан код по ОКТМО некорректной длины",
					"Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130003003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 не указан код бюджетной классификации",
					"Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000130003003)) <> 20 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 указан код бюджетной классификации некорректной длины",
					"Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
			НомСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000130004001_" + Формат(НомСтроки, "ЧГ=")) Цикл
				СтрП000130004001 = ДанныеСтраницы["П000130004001_" + Формат(НомСтроки, "ЧГ=")];
				СтрП000130004003 = ДанныеСтраницы["П000130004003_" + Формат(НомСтроки, "ЧГ=")];
				Если ЗначениеЗаполнено(СтрП000130004001) ИЛИ ЗначениеЗаполнено(СтрП000130004003) Тогда
					СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрП000130004003) И НЕ ЗначениеЗаполнено(СтрП000130004001) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.3 в строке "
						+ Формат(НомСтроки, "ЧГ=")
						+ " не указан срок уплаты", "Раздел1_3", "П000130004001_"
						+ Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомСтроки = НомСтроки + 1;
			КонецЦикла;
			Если НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 не заполнена ни одна строка 040",
					"Раздел1_3", "П000130004001_1", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст И РазделВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Должен быть заполнен раздел 1.3", "Раздел1_3", "П000130001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)

	РазделНеВыгружается = (ПараметрыВыгрузки.ПоМесту = "220" ИЛИ ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02");
	
	РазделПуст = Истина;
	
	Лист02 = ДанныеОтчета.Лист02;
	
	Для Каждого СтраницаРаздела Из Лист02 Цикл
		
		НомерСтраницы = Лист02.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000200000100);
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела)
			ИЛИ ПризнакНалогоплательщика = "4" Тогда
			
			РазделПуст = Ложь;
			
			Если РазделНеВыгружается Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000200000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела ""Лист 02"" не указан признак налогоплательщика",
					"Лист02", "П000200000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Лист 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000200000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000200000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000200000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000200000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
			Строка180 = ДанныеСтраницы.П000200018003;
			Строка240 = ДанныеСтраницы.П000200024003;
			Если Строка240 > Строка180 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 02"" значение в строке 240 превышает значение в строке 180",
					"Лист02", "П000200024003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка190 = ДанныеСтраницы.П000200019003;
			Строка250 = ДанныеСтраницы.П000200025003;
			Если Строка250 > Строка190 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 02"" значение в строке 250 превышает значение в строке 190",
					"Лист02", "П000200025003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка200 = ДанныеСтраницы.П000200020003;
			Строка260 = ДанныеСтраницы.П000200026003;
			Если Строка260 > Строка200 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 02"" значение в строке 260 превышает значение в строке 200",
					"Лист02", "П000200026003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ РазделПуст Тогда
		Если РазделНеВыгружается Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Заполнение раздела ""Лист 02"" в декларации с кодом по месту нахождения (учета) 220 или 231 не предусмотрено",
				"Лист02", "П000200000100");
			СтатусПроверки = Ложь;
		Иначе
			Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета, "Лист02", "П000200000100") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Лист 02""",
					"Лист02", "П000200000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_1(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_1");
	
	Лист02_1 = ДанныеОтчета.Лист02_1;
	
	Для Каждого СтраницаРаздела Из Лист02_1 Цикл
		
		НомерСтраницы = Лист02_1.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000210000100);
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела)
		 ИЛИ ПризнакНалогоплательщика = "4" Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000210000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 1 к листу 02"" не указан признак налогоплательщика",
					"Лист02_1", "П000210000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02_1");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Приложение 1 к листу 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000210000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000210000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000210000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000210000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета,
			"Лист02_1", "П000210000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 1 к листу 02""",
			"Лист02_1", "П000210000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_2");
	
	Лист02_2 = ДанныеОтчета.Лист02_2;
	
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П000220040301", "П000220040303");
	СоответствиеИменЯчеек.Вставить("П000220040201", "П000220040203");
	СоответствиеИменЯчеек.Вставить("П000220040101", "П000220040103");
	
	Для Каждого СтраницаРаздела Из Лист02_2 Цикл
		
		НомерСтраницы = Лист02_2.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000220000100);
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела)
		 ИЛИ ПризнакНалогоплательщика = "4" Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000220000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 2 к листу 02"" не указан признак налогоплательщика",
					"Лист02_2", "П000220000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02_2");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Приложение 2 к листу 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000220000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000220000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000220000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000220000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
			Если ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П000220013503))
			   И СтрНайти("1,2", ДанныеСтраницы.П000220013503) = 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 2 к листу 02"" указан некорректный код метода начисления амортизации",
					"Лист02_2", "П000220013503", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Для Каждого Эл Из СоответствиеИменЯчеек Цикл
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение])
				   И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" в строке "
						+ Сред(Эл.Ключ, 9, 3) + " не задан год", "Лист02_2", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ])
				   И СтрДлина(СокрЛП(Формат(ДанныеСтраницы[Эл.Ключ], "ЧГ="))) <> 4 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" в строке "
						+ Сред(Эл.Ключ, 9, 3) + " задано значение года некорректной длины", "Лист02_2",
						Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета,
			"Лист02_2", "П000220000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 2 к листу 02""",
			"Лист02_2", "П000220000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_3(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_3");
	
	Лист02_3 = ДанныеОтчета.Лист02_3;
	
	Для Каждого СтраницаРаздела Из Лист02_3 Цикл
		
		НомерСтраницы = Лист02_3.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000230000100);
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела)
		 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		 
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000230000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 3 к листу 02"" не указан признак налогоплательщика",
					"Лист02_3", "П000230000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02_3");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Приложение 3 к листу 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000230000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000230000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000230000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000230000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
			Строка210 = ДанныеСтраницы.П000230021003;
			Строка211 = ДанныеСтраницы.П000230021103;
			Если Строка211 > Строка210 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 3 к листу 02"" значение в строке 211 превышает значение в строке 210",
					"Лист02_3", "П000230021103", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка220 = ДанныеСтраницы.П000230022003;
			Строка221 = ДанныеСтраницы.П000230022103;
			Если Строка221 > Строка220 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 3 к листу 02"" значение в строке 221 превышает значение в строке 220",
					"Лист02_3", "П000230022103", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			ДанныеСтраницы.П000230000100 = "";
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета,
			"Лист02_3", "П000230000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 3 к листу 02""",
			"Лист02_3", "П000230000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_4(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета,
									   СтруктураРеквизитовФормы, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_4");
	
	Лист02_4 = ДанныеОтчета.Лист02_4;
	
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П000240004001", "П000240004003");
	СоответствиеИменЯчеек.Вставить("П000240005001", "П000240005003");
	СоответствиеИменЯчеек.Вставить("П000240006001", "П000240006003");
	СоответствиеИменЯчеек.Вставить("П000240007001", "П000240007003");
	СоответствиеИменЯчеек.Вставить("П000240008001", "П000240008003");
	СоответствиеИменЯчеек.Вставить("П000240009001", "П000240009003");
	СоответствиеИменЯчеек.Вставить("П000240010001", "П000240010003");
	СоответствиеИменЯчеек.Вставить("П000240011001", "П000240011003");
	СоответствиеИменЯчеек.Вставить("П000240012001", "П000240012003");
	СоответствиеИменЯчеек.Вставить("П000240013001", "П000240013003");
	
	Лист02_4 = ДанныеОтчета.Лист02_4;
	
	Для Каждого СтраницаРаздела Из Лист02_4 Цикл
		
		НомерСтраницы = Лист02_4.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000240000100);
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, "Лист02_4", ДеревоВыгрузки)
		 ИЛИ ПризнакНалогоплательщика = "4" Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000240000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 4 к листу 02"" не указан признак налогоплательщика",
					"Лист02_4", "П000240000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02_4");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Приложение 4 к листу 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000240000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000240000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000240000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000240000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
			Для Каждого Эл Из СоответствиеИменЯчеек Цикл
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение])
				   И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке "
						+ Сред(Эл.Ключ, 9, 3) + " не задан год", "Лист02_4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ])
				   И СтрДлина(СокрЛП(ДанныеСтраницы[Эл.Ключ])) <> 4 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке "
						+ Сред(Эл.Ключ, 9, 3) + " задано значение года некорректной длины", "Лист02_4",
						Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Владелец = Новый Структура;
			Владелец.Вставить("СоответствиеЕдиницыИзмеренияДелителю",
				СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю);
			Владелец.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
			
			Стр140 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Владелец, ДанныеСтраницы.П000240014003);
			Стр150 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Владелец, ДанныеСтраницы.П000240015003);
				
			Если Стр140 > 0 Тогда
				Если Стр150 > Стр140 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 4 к листу 02"" значение в строке 150 не должно быть больше значения в строке 140.",
						"Лист02_4", "П000240015003", НомерСтраницы);
						СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета,
			"Лист02_4", "П000240000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 4 к листу 02""",
			"Лист02_4", "П000240000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_5(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "220");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_5");
	
	РазделПуст = Истина;
	
	Лист02_5 = ДанныеОтчета.Лист02_5;
	
	Для Каждого СтраницаРаздела Из Лист02_5 Цикл
		
		НомерСтраницы = Лист02_5.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указан признак налогоплательщика",
					"Лист02_5", "П000250000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250001000) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указан признак ""Расчет составлен""",
					"Лист02_5", "П000250001000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250002001) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указан КПП обособленного подразделения",
					"Лист02_5", "П000250002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000250002001)) <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" указан КПП обособленного подразделения некорректной длины",
					"Лист02_5", "П000250002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250002003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указано наименование обособленного подразделения",
					"Лист02_5", "П000250002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250002002) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указан признак возложения на обособленное подразделение обязанности по уплате налога",
					"Лист02_5", "П000250002002", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000250010003) И ЗначениеЗаполнено(ДанныеСтраницы.П000250011003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению",
					"Лист02_5", "П000250010003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе
			ДанныеСтраницы.П000250000100 = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если РазделПуст И РазделВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Должен быть заполнен раздел ""Приложение 5 к листу 02""", "Лист02_5", "П000250000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_6(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_6");
	
	Лист02_6 = ДанныеОтчета.Лист02_6;
	Лист02_6а = ДанныеОтчета.Лист02_6а;
	
	ЕстьЗаполненныеЛисты = Ложь;
	НомерПервойЗаполненнойСтраницы = 0;
	
	СоответствиеОКАТОСубъектамРФ = Неопределено;
	
	ЗаполнитьСоответствиеОКАТОСубъектамРФ(ИмяФормы, СоответствиеОКАТОСубъектамРФ);
	
	ДанныеРаздела = ДанныеОтчета.Лист02_6;
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
		
		НомерСтраницы = ДанныеРаздела.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			ЕстьЗаполненныеЛисты = Истина;
			НомерПервойЗаполненнойСтраницы = ?(НомерПервойЗаполненнойСтраницы = 0,
											   НомерСтраницы,
											   НомерПервойЗаполненнойСтраницы);
			
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указан ИНН участника (обособленного подразделения)",
						"Лист02_6", "П000260000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000260000101)) <> 10 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" указан ИНН участника (обособленного подразделения) некорректной длины",
						"Лист02_6", "П000260000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000201) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указан КПП участника (обособленного подразделения)",
						"Лист02_6", "П000260000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000260000201)) <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" указан КПП участника (обособленного подразделения) некорректной длины",
						"Лист02_6", "П000260000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ОКТМО = СокрЛП(ДанныеСтраницы.П000260000301);
				Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указан ОКТМО участника (обособленного подразделения)",
						"Лист02_6", "П000260000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" указан ОКТМО участника (обособленного подразделения) некорректной длины",
						"Лист02_6", "П000260000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указано наименование участника (обособленного подразделения)",
						"Лист02_6", "П000260000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000601) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указан код субъекта РФ",
						"Лист02_6", "П000260000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000260000601)) <> 2 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" указан код субъекта РФ некорректной длины",
						"Лист02_6", "П000260000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					КодСубъектаРФ_СтрЛ02_6 = СокрЛП(ДанныеСтраницы.П000260000601);
					ЕстьХотяБыОдинЭкзЛиста02_6аДляДанногоЭкзЛиста02_6 = Ложь;
					Для Каждого СтраницаРазделаЛ02_6а из Лист02_6а Цикл
												
						Если ТипЗнч(СтраницаРазделаЛ02_6а.Данные) = Тип("Структура") Тогда
							ДанныеРазделаЛ02_6а = СтраницаРазделаЛ02_6а.Данные;
						Иначе
							ДанныеРазделаЛ02_6а = СтраницаРазделаЛ02_6а.Данные[0].Значение;
						КонецЕсли;
						
						ОКТМО_СтрЛ02_6а = СокрЛП(ДанныеРазделаЛ02_6а.П000270000301);
						
						КодСубъектаРФ_СтрЛ02_6а =
							РегламентированнаяОтчетностьКлиентСервер.КодСубъектаРФПоОКТМО(
								СоответствиеОКАТОСубъектамРФ, ОКТМО_СтрЛ02_6а);
						
						Если КодСубъектаРФ_СтрЛ02_6а = КодСубъектаРФ_СтрЛ02_6 Тогда
							ЕстьХотяБыОдинЭкзЛиста02_6аДляДанногоЭкзЛиста02_6 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ЕстьХотяБыОдинЭкзЛиста02_6аДляДанногоЭкзЛиста02_6 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"Для кода по ОКТМО, указанного на странице " + НомерСтраницы
							+ " раздела ""Приложение 6 к листу 02"", не найден соответствующий код по ОКТМО в разделе ""Приложение 6а к листу 02""",
							"Лист02_6", "П000260000301", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000260010003) И ЗначениеЗаполнено(ДанныеСтраницы.П000260011003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению",
						"Лист02_6", "П000260010003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ДанныеСтраницы.П000260000601 = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныеЛисты И НЕ ЭтоКонсолидированнаяГруппа Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Листы раздела ""Приложение 6 к листу 02"" заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218",
			"Лист02_6", "П000260000101", НомерПервойЗаполненнойСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_6а(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_6а");
	
	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
	
	ЕстьЗаполненныеЛисты = Ложь;
	НомерПервойЗаполненнойСтраницы = 0;
	
	Лист02_6а = ДанныеОтчета.Лист02_6а;
	
	КоличествоЛистовСПризнакомНалогоплательщика1 = 0;
	НомерПервогоЛистаСПризнакомНалогоплательщика1 = 0;
	
	Для Каждого СтраницаРаздела Из Лист02_6а Цикл
		НомерСтраницы = Лист02_6а.Индекс(СтраницаРаздела) + 1;
			
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			ЕстьЗаполненныеЛисты = Истина;
			НомерПервойЗаполненнойСтраницы = ?(НомерПервойЗаполненнойСтраницы = 0,
				НомерСтраницы, НомерПервойЗаполненнойСтраницы);
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6а к листу 02"" не указан ИНН участника (обособленного подразделения)",
						"Лист02_6а", "П000270000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000270000101)) <> 10 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6а к листу 02"" указан ИНН участника (обособленного подразделения) некорректной длины",
						"Лист02_6а", "П000270000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000201) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6а к листу 02"" не указан КПП участника (обособленного подразделения)",
						"Лист02_6а", "П000270000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000270000201)) <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6а к листу 02"" указан КПП участника (обособленного подразделения) некорректной длины",
						"Лист02_6а", "П000270000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ОКТМО = СокрЛП(ДанныеСтраницы.П000270000301);
				Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" не указан ОКАТО участника (обособленного подразделения)",
					"Лист02_6а", "П000270000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" указан ОКАТО участника (обособленного подразделения) некорректной длины",
					"Лист02_6а", "П000270000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" не указано наименование участника (обособленного подразделения)",
					"Лист02_6а", "П000270000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000501) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" не указан признак ""Расчет составлен""",
					"Лист02_6а", "П000270000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрНайти("1,2,3,4", ДанныеСтраницы["П000270000501"]) = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" указано некорректное значение признака ""Расчет составлен""",
					"Лист02_6а", "П000270000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				РасчетСоставлен = ДанныеСтраницы.П000270000501;
				Если РасчетСоставлен = "1" Тогда
					КоличествоЛистовСПризнакомНалогоплательщика1 = КоличествоЛистовСПризнакомНалогоплательщика1 + 1;
					НомерПервогоЛистаСПризнакомНалогоплательщика1 = ?(НомерПервогоЛистаСПризнакомНалогоплательщика1 = 0,
						НомерСтраницы, НомерПервогоЛистаСПризнакомНалогоплательщика1);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныеЛисты И НЕ ЭтоКонсолидированнаяГруппа Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Листы раздела ""Приложение 6а к Листу 02"" заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218",
			"Лист02_6а", "П000270000101", НомерПервойЗаполненнойСтраницы);
			СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если КоличествоЛистовСПризнакомНалогоплательщика1 > 1 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Лист раздела ""Приложение 6а к Листу 02"" с признаком ""Расчет составлен"" 1 может быть заполнент только в единственном экземпляре!",
			"Лист02_6а", "П000270000101", НомерПервогоЛистаСПризнакомНалогоплательщика1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_6б(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_6б");
	
	ДанныеРаздела = ДанныеОтчета.Лист02_6б;
	
	Если НЕ СтраницаПуста(ИмяФормы, ДанныеРаздела, ПоказателиРаздела) Тогда
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			НомерСтроки = 1;
			Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
			
			Пока ДанныеРаздела.Свойство("П000280001003" + Постфикс) Цикл
				
				БлокЗаполнен = ЗначениеЗаполнено(ДанныеРаздела["П000280002003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280002103" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280003003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280003103" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280004003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280005003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280006003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280006103" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280006203" + Постфикс]);
				
				Если БлокЗаполнен Тогда
					ИмяОбластиИНН = "П000280001003" + Постфикс;
					Если НЕ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбластиИНН]) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"В строке " + СтрокаЧГ0(ИмяФормы, НомерСтроки)
							+ " раздела ""Приложение 6б к листу 02"" не указан ИНН участника консолидированной группы налогоплательщиков",
							"Лист02_6б", ИмяОбластиИНН);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(СокрЛП(ДанныеРаздела[ИмяОбластиИНН])) <> 10 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"В строке " + СтрокаЧГ0(ИмяФормы, НомерСтроки)
							+ " раздела ""Приложение 6б к листу 02"" указан ИНН участника консолидированной группы налогоплательщиков некорректной длины",
							"Лист02_6б", ИмяОбластиИНН);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
				
			КонецЦикла;
			
		Иначе
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Раздел ""Приложение 6б к Листу 02"" заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218",
				"Лист02_6б", "П000280001003_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист03А(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист03А");
	
	РазделПуст = Истина;
	
	Лист03А = ДанныеОтчета.Лист03А;
	
	Для Каждого СтраницаРаздела Из Лист03А Цикл
		
		НомерСтраницы = Лист03А.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не указана категория налогового агента",
					"Лист03А", "П000310000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000310000200) И ДанныеСтраницы.П000310000100 = "1" Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не должен быть указан ИНН организации - эмитента ценных бумаг при коде категории налогового агента ""1""",
					"Лист03А", "П000310000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ЗначениеЗаполнено(ДанныеСтраницы.П000310000200) Тогда
				Если СтрДлина(СокрЛП(ДанныеСтраницы.П000310000200)) <> 10 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Лист 03 (раздел А)"" указан ИНН организации - эмитента ценных бумаг некорректной длины",
						"Лист03А", "П000310000200", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000300) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не указан вид дивидендов",
					"Лист03А", "П000310000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000400) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не задан налоговый (отчетный) период",
					"Лист03А", "П000310000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000310000400)) <> 2 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" задан налоговый (отчетный) период некорректной длины",
					"Лист03А", "П000310000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000500) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не указан отчетный год",
					"Лист03А", "П000310000500", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(Формат(ДанныеСтраницы.П000310000500, "ЧГ=")) <> 4 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" задан отчетный год некорректной длины", "Лист03А",
					"П000310000500", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Инд = 1;
			ИмяПок_ИНН = "П000330000503_1";
			ИмяПок_КПП = "П000330000504_1";
			ИмяПок_Тип = "П000330000505_1";
			ИмяПок_Пол = "П000330001003_1";
			ИмяПок_Фам = "П000330002001_1";
			ИмяПок_Имя = "П000330002002_1";
			ИмяПок_Отч = "П000330002003_1";
			ИмяПок_Тел = "П000330003003_1";
			ИмяПок_Дат = "П000330004003_1";
			ИмяПок_Див = "П000330005003_1";
			ИмяПок_Нал = "П000330006003_1";
			
			Пока ДанныеСтраницы.Свойство(ИмяПок_ИНН) Цикл
				
				Знач_ИНН = СокрЛП(ДанныеСтраницы[ИмяПок_ИНН]);
				Знач_КПП = СокрЛП(ДанныеСтраницы[ИмяПок_КПП]);
				Знач_Тип = СокрЛП(ДанныеСтраницы[ИмяПок_Тип]);
				Знач_Пол = СокрЛП(ДанныеСтраницы[ИмяПок_Пол]);
				Знач_Фам = СокрЛП(ДанныеСтраницы[ИмяПок_Фам]);
				Знач_Имя = СокрЛП(ДанныеСтраницы[ИмяПок_Имя]);
				Знач_Отч = СокрЛП(ДанныеСтраницы[ИмяПок_Отч]);
				Знач_Тел = СокрЛП(ДанныеСтраницы[ИмяПок_Тел]);
				Знач_Дат = ДанныеСтраницы[ИмяПок_Дат];
				Знач_Див = ДанныеСтраницы[ИмяПок_Див];
				Знач_Нал = ДанныеСтраницы[ИмяПок_Нал];
				
				ЗаполненаСтрока005_060
				  = ЗначениеЗаполнено(Знач_ИНН)
				ИЛИ ЗначениеЗаполнено(Знач_КПП)
				ИЛИ ЗначениеЗаполнено(Знач_Тип)
				ИЛИ ЗначениеЗаполнено(Знач_Пол)
				ИЛИ ЗначениеЗаполнено(Знач_Фам)
				ИЛИ ЗначениеЗаполнено(Знач_Имя)
				ИЛИ ЗначениеЗаполнено(Знач_Отч)
				ИЛИ ЗначениеЗаполнено(Знач_Тел)
				ИЛИ ЗначениеЗаполнено(Знач_Дат)
				ИЛИ ЗначениеЗаполнено(Знач_Див)
				ИЛИ ЗначениеЗаполнено(Знач_Нал);
				
				Если ЗаполненаСтрока005_060 Тогда
					
					Инд_Стр = Формат(Инд, "ЧГ=");
					
					ДлинаИНН = СтрДлина(Знач_ИНН);
					Если ДлинаИНН <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Знач_ИНН) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не" + ?(ДлинаИНН = 0, "", "верно") + " задан ИНН получателя",
						"Лист03А", ИмяПок_ИНН, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Знач_КПП) Тогда
						ДлинаКПП = СтрДлина(Знач_КПП);
						Если ДлинаКПП <> 9 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 неверно задан КПП получателя",
							"Лист03А", ИмяПок_КПП, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					ДлинаТип = СтрДлина(Знач_Тип);
					Если ДлинаТип <> 2 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не" + ?(ДлинаТип = 0, "", "верно") + " задан тип получателя",
						"Лист03А", ИмяПок_Тип, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Знач_Пол) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не задано наименование получателя",
						"Лист03А", ИмяПок_Пол, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗаполненыДанныеФИО
					  = ЗначениеЗаполнено(Знач_Фам)
					ИЛИ ЗначениеЗаполнено(Знач_Имя)
					ИЛИ ЗначениеЗаполнено(Знач_Отч);
					
					Если ЗаполненыДанныеФИО Тогда
						
						Если НЕ ЗначениеЗаполнено(Знач_Фам) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 не задана фамилия руководителя организации",
							"Лист03А", ИмяПок_Фам, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(Знач_Имя) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 не задано имя руководителя организации",
							"Лист03А", ИмяПок_Имя, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Знач_Дат) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не задана дата перечисления дивидендов",
						"Лист03А", ИмяПок_Дат, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Инд = Инд + 1;
				Инд_Стр = Формат(Инд, "ЧГ=");
				ИмяПок_ИНН = "П000330000503_" + Инд_Стр;
				ИмяПок_КПП = "П000330000504_" + Инд_Стр;
				ИмяПок_Тип = "П000330000505_" + Инд_Стр;
				ИмяПок_Пол = "П000330001003_" + Инд_Стр;
				ИмяПок_Фам = "П000330002001_" + Инд_Стр;
				ИмяПок_Имя = "П000330002002_" + Инд_Стр;
				ИмяПок_Отч = "П000330002003_" + Инд_Стр;
				ИмяПок_Тел = "П000330003003_" + Инд_Стр;
				ИмяПок_Дат = "П000330004003_" + Инд_Стр;
				ИмяПок_Див = "П000330005003_" + Инд_Стр;
				ИмяПок_Нал = "П000330006003_" + Инд_Стр;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст И РазделВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Должен быть заполнен раздел ""Лист 03 (раздел А)"" при коде ""по месту нахождения (учета)"" на титульном листе равном 231",
			"Лист03А", "П000310000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист03Б(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист03Б");
	
	РазделПуст = Истина;
	
	Лист03Б = ДанныеОтчета.Лист03Б;
	
	Для Каждого СтраницаРаздела Из Лист03Б Цикл
		
		НомерСтраницы = Лист03Б.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			РазделПуст = Ложь;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000320000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел Б)"" не указан вид дохода",
					"Лист03Б", "П000320000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Инд = 1;
			ИмяПок_ИНН = "П000340000503_1";
			ИмяПок_КПП = "П000340000504_1";
			ИмяПок_Тип = "П000340000505_1";
			ИмяПок_Пол = "П000340001003_1";
			ИмяПок_Фам = "П000340002001_1";
			ИмяПок_Имя = "П000340002002_1";
			ИмяПок_Отч = "П000340002003_1";
			ИмяПок_Тел = "П000340003003_1";
			ИмяПок_Дат = "П000340004003_1";
			ИмяПок_Див = "П000340005003_1";
			ИмяПок_Нал = "П000340006003_1";
			
			Пока ДанныеСтраницы.Свойство(ИмяПок_ИНН) Цикл
				
				Знач_ИНН = СокрЛП(ДанныеСтраницы[ИмяПок_ИНН]);
				Знач_КПП = СокрЛП(ДанныеСтраницы[ИмяПок_КПП]);
				Знач_Тип = СокрЛП(ДанныеСтраницы[ИмяПок_Тип]);
				Знач_Пол = СокрЛП(ДанныеСтраницы[ИмяПок_Пол]);
				Знач_Фам = СокрЛП(ДанныеСтраницы[ИмяПок_Фам]);
				Знач_Имя = СокрЛП(ДанныеСтраницы[ИмяПок_Имя]);
				Знач_Отч = СокрЛП(ДанныеСтраницы[ИмяПок_Отч]);
				Знач_Тел = СокрЛП(ДанныеСтраницы[ИмяПок_Тел]);
				Знач_Дат = ДанныеСтраницы[ИмяПок_Дат];
				Знач_Див = ДанныеСтраницы[ИмяПок_Див];
				Знач_Нал = ДанныеСтраницы[ИмяПок_Нал];
				
				ЗаполненаСтрока005_060
				  = ЗначениеЗаполнено(Знач_ИНН)
				ИЛИ ЗначениеЗаполнено(Знач_КПП)
				ИЛИ ЗначениеЗаполнено(Знач_Тип)
				ИЛИ ЗначениеЗаполнено(Знач_Пол)
				ИЛИ ЗначениеЗаполнено(Знач_Фам)
				ИЛИ ЗначениеЗаполнено(Знач_Имя)
				ИЛИ ЗначениеЗаполнено(Знач_Отч)
				ИЛИ ЗначениеЗаполнено(Знач_Тел)
				ИЛИ ЗначениеЗаполнено(Знач_Дат)
				ИЛИ ЗначениеЗаполнено(Знач_Див)
				ИЛИ ЗначениеЗаполнено(Знач_Нал);
				
				Если ЗаполненаСтрока005_060 Тогда
					
					Инд_Стр = Формат(Инд, "ЧГ=");
					
					ДлинаИНН = СтрДлина(Знач_ИНН);
					Если ДлинаИНН <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Знач_ИНН) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не" + ?(ДлинаИНН = 0, "", "верно") + " задан ИНН получателя",
						"Лист03Б", ИмяПок_ИНН, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Знач_КПП) Тогда
						ДлинаКПП = СтрДлина(Знач_КПП);
						Если ДлинаКПП <> 9 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 неверно задан КПП получателя",
							"Лист03Б", ИмяПок_КПП, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					ДлинаТип = СтрДлина(Знач_Тип);
					Если ДлинаТип <> 2 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не" + ?(ДлинаТип = 0, "", "верно") + " задан тип получателя",
						"Лист03Б", ИмяПок_Тип, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Знач_Пол) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не задано наименование получателя",
						"Лист03Б", ИмяПок_Пол, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗаполненыДанныеФИО
					  = ЗначениеЗаполнено(Знач_Фам)
					ИЛИ ЗначениеЗаполнено(Знач_Имя)
					ИЛИ ЗначениеЗаполнено(Знач_Отч);
					
					Если ЗаполненыДанныеФИО Тогда
						
						Если НЕ ЗначениеЗаполнено(Знач_Фам) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 не задана фамилия руководителя организации",
							"Лист03Б", ИмяПок_Фам, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(Знач_Имя) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 не задано имя руководителя организации",
							"Лист03Б", ИмяПок_Имя, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Знач_Дат) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не задана дата перечисления дивидендов",
						"Лист03Б", ИмяПок_Дат, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Инд = Инд + 1;
				Инд_Стр = Формат(Инд, "ЧГ=");
				ИмяПок_ИНН = "П000340000503_" + Инд_Стр;
				ИмяПок_КПП = "П000340000504_" + Инд_Стр;
				ИмяПок_Тип = "П000340000505_" + Инд_Стр;
				ИмяПок_Пол = "П000340001003_" + Инд_Стр;
				ИмяПок_Фам = "П000340002001_" + Инд_Стр;
				ИмяПок_Имя = "П000340002002_" + Инд_Стр;
				ИмяПок_Отч = "П000340002003_" + Инд_Стр;
				ИмяПок_Тел = "П000340003003_" + Инд_Стр;
				ИмяПок_Дат = "П000340004003_" + Инд_Стр;
				ИмяПок_Див = "П000340005003_" + Инд_Стр;
				ИмяПок_Нал = "П000340006003_" + Инд_Стр;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист04(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист04");
	
	Лист04 = ДанныеОтчета.Лист04;
	
	Для Каждого СтраницаРаздела Из Лист04 Цикл
		НомерСтраницы = Лист04.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000400000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 04"" не указан вид дохода", "Лист04", "П000400000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист05(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист05");
	
	ПоказателиРазделаДляУзла = Новый Массив;
	
	Для каждого ПоказательРаздела Из ПоказателиРаздела Цикл
		Если ПоказательРаздела.Родитель <> Неопределено И ПоказательРаздела.Родитель.Код = "НалБазОпОсобН" Тогда
			ПоказателиРазделаДляУзла.Добавить(ПоказательРаздела);
		КонецЕсли;
	КонецЦикла;
	
	Лист05 = ДанныеОтчета.Лист05;
	
	Для Каждого СтраницаРаздела Из Лист05 Цикл
		НомерСтраницы = Лист05.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРазделаДляУзла) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000500000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 05"" не указан вид операции", "Лист05", "П000500000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист07(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист07");
	ДанныеРаздела = ДанныеОтчета.Лист07;
	
	КодВидаПоступления = Неопределено;
	
	Если НЕ СтраницаПуста(ИмяФормы, ДанныеРаздела, ПоказателиРаздела) Тогда
		
		НомерСтроки = 1;
		Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
		
		Пока ДанныеРаздела.Свойство("П000700001001" + Постфикс, КодВидаПоступления) Цикл
			
			БлокЗаполнен = ЗначениеЗаполнено(ДанныеРаздела["П000700001001" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001002" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001003" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001004" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001005" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001006" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001007" + Постфикс]);
					
			Если БлокЗаполнен Тогда
				Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"В разделе ""Лист 07"" в строке " + Формат(НомерСтроки, "ЧГ=")
						+ " не указан код вида поступлений", "Лист07", "П000700001001" + Постфикс);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(КодВидаПоступления)) <> 3 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"В разделе ""Лист 07"" в строке " + Формат(НомерСтроки, "ЧГ=")
						+ " указан код вида поступлений некорректной длины", "Лист07", "П000700001001" + Постфикс);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист08(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета,
									 СтруктураРеквизитовФормы, СтатусПроверки)
	
	РазделМожетБытьВыгружен = (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 12);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист08");
	Лист08 = ДанныеОтчета.Лист08;
	
	Если РазделМожетБытьВыгружен Тогда
		
		Для Каждого СтраницаРаздела Из Лист08 Цикл
			
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеСтраницы = СтраницаРаздела.Данные;
			Иначе
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
				
				НомерСтраницы = Лист08.Индекс(СтраницаРаздела) + 1;
				НомерСтраницы_Стр = Формат(НомерСтраницы, "ЧГ=");
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" не указан вид корректировки.",
					"Лист08", "П000800000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрНайти("12345", ДанныеСтраницы.П000800000101) = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" указано некорректное значение вида корректировки. Возможные значения: 1, 2, 3, 4, 5.",
					"Лист08", "П000800000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НомСтроки = 1;
				ИмяПоказателя = "П000800000201_1";
				ЗаполненХотяБыОдинКодОснования = Ложь;
				Пока ДанныеСтраницы.Свойство(ИмяПоказателя) Цикл
					Если ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя]) Тогда
						ЗаполненХотяБыОдинКодОснования = Истина;
						Если СтрДлина(СокрЛП(ДанныеСтраницы[ИмяПоказателя])) = 3 Тогда
							Если СтрНайти("121|122|123|124|131|132|133|134|135|136|137",
								СокрЛП(ДанныеСтраницы[ИмяПоказателя])) = 0 Тогда
								РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
								РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
								+ " раздела ""Лист 08"" указано некорректное значение кода основания отнесения сделки к контролируемой. Возможные значения: 121, 122, 123, 124, 131, 132, 133, 134, 135, 136, 137.",
								"Лист08", ИмяПоказателя, НомерСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
						Иначе
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " раздела ""Лист 08"" указано значение кода основания отнесения сделки к контролируемой некорректной длины.",
							"Лист08", ИмяПоказателя, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					НомСтроки = НомСтроки + 1;
					ИмяПоказателя = "П000800000201_" + Формат(НомСтроки, "ЧГ=");
				КонецЦикла;
				Если НЕ ЗаполненХотяБыОдинКодОснования Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" не указан код основания отнесения сделки к контролируемой.",
					"Лист08", "П000800000201_1", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" не указан код страны регистрации (инкорпорации) контрагента.",
					"Лист08", "П000800000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ВидКонтрагента = СокрЛП(ДанныеСтраницы.П000800000301);
				
				Если ВидКонтрагента = "Российская организация" Тогда
					
					ИНН_Длина = СтрДлина(СокрЛП(ДанныеСтраницы.П000800000501));
					Если ИНН_Длина = 0 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указан ИНН контрагента.",
						"Лист08", "П000800000501", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ИНН_Длина <> 10 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" указан ИНН контрагента, не состоящий из 10 цифр.",
						"Лист08", "П000800000501", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000701) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указано наименование организации контрагента.",
						"Лист08", "П000800000701", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				ИначеЕсли ВидКонтрагента = "Иностранная организация" Тогда
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000601) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указан регистрационный номер контрагента в стране регистрации (инкорпорации).",
						"Лист08", "П000800000601", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеСтраницы.П000800000501) Тогда
						ИНН_Длина = СтрДлина(СокрЛП(ДанныеСтраницы.П000800000501));
						Если ИНН_Длина <> 10 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " раздела ""Лист 08"" указан ИНН контрагента, не состоящий из 10 цифр.",
							"Лист08", "П000800000501", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000701) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указано наименование организации контрагента.",
						"Лист08", "П000800000701", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				ИначеЕсли ВидКонтрагента = "Индивидуальный предприниматель" Тогда
					
					ИНН_Длина = СтрДлина(СокрЛП(ДанныеСтраницы.П000800000501));
					Если ИНН_Длина = 0 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указан ИНН контрагента.",
						"Лист08", "П000800000501", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ИНН_Длина <> 12 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" указан ИНН контрагента, не состоящий из 12 цифр.",
						"Лист08", "П000800000501", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000801) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указана фамилия контрагента.",
						"Лист08", "П000800000801", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000802) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указано имя контрагента.",
						"Лист08", "П000800000802", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				ИначеЕсли ВидКонтрагента = "Физическое лицо" Тогда
					
					Если ЗначениеЗаполнено(ДанныеСтраницы.П000800000501) Тогда
						ИНН_Длина = СтрДлина(СокрЛП(ДанныеСтраницы.П000800000501));
						Если ИНН_Длина <> 12 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " раздела ""Лист 08"" указан ИНН контрагента, не состоящий из 12 цифр.",
							"Лист08", "П000800000501", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000801) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указана фамилия контрагента.",
						"Лист08", "П000800000801", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000802) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указано имя контрагента.",
						"Лист08", "П000800000802", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				Иначе
					
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" не указан вид контрагента.",
					"Лист08", "П000800000301", НомерСтраницы);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
				ВозможныеЗначенияПризнака = Новый Массив;
				ВозможныеЗначенияПризнака.Добавить("0");
				ВозможныеЗначенияПризнака.Добавить("1");
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800001004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800001003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 010 не указан признак.",
						"Лист08", "П000800001003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800001003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 010 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800001003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800002004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800002003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 020 не указан признак.",
						"Лист08", "П000800002003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800002003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 020 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800002003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800003004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800003003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 030 не указан признак.",
						"Лист08", "П000800003003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800003003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 030 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800003003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800004004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800004003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 040 не указан признак.",
						"Лист08", "П000800004003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800004003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 040 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800004003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800005004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800005003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 050 не указан признак.",
						"Лист08", "П000800005003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800005003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 050 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800005003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ИмяПоказателя = "";
		
		Для Каждого СтраницаРаздела Из Лист08 Цикл
			
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеСтраницы = СтраницаРаздела.Данные;
			Иначе
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела, , ИмяПоказателя) Тогда
				
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Раздел ""Лист 08"" не должен быть заполнен при составлении декларации не за налоговый период.",
				"Лист08", ИмяПоказателя, НомерСтраницы);
				СтатусПроверки = Ложь;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист09(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета,
									 СтруктураРеквизитовФормы, СтатусПроверки)
	
	РазделДолженБытьВыгружен
		= (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 12
		И ПараметрыВыгрузки.ПоМесту = "238");
	
	РазделМожетБытьВыгружен
		= (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 12);
	
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П000910012001", "П000910012003");
	СоответствиеИменЯчеек.Вставить("П000910011001", "П000910011003");
	СоответствиеИменЯчеек.Вставить("П000910010001", "П000910010003");
	СоответствиеИменЯчеек.Вставить("П000910009001", "П000910009003");
	СоответствиеИменЯчеек.Вставить("П000910008001", "П000910008003");
	СоответствиеИменЯчеек.Вставить("П000910007001", "П000910007003");
	СоответствиеИменЯчеек.Вставить("П000910006001", "П000910006003");
	СоответствиеИменЯчеек.Вставить("П000910005001", "П000910005003");
	СоответствиеИменЯчеек.Вставить("П000910004001", "П000910004003");
	СоответствиеИменЯчеек.Вставить("П000910003001", "П000910003003");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист09");
	Лист09 = ДанныеОтчета.Лист09;
	
	Если РазделДолженБытьВыгружен ИЛИ РазделМожетБытьВыгружен Тогда
		
		ЗаполненаХотяБыОднаСтраницаЛиста09 = Ложь;
		
		Для Каждого СтраницаРаздела Из Лист09 Цикл
			
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеСтраницы = СтраницаРаздела.Данные;
			Иначе
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
				
				ЗаполненаХотяБыОднаСтраницаЛиста09 = Истина;
				
				НомерСтраницы = Лист09.Индекс(СтраницаРаздела) + 1;
				НомерСтраницы_Стр = Формат(НомерСтраницы, "ЧГ=");
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан номер контролируемой иностранной компании.",
					"Лист09", "П0009А0000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					НомерКИК = СокрЛП(ДанныеСтраницы.П0009А0000101);
					НомерКИКСоответствуетШаблону = СтрДлина(НомерКИК) = 8
					И (СтрНачинаетсяС(НомерКИК, "ИО-") ИЛИ СтрНачинаетсяС(НомерКИК, "ИС-"));
					Если НЕ НомерКИКСоответствуетШаблону Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе А"" указан некорректный номер контролируемой иностранной компании. Допустимы значения, соответствующие шаблонам: ""ИО-NNNNN"", ""ИС-NNNNN"" (N - пятизначный порядковый номер).",
						"Лист09", "П0009А0000101", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000201) Тогда
					Если СтрНайти("12345", ДанныеСтраницы.П0009А0000201) = 0 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе А"" указано некорректное значение кода организационной формы. Возможные значения: 1, 2, 3, 4, 5.",
						"Лист09", "П0009А0000201", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000301) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указано полное наименование (в русской транскрипции).",
					"Лист09", "П0009А0000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000302) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указано полное наименование (в латинской транскрипции).",
					"Лист09", "П0009А0000302", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000501) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан код государства (территории) регистрации (инкорпорации), учреждения.",
					"Лист09", "П0009А0000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000601) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан код государства (территории) налогового резиденства.",
					"Лист09", "П0009А0000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000701) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан регистрационный номер (иной идентификатор) в государстве (территории) регистрации (инкорпорации), учреждения.",
					"Лист09", "П0009А0000701", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000901) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан адрес в государстве (территории) регистрации (инкорпорации).",
					"Лист09", "П0009А0000901", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ДанныеСтраницы.П0009А0001001 = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указана доля участия в прибыли контролируемой иностранной компании.",
					"Лист09", "П0009А0001001", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Для НомСтроки = 1 По 8 Цикл
					ИмяПоказателя = "П0009А000110" + НомСтроки;
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя]) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе А"" не указан признак подтверждения основания для освобождения прибыли контролируемой иностранной компании от налогообложения 100"
						+ НомСтроки + ".",
						"Лист09", ИмяПоказателя, НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрНайти("01", ДанныеСтраницы[ИмяПоказателя]) = 0 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе А"" указано некорректное значение признака подтверждения основания для освобождения прибыли контролируемой иностранной компании от налогообложения 100"
						+ НомСтроки + ". Возможные значения: 0, 1.",
						"Лист09", ИмяПоказателя, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				ЗаполненРазделБ2 = Ложь;
				ЗаполненРазделБ3 = Ложь;
				
				Для каждого Показатель Из ДанныеСтраницы Цикл
					ЗаполненРазделБ2 = ЗаполненРазделБ2
					ИЛИ (СтрНачинаетсяС(Показатель.Ключ, "П009Б2") И ЗначениеЗаполнено(Показатель.Значение));
					ЗаполненРазделБ3 = ЗаполненРазделБ3
					ИЛИ (СтрНачинаетсяС(Показатель.Ключ, "П009Б3") И ЗначениеЗаполнено(Показатель.Значение));
					Если ЗаполненРазделБ2 И ЗаполненРазделБ3 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000100) Тогда
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П009Б10000101) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе Б1"" не указан код валюты.",
						"Лист09", "П009Б10000101", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000200) Тогда
					
					Если ЗаполненРазделБ2 Тогда
						
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П009Б20000101) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " ""Листа 09"" в ""Разделе Б2"" не указано основание для применения порядка расчета прибыли.",
							"Лист09", "П009Б20000101", НомерСтраницы);
							СтатусПроверки = Ложь;
						ИначеЕсли СтрНайти("12", ДанныеСтраницы.П009Б20000101) = 0 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " ""Листа 09"" в ""Разделе Б2"" указано некорректное значение основания для применения порядка расчета прибыли. Возможные значения: 1, 2.",
							"Лист09", "П009Б20000101", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П009Б20000201) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " ""Листа 09"" в ""Разделе Б2"" не указан код валюты.",
							"Лист09", "П009Б20000201", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗаполненРазделБ3 Тогда
						
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П009Б30000101) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " ""Листа 09"" в ""Разделе Б3"" не указан код валюты.",
							"Лист09", "П009Б30000101", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Инд = 1;
				Инд_Стр = "1";
				ОсноваИмениПок = "П000910003001_";
				Пока ДанныеСтраницы.Свойство(ОсноваИмениПок + Инд_Стр) Цикл
					
					ЗаполненБлокСтрокПриложения1КЛисту09 = Ложь;
					Для каждого Показатель Из ДанныеСтраницы Цикл
						Если СтрНачинаетсяС(Показатель.Ключ, "П00091")
							И Сред(Показатель.Ключ, 15) = Инд_Стр
							И ЗначениеЗаполнено(Показатель.Значение) Тогда
							ЗаполненБлокСтрокПриложения1КЛисту09 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ЗаполненБлокСтрокПриложения1КЛисту09 Тогда
						Инд = Инд + 1;
						Инд_Стр = Формат(Инд, "ЧГ=");
						Продолжить;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы["П000910000101_" + Инд_Стр]) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " в блоке строк " + Инд_Стр + " ""Приложения № 1 к Листу 09"" не указан код валюты.",
						"Лист09", "П000910000101_" + Инд_Стр, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеСтраницы["П000910000201_" + Инд_Стр]) Тогда
						Если СтрНайти("12", ДанныеСтраницы["П000910000201_" + Инд_Стр]) = 0 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " в блоке строк " + Инд_Стр + " ""Приложения № 1 к Листу 09"" указано некорректное значение кода операций, по которым производится расчет. Возможные значения: 1, 2.",
							"Лист09", "П000910000201_" + Инд_Стр, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Для Каждого Эл Из СоответствиеИменЯчеек Цикл
						Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение + "_" + Инд_Стр])
							И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ + "_" + Инд_Стр]) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы + " в блоке строк " + Инд_Стр + " ""Приложения № 1 к Листу 09"" в строке "
							+ Сред(Эл.Ключ + "_" + Инд_Стр, 9, 3) + " не задан год", "Лист09", Эл.Ключ + "_" + Инд_Стр, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ + "_" + Инд_Стр])
							И СтрДлина(СокрЛП(ДанныеСтраницы[Эл.Ключ + "_" + Инд_Стр])) <> 4 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы + " в блоке строк " + Инд_Стр + " ""Приложения № 1 к Листу 09"" в строке "
							+ Сред(Эл.Ключ + "_" + Инд_Стр, 9, 3) + " задано значение года некорректной длины", "Лист09", Эл.Ключ + "_" + Инд_Стр, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЦикла;
					
					Инд = Инд + 1;
					Инд_Стр = Формат(Инд, "ЧГ=");
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ИмяПоказателя = "";
		
		Для Каждого СтраницаРаздела Из Лист09 Цикл
			
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеСтраницы = СтраницаРаздела.Данные;
			Иначе
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела, , ИмяПоказателя) Тогда
				НомерСтраницы = Лист09.Индекс(СтраницаРаздела) + 1;
				
				Если НЕ ЗначениеЗаполнено(ИмяПоказателя) Тогда
					ИмяПоказателя = "П0009А0000101";
				КонецЕсли;
				
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Раздел ""Лист 09"" не должен быть заполнен при составлении декларации не за налоговый период.",
				"Лист09", ИмяПоказателя, НомерСтраницы);
				СтатусПроверки = Ложь;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если РазделДолженБытьВыгружен И НЕ ЗаполненаХотяБыОднаСтраницаЛиста09 Тогда
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
		"Раздел ""Лист 09"" должен быть заполнен при составлении декларации за налоговый период с кодом места представления, равным ""238"".",
		"Лист09", "П0009А0000101", 1);
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Приложение2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										  РезультатВыгрузки, ДанныеОтчета,
										  СтруктураРеквизитовФормы, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Приложение2");
	Приложение2 = ДанныеОтчета.Приложение2;
	
	Для Каждого СтраницаРаздела Из Приложение2 Цикл
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			НомерСтраницы = Приложение2.Индекс(СтраницаРаздела) + 1;
			НомерСтраницы_Стр = Формат(НомерСтраницы, "ЧГ=");
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000101) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан номер справки.",
				"Приложение2", "П000020000101", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000102) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указана дата составления.",
				"Приложение2", "П000020000102", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000103) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан тип.",
				"Приложение2", "П000020000103", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ДлинаП000020000103 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000103));
				Если ДлинаП000020000103 <> 2 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
					+ НомерСтраницы_Стр + " ""Приложения 2"" указан тип, не состоящий из 2 символов.",
					"Приложение2", "П000020000103", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000020000201) Тогда
				ДлинаП000020000201 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000201));
				Если ДлинаП000020000201 <> 12 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" указан ИНН физического лица в Российской Федерации, не состоящий из 12 символов.",
					"Приложение2", "П000020000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000401) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан статус налогоплательщика.",
				"Приложение2", "П000020000401", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000402) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указана дата рождения.",
				"Приложение2", "П000020000402", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000301) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
				+ " ""Приложения 2"" не указана фамилия физического лица.", "Приложение2", "П000020000301", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000302) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
				+ " ""Приложения 2"" не указано имя физического лица.", "Приложение2", "П000020000302", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000403) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан код гражданства (код страны).",
				"Приложение2", "П000020000403", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ДлинаП000020000403 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000403));
				Если ДлинаП000020000403 <> 3 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
					+ НомерСтраницы_Стр + " ""Приложения 2"" указан код гражданства (код страны), не состоящий из 3 символов.",
					"Приложение2", "П000020000403", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000404) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан код документа, удостоверяющего личность.",
				"Приложение2", "П000020000404", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ДлинаП000020000404 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000404));
				Если ДлинаП000020000404 <> 2 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" указан код документа, удостоверяющего личность, не состоящий из 2 символов.",
					"Приложение2", "П000020000404", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000405) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
				+ " ""Приложения 2"" не указаны серия и номер документа, удостоверяющего личность.",
				"Приложение2", "П000020000405", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗаполненБлокАдрМЖРФ
			= ЗначениеЗаполнено(ДанныеСтраницы.П000020000501)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000502)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000503)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000504)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000505)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000506)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000507)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000508)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000509);
			
			Если ЗаполненБлокАдрМЖРФ
				ИЛИ СокрЛП(ДанныеСтраницы.П000020000401) = "1"
				ИЛИ СокрЛП(ДанныеСтраницы.П000020000403) = "643" Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000502) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" не указан код региона.", "Приложение2", "П000020000502", НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					ДлинаП000020000502 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000502));
					Если ДлинаП000020000502 <> 2 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Приложения 2"" указан код региона, не состоящий из 2 символов.",
						"Приложение2", "П000020000502", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(ДанныеСтраницы.П000020000403)
				И СокрЛП(ДанныеСтраницы.П000020000403) <> "643" И НЕ ЗаполненБлокАдрМЖРФ)
				ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000601)
				ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000602) Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000601) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" не указан код страны в адресе места жительства за пределами Российской Федерации.",
					"Приложение2", "П000020000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					ДлинаП000020000601 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000601));
					Если ДлинаП000020000601 <> 3 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Приложения 2"" указан код страны в адресе места жительства за пределами Российской Федерации, не состоящий из 3 символов.",
						"Приложение2", "П000020000601", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000602) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" не указан адрес места жительства за пределами Российской Федерации.",
					"Приложение2", "П000020000602", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Функция СтраницаПуста(ИмяФормы,
					  ДанныеСтраницы,
					  Показатели,
					  ДеревоВыгрузки = Неопределено,
					  ИмяЗаполненногоПоказателя = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	// Лист 02, ставки налогов.
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200014003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200015003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200016003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200017003");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000250006003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000320002003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000400003003");
	
	// Приложение №6 к Листу 02, код региона
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000260000601");
	
	// Раздел 1.2.
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120001003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120011003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120021003");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000210000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000230000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000240000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000250000100");
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Родитель <> Неопределено И Пок.Родитель.Многострочность
		 ИЛИ (Лев(Пок.Ключ, 9) = "П00033000" ИЛИ Лев(Пок.Ключ, 9) = "П00034000")
		 ИЛИ Пок.Ключ = "П000800000201"
		 ИЛИ СтрНачинаетсяС(Пок.Ключ, "П00091") Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(ИмяФормы, Пок, ЗначениеПоказателя) Тогда
					Если ИмяЗаполненногоПоказателя = "" Тогда
						ИмяЗаполненногоПоказателя = Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ=");
					КонецЕсли;
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(ИмяФормы, Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Если ИмяЗаполненногоПоказателя = "" Тогда
					ИмяЗаполненногоПоказателя = Пок.Ключ;
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция ПоказательЗаполнен(ИмяФормы, Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение)
	      И НЕ (СокрЛП(Показатель.Формат) = "N"
		  	  И Показатель.МаксРазмерность = 15
		      И ТипЗнч(Значение) = Тип("Число")
		      И Окр(Значение) = 0);
	
КонецФункции
		  
Процедура ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	ПараметрыПроверки,
																	РезультатВыгрузки,
																	СтатусПроверки)
	
	ИмяРаздела = ПараметрыПроверки.ИмяРаздела;
	ПредставлениеРаздела = ПараметрыПроверки.ПредставлениеРаздела;
	ПризнакНалогоплательщика = ПараметрыПроверки.ПризнакНалогоплательщика;
	ДанныеСтраницы = ПараметрыПроверки.ДанныеСтраницы;
	НомерСтраницы = ПараметрыПроверки.НомерСтраницы;
	СерияЛиценции = ПараметрыПроверки.СерияЛиценции;
	НомерЛиценции = ПараметрыПроверки.НомерЛиценции;
	ВидЛиценции = ПараметрыПроверки.ВидЛиценции;
	НомерМесторождения = ПараметрыПроверки.НомерМесторождения;
	
	ДлинаСерЛиц = СтрДлина(СокрЛП(ДанныеСтраницы[СерияЛиценции]));
	Если ДлинаСерЛиц > 0 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		Если ДлинаСерЛиц <> 3 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
			+ НомерСтраницы + " раздела " + ПредставлениеРаздела + " не" + ?(ДлинаСерЛиц = 0, "", "верно")
			+ " задана серия лицензии на пользование недрами", ИмяРаздела, СерияЛиценции, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДлинаНомЛиц = СтрДлина(СокрЛП(ДанныеСтраницы[НомерЛиценции]));
	Если ДлинаНомЛиц > 0 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		Если ДлинаНомЛиц <> 5 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
			+ НомерСтраницы + " раздела " + ПредставлениеРаздела + " не" + ?(ДлинаНомЛиц = 0, "", "верно")
			+ " задан номер лицензии на пользование недрами", ИмяРаздела, НомерЛиценции, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДлинаВидЛиц = СтрДлина(СокрЛП(ДанныеСтраницы[ВидЛиценции]));
	Если ДлинаВидЛиц > 0 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		Если ДлинаВидЛиц <> 2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
			+ НомерСтраницы + " раздела " + ПредставлениеРаздела + " не" + ?(ДлинаВидЛиц = 0, "", "верно")
			+ " задан вид лицензии на пользование недрами", ИмяРаздела, ВидЛиценции, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДлинаНомМест = СтрДлина(СокрЛП(ДанныеСтраницы[НомерМесторождения]));
	Если ДлинаНомМест > 0 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		Если ДлинаНомМест <> 2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
			+ НомерСтраницы + " раздела " + ПредставлениеРаздела + " не" + ?(ДлинаНомМест = 0, "", "верно")
			+ " задан порядковый номер нового морского месторождения ", ИмяРаздела, НомерМесторождения, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета, Раздел, КодПокзателя)
	
	ДанныеРаздела = ДанныеОтчета[Раздел];
	ЗначенияПоказателя = Новый Массив;
	Для Каждого Стр Из ДанныеРаздела Цикл
				
		Если ТипЗнч(Стр.Данные) = Тип("Структура") Тогда
			ЗначениеПоказателя = Стр.Данные[КодПокзателя];
		Иначе
			ЗначениеПоказателя = Стр.Данные[0].Значение[КодПокзателя];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Если ЗначенияПоказателя.Найти(ЗначениеПоказателя) <> Неопределено Тогда
				Возврат Истина;
			Иначе
				ЗначенияПоказателя.Добавить(ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьСоответствиеОКАТОСубъектамРФ(ИмяФормы, СоответствиеОКАТОСубъектамРФ) Экспорт
	
	Если СоответствиеОКАТОСубъектамРФ = Неопределено Тогда
		
		СоответствиеОКАТОСубъектамРФ = Новый ТаблицаЗначений;
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("КодСубъекта");
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("НазваниеСубъекта");
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("МаскаОКАТО");
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("ДлинаМаски");
		
	КонецЕсли;	
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2016Кв4") Тогда
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СпискиВыбора2016Кв4");
	КонецЕсли;
	
	ОбластьДанных = МакетСоставаПоказателей.Области.ОКАТОПоСубъектам;
	
	ВерхОбласти = ОбластьДанных.Верх;
	НизОбласти = ОбластьДанных.Низ;
	
	Для НомСтр = ВерхОбласти По НизОбласти Цикл
		
		КодСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
		НазваниеСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
		МаскаОКАТО = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
		
		Если НЕ ПустаяСтрока(КодСубъекта) И НЕ ПустаяСтрока(МаскаОКАТО) Тогда
			НоваяСтрока = СоответствиеОКАТОСубъектамРФ.Добавить();
			НоваяСтрока.КодСубъекта = КодСубъекта;
			НоваяСтрока.НазваниеСубъекта = НазваниеСубъекта;
			НоваяСтрока.МаскаОКАТО = МаскаОКАТО;
			
			НоваяСтрока.ДлинаМаски = СтрДлина(НоваяСтрока.МаскаОКАТО);
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеОКАТОСубъектамРФ.Сортировать("ДлинаМаски Убыв, МаскаОКАТО");
	
КонецПроцедуры

Функция СтрокаЧГ0(ИмяФормы, ИсходноеЧисло) Экспорт
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=");
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
					 	   ДанныеОтчета,
						   СтруктураРеквизитовФормы) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
												  
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки,
						 ДанныеОтчета,
						 СтруктураРеквизитовФормы);
											
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(
						РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы, ПараметрыВыгрузки, ТекСтр, РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   ПараметрыВыгрузки,
							   Узел,
							   ДанныеОтчета,
							   СтруктураРеквизитовФормы,
							   НомерСтроки = Неопределено)
	
	КоличествоВставленныхУзлов = 0;
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если КоличествоВставленныхУзлов > 0 Тогда
			КоличествоВставленныхУзлов = КоличествоВставленныхУзлов - 1;
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ДанныеРаздела = ДанныеОтчета[Стр.Раздел];
				Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
					УзелСтраницы = НовыйУзелИзПрототипа(ИмяФормы, Стр);
					УзелСтраницы.Многостраничность = Ложь;
					
					Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
						ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные);
					Иначе
						ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные[0].Значение);
					КонецЕсли;
					
					ЗаполнитьДаннымиУзел(ИмяФормы, ВиртуальныеДанные, УзелСтраницы, ДанныеОтчета, СтруктураРеквизитовФормы);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			ИначеЕсли Стр.Многострочность Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						ДанныеРаздела = ПараметрыВыгрузки[Стр.Раздел];
					ИначеЕсли ДанныеОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Раздел) Тогда
						ДанныеРаздела = ДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел];
					Иначе
						ДанныеРаздела = ПараметрыВыгрузки;
					КонецЕсли;
				Иначе
					ДанныеРаздела = ПараметрыВыгрузки;
				КонецЕсли;
				ИмяКонтрольногоПоказателя = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(ИмяФормы, Стр);
				
				НомерСтроки = 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
				УдалятьПрототипУзла = Ложь;
				
				Пока ДанныеРаздела.Свойство(ИмяКонтрольногоПоказателя + Постфикс) Цикл
					УдалятьПрототипУзла = Истина;
					УзелСтроки = НовыйУзелИзПрототипа(ИмяФормы, Стр);
					УзелСтроки.Многострочность = Ложь;
					ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(ИмяФормы, УзелСтроки, Постфикс);
					ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, УзелСтроки, ДанныеОтчета, СтруктураРеквизитовФормы);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
					
					НомерСтроки = НомерСтроки + 1;
					Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
				КонецЦикла;
				
				Если УдалятьПрототипУзла Тогда
					РегламентированнаяОтчетность.УдалитьУзел(Стр);
					КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				КонецЕсли;
				
			Иначе
				Если Стр.Код = "Прибыль" Тогда
					ЗаполнитьСодержательнуюЧасть(ИмяФормы, ПараметрыВыгрузки, ДанныеОтчета, Стр, СтруктураРеквизитовФормы);
				Иначе
					ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, Стр, ДанныеОтчета, СтруктураРеквизитовФормы);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли Стр.Тип = "П" Тогда
			НомерСтроки = 1;
			Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
			УдалятьПрототипУзла = Ложь;
			
			Пока ПараметрыВыгрузки.Свойство(Стр.Ключ + Постфикс) Цикл
				УдалятьПрототипУзла = Истина;
				
				УзелСтроки = НовыйУзелИзПрототипа(ИмяФормы, Стр);
				ВывестиПоказательВXML(ИмяФормы, УзелСтроки, ПараметрыВыгрузки[УзелСтроки.Ключ + Постфикс]);
				
				КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				НомерСтроки = НомерСтроки + 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
			КонецЦикла;
			
			Если УдалятьПрототипУзла Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) И НЕ ПустаяСтрока(Стр.Ключ) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						// Данные представлены в виде раздела в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Раздел][Стр.Ключ];
						ВывестиПоказательВXML(ИмяФормы, Стр, ЗначениеЭлемента);
					ИначеЕсли ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
						// Данные заданы в виде значения в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Ключ];
						ВывестиПоказательВXML(ИмяФормы, Стр, ЗначениеЭлемента);
					ИначеЕсли ДанныеОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Раздел)
					        И ДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел].Свойство(Стр.Ключ) Тогда
						// Данные находятся в сохраненных данных отчета.
						ЗначениеЭлемента = ДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел][Стр.Ключ];
						ВывестиПоказательВXML(ИмяФормы, Стр, ЗначениеЭлемента);
					Иначе
						// Данные не обнаружены
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла)
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(ИмяФормы, Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(ИмяФормы, СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(ИмяФормы, Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(ИмяФормы, СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   ПараметрыВыгрузки,
									   ДанныеОтчета,
									   УзелРодитель,
									   СтруктураРеквизитовФормы)
	
	Узел_НалПУ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалПУ");
	
	Раздел1_1 = ДанныеОтчета.Раздел1_1;
	ПрототипУзла_НалПУАв = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_НалПУ, "НалПУАв");
	Для Каждого СтраницаРаздела Из Раздел1_1 Цикл
				
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Узел_НалПУАв = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалПУАв);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_НалПУАв, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалПУАв);
	
	Раздел1_2 = ДанныеОтчета.Раздел1_2;
	ПрототипУзла_НалПУМес = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_НалПУ, "НалПУМес");
	Для Каждого СтраницаРаздела Из Раздел1_2 Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалПУМес = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалПУМес);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_НалПУМес, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалПУМес);
	
	Узел_НалПУПроц = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_НалПУ, "НалПУПроц");
	
	Раздел1_3 = ДанныеОтчета.Раздел1_3;
	ПрототипУзла_НалПУПроц = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_НалПУ, "НалПУПроц");
	Для Каждого СтраницаРаздела Из Раздел1_3 Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалПУПроц = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалПУПроц);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_НалПУПроц, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалПУПроц);
	
	ЗаполнитьСведенияВыгрузки_Лист02(ИмяФормы, ПараметрыВыгрузки, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Лист03(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	Лист04 = ДанныеОтчета.Лист04;
	ПрототипУзла_НалДохСтав = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалДохСтав");
	Для Каждого СтраницаРаздела Из Лист04 Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалДохСтав = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалДохСтав);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_НалДохСтав, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалДохСтав);
	
	ЗаполнитьСведенияВыгрузки_Лист05(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	// Лист 06.
	ДанныеРаздела = ДанныеОтчета.Лист06;
	Узел_ДохРасНалБазаНПФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ДохРасНалБазаНПФ");
	ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_ДохРасНалБазаНПФ, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Лист07(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Лист08(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Лист09(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	// Приложение 1.
	ДанныеРаздела = ДанныеОтчета.Приложение1;
	Узел_ДохНеУч_РасхУч = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ДохНеУч_РасхУч");
	ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_ДохНеУч_РасхУч, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Приложение2(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист02(ИмяФормы,
										   ПараметрыВыгрузки,
										   УзелРодитель,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы)
	
	КодПоМесту = ДанныеОтчета.Титульный.ПоМесту;
	ПредставлениеЗаОП = (КодПоМесту = "220" ИЛИ КодПоМесту = "223");
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	КвартальнаяОтчетность = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	Если ПредставлениеЗаОП Тогда
		// Приложение 5 к листу 02 выгружается самостоятельно.
		Узел_РасчНал = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РасчНал");
		РегламентированнаяОтчетность.УдалитьУзел(Узел_РасчНал);
		
		Лист02_5 = ДанныеОтчета.Лист02_5;
		ПрототипУзла_РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РаспрНалСубРФ");
		Для Каждого СтраницаРаздела Из Лист02_5 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			Узел_РаспрНалСубРФ = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_РаспрНалСубРФ);
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_РаспрНалСубРФ, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РаспрНалСубРФ);
		
	Иначе
		
		СоответствиеОКАТОСубъектамРФ = Неопределено;
				
		ЗаполнитьСоответствиеОКАТОСубъектамРФ(ИмяФормы, СоответствиеОКАТОСубъектамРФ);
		
		Узел_РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РаспрНалСубРФ");
		РегламентированнаяОтчетность.УдалитьУзел(Узел_РаспрНалСубРФ);
		
		УзлыЛиста02 = Новый Соответствие;
		
		Лист02 = ДанныеОтчета.Лист02;
		ПрототипУзла_РасчНал = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РасчНал");
		Для Каждого СтраницаРаздела Из Лист02 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			Узел_РасчНал = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_РасчНал);
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000200000100);
			УзелИПрототипы = Новый Структура;
			УзелИПрототипы.Вставить("РасчНал", Узел_РасчНал);
			УзелИПрототипы.Вставить("ДохРеалВнеРеал",  ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_РасчНал, "ДохРеалВнеРеал"));
			УзелИПрототипы.Вставить("РасхРеалВнеРеал", ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_РасчНал, "РасхРеалВнеРеал"));
			УзелИПрототипы.Вставить("РасчРасхОпер",    ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_РасчНал, "РасчРасхОпер"));
			УзелИПрототипы.Вставить("УбытУменНБ",      ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_РасчНал, "УбытУменНБ"));
			УзелИПрототипы.Вставить("РаспрНалСубРФ",   ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_РасчНал, "РаспрНалСубРФ"));
			УзелИПрототипы.Вставить("РасчНалГруп",     ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_РасчНал, "РасчНалГруп"));
			УзлыЛиста02.Вставить(ТипНалогоплательщика, УзелИПрототипы);
			
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_РасчНал, ДанныеОтчета, СтруктураРеквизитовФормы);
			
			// Приложение 6б к Листу 02.
			// Заполняется автоматическии по всем листам 02, поэтому надо удалить лишние.
			Если УзлыЛиста02.Количество() > 1 Тогда
				Узел_ДохРасхУчГрупНБ = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_РасчНал, "ДохРасхУчГрупНБ");
				РегламентированнаяОтчетность.УдалитьУзел(Узел_ДохРасхУчГрупНБ);
			КонецЕсли;
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РасчНал);
		
		Лист02_1 = ДанныеОтчета.Лист02_1;
		Для Каждого СтраницаРаздела Из Лист02_1 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000210000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_ДохРеалВнеРеал = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.ДохРеалВнеРеал);
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_ДохРеалВнеРеал, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		Лист02_2 = ДанныеОтчета.Лист02_2;
		Для Каждого СтраницаРаздела Из Лист02_2 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000220000100);
			
			Если НЕ КвартальнаяОтчетность Тогда
				
				РазделЗаполненПоУсловию = Ложь;
				ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220000100");
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220040003");
				
				Для каждого Пок Из ДанныеРаздела Цикл
					Если ЗначениеЗаполнено(Пок.Значение)
						И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
						РазделЗаполненПоУсловию = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ РазделЗаполненПоУсловию
					И ЗначениеЗаполнено(ТипНалогоплательщика) И ЗначениеЗаполнено(ДанныеРаздела.П000220040003) Тогда
					// В случае отчетности не за квартал, если на странице Приложения № 2 к Листу 02
					// заполнены только признак налогоплательщика и строка 400, такая страница не выгружается.
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РасхРеалВнеРеал = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.РасхРеалВнеРеал);
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_РасхРеалВнеРеал, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		Лист02_3 = ДанныеОтчета.Лист02_3;
		Для Каждого СтраницаРаздела Из Лист02_3 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000230000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РасчРасхОпер = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.РасчРасхОпер);
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_РасчРасхОпер, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		ДанныеРазделовЛиста02_4_ТН5 = Новый Массив;
		УзлыЛиста02Копия = Новый Соответствие(Новый ФиксированноеСоответствие(УзлыЛиста02));
		Лист02_4 = ДанныеОтчета.Лист02_4;
		Для Каждого СтраницаРаздела Из Лист02_4 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000240000100);
			Если ТипНалогоплательщика = "5" Тогда
				УзелИПрототипы = Неопределено;
				ДанныеРазделовЛиста02_4_ТН5.Добавить(ДанныеРаздела);
			Иначе
				УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			КонецЕсли;
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_УбытУменНБ = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.УбытУменНБ);
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_УбытУменНБ, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		Для Каждого ДанныеРаздела Из ДанныеРазделовЛиста02_4_ТН5 Цикл
			КлючНайденногоЭлемента = Неопределено;
			
			Для КодТН = 1 По 4 Цикл
				Если КодТН = 2 Тогда
					Продолжить;
				КонецЕсли;
				КлючНайденногоЭлемента = Формат(КодТН, "ЧГ=");
				УзелИПрототипы = УзлыЛиста02Копия.Получить(КлючНайденногоЭлемента);
				Если УзелИПрототипы <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_УбытУменНБ = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.УбытУменНБ);
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_УбытУменНБ, ДанныеОтчета, СтруктураРеквизитовФормы);
			УзлыЛиста02Копия.Удалить(КлючНайденногоЭлемента);
		КонецЦикла;
		
		Лист02_5 = ДанныеОтчета.Лист02_5;
		Для Каждого СтраницаРаздела Из Лист02_5 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000250000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РаспрНалСубРФ = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.РаспрНалСубРФ);
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_РаспрНалСубРФ, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		УзлыЛиста02_6 = Новый Соответствие;
		Лист02_6 = ДанныеОтчета.Лист02_6;
		Для Каждого СтраницаРаздела из Лист02_6 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			КодСубъектаРФ = СокрЛП(ДанныеРаздела.П000260000601);
			
			УзелИПрототипы = ПервыйЭлементСоответствия(ИмяФормы, УзлыЛиста02);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РасчНалГруп = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.РасчНалГруп);
			УзелИПрототипыЛиста02_6 = Новый Структура;
			УзелИПрототипыЛиста02_6.Вставить("РасчНалГруп", Узел_РасчНалГруп);
			УзелИПрототипыЛиста02_6.Вставить("РасчНалУчГруп",
				ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_РасчНалГруп, "РасчНалУчГруп"));
			УзлыЛиста02_6.Вставить(КодСубъектаРФ, УзелИПрототипыЛиста02_6);
			
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_РасчНалГруп, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		Лист02_6а = ДанныеОтчета.Лист02_6а;
		Для Каждого СтраницаРаздела из Лист02_6а Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеРаздела.П000270000301);
			КодСубъектаРФ = РегламентированнаяОтчетностьКлиентСервер.КодСубъектаРФПоОКТМО(
				СоответствиеОКАТОСубъектамРФ, ОКТМО);
			
			УзелИПрототипыЛиста02_6 = УзлыЛиста02_6[КодСубъектаРФ];
			Если УзелИПрототипыЛиста02_6 = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйУзел_РасчНалУчГруп = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипыЛиста02_6.РасчНалУчГруп);
			
			ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, НовыйУзел_РасчНалУчГруп, ДанныеОтчета, СтруктураРеквизитовФормы);
			
		КонецЦикла;
		
		ДанныеРаздела = ДанныеОтчета.Лист02_6б;
			
		Если УзлыЛиста02.Количество() > 0 Тогда
			
			УзелИПрототипы = ПервыйЭлементСоответствия(ИмяФормы, УзлыЛиста02);
			Узел_ДохРасхУчГрупНБ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелИПрототипы.РасчНал, "ДохРасхУчГрупНБ");
			
			Если Узел_ДохРасхУчГрупНБ <> Неопределено Тогда
				ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_ДохРасхУчГрупНБ, ДанныеОтчета, СтруктураРеквизитовФормы);
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист03(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Узел_НалУдНА = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалУдНА");
	
	Лист03А = ДанныеОтчета.Лист03А;
	ПрототипУзла_НалДохДив = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_НалУдНА, "НалДохДив");
	Для Каждого СтраницаРаздела Из Лист03А Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалДохДив = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалДохДив);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_НалДохДив, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалДохДив);
	
	Лист03Б = ДанныеОтчета.Лист03Б;
	ПрототипУзла_НалДохЦБ = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_НалУдНА, "НалДохЦБ");
	Для Каждого СтраницаРаздела Из Лист03Б Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалДохЦБ = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалДохЦБ);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_НалДохЦБ, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалДохЦБ);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист05(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Лист05 = ДанныеОтчета.Лист05;
	
	ПрототипУзла_НалБазОпОсобН = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалБазОпОсобН");
	Для Каждого СтраницаРаздела Из Лист05 Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалБазОпОсобН = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалБазОпОсобН);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_НалБазОпОсобН, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалБазОпОсобН);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист07(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	ДанныеРаздела = ДанныеОтчета.Лист07;
	Узел_ЦелИспИмущ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ЦелИспИмущ");
	ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_ЦелИспИмущ, ДанныеОтчета, СтруктураРеквизитовФормы);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист08(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Лист08 = ДанныеОтчета.Лист08;
	
	ПрототипУзла_ДохРасхКор = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ДохРасхКор");
	
	Для Каждого СтраницаРаздела Из Лист08 Цикл

		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;

		Узел_ДохРасхКор = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_ДохРасхКор);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_ДохРасхКор, ДанныеОтчета, СтруктураРеквизитовФормы);
		
		ВидКонтрагента = СокрЛП(ДанныеРаздела.П000800000301);
		Если ВидКонтрагента = "Индивидуальный предприниматель"
			ИЛИ ВидКонтрагента = "Физическое лицо" Тогда
			Узлел_Орг_Контрагент = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_ДохРасхКор, "Орг_Контрагент");
			РегламентированнаяОтчетность.УдалитьУзел(Узлел_Орг_Контрагент);
		ИначеЕсли ВидКонтрагента = "Российская организация"
			ИЛИ ВидКонтрагента = "Иностранная организация" Тогда
			Узлел_ФЛ_Контрагент = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_ДохРасхКор, "ФЛ_Контрагент");
			РегламентированнаяОтчетность.УдалитьУзел(Узлел_ФЛ_Контрагент);
		Иначе
			Узлел_Орг_Контрагент = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_ДохРасхКор, "Орг_Контрагент");
			РегламентированнаяОтчетность.УдалитьУзел(Узлел_Орг_Контрагент);
			Узлел_ФЛ_Контрагент = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_ДохРасхКор, "ФЛ_Контрагент");
			РегламентированнаяОтчетность.УдалитьУзел(Узлел_ФЛ_Контрагент);
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ДохРасхКор);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист09(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Лист09 = ДанныеОтчета.Лист09;
	
	УзелРасчНалКИК = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РасчНалКИК");
	ПрототипУзла_СведКИК = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРасчНалКИК, "СведКИК");
	Для Каждого СтраницаРаздела Из Лист09 Цикл

		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;

		Узел_СведКИК = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СведКИК);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_СведКИК, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведКИК);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Приложение2(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
		
	Приложение2 = ДанныеОтчета.Приложение2;
	ПрототипУзла_СведДохФЛ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СведДохФЛ");
	Для Каждого СтраницаРаздела Из Приложение2 Цикл

		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;

		Узел_СведДохФЛ = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СведДохФЛ);
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеРаздела, Узел_СведДохФЛ, ДанныеОтчета, СтруктураРеквизитовФормы);
		
		Если СокрЛП(ДанныеРаздела.П000020000103) <> "99" Тогда
			Узел_ДохНалПер = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_СведДохФЛ, "ДохНалПер");
			Узел_ДохНалПер.Обязательность = "О";
		КонецЕсли;
		
		// Сведения о доходах и вычетах.
		ДоходыИВычеты = Новый ДеревоЗначений;
		ДоходыИВычеты.Колонки.Добавить("Код");
		ДоходыИВычеты.Колонки.Добавить("Сумма");
		
		ДанныеДопСтрок = СтраницаРаздела.ДанныеДопСтрок;
		
		Для Каждого ДопСтрока Из ДанныеДопСтрок Цикл
			
			Если НЕ ДопСтрока.Ключ = "П0000200040" Тогда
				
				Продолжить;
				
			КонецЕсли;	
			
			Для Каждого СтрокаТЗ Из ДопСтрока.Значение Цикл
				
				КодДохода = СокрЛП(СтрокаТЗ["П000020004001"]);
				СуммаДохода = СтрокаТЗ["П000020004101"];
				
				Если ЗначениеЗаполнено(КодДохода) Тогда
					СтрокаДохода = ДоходыИВычеты.Строки.Найти(КодДохода, "Код");
					Если СтрокаДохода = Неопределено Тогда
						СтрокаДохода = ДоходыИВычеты.Строки.Добавить();
						СтрокаДохода.Код = КодДохода;
						СтрокаДохода.Сумма = СуммаДохода;
					КонецЕсли;
					
					Для Инд = 1 По 5 Цикл
						КодВычета = СокрЛП(СтрокаТЗ["П00002000420" + Инд]);
						СуммаВычета = СтрокаТЗ["П00002000430" + Инд];
						
						Если ЗначениеЗаполнено(КодВычета) Тогда
							СтрокаВычета = СтрокаДохода.Строки.Добавить();
							СтрокаВычета.Код = КодВычета;
							СтрокаВычета.Сумма = СуммаВычета;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Узел_СпрДохФЛ = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_СведДохФЛ, "СпрДохФЛ");
		
		ПрототипУзла_СумДох = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_СпрДохФЛ, "СумДох");
		Для Каждого СтрокаДохода Из ДоходыИВычеты.Строки Цикл
			Узел_СумДох = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СумДох);
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумДох, "КодДоход", СтрокаДохода.Код);
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумДох, "СумДоход", СтрокаДохода.Сумма);
			
			ПрототипУзла_СумВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_СумДох, "СумВыч");
			Для Каждого СтрокаВычета Из СтрокаДохода.Строки Цикл
				Узел_СумВыч = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СумВыч);
				ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумВыч, "КодВычет", СтрокаВычета.Код);
				ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумВыч, "СумВычет", СтрокаВычета.Сумма);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумВыч);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумДох);
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведДохФЛ);
	
КонецПроцедуры

Функция ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип ("Число") Тогда
			ЗначениеПоказателя = XMLСтрока(ЗначениеПоказателя);
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя),
						  Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		  ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		    И УзелПуст(ИмяФормы, Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			   ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
				 И УзелПуст(ИмяФормы, Узел)
				 И ?(СтрНайти(Узел.Обязательность, "О") <> 0
				 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
				 РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ПервыйЭлементСоответствия(ИмяФормы, ПросматриваемоеСоответствие)
	
	Результат = Неопределено;
	
	Для Каждого ЭлементСоответствия Из ПросматриваемоеСоответствие Цикл
		Результат = ЭлементСоответствия.Значение;
		Прервать;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(ИмяФормы, Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ИмяФормы, ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
		
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли