
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2019";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_1", Новый Цвет(192, 192, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР2М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР2М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП3М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП4М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП6М1");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекущееЗначениеКоэффициентаТ");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнитьЗначенияПоУмолчанию Тогда
		
		УстановитьКодПоМестуПоУмолчанию();
		
		// Установка в разделе 1 значения кода по ОКТМО.
		//
		ОргОКТМО = "";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
		Если СведенияОбОрганизации.Свойство("ОКТМО") Тогда
			ОргОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
		КонецЕсли;
		
		ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
		СтрокаМнЧР1М1 = ДеревоРаздела1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1].Строки[0];
		СтрокаМнЧР1М2 = СтрокаМнЧР1М1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2].Строки[0];
		
		СтрокаМнЧР1М2.Данные.Вставить("П00001М202000", ОргОКТМО);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела1, УникальныйИдентификатор);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение) Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	Если СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик Тогда
		ТабличныйДокумент.Области.ПоМесту.Значение = "213";
	Иначе
		ТабличныйДокумент.Области.ПоМесту.Значение = "214";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР1М1 = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппыР1М2 = "П00001М2";
	СтруктураРеквизитовФормы.мИдГруппыР2М1 = "П00002М1";
	СтруктураРеквизитовФормы.мИдГруппыР2М2 = "П00002М2";
	СтруктураРеквизитовФормы.мИдГруппыП1М1 = "П00101М1";
	СтруктураРеквизитовФормы.мИдГруппыП2М1 = "П00102М1";
	СтруктураРеквизитовФормы.мИдГруппыП3М1 = "П00103М1";
	СтруктураРеквизитовФормы.мИдГруппыП4М1 = "П00104М1";
	СтруктураРеквизитовФормы.мИдГруппыП6М1 = "П00106М1";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М101000");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М2);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00001М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М202000");
	ИменаГраф.Добавить("П00001М203000");
	ИменаГраф.Добавить("П00001М204000");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00002М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00002М103003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР2М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00002М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00002М217003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР2М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00101М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00101М100703");
	ИменаГраф.Добавить("П00101М101003");
	ИменаГраф.Добавить("П00101М102003");
	ИменаГраф.Добавить("П00101М103003");
	ИменаГраф.Добавить("П00101М104003");
	ИменаГраф.Добавить("П00101М105003");
	ИменаГраф.Добавить("П00101М105503");
	ИменаГраф.Добавить("П00101М106003");
	ИменаГраф.Добавить("П00101М107003");
	ИменаГраф.Добавить("П00101М108003");
	ИменаГраф.Добавить("П00101М109003");
	ИменаГраф.Добавить("П00101М110003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00102М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М100007");
	ИменаГраф.Добавить("П00102М110000");
	ИменаГраф.Добавить("П00102М120000");
	ИменаГраф.Добавить("П00102М121000");
	ИменаГраф.Добавить("П00102М130000");
	ИменаГраф.Добавить("П00102М130100");
	ИменаГраф.Добавить("П00102М130200");
	ИменаГраф.Добавить("П00102М130300");
	ИменаГраф.Добавить("П00102М130400");
	ИменаГраф.Добавить("П00102М130500");
	ИменаГраф.Добавить("П00102М130600");
	ИменаГраф.Добавить("П00102М130700");
	Для Инд = 1 По 33 Цикл
		// Строки с "30701" по "30733".
		ИменаГраф.Добавить("П00102М1307" + Формат(Инд, "ЧЦ=2;ЧВН="));
	КонецЦикла;
	ИменаГраф.Добавить("П00102М130800");
	ИменаГраф.Добавить("П00102М130900");
	ИменаГраф.Добавить("П00102М131000");
	ИменаГраф.Добавить("П00102М131010");
	ИменаГраф.Добавить("П00102М131020");
	ИменаГраф.Добавить("П00102М131030");
	ИменаГраф.Добавить("П00102М131040");
	ИменаГраф.Добавить("П00102М131050");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00103М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00103М100703");
	ИменаГраф.Добавить("П00103М101003");
	ИменаГраф.Добавить("П00103М102003");
	ИменаГраф.Добавить("П00103М103003");
	ИменаГраф.Добавить("П00103М104003");
	ИменаГраф.Добавить("П00103М105003");
	ИменаГраф.Добавить("П00103М106003");
	ИменаГраф.Добавить("П00103М107003");
	ИменаГраф.Добавить("П00103М108003");
	ИменаГраф.Добавить("П00103М109003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП3М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00104М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00104М101003");
	ИменаГраф.Добавить("П00104М101103");
	ИменаГраф.Добавить("П00104М101203");
	ИменаГраф.Добавить("П00104М101303");
	ИменаГраф.Добавить("П00104М101403");
	ИменаГраф.Добавить("П00104М101503");
	ИменаГраф.Добавить("П00104М101603");
	ИменаГраф.Добавить("П00104М101703");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП4М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00106М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00106М100703");
	ИменаГраф.Добавить("П00106М110003");
	ИменаГраф.Добавить("П00106М120003");
	ИменаГраф.Добавить("П00106М130003");
	ИменаГраф.Добавить("П00106М140003");
	ИменаГраф.Добавить("П00106М150003");
	ИменаГраф.Добавить("П00106М160003");
	ИменаГраф.Добавить("П00106М165003");
	ИменаГраф.Добавить("П00106М170003");
	ИменаГраф.Добавить("П00106М180003");
	Для Инд = 1 По 9 Цикл
		// Строки с "101" по "109" и с "701" по "709".
		ИменаГраф.Добавить("П00106М110" + Инд + "01");
		ИменаГраф.Добавить("П00106М110" + Инд + "03");
		ИменаГраф.Добавить("П00106М170" + Инд + "01");
		ИменаГраф.Добавить("П00106М170" + Инд + "03");
	КонецЦикла;
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП6М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР2М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР2М2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Приложение1");
	ИменаПодчиненныхРазделов.Добавить("Приложение2");
	ИменаПодчиненныхРазделов.Добавить("Приложение3");
	ИменаПодчиненныхРазделов.Добавить("Приложение4");
	ИменаПодчиненныхРазделов.Добавить("Приложение5");
	ИменаПодчиненныхРазделов.Добавить("Приложение6");
	ИменаПодчиненныхРазделов.Добавить("Приложение7");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Приложение 1");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Приложение 2");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП3М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Приложение 3");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение3", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП4М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Приложение 4");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение4", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Приложение 5");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение5", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП6М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Приложение 6");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение6", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Приложение 7");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение7", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2019Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М101000", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	//Раздел 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00002М103003", 3, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснованияНалогообложения"]);
	
	//Приложение 1 к разделу 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00101М105503", 1, ,
	"Выбор кода источника цены на природный газ", КоллекцияСписковВыбора["КодыИсточникаЦеныНаПриродныйГаз"]);
	
	//Приложение 4 к разделу 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00104М101003", 3, ,
	"Выбор кода основания восстановления фактических расходов",
	КоллекцияСписковВыбора["КодыОснованияВосстановленияФактическихРасходов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00104М101203", 1, ,
	"Выбор признака номера", КоллекцияСписковВыбора["ПризнакиНомера"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	
	МесяцОкончанияПериода = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если МесяцОкончанияПериода = 3 Тогда
		КодПериода = ?(ЗаполненКодФормыРеорганизации, "51", "21");
	ИначеЕсли МесяцОкончанияПериода = 6 Тогда
		КодПериода = ?(ЗаполненКодФормыРеорганизации, "52", "31");
	ИначеЕсли МесяцОкончанияПериода = 9 Тогда
		КодПериода = ?(ЗаполненКодФормыРеорганизации, "53", "33");
	ИначеЕсли МесяцОкончанияПериода = 12 Тогда
		КодПериода = ?(ЗаполненКодФормыРеорганизации, "90", "34");
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = КодПериода;
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение
	= Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	Если СписокСохранения.Свойство("ОкружениеСохранения") Тогда
		
		ВозможныеИменаРазделовОтчета = СтрРазделить("Титульный,Раздел1,Раздел2", ",");
		КолСтрокВДеревеНастройкиСтраниц = ДеревоНастройкиСтраниц.Строки.Количество();
		Для Ном = 1 По КолСтрокВДеревеНастройкиСтраниц Цикл
			ОбрИнд = КолСтрокВДеревеНастройкиСтраниц - Ном;
			Если ВозможныеИменаРазделовОтчета.Найти(СокрЛП(ДеревоНастройкиСтраниц.Строки[ОбрИнд].ИмяСтраницы)) = Неопределено Тогда
				ДеревоНастройкиСтраниц.Строки.Удалить(ДеревоНастройкиСтраниц.Строки[ОбрИнд]);
			ИначеЕсли СокрЛП(ДеревоНастройкиСтраниц.Строки[ОбрИнд].ИмяСтраницы) = "Раздел2" Тогда
				ДеревоНастройкиСтраниц.Строки[ОбрИнд].Представление = "Раздел 2";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И ЭлементСтруктуры.Ключ = "Раздел2"
				И Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
				Для каждого ВеткаР2 Из ЭлементСтруктуры.Значение.Строки Цикл
					Если ВеткаР2.Данные.Свойство("П000020005403") Тогда
						ВеткаР2.Данные.Вставить("П000020005403", 0);
					КонецЕсли;
					Если ВеткаР2.Данные.Свойство("П000020005603") Тогда
						ВеткаР2.Данные.Вставить("П000020005603", 0);
					КонецЕсли;
					Если ВеткаР2.Данные.Свойство("П000020006403") Тогда
						ВеткаР2.Данные.Вставить("П000020006403", 0);
					КонецЕсли;
					Если ВеткаР2.Данные.Свойство("П000020007403") Тогда
						ВеткаР2.Данные.Вставить("П000020007403", 0);
					КонецЕсли;
					Если ВеткаР2.Данные.Свойство("П000020014003") Тогда
						ВеткаР2.Данные.Вставить("П000020014003", 0);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = 
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "ПризнакВключения" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Область.Значение = ?(ЗначениеЗаполнено(Область.Значение), "", "V");
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00104М101603")
		
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050010101")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050010201")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050010301")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050010401")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050010501")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050010601")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050010701")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050010801")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050010901")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050011001")
		
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050030101")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050030201")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050030301")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050030401")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050030501")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050030601")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050030701")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050030801")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050030901")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001050031001")
		
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М100703")
		
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М110101")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М110201")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М110301")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М110401")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М110501")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М110601")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М110701")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М110801")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М110901")
		
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М170101")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М170201")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М170301")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М170401")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М170501")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М170601")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М170701")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М170801")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М170901") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокГодов = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПервоеЧисло", Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		СтруктураПараметров.Вставить("ТипСтрока", Истина);
		Если СтрНачинаетсяС(Область.Имя, "П00104М101603") ИЛИ СтрНачинаетсяС(Область.Имя, "П00106М100703") Тогда
			СтруктураПараметров.Вставить("ПоследнееЧисло", 1900);
		Иначе
			СтруктураПараметров.Вставить("ПоследнееЧисло", 2007);
		КонецЕсли;
		
		СписокГодов.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		СписокГодов.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(Оп, СписокГодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокГодов.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00101М100703")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М100007")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00103М100703") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокМесяцев = Новый СписокЗначений;
		СписокМесяцев.ЗагрузитьЗначения(ВозможныеМесяцыОтчетногоПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		
		Для каждого Эл Из СписокМесяцев Цикл
			Если Эл.Значение = "01" Тогда
				Эл.Представление = НСтр("ru='01 - январь'");
			ИначеЕсли Эл.Значение = "02" Тогда
				Эл.Представление = НСтр("ru='02 - февраль'");
			ИначеЕсли Эл.Значение = "03" Тогда
				Эл.Представление = НСтр("ru='03 - март'");
			ИначеЕсли Эл.Значение = "04" Тогда
				Эл.Представление = НСтр("ru='04 - апрель'");
			ИначеЕсли Эл.Значение = "05" Тогда
				Эл.Представление = НСтр("ru='05 - май'");
			ИначеЕсли Эл.Значение = "06" Тогда
				Эл.Представление = НСтр("ru='06 - июнь'");
			ИначеЕсли Эл.Значение = "07" Тогда
				Эл.Представление = НСтр("ru='07 - июль'");
			ИначеЕсли Эл.Значение = "08" Тогда
				Эл.Представление = НСтр("ru='08 - август'");
			ИначеЕсли Эл.Значение = "09" Тогда
				Эл.Представление = НСтр("ru='09 - сентябрь'");
			ИначеЕсли Эл.Значение = "10" Тогда
				Эл.Представление = НСтр("ru='10 - октябрь'");
			ИначеЕсли Эл.Значение = "11" Тогда
				Эл.Представление = НСтр("ru='11 - ноябрь'");
			ИначеЕсли Эл.Значение = "12" Тогда
				Эл.Представление = НСтр("ru='12 - декабрь'");
			КонецЕсли;
		КонецЦикла;
		
		СписокМесяцев.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(Оп, СписокМесяцев, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокМесяцев.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00101М108003") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКоэффициентов = Новый СписокЗначений;
		СписокКоэффициентов.Добавить(0, "Пустое значение");
		СписокКоэффициентов.Добавить(0.95, "0,95");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(Оп, СписокКоэффициентов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКоэффициентов.НайтиПоЗначению(Область.Значение));
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М202000")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00002М217003") Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М101000") Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код бюджетной классификации должен состоять из 20 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00104М101103") Тогда
		ОКОФ = СокрЛП(ЗначПоказателя);
		ОКОФ = СтрЗаменить(ОКОФ, " ", "");
		ШаблоныОКОФ = Неопределено;
		Если ОКОФСоответствуетШаблонам(ОКОФ, ШаблоныОКОФ) Тогда
			Область.Значение = ОКОФ;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			СтрокаСШаблонамиОКОФ = """" + СтрЗаменить(СтрСоединить(ШаблоныОКОФ, """, """), "9", "Х") + """";
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Введен некорректный код ОКОФ. Допустимы значения, соответствующие шаблонам: %1 (Х - любая цифра). Значение очищено'"),
			СтрокаСШаблонамиОКОФ);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ИмяПарногоПоказателя = "";
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М203000") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00001М204000") Тогда
		ИмяПарногоПоказателя
		= ?(Лев(ИмяПоказателя, 10) = "П00001М203", "П00001М204", "П00001М203") + Сред(ИмяПоказателя, 11);
	ИначеЕсли ИмяПоказателя = "П000020009003" ИЛИ ИмяПоказателя = "П000020009503" Тогда
		ИмяПарногоПоказателя = ?(ИмяПоказателя = "П000020009003", "П000020009503", "П000020009003");
	ИначеЕсли ИмяПоказателя = "П000020015003" ИЛИ ИмяПоказателя = "П000020016003" Тогда
		ИмяПарногоПоказателя = ?(ИмяПоказателя = "П000020015003", "П000020016003", "П000020015003");
	ИначеЕсли ИмяПоказателя = "П001050020003" ИЛИ ИмяПоказателя = "П001050025003" Тогда
		ИмяПарногоПоказателя = ?(ИмяПоказателя = "П001050020003", "П001050025003", "П001050020003");
	ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П00106М160003") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00106М165003") Тогда
		ИмяПарногоПоказателя
		= ?(Лев(ИмяПоказателя, 10) = "П00106М160", "П00106М165", "П00106М160") + Сред(ИмяПоказателя, 11);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяПарногоПоказателя) Тогда
		ОблПарногоПоказателя = ТабличныйДокумент.Области.Найти(ИмяПарногоПоказателя);
		Если ОблПарногоПоказателя <> Неопределено Тогда
			ЗначПарногоПоказателя = ОблПарногоПоказателя.Значение;
			Если ЗначениеЗаполнено(ЗначПоказателя) И ЗначениеЗаполнено(ЗначПарногоПоказателя) Тогда
				ОблПарногоПоказателя.Очистить();
				Стр1 = Сред(ИмяПоказателя, 9, 3);
				Стр2 = Сред(ИмяПарногоПоказателя, 9, 3);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Не допускается одновременное заполнение строки %1 и строки %2. Значение в строке %2 очищено'"), Стр1, Стр2);
				Сообщение.Сообщить();
				Мофицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + ". Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		Если ИмяПоказателя = "П000020005403" ИЛИ ИмяПоказателя = "П000020005503" ИЛИ ИмяПоказателя = "П000020005603"
			ИЛИ ИмяПоказателя = "П000020007403" ИЛИ ИмяПоказателя = "ПризнакВключения" Тогда
			
			СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
			СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ИмяРаздела);
			Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
			
		Иначе
			РасчетНаКлиенте(ИмяРаздела, Область.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОКОФСоответствуетШаблонам(Знач ОКОФ, ШаблоныОКОФ)
	
	ШаблоныОКОФ = Новый Массив;
	ШаблоныОКОФ.Добавить("999.9");
	ШаблоныОКОФ.Добавить("999.99");
	ШаблоныОКОФ.Добавить("999.99.9");
	ШаблоныОКОФ.Добавить("999.99.99");
	ШаблоныОКОФ.Добавить("999.99.99.9");
	ШаблоныОКОФ.Добавить("999.99.99.99");
	ШаблоныОКОФ.Добавить("999.99.99.99.9");
	ШаблоныОКОФ.Добавить("999.99.99.99.99");
	ШаблоныОКОФ.Добавить("999.99.99.99.999");
	
	Для Инд = 1 По СтрДлина(ОКОФ) Цикл
		ТекСимв = Сред(ОКОФ, Инд, 1);
		Если СтрНайти("0123456789", ТекСимв) > 0 Тогда
			ОКОФ = Лев(ОКОФ, Инд - 1) + "9" + Сред(ОКОФ, Инд + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОКОФ = "" ИЛИ ШаблоныОКОФ.Найти(ОКОФ) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМесяцИГодЗавершение(РезультатВыбора, ДополнительныйПараметр) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МесяцИГод = Формат(РезультатВыбора.КонецПериода, "ДФ=""ММ.гггг""");
	
	Если МесяцИГод <> ДополнительныйПараметр.Значение Тогда
		ДополнительныйПараметр.Значение = МесяцИГод;
	Иначе
		ДополнительныйПараметр.Значение = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныйПараметр) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныйПараметр.Значение Тогда
			ДополнительныйПараметр.Значение = ВыбЭлемент.Значение;
			Модифицированность = Истина;
			
			Если СтрНачинаетсяС(ДополнительныйПараметр.Имя, "П00101М108003") Тогда
				РасчетНаКлиенте("Приложение1", ДополнительныйПараметр.Имя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВозможныеМесяцыОтчетногоПериода(Знач ДатаКонцаПериодаОтчета)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоследнееЧисло", Месяц(ДатаКонцаПериодаОтчета));
	СтруктураПараметров.Вставить("ПервоеЧисло", СтруктураПараметров.ПоследнееЧисло - 2);
	СтруктураПараметров.Вставить("ДлинаСЛидирующимиНулями", 2);
	
	Возврат МассивЧиселЗаданныйИнтервалом(СтруктураПараметров);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивЧиселЗаданныйИнтервалом(СтруктураПараметров)
	
	МассивЧисел = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ПервоеЧисло    = Неопределено;
		ПоследнееЧисло = Неопределено;
		
		Если СтруктураПараметров.Свойство("ПервоеЧисло", ПервоеЧисло)
			И СтруктураПараметров.Свойство("ПоследнееЧисло", ПоследнееЧисло) Тогда
			
			Если ПервоеЧисло <= ПоследнееЧисло Тогда
				ПоУбыванию = Ложь;
			Иначе
				ПоУбыванию = Истина;
				ПромежуточноеЗначение = ПервоеЧисло;
				ПервоеЧисло = ПоследнееЧисло;
				ПоследнееЧисло = ПромежуточноеЗначение;
			КонецЕсли;
			
			ТипСтрока = Ложь;
			СтруктураПараметров.Свойство("ТипСтрока", ТипСтрока);
			ТипСтрока = ТипСтрока = Истина;
			
			ДлинаСЛидирующимиНулями = Неопределено;
			СтруктураПараметров.Свойство("ДлинаСЛидирующимиНулями", ДлинаСЛидирующимиНулями);
			Если ТипЗнч(ДлинаСЛидирующимиНулями) <> Тип("Число")
				ИЛИ ДлинаСЛидирующимиНулями = 0 Тогда
				ДлинаСЛидирующимиНулями = Неопределено;
			КонецЕсли;
			
			Для ТекущееЧисло = ПервоеЧисло По ПоследнееЧисло Цикл
				
				Если ДлинаСЛидирующимиНулями <> Неопределено Тогда
					СтрокаФормата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ЧЦ=%1;ЧГ=;ЧВН=", ДлинаСЛидирующимиНулями);
					ТекущееЗначение = Формат(ТекущееЧисло, СтрокаФормата);
				ИначеЕсли ТипСтрока Тогда
					ТекущееЗначение = Формат(ТекущееЧисло, "ЧГ=");
				Иначе
					ТекущееЗначение = ТекущееЧисло;
				КонецЕсли;
				
				Если ПоУбыванию Тогда
					МассивЧисел.Вставить(0, ТекущееЗначение);
				Иначе
					МассивЧисел.Добавить(ТекущееЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЧисел;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = Форма.ТабличныйДокумент.Области.НаимОрг;
		ОблКодФормыРеорг = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОблКодИННРеорг   = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(Форма.ТабличныйДокумент.Области.ПоМесту.Значение);
		
		РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
		
		ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
		
		Если ЗначениеЗаполнено(ЗначКодФормыРеорг) И ЗначКодФормыРеорг <> "0" Тогда
			
			Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение
				= Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Форма.ТабличныйДокумент.Области.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2"
		ИЛИ ИмяРаздела = "Приложение1"
		ИЛИ ИмяРаздела = "Приложение2"
		ИЛИ ИмяРаздела = "Приложение3"
		ИЛИ ИмяРаздела = "Приложение4"
		ИЛИ ИмяРаздела = "Приложение6" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		Если ИмяРаздела = "Раздел2" Тогда
			
			ОтчетЗаПервыйКвартал = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3;
			
			Если ОтчетЗаПервыйКвартал Тогда
				ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Область("П000020005403"));
				ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Область("П000020005603"));
				ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Область("П000020006403"));
				ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Область("П000020007403"));
				ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Область("П000020014003"));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение5"
		ИЛИ ИмяРаздела = "Приложение7" Тогда
		
		ВключатьРаздел = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Область("ПризнакВключения").Значение);
		
		Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
			
			Если СтрНачинаетсяС(Обл.Имя, "П0") И Обл.СодержитЗначение = Истина Тогда
				
				Если ВключатьРаздел Тогда
					РазрешитьВводДанныхВОбласть(Форма, Обл);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВключатьРаздел Тогда
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимРаздела, ВеткаРаздела = Неопределено)
	
	СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела);
	
	Если Модифицированность Тогда
		
		РасчетНаСервере();
		
		ОблУдалитьСтраницуЗначокТекст = Неопределено;
		ОблУдалитьСтраницуЗначокГиперссылка = Неопределено;
		ОблУдалитьСтраницуТекст = Неопределено;
		ОблУдалитьСтраницуГиперссылка = Неопределено;
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено Тогда
			ОблУдалитьСтраницуЗначокТекст = ОблУдалитьСтраницуЗначок.Текст;
			ОблУдалитьСтраницуЗначокГиперссылка = ОблУдалитьСтраницуЗначок.Гиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено Тогда
			ОблУдалитьСтраницуТекст = ОблУдалитьСтраницу.Текст;
			ОблУдалитьСтраницуГиперссылка = ОблУдалитьСтраницу.Гиперссылка;
		КонецЕсли;
		
		ВывестиДанныеВТабличныйДокумент(НаимРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено
			И ОблУдалитьСтраницуЗначокТекст <> Неопределено
			И ОблУдалитьСтраницуЗначокГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницуЗначок.Текст = ОблУдалитьСтраницуЗначокТекст;
			ОблУдалитьСтраницуЗначок.Гиперссылка = ОблУдалитьСтраницуЗначокГиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено
			И ОблУдалитьСтраницуТекст <> Неопределено
			И ОблУдалитьСтраницуГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницу.Текст = ОблУдалитьСтраницуТекст;
			ОблУдалитьСтраницу.Гиперссылка = ОблУдалитьСтраницуГиперссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Особая обработка показателя "Серия, номер и вид лицензии на пользование недрами".
		Если СтрНачинаетсяС(ИмяТекРаздела, "Приложение") Тогда
			НомерПриложения = Сред(ИмяТекРаздела, 11);
			ИмяПокСер = "П0010" + НомерПриложения + "0000503";
			ИмяПокНом = "П0010" + НомерПриложения + "0000504";
			ИмяПокВид = "П0010" + НомерПриложения + "0000505";
			ОблСер = ТабличныйДокумент.Области.Найти(ИмяПокСер);
			ОблНом = ТабличныйДокумент.Области.Найти(ИмяПокНом);
			ОблВид = ТабличныйДокумент.Области.Найти(ИмяПокВид);
			Если ОблСер <> Неопределено И ОблНом <> Неопределено И ОблВид <> Неопределено Тогда
				РодительДанные = ТекВетка.Родитель.Родитель.Данные;
				ОблСер.Текст = СокрЛП(РодительДанные["П000020001003"]);
				ОблНом.Текст = СокрЛП(РодительДанные["П000020001004"]);
				ОблВид.Текст = СокрЛП(РодительДанные["П000020001005"]);
			КонецЕсли;
		КонецЕсли;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
	Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
	НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		
		Модифицированность = Истина;
		
		СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
		СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	Модифицированность = Истина;
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока, Индекс, ИндексСтр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Форма.ТабличныйДокумент.Области.Найти("П000020005003").Значение
				= Форма.ТабличныйДокумент.Области.Найти("П000020005103").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020005203").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020005303").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020005403").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020005503").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020005603").Значение;
				
				Форма.ТабличныйДокумент.Области.Найти("П000020006003").Значение
				= Форма.ТабличныйДокумент.Области.Найти("П000020006103").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020006203").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020006303").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020006403").Значение;
				
				Форма.ТабличныйДокумент.Области.Найти("П000020007003").Значение
				= Форма.ТабличныйДокумент.Области.Найти("П000020007103").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020007203").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020007303").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020007403").Значение;
				
				Форма.ТабличныйДокумент.Области.Найти("П000020008003").Значение
				= Форма.ТабличныйДокумент.Области.Найти("П000020008103").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020008203").Значение;
				
				ДоходУбыток
				= Форма.ТабличныйДокумент.Области.Найти("П000020005003").Значение
				- Форма.ТабличныйДокумент.Области.Найти("П000020006003").Значение
				- Форма.ТабличныйДокумент.Области.Найти("П000020007003").Значение
				- Форма.ТабличныйДокумент.Области.Найти("П000020008403").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020008003").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020008303").Значение
				+ Форма.ТабличныйДокумент.Области.Найти("П000020008503").Значение;
				Форма.ТабличныйДокумент.Области.Найти("П000020009003").Значение = Макс(ДоходУбыток, 0);
				Форма.ТабличныйДокумент.Области.Найти("П000020009503").Значение = - Мин(ДоходУбыток, 0);
				
				Форма.ТабличныйДокумент.Области.Найти("П000020011003").Значение
				= Макс(0, Форма.ТабличныйДокумент.Области.Найти("П000020009003").Значение
				- Форма.ТабличныйДокумент.Области.Найти("П000020010003").Значение);
				
				Форма.ТабличныйДокумент.Области.Найти("П000020013003").Значение
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма
				, Форма.ТабличныйДокумент.Области.Найти("П000020011003").Значение
				* Форма.ТабличныйДокумент.Области.Найти("П000020012003").Значение / 100);
				
				ИсчислИлиМинНалог = Макс(
				Форма.ТабличныйДокумент.Области.Найти("П000020013003").Значение,
				Форма.ТабличныйДокумент.Области.Найти("П000020013503").Значение);
				НалогКДоплатеИлиУменьшению = ИсчислИлиМинНалог - Форма.ТабличныйДокумент.Области.Найти("П000020014003").Значение;
				Форма.ТабличныйДокумент.Области.Найти("П000020015003").Значение = Макс(НалогКДоплатеИлиУменьшению, 0);
				Форма.ТабличныйДокумент.Области.Найти("П000020016003").Значение = - Мин(НалогКДоплатеИлиУменьшению, 0);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00101М101003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Обл.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма
					, Форма.ТабличныйДокумент.Области.Найти("П00101М102003_" + ИндексСтр).Значение
					* Форма.ТабличныйДокумент.Области.Найти("П00101М103003_" + ИндексСтр).Значение
					* Форма.ТабличныйДокумент.Области.Найти("П00101М104003_" + ИндексСтр).Значение
					* Форма.ТабличныйДокумент.Области.Найти("П00101М105003_" + ИндексСтр).Значение
					+ Форма.ТабличныйДокумент.Области.Найти("П00101М106003_" + ИндексСтр).Значение
					* Форма.ТабличныйДокумент.Области.Найти("П00101М107003_" + ИндексСтр).Значение
					+ Форма.ТабличныйДокумент.Области.Найти("П00101М108003_" + ИндексСтр).Значение
					* Форма.ТабличныйДокумент.Области.Найти("П00101М109003_" + ИндексСтр).Значение
					* Форма.ТабличныйДокумент.Области.Найти("П00101М110003_" + ИндексСтр).Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00101М101003_" + ИндексСтр);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00102М110000_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					
					Стр30700 = 0;
					Для Инд = 1 По 33 Цикл
						Стр30700 = Стр30700 + Форма.ТабличныйДокумент.Области.Найти(
						"П00102М1307" + Формат(Инд, "ЧЦ=2;ЧВН=") + "_" + ИндексСтр).Значение;
					КонецЦикла;
					Форма.ТабличныйДокумент.Области.Найти("П00102М130700_" + ИндексСтр).Значение = Стр30700;
					
					Стр30000 = 0;
					Для Инд = 1 По 10 Цикл
						Стр30000 = Стр30000 + Форма.ТабличныйДокумент.Области.Найти(
						"П00102М13" + Формат(Инд, "ЧЦ=2;ЧВН=") + "00_" + ИндексСтр).Значение;
					КонецЦикла;
					Форма.ТабличныйДокумент.Области.Найти("П00102М130000_" + ИндексСтр).Значение = Стр30000;
					
					Обл.Значение
					= Форма.ТабличныйДокумент.Области.Найти("П00102М120000_" + ИндексСтр).Значение
					+ Форма.ТабличныйДокумент.Области.Найти("П00102М130000_" + ИндексСтр).Значение;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00102М110000_" + ИндексСтр);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00103М101003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					
					Форма.ТабличныйДокумент.Области.Найти("П00103М109003_" + ИндексСтр).Значение
					= Форма.ТабличныйДокумент.Области.Найти("П00103М105003_" + ИндексСтр).Значение
					+ Форма.ТабличныйДокумент.Области.Найти("П00103М106003_" + ИндексСтр).Значение;
					
					Форма.ТабличныйДокумент.Области.Найти("П00103М107003_" + ИндексСтр).Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма
					, Форма.ТабличныйДокумент.Области.Найти("П00103М108003_" + ИндексСтр).Значение
					* Форма.ТабличныйДокумент.Области.Найти("П00103М109003_" + ИндексСтр).Значение);
					
					Форма.ТабличныйДокумент.Области.Найти("П00103М102003_" + ИндексСтр).Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма
					, Форма.ТабличныйДокумент.Области.Найти("П00103М103003_" + ИндексСтр).Значение
					* Форма.ТабличныйДокумент.Области.Найти("П00103М104003_" + ИндексСтр).Значение
					* Форма.ТабличныйДокумент.Области.Найти("П00103М109003_" + ИндексСтр).Значение);
					
					Обл.Значение
					= Форма.ТабличныйДокумент.Области.Найти("П00103М102003_" + ИндексСтр).Значение
					+ Форма.ТабличныйДокумент.Области.Найти("П00103М107003_" + ИндексСтр).Значение;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00103М101003_" + ИндексСтр);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение4" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Стр020 = 0;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00104М101703_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					
					Стр020 = Стр020 + Обл.Значение;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00104М101703_" + ИндексСтр);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.Найти("П001040002003").Значение = Стр020;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение5" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Стр100 = 0;
				Для Инд = 1 По 10 Цикл
					Стр100 = Стр100 + Форма.ТабличныйДокумент.Области.Найти("П00105001" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03").Значение;
				КонецЦикла;
				Форма.ТабличныйДокумент.Области.Найти("П001050010003").Значение = Стр100;
				
				Стр300 = 0;
				Для Инд = 1 По 10 Цикл
					Стр300 = Стр300 + Форма.ТабличныйДокумент.Области.Найти("П00105003" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03").Значение;
				КонецЦикла;
				Форма.ТабличныйДокумент.Области.Найти("П001050030003").Значение = Стр300;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение6" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00106М110003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					
					Стр100 = 0;
					Для Инд = 1 По 9 Цикл
						Стр100 = Стр100 + Форма.ТабличныйДокумент.Области.Найти(
						"П00106М11" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03_" + ИндексСтр).Значение;
					КонецЦикла;
					Обл.Значение = Стр100;
					
					ДоходУбыток
					= Форма.ТабличныйДокумент.Области.Найти("П00106М120003_" + ИндексСтр).Значение
					- Форма.ТабличныйДокумент.Области.Найти("П00106М130003_" + ИндексСтр).Значение
					- Форма.ТабличныйДокумент.Области.Найти("П00106М140003_" + ИндексСтр).Значение
					+ Форма.ТабличныйДокумент.Области.Найти("П00106М150003_" + ИндексСтр).Значение;
					Форма.ТабличныйДокумент.Области.Найти("П00106М160003_" + ИндексСтр).Значение = Макс(ДоходУбыток, 0);
					Форма.ТабличныйДокумент.Области.Найти("П00106М165003_" + ИндексСтр).Значение = - Мин(ДоходУбыток, 0);
					
					Стр700 = 0;
					Для Инд = 1 По 9 Цикл
						Стр700 = Стр700 + Форма.ТабличныйДокумент.Области.Найти(
						"П00106М17" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03_" + ИндексСтр).Значение;
					КонецЦикла;
					Форма.ТабличныйДокумент.Области.Найти("П00106М170003_" + ИндексСтр).Значение = Стр700;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00106М110003_" + ИндексСтр);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение7" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Стр500 = 0;
				Для Инд = 1 По 12 Цикл
					Стр500 = Стр500 + Форма.ТабличныйДокумент.Области.Найти("П00107005" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03").Значение;
				КонецЦикла;
				Форма.ТабличныйДокумент.Области.Найти("П001070050003").Значение = Стр500;
				
				Форма.ТабличныйДокумент.Области.Найти("П001070040003").Значение
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма
				, Форма.ТабличныйДокумент.Области.Найти("П001070050003").Значение
				* Форма.ТабличныйДокумент.Области.Найти("П001070060003").Значение);
				
				Форма.ТабличныйДокумент.Области.Найти("П001070070003").Значение
				= Макс(0, Форма.ТабличныйДокумент.Области.Найти("П001070010003").Значение
				- Форма.ТабличныйДокумент.Области.Найти("П001070020003").Значение
				- Форма.ТабличныйДокумент.Области.Найти("П001070030003").Значение
				- Форма.ТабличныйДокумент.Области.Найти("П001070040003").Значение);
				
				Форма.ТабличныйДокумент.Области.Найти("П001070090003").Значение
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма
				, Форма.ТабличныйДокумент.Области.Найти("П001070070003").Значение
				* Форма.ТабличныйДокумент.Области.Найти("П001070080003").Значение / 100);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Приложение6");
		Расчет(Форма, "Приложение4");
		Расчет(Форма, "Приложение3");
		Расчет(Форма, "Приложение2");
		Расчет(Форма, "Приложение1");
		Расчет(Форма, "Раздел2");
		Расчет(Форма, "Приложение7");
		Расчет(Форма, "Приложение5");
		Расчет(Форма, "Раздел2");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	ВозможныеМесяцыОтчетногоПериода
	= ВозможныеМесяцыОтчетногоПериода(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Ветка.Данные.Вставить("П000020005003",
			  Ветка.Данные["П000020005103"] + Ветка.Данные["П000020005203"] + Ветка.Данные["П000020005303"]
			+ Ветка.Данные["П000020005403"] + Ветка.Данные["П000020005503"] + Ветка.Данные["П000020005603"]);
			
			Ветка.Данные.Вставить("П000020006003",
			  Ветка.Данные["П000020006103"] + Ветка.Данные["П000020006203"] + Ветка.Данные["П000020006303"]
			+ Ветка.Данные["П000020006403"]);
			
			Ветка.Данные.Вставить("П000020007003",
			  Ветка.Данные["П000020007103"] + Ветка.Данные["П000020007203"] + Ветка.Данные["П000020007303"]
			+ Ветка.Данные["П000020007403"]);
			
			Ветка.Данные.Вставить("П000020008003", Ветка.Данные["П000020008103"] + Ветка.Данные["П000020008203"]);
			
			ДоходУбыток = Ветка.Данные["П000020005003"]
			- Ветка.Данные["П000020006003"] - Ветка.Данные["П000020007003"] - Ветка.Данные["П000020008403"]
			+ Ветка.Данные["П000020008003"] + Ветка.Данные["П000020008303"] + Ветка.Данные["П000020008503"];
			Ветка.Данные.Вставить("П000020009003", Макс(ДоходУбыток, 0));
			Ветка.Данные.Вставить("П000020009503", - Мин(ДоходУбыток, 0));
			
			Ветка.Данные.Вставить("П000020011003", Макс(0, Ветка.Данные["П000020009003"] - Ветка.Данные["П000020010003"]));
			
			Ветка.Данные.Вставить("П000020013003", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
			Ветка.Данные["П000020011003"] * Ветка.Данные["П000020012003"] / 100));
			
			ИсчислИлиМинНалог = Макс(Ветка.Данные["П000020013003"], Ветка.Данные["П000020013503"]);
			НалогКДоплатеИлиУменьшению = ИсчислИлиМинНалог - Ветка.Данные["П000020014003"];
			Ветка.Данные.Вставить("П000020015003", Макс(НалогКДоплатеИлиУменьшению, 0));
			Ветка.Данные.Вставить("П000020016003", - Мин(НалогКДоплатеИлиУменьшению, 0));
			
			// Поставка данных в приложение 5 по условию.
			ВеткаПриложения = Ветка.Строки[4].Строки[0];
			Если ЗначениеЗаполнено(ВеткаПриложения.Данные["ПризнакВключения"]) Тогда
				ВеткаПриложения.Данные.Вставить("П001050020003", Ветка.Данные["П000020009003"]);
				ВеткаПриложения.Данные.Вставить("П001050025003", Ветка.Данные["П000020009503"]);
			КонецЕсли;
			
			// Поставка данных в приложение 7 по условию.
			ВеткаПриложения = Ветка.Строки[6].Строки[0];
			Если ЗначениеЗаполнено(ВеткаПриложения.Данные["ПризнакВключения"]) Тогда
				ВеткаПриложения.Данные.Вставить("П001070010003", Ветка.Данные["П000020005003"]);
				ВеткаПриложения.Данные.Вставить("П001070020003", Ветка.Данные["П000020007003"]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппыП1М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ВеткаПриложения = Ветка.Строки[0].Строки[0];
			
			ДеревоМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Стр051Разд2 = 0;
			Стр052Разд2 = 0;
			Стр053Разд2 = 0;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				СтрокаМнЧ.Данные.Вставить("П00101М101003", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма
				, СтрокаМнЧ.Данные["П00101М102003"] * СтрокаМнЧ.Данные["П00101М103003"] * СтрокаМнЧ.Данные["П00101М104003"]
				* СтрокаМнЧ.Данные["П00101М105003"] + СтрокаМнЧ.Данные["П00101М106003"] * СтрокаМнЧ.Данные["П00101М107003"]
				+ СтрокаМнЧ.Данные["П00101М108003"] * СтрокаМнЧ.Данные["П00101М109003"] * СтрокаМнЧ.Данные["П00101М110003"]));
				
				МесяцОтчПериода = СокрЛП(СтрокаМнЧ.Данные["П00101М100703"]);
				Если МесяцОтчПериода = ВозможныеМесяцыОтчетногоПериода[0] Тогда
					Стр051Разд2 = Стр051Разд2 + СтрокаМнЧ.Данные["П00101М101003"];
				ИначеЕсли МесяцОтчПериода = ВозможныеМесяцыОтчетногоПериода[1] Тогда
					Стр052Разд2 = Стр052Разд2 + СтрокаМнЧ.Данные["П00101М101003"];
				ИначеЕсли МесяцОтчПериода = ВозможныеМесяцыОтчетногоПериода[2] Тогда
					Стр053Разд2 = Стр053Разд2 + СтрокаМнЧ.Данные["П00101М101003"];
				КонецЕсли;
				
			КонецЦикла;
			
			// Поставка данных в раздел 2.
			Ветка.Данные.Вставить("П000020005103", Стр051Разд2);
			Ветка.Данные.Вставить("П000020005203", Стр052Разд2);
			Ветка.Данные.Вставить("П000020005303", Стр053Разд2);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ВеткаПриложения = Ветка.Строки[1].Строки[0];
			
			ДеревоМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Стр061Разд2 = 0;
			Стр062Разд2 = 0;
			Стр063Разд2 = 0;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				Стр30700 = 0;
				Для Инд = 1 По 33 Цикл
					Стр30700 = Стр30700 + СтрокаМнЧ.Данные["П00102М1307" + Формат(Инд, "ЧЦ=2;ЧВН=")];
				КонецЦикла;
				СтрокаМнЧ.Данные.Вставить("П00102М130700", Стр30700);
				
				Стр30000 = 0;
				Для Инд = 1 По 10 Цикл
					Стр30000 = Стр30000 + СтрокаМнЧ.Данные["П00102М13" + Формат(Инд, "ЧЦ=2;ЧВН=") + "00"];
				КонецЦикла;
				СтрокаМнЧ.Данные.Вставить("П00102М130000", Стр30000);
				
				СтрокаМнЧ.Данные.Вставить("П00102М110000", СтрокаМнЧ.Данные["П00102М120000"] + СтрокаМнЧ.Данные["П00102М130000"]);
				
				МесяцОтчПериода = СокрЛП(СтрокаМнЧ.Данные["П00102М100007"]);
				Если МесяцОтчПериода = ВозможныеМесяцыОтчетногоПериода[0] Тогда
					Стр061Разд2 = Стр061Разд2 + СтрокаМнЧ.Данные["П00102М110000"];
				ИначеЕсли МесяцОтчПериода = ВозможныеМесяцыОтчетногоПериода[1] Тогда
					Стр062Разд2 = Стр062Разд2 + СтрокаМнЧ.Данные["П00102М110000"];
				ИначеЕсли МесяцОтчПериода = ВозможныеМесяцыОтчетногоПериода[2] Тогда
					Стр063Разд2 = Стр063Разд2 + СтрокаМнЧ.Данные["П00102М110000"];
				КонецЕсли;
				
			КонецЦикла;
			
			// Поставка данных в раздел 2.
			Ветка.Данные.Вставить("П000020006103", Стр061Разд2);
			Ветка.Данные.Вставить("П000020006203", Стр062Разд2);
			Ветка.Данные.Вставить("П000020006303", Стр063Разд2);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппыП3М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ВеткаПриложения = Ветка.Строки[2].Строки[0];
			
			ДеревоМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Стр071Разд2 = 0;
			Стр072Разд2 = 0;
			Стр073Разд2 = 0;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				СтрокаМнЧ.Данные.Вставить("П00103М109003", СтрокаМнЧ.Данные["П00103М105003"] + СтрокаМнЧ.Данные["П00103М106003"]);
				
				СтрокаМнЧ.Данные.Вставить("П00103М107003", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
				СтрокаМнЧ.Данные["П00103М108003"] * СтрокаМнЧ.Данные["П00103М109003"]));
				
				СтрокаМнЧ.Данные.Вставить("П00103М102003", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
				СтрокаМнЧ.Данные["П00103М103003"] * СтрокаМнЧ.Данные["П00103М104003"] * СтрокаМнЧ.Данные["П00103М109003"]));
				
				СтрокаМнЧ.Данные.Вставить("П00103М101003", СтрокаМнЧ.Данные["П00103М102003"] + СтрокаМнЧ.Данные["П00103М107003"]);
				
				МесяцОтчПериода = СокрЛП(СтрокаМнЧ.Данные["П00103М100703"]);
				Если МесяцОтчПериода = ВозможныеМесяцыОтчетногоПериода[0] Тогда
					Стр071Разд2 = Стр071Разд2 + СтрокаМнЧ.Данные["П00103М101003"];
				ИначеЕсли МесяцОтчПериода = ВозможныеМесяцыОтчетногоПериода[1] Тогда
					Стр072Разд2 = Стр072Разд2 + СтрокаМнЧ.Данные["П00103М101003"];
				ИначеЕсли МесяцОтчПериода = ВозможныеМесяцыОтчетногоПериода[2] Тогда
					Стр073Разд2 = Стр073Разд2 + СтрокаМнЧ.Данные["П00103М101003"];
				КонецЕсли;
				
			КонецЦикла;
			
			// Поставка данных в раздел 2.
			Ветка.Данные.Вставить("П000020007103", Стр071Разд2);
			Ветка.Данные.Вставить("П000020007203", Стр072Разд2);
			Ветка.Данные.Вставить("П000020007303", Стр073Разд2);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение4" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппыП4М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ВеткаПриложения = Ветка.Строки[3].Строки[0];
			
			ДеревоМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Стр020 = 0;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				Стр020 = Стр020 + СтрокаМнЧ.Данные["П00104М101703"];
			КонецЦикла;
			ВеткаПриложения.Данные.Вставить("П001040002003", Стр020);
			
			// Поставка данных в раздел 2.
			Ветка.Данные.Вставить("П000020008103", Стр020);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение5" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ВеткаПриложения = Ветка.Строки[4].Строки[0];
			
			Стр100 = 0;
			Для Инд = 1 По 10 Цикл
				Стр100 = Стр100 + ВеткаПриложения.Данные["П00105001" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"];
			КонецЦикла;
			ВеткаПриложения.Данные.Вставить("П001050010003", Стр100);
			
			Стр300 = 0;
			Для Инд = 1 По 10 Цикл
				Стр300 = Стр300 + ВеткаПриложения.Данные["П00105003" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"];
			КонецЦикла;
			ВеткаПриложения.Данные.Вставить("П001050030003", Стр300);
			
			// Поставка данных в раздел 2.
			Ветка.Данные.Вставить("П000020010003", Стр300);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение6" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппыП6М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ВеткаПриложения = Ветка.Строки[5].Строки[0];
			
			ДеревоМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				Стр100 = 0;
				Для Инд = 1 По 9 Цикл
					Стр100 = Стр100 + СтрокаМнЧ.Данные["П00106М11" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"];
				КонецЦикла;
				СтрокаМнЧ.Данные.Вставить("П00106М110003", Стр100);
				
				ДоходУбыток
				= СтрокаМнЧ.Данные["П00106М120003"] - СтрокаМнЧ.Данные["П00106М130003"]
				- СтрокаМнЧ.Данные["П00106М140003"] + СтрокаМнЧ.Данные["П00106М150003"];
				СтрокаМнЧ.Данные.Вставить("П00106М160003", Макс(ДоходУбыток, 0));
				СтрокаМнЧ.Данные.Вставить("П00106М165003", - Мин(ДоходУбыток, 0));
				
				Стр700 = 0;
				Для Инд = 1 По 9 Цикл
					Стр700 = Стр700 + СтрокаМнЧ.Данные["П00106М17" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"];
				КонецЦикла;
				СтрокаМнЧ.Данные.Вставить("П00106М170003", Стр700);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение7" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ВеткаПриложения = Ветка.Строки[6].Строки[0];
			
			Стр500 = 0;
			Для Инд = 1 По 12 Цикл
				Стр500 = Стр500 + ВеткаПриложения.Данные["П00107005" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"];
			КонецЦикла;
			ВеткаПриложения.Данные.Вставить("П001070050003", Стр500);
			
			ВеткаПриложения.Данные.Вставить("П001070040003", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаПриложения.Данные["П001070050003"] * ВеткаПриложения.Данные["П001070060003"]));
			
			ВеткаПриложения.Данные.Вставить("П001070070003", Макс(0, ВеткаПриложения.Данные["П001070010003"]
			- ВеткаПриложения.Данные["П001070020003"] - ВеткаПриложения.Данные["П001070030003"]
			- ВеткаПриложения.Данные["П001070040003"]));
			
			ВеткаПриложения.Данные.Вставить("П001070090003", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаПриложения.Данные["П001070070003"] * ВеткаПриложения.Данные["П001070080003"] / 100));
			
			// Поставка данных в раздел 2.
			Ветка.Данные.Вставить("П000020013503", ВеткаПриложения.Данные["П001070090003"]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	Структ = Новый Структура;
	Структ.Вставить("П001070010003");
	Структ.Вставить("П001070020003");
	Структ.Вставить("П001070040003");
	Структ.Вставить("П001070050003");
	Структ.Вставить("П001070070003");
	Структ.Вставить("П001070090003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение7", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П00106М110003");
	Структ.Вставить("П00106М160003");
	Структ.Вставить("П00106М165003");
	Структ.Вставить("П00106М170003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение6", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П001050010003");
	Структ.Вставить("П001050020003");
	Структ.Вставить("П001050025003");
	Структ.Вставить("П001050030003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение5", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П001040002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение4", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П00103М101003");
	Структ.Вставить("П00103М102003");
	Структ.Вставить("П00103М107003");
	Структ.Вставить("П00103М109003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение3", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П00102М110000");
	Структ.Вставить("П00102М130000");
	Структ.Вставить("П00102М130700");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение2", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П00101М101003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение1", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000020005003");
	Структ.Вставить("П000020005103");
	Структ.Вставить("П000020005203");
	Структ.Вставить("П000020005303");
	Структ.Вставить("П000020006003");
	Структ.Вставить("П000020006103");
	Структ.Вставить("П000020006203");
	Структ.Вставить("П000020006303");
	Структ.Вставить("П000020007003");
	Структ.Вставить("П000020007103");
	Структ.Вставить("П000020007203");
	Структ.Вставить("П000020007303");
	Структ.Вставить("П000020008003");
	Структ.Вставить("П000020008103");
	Структ.Вставить("П000020009003");
	Структ.Вставить("П000020009503");
	Структ.Вставить("П000020010003");
	Структ.Вставить("П000020011003");
	Структ.Вставить("П000020013003");
	Структ.Вставить("П000020013503");
	Структ.Вставить("П000020015003");
	Структ.Вставить("П000020016003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
	СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДДУгл");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_NDDUGL"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	ВозможныеКодыПериода      = СтрРазделить("21,31,33,34",",", Ложь);
	ВозможныеКодыПериодаРеорг = СтрРазделить("51,52,53,90",",", Ложь);
	
	ВозможныеКодыПоМесту = ВозможныеЗначенияИзСпискаВыбораПоказателя("ПоМесту");
	
	ВозможныеКодыФормыРеорганизции = ВозможныеЗначенияИзСпискаВыбораПоказателя("КодФормыРеорганизации");
	
	ВозможныеМесяцыОтчетногоПериода = ВозможныеМесяцыОтчетногоПериода(ПараметрыВыгрузки.ДатаКонцаПериодаОтчета);
	
	// Титульный лист.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
		СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС("Не задан КПП налогоплательщика", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС("Не задано наименование налогоплательщика", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено
		И ВозможныеКодыПериодаРеорг.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места представления налоговой декларации", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.МассивЗначений.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Код места представления налоговой декларации должен принимать одно из значений: "
		+ ВозможныеКодыПоМесту.СтрокаЗначений, "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС("Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ВозможныеКодыФормыРеорганизции.МассивЗначений.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС("Код формы реорганизации может принимать одно из значений: "
				+ ВозможныеКодыФормыРеорганизции.СтрокаЗначений, "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	НомСтраницы = "1";
	ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
	Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00001М101000"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Строка " + НомСтроки + " раздела 1: не" + ?(ДлинаЗначПок = 0, "", "верно")
				+ " задан код бюджетной классификации", "Раздел1", "П00001М101000_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
			КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
			
			Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
				НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
				
				Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1, "", "в строке " + НомСтрокиПодчМнЧ + " группы строк 020-040 ");
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаПодчМнЧ.Данные["П00001М202000"]));
				Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 1: " + Текст_СтрокаГруппыСтрок + "не" + ?(ДлинаЗначПок = 0, "",
					"верно") + " задан код по ОКТМО", "Раздел1", "П00001М202000_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		СообщитьВТС("Не заполнен раздел 1", "Раздел1", "П00001М101000_1", НомСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел2") Тогда
		
		ВозмКодыР2Стр030 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00002М103003");
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П000020001003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": не задана серия лицензии на пользование недрами",
				"Раздел2", "П000020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы
				+ ": задана серия лицензии на пользование недрами, не состоящая из 3 символов",
				"Раздел2", "П000020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П000020001004"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": не задан номер лицензии на пользование недрами",
				"Раздел2", "П000020001004", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 5 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы
				+ ": задан номер лицензии на пользование недрами, не состоящий из 5 символов",
				"Раздел2", "П000020001004", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П000020001005"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": не задан вид лицензии на пользование недрами",
				"Раздел2", "П000020001005", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 2 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы
				+ ": задан вид лицензии на пользование недрами, не состоящий из 2 символов",
				"Раздел2", "П000020001005", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000020002003"])) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": не задано наименование участка недр",
				"Раздел2", "П000020002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР2М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					Текст_СтрокаГруппыСтрок = ?(КолСтрокМнЧ = 1, "", "в строке " + НомСтроки + " группы строк 030 ");
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00002М103003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": " + Текст_СтрокаГруппыСтрок
						+ "не задан код основания налогообложения участка недр", "Раздел2", "П00002М103003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР2Стр030.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": " + Текст_СтрокаГруппыСтрок
						+ "код основания налогообложения участка недр должен принимать одно из значений: "
						+ ВозмКодыР2Стр030.СтрокаЗначений, "Раздел2", "П00002М103003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": не задан код основания налогообложения участка недр",
				"Раздел2", "П00002М103003_1", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР2М2];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					Текст_СтрокаГруппыСтрок = ?(КолСтрокМнЧ = 1, "", "в строке " + НомСтроки + " группы строк 170 ");
					ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00002М217003"]));
					Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": " + Текст_СтрокаГруппыСтрок + "не" + ?(ДлинаЗначПок = 0,
						"", "верно") + " задан код по ОКТМО", "Раздел2", "П00002М217003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": не задан код по ОКТМО",
				"Раздел2", "П00002М217003_1", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Приложение 1 к разделу 2.
			//
			ИндексВеткиПриложения = 0;
			
			ВеткаПриложения = Ветка.Строки[ИндексВеткиПриложения].Строки[0];
			КоординатыПриложения = НомСтраницы + "," + Формат(ИндексВеткиПриложения + 1, "ЧГ=");
			
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			
			ВозмКодыП1Стр055 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00101М105503");
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					НомСтроки = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Текст_СтрокаГруппыСтрок = ?(КолСтрокМнЧ = 1, "", "в строке " + НомСтроки + " группы строк 007-100 ");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00101М100703"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 1: " + Текст_СтрокаГруппыСтрок
						+ "не задан месяц отчетного периода", "Приложение1", "П00101М100703_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеМесяцыОтчетногоПериода.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 1: " + Текст_СтрокаГруппыСтрок
						+ "месяц отчетного периода должен принимать одно из значений: " + СтрСоединить(
						ВозможныеМесяцыОтчетногоПериода, ", "), "Приложение1", "П00101М100703_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00101М105503"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 1: " + Текст_СтрокаГруппыСтрок
						+ "не задан код источника цены на природный газ",
						"Приложение1", "П00101М105503_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыП1Стр055.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 1: " + Текст_СтрокаГруппыСтрок
						+ "код источника цены на природный газ должен принимать одно из значений: " + ВозмКодыП1Стр055.СтрокаЗначений,
						"Приложение1", "П00101М105503_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СтрокаМнЧ.Данные["П00101М108003"];
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 1: " + Текст_СтрокаГруппыСтрок
						+ "не задан коэффициент для попутного газа", "Приложение1", "П00101М108003_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> 0.95 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 1: " + Текст_СтрокаГруппыСтрок
						+ "коэффициент для попутного газ должен принимать значение 0,95",
						"Приложение1", "П00101М108003_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			// Приложение 2 к разделу 2.
			//
			ИндексВеткиПриложения = 1;
			
			ВеткаПриложения = Ветка.Строки[ИндексВеткиПриложения].Строки[0];
			КоординатыПриложения = НомСтраницы + "," + Формат(ИндексВеткиПриложения + 1, "ЧГ=");
			
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					НомСтроки = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Текст_СтрокаГруппыСтрок = ?(КолСтрокМнЧ = 1, "", "в строке " + НомСтроки + " группы строк 00007-31050 ");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00102М100007"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 2: " + Текст_СтрокаГруппыСтрок
						+ "не задан месяц отчетного периода", "Приложение2", "П00102М100007_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеМесяцыОтчетногоПериода.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 2: " + Текст_СтрокаГруппыСтрок
						+ "месяц отчетного периода должен принимать одно из значений: " + СтрСоединить(
						ВозможныеМесяцыОтчетногоПериода, ", "), "Приложение2", "П00102М100007_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			// Приложение 3 к разделу 2.
			//
			ИндексВеткиПриложения = 2;
			
			ВеткаПриложения = Ветка.Строки[ИндексВеткиПриложения].Строки[0];
			КоординатыПриложения = НомСтраницы + "," + Формат(ИндексВеткиПриложения + 1, "ЧГ=");
			
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП3М1];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					НомСтроки = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Текст_СтрокаГруппыСтрок = ?(КолСтрокМнЧ = 1, "", "в строке " + НомСтроки + " группы строк 007-090 ");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00103М100703"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 3: " + Текст_СтрокаГруппыСтрок
						+ "не задан месяц отчетного периода", "Приложение3", "П00103М100703_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеМесяцыОтчетногоПериода.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 3: " + Текст_СтрокаГруппыСтрок
						+ "месяц отчетного периода должен принимать одно из значений: " + СтрСоединить(
						ВозможныеМесяцыОтчетногоПериода, ", "), "Приложение3", "П00103М100703_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			// Приложение 4 к разделу 2.
			//
			ИндексВеткиПриложения = 3;
			
			ВеткаПриложения = Ветка.Строки[ИндексВеткиПриложения].Строки[0];
			КоординатыПриложения = НомСтраницы + "," + Формат(ИндексВеткиПриложения + 1, "ЧГ=");
			
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП4М1];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			
			ВозмКодыП4Стр010 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00104М101003");
			ВозмКодыП4Стр012 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00104М101203");
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					НомСтроки = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Текст_СтрокаГруппыСтрок = ?(КолСтрокМнЧ = 1, "", "в строке " + НомСтроки + " группы строк 010-017 ");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00104М101003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 4: " + Текст_СтрокаГруппыСтрок
						+ "не задан код основания восстановления фактических расходов",
						"Приложение4", "П00104М101003_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыП4Стр010.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 4: " + Текст_СтрокаГруппыСтрок
						+ "код основания восстановления фактических расходов должен принимать одно из значений: "
						+ ВозмКодыП4Стр010.СтрокаЗначений, "Приложение4", "П00104М101003_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00104М101103"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 4: " + Текст_СтрокаГруппыСтрок
						+ "не задан код ОКОФ", "Приложение4", "П00104М101103_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					Иначе
						ШаблоныОКОФ = Неопределено;
						Если НЕ ОКОФСоответствуетШаблонам(ЗначПок, ШаблоныОКОФ) Тогда
							СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 4: " + Текст_СтрокаГруппыСтрок
							+ "задан некорректный код ОКОФ. Допустимы значения, соответствующие шаблонам: """
							+ СтрЗаменить(СтрСоединить(ШаблоныОКОФ, """, """), "9", "Х") + """ (Х - любая цифра)",
							"Приложение4", "П00104М101103_" + НомСтроки, КоординатыПриложения);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00104М101203"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 4: " + Текст_СтрокаГруппыСтрок
						+ "не задан признак номера", "Приложение4", "П00104М101203_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыП4Стр012.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 4: " + Текст_СтрокаГруппыСтрок
						+ "признак номера должен принимать одно из значений: " + ВозмКодыП4Стр012.СтрокаЗначений,
						"Приложение4", "П00104М101203_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00104М101303"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 4: " + Текст_СтрокаГруппыСтрок
						+ "не задан номер", "Приложение4", "П00104М101303_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00104М101603"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 4: " + Текст_СтрокаГруппыСтрок
						+ "не задан налоговый период (год), в котором признан фактический расход",
						"Приложение4", "П00104М101603_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			// Приложение 5 к разделу 2.
			//
			ИндексВеткиПриложения = 4;
			
			ВеткаПриложения = Ветка.Строки[ИндексВеткиПриложения].Строки[0];
			КоординатыПриложения = НомСтраницы + "," + Формат(ИндексВеткиПриложения + 1, "ЧГ=");
			
			Если ЗаполненаСтраницаРаздела(ВеткаПриложения, "Приложение5") Тогда
				
				Для Инд = 1 По 10 Цикл
					Если ЗначениеЗаполнено(ВеткаПриложения.Данные["П00105001" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"])
						И НЕ ЗначениеЗаполнено(ВеткаПриложения.Данные["П00105001" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"]) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 5: не задан год в строке 1"
						+ Формат(Инд, "ЧЦ=2;ЧВН="), "Приложение5", "П00105001" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01", КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				Для Инд = 1 По 10 Цикл
					Если ЗначениеЗаполнено(ВеткаПриложения.Данные["П00105003" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"])
						И НЕ ЗначениеЗаполнено(ВеткаПриложения.Данные["П00105003" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"]) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 5: не задан год в строке 3"
						+ Формат(Инд, "ЧЦ=2;ЧВН="), "Приложение5", "П00105003" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01", КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Приложение 6 к разделу 2.
			//
			ИндексВеткиПриложения = 5;
			
			ВеткаПриложения = Ветка.Строки[ИндексВеткиПриложения].Строки[0];
			КоординатыПриложения = НомСтраницы + "," + Формат(ИндексВеткиПриложения + 1, "ЧГ=");
			
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП6М1];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					НомСтроки = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Текст_СтрокаГруппыСтрок = ?(КолСтрокМнЧ = 1, "", "в строке " + НомСтроки + " группы строк 007-800 ");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00106М100703"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 6: " + Текст_СтрокаГруппыСтрок
						+ "не задан год ретроспективного периода", "Приложение6", "П00106М100703_" + НомСтроки, КоординатыПриложения);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Для Инд = 1 По 9 Цикл
						Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00106М11" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"])
							И НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00106М11" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"]) Тогда
							СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 6: " + Текст_СтрокаГруппыСтрок
							+ "не задан год в строке 1" + Формат(Инд, "ЧЦ=2;ЧВН="),
							"Приложение6", "П00106М11" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01_" + НомСтроки, КоординатыПриложения);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЦикла;
					
					Для Инд = 1 По 9 Цикл
						Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00106М17" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"])
							И НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00106М17" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"]) Тогда
							СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Приложение 6: " + Текст_СтрокаГруппыСтрок
							+ "не задан год в строке 7" + Формат(Инд, "ЧЦ=2;ЧВН="),
							"Приложение6", "П00106М17" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01_" + НомСтроки, КоординатыПриложения);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		СообщитьВТС("Не заполнен раздел 2", "Раздел2", "П000020001003", НомСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПоказателиНеанализируемыеНаЗаполненность()
	
	ИменаПоказателей = Новый Массив;
	ИменаПоказателей.Добавить("П000240000001");
	
	Возврат ИменаПоказателей;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел(Знач ДеревоРаздела, Знач ИмяРаздела)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(СтраницаРаздела, ИмяРаздела) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтраницаРаздела(Знач СтраницаРаздела, Знач ИмяРаздела)
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ДеревоМнЧ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ДеревоПодчРаздела, ИмяПодчРаздела) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаМногострочнаяЧасть(Знач ДеревоМнЧ)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтрокаМногострочнойЧасти(Знач СтрокаМнЧ)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтаФорма, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
	
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		
		ЭкзСумНалПУ = СкопироватьУзел(УзелРодитель, СумНалПУ, УзелРодитель.Строки.Количество() - 1);
		
		Для каждого Эл Из ЭкзСумНалПУ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		СумНалПУ_МО = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "СумНалПУ_МО");
		ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
		
		Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
			ЭкзСумНалПУ_МО = СкопироватьУзел(ЭкзСумНалПУ, СумНалПУ_МО, ЭкзСумНалПУ.Строки.Количество() - 1);
			Для каждого Эл Из ЭкзСумНалПУ_МО.Строки Цикл
				Если Эл.Ключ = "П10001М203000" Тогда
					ВывестиПоказательВXML(Эл, СтрокаПодчМнЧ.Данные["П00001М203000"] - СтрокаПодчМнЧ.Данные["П00001М204000"]);
				Иначе
					ВывестиПоказательВXML(Эл, СтрокаПодчМнЧ.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	РасчНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНал");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзРасчНал = СкопироватьУзел(УзелРодитель, РасчНал, УзелРодитель.Строки.Количество() - 1);
		
		ЭлементКодОсн = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "КодОсн");
		ЭлементОКТМО  = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "ОКТМО");
		
		Для каждого Эл Из ЭкзРасчНал.Строки Цикл
			Если Эл.Строки.Количество() = 0 И Эл <> ЭлементКодОсн И Эл <> ЭлементОКТМО Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР2М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзЭлементКодОсн = СкопироватьУзел(ЭкзРасчНал, ЭлементКодОсн);
			//ЭкзЭлементКодОсн = СкопироватьУзел(ЭкзРасчНал, ЭлементКодОсн, ЭкзРасчНал.Строки.Количество() - 1);
			ВывестиПоказательВXML(ЭкзЭлементКодОсн, СтрокаМнЧ.Данные[ЭкзЭлементКодОсн.Ключ]);
		КонецЦикла;
		
		ЗаполнитьДаннымиУзел(Ветка.Данные, ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "РасчВыр"));
		ЗаполнитьДаннымиУзел(Ветка.Данные, ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "ФактРасх"));
		ЗаполнитьДаннымиУзел(Ветка.Данные, ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "РасчРасх"));
		ЗаполнитьДаннымиУзел(Ветка.Данные, ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "ВосстФактРасх"));
		
		// Особая обработка: обязателен либо элемент "ИтогоДопДох", либо элемент "ИтогоУб".
		Если Ветка.Данные["П000020009003"] = 0 И Ветка.Данные["П000020009503"] = 0 Тогда
			Эл = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "ИтогоДопДох");
			Эл.Обязательность = "О";
		КонецЕсли;
		
		// Особая обработка: обязателен либо элемент "СумНалДоп", либо элемент "СумНалУм".
		Если Ветка.Данные["П000020015003"] = 0 И Ветка.Данные["П000020016003"] = 0 Тогда
			Эл = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "СумНалДоп");
			Эл.Обязательность = "О";
		КонецЕсли;
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР2М2];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзЭлементОКТМО = СкопироватьУзел(ЭкзРасчНал, ЭлементОКТМО, ЭкзРасчНал.Строки.Количество() - 1);
			ВывестиПоказательВXML(ЭкзЭлементОКТМО, СтрокаМнЧ.Данные[ЭкзЭлементОКТМО.Ключ]);
		КонецЦикла;
		
		// Приложение 1 к разделу 2.
		//
		ВеткаПриложения = Ветка.Строки[0].Строки[0];
		РасчВырДоб = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "РасчВырДоб");
		ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзРасчВырДоб = СкопироватьУзел(ЭкзРасчНал, РасчВырДоб, ЭкзРасчНал.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзРасчВырДоб);
		КонецЦикла;
		
		// Приложение 2 к разделу 2.
		//
		ВеткаПриложения = Ветка.Строки[1].Строки[0];
		ФактРасхДоб = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "ФактРасхДоб");
		ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзФактРасхДоб = СкопироватьУзел(ЭкзРасчНал, ФактРасхДоб, ЭкзРасчНал.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзФактРасхДоб);
		КонецЦикла;
		
		// Приложение 3 к разделу 2.
		//
		ВеткаПриложения = Ветка.Строки[2].Строки[0];
		РасчРасхДоб = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "РасчРасхДоб");
		ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП3М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзРасчРасхДоб = СкопироватьУзел(ЭкзРасчНал, РасчРасхДоб, ЭкзРасчНал.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзРасчРасхДоб);
		КонецЦикла;
		
		// Приложение 4 к разделу 2.
		//
		ВеткаПриложения = Ветка.Строки[3].Строки[0];
		//Особая обработка при выводе узла "РасхПодлВосст".
		РасхПодлВосст = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "РасхПодлВосст");
		ЭкзРасхПодлВосст = СкопироватьУзел(ЭкзРасчНал, РасхПодлВосст, ЭкзРасчНал.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзРасхПодлВосст.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ВеткаПриложения.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		ВосстСумРасх = ПолучитьПодчиненныйЭлемент(ЭкзРасхПодлВосст, "ВосстСумРасх");
		ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП4М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзВосстСумРасх = СкопироватьУзел(ЭкзРасхПодлВосст, ВосстСумРасх, ЭкзРасхПодлВосст.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзВосстСумРасх);
		КонецЦикла;
		
		// Приложение 5 к разделу 2.
		//
		ВеткаПриложения = Ветка.Строки[4].Строки[0];
		Если ЗначениеЗаполнено(ВеткаПриложения.Данные["ПризнакВключения"]) Тогда
			
			//Особая обработка при выводе узла "РасчСумУб".
			РасчСумУб = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "РасчСумУб");
			ЭкзРасчСумУб = СкопироватьУзел(ЭкзРасчНал, РасчСумУб, ЭкзРасчНал.Строки.Количество() - 1);
			
			Для каждого Эл Из ЭкзРасчСумУб.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ВеткаПриложения.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Особая обработка: обязателен либо элемент "ДопДохНалПер", либо элемент "УбНалПер".
			Если ВеткаПриложения.Данные["П001050020003"] = 0 И ВеткаПриложения.Данные["П001050025003"] = 0 Тогда
				Эл = ПолучитьПодчиненныйЭлемент(ЭкзРасчСумУб, "ДопДохНалПер");
				Эл.Обязательность = "О";
			КонецЕсли;
			
			ОстУбНалПер = ПолучитьПодчиненныйЭлемент(ЭкзРасчСумУб, "ОстУбНалПер");
			Для Инд = 1 По 10 Цикл
				Если ЗначениеЗаполнено(ВеткаПриложения.Данные["П00105001" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"]) Тогда
					ЭкзОстУбНалПер = СкопироватьУзел(ЭкзРасчСумУб, ОстУбНалПер);
					ВиртДанные = Новый Структура("П101050010101,П101050010103",
					ВеткаПриложения.Данные["П00105001" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"],
					ВеткаПриложения.Данные["П00105001" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"]);
					ЗаполнитьДаннымиУзел(ВиртДанные, ЭкзОстУбНалПер);
				КонецЕсли;
			КонецЦикла;
			
			СумУбНалБаз = ПолучитьПодчиненныйЭлемент(ЭкзРасчСумУб, "СумУбНалБаз");
			Для Инд = 1 По 10 Цикл
				Если ЗначениеЗаполнено(ВеткаПриложения.Данные["П00105003" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"]) Тогда
					ЭкзСумУбНалБаз = СкопироватьУзел(ЭкзРасчСумУб, СумУбНалБаз, ЭкзРасчСумУб.Строки.Количество() - 1);
					ВиртДанные = Новый Структура("П101050030101,П101050030103",
					ВеткаПриложения.Данные["П00105003" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"],
					ВеткаПриложения.Данные["П00105003" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"]);
					ЗаполнитьДаннымиУзел(ВиртДанные, ЭкзСумУбНалБаз);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Приложение 6 к разделу 2.
		//
		ВеткаПриложения = Ветка.Строки[5].Строки[0];
		РасчСумИстУб = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "РасчСумИстУб");
		ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП6М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзРасчСумИстУб = СкопироватьУзел(ЭкзРасчНал, РасчСумИстУб, ЭкзРасчНал.Строки.Количество() - 1);
			
			Для каждого Эл Из ЭкзРасчСумИстУб.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Особая обработка: обязателен либо элемент "ДопДохРетрПер", либо элемент "УбРетрПер".
			Если СтрокаМнЧ.Данные["П00106М160003"] = 0 И СтрокаМнЧ.Данные["П00106М165003"] = 0 Тогда
				Эл = ПолучитьПодчиненныйЭлемент(ЭкзРасчСумИстУб, "ДопДохРетрПер");
				Эл.Обязательность = "О";
			КонецЕсли;
			
			СумУбНачРетр = ПолучитьПодчиненныйЭлемент(ЭкзРасчСумИстУб, "СумУбНачРетр");
			Для Инд = 1 По 9 Цикл
				Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00106М11" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"]) Тогда
					ЭкзСумУбНачРетр = СкопироватьУзел(ЭкзРасчСумИстУб, СумУбНачРетр);
					ВиртДанные = Новый Структура("П10106М110101,П10106М110103",
					СтрокаМнЧ.Данные["П00106М11" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"],
					СтрокаМнЧ.Данные["П00106М11" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"]);
					ЗаполнитьДаннымиУзел(ВиртДанные, ЭкзСумУбНачРетр);
				КонецЕсли;
			КонецЦикла;
			
			СумУбРетр = ПолучитьПодчиненныйЭлемент(ЭкзРасчСумИстУб, "СумУбРетр");
			Для Инд = 1 По 9 Цикл
				Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00106М17" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"]) Тогда
					ЭкзСумУбРетр = СкопироватьУзел(ЭкзРасчСумИстУб, СумУбРетр, ЭкзРасчСумИстУб.Строки.Количество() - 1);
					ВиртДанные = Новый Структура("П10106М170101,П10106М170103",
					СтрокаМнЧ.Данные["П00106М17" + Формат(Инд, "ЧЦ=2;ЧВН=") + "01"],
					СтрокаМнЧ.Данные["П00106М17" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"]);
					ЗаполнитьДаннымиУзел(ВиртДанные, ЭкзСумУбРетр);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Приложение 7 к разделу 2.
		//
		ВеткаПриложения = Ветка.Строки[6].Строки[0];
		Если ЗначениеЗаполнено(ВеткаПриложения.Данные["ПризнакВключения"]) Тогда
			
			//Особая обработка при выводе узла "РасчМинНал".
			РасчМинНал = ПолучитьПодчиненныйЭлемент(ЭкзРасчНал, "РасчМинНал");
			ЭкзРасчМинНал = СкопироватьУзел(ЭкзРасчНал, РасчМинНал, ЭкзРасчНал.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(ВеткаПриложения.Данные, ЭкзРасчМинНал);
			
			// Особая обработка: обязателен хотя бы один из 12ти элементов, соответствующих строкам 501-512.
			ЗаполненаХотяБыОднаИзСтрок501_512 = Ложь;
			Для Инд = 1 По 12 Цикл
				Если ЗначениеЗаполнено(ВеткаПриложения.Данные["П00107005" + Формат(Инд, "ЧЦ=2;ЧВН=") + "03"]) Тогда
					ЗаполненаХотяБыОднаИзСтрок501_512 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗаполненаХотяБыОднаИзСтрок501_512 Тогда
				ЭкзРасчМинНал.Обязательность = "О";
				Эл = ПолучитьПодчиненныйЭлемент(ЭкзРасчМинНал, "ДобНефтГазЯнв");
				Эл.Обязательность = "О";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП)
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ДекларацияПоНДДУ");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ТекущийРазделОтчетаСокрНаим);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		ОтчетЗаПервыйКвартал = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3;
		
		ТабличныйДокумент.Область("П000020014003").Формат = "ЧН=" + ?(ОтчетЗаПервыйКвартал, "0", "-");
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
	ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Приложение") Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(
		Число(Прав(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1)));
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущееЗначениеКоэффициентаТ = 0;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧР1М1 = СтруктураРеквизитовФормы.мИдГруппыР1М1;
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппыМнЧР1М1];
		
		ИмяГруппыМнЧР1М2 = СтруктураРеквизитовФормы.мИдГруппыР1М2;
		
		Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
			
			ДанныеМнЧ2 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР1М2];
			
			СтрокМнЧ2НаЛисте = 7;
			
			// Определение количества листов.
			КолСтрокМнЧ2 = ДанныеМнЧ2.Строки.Количество();
			ДробКол = КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте;
			ЦелКол  = Цел(КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧ2ДляПечати = Новый Массив;
			ИмяП00001М202000 = "П00001М202000";
			ИмяП00001М203000 = "П00001М203000";
			ИмяП00001М204000 = "П00001М204000";
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ2НаЛисте;
				ДанныеМнЧ2ДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧ2НаЛисте Цикл
					_ИндСтрокиМнЧ = "_1" + СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
					
					НовИмяП00001М202000 = ИмяП00001М202000 + _ИндСтрокиМнЧ;
					НовИмяП00001М203000 = ИмяП00001М203000 + _ИндСтрокиМнЧ;
					НовИмяП00001М204000 = ИмяП00001М204000 + _ИндСтрокиМнЧ;
					
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М202000, "");
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М203000, 0);
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М204000, 0);
					
					Если КолСтрокМнЧ2 >= ИндСПриращением Тогда
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М202000,
						ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00001М202000]);
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М203000,
						ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00001М203000]);
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М204000,
						ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00001М204000]);
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧ2ДляПечати.Добавить(ДанныеМнЧ2ДляПечати);
				
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					Обл = ТабличныйДокумент.Области.Найти("П00001М101000_1");
					Если Обл <> Неопределено Тогда
						Обл.Значение = СокрЛП(СтрокаМнЧ1.Данные["П00001М101000"]);
					КонецЕсли;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧ2НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧР1М2 + "_1" + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧР1М2, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧ2ДляПечати = МассивДанныхМнЧ2ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧ2ДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
						Если (СтрНачинаетсяС(Пок.Ключ, "П00001М203000")
							ИЛИ СтрНачинаетсяС(Пок.Ключ, "П00001М204000"))
							И НЕ (ЗначениеЗаполнено(ДанныеМнЧ2ДляПечати["П00001М202000" + Сред(Пок.Ключ, 14)])
							ИЛИ ЗначениеЗаполнено(ДанныеМнЧ2ДляПечати["П00001М203000" + Сред(Пок.Ключ, 14)])
							ИЛИ ЗначениеЗаполнено(ДанныеМнЧ2ДляПечати["П00001М204000" + Сред(Пок.Ключ, 14)])) Тогда
							Обл.Формат = "ЧН=-";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			НомСтраницыРаздела2 = Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
			
			// Вывод листов 1.
			//
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыР2М1;
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			СтрокМнЧНаЛисте = 3;
			
			// Определение количества листов.
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол  = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧДляПечати = Новый Массив;
			ИмяП00002М103003 = "П00002М103003";
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтрокиМнЧ = СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
					НовИмяП00002М103003 = ИмяП00002М103003 + _ИндСтрокиМнЧ;
					ДанныеМнЧДляПечати.Вставить(НовИмяП00002М103003, "");
					Если КолСтрокМнЧ >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00002М103003,
						ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00002М103003]);
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для каждого Обл Из ТабличныйДокумент.Области Цикл
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
							И Обл.СодержитЗначение = Истина И Обл.Формат = "ЧН=0" Тогда
							Обл.Формат = "ЧН=-";
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_Лист1");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста", "Раздел 2. Стр. " + НомСтраницыРаздела2);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			КонецЦикла;
			
			// Вывод листов 2.
			//
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыР2М2;
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			СтрокМнЧНаЛисте = 8;
			
			// Определение количества листов.
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол  = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧДляПечати = Новый Массив;
			ИмяП00002М217003 = "П00002М217003";
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтрокиМнЧ = СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
					НовИмяП00002М217003 = ИмяП00002М217003 + _ИндСтрокиМнЧ;
					ДанныеМнЧДляПечати.Вставить(НовИмяП00002М217003, "");
					Если КолСтрокМнЧ >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00002М217003,
						ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00002М217003]);
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для каждого Обл Из ТабличныйДокумент.Области Цикл
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
							И Обл.СодержитЗначение = Истина И Обл.Формат = "ЧН=0" Тогда
							Обл.Формат = "ЧН=-";
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_Лист2");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста", "Раздел 2. Стр. " + НомСтраницыРаздела2);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			КонецЦикла;
			
			// Вывод Приложений 1 к разделу 2.
			//
			ВеткаПриложения = Ветка.Строки[0].Строки[0];
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП1М1;
			
			МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение1");
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					Для каждого Пок Из СтрокаМнЧ.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ + "_1");
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Приложение1");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Раздел 2. Стр. " + НомСтраницыРаздела2 + ". Приложение 1");
					СтруктураПараметровРаздела.Вставить("П000020001003", Ветка.Данные["П000020001003"]);
					СтруктураПараметровРаздела.Вставить("П000020001004", Ветка.Данные["П000020001004"]);
					СтруктураПараметровРаздела.Вставить("П000020001005", Ветка.Данные["П000020001005"]);
					ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				КонецЕсли;
			КонецЦикла;
			
			// Вывод Приложений 2 к разделу 2.
			//
			ВеткаПриложения = Ветка.Строки[1].Строки[0];
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП2М1;
			
			МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение2");
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					Для каждого Пок Из СтрокаМнЧ.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ + "_1");
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Приложение2");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Раздел 2. Стр. " + НомСтраницыРаздела2 + ". Приложение 2");
					СтруктураПараметровРаздела.Вставить("П000020001003", Ветка.Данные["П000020001003"]);
					СтруктураПараметровРаздела.Вставить("П000020001004", Ветка.Данные["П000020001004"]);
					СтруктураПараметровРаздела.Вставить("П000020001005", Ветка.Данные["П000020001005"]);
					ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				КонецЕсли;
			КонецЦикла;
			
			// Вывод Приложений 3 к разделу 2.
			//
			ВеткаПриложения = Ветка.Строки[2].Строки[0];
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП3М1;
			
			МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение3");
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					Для каждого Пок Из СтрокаМнЧ.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ + "_1");
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Приложение3");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Раздел 2. Стр. " + НомСтраницыРаздела2 + ". Приложение 3");
					СтруктураПараметровРаздела.Вставить("П000020001003", Ветка.Данные["П000020001003"]);
					СтруктураПараметровРаздела.Вставить("П000020001004", Ветка.Данные["П000020001004"]);
					СтруктураПараметровРаздела.Вставить("П000020001005", Ветка.Данные["П000020001005"]);
					ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				КонецЕсли;
			КонецЦикла;
			
			// Вывод Приложений 4 к разделу 2.
			//
			ВеткаПриложения = Ветка.Строки[3].Строки[0];
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП4М1;
			
			МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение4");
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			СтрокМнЧНаЛисте = 2;
			
			_ДанныеМнЧ = Новый Массив;
			КолСтрокМнЧ = 0;
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					_ДанныеМнЧ.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаМнЧ.Данные));
					КолСтрокМнЧ = КолСтрокМнЧ + 1;
				КонецЕсли;
			КонецЦикла;
			
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол  = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧДляПечати = Новый Массив;
			ИмяП00104М101003 = "П00104М101003";
			ИмяП00104М101103 = "П00104М101103";
			ИмяП00104М101203 = "П00104М101203";
			ИмяП00104М101303 = "П00104М101303";
			ИмяП00104М101403 = "П00104М101403";
			ИмяП00104М101503 = "П00104М101503";
			ИмяП00104М101603 = "П00104М101603";
			ИмяП00104М101703 = "П00104М101703";
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтрокиМнЧ = СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
					НовИмяП00104М101003 = ИмяП00104М101003 + _ИндСтрокиМнЧ;
					НовИмяП00104М101103 = ИмяП00104М101103 + _ИндСтрокиМнЧ;
					НовИмяП00104М101203 = ИмяП00104М101203 + _ИндСтрокиМнЧ;
					НовИмяП00104М101303 = ИмяП00104М101303 + _ИндСтрокиМнЧ;
					НовИмяП00104М101403 = ИмяП00104М101403 + _ИндСтрокиМнЧ;
					НовИмяП00104М101503 = ИмяП00104М101503 + _ИндСтрокиМнЧ;
					НовИмяП00104М101603 = ИмяП00104М101603 + _ИндСтрокиМнЧ;
					НовИмяП00104М101703 = ИмяП00104М101703 + _ИндСтрокиМнЧ;
					ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101003, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101103, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101203, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101303, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101403, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101503, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101603, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101703, 0);
					Если КолСтрокМнЧ >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101003, _ДанныеМнЧ[ИндСПриращением - 1][ИмяП00104М101003]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101103, _ДанныеМнЧ[ИндСПриращением - 1][ИмяП00104М101103]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101203, _ДанныеМнЧ[ИндСПриращением - 1][ИмяП00104М101203]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101303, _ДанныеМнЧ[ИндСПриращением - 1][ИмяП00104М101303]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101403, _ДанныеМнЧ[ИндСПриращением - 1][ИмяП00104М101403]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101503, _ДанныеМнЧ[ИндСПриращением - 1][ИмяП00104М101503]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101603, _ДанныеМнЧ[ИндСПриращением - 1][ИмяП00104М101603]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00104М101703, _ДанныеМнЧ[ИндСПриращением - 1][ИмяП00104М101703]);
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = КолЛистовРаздела Тогда
					НемногострочныеДанные = ВеткаПриложения.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						
						//
						Если СтрНачинаетсяС(Обл.Имя, "П00104М101103") Тогда
							// Особая обработка кода ОКОФ.
							ОКОФ = СокрЛП(Пок.Значение);
							ОКОФ = СтрЗаменить(ОКОФ, ".", "");
							ОКОФ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКОФ, 12, "-", 1);
							Обл.Значение = ОКОФ;
						Иначе
							Обл.Значение = Пок.Значение;
						КонецЕсли;
						//Обл.Значение = Пок.Значение;
						//
						
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Приложение4");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Раздел 2. Стр. " + НомСтраницыРаздела2 + ". Приложение 4");
				СтруктураПараметровРаздела.Вставить("П000020001003", Ветка.Данные["П000020001003"]);
				СтруктураПараметровРаздела.Вставить("П000020001004", Ветка.Данные["П000020001004"]);
				СтруктураПараметровРаздела.Вставить("П000020001005", Ветка.Данные["П000020001005"]);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			КонецЦикла;
			
			// Вывод Приложений 5 к разделу 2.
			//
			ВеткаПриложения = Ветка.Строки[4].Строки[0];
			
			МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение5");
			Если ЗаполненаСтраницаРаздела(ВеткаПриложения, "Приложение5") Тогда
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				Для каждого Пок Из ВеткаПриложения.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Приложение5");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Раздел 2. Стр. " + НомСтраницыРаздела2 + ". Приложение 5");
				СтруктураПараметровРаздела.Вставить("П000020001003", Ветка.Данные["П000020001003"]);
				СтруктураПараметровРаздела.Вставить("П000020001004", Ветка.Данные["П000020001004"]);
				СтруктураПараметровРаздела.Вставить("П000020001005", Ветка.Данные["П000020001005"]);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			КонецЕсли;
			
			// Вывод Приложений 6 к разделу 2.
			//
			ВеткаПриложения = Ветка.Строки[5].Строки[0];
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП6М1;
			
			МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение6");
			ДанныеМнЧ = ВеткаПриложения.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					Для каждого Пок Из СтрокаМнЧ.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ + "_1");
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Приложение6");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Раздел 2. Стр. " + НомСтраницыРаздела2 + ". Приложение 6");
					СтруктураПараметровРаздела.Вставить("П000020001003", Ветка.Данные["П000020001003"]);
					СтруктураПараметровРаздела.Вставить("П000020001004", Ветка.Данные["П000020001004"]);
					СтруктураПараметровРаздела.Вставить("П000020001005", Ветка.Данные["П000020001005"]);
					ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				КонецЕсли;
			КонецЦикла;
			
			// Вывод Приложений 7 к разделу 2.
			//
			ВеткаПриложения = Ветка.Строки[6].Строки[0];
			
			МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение7");
			Если ЗаполненаСтраницаРаздела(ВеткаПриложения, "Приложение7") Тогда
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				Для каждого Пок Из ВеткаПриложения.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Приложение7");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Раздел 2. Стр. " + НомСтраницыРаздела2 + ". Приложение 7");
				СтруктураПараметровРаздела.Вставить("П000020001003", Ветка.Данные["П000020001003"]);
				СтруктураПараметровРаздела.Вставить("П000020001004", Ветка.Данные["П000020001004"]);
				СтруктураПараметровРаздела.Вставить("П000020001005", Ветка.Данные["П000020001005"]);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2019Кв1_";
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	МакетМЧБ = Неопределено;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН2";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН3";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП2";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП3";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ПараметрыПечати.ИмяСтраницы, "Приложение") Тогда
		
		ЛицСерия = ПараметрыПечати["П000020001003"];
		ЛицНомер = ПараметрыПечати["П000020001004"];
		ЛицВид   = ПараметрыПечати["П000020001005"];
		
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П000020001003";
		НовСтр.Значение = ЛицСерия;
		НовСтр.ЗначениеМЧБ = ЛицСерия;
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П000020001004";
		НовСтр.Значение = ЛицНомер;
		НовСтр.ЗначениеМЧБ = ЛицНомер;
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П000020001005";
		НовСтр.Значение = ЛицВид;
		НовСтр.ЗначениеМЧБ = ЛицВид;
		
		Если ПараметрыПечати.ИмяСтраницы = "Приложение2" Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020001003";
			НовСтр.Значение = ЛицСерия;
			НовСтр.ЗначениеМЧБ = ЛицСерия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020001004";
			НовСтр.Значение = ЛицНомер;
			НовСтр.ЗначениеМЧБ = ЛицНомер;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020001005";
			НовСтр.Значение = ЛицВид;
			НовСтр.ЗначениеМЧБ = ЛицВид;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200020001003";
			НовСтр.Значение = ЛицСерия;
			НовСтр.ЗначениеМЧБ = ЛицСерия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200020001004";
			НовСтр.Значение = ЛицНомер;
			НовСтр.ЗначениеМЧБ = ЛицНомер;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200020001005";
			НовСтр.Значение = ЛицВид;
			НовСтр.ЗначениеМЧБ = ЛицВид;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П300020001003";
			НовСтр.Значение = ЛицСерия;
			НовСтр.ЗначениеМЧБ = ЛицСерия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П300020001004";
			НовСтр.Значение = ЛицНомер;
			НовСтр.ЗначениеМЧБ = ЛицНомер;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П300020001005";
			НовСтр.Значение = ЛицВид;
			НовСтр.ЗначениеМЧБ = ЛицВид;
			
			ОтчМесяц = ТабличныйДокумент.Области.Найти("П00102М100007_1").Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П10102М100007_1";
			НовСтр.Значение = ОтчМесяц;
			НовСтр.ЗначениеМЧБ = ОтчМесяц;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П20102М100007_1";
			НовСтр.Значение = ОтчМесяц;
			НовСтр.ЗначениеМЧБ = ОтчМесяц;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П30102М100007_1";
			НовСтр.Значение = ОтчМесяц;
			НовСтр.ЗначениеМЧБ = ОтчМесяц;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНачинаетсяС(Показатель.Имя, "П00001М202000")
			ИЛИ СтрНачинаетсяС(Показатель.Имя, "П00002М217003") Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
			СокрЛП(Показатель.Значение), 11, "-", 1);
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа,
							ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено Тогда //служебное поле
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = СокрЛП(Обл.Значение);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", ТабличныйДокумент.Области.НаимОрг.Значение);
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел2" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СтрНачинаетсяС(Ячейка.Раздел, "Приложение") Тогда
		
		ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[Ячейка.Раздел]["ИмяГлавногоРаздела"];
		
		НомераСтрокМногоуровнегоРаздела = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраница = НайденнаяСтраница;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяПодчСтраница Из ТекСтраница.ПолучитьЭлементы() Цикл
			Если Ячейка.Раздел = НайденнаяПодчСтраница.КолонкаРазделыОтчетаСокрНаим Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяПодчСтраница.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						НаимСтраницы = ?(СтруктураРаздела.Свойство("НаимСтраницы"),
						СтруктураРаздела["НаимСтраницы"], "Стр. ");
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
								НаимСтраницы = ?(СтруктураПодчРаздела.Свойство("НаимСтраницы"),
								СтруктураПодчРаздела["НаимСтраницы"], "Стр. ");
								ЭлементПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы;
								ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяПодчРаздела;
								ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = 1;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

#Область ПроцедурыИФункцииМеханизмаПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, 0);
	СтруктураРезультата.Вставить("СтруктураОшибок"				, Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"		, Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ДанныеКС = Новый Структура;
	СформироватьДанныеОтчета();
	СформироватьДанныеОтчетаПРП();
	СформироватьСлужебныеДанные();
	
	// проверки Титульного листа
	ПроверкаКС_1_1(СтруктураРезультата);
	
	// проверки Раздела 1
	ПроверкаКС_2_1(СтруктураРезультата);
	ПроверкаКС_2_2(СтруктураРезультата);
	
	// проверки Раздела 2
	ПроверкаКС_3_1(СтруктураРезультата);
	ПроверкаКС_3_2(СтруктураРезультата);
	ПроверкаКС_3_3(СтруктураРезультата);
	ПроверкаКС_3_4(СтруктураРезультата);
	ПроверкаКС_3_5(СтруктураРезультата);
	ПроверкаКС_3_6(СтруктураРезультата);
	ПроверкаКС_3_7(СтруктураРезультата);
	ПроверкаКС_3_8(СтруктураРезультата);
	ПроверкаКС_3_9(СтруктураРезультата);
	ПроверкаКС_3_10(СтруктураРезультата);
	ПроверкаКС_3_11(СтруктураРезультата);
	ПроверкаКС_3_12(СтруктураРезультата);
	ПроверкаКС_3_13(СтруктураРезультата);
	ПроверкаКС_3_14(СтруктураРезультата);
	ПроверкаКС_3_15(СтруктураРезультата);
	ПроверкаКС_3_16(СтруктураРезультата);
	ПроверкаКС_3_17(СтруктураРезультата);
	ПроверкаКС_3_18(СтруктураРезультата);
	ПроверкаКС_3_19(СтруктураРезультата);
	ПроверкаКС_3_20(СтруктураРезультата);
	ПроверкаКС_3_21(СтруктураРезультата);
	ПроверкаКС_3_22(СтруктураРезультата);
	ПроверкаКС_3_23(СтруктураРезультата);
	ПроверкаКС_3_24(СтруктураРезультата);
	ПроверкаКС_3_25(СтруктураРезультата);
	ПроверкаКС_3_26(СтруктураРезультата);
	ПроверкаКС_3_27(СтруктураРезультата);
	ПроверкаКС_3_28(СтруктураРезультата);
	ПроверкаКС_3_29(СтруктураРезультата);
	ПроверкаКС_3_30(СтруктураРезультата);
	ПроверкаКС_3_31(СтруктураРезультата);
	ПроверкаКС_3_32(СтруктураРезультата);
	
	// проверки Приложения 1
	ПроверкаКС_4_1(СтруктураРезультата);
	ПроверкаКС_4_2(СтруктураРезультата);
	ПроверкаКС_4_3(СтруктураРезультата);
	ПроверкаКС_4_4(СтруктураРезультата);
	
	// проверки Приложения 2
	ПроверкаКС_5_1(СтруктураРезультата);
	ПроверкаКС_5_2(СтруктураРезультата);
	ПроверкаКС_5_3(СтруктураРезультата);
	ПроверкаКС_5_4(СтруктураРезультата);
	ПроверкаКС_5_5(СтруктураРезультата);
	
	// проверки Приложения 3
	ПроверкаКС_6_1(СтруктураРезультата);
	ПроверкаКС_6_2(СтруктураРезультата);
	ПроверкаКС_6_3(СтруктураРезультата);
	ПроверкаКС_6_4(СтруктураРезультата);
	ПроверкаКС_6_5(СтруктураРезультата);
	
	// проверки Приложения 4
	ПроверкаКС_7_1(СтруктураРезультата);
	ПроверкаКС_7_2(СтруктураРезультата);
	ПроверкаКС_7_3(СтруктураРезультата);
	ПроверкаКС_7_4(СтруктураРезультата);
	ПроверкаКС_7_5(СтруктураРезультата);
	
	// проверки Приложения 5
	ПроверкаКС_8_1(СтруктураРезультата);
	ПроверкаКС_8_2(СтруктураРезультата);
	ПроверкаКС_8_3(СтруктураРезультата);
	ПроверкаКС_8_4(СтруктураРезультата);
	ПроверкаКС_8_5(СтруктураРезультата);
	ПроверкаКС_8_7а(СтруктураРезультата);
	
	// проверки Приложения 6
	ПроверкаКС_9_1(СтруктураРезультата);
	ПроверкаКС_9_2(СтруктураРезультата);
	ПроверкаКС_9_3(СтруктураРезультата);
	ПроверкаКС_9_4(СтруктураРезультата);
	ПроверкаКС_9_5(СтруктураРезультата);
	ПроверкаКС_9_8а(СтруктураРезультата);
	
	// проверки Приложения 7
	ПроверкаКС_10_1(СтруктураРезультата);
	ПроверкаКС_10_2(СтруктураРезультата);
	ПроверкаКС_10_3(СтруктураРезультата);
	ПроверкаКС_10_4а(СтруктураРезультата);
	ПроверкаКС_10_4б(СтруктураРезультата);
	ПроверкаКС_10_4в(СтруктураРезультата);
	ПроверкаКС_10_4г(СтруктураРезультата);
	ПроверкаКС_10_5(СтруктураРезультата);
	ПроверкаКС_10_6(СтруктураРезультата);
	ПроверкаКС_10_7(СтруктураРезультата);
	ПроверкаКС_10_8(СтруктураРезультата);
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	АдресФормул			= ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы	, Новый УникальныйИдентификатор);
	АдресПоказателей	= ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей"	, АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "Декларация по НДД");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2019Кв1");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();
	
	// проверки Титульного листа
	ПроверкаКС_1_1(СтруктураРезультата);
	
	// проверки Раздела 1
	ПроверкаКС_2_1(СтруктураРезультата);
	ПроверкаКС_2_2(СтруктураРезультата);
	
	// проверки Раздела 2
	ПроверкаКС_3_1(СтруктураРезультата);
	ПроверкаКС_3_2(СтруктураРезультата);
	ПроверкаКС_3_3(СтруктураРезультата);
	ПроверкаКС_3_4(СтруктураРезультата);
	ПроверкаКС_3_5(СтруктураРезультата);
	ПроверкаКС_3_6(СтруктураРезультата);
	ПроверкаКС_3_7(СтруктураРезультата);
	ПроверкаКС_3_8(СтруктураРезультата);
	ПроверкаКС_3_9(СтруктураРезультата);
	ПроверкаКС_3_10(СтруктураРезультата);
	ПроверкаКС_3_11(СтруктураРезультата);
	ПроверкаКС_3_12(СтруктураРезультата);
	ПроверкаКС_3_13(СтруктураРезультата);
	ПроверкаКС_3_14(СтруктураРезультата);
	ПроверкаКС_3_15(СтруктураРезультата);
	ПроверкаКС_3_16(СтруктураРезультата);
	ПроверкаКС_3_17(СтруктураРезультата);
	ПроверкаКС_3_18(СтруктураРезультата);
	ПроверкаКС_3_19(СтруктураРезультата);
	ПроверкаКС_3_20(СтруктураРезультата);
	ПроверкаКС_3_21(СтруктураРезультата);
	ПроверкаКС_3_22(СтруктураРезультата);
	ПроверкаКС_3_23(СтруктураРезультата);
	ПроверкаКС_3_24(СтруктураРезультата);
	ПроверкаКС_3_25(СтруктураРезультата);
	ПроверкаКС_3_26(СтруктураРезультата);
	ПроверкаКС_3_27(СтруктураРезультата);
	ПроверкаКС_3_28(СтруктураРезультата);
	ПроверкаКС_3_29(СтруктураРезультата);
	ПроверкаКС_3_30(СтруктураРезультата);
	ПроверкаКС_3_31(СтруктураРезультата);
	ПроверкаКС_3_32(СтруктураРезультата);
	
	// проверки Приложения 1
	ПроверкаКС_4_1(СтруктураРезультата);
	ПроверкаКС_4_2(СтруктураРезультата);
	ПроверкаКС_4_3(СтруктураРезультата);
	ПроверкаКС_4_4(СтруктураРезультата);
	
	// проверки Приложения 2
	ПроверкаКС_5_1(СтруктураРезультата);
	ПроверкаКС_5_2(СтруктураРезультата);
	ПроверкаКС_5_3(СтруктураРезультата);
	ПроверкаКС_5_4(СтруктураРезультата);
	ПроверкаКС_5_5(СтруктураРезультата);
	
	// проверки Приложения 3
	ПроверкаКС_6_1(СтруктураРезультата);
	ПроверкаКС_6_2(СтруктураРезультата);
	ПроверкаКС_6_3(СтруктураРезультата);
	ПроверкаКС_6_4(СтруктураРезультата);
	ПроверкаКС_6_5(СтруктураРезультата);
	
	// проверки Приложения 4
	ПроверкаКС_7_1(СтруктураРезультата);
	ПроверкаКС_7_2(СтруктураРезультата);
	ПроверкаКС_7_3(СтруктураРезультата);
	ПроверкаКС_7_4(СтруктураРезультата);
	ПроверкаКС_7_5(СтруктураРезультата);
	
	// проверки Приложения 5
	ПроверкаКС_8_1(СтруктураРезультата);
	ПроверкаКС_8_2(СтруктураРезультата);
	ПроверкаКС_8_3(СтруктураРезультата);
	ПроверкаКС_8_4(СтруктураРезультата);
	ПроверкаКС_8_5(СтруктураРезультата);
	ПроверкаКС_8_6(СтруктураРезультата);
	ПроверкаКС_8_7а(СтруктураРезультата);
	ПроверкаКС_8_7б(СтруктураРезультата);
	
	// проверки Приложения 6
	ПроверкаКС_9_1(СтруктураРезультата);
	ПроверкаКС_9_2(СтруктураРезультата);
	ПроверкаКС_9_3(СтруктураРезультата);
	ПроверкаКС_9_4(СтруктураРезультата);
	ПроверкаКС_9_5(СтруктураРезультата);
	ПроверкаКС_9_6(СтруктураРезультата);
	ПроверкаКС_9_7(СтруктураРезультата);
	ПроверкаКС_9_8а(СтруктураРезультата);
	ПроверкаКС_9_8б(СтруктураРезультата);
	
	// проверки Приложения 7
	ПроверкаКС_10_1(СтруктураРезультата);
	ПроверкаКС_10_2(СтруктураРезультата);
	ПроверкаКС_10_3(СтруктураРезультата);
	ПроверкаКС_10_4а(СтруктураРезультата);
	ПроверкаКС_10_4б(СтруктураРезультата);
	ПроверкаКС_10_4в(СтруктураРезультата);
	ПроверкаКС_10_4г(СтруктураРезультата);
	ПроверкаКС_10_5(СтруктураРезультата);
	ПроверкаКС_10_6(СтруктураРезультата);
	ПроверкаКС_10_7(СтруктураРезультата);
	ПроверкаКС_10_8(СтруктураРезультата);
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Титульного_листа

&НаСервере
Процедура ПроверкаКС_1_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Титульный лист'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Титульного листа (КС 1.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.1 ст.119, п.1 ст.126 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата представления первичного отчета должна быть <= установленному ст.333.56 НК РФ сроку '") +
		НСтр("ru='представления налоговой декларации по налогу на дополнительный доход'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно нарушение установленного срока представления отчета'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р0С001"		, "ДатаПодписи");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел0);
	
	ГодУстановленногоСрока	= Формат(?(ДанныеКС.МесОтчета = 12, ДанныеКС.ГодОтчета + 1, ДанныеКС.ГодОтчета), 
		"ЧЦ=4; ЧВН=; ЧГ=0");
	МесУстановленногоСрока	= Формат(?(ДанныеКС.МесОтчета = 12, 3, ДанныеКС.МесОтчета + 1), "ЧЦ=2; ЧВН=");
	УстановленныйСрок		= СтроковыеФункцииКлиентСервер.СтрокаВДату("28." + МесУстановленногоСрока + "." + 
		ГодУстановленногоСрока);
	УстановленныйСрокСтр	= Формат(УстановленныйСрок, "ДФ=dd.MM.yy; ДП=(...)");
	
	Настройки.ЭтоОшибка = ДанныеКС.Отчет.Вид = 0 И Показатели.Р0С001.Значение > УстановленныйСрок;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р0С001.ЗначениеСтр, УстановленныйСрокСтр);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_2_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КБК в стр.010 Раздела 1 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р1С010"		, "П00001М101000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р1С010.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		КолвоСтрок = КоличествоСтрок(ДанныеКС.Раздел1, Показатели.Р1С010.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р1С010, ДанныеКС.Раздел1, XMLСтрока(Счетчик));
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.Р1С010.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р1С010.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_2(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение ОКТМО в стр.020 Раздела 1 должно соответствовать Общероссийскому классификатору '") +
		НСтр("ru='территорий муниципальных образований'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверный код ОКТМО'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_2

&НаСервере
Процедура ПроверкаКС_3_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.45 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода основания налогообложения в стр.030 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код основания налогообложения'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С030"		, "П00002М103003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р2С030.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(Раздел2, Лев(Показатели.Р2С030.ИмяПоказателя, 14));
			
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С030, Раздел2, XMLСтрока(Счетчик));
				
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р2С030.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р2С030.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_2(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетная выручка в стр.050 Раздела 2 должна равняться сумме стр.051 - 056 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетной выручки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С050"		, "П000020005003");
	ИменаПоказателей.Вставить("Р2С051"		, "П000020005103");
	ИменаПоказателей.Вставить("Р2С052"		, "П000020005203");
	ИменаПоказателей.Вставить("Р2С053"		, "П000020005303");
	ИменаПоказателей.Вставить("Р2С054"		, "П000020005403");
	ИменаПоказателей.Вставить("Р2С055"		, "П000020005503");
	ИменаПоказателей.Вставить("Р2С056"		, "П000020005603");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма	= СуммаПоказателей(Показатели) - Показатели.Р2С050.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С050.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С050.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_3(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетная выручка в стр.051 Раздела 2 должна равняться стр.010 Приложения 1 к Разделу 2 '") +
		НСтр("ru='за 1 месяц отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетной выручки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С051"		, "П000020005103");
	ИменаПоказателей.Вставить("П1С007"		, "П00101М100703_");
	ИменаПоказателей.Вставить("П1С010"		, "П00101М101003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С051, Раздел2);
		Показатели.П1С007.Расшифровывать	= Ложь;
		Показатели.П1С010.Округление		= Истина;
		Показатели.П1С010.Итог				= 0;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П1С007.ИмяПоказателя);
			
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П1С007, Раздел2, XMLСтрока(Счетчик));
			Если Показатели.П1С007.Значение = Формат(ДанныеКС.МесОтчета - 2, "ЧЦ=2; ЧВН=") Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П1С010, Раздел2, XMLСтрока(Счетчик));
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С051.Значение = Показатели.П1С010.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С051.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П1С010.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_4(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетная выручка в стр.052 Раздела 2 должна равняться стр.010 Приложения 1 к Разделу 2 '") +
		НСтр("ru='за 2 месяц отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетной выручки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С052"		, "П000020005203");
	ИменаПоказателей.Вставить("П1С007"		, "П00101М100703_");
	ИменаПоказателей.Вставить("П1С010"		, "П00101М101003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С052, Раздел2);
		Показатели.П1С007.Расшифровывать	= Ложь;
		Показатели.П1С010.Округление		= Истина;
		Показатели.П1С010.Итог				= 0;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П1С007.ИмяПоказателя);
			
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П1С007, Раздел2, XMLСтрока(Счетчик));
			Если Показатели.П1С007.Значение = Формат(ДанныеКС.МесОтчета - 1, "ЧЦ=2; ЧВН=") Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П1С010, Раздел2, XMLСтрока(Счетчик));
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С052.Значение = Показатели.П1С010.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С052.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П1С010.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_5(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетная выручка в стр.053 Раздела 2 должна равняться стр.010 Приложения 1 к Разделу 2 '") +
		НСтр("ru='за 3 месяц отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетной выручки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С053"		, "П000020005303");
	ИменаПоказателей.Вставить("П1С007"		, "П00101М100703_");
	ИменаПоказателей.Вставить("П1С010"		, "П00101М101003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С053, Раздел2);
		Показатели.П1С007.Расшифровывать	= Ложь;
		Показатели.П1С010.Округление		= Истина;
		Показатели.П1С010.Итог				= 0;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П1С007.ИмяПоказателя);
			
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П1С007, Раздел2, XMLСтрока(Счетчик));
			Если Показатели.П1С007.Значение = Формат(ДанныеКС.МесОтчета, "ЧЦ=2; ЧВН=") Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П1С010, Раздел2, XMLСтрока(Счетчик));
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С053.Значение = Показатели.П1С010.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С053.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П1С010.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_6(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Исключено в соответствии с Письмом ФНС России от 14.06.2019 N СД-4-3/11497@'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетная выручка в стр.054 Раздела 2 должна равняться стр.050 Раздела 2 '") +
		НСтр("ru='за предыдущий отчетный период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетной выручки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_7(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Доходы в стр.056 Раздела 2 должна равняться стр.055 Раздела 2 '") +
		НСтр("ru='за предыдущий отчетный период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетной выручки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С013"		, "П000020001003");
	ИменаПоказателей.Вставить("Р2С014"		, "П000020001004");
	ИменаПоказателей.Вставить("Р2С015"		, "П000020001005");
	ИменаПоказателей.Вставить("Р2С020"		, "П000020002003");
	ИменаПоказателей.Вставить("Р2С056"		, "П000020005603");
	ИменаПоказателей.Вставить("Р2С055П"		, "П000020005503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьПоказатели(Показатели, Раздел2);
		РасшифроватьПоказатель(Показатели.Р2С056);
		Показатели.Р2С055П.Итог = 0;
		ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Истина);
		Если ЛистыРаздела2ПРП.Количество() = 0 Тогда
			ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Ложь);
		КонецЕсли; 
		
		Для каждого Раздел2ПРП Из ЛистыРаздела2ПРП Цикл
			Показатели.Р2С055П.Отчет = ДанныеКС.ОтчетПРП;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С055П, Раздел2ПРП);
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С056.Значение = Показатели.Р2С055П.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С056.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р2С055П.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_8(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Фактические расходы в стр.060 Раздела 2 должны равняться сумме стр.061 - 064 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С060"		, "П000020006003");
	ИменаПоказателей.Вставить("Р2С061"		, "П000020006103");
	ИменаПоказателей.Вставить("Р2С062"		, "П000020006203");
	ИменаПоказателей.Вставить("Р2С063"		, "П000020006303");
	ИменаПоказателей.Вставить("Р2С064"		, "П000020006403");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма	= СуммаПоказателей(Показатели) - Показатели.Р2С060.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С060.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С060.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_9(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Фактические расходы в стр.061 Раздела 2 должны равняться стр.10000 Приложения 2 к Разделу 2 '") +
		НСтр("ru='за 1 месяц отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С061"		, "П000020006103");
	ИменаПоказателей.Вставить("П2С007"		, "П00102М100007_");
	ИменаПоказателей.Вставить("П2С10000"	, "П00102М110000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С061, Раздел2);
		Показатели.П2С007.Расшифровывать	= Ложь;
		Показатели.П2С10000.Округление		= Истина;
		Показатели.П2С10000.Итог			= 0;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П2С007.ИмяПоказателя);
			
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П2С007, Раздел2, XMLСтрока(Счетчик));
			Если Показатели.П2С007.Значение = Формат(ДанныеКС.МесОтчета - 2, "ЧЦ=2; ЧВН=") Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П2С10000, Раздел2, XMLСтрока(Счетчик));
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С061.Значение = Показатели.П2С10000.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С061.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П2С10000.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_10(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Фактические расходы в стр.062 Раздела 2 должны равняться стр.10000 Приложения 2 к Разделу 2 '") +
		НСтр("ru='за 2 месяц отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С062"		, "П000020006203");
	ИменаПоказателей.Вставить("П2С007"		, "П00102М100007_");
	ИменаПоказателей.Вставить("П2С10000"	, "П00102М110000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С062, Раздел2);
		Показатели.П2С007.Расшифровывать	= Ложь;
		Показатели.П2С10000.Округление		= Истина;
		Показатели.П2С10000.Итог			= 0;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П2С007.ИмяПоказателя);
			
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П2С007, Раздел2, XMLСтрока(Счетчик));
			Если Показатели.П2С007.Значение = Формат(ДанныеКС.МесОтчета - 1, "ЧЦ=2; ЧВН=") Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П2С10000, Раздел2, XMLСтрока(Счетчик));
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С062.Значение = Показатели.П2С10000.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С062.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П2С10000.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_11(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Фактические расходы в стр.063 Раздела 2 должны равняться стр.10000 Приложения 2 к Разделу 2 '") +
		НСтр("ru='за 3 месяц отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С063"		, "П000020006303");
	ИменаПоказателей.Вставить("П2С007"		, "П00102М100007_");
	ИменаПоказателей.Вставить("П2С10000"	, "П00102М110000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С063, Раздел2);
		Показатели.П2С007.Расшифровывать	= Ложь;
		Показатели.П2С10000.Округление		= Истина;
		Показатели.П2С10000.Итог			= 0;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П2С007.ИмяПоказателя);
			
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П2С007, Раздел2, XMLСтрока(Счетчик));
			Если Показатели.П2С007.Значение = Формат(ДанныеКС.МесОтчета, "ЧЦ=2; ЧВН=") Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П2С10000, Раздел2, XMLСтрока(Счетчик));
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С063.Значение = Показатели.П2С10000.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С063.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П2С10000.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_12(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Фактические расходы в стр.064 Раздела 2 должны равняться стр.060 Раздела 2 '") +
		НСтр("ru='за предыдущий отчетный период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С013"		, "П000020001003");
	ИменаПоказателей.Вставить("Р2С014"		, "П000020001004");
	ИменаПоказателей.Вставить("Р2С015"		, "П000020001005");
	ИменаПоказателей.Вставить("Р2С020"		, "П000020002003");
	ИменаПоказателей.Вставить("Р2С064"		, "П000020006403");
	ИменаПоказателей.Вставить("Р2С060П"		, "П000020006003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьПоказатели(Показатели, Раздел2);
		РасшифроватьПоказатель(Показатели.Р2С064);
		Показатели.Р2С060П.Итог = 0;
		ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Истина);
		Если ЛистыРаздела2ПРП.Количество() = 0 Тогда
			ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Ложь);
		КонецЕсли; 
		
		Для каждого Раздел2ПРП Из ЛистыРаздела2ПРП Цикл
			Показатели.Р2С060П.Отчет = ДанныеКС.ОтчетПРП;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С060П, Раздел2ПРП);
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С064.Значение = Показатели.Р2С060П.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С064.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р2С060П.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_13(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетные расходы в стр.070 Раздела 2 должны равняться сумме стр.071 - 074 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С070"		, "П000020007003");
	ИменаПоказателей.Вставить("Р2С071"		, "П000020007103");
	ИменаПоказателей.Вставить("Р2С072"		, "П000020007203");
	ИменаПоказателей.Вставить("Р2С073"		, "П000020007303");
	ИменаПоказателей.Вставить("Р2С074"		, "П000020007403");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма	= СуммаПоказателей(Показатели) - Показатели.Р2С070.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С070.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С070.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_14(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетные расходы в стр.071 Раздела 2 должны равняться стр.010 Приложения 3 к Разделу 2 '") +
		НСтр("ru='за 1 месяц отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С071"		, "П000020007103");
	ИменаПоказателей.Вставить("П3С007"		, "П00103М100703_");
	ИменаПоказателей.Вставить("П3С010"		, "П00103М101003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С071, Раздел2);
		Показатели.П3С007.Расшифровывать	= Ложь;
		Показатели.П3С010.Округление		= Истина;
		Показатели.П3С010.Итог				= 0;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П3С007.ИмяПоказателя);
			
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П3С007, Раздел2, XMLСтрока(Счетчик));
			Если Показатели.П3С007.Значение = Формат(ДанныеКС.МесОтчета - 2, "ЧЦ=2; ЧВН=") Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П3С010, Раздел2, XMLСтрока(Счетчик));
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С071.Значение = Показатели.П3С010.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С071.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П3С010.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_15(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетные расходы в стр.072 Раздела 2 должны равняться стр.010 Приложения 3 к Разделу 2 '") +
		НСтр("ru='за 2 месяц отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С072"		, "П000020007203");
	ИменаПоказателей.Вставить("П3С007"		, "П00103М100703_");
	ИменаПоказателей.Вставить("П3С010"		, "П00103М101003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С072, Раздел2);
		Показатели.П3С007.Расшифровывать	= Ложь;
		Показатели.П3С010.Округление		= Истина;
		Показатели.П3С010.Итог				= 0;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П3С007.ИмяПоказателя);
			
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П3С007, Раздел2, XMLСтрока(Счетчик));
			Если Показатели.П3С007.Значение = Формат(ДанныеКС.МесОтчета - 1, "ЧЦ=2; ЧВН=") Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П3С010, Раздел2, XMLСтрока(Счетчик));
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С072.Значение = Показатели.П3С010.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С072.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П3С010.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_16(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетные расходы в стр.073 Раздела 2 должны равняться стр.010 Приложения 3 к Разделу 2 '") +
		НСтр("ru='за 3 месяц отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С073"		, "П000020007303");
	ИменаПоказателей.Вставить("П3С007"		, "П00103М100703_");
	ИменаПоказателей.Вставить("П3С010"		, "П00103М101003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С073, Раздел2);
		Показатели.П3С007.Расшифровывать	= Ложь;
		Показатели.П3С010.Округление		= Истина;
		Показатели.П3С010.Итог				= 0;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П3С007.ИмяПоказателя);
			
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П3С007, Раздел2, XMLСтрока(Счетчик));
			Если Показатели.П3С007.Значение = Формат(ДанныеКС.МесОтчета, "ЧЦ=2; ЧВН=") Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П3С010, Раздел2, XMLСтрока(Счетчик));
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С073.Значение = Показатели.П3С010.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С073.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П3С010.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_17(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетные расходы в стр.074 Раздела 2 должны равняться стр.070 Раздела 2 '") +
		НСтр("ru='за предыдущий отчетный период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С013"		, "П000020001003");
	ИменаПоказателей.Вставить("Р2С014"		, "П000020001004");
	ИменаПоказателей.Вставить("Р2С015"		, "П000020001005");
	ИменаПоказателей.Вставить("Р2С020"		, "П000020002003");
	ИменаПоказателей.Вставить("Р2С074"		, "П000020007403");
	ИменаПоказателей.Вставить("Р2С070П"		, "П000020007003");

	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьПоказатели(Показатели, Раздел2);
		РасшифроватьПоказатель(Показатели.Р2С074);
		Показатели.Р2С070П.Итог = 0;
		ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Истина);
		Если ЛистыРаздела2ПРП.Количество() = 0 Тогда
			ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Ложь);
		КонецЕсли; 
		
		Для каждого Раздел2ПРП Из ЛистыРаздела2ПРП Цикл
			Показатели.Р2С070П.Отчет = ДанныеКС.ОтчетПРП;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С070П, Раздел2ПРП);
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С074.Значение = Показатели.Р2С070П.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С074.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р2С070П.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_18(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.48 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Восстановленные фактические расходы в стр.080 Раздела 2 должны равняться сумме стр.081 - 082 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма восстановленных фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С080"		, "П000020008003");
	ИменаПоказателей.Вставить("Р2С081"		, "П000020008103");
	ИменаПоказателей.Вставить("Р2С082"		, "П000020008203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма	= СуммаПоказателей(Показатели) - Показатели.Р2С080.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С080.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С080.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_19(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.48 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Восстановленные фактические расходы в стр.081 Раздела 2 должны равняться стр.020 Приложения 4 '") +
		НСтр("ru='к Разделу 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма восстановленных фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С081"		, "П000020008103");
	ИменаПоказателей.Вставить("П4С020"		, "П001040002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С081.Значение = Показатели.П4С020.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С081.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П4С020.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_20(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.48 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Восстановленные фактические в стр.082 Раздела 2 должны равняться стр.080 Раздела 2 '") +
		НСтр("ru='за предыдущий отчетный период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма восстановленных фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С013"		, "П000020001003");
	ИменаПоказателей.Вставить("Р2С014"		, "П000020001004");
	ИменаПоказателей.Вставить("Р2С015"		, "П000020001005");
	ИменаПоказателей.Вставить("Р2С020"		, "П000020002003");
	ИменаПоказателей.Вставить("Р2С082"		, "П000020008203");
	ИменаПоказателей.Вставить("Р2С080П"		, "П000020008003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьПоказатели(Показатели, Раздел2);
		РасшифроватьПоказатель(Показатели.Р2С082);
		Показатели.Р2С080П.Итог = 0;
		ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Истина);
		Если ЛистыРаздела2ПРП.Количество() = 0 Тогда
			ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Ложь);
		КонецЕсли; 
		
		Для каждого Раздел2ПРП Из ЛистыРаздела2ПРП Цикл
			Показатели.Р2С080П.Отчет = ДанныеКС.ОтчетПРП;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С080П, Раздел2ПРП);
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С082.Значение = Показатели.Р2С080П.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С082.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р2С080П.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_21(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.50 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дополнительный доход в стр.090 Раздела 2 = стр.050 - стр.060 - стр.070 + стр.080 + стр.083 - стр.084 '") +
		НСтр("ru='+ стр.085 Раздела 2, если результат вычисления >= 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 - %4 + %5 + %6 - %7 + %8 Итог [%9]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дополнительного дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С090"		, "П000020009003");
	ИменаПоказателей.Вставить("Р2С050"		, "П000020005003");
	ИменаПоказателей.Вставить("Р2С060"		, "П000020006003");
	ИменаПоказателей.Вставить("Р2С070"		, "П000020007003");
	ИменаПоказателей.Вставить("Р2С080"		, "П000020008003");
	ИменаПоказателей.Вставить("Р2С083"		, "П000020008303");
	ИменаПоказателей.Вставить("Р2С084"		, "П000020008403");
	ИменаПоказателей.Вставить("Р2С085"		, "П000020008503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = Показатели.Р2С050.Значение - Показатели.Р2С060.Значение - Показатели.Р2С070.Значение 
			+ Показатели.Р2С080.Значение + Показатели.Р2С083.Значение - Показатели.Р2С084.Значение + Показатели.Р2С085.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С090.Значение = Макс(0, РасчетнаяСумма);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р2С090.Значение, Показатели.Р2С050.Значение, Показатели.Р2С060.Значение, Показатели.Р2С070.Значение, 
			Показатели.Р2С080.Значение, Показатели.Р2С083.Значение, Показатели.Р2С084.Значение, Показатели.Р2С085.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_22(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.50 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Убыток в стр.095 Раздела 2 = стр.050 - стр.060 - стр.070 + стр.080 + стр.083 - стр.084 '") +
		НСтр("ru='+ стр.085 Раздела 2, если результат вычисления < 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 - %4 + %5 + %6 - %7 + %8 Итог [%9]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С095"		, "П000020009503");
	ИменаПоказателей.Вставить("Р2С050"		, "П000020005003");
	ИменаПоказателей.Вставить("Р2С060"		, "П000020006003");
	ИменаПоказателей.Вставить("Р2С070"		, "П000020007003");
	ИменаПоказателей.Вставить("Р2С080"		, "П000020008003");
	ИменаПоказателей.Вставить("Р2С083"		, "П000020008303");
	ИменаПоказателей.Вставить("Р2С084"		, "П000020008403");
	ИменаПоказателей.Вставить("Р2С085"		, "П000020008503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = Показатели.Р2С050.Значение - Показатели.Р2С060.Значение - Показатели.Р2С070.Значение 
			+ Показатели.Р2С080.Значение + Показатели.Р2С083.Значение - Показатели.Р2С084.Значение + Показатели.Р2С085.Значение;
		Настройки.ЭтоОшибка = НЕ -Показатели.Р2С095.Значение = Мин(0, РасчетнаяСумма);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			-Показатели.Р2С095.Значение, Показатели.Р2С050.Значение, Показатели.Р2С060.Значение, Показатели.Р2С070.Значение, 
			Показатели.Р2С080.Значение, Показатели.Р2С083.Значение, Показатели.Р2С084.Значение, Показатели.Р2С085.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_23(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.50, 333.51 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма убытка в стр.100 Раздела 2 должна равняться стр.300 Приложения 5 к Разделу 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С100"		, "П000020010003");
	ИменаПоказателей.Вставить("П5С300"		, "П001050030003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С100.Значение = Показатели.П5С300.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С100.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П5С300.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_24(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.50 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Налоговая база в стр.110 Раздела 2 = стр.090 - стр.100 Раздела 2, если результат вычисления >= 0, '") +
		НСтр("ru='иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налоговой базы'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С110"		, "П000020011003");
	ИменаПоказателей.Вставить("Р2С090"		, "П000020009003");
	ИменаПоказателей.Вставить("Р2С100"		, "П000020010003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = Показатели.Р2С090.Значение - Показатели.Р2С100.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С110.Значение = Макс(0, РасчетнаяСумма);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р2С110.Значение, Показатели.Р2С090.Значение, Показатели.Р2С100.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_25(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.54 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Налоговая ставка в стр.120 Раздела 2 должна равняться ставке налога, установленной ст.333.54 НК РФ'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная ставка налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С120"		, "П000020012003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	СтавкаНалога = СтавкаНалога();
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
			
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.Р2С120.Значение) И НЕ Показатели.Р2С120.Значение = СтавкаНалога;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С120.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", СтавкаНалога);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_26(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма исчисленного налога в стр.130 Раздела 2 = стр.110 х стр.120 Раздела 2 / 100'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 * %3) / 100 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма исчисленного налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С130"		, "П000020013003");
	ИменаПоказателей.Вставить("Р2С110"		, "П000020011003");
	ИменаПоказателей.Вставить("Р2С120"		, "П000020012003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = Окр(Показатели.Р2С110.Значение * Показатели.Р2С120.Значение / 100);
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С130.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки	, 
			Показатели.Р2С130.Значение, Показатели.Р2С110.Значение, Показатели.Р2С120.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_27(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Минимальный налог в стр.135 Раздела 2 должен равняться стр.900 Приложения 7 к Разделу 2. '") +
		НСтр("ru='Если стр.030 Раздела 2 = коду 101 - 107, 143 - 153, а стр.040 Раздела 2 < 1, стр.135 Раздела 2 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма минимального налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С030"		, "П00002М103003_");
	ИменаПоказателей.Вставить("Р2С040"		, "П000020004003");
	ИменаПоказателей.Вставить("Р2С135"		, "П000020013503");
	ИменаПоказателей.Вставить("П7С900"		, "П001070090003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р2С040.Округление = Ложь;
	СтрокаИсключений = НСтр("ru='101,102,103,104,105,106,107,143,144,145,146,147,148,149,150,151,152,153'");
	МассивИсключений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИсключений, ",");
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		УсловиеВыполнено = Истина;
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.Р2С030.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С030, Раздел2, XMLСтрока(Счетчик));
			УсловиеВыполнено = УсловиеВыполнено И НЕ МассивИсключений.Найти(Показатели.Р2С030.Значение) = Неопределено;
		КонецЦикла;
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С040, Раздел2);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С135, Раздел2);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П7С900, Раздел2);
		
		УсловиеВыполнено = УсловиеВыполнено И Показатели.Р2С040.Значение < 1;
		Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р2С135.Значение = 0
			ИЛИ НЕ УсловиеВыполнено И НЕ Показатели.Р2С135.Значение = Показатели.П7С900.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С135.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", 
			?(УсловиеВыполнено, 0, Показатели.П7С900.Значение));
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_28(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма авансовых платежей в стр.140 Раздела 2 должна равняться стр.130 Раздела 2 '") +
		НСтр("ru='за предыдущий отчетный период или стр.135 Раздела 2 за предыдущий отчетный период, '") +
		НСтр("ru='если стр.130 Раздела 2 за предыдущий отчетный период < стр.135 Раздела 2 за '") +
		НСтр("ru='предыдущий отчетный период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма авансовых платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С013"		, "П000020001003");
	ИменаПоказателей.Вставить("Р2С014"		, "П000020001004");
	ИменаПоказателей.Вставить("Р2С015"		, "П000020001005");
	ИменаПоказателей.Вставить("Р2С020"		, "П000020002003");
	ИменаПоказателей.Вставить("Р2С140"		, "П000020014003");
	ИменаПоказателей.Вставить("Р2С130П"		, "П000020013003");
	ИменаПоказателей.Вставить("Р2С135П"		, "П000020013503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьПоказатели(Показатели, Раздел2);
		РасшифроватьПоказатель(Показатели.Р2С140);
		Показатели.Р2С130П.Итог = 0;
		Показатели.Р2С135П.Итог = 0;
		ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Истина);
		Если ЛистыРаздела2ПРП.Количество() = 0 Тогда
			ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Ложь);
		КонецЕсли; 
		
		Для каждого Раздел2ПРП Из ЛистыРаздела2ПРП Цикл
			Показатели.Р2С130П.Отчет = ДанныеКС.ОтчетПРП;
			Показатели.Р2С135П.Отчет = ДанныеКС.ОтчетПРП;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С130П, Раздел2ПРП);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С135П, Раздел2ПРП);
		КонецЦикла;
		
		РасчетнаяСумма = Макс(Показатели.Р2С130П.Итог, Показатели.Р2С135П.Итог);
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С140.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С140.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_29(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога к доплате в стр.150 Раздела 2 должна равняться разности стр.130 Раздела 2 '") +
		НСтр("ru='(или стр.135 Раздела 2 - в зависимости что больше) и стр.140 Раздела 2, если результат '") +
		НСтр("ru='вычисления > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налога к доплате'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С150"		, "П000020015003");
	ИменаПоказателей.Вставить("Р2С130"		, "П000020013003");
	ИменаПоказателей.Вставить("Р2С135"		, "П000020013503");
	ИменаПоказателей.Вставить("Р2С140"		, "П000020014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		СуммаНалога = Макс(Показатели.Р2С130.Значение, Показатели.Р2С135.Значение);
		РасчетнаяСумма = СуммаНалога - Показатели.Р2С140.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С150.Значение = Макс(0, РасчетнаяСумма);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки	, 
			Показатели.Р2С150.Значение, СуммаНалога, Показатели.Р2С140.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_30(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога к уменьшению в стр.160 Раздела 2 должна равняться разности стр.140 Раздела 2 и '") +
		НСтр("ru='стр.130 Раздела 2 (или стр.135 Раздела 2 - в зависимости что больше), если результат '") +
		НСтр("ru='вычисления > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налога к уменьшению'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С160"		, "П000020016003");
	ИменаПоказателей.Вставить("Р2С140"		, "П000020014003");
	ИменаПоказателей.Вставить("Р2С130"		, "П000020013003");
	ИменаПоказателей.Вставить("Р2С135"		, "П000020013503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		СуммаНалога = Макс(Показатели.Р2С130.Значение, Показатели.Р2С135.Значение);
		РасчетнаяСумма = Показатели.Р2С140.Значение - СуммаНалога;
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С160.Значение = Макс(0, РасчетнаяСумма);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки	, 
			Показатели.Р2С160.Значение, Показатели.Р2С140.Значение, СуммаНалога, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_31(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Одно из значений ОКТМО в стр.170 Раздела 2 должно соответствовать одному из значений '") +
		НСтр("ru='ОКТМО в стр.020 Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение ОКТМО'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С170"		, "П00002М217003_");
	ИменаПоказателей.Вставить("Р1С010"		, "П00001М101000_");
	ИменаПоказателей.Вставить("Р1С020"		, "П00001М202000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.Р2С170.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			Настройки.ЭтоОшибка = Истина;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С170, Раздел2, XMLСтрока(Счетчик));
			
			КолвоСтрок1 = КоличествоСтрок(ДанныеКС.Раздел1, Показатели.Р1С010.ИмяПоказателя);
			
			Для Счетчик1 = 1 По КолвоСтрок1 Цикл
				Показатели.Р1С020.ИмяПоказателя = Лев(Показатели.Р1С020.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
				ДлинаПоказателя = СтрДлина(Показатели.Р1С020.ИмяПоказателя);
				КолвоСтрок2 = КоличествоСтрок(ДанныеКС.Раздел1, Показатели.Р1С020.ИмяПоказателя, Ложь);
			
				Для Счетчик2 = 1 По КолвоСтрок2 Цикл
					Показатели.Р1С020.ИмяПоказателя = Лев(Показатели.Р1С020.ИмяПоказателя, ДлинаПоказателя);
					ЗаполнитьПоказатель(Показатели.Р1С020, ДанныеКС.Раздел1, Счетчик2, Ложь);
					
					Если Показатели.Р2С170.Значение = Показатели.Р1С020.Значение Тогда
						РасшифроватьПоказатель(Показатели.Р1С020);
						Настройки.ЭтоОшибка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ Настройки.ЭтоОшибка Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Показатели.Р1С020.ЗначениеСтр = ?(Настройки.ЭтоОшибка, "(...)", Показатели.Р1С020.ЗначениеСтр);
			Настройки.ЭтоОшибка = Настройки.ЭтоОшибка И ЗначениеЗаполнено(Показатели.Р2С170.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С170.ЗначениеСтр);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р1С020.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_32(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетная выручка в стр.054 Раздела 2 должна равняться стр.050 Раздела 2 '") +
		НСтр("ru='за предыдущий отчетный период за минусом стр.056 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетной выручки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р2С013"		, "П000020001003");
	ИменаПоказателей.Вставить("Р2С014"		, "П000020001004");
	ИменаПоказателей.Вставить("Р2С015"		, "П000020001005");
	ИменаПоказателей.Вставить("Р2С020"		, "П000020002003");
	ИменаПоказателей.Вставить("Р2С054"		, "П000020005403");
	ИменаПоказателей.Вставить("Р2С050П"		, "П000020005003");
	ИменаПоказателей.Вставить("Р2С056"		, "П000020005603");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьПоказатели(Показатели, Раздел2);
		РасшифроватьПоказатель(Показатели.Р2С054);
		Показатели.Р2С050П.Итог = 0;
		ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Истина);
		Если ЛистыРаздела2ПРП.Количество() = 0 Тогда
			ЛистыРаздела2ПРП = ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, Ложь);
		КонецЕсли; 
		
		Для каждого Раздел2ПРП Из ЛистыРаздела2ПРП Цикл
			Показатели.Р2С050П.Отчет = ДанныеКС.ОтчетПРП;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р2С050П, Раздел2ПРП);
		КонецЦикла;
		
		РасшифроватьПоказатель(Показатели.Р2С056);
		РасчетнаяСумма = Показатели.Р2С050П.Итог - Показатели.Р2С056.Значение;
			
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С054.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Р2С054.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р2С050П.Итог);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%3", Показатели.Р2С056.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%4", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_1

&НаСервере
Процедура ПроверкаКС_4_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение месяца в стр.007 Приложения 1 должно быть равным 01, 02, 03 для отчета за 1 квартал, '") +
		НСтр("ru='04, 05, 06 для отчета за полугодие, 07, 08, 09 для отчета за 9 месяцев, 10, 11, 12 для отчета '") +
		НСтр("ru='за налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный месяц отчетного периода'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П1С007"		, "П00101М100703_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	МассивМесяцев = Новый Массив;
	МассивМесяцев.Добавить(Формат(ДанныеКС.МесОтчета - 2, "ЧЦ=2; ЧВН="));
	МассивМесяцев.Добавить(Формат(ДанныеКС.МесОтчета - 1, "ЧЦ=2; ЧВН="));
	МассивМесяцев.Добавить(Формат(ДанныеКС.МесОтчета - 0, "ЧЦ=2; ЧВН="));
	СтрокаМесяцев = СтрСоединить(МассивМесяцев, ", ");
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П1С007.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П1С007, Раздел2, XMLСтрока(Счетчик));
			
			Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.П1С007.Значение) 
				И МассивМесяцев.Найти(Показатели.П1С007.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П1С007.ЗначениеСтр);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", СтрокаМесяцев);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_2(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетная выручка в стр.010 Приложения 1 = стр.020 х стр.030 х стр.040 х стр.050 + стр.060 х '") +
		НСтр("ru='стр.070 + стр.080 х стр.090 х стр.100 Приложения 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетной выручки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П1С010"		, "П00101М101003_");
	ИменаПоказателей.Вставить("П1С020"		, "П00101М102003_");
	ИменаПоказателей.Вставить("П1С030"		, "П00101М103003_");
	ИменаПоказателей.Вставить("П1С040"		, "П00101М104003_");
	ИменаПоказателей.Вставить("П1С050"		, "П00101М105003_");
	ИменаПоказателей.Вставить("П1С060"		, "П00101М106003_");
	ИменаПоказателей.Вставить("П1С070"		, "П00101М107003_");
	ИменаПоказателей.Вставить("П1С080"		, "П00101М108003_");
	ИменаПоказателей.Вставить("П1С090"		, "П00101М109003_");
	ИменаПоказателей.Вставить("П1С100"		, "П00101М110003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П1С010.Округление = Истина;
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П1С010.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = Окр(Показатели.П1С020.Значение * Показатели.П1С030.Значение * Показатели.П1С040.Значение 
				* Показатели.П1С050.Значение + Показатели.П1С060.Значение * Показатели.П1С070.Значение 
				+ Показатели.П1С080.Значение * Показатели.П1С090.Значение * Показатели.П1С100.Значение);
			
			Настройки.ЭтоОшибка = НЕ Показатели.П1С010.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П1С010.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_3(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода источника цены в стр.055 Приложения 1 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение кода источника цены'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П1С055"		, "П00101М105503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П1С055.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П1С055.ИмяПоказателя);
			
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П1С055, Раздел2, XMLСтрока(Счетчик));
				
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П1С055.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П1С055.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_4(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.46 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение коэффициента для попутного газа в стр.080 Приложения 1 должно соответствовать '") +
		НСтр("ru='списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение коэффициента для попутного газа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П1С080"		, "П00101М108003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= Новый Соответствие;
	Список.Вставить(0	, 1);
	Список.Вставить(0.95, 1);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П1С080.ИмяПоказателя);
			
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П1С080, Раздел2, XMLСтрока(Счетчик));
				
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П1С080.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П1С080.Значение);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_2

&НаСервере
Процедура ПроверкаКС_5_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение месяца в стр.00007 Приложения 2 должно быть равным 01, 02, 03 для отчета за 1 квартал, '") +
		НСтр("ru='04, 05, 06 для отчета за полугодие, 07, 08, 09 для отчета за 9 месяцев, 10, 11, 12 для отчета '") +
		НСтр("ru='за налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан месяц отчетного периода'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П2С00007"	, "П00102М100007_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	МассивМесяцев = Новый Массив;
	МассивМесяцев.Добавить(Формат(ДанныеКС.МесОтчета - 2, "ЧЦ=2; ЧВН="));
	МассивМесяцев.Добавить(Формат(ДанныеКС.МесОтчета - 1, "ЧЦ=2; ЧВН="));
	МассивМесяцев.Добавить(Формат(ДанныеКС.МесОтчета - 0, "ЧЦ=2; ЧВН="));
	СтрокаМесяцев = СтрСоединить(МассивМесяцев, ", ");
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П2С00007.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П2С00007, Раздел2, XMLСтрока(Счетчик));
			
			Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.П2С00007.Значение) 
				И МассивМесяцев.Найти(Показатели.П2С00007.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П2С00007.ЗначениеСтр);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", СтрокаМесяцев);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_2(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Фактические расходы в стр.10000 Приложения 2 должны быть равны сумме стр.20000 и 30000 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П2С10000"	, "П00102М110000_");
	ИменаПоказателей.Вставить("П2С20000"	, "П00102М120000_");
	ИменаПоказателей.Вставить("П2С30000"	, "П00102М130000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П2С10000.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = Показатели.П2С20000.Значение + Показатели.П2С30000.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П2С10000.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П2С10000.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_3(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Фактические расходы в стр.30000 Приложения 2 должны быть равны сумме стр.30100, 30200, 30300, '") +
		НСтр("ru='30400, 30500, 30600, 30700, 30800, 30900, 31000 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П2С30000"	, "П00102М130000_");
	ИменаПоказателей.Вставить("П2С30100"	, "П00102М130100_");
	ИменаПоказателей.Вставить("П2С30200"	, "П00102М130200_");
	ИменаПоказателей.Вставить("П2С30300"	, "П00102М130300_");
	ИменаПоказателей.Вставить("П2С30400"	, "П00102М130400_");
	ИменаПоказателей.Вставить("П2С30500"	, "П00102М130500_");
	ИменаПоказателей.Вставить("П2С30600"	, "П00102М130600_");
	ИменаПоказателей.Вставить("П2С30700"	, "П00102М130700_");
	ИменаПоказателей.Вставить("П2С30800"	, "П00102М130800_");
	ИменаПоказателей.Вставить("П2С30900"	, "П00102М130900_");
	ИменаПоказателей.Вставить("П2С31000"	, "П00102М131000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П2С30000.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П2С30000.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П2С30000.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П2С30000.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_4(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расходы в стр.30700 Приложения 2 должны быть равны сумме стр.30701 - 30733 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П2С30700"	, "П00102М130700_");
	ИменаПоказателей.Вставить("П2С30701"	, "П00102М130701_");
	ИменаПоказателей.Вставить("П2С30702"	, "П00102М130702_");
	ИменаПоказателей.Вставить("П2С30703"	, "П00102М130703_");
	ИменаПоказателей.Вставить("П2С30704"	, "П00102М130704_");
	ИменаПоказателей.Вставить("П2С30705"	, "П00102М130705_");
	ИменаПоказателей.Вставить("П2С30706"	, "П00102М130706_");
	ИменаПоказателей.Вставить("П2С30707"	, "П00102М130707_");
	ИменаПоказателей.Вставить("П2С30708"	, "П00102М130708_");
	ИменаПоказателей.Вставить("П2С30709"	, "П00102М130709_");
	ИменаПоказателей.Вставить("П2С30710"	, "П00102М130710_");
	ИменаПоказателей.Вставить("П2С30711"	, "П00102М130711_");
	ИменаПоказателей.Вставить("П2С30712"	, "П00102М130712_");
	ИменаПоказателей.Вставить("П2С30713"	, "П00102М130713_");
	ИменаПоказателей.Вставить("П2С30714"	, "П00102М130714_");
	ИменаПоказателей.Вставить("П2С30715"	, "П00102М130715_");
	ИменаПоказателей.Вставить("П2С30716"	, "П00102М130716_");
	ИменаПоказателей.Вставить("П2С30717"	, "П00102М130717_");
	ИменаПоказателей.Вставить("П2С30718"	, "П00102М130718_");
	ИменаПоказателей.Вставить("П2С30719"	, "П00102М130719_");
	ИменаПоказателей.Вставить("П2С30720"	, "П00102М130720_");
	ИменаПоказателей.Вставить("П2С30721"	, "П00102М130721_");
	ИменаПоказателей.Вставить("П2С30722"	, "П00102М130722_");
	ИменаПоказателей.Вставить("П2С30723"	, "П00102М130723_");
	ИменаПоказателей.Вставить("П2С30724"	, "П00102М130724_");
	ИменаПоказателей.Вставить("П2С30725"	, "П00102М130725_");
	ИменаПоказателей.Вставить("П2С30726"	, "П00102М130726_");
	ИменаПоказателей.Вставить("П2С30727"	, "П00102М130727_");
	ИменаПоказателей.Вставить("П2С30728"	, "П00102М130728_");
	ИменаПоказателей.Вставить("П2С30729"	, "П00102М130729_");
	ИменаПоказателей.Вставить("П2С30730"	, "П00102М130730_");
	ИменаПоказателей.Вставить("П2С30731"	, "П00102М130731_");
	ИменаПоказателей.Вставить("П2С30732"	, "П00102М130732_");
	ИменаПоказателей.Вставить("П2С30733"	, "П00102М130733_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П2С30700.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П2С30700.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П2С30700.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П2С30700.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_5(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.47 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расходы в стр.31000 Приложения 2 должны быть равны сумме стр.31010 - 31050 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П2С31000"	, "П00102М131000_");
	ИменаПоказателей.Вставить("П2С31010"	, "П00102М131010_");
	ИменаПоказателей.Вставить("П2С31020"	, "П00102М131020_");
	ИменаПоказателей.Вставить("П2С31030"	, "П00102М131030_");
	ИменаПоказателей.Вставить("П2С31040"	, "П00102М131040_");
	ИменаПоказателей.Вставить("П2С31050"	, "П00102М131050_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П2С31000.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П2С31000.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П2С31000.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П2С31000.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_3

&НаСервере
Процедура ПроверкаКС_6_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение месяца в стр.007 Приложения 3 должно быть равным 01, 02, 03 для отчета за 1 квартал, '") +
		НСтр("ru='04, 05, 06 для отчета за полугодие, 07, 08, 09 для отчета за 9 месяцев, 10, 11, 12 для отчета '") +
		НСтр("ru='за налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан месяц отчетного периода'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П3С007"		, "П00103М100703_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	МассивМесяцев = Новый Массив;
	МассивМесяцев.Добавить(Формат(ДанныеКС.МесОтчета - 2, "ЧЦ=2; ЧВН="));
	МассивМесяцев.Добавить(Формат(ДанныеКС.МесОтчета - 1, "ЧЦ=2; ЧВН="));
	МассивМесяцев.Добавить(Формат(ДанныеКС.МесОтчета - 0, "ЧЦ=2; ЧВН="));
	СтрокаМесяцев = СтрСоединить(МассивМесяцев, ", ");
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П3С007.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П3С007, Раздел2, XMLСтрока(Счетчик));
			
			Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.П3С007.Значение) 
				И МассивМесяцев.Найти(Показатели.П3С007.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П3С007.ЗначениеСтр);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", СтрокаМесяцев);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_2(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетные расходы в стр.010 Приложения 3 должны быть равны сумме стр.020, 070 Приложения 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П3С010"		, "П00103М101003_");
	ИменаПоказателей.Вставить("П3С020"		, "П00103М102003_");
	ИменаПоказателей.Вставить("П3С070"		, "П00103М107003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П3С010.Округление = Истина;
	Показатели.П3С020.Округление = Истина;
	Показатели.П3С070.Округление = Истина;
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П3С010.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П3С010.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П3С010.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П3С010.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_3(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Таможенная пошлина в стр.020 Приложения 3 = стр.030 х стр.040 х (стр.050 + стр.060) Приложения 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма таможенной пошлины'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П3С020"		, "П00103М102003_");
	ИменаПоказателей.Вставить("П3С030"		, "П00103М103003_");
	ИменаПоказателей.Вставить("П3С040"		, "П00103М104003_");
	ИменаПоказателей.Вставить("П3С050"		, "П00103М105003_");
	ИменаПоказателей.Вставить("П3С060"		, "П00103М106003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П3С020.Округление = Истина;
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П3С020.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = Окр(Показатели.П3С030.Значение * Показатели.П3С040.Значение * (Показатели.П3С050.Значение 
				+ Показатели.П3С060.Значение));
			Настройки.ЭтоОшибка = НЕ Показатели.П3С020.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П3С020.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_4(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетные расходы в стр.070 Приложения 3 = стр.080 х стр.090 Приложения 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П3С070"		, "П00103М107003_");
	ИменаПоказателей.Вставить("П3С080"		, "П00103М108003_");
	ИменаПоказателей.Вставить("П3С090"		, "П00103М109003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П3С070.Округление = Истина;
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П3С070.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = Окр(Показатели.П3С080.Значение * Показатели.П3С090.Значение);
			Настройки.ЭтоОшибка = НЕ Показатели.П3С070.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П3С070.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_5(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.49 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Количество нефти и газового конденсата в стр.090 Приложения 3 должно быть равно сумме '") +
		НСтр("ru='стр.050, 060 Приложения 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное количество нефти и газового конденсата'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П3С090"		, "П00103М109003_");
	ИменаПоказателей.Вставить("П3С050"		, "П00103М105003_");
	ИменаПоказателей.Вставить("П3С060"		, "П00103М106003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П3С090.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = Показатели.П3С050.Значение + Показатели.П3С060.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П3С090.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П3С090.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_4

&НаСервере
Процедура ПроверкаКС_7_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.4 ст.333.48 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода основания в стр.010 Приложения 4 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение кода основания'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П4С010"		, "П00104М101003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П4С010.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П4С010.ИмяПоказателя);
			
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П4С010, Раздел2, XMLСтрока(Счетчик));
				
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П4С010.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П4С010.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_2(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.48 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение признака номера в стр.012 Приложения 4 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение признака номера'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П4С012"		, "П00104М101203_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П4С012.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П4С012.ИмяПоказателя);
			
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П4С012, Раздел2, XMLСтрока(Счетчик));
				
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П4С012.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П4С012.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_3(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.5 ст.333.48 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Коэффициент индексации убытка в стр.015 Приложения 4 должен соответствовать значению '") +
		НСтр("ru='коэффициента, установленному п.3 ст.333.51 НК РФ'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение коэффициента индексации убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П4С015"		, "П00104М101503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	КоэффициентИУ = КоэффициентИндексацииУбытка();
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П4С015.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П4С015, Раздел2, XMLСтрока(Счетчик));
			
			Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.П4С015.Значение) И НЕ Показатели.П4С015.Значение = КоэффициентИУ;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П4С015.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", КоэффициентИУ);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_4(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.5 ст.333.48 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Восстановленные фактические расходы в стр.017 Приложения 4 = стр.014 х стр.015^(Отчетный год - '") +
		НСтр("ru='стр.016) Приложения 4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма восстановленных фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П4С017"		, "П00104М101703_");
	ИменаПоказателей.Вставить("П4С014"		, "П00104М101403_");
	ИменаПоказателей.Вставить("П4С015"		, "П00104М101503_");
	ИменаПоказателей.Вставить("Р0С002"		, "ОтчетГод");
	ИменаПоказателей.Вставить("П4С016"		, "П00104М101603_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П4С017.Округление = Истина;
	Показатели.П4С014.Округление = Истина;
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П4С017.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П4С017, Раздел2, XMLСтрока(Счетчик));
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П4С014, Раздел2, XMLСтрока(Счетчик));
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П4С015, Раздел2, XMLСтрока(Счетчик));
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р0С002, ДанныеКС.Раздел0);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П4С016, Раздел2, XMLСтрока(Счетчик));
			
			Показатели.Р0С002.Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Показатели.Р0С002.Значение);
			Показатели.П4С016.Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Показатели.П4С016.Значение);
			Показатели.Р0С002.Значение = ?(Показатели.Р0С002.Значение = Неопределено, 0, Показатели.Р0С002.Значение);
			Показатели.П4С016.Значение = ?(Показатели.П4С016.Значение = Неопределено, 0, Показатели.П4С016.Значение);
			
			РасчетнаяСумма = Окр(Показатели.П4С014.Значение * Pow(Показатели.П4С015.Значение, 
				Макс(Показатели.Р0С002.Значение - Показатели.П4С016.Значение, 0)));
			Настройки.ЭтоОшибка = НЕ Показатели.П4С017.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П4С017.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_5(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.48 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Восстановленные фактические расходы в стр.020 Приложения 4 должны равняться сумме всех стр.017 '") +
		НСтр("ru='Приложения 4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма восстановленных фактических расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	
	ИменаПоказателей.Вставить("П4С020"		, "П001040002003");
	ИменаПоказателей.Вставить("П4С017"		, "П00104М101703_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
	
		Показатели.П4С020.Округление	= Истина;
		Показатели.П4С017.Округление	= Истина;
		Показатели.П4С017.Итог			= 0;
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П4С020, Раздел2);
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П4С017.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П4С017, Раздел2, XMLСтрока(Счетчик));
		КонецЦикла;
			
		Настройки.ЭтоОшибка = НЕ Показатели.П4С020.Значение = Показатели.П4С017.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П4С020.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П4С017.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_5

&НаСервере
Процедура ПроверкаКС_8_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Остаток убытка в стр.100 Приложения 5 должен быть равен сумме стр.101 - 110 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма неперенесенного убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П5С100"		, "П001050010003");
	ИменаПоказателей.Вставить("П5С101"		, "П001050010103");
	ИменаПоказателей.Вставить("П5С102"		, "П001050010203");
	ИменаПоказателей.Вставить("П5С103"		, "П001050010303");
	ИменаПоказателей.Вставить("П5С104"		, "П001050010403");
	ИменаПоказателей.Вставить("П5С105"		, "П001050010503");
	ИменаПоказателей.Вставить("П5С106"		, "П001050010603");
	ИменаПоказателей.Вставить("П5С107"		, "П001050010703");
	ИменаПоказателей.Вставить("П5С108"		, "П001050010803");
	ИменаПоказателей.Вставить("П5С109"		, "П001050010903");
	ИменаПоказателей.Вставить("П5С110"		, "П001050011003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П5С100.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П5С100.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П5С100.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_2(СтруктураРезультата)
	
	Перем Показатели1;
	Перем Показатели2;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение года в стр.101 - 110 Приложения 5 должно быть меньше значения отчетного года на '") +
		НСтр("ru='титульном листе'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 < %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный год сформированного убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей1 = Новый Структура;
	ИменаПоказателей1.Вставить("П5С101"		, "П001050010101");
	ИменаПоказателей1.Вставить("П5С102"		, "П001050010201");
	ИменаПоказателей1.Вставить("П5С103"		, "П001050010301");
	ИменаПоказателей1.Вставить("П5С104"		, "П001050010401");
	ИменаПоказателей1.Вставить("П5С105"		, "П001050010501");
	ИменаПоказателей1.Вставить("П5С106"		, "П001050010601");
	ИменаПоказателей1.Вставить("П5С107"		, "П001050010701");
	ИменаПоказателей1.Вставить("П5С108"		, "П001050010801");
	ИменаПоказателей1.Вставить("П5С109"		, "П001050010901");
	ИменаПоказателей1.Вставить("П5С110"		, "П001050011001");
	
	ИменаПоказателей2 = Новый Структура;
	ИменаПоказателей2.Вставить("Р0С002"		, "ОтчетГод");
	
	СформироватьПоказатели(Показатели1, ИменаПоказателей1);
	СформироватьПоказатели(Показатели2, ИменаПоказателей2);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		Настройки.ЭтоОшибка = Ложь;
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели2.Р0С002, ДанныеКС.Раздел0);
		ЗаполнитьИРасшифроватьПоказатели(Показатели1, Раздел2);
		
		Показатели2.Р0С002.Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Показатели2.Р0С002.Значение);
		Показатели2.Р0С002.Значение = ?(Показатели2.Р0С002.Значение = Неопределено, 0, Показатели2.Р0С002.Значение);
			
		МассивГодов		= Новый Массив;
		МассивГодовСтр	= Новый Массив;
		
		Для каждого Показатель Из Показатели1 Цикл
			Показатель.Значение.Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Показатель.Значение.Значение);
			Показатель.Значение.Значение = ?(Показатель.Значение.Значение = Неопределено, 0, Показатель.Значение.Значение);
			Настройки.ЭтоОшибка = Настройки.ЭтоОшибка ИЛИ ЗначениеЗаполнено(Показатели2.Р0С002.Значение) 
				И НЕ Показатель.Значение.Значение < Показатели2.Р0С002.Значение;
			МассивГодов.Добавить(Показатель.Значение.Значение);
			МассивГодовСтр.Добавить(Показатель.Значение.ЗначениеСтр);
		КонецЦикла;
		
		СтрокаГодов = СтрСоединить(МассивГодовСтр, ", ");
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", СтрокаГодов);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели2.Р0С002.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_3(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дополнительный доход в стр.200 Приложения 5 должен равняться стр.090 Раздела 2, '") +
		НСтр("ru='если Приложение 5 включено в отчет'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дополнительного дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П5С200"		, "П001050020003");
	ИменаПоказателей.Вставить("Р2С090"		, "П000020009003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
			
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Раздел2.Приложение5Включено) 
			И НЕ Показатели.П5С200.Значение = Показатели.Р2С090.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П5С200.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р2С090.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_4(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Убыток в стр.250 Приложения 5 должен равняться стр.095 Раздела 2, '") +
		НСтр("ru='если Приложение 5 включено в отчет'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П5С250"		, "П001050025003");
	ИменаПоказателей.Вставить("Р2С095"		, "П000020009503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
			
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Раздел2.Приложение5Включено) 
			И НЕ Показатели.П5С250.Значение = Показатели.Р2С095.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П5С250.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р2С095.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_5(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма убытка в стр.300 Приложения 5 должен быть равен сумме стр.301 - 310 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка с учетом индексации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П5С300"		, "П001050030003");
	ИменаПоказателей.Вставить("П5С301"		, "П001050030103");
	ИменаПоказателей.Вставить("П5С302"		, "П001050030203");
	ИменаПоказателей.Вставить("П5С303"		, "П001050030303");
	ИменаПоказателей.Вставить("П5С304"		, "П001050030403");
	ИменаПоказателей.Вставить("П5С305"		, "П001050030503");
	ИменаПоказателей.Вставить("П5С306"		, "П001050030603");
	ИменаПоказателей.Вставить("П5С307"		, "П001050030703");
	ИменаПоказателей.Вставить("П5С308"		, "П001050030803");
	ИменаПоказателей.Вставить("П5С309"		, "П001050030903");
	ИменаПоказателей.Вставить("П5С310"		, "П001050031003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П5С300.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П5С300.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П5С300.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_6(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма убытка в стр.301 Приложения 5 = стр.101 (в полной сумме или частично) х КИУ ^ (Отчетный год - '") +
		НСтр("ru='год убытка по стр.101) Приложения 5. Аналогично рассчитываются стр.302 - 310 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка с учетом индексации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_7а(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.7а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.7а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Остаток неперенесенного убытка в стр.400 Приложения 5 = стр.100 + стр.250 Приложения 5, если '") +
		НСтр("ru='стр.250 Приложения 5 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма неперенесенного убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П5С400"		, "П001050040003");
	ИменаПоказателей.Вставить("П5С100"		, "П001050010003");
	ИменаПоказателей.Вставить("П5С250"		, "П001050025003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = Показатели.П5С100.Значение + Показатели.П5С250.Значение;
		Настройки.ЭтоОшибка = Показатели.П5С250.Значение > 0 И НЕ Показатели.П5С400.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П5С400.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_7б(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.7б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.7б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Остаток неперенесенного убытка в стр.400 Приложения 5 = стр.100 - (стр.301 / КИУ ^ (Отчетный год - '") +
		НСтр("ru='год убытка в стр.301) + аналогичные выражения по строкам 302 -310) Приложения 5, если стр.300 '") +
		НСтр("ru='Приложения 5 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма неперенесенного убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_6

&НаСервере
Процедура ПроверкаКС_9_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51, 333.52 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма убытка в стр.100 Приложения 6 должна быть равна сумме стр.101 - 109 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П6С100"		, "П00106М110003_");
	ИменаПоказателей.Вставить("П6С101"		, "П00106М110103_");
	ИменаПоказателей.Вставить("П6С102"		, "П00106М110203_");
	ИменаПоказателей.Вставить("П6С103"		, "П00106М110303_");
	ИменаПоказателей.Вставить("П6С104"		, "П00106М110403_");
	ИменаПоказателей.Вставить("П6С105"		, "П00106М110503_");
	ИменаПоказателей.Вставить("П6С106"		, "П00106М110603_");
	ИменаПоказателей.Вставить("П6С107"		, "П00106М110703_");
	ИменаПоказателей.Вставить("П6С108"		, "П00106М110803_");
	ИменаПоказателей.Вставить("П6С109"		, "П00106М110903_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П6С100.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П6С100.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П6С100.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П6С100.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_2(СтруктураРезультата)
	
	Перем Показатели1;
	Перем Показатели2;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51, 333.52 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение года в стр.101 - 109 Приложения 6 должно быть меньше значения года в стр.007 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 < %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный год сформированного убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей1 = Новый Структура;
	ИменаПоказателей1.Вставить("П6С101"		, "П00106М110101_");
	ИменаПоказателей1.Вставить("П6С102"		, "П00106М110201_");
	ИменаПоказателей1.Вставить("П6С103"		, "П00106М110301_");
	ИменаПоказателей1.Вставить("П6С104"		, "П00106М110401_");
	ИменаПоказателей1.Вставить("П6С105"		, "П00106М110501_");
	ИменаПоказателей1.Вставить("П6С106"		, "П00106М110601_");
	ИменаПоказателей1.Вставить("П6С107"		, "П00106М110701_");
	ИменаПоказателей1.Вставить("П6С108"		, "П00106М110801_");
	ИменаПоказателей1.Вставить("П6С109"		, "П00106М110901_");
	
	ИменаПоказателей2 = Новый Структура;
	ИменаПоказателей2.Вставить("П6С007"		, "П00106М100703_");
	
	СформироватьПоказатели(Показатели1, ИменаПоказателей1);
	СформироватьПоказатели(Показатели2, ИменаПоказателей2);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели2.П6С007.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			Настройки.ЭтоОшибка = Ложь;
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели2, Раздел2, XMLСтрока(Счетчик));
			ЗаполнитьИРасшифроватьПоказатели(Показатели1, Раздел2, XMLСтрока(Счетчик));
			
			Показатели2.П6С007.Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Показатели2.П6С007.Значение);
			Показатели2.П6С007.Значение = ?(Показатели2.П6С007.Значение = Неопределено, 0, Показатели2.П6С007.Значение);
				
			МассивГодов		= Новый Массив;
			МассивГодовСтр	= Новый Массив;
			
			Для каждого Показатель Из Показатели1 Цикл
				Показатель.Значение.Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Показатель.Значение.Значение);
				Показатель.Значение.Значение = ?(Показатель.Значение.Значение = Неопределено, 0, Показатель.Значение.Значение);
				Настройки.ЭтоОшибка = Настройки.ЭтоОшибка ИЛИ ЗначениеЗаполнено(Показатели2.П6С007.Значение) 
					И НЕ Показатель.Значение.Значение < Показатели2.П6С007.Значение;
				МассивГодов.Добавить(Показатель.Значение.Значение);
				МассивГодовСтр.Добавить(Показатель.Значение.ЗначениеСтр);
			КонецЦикла;
			
			СтрокаГодов = СтрСоединить(МассивГодовСтр, ", ");
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", СтрокаГодов);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели2.П6С007.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_3(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51, 333.52 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дополнительный доход в стр.600 Приложения 6 = стр.200 - стр.300 - стр.400 + стр.500 '") +
		НСтр("ru='Приложения 6, если результат вычисления > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дополнительного дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П6С600"		, "П00106М160003_");
	ИменаПоказателей.Вставить("П6С200"		, "П00106М120003_");
	ИменаПоказателей.Вставить("П6С300"		, "П00106М130003_");
	ИменаПоказателей.Вставить("П6С400"		, "П00106М140003_");
	ИменаПоказателей.Вставить("П6С500"		, "П00106М150003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П6С600.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = Макс(Показатели.П6С200.Значение - Показатели.П6С300.Значение - Показатели.П6С400.Значение 
				+ Показатели.П6С500.Значение, 0);
			Настройки.ЭтоОшибка = НЕ Показатели.П6С600.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П6С600.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_4(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51, 333.52 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Убыток в стр.650 Приложения 6 = стр.200 - стр.300 - стр.400 + стр.500 '") +
		НСтр("ru='Приложения 6, если результат вычисления < 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П6С650"		, "П00106М165003_");
	ИменаПоказателей.Вставить("П6С200"		, "П00106М120003_");
	ИменаПоказателей.Вставить("П6С300"		, "П00106М130003_");
	ИменаПоказателей.Вставить("П6С400"		, "П00106М140003_");
	ИменаПоказателей.Вставить("П6С500"		, "П00106М150003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П6С650.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = -Мин(Показатели.П6С200.Значение - Показатели.П6С300.Значение - Показатели.П6С400.Значение 
				+ Показатели.П6С500.Значение, 0);
			Настройки.ЭтоОшибка = НЕ Показатели.П6С650.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П6С650.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_5(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51, 333.52 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма убытка в стр.700 Приложения 6 должна быть равна сумме стр.701 - 709 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П6С700"		, "П00106М170003_");
	ИменаПоказателей.Вставить("П6С701"		, "П00106М170103_");
	ИменаПоказателей.Вставить("П6С702"		, "П00106М170203_");
	ИменаПоказателей.Вставить("П6С703"		, "П00106М170303_");
	ИменаПоказателей.Вставить("П6С704"		, "П00106М170403_");
	ИменаПоказателей.Вставить("П6С705"		, "П00106М170503_");
	ИменаПоказателей.Вставить("П6С706"		, "П00106М170603_");
	ИменаПоказателей.Вставить("П6С707"		, "П00106М170703_");
	ИменаПоказателей.Вставить("П6С708"		, "П00106М170803_");
	ИменаПоказателей.Вставить("П6С709"		, "П00106М170903_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П6С700.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П6С700.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П6С700.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П6С700.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_6(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51, 333.52 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если дополнительный доход в стр.600 Приложения 6 > 0, то стр.700 = стр.600 Приложения 6, либо '") +
		НСтр("ru='стр.700 = стр.100 Приложения 6 с учетом КИУ'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка с учетом индексации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_7(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51, 333.52 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма убытка в стр.701 Приложения 6 = стр.101 (в полной сумме или частично) х КИУ ^ (стр.007 - '") +
		НСтр("ru='год убытка по стр.101) Приложения 6. Аналогично рассчитываются стр.702 - 709 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка с учетом индексации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_8а(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.8а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.8а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51, 333.52 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма убытка в стр.800 Приложения 6 = стр.100 + стр.650 Приложения 6, если '") +
		НСтр("ru='стр.650 Приложения 6 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П6С800"		, "П00106М180003_");
	ИменаПоказателей.Вставить("П6С100"		, "П00106М110003_");
	ИменаПоказателей.Вставить("П6С650"		, "П00106М165003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		КолвоСтрок = КоличествоСтрок(Раздел2, Показатели.П6С800.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = Показатели.П6С100.Значение + Показатели.П6С650.Значение;
			Настройки.ЭтоОшибка = Показатели.П6С650.Значение > 0 И НЕ Показатели.П6С800.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П6С800.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_8б(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.8б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.8б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.51, 333.52 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма убытка в стр.800 Приложения 5 = стр.100 - (стр.701 / КИУ ^ (стр.007 - '") +
		НСтр("ru='год убытка в стр.701) + аналогичные выражения по строкам 702 -709) Приложения 5, если стр.600 '") +
		НСтр("ru='Приложения 6 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_7

&НаСервере
Процедура ПроверкаКС_10_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетная выручка в стр.100 Приложения 7 должна равняться стр.050 Раздела 2, '") +
		НСтр("ru='если Приложение 7 включено в отчет'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетной выручки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С100"		, "П001070010003");
	ИменаПоказателей.Вставить("Р2С050"		, "П000020005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
			
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Раздел2.Приложение7Включено) 
			И НЕ Показатели.П7С100.Значение = Показатели.Р2С050.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П7С100.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р2С050.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_2(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетные расходы в стр.200 Приложения 7 должны равняться стр.070 Раздела 2, '") +
		НСтр("ru='если Приложение 7 включено в отчет'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма расчетных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С200"		, "П001070020003");
	ИменаПоказателей.Вставить("Р2С070"		, "П000020007003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
			
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Раздел2.Приложение7Включено) 
			И НЕ Показатели.П7С200.Значение = Показатели.Р2С070.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П7С200.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Р2С070.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_3(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Предельные расходы в стр.400 Приложения 7 = стр.500 х стр.600 Приложения 7'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма предельных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С400"		, "П001070040003");
	ИменаПоказателей.Вставить("П7С500"		, "П001070050003");
	ИменаПоказателей.Вставить("П7С600"		, "П001070060003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П7С400.Округление = Истина;
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = Окр(Показатели.П7С500.Значение * Показатели.П7С600.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.П7С400.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П7С400.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_4а(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.4а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.4а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Количество добытой нефти в стр.500 Приложения 7 должно быть равно сумме стр.501 - 512 Приложения 7'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное количество добытой нефти'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С500"		, "П001070050003");
	ИменаПоказателей.Вставить("П7С501"		, "П001070050103");
	ИменаПоказателей.Вставить("П7С502"		, "П001070050203");
	ИменаПоказателей.Вставить("П7С503"		, "П001070050303");
	ИменаПоказателей.Вставить("П7С504"		, "П001070050403");
	ИменаПоказателей.Вставить("П7С505"		, "П001070050503");
	ИменаПоказателей.Вставить("П7С506"		, "П001070050603");
	ИменаПоказателей.Вставить("П7С507"		, "П001070050703");
	ИменаПоказателей.Вставить("П7С508"		, "П001070050803");
	ИменаПоказателей.Вставить("П7С509"		, "П001070050903");
	ИменаПоказателей.Вставить("П7С510"		, "П001070051003");
	ИменаПоказателей.Вставить("П7С511"		, "П001070051103");
	ИменаПоказателей.Вставить("П7С512"		, "П001070051203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П7С500.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П7С500.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П7С500.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_4б(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.4б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.4б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При заполнении отчета за 1 квартал стр.504 - 512 Приложения 7 должны быть равны 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное количество добытой нефти'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С504"		, "П001070050403");
	ИменаПоказателей.Вставить("П7С505"		, "П001070050503");
	ИменаПоказателей.Вставить("П7С506"		, "П001070050603");
	ИменаПоказателей.Вставить("П7С507"		, "П001070050703");
	ИменаПоказателей.Вставить("П7С508"		, "П001070050803");
	ИменаПоказателей.Вставить("П7С509"		, "П001070050903");
	ИменаПоказателей.Вставить("П7С510"		, "П001070051003");
	ИменаПоказателей.Вставить("П7С511"		, "П001070051103");
	ИменаПоказателей.Вставить("П7С512"		, "П001070051203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели);
		Настройки.ЭтоОшибка = ДанныеКС.МесОтчета = 3 И НЕ РасчетнаяСумма = 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_4в(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.4в'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.4в)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При заполнении отчета за 1 полугодие стр.507 - 512 Приложения 7 должны быть равны 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное количество добытой нефти'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С507"		, "П001070050703");
	ИменаПоказателей.Вставить("П7С508"		, "П001070050803");
	ИменаПоказателей.Вставить("П7С509"		, "П001070050903");
	ИменаПоказателей.Вставить("П7С510"		, "П001070051003");
	ИменаПоказателей.Вставить("П7С511"		, "П001070051103");
	ИменаПоказателей.Вставить("П7С512"		, "П001070051203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели);
		Настройки.ЭтоОшибка = ДанныеКС.МесОтчета = 6 И НЕ РасчетнаяСумма = 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_4г(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.4г'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.4г)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При заполнении отчета за 9 месяцев стр.510 - 512 Приложения 7 должны быть равны 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное количество добытой нефти'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С510"		, "П001070051003");
	ИменаПоказателей.Вставить("П7С511"		, "П001070051103");
	ИменаПоказателей.Вставить("П7С512"		, "П001070051203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели);
		Настройки.ЭтоОшибка = ДанныеКС.МесОтчета = 9 И НЕ РасчетнаяСумма = 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_5(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение удельных расходов в стр.600 Приложения 7 должно соответствовать значению, определенному '") +
		НСтр("ru='в соответствии с п.4 ст.333.55 НК РФ'"));
		Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение удельных расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С600"		, "П001070060003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	РасчетнаяСумма = УдельныеРасходы();
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.П7С600.Значение) И ЗначениеЗаполнено(РасчетнаяСумма) 
			И НЕ Показатели.П7С600.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П7С600.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_6(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Минимальная налоговая база в стр.700 Приложения 7 = стр.100 - стр.200 - стр.300 - стр.400 '") +
		НСтр("ru='Приложения 7, если результат вычисления > 0, иначе 0'"));
		Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма минимальной налоговой базы'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С700"		, "П001070070003");
	ИменаПоказателей.Вставить("П7С100"		, "П001070010003");
	ИменаПоказателей.Вставить("П7С200"		, "П001070020003");
	ИменаПоказателей.Вставить("П7С300"		, "П001070030003");
	ИменаПоказателей.Вставить("П7С400"		, "П001070040003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = Макс(Показатели.П7С100.Значение - Показатели.П7С200.Значение - Показатели.П7С300.Значение 
			- Показатели.П7С400.Значение, 0);
		Настройки.ЭтоОшибка = НЕ Показатели.П7С700.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П7С700.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_7(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Налоговая ставка в стр.800 Приложения 7 должна равняться ставке налога, установленной ст.333.54 НК РФ'"));
		Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная ставка налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С800"		, "П001070080003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	РасчетнаяСумма = СтавкаНалога();
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.П7С800.Значение) И НЕ Показатели.П7С800.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П7С800.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_8(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 7'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 7 (КС 10.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.333.55 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Минимальный налог в стр.900 Приложения 7 = стр.700 х стр.800 Приложения 7 / 100'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма минимального налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П7С900"		, "П001070090003");
	ИменаПоказателей.Вставить("П7С700"		, "П001070070003");
	ИменаПоказателей.Вставить("П7С800"		, "П001070080003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П7С900.Округление = Истина;
	
	Для каждого Раздел2 Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел2);
		
		РасчетнаяСумма = Окр(Показатели.П7С700.Значение * Показатели.П7С800.Значение / 100);
		Настройки.ЭтоОшибка = НЕ Показатели.П7С900.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П7С900.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КС_ФормированиеКонтекста

&НаСервере
Процедура СформироватьДанныеОтчета()
	
	ДанныеКС.Вставить("Отчет"		, СтруктураРеквизитовФормы.мСохраненныйДок);
	ДанныеКС.Вставить("ГодОтчета"	, Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания));
	ДанныеКС.Вставить("МесОтчета"	, Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания));
	СтруктураДанныхОтчета = ПолучитьДанныеОтчета(ДанныеКС.Отчет);
	ДанныеКС.Вставить("Раздел0"		, ПолучитьДанныеРаздела0(СтруктураДанныхОтчета));
	ДанныеКС.Вставить("Раздел1"		, ПолучитьДанныеРаздела1(СтруктураДанныхОтчета));
	ДанныеКС.Вставить("Раздел2"		, ПолучитьДанныеРаздела2(СтруктураДанныхОтчета));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчетаПРП()
	
	ОтчетПРП = Неопределено;
	
	ГодОтчета	= Год(ДанныеКС.Отчет.ДатаОкончания);
	МесяцОтчета	= Месяц(ДанныеКС.Отчет.ДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ГодОтчета"	, ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета"	, МесяцОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.Ссылка КАК Ссылка,
	|	ДокументРО.Вид КАК Вид,
	|	МЕСЯЦ(ДокументРО.ДатаОкончания) КАК Мес
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчетНДДУ""
	|	И ДокументРО.Организация = &Организация
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И МЕСЯЦ(ДокументРО.ДатаОкончания) < &МесяцОтчета
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Мес УБЫВ,
	|	Вид УБЫВ";
	
	Выборка	= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтчетПРП = Выборка.Ссылка;
	КонецЕсли;
	
	ДанныеКС.Вставить("ОтчетПРП"	, ОтчетПРП);
	СтруктураДанныхОтчетаПРП		= ПолучитьДанныеОтчета(ДанныеКС.ОтчетПРП);
	ДанныеКС.Вставить("Раздел2ПРП"	, ПолучитьДанныеРаздела2(СтруктураДанныхОтчетаПРП));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеЭлементаРаздела(ВнешнийЭлемент, 
										СтруктураДанных, 
										МногострочнаяЧасть = Ложь, 
										НомерСтроки = "", 
										НомерПриложения = 0)
	
	Если Не ВнешнийЭлемент.Данные = Неопределено Тогда
		Для каждого Элемент Из ВнешнийЭлемент.Данные Цикл
			
			СтрокаКлюча = ?(МногострочнаяЧасть, Элемент.Ключ + НомерСтроки, Элемент.Ключ);
			СтрокаКлюча = ?(СтрокаКлюча = "ПризнакВключения", "Приложение" + НомерПриложения + "Включено", СтрокаКлюча);
			СтруктураДанных.Вставить(СтрокаКлюча, Элемент.Значение);
		
		КонецЦикла;
	КонецЕсли; 
	
	Если Не ВнешнийЭлемент.ДанныеМногострочныхЧастей = Неопределено Тогда
		Для каждого Элемент Из ВнешнийЭлемент.ДанныеМногострочныхЧастей Цикл
			Для каждого ЭлементМнЧасти Из Элемент.Значение.Строки Цикл
				
				НомерТекущейСтроки = Элемент.Значение.Строки.Индекс(ЭлементМнЧасти) + 1;
				НомерСтрокиИтоговый = НомерСтроки + "_" + НомерТекущейСтроки;
				ПолучитьДанныеЭлементаРаздела(ЭлементМнЧасти, СтруктураДанных, Истина, НомерСтрокиИтоговый);
			
			КонецЦикла;
		КонецЦикла;
	КонецЕсли; 
	
	Для каждого Элемент Из ВнешнийЭлемент.Строки Цикл
	
		НомерРезультат = ВнешнийЭлемент.Строки.Индекс(Элемент) + 1;
		НомерПриложения = ?(НомерРезультат = 5 ИЛИ НомерРезультат = 7, НомерРезультат, НомерПриложения);
		ПолучитьДанныеЭлементаРаздела(Элемент, СтруктураДанных,,, НомерПриложения);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Р0", "Титульный лист");
	ПредставлениеРазделов.Вставить("Р1", "Раздела 1");
	ПредставлениеРазделов.Вставить("Р2", "Раздела 2");
	ПредставлениеРазделов.Вставить("П1", "Приложения 1 к Разделу 2");
	ПредставлениеРазделов.Вставить("П2", "Приложения 2 к Разделу 2");
	ПредставлениеРазделов.Вставить("П3", "Приложения 3 к Разделу 2");
	ПредставлениеРазделов.Вставить("П4", "Приложения 4 к Разделу 2");
	ПредставлениеРазделов.Вставить("П5", "Приложения 5 к Разделу 2");
	ПредставлениеРазделов.Вставить("П6", "Приложения 6 к Разделу 2");
	ПредставлениеРазделов.Вставить("П7", "Приложения 7 к Разделу 2");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Р0", "Титульный");
	РазделыПоказателей.Вставить("Р1", "Раздел1");
	РазделыПоказателей.Вставить("Р2", "Раздел2");
	РазделыПоказателей.Вставить("П1", "Приложение1");
	РазделыПоказателей.Вставить("П2", "Приложение2");
	РазделыПоказателей.Вставить("П3", "Приложение3");
	РазделыПоказателей.Вставить("П4", "Приложение4");
	РазделыПоказателей.Вставить("П5", "Приложение5");
	РазделыПоказателей.Вставить("П6", "Приложение6");
	РазделыПоказателей.Вставить("П7", "Приложение7");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	ПоляТитульногоЛиста = Новый Структура();
	ПоляТитульногоЛиста.Вставить("Р0С001", "Дата подписи");
	ПоляТитульногоЛиста.Вставить("Р0С002", "Отчетный год");
	
	ДанныеКС.Вставить("ПоляТитульногоЛиста", ПоляТитульногоЛиста);
	
	МногостраничныеРазделы = Новый Массив;
	
	ДанныеКС.Вставить("МногостраничныеРазделы", МногостраничныеРазделы);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р1");
	ЦелочисленныеРазделы.Добавить("Р2");
	ЦелочисленныеРазделы.Добавить("П2");
	ЦелочисленныеРазделы.Добавить("П5");
	ЦелочисленныеРазделы.Добавить("П6");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МассивПолейСписочныхЗначений = Новый Массив;
	МассивПолейСписочныхЗначений.Добавить("П00001М101000");
	МассивПолейСписочныхЗначений.Добавить("П00002М103003");
	МассивПолейСписочныхЗначений.Добавить("П00101М105503");
	МассивПолейСписочныхЗначений.Добавить("П00104М101003");
	МассивПолейСписочныхЗначений.Добавить("П00104М101203");
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПолейСписочныхЗначений.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОтчета(ОтчетСсылка)
	
	ДанныеОтчета = Неопределено;
	
	Если ОтчетСсылка = Неопределено Тогда
		Возврат ДанныеОтчета;
	КонецЕсли;
		
	ДанныеОтчета = ОтчетСсылка.ДанныеОтчета.Получить();
	
	Если ДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
		ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ДанныеОтчета);
	КонецЕсли;
	
	Возврат ДанныеОтчета;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеРаздела0(ДанныеОтчета)
	
	СтруктураР0 = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный);
	СтруктураР0.Вставить("Страница", 1);
	
	Возврат СтруктураР0;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеРаздела1(ДанныеОтчета)
	
	Раздел1 = ДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел1.Строки;
	Для каждого СтраницаР1 Из Раздел1 Цикл
		СтруктураР1 = Новый Структура;
		
		ПолучитьДанныеЭлементаРаздела(СтраницаР1, СтруктураР1);
		
	КонецЦикла;
	
	СтруктураР1.Вставить("Страница", 1);
	
	Возврат СтруктураР1;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеРаздела2(ДанныеОтчета)
	
	Раздел2Массив = Новый Массив;
	
	Если ДанныеОтчета = Неопределено Тогда
		Возврат Раздел2Массив;
	КонецЕсли;
	
	Раздел2 = ДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел2.Строки;
	Для каждого СтраницаР2 Из Раздел2 Цикл
		СтруктураР2 = Новый Структура;
		
		НомерСтраницы = Раздел2.Индекс(СтраницаР2) + 1;
		ПолучитьДанныеЭлементаРаздела(СтраницаР2, СтруктураР2);
		СтруктураР2.Вставить("Страница", НомерСтраницы);
		Раздел2Массив.Добавить(СтруктураР2);
		
	КонецЦикла;
	
	Возврат Раздел2Массив;
	
КонецФункции

&НаСервере
Функция СтавкаНалога()
	
	Возврат 50;
	
КонецФункции

&НаСервере
Функция КоэффициентИндексацииУбытка()
	
	Возврат 1.163;
	
КонецФункции

&НаСервере
Функция УдельныеРасходы()
	
	Если ДанныеКС.ГодОтчета >= 2021 Тогда
		Возврат 0;
	
	ИначеЕсли ДанныеКС.ГодОтчета >= 2019 Тогда
		Возврат 7140;
		
	Иначе
		Возврат 0;
	
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления	= Новый Массив;
		ПодстрокаРаздела	= "";
		ПодстрокаСтраницы	= "";
		
		ИндексРаздела		= Лев(Элемент.Ключ, 2);
		
		Если ИндексРаздела = "П2" Тогда
			ПодстрокаСтроки		= Сред(Элемент.Ключ, 4, 5);
			ПодстрокаДополнения	= Сред(Элемент.Ключ, 9, 1);
		Иначе
			ПодстрокаСтроки		= Сред(Элемент.Ключ, 4, 3);
			ПодстрокаДополнения	= Сред(Элемент.Ключ, 7, 1);
		КонецЕсли;
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексРаздела = "Р0" Тогда
			МассивПредставления.Добавить(ПодстрокаРаздела);
			ДанныеКС.ПоляТитульногоЛиста.Свойство(Элемент.Ключ, ПодстрокаСтроки);
			МассивПредставления.Добавить(ПодстрокаСтроки);
		Иначе
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
			МассивПредставления.Добавить(ПодстрокаРаздела);
			Если ПодстрокаДополнения = "П" Тогда
				МассивПредставления.Добавить("предыдущего отчетного периода");
			КонецЕсли;
		КонецЕсли;
		
		Представление		= СтрСоединить(МассивПредставления, " ");
		Многострочный		= СтрДлина(Элемент.Значение) = 14;
		Многостраничный		= НЕ ДанныеКС.МногостраничныеРазделы.Найти(ИндексРаздела) = Неопределено;
		Округление			= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многостраничный"	, Многостраничный);
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, СтруктураРеквизитовФормы.мСохраненныйДок);
	НоваяСтрока.СсылкаНаДокументРО		= ?(Лев(Показатель.ИмяПоказателя, 7) = Лев(Показатель.Синоним, 7), 
		Неопределено, НоваяСтрока.СсылкаНаДокументРО);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки = Неопределено, ОграничениеПоДлине = Истина)
	
	Перем ЗначениеВИсточнике;
	
	Если ЗначениеЗаполнено(НомерСтроки) Тогда
		Показатель.ИмяПоказателя = ?(ОграничениеПоДлине, Лев(Показатель.ИмяПоказателя, 14), Показатель.ИмяПоказателя) 
			+ XMLСтрока(НомерСтроки);
	КонецЕсли;
	
	Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
		Показатель.Страница = Источник.Страница;
		
		Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
			Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
				ЗначениеВИсточнике);
			Показатель.Итог = Показатель.Итог + Показатель.Значение;
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
			Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
			Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатели(Показатели, Источник)
	
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		Для каждого ЭлементМассива Из Источник Цикл
			ЗаполнитьПоказатели(Показатели, ЭлементМассива);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для каждого Элемент Из Показатели Цикл
		
		Если Элемент.Значение.Многострочный Тогда
			КоличествоСтрок = КоличествоСтрок(Источник, Лев(Элемент.Значение.ИмяПоказателя, 14));
			Если КоличествоСтрок = 0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			КоличествоСтрок = 1;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			Если Элемент.Значение.Многострочный Тогда
				Элемент.Значение.ИмяПоказателя = Лев(Элемент.Значение.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
			КонецЕсли;
				
			ЗаполнитьПоказатель(Элемент.Значение, Источник);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, НомерСтроки = Неопределено, 
	ОграничениеПоДлине = Истина)
	
	ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки, ОграничениеПоДлине);
		
	Если Показатель.Расшифровывать Тогда
		РасшифроватьПоказатель(Показатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, НомерСтроки = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
		Настройки.Вставить("ПредставлениеПоказателя", "");
		Настройки.Вставить("РасшифровкаСписка"		, "");
		
		Если Документирование Тогда
			
			Настройки.Вставить("НомерКС");
			Настройки.Вставить("Раздел");
			Настройки.Вставить("Условие");
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		СтрокаОписания.ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) 
			+ Настройки.ОписаниеКС;
		Возврат Настройки;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
				
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат(Знач Настройки, Знач СтруктураРезультата);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
		"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция КоличествоСтрок(Источник, ИмяПоказателя, ОграничениеПоДлине = Истина)
	
	Количество = 0;
	ИмяПоказателя = ?(ОграничениеПоДлине, Лев(ИмяПоказателя, 14), ИмяПоказателя);
	
	Пока Источник.Свойство(ИмяПоказателя + XMLСтрока(Количество + 1)) Цикл
		Количество = Количество + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Функция СуммаПоказателей(Показатели, КодПоказателя = "")
	
	Результат = 0;
	
	Для каждого Показатель Из Показатели Цикл
		Если НЕ ЗначениеЗаполнено(КодПоказателя) Тогда
			Результат = Результат + Показатель.Значение.Значение;
		ИначеЕсли СтрНайти(Показатель.Ключ, КодПоказателя) = 0 Тогда
			Продолжить;
		Иначе
			Результат = Результат + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыбратьЛистыРаздела2ПоКлючу(Раздел2, Показатели, ПоискПоЛицензии)
	
	МассивЛистов = Новый Массив;
	
	Если ПоискПоЛицензии Тогда
		Ключ = Показатели.Р2С013.Значение + Показатели.Р2С014.Значение + Показатели.Р2С015.Значение;
	Иначе
		Ключ = Показатели.Р2С020.Значение;
	КонецЕсли;
	
	Для каждого Раздел2ПРП Из ДанныеКС.Раздел2ПРП Цикл
		
		Если ПоискПоЛицензии Тогда
			ЗаполнитьПоказатель(Показатели.Р2С013, Раздел2ПРП);
			ЗаполнитьПоказатель(Показатели.Р2С014, Раздел2ПРП);
			ЗаполнитьПоказатель(Показатели.Р2С015, Раздел2ПРП);
			КлючПРП	= Показатели.Р2С013.Значение + Показатели.Р2С014.Значение + Показатели.Р2С015.Значение;
		Иначе
			ЗаполнитьПоказатель(Показатели.Р2С020, Раздел2ПРП);
			КлючПРП	= Показатели.Р2С020.Значение;
		КонецЕсли;
		
		Если Ключ = КлючПРП Тогда
			МассивЛистов.Добавить(Раздел2ПРП);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЛистов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции
