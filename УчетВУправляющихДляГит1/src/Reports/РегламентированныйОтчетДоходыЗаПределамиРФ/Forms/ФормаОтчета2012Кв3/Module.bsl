&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0000200100"; // многострочный раздел в Разделе 2
	
	СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1 = "П0000300070";
	СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2 = "П0000300080";
	СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3 = "П0000300090";
	
	СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1 = "П0000300110";
	СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2 = "П0000300120";
	СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3 = "П0000300130";
	
	КолИсхСтрокИдГруппы2 = 1;
	КолИсхСтрокИдГруппыСтр2_1 = 1;
	КолИсхСтрокИдГруппыСтр2_2 = 1;
	КолИсхСтрокИдГруппыСтр2_3 = 1;
	КолИсхСтрокИдГруппыСтр3_1 = 1;
	КолИсхСтрокИдГруппыСтр3_2 = 1;
	КолИсхСтрокИдГруппыСтр3_3 = 1;
                 	
	КолКолонокИдГруппы2 = 9;
	КолКолонокИдГруппыСтр2_1 = 8;
	КолКолонокИдГруппыСтр2_2 = 8;
	КолКолонокИдГруппыСтр2_3 = 8;
	КолКолонокИдГруппыСтр3_1 = 8;
	КолКолонокИдГруппыСтр3_2 = 8;
	КолКолонокИдГруппыСтр3_3 = 8;
	
	СтруктураДанныхТитульный = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3);
	
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3);
                                       
	// Структура содержит данные дополнительных страниц
    мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("ФизЛица", "ТаблицаСтраницыФизЛиц");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2", "ТаблицаСтраницыРаздела2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3", "ТаблицаСтраницыРаздела3");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел4", "ТаблицаСтраницыРаздела4");
	
	мСтруктураРаздел1_2 = Новый Структура;
	мСтруктураРаздел1_2.Вставить("Раздел1_2", "ТаблицаСтраницыРазделов1и2");
                                          	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, КолИсхСтрокИдГруппыСтр2_1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, КолИсхСтрокИдГруппыСтр2_2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, КолИсхСтрокИдГруппыСтр2_3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, КолИсхСтрокИдГруппыСтр3_1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, КолИсхСтрокИдГруппыСтр3_2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, КолИсхСтрокИдГруппыСтр3_3);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, КолКолонокИдГруппыСтр2_1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, КолКолонокИдГруппыСтр2_2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, КолКолонокИдГруппыСтр2_3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, КолКолонокИдГруппыСтр3_1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, КолКолонокИдГруппыСтр3_2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, КолКолонокИдГруппыСтр3_3);
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, "МногострочнаяЧасть");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, "МногострочнаяЧасть2");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, "МногострочнаяЧасть3");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, "МногострочнаяЧасть4");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, "МногострочнаяЧасть5");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, "МногострочнаяЧасть6");
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "20/09/2012";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1151024";
                     	
	СтруктураРеквизитовФормы.ОбязРазделов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ОбязРазделов.Добавить("Раздел4");
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить("СоставПоказателей2007Кв1", "Формат 3.00003", Истина);
		
	СтруктураРеквизитовФормы.КНД = "1151024";
	
	СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ О ДОХОДАХ, ПОЛУЧЕННЫХ РОССИЙСКОЙ ОРГАНИЗАЦИЕЙ ОТ ИСТОЧНИКОВ ЗА ПРЕДЕЛАМИ РОССИЙСКОЙ ФЕДЕРАЦИИ";
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2007Кв1";

	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;		
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыФизЛиц.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		
	СтрПерваяСтраница = ТаблицаСтраницыРаздела2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");	
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаДок");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3_Стр2_1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3_Стр2_2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3_Стр2_3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3_Стр3_1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3_Стр3_2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3_Стр3_3");
	СтруктураРеквизитовФормы.Вставить("мСоответствияМнгЧ");
	СтруктураРеквизитовФормы.Вставить("мИННБухгалтер");
	СтруктураРеквизитовФормы.Вставить("мИННДиректор");
	СтруктураРеквизитовФормы.Вставить("мИННУпПред");
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКодВЭДРаздел2");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мКодСтраныРаздел1");
	СтруктураРеквизитовФормы.Вставить("мКодСтраныРаздел2");
	СтруктураРеквизитовФормы.Вставить("мКодСтраныРаздел3");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
	СтруктураРеквизитовФормы.Вставить("мОргКодИМНС");
	СтруктураРеквизитовФормы.Вставить("мОргОГРН");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПериодРаздел2");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мРаздел1Пуст");
	СтруктураРеквизитовФормы.Вставить("мРаздел2Дата1");
	СтруктураРеквизитовФормы.Вставить("мРаздел2Дата2");
	СтруктураРеквизитовФормы.Вставить("мСведенияОДоходахДата1");
	СтруктураРеквизитовФормы.Вставить("мСведенияОДоходахДата2");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтавкаРаздел2");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мФизЛицИнд");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчетаДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("НеПоказыватьСтраницуМногостраничногоРазделаНаСервере");
	СтруктураРеквизитовФормы.Вставить("ОбязРазделов");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
										                                  
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020011004", "П000020010004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020011008", "П000020010008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020011009", "П000020010009");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030006005", "П000030007005;П000030008005;П000030009005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030006007", "П000030007007;П000030008007;П000030009007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030006008", "П000030007008;П000030008008;П000030009008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030010005", "П000030011005;П000030012005;П000030013005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030010007", "П000030011007;П000030012007;П000030013007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030010008", "П000030011008;П000030012008;П000030013008");
			
КонецПроцедуры

&НаСервере
Функция СформироватьПустойЛистФизЛиц()
	
	СтруктураДанныхПоля = Новый Структура;

	СтруктураДанныхПоля.Вставить("ФизЛицФИО",           "");
	СтруктураДанныхПоля.Вставить("ФизЛицСлТел",         "");
	СтруктураДанныхПоля.Вставить("ФизЛицДомТел",        "");
	СтруктураДанныхПоля.Вставить("ФизЛицДатаР",         "");
	СтруктураДанныхПоля.Вставить("ФизЛицМестоР",        "");
	СтруктураДанныхПоля.Вставить("ФизЛицПолМ",          "");
	СтруктураДанныхПоля.Вставить("ФизЛицПолЖ",          "");
	СтруктураДанныхПоля.Вставить("ФизЛицГражданство",   "");
	СтруктураДанныхПоля.Вставить("ФизЛицКодГражд",      "");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВид",        "");
	СтруктураДанныхПоля.Вставить("ФизЛицДок",           "");
	СтруктураДанныхПоля.Вставить("ФизЛицДокСерияНомер", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВыдан",      "");
	СтруктураДанныхПоля.Вставить("ФизЛицДокДата",       "");
	СтруктураДанныхПоля.Вставить("ФизЛицИнд",           "");
	СтруктураДанныхПоля.Вставить("ФизЛицСубъект",       "");
	СтруктураДанныхПоля.Вставить("ФизЛицС",             "");
	СтруктураДанныхПоля.Вставить("ФизЛицРайон",         "");
	СтруктураДанныхПоля.Вставить("ФизЛицГород",         "");
	СтруктураДанныхПоля.Вставить("ФизЛицНП",            "");
	СтруктураДанныхПоля.Вставить("ФизЛицУлица",         "");
	СтруктураДанныхПоля.Вставить("ФизЛицДом",           "");
	СтруктураДанныхПоля.Вставить("ФизЛицКорпус",        "");
	СтруктураДанныхПоля.Вставить("ФизЛицКвартира",      "");
	СтруктураДанныхПоля.Вставить("ФизЛицИноАдрес",      "");
		
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
    	
	мПустойОбразЛистаФЛ = СформироватьПустойЛистФизЛиц();
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
    	
	ЗагрузитьПоказателиИзМакета("ВидыДоходовЗаПределамиРФРаздел1");
	ЗагрузитьПоказателиИзМакета("ВидыДоходовЗаПределамиРФРаздел2");
	ЗагрузитьПоказателиИзМакета("ВидыДеятельностиДоходыЗаПределамиРФ");
	ЗагрузитьПоказателиИзМакета("ВидыРасходовДоходыЗаПределамиРФ");
	ЗагрузитьПоказателиИзМакета("СправочникиКлассификаторСтранМираПолучитьМакет");
				
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				
		НачальныеОперацииСМногострочнымиБлоками();

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;

			ТабличныйДокумент.Области["ВидДок"].Значение = "1";
			ТабличныйДокумент.Области.НомКоррект.Значение = "";
			НомерКорректировки = 0;

			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
						
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;

	ПоказатьПериод();
    
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда

		ЗаполнитьСведенияОбОрганизацииНаСервере();
		ЗаполнитьСведенияОбФЛ();
		
	КонецЕсли;
	
	ПолучитьИННКПП();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	ЗаполнитьДатуПодписи(ЭтаФорма);
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомКоррект.Значение = Строка(НомерКорректировки);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет("СоставПоказателей2007Кв1");
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета()

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения" + Символы.ПС + "о физ. лице";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел I";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел II";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел III";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел IV";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ИмяТабличногоПоля = "Раздел4" Тогда
		
		СтруктураДанныхПоля.Вставить("_ПП000040001004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040001004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040001005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040001005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040002004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040002004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040002005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040002005), "0", "1"));

		СтруктураДанныхПоля.Вставить("_ПП000040003005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040003005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040004004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040004004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040004005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040004005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040005004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040005004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040005005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040005005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040006004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040006004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040006005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040006005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040007004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040007004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040007005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040007005), "0", "1"));

		СтруктураДанныхПоля.Вставить("_ПП000040008005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040008005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040009004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040009004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040009005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040009005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040010004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040010004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040010005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040010005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040011004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040011004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040011005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040011005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040012004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040012004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040012005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040012005), "0", "1"));

		СтруктураДанныхПоля.Вставить("_ПП000040013005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040013005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040014004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040014004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040014005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040014005), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040015004", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040015004), "0", "1"));
		СтруктураДанныхПоля.Вставить("_ПП000040015005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040015005), "0", "1"));

		СтруктураДанныхПоля.Вставить("_ПП000040016005", ?(ПустаяСтрока(СтруктураДанныхПоля.П000040016005), "0", "1"));
		
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияРазделСведенияОДоходах(Форма)

	Форма.СтруктураРеквизитовФормы.мСведенияОДоходахДата1 = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	Форма.СтруктураРеквизитовФормы.мСведенияОДоходахДата2 = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияРаздел2(Форма)

	Форма.СтруктураРеквизитовФормы.мПериодРаздел2 = "";
	Форма.СтруктураРеквизитовФормы.мСтавкаРаздел2 = ""; // по согласованию
	Форма.СтруктураРеквизитовФормы.мКодВЭДРаздел2 = "";

	Форма.СтруктураРеквизитовФормы.мРаздел2Дата1 = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	Форма.СтруктураРеквизитовФормы.мРаздел2Дата2 = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
                                        
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиИзМакета(РазделВМакете)
    		
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2007Кв1");
	
	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "ВидыДоходовЗаПределамиРФРаздел1" Тогда
					НовСтрока = мВидыДоходовЗаПределамиРФРаздел1.Добавить();
				КонецЕсли;

				Если РазделВМакете = "ВидыДоходовЗаПределамиРФРаздел2" Тогда
					НовСтрока = мВидыДоходовЗаПределамиРФРаздел2.Добавить();
				КонецЕсли;

				Если РазделВМакете = "ВидыДеятельностиДоходыЗаПределамиРФ" Тогда
					НовСтрока = мВидыДеятельностиДоходыЗаПределамиРФ.Добавить();
				КонецЕсли;

				Если РазделВМакете = "ВидыРасходовДоходыЗаПределамиРФ" Тогда
					НовСтрока = мВидыРасходовДоходыЗаПределамиРФ.Добавить();
				КонецЕсли;

				Если РазделВМакете = "СправочникиКлассификаторСтранМираПолучитьМакет" Тогда
					НовСтрока = мОКСМ.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3_Стр2_1", СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1);
	ИдГрупп.Вставить("мИдГруппы3_Стр2_2", СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2);
	ИдГрупп.Вставить("мИдГруппы3_Стр2_3", СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3);
	ИдГрупп.Вставить("мИдГруппы3_Стр3_1", СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1);
	ИдГрупп.Вставить("мИдГруппы3_Стр3_2", СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2);
	ИдГрупп.Вставить("мИдГруппы3_Стр3_3", СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3_Стр2_1", СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1);
	ИдГрупп.Вставить("мИдГруппы3_Стр2_2", СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2);
	ИдГрупп.Вставить("мИдГруппы3_Стр2_3", СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3);
	ИдГрупп.Вставить("мИдГруппы3_Стр3_1", СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1);
	ИдГрупп.Вставить("мИдГруппы3_Стр3_2", СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2);
	ИдГрупп.Вставить("мИдГруппы3_Стр3_3", СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "ПолеТабличногоДокументаРаздел2";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы3_Стр2_1
		  ИЛИ ИдГруппы = ИдГрупп.мИдГруппы3_Стр2_2
		  ИЛИ ИдГруппы = ИдГрупп.мИдГруппы3_Стр2_3
		  ИЛИ ИдГруппы = ИдГрупп.мИдГруппы3_Стр3_1
		  ИЛИ ИдГруппы = ИдГрупп.мИдГруппы3_Стр3_2
		  ИЛИ ИдГруппы = ИдГрупп.мИдГруппы3_Стр3_3 Тогда
		
		ТекТабличноеПоле = "ПолеТабличногоДокументаРаздел3";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем СтруктураРаздел1_2;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий		   	                              = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	       	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
    
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
                                								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	    	
	СтруктураРаздел1_2 = Новый Структура;
	Если СписокСохранения.Свойство("Раздел1_2", СтруктураРаздел1_2) Тогда
						                                                  		
		Для Каждого ЭлементСтруктуры Из СтруктураРаздел1_2 Цикл
			
			Если ЭлементСтруктуры.Ключ = "Раздел1_2" Тогда
				
				Для Каждого ЭлементРаздела1_2 Из ЭлементСтруктуры.Значение Цикл
					
					ДанныеОбИсточнике = Новый СписокЗначений;
						
					ДанныеОбИсточнике.Добавить(ЭлементРаздела1_2.ДанныеОбИсточнике);
					
					ЭлементРаздела1_2.ДанныеОбИсточнике = ДанныеОбИсточнике;
										
					СведенияОДоходах = Новый СписокЗначений;
					
					Для Каждого ЭлементМассива Из ЭлементРаздела1_2.СведенияОдоходах Цикл
						
						СведенияОДоходах.Добавить(ЭлементМассива);
						
					КонецЦикла;
					
					ЭлементРаздела1_2.СведенияОдоходах = СведенияОДоходах;
										
				КонецЦикла;
											
				ТаблСтрРазделов1и2 = ЭтаФорма["ТаблицаСтраницыРазделов1и2"];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ТаблСтрРазделов1и2);
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	      
	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл	
		
		Если Раздел.ИмяСтраницы = "Раздел1"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел1_2" Тогда
		 
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	ВосстановитьСведенияОФизическихЛицахИзЛистаФизЛицаСтарогоОбразца();
		
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
    		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомКвартал1" Тогда
			СтруктураДанныхТитульный.Вставить("НомКвартал");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.НомКвартал = СокрЛП(СтруктураДанныхТитульный.НомКвартал) + ПоказателиТаблПоле["НомКвартал" + Ном];
				СтруктураДанныхТитульный.Удалить("НомКвартал" + Ном);
			КонецЦикла;					
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРН");
			Для Ном = 1 По 13 Цикл
				СтруктураДанныхТитульный.ОГРН = СокрЛП(СтруктураДанныхТитульный.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРН" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;				
		ИначеЕсли ИмяПоказателя = "ИННРук1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННРук");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННРук = СокрЛП(СтруктураДанныхТитульный.ИННРук) + ПоказателиТаблПоле["ИННРук" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННРук" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "ИННГБ1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННГБ");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННГБ = СокрЛП(СтруктураДанныхТитульный.ИННГБ) + ПоказателиТаблПоле["ИННГБ" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННГБ" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ИННУП1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННУП");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННУП = СокрЛП(СтруктураДанныхТитульный.ИННУП) + ПоказателиТаблПоле["ИННУП" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННУП" + Ном);
			КонецЦикла;				
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОФизическихЛицахИзЛистаФизЛицаСтарогоОбразца()
	
	Для Каждого ЭлементТабл Из ЭтаФорма[мСтруктураМногостраничныхРазделов.ФизЛица] Цикл
		
		ЭлементТабл.АктивнаяСтраница = Ложь;
		
		ПоказателиТаблПоле = ЭлементТабл.Данные[0].Значение;
		
		СтруктураДанныхФизЛица = ЭлементТабл.Данные[0].Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "ФизЛицКодГражд1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицКодГражд");
				Для Ном = 1 По 3 Цикл
					СтруктураДанныхФизЛица.ФизЛицКодГражд = СокрЛП(СтруктураДанныхФизЛица.ФизЛицКодГражд) + ПоказателиТаблПоле["ФизЛицКодГражд" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицКодГражд" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ФизЛицДок1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДок");
				Для Ном = 1 По 2 Цикл
					СтруктураДанныхФизЛица.ФизЛицДок = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДок) + ПоказателиТаблПоле["ФизЛицДок" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДок" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ФизЛицДокДата1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДокДата");
				Для Ном = 1 По 8 Цикл
					СтруктураДанныхФизЛица.ФизЛицДокДата = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДокДата) + ПоказателиТаблПоле["ФизЛицДокДата" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДокДата" + Ном);
				КонецЦикла;	
				ДатаСтр = Сред(СтруктураДанныхФизЛица.ФизЛицДокДата, 5) + Сред(СтруктураДанныхФизЛица.ФизЛицДокДата, 3, 2) + Лев(СтруктураДанныхФизЛица.ФизЛицДокДата, 2);
				СтруктураДанныхФизЛица.ФизЛицДокДата = Дата(?(ЗначениеЗаполнено(ДатаСтр), ДатаСтр, '00010101'));
			ИначеЕсли ИмяПоказателя = "ФизЛицИнд1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицИнд");
				Для Ном = 1 По 6 Цикл
					СтруктураДанныхФизЛица.ФизЛицИнд = СокрЛП(СтруктураДанныхФизЛица.ФизЛицИнд) + ПоказателиТаблПоле["ФизЛицИнд" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицИнд" + Ном);
				КонецЦикла;		
			ИначеЕсли ИмяПоказателя = "ФизЛицС1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицС");
				Для Ном = 1 По 2 Цикл
					СтруктураДанныхФизЛица.ФизЛицС = СокрЛП(СтруктураДанныхФизЛица.ФизЛицС) + ПоказателиТаблПоле["ФизЛицС" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицС" + Ном);
				КонецЦикла;			
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, Знач НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;
		
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НаимРаздела = "Раздел1_2" Тогда
			НаимРаздела = "Раздел1";
		КонецЕсли;
				
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);		
		
		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = Форма[СтруктураГруппы];
				
				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=")];
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()

	НомерМесяца = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");

	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
		
		ТабличныйДокумент.Области.НалогПериод.Значение = "1";
		
		ТабличныйДокумент.Области.НомКвартал.Значение = Формат(Число(?(НомерМесяца = "0", "12", НомерМесяца)), "ЧЦ=2; ЧВН=");
		
		СтруктураРеквизитовФормы.СтрПериодОтчета = РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Ложь");
		
	Иначе

		ТабличныйДокумент.Области.НомКвартал.Значение = Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН=");

		Если НомерКвартала = "4" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "0";
		КонецЕсли;
		
		Если НомерКвартала = "3" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "9";
		КонецЕсли;
		
		Если НомерКвартала = "2" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "6";
		КонецЕсли;

		Если НомерКвартала = "1" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "3";
		КонецЕсли;
		
		СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
		        
	КонецЕсли;
	
	ТабличныйДокумент.Области.ОтчетГод.Значение = НомерГода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН

		Сведения.Добавить("", "КППЮЛ"); // КПП

		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

		Сведения.Добавить("", "ОГРН"); // ОГРН

		Сведения.Добавить("", "ОКАТО"); // ОКАТО

		Сведения.Добавить("", "КодНО");  // Код Налогового Органа

		Сведения.Добавить("", "НаимНО"); // Наименование НО

		Сведения.Добавить("", "ТипНП");      // ТипНП

		Сведения.Добавить("", "ТелОрганизации");

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ИННРук"); // ИНН руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера
	Сведения.Добавить("", "ФИОУпПред");  // ФИО уполномоченного представителя
	Сведения.Добавить("", "ИННУпПред");  // ИНН уполномоченного представителя

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		КодНО = ОргСведения.КодНО;
		КПП   = ОргСведения.КППЮЛ;
	Иначе
		КодНО = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
		КПП   = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1");
	КонецЕсли;
	ДанныеПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Ложь, КодНО, КПП);
				
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		// Инициализируем переменные
		ИННЮЛ     = "";
		КППЮЛ     = "";
		НаимЮЛПол = "";
		ОГРН      = "";
		ОКАТО     = "";
		КодНО     = "";
		НаимНО    = "";
		ТипНП     = "";
		ТелОрганизации = "";

	КонецЕсли;

	ФИОРук    = "";
	ИННРук    = "";
	ФИОБух    = "";
	ИННБух    = "";
	ФИОУпПред = "";
	ИННУпПред = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОГРН", ОГРН);
		ОргСведения.Свойство("ОКАТО", ОКАТО);
		ОргСведения.Свойство("КодНО", КодНО);
		ОргСведения.Свойство("НаимНО", НаимНО);
		ОргСведения.Свойство("ТипНП", ТипНП);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ИННРук", ИННРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ИННБух", ИННБух);
	ОргСведения.Свойство("ФИОУпПред", ФИОУпПред);
	ОргСведения.Свойство("ИННУпПред", ИННУпПред);

	ФИОУпПред = ДанныеПредставителя.ФИОУпПред;
	ИННУпПред = ДанныеПредставителя.ИННУпПред;

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение  = ФИОРук;
		Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
		Форма.ТабличныйДокумент.Области.ОргУП.Значение        = ФИОУпПред;
		Форма.ТабличныйДокумент.Области.ИННРук.Значение       = ИННРук;
		Форма.ТабличныйДокумент.Области.ИННГБ.Значение        = ИННБух;
		Форма.ТабличныйДокумент.Области.ИННУП.Значение        = ИННУпПред;

		Форма.СтруктураРеквизитовФормы.мИННДиректор  = ИННРук;
		Форма.СтруктураРеквизитовФормы.мИННБухгалтер = ИННБух;
		Форма.СтруктураРеквизитовФормы.мИННУпПред    = ИННУпПред;

		Возврат;
	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.мТелОрганизации = ТелОрганизации;

	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = "            ";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(КППЮЛ) Тогда
		КППЮЛ = "";
	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;

	КППЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КППЮЛ, 9, " ");
	Форма.СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;
		
	Форма.ТабличныйДокумент.Области.ИНН1.Значение = ИННЮЛ;
	Форма.ТабличныйДокумент.Области.КПП1.Значение = КППЮЛ;

	// Работаем с названием ЮЛ
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		Форма.ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с ФИО руководителя
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргДиректор.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
	КонецЕсли;

	// Работаем с ИНН руководителя
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННДиректор)) Тогда
		Форма.ТабличныйДокумент.Области.ИННРук.Значение = ИННРук;
		Форма.СтруктураРеквизитовФормы.мИННДиректор = ИННРук;
	КонецЕсли;

	// Работаем с ФИО бухгалтера
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

	// Работаем с ИНН бухгалтера
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННБухгалтер)) Тогда
		Форма.ТабличныйДокумент.Области.ИННГБ.Значение = ИННБух;
		Форма.СтруктураРеквизитовФормы.мИННБухгалтер = ИННБух;
	КонецЕсли;

	// Работаем с ОГРН
	Если (ТипНП <> 3) И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мОргОГРН))) Тогда
		ОГРН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОГРН, 13, " ");
		Форма.ТабличныйДокумент.Области.ОГРН.Значение = ОГРН;
		Форма.СтруктураРеквизитовФормы.мОргОГРН = ОГРН;
	КонецЕсли;

	Если (ТипНП = 3) И (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда

		Форма.ТабличныйДокумент.Области.ОГРН.Значение = "            ";
		Форма.СтруктураРеквизитовФормы.мОргОГРН = "";

	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мОргКодИМНС)) Тогда
		КодНО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КодНО, 4, " ");
		Форма.ТабличныйДокумент.Области.КодИМНС.Значение = КодНО;
		Форма.СтруктураРеквизитовФормы.мОргКодИМНС = КодНО;
	КонецЕсли;

	// Работаем с наименованием инспекции
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргИМНС.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ОргИМНС.Значение = НаимНО;
	КонецЕсли;

	// Работаем с ФИО уполномоченного представителя
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргУП.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ОргУП.Значение = ФИОУпПред;
	КонецЕсли;

	// Работаем с ИНН уполномоченного представителя
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННУпПред)) Тогда
		ИННУпПред = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННУпПред, 12, " ");
		Форма.ТабличныйДокумент.Области.ИННУП.Значение = ИННУпПред;
		Форма.СтруктураРеквизитовФормы.мИННУпПред = ИННУпПред;
	КонецЕсли;

	Если (НЕ Форма.СтруктураРеквизитовФормы.мДокументВосстановлен) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		ЗаполнитьДатуПодписи(Форма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбФЛ(СмениласьДатаПодписания = Ложь)

	Перем ТаблицаСтраницРаздела;
    
	Если (СтруктураРеквизитовФормы.Организация  = Неопределено) Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННДиректор) Тогда

		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации
		// СведенияФЛ.Добавить("", "ТелРукДом"); // телефон руководителя ДОМАШНИЙ

		СписокПоказателей.Добавить("", "ВидУдЛичнРук"); // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");
		СписокПоказателей.Добавить("", "ДатаРождРук");
		СписокПоказателей.Добавить("", "МестоРождРук");
		СписокПоказателей.Добавить("", "ПолРук");
		СписокПоказателей.Добавить("", "ГраждРук");

		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");
		СписокПоказателей.Добавить("", "ГраждСтранаРук");
	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаРождБух");
		СписокПоказателей.Добавить("", "МестоРождБух");
		СписокПоказателей.Добавить("", "ПолБух");
		СписокПоказателей.Добавить("", "ГраждБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");
		СписокПоказателей.Добавить("", "ГраждСтранаБух");

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННУпПред) Тогда
		// Получим данные о УП
		СписокПоказателей.Добавить("", "ФИОУпПред");
		СписокПоказателей.Добавить("", "ТелУпПред");

		СписокПоказателей.Добавить("", "ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("", "КодУдЛичнУпПред");
		СписокПоказателей.Добавить("", "СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("", "НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаРождУпПред");
		СписокПоказателей.Добавить("", "МестоРождУпПред");
		СписокПоказателей.Добавить("", "ПолУпПред");
		СписокПоказателей.Добавить("", "ГраждУпПред");

		СписокПоказателей.Добавить("", "ИндексМЖУпПред");
		СписокПоказателей.Добавить("", "СубъектМЖУпПред");
		СписокПоказателей.Добавить("", "КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("", "РайонМЖУпПред");
		СписокПоказателей.Добавить("", "ГородМЖУпПред");
		СписокПоказателей.Добавить("", "НПунктМЖУпПред");
		СписокПоказателей.Добавить("", "УлицаМЖУпПред");
		СписокПоказателей.Добавить("", "ДомМЖУпПред");
		СписокПоказателей.Добавить("", "КорпусМЖУпПред");
		СписокПоказателей.Добавить("", "КвартираМЖУпПред");
		СписокПоказателей.Добавить("", "ГраждСтранаУпПред");
		// Инициализируем данные о УП
	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СписокПоказателей);

	ТаблицаСтраницРаздела = Неопределено;
	Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	ОписаниеТиповСтрока254 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	Если СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СмениласьДатаПодписания
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда

		ТаблицаСтраницРаздела.Очистить();
		СтрПервая = ТаблицаСтраницРаздела.Добавить();
		СтрПервая.Представление = "Новая страница";
		СтрПервая.АктивнаяСтраница = Истина;
		СтрПервая.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
		СтрПервая.АвтоматическоеПредставление = Истина;

	ИначеЕсли (НЕ (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания)) Тогда

		// Если документ новый, то в первый лист ФЛ запишем пустой образ листа ФЛ
		Если Не СтруктураРеквизитовФормы.мДокументВосстановлен Тогда
			ТаблицаСтраницРаздела[0].Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННДиректор) Тогда

		ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
		
        ФИОДиректора = ПолеТабличногоДокументаТитульный.Области.ОргДиректор.Значение;
		
		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицФИО = ФИОДиректора Тогда	
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 1,, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННБухгалтер) Тогда

		ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
		
		ФИОБухгалтера = ПолеТабличногоДокументаТитульный.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицФИО = ФИОБухгалтера Тогда	
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 2,, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННУпПред) Тогда
		Попытка
			
			ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
			
			ФИООргУП = ПолеТабличногоДокументаТитульный.Области.ОргУП.Значение;

		Если НЕ ПустаяСтрока(ФИООргУП) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицФИО = ФИООргУП Тогда	
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 3,, ТаблицаСтраницРаздела, ТекИндекс);
		КонецЕсли;

		Исключение
		КонецПопытки;

	КонецЕсли;

	АктивнаяСтр = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если АктивнаяСтр.Количество() > 0 Тогда
		
		АктивнаяСтр = АктивнаяСтр[0];

		Шаг = ТаблицаСтраницРаздела.Индекс(АктивнаяСтр);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КППЮЛ, 9, " ");

	СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;
	СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;

	СтруктураРеквизитовФормы.мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", СтруктураРеквизитовФормы.мТелОрганизации);

КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		// установим цвет ячейки
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
			
			Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда
			// тут убирать цвет уячеек на этом листе
			
			КонецЕсли;

			Если ВариантЗаполнения = 4 Тогда
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
			Иначе
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
			КонецЕсли;

			Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
			
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
        				
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
						
	КонецЕсли;
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// задаем значение ячейки
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ИмяОбласти = СтруктураРеквизитовФормы.мСоответствияМнгЧ[ИмяГруппы];
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(ИмяОбласти);
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области[ИмяОбласти].Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Постфикс = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Постфикс;
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ИмяОбласти].Верх, , ТекТабличноеПоле.Области[ИмяОбласти].Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = ИмяОбласти;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьОбластьВТабличныйДокументНаСервере(ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
		
		НомНовойСтрокиСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		НомИсходнойСтроки = НомНовойСтроки - 1;
		НомИсходнойСтрокиСтр = Формат(НомИсходнойСтроки, "ЧГ=");
		
		НомерГрафы = 1;
		
		КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// определяем имя первой ячейки последней из исходных строк
		ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + НомИсходнойСтрокиСтр;
		
		// область первой ячейки последней из исходных строк
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
		
		// номера строк исходной области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
		
		// номера строк вставляемой области
		НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
		НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		                            		
		// переопределяем имена вставленной области
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");	
			
			// переопределяем имена вставленной области
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяОбластиЯчейки    = КолонкаТаблицыИмя + "_" + НомИсходнойСтрокиСтр;
				ИмяНовОбластиЯчейки = КолонкаТаблицыИмя + "_" + НомНовойСтрокиСтр;
				
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				
				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				
				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					
					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
		
	КонецЕсли;

	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПериодРаздел2", СтруктураРеквизитовФормы.мПериодРаздел2);
	ПеременныеМодуля.Вставить("мСтавкаРаздел2", СтруктураРеквизитовФормы.мСтавкаРаздел2);
	ПеременныеМодуля.Вставить("мКодВЭДРаздел2", СтруктураРеквизитовФормы.мКодВЭДРаздел2);
	ПеременныеМодуля.Вставить("мРаздел2Дата1",  СтруктураРеквизитовФормы.мРаздел2Дата1);
	ПеременныеМодуля.Вставить("мРаздел2Дата2",  СтруктураРеквизитовФормы.мРаздел2Дата2);
	ПеременныеМодуля.Вставить("мСведенияОДоходахДата1", СтруктураРеквизитовФормы.мСведенияОДоходахДата1);
	ПеременныеМодуля.Вставить("мСведенияОДоходахДата2", СтруктураРеквизитовФормы.мСведенияОДоходахДата2);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПериодРаздел2 = ПеременныеМодуля.мПериодРаздел2;
	СтруктураРеквизитовФормы.мСтавкаРаздел2 = ПеременныеМодуля.мСтавкаРаздел2;
	СтруктураРеквизитовФормы.мКодВЭДРаздел2 = ПеременныеМодуля.мКодВЭДРаздел2;
	СтруктураРеквизитовФормы.мРаздел2Дата1  = ПеременныеМодуля.мРаздел2Дата1;
	СтруктураРеквизитовФормы.мРаздел2Дата2  = ПеременныеМодуля.мРаздел2Дата2;
	СтруктураРеквизитовФормы.мСведенияОДоходахДата1 = ПеременныеМодуля.мСведенияОДоходахДата1;
	СтруктураРеквизитовФормы.мСведенияОДоходахДата2 = ПеременныеМодуля.мСведенияОДоходахДата2;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПериодРаздел2", СтруктураРеквизитовФормы.мПериодРаздел2);
	ПеременныеМодуля.Вставить("мСтавкаРаздел2", СтруктураРеквизитовФормы.мСтавкаРаздел2);
	ПеременныеМодуля.Вставить("мКодВЭДРаздел2", СтруктураРеквизитовФормы.мКодВЭДРаздел2);
	ПеременныеМодуля.Вставить("мРаздел2Дата1",  СтруктураРеквизитовФормы.мРаздел2Дата1);
	ПеременныеМодуля.Вставить("мРаздел2Дата2",  СтруктураРеквизитовФормы.мРаздел2Дата2);
	ПеременныеМодуля.Вставить("мСведенияОДоходахДата1", СтруктураРеквизитовФормы.мСведенияОДоходахДата1);
	ПеременныеМодуля.Вставить("мСведенияОДоходахДата2", СтруктураРеквизитовФормы.мСведенияОДоходахДата2);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПериодРаздел2 = ПеременныеМодуля.мПериодРаздел2;
	СтруктураРеквизитовФормы.мСтавкаРаздел2 = ПеременныеМодуля.мСтавкаРаздел2;
	СтруктураРеквизитовФормы.мКодВЭДРаздел2 = ПеременныеМодуля.мКодВЭДРаздел2;
	СтруктураРеквизитовФормы.мРаздел2Дата1  = ПеременныеМодуля.мРаздел2Дата1;
	СтруктураРеквизитовФормы.мРаздел2Дата2  = ПеременныеМодуля.мРаздел2Дата2;
	СтруктураРеквизитовФормы.мСведенияОДоходахДата1 = ПеременныеМодуля.мСведенияОДоходахДата1;
	СтруктураРеквизитовФормы.мСведенияОДоходахДата2 = ПеременныеМодуля.мСведенияОДоходахДата2;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "ПериодРаздел2" Тогда
		ПеременныеМодуля.мПериодРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
		
	ИначеЕсли ИмяПоказателя = "СтавкаРаздел2" Тогда
		ПеременныеМодуля.мСтавкаРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
		
	ИначеЕсли ИмяПоказателя = "КодВЭДРаздел2" Тогда
		ПеременныеМодуля.мКодВЭДРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "Раздел2Дата1" Тогда
		ПеременныеМодуля.мРаздел2Дата1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
		
	ИначеЕсли ИмяПоказателя = "Раздел2Дата2" Тогда
		ПеременныеМодуля.мРаздел2Дата2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СведенияОДоходахДата1" Тогда
		ПеременныеМодуля.мСведенияОДоходахДата1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СведенияОДоходахДата2" Тогда
		ПеременныеМодуля.мСведенияОДоходахДата2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
		
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			                                     			
			Если ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
				
				Если Форма["ТаблицаСтраницыРазделов1и2"].Количество() > 0 Тогда
					ДанныеОбИсточникеКоличество = Форма["ТаблицаСтраницыРазделов1и2"].Количество();
				Иначе
					ДанныеОбИсточникеКоличество = 1;
				КонецЕсли;
				
				ЭлементРазделовОтчета.ИндексКартинки        = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницы = 1 По ДанныеОбИсточникеКоличество Цикл
					
					ИсточникДохода = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ИсточникДохода.КолонкаРазделыОтчета              = "Источник"+Символы.ПС+"дохода " + НомерСтраницы;
					ИсточникДохода.КолонкаРазделыОтчетаСокрНаим      = "Раздел1";
					ИсточникДохода.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
					ИсточникДохода.ИндексКартинки                    = 0;
					ИсточникДохода.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ИсточникДохода.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					Если Форма["ТаблицаСтраницыРазделов1и2"].Количество() > 0 Тогда
						СведенияОДоходахКоличество = Форма["ТаблицаСтраницыРазделов1и2"][НомерСтраницы - 1].СведенияОДоходах.Количество();
					Иначе
						СведенияОДоходахКоличество = 1;
					КонецЕсли;
					
					Для НомерСтраницыСведенияОДоходах = 1 По СведенияОДоходахКоличество Цикл
						
						СведенияОДходах = ИсточникДохода.ПолучитьЭлементы().Добавить();
						
						СведенияОДходах.КолонкаРазделыОтчета              = "Сведения"+Символы.ПС+"о доходах " + НомерСтраницыСведенияОДоходах;
						СведенияОДходах.КолонкаРазделыОтчетаСокрНаим      = "Раздел1_2";
						СведенияОДходах.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыСведенияОДоходах;
						СведенияОДходах.ИндексКартинки                    = 1;
						СведенияОДходах.РазделМногостраничный             = ИсточникДохода.РазделМногостраничный;
						СведенияОДходах.РазделМногострочный               = ИсточникДохода.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			    			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
							
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Функция ВозвратитьПустойОбразЛистаФЛ()

	СтруктураДанных = Новый Структура;

	Для Каждого Стр из мПустойОбразЛистаФЛ Цикл
		СтруктураДанных.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;

	Возврат СтруктураДанных;

КонецФункции

&НаСервере
Процедура ВыводДанныхОФизическомЛице(Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь, ТаблицаСтраницРазделаМ, ИндексВТабл);

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";
	Гражд = "";
	ГраждСтрана = "";

	Пол = 0;

	ДатаРожд = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));

	// Для УП
	Если ТипДанных = 3 Тогда
		КПП = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1");
		КодНО = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
		ДанныеПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(ЭтаФорма.СтруктураРеквизитовФормы.Организация, ЭтаФорма.ДатаПодписи, Ложь, КодНО, КПП);
		ЗаполнитьЗначенияСвойств(Данные, ДанныеПредставителя);
	КонецЕсли;

	Данные.Свойство(?(ТипДанных = 1,"ФИОРук", ?(ТипДанных = 2, "ФИОБух", ?(ТипДанных = 3, "ФИОУпПред",""))), ФИО);
	Данные.Свойство(?(ТипДанных = 1,"ТелРук", ?(ТипДанных = 2, "ТелБух", ?(ТипДанных = 3, "ТелУпПред",""))), Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук", ?(ТипДанных = 2, "ВидУдЛичнБух", ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))), ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук", ?(ТипДанных = 2, "КодУдЛичнБух", ?(ТипДанных = 3, "КодУдЛичнУпПред",""))), КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук", ?(ТипДанных = 2, "ДатаРождБух", ?(ТипДанных = 3, "ДатаРождУпПред",""))), ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"ГраждРук", ?(ТипДанных = 2, "ГраждБух", ?(ТипДанных = 3, "ГраждУпПред",""))), Гражд);
	Данные.Свойство(?(ТипДанных = 1,"ГраждСтранаРук", ?(ТипДанных = 2, "ГраждСтранаБух", ?(ТипДанных = 3, "ГраждСтранаУпПред",""))), ГраждСтрана);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук", ?(ТипДанных = 2, "МестоРождБух", ?(ТипДанных = 3, "МестоРождУпПред",""))), МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук", ?(ТипДанных = 2, "СерияУдЛичнБух", ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))), СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук", ?(ТипДанных = 2, "НомерУдЛичнБух", ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))), НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук", ?(ТипДанных = 2, "ПолБух", ?(ТипДанных = 3, "ПолУпПред",""))), Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук", ?(ТипДанных = 2, "ДатаУдЛичнБух", ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))), ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук", ?(ТипДанных = 2, "ИндексМЖБух", ?(ТипДанных = 3, "ИндексМЖУпПред",""))), ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук", ?(ТипДанных = 2, "СубъектМЖБух", ?(ТипДанных = 3, "СубъектМЖУпПред",""))), СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук", ?(ТипДанных = 2, "КодСубъектМЖБух", ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))), КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук", ?(ТипДанных = 2, "РайонМЖБух", ?(ТипДанных = 3, "РайонМЖУпПред",""))), РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук", ?(ТипДанных = 2, "ГородМЖБух", ?(ТипДанных = 3, "ГородМЖУпПред",""))), ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук", ?(ТипДанных = 2, "НПунктМЖБух", ?(ТипДанных = 3, "НПунктМЖУпПред",""))), НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук", ?(ТипДанных = 2, "УлицаМЖБух", ?(ТипДанных = 3, "УлицаМЖУпПред",""))), УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук", ?(ТипДанных = 2, "ДомМЖБух", ?(ТипДанных = 3, "ДомМЖУпПред",""))), ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук", ?(ТипДанных = 2, "КорпусМЖБух", ?(ТипДанных = 3, "КорпусМЖУпПред",""))), КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук", ?(ТипДанных = 2, "КвартираМЖБух", ?(ТипДанных = 3, "КвартираМЖУпПред",""))), КвартираМЖ);

	// Заполним ИНН/КПП предприятия на новой странице

	Если НЕ СвязьУстановлена Тогда

		// нужно создать новый экземпляр докумнта, предварительно сняв активность у активного листа
		// в случае, если ФИО в структуре числое, то считаем что лист готов для заполнения и пишем информацию в него
		СтрТаблицаСтраницы = ТаблицаСтраницРазделаМ.НайтиСтроки(Новый Структура("АктивнаяСтраница" ,Истина));
		Если СтрТаблицаСтраницы.Количество() = 0 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Ошибка установки активной страницы раздела ФЛ'");

			Сообщение.Сообщить();
			
		Иначе
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрТаблицаСтраницы.Данные[0].Значение.ФизЛицФИО) Тогда

			СтрокаДляВставкиДанных = СтрТаблицаСтраницы;

			// Пишем в этот лист

		Иначе

			// Убираем активность у текущей страницы
			СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

			СтрНоваяСтраница = ТаблицаСтраницРазделаМ.Добавить();

			// Присваиваем представление по умолчанию
			СтрНоваяСтраница.Представление      = "Новая страница";

			СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

			СтрНоваяСтраница.АктивнаяСтраница = Истина;

			СтрНоваяСтраница.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());

			СтрокаДляВставкиДанных = СтрНоваяСтраница;

		КонецЕсли;

	ИначеЕсли СвязьУстановлена Тогда

		// Пишем в раздел с индексом ИндексВТабл
		СтрокаДляВставкиДанных = ТаблицаСтраницРазделаМ[ИндексВТабл];
	КонецЕсли;

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);
      
	Для НомЯчейки = 1 По 12 Цикл

		ЦифраИНН = Сред(СтруктураРеквизитовФормы.мИННЮЛ, НомЯчейки, 1);
		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ИНН1_" + Строка(НомЯчейки), ЦифраИНН);

	КонецЦикла;

	Для НомЯчейки = 1 По 9 Цикл

		ЦифраКПП = Сред(СтруктураРеквизитовФормы.мКППЮЛ, НомЯчейки, 1);
		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("КПП1_" + Строка(НомЯчейки), ЦифраКПП);

	КонецЦикла;

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицФИО", ФИО);
		Представление = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицФИО;
		СтрокаДляВставкиДанных.Данные[0].Представление = Представление + ". Лист N " + Строка(ИндексСтроки + 1);

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицСлТел", СтруктураРеквизитовФормы.мТелОрганизации);
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСлТел) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицСлТел", СтруктураРеквизитовФормы.мТелОрганизации);
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДомТел", Тел);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДомТел) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДомТел", Тел);

		КонецЕсли;

	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции

	ГраждСтрана = ?(НЕ ЗначениеЗаполнено(ГраждСтрана), "лицо без гражданства", ГраждСтрана);

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицГражданство", ГраждСтрана);
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГражданство) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицГражданство", ГраждСтрана);
		КонецЕсли;
	КонецЕсли;

	КодСтраны = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКодГражд;

	Если (НЕ СвязьУстановлена) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКодГражд", Гражд);
		
	Иначе
		Если ПустаяСтрока(КодСтраны) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКодГражд", Гражд);
			
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокВид", ВидУдЛичн);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВид) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокВид", ВидУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДок", КодУдЛичн);
		
	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДок) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДок", КодУдЛичн);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокСерияНомер) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если НЕ ОграниченияВыводаУчесть Тогда
	// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДатаР", ДатаРожд);
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДатаР) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДатаР", ДатаРожд);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ОграниченияВыводаУчесть Тогда
	// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицМестоР", МестоРожд);
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицМестоР) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицМестоР", МестоРожд);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВыдан) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокДата", ДатаУдЛичн);

	Иначе

		Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокДата) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокДата", ДатаУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицИнд", ИндексМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицИнд", ИндексМЖ);

		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицСубъект", СубъектМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицСубъект", СубъектМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицС", КодСубъектМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицС", КодСубъектМЖ);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицРайон", РайонМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицРайон", РайонМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицГород", ГородМЖ);
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицГород", ГородМЖ);
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицНП", НПунктМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицНП", НПунктМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицУлица", УлицаМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицУлица", УлицаМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДом", ДомМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДом", ДомМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКорпус", КорпусМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКорпус", КорпусМЖ);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКвартира", КвартираМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКвартира", КвартираМЖ);

		КонецЕсли;

	КонецЕсли;

	Если НЕ ОграниченияВыводаУчесть Тогда
	// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
		ПолМ = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолМ;
		ПолЖ = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолЖ;

		Если (НЕ СвязьУстановлена) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицПолМ", ?(Пол = 1, "V", ""));
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицПолЖ", ?(Пол = 2, "V", ""));

		Иначе

			Если НЕ (ЗначениеЗаполнено(ПолЖ)) И НЕ ЗначениеЗаполнено(ПолМ) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицПолМ", ?(Пол = 1, "V", ""));
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицПолЖ", ?(Пол = 2, "V", ""));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицФИО) Тогда

		стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ДатаПодписи", стрУказаннаяДата);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДатуПодписиНаКлиенте() Экспорт
    	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуПодписиНаСервере() Экспорт
    	
	ЗаполнитьДатуПодписи(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьАктивныйРаздел1_2НаСервере(ИмяСтраницы)
	
	СохранитьАктивныйРаздел1_2(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьАктивныйРаздел1_2(Форма, ИмяСтраницы)
	Перем ТаблицаСтраницРаздела;
	
	Если Не Форма.мСтруктураРаздел1_2.Свойство("Раздел1_2", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	ТекТабличноеПоле     = Форма.ТабличныйДокумент;
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
					
		СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(Форма, "ТабличныйДокумент");
		
		Если ИмяСтраницы = "Раздел1_2" Тогда
			
			Для Инд = 0 По СтрТаблицаСтраницы.СведенияОДоходах.Количество() - 1 Цикл
				Если СтрТаблицаСтраницы.СведенияОДоходах[Инд].Значение.АктивнаяСтраница = Истина Тогда
					АктСтр = Инд;
					Прервать;
				КонецЕсли;
			КонецЦикла;
												
			Данные = Новый Структура;
			Данные.Вставить("Данные", СтруктураДанныхТекущейТаблицы);
			
			Если АктСтр = Неопределено Тогда
				СтрТаблицаСтраницы.СведенияОДоходах.Добавить(Данные);
			Иначе
				СтрТаблицаСтраницы.СведенияОДоходах[АктСтр].Значение.Данные = Данные;
			КонецЕсли;	
				
			Попытка
				СтрТаблицаСтраницы.СведенияОДоходах[АктСтр].Значение.Представление = Форма.ТабличныйДокумент.Области.П000010007003.Значение;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ИмяСтраницы = "Раздел1" Тогда
			
			Если СтрТаблицаСтраницы.ДанныеОбИсточнике.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеОбИсточнике[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.ДанныеОбИсточнике.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			Попытка
				СтрТаблицаСтраницы.Представление = Форма.ТабличныйДокумент.Области.П000010001003.Значение;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы)
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "Раздел2" Тогда

		// Так как Раздел 2 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы2);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
											
		ТаблицаДопСтрокГруппы1 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы2].Добавить().Таблица;
						
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы1);
		
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаДопСтрокГруппы1);
		
	ИначеЕсли ИмяСтраницы = "Раздел3" Тогда

		// Так как Раздел 2.1 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы12 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы12);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, ТаблицаДопСтрокГруппы12);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы13 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы13);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, ТаблицаДопСтрокГруппы13);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы14 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы14);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, ТаблицаДопСтрокГруппы14);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы15 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы15);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, ТаблицаДопСтрокГруппы15);

		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы16 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы16);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, ТаблицаДопСтрокГруппы16);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы17 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы17);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, ТаблицаДопСтрокГруппы17);

	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
		
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		Иначе
			
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, Элемент.ТекущиеДанные.ПолучитьРодителя().КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
				
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда 
			КМенюРО.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		ИначеЕсли НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		#КонецЕсли
		
		Если (СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Источник") > 0 И СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "дохода") > 0)
			Или "Раздел I" = Элемент.ТекущиеДанные.КолонкаРазделыОтчета Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу ""Источник дохода""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Сведения") > 0 И СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "о доходах") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу ""Сведения о доходах""";
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
		#КонецЕсли
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                  = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	КонецЕсли;
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НомерСтраницыРаздела1_2Отчета = Неопределено)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НомерСтраницыРаздела1_2Отчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
		
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "ФизЛица"
	 ИЛИ НаимРаздела = "Раздел4" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "ФизЛица" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыФизЛиц";
			
		ИначеЕсли НаимРаздела = "Раздел1" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделов1и2";
			
		ИначеЕсли НаимРаздела = "Раздел4" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела4";	
			
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
    ИначеЕсли НаимРаздела = "Раздел2"
	      ИЛИ НаимРаздела = "Раздел3" Тогда	
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
									
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ЗагТекущейСтраницыПанели = СтрТаблицаСтраницы.Представление;
			
			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
				ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
									
				Если НаимРаздела = "Раздел2" Тогда
					НаименованиеДопСтраницы = ТабличныйДокумент.Области.П000020001003.Значение;
				ИначеЕсли НаимРаздела = "Раздел3" Тогда
					НаименованиеДопСтраницы = ТабличныйДокумент.Области.П000030001003.Значение;
				КонецЕсли;
				
				// Определяем представление (название) дополнительной страницы 
				Если Не ПустаяСтрока(НаименованиеДопСтраницы) Тогда
					ЗагТекущейСтраницыПанели = НаименованиеДопСтраницы;
				Иначе
					ЗагТекущейСтраницыПанели = "Новая страница";
				КонецЕсли;
				
				СтрТаблицаСтраницы.Представление = ЗагТекущейСтраницыПанели;
			КонецЕсли;
			                                    			
			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			Если (НаимРаздела = "Раздел2") Или (НаимРаздела = "Раздел3") Тогда
				
				Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
					СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
				Иначе
					СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
				КонецЕсли;
				
			КонецЕсли;
						
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;	
		
	// Многоуровневые разделы.
	//	
	ИначеЕсли НаимРаздела = "Раздел1"
	      ИЛИ НаимРаздела = "Раздел1_2" Тогда	
	
		  СохранитьАктивныйРаздел1_2НаСервере(НаимРаздела);
		  
		  ТаблицаСтраницРаздела = Неопределено;
		  
		  мСтруктураРаздел1_2.Свойство("Раздел1_2", ТаблицаСтраницРаздела);
		  
		  ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		  
		  СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		  
		  Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			  
			  СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			  
			  СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			  
		  КонецЕсли;
			
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НомерСтраницыРаздела1_2Отчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "ФизЛица"
	 ИЛИ ИмяТекРаздела = "Раздел4" Тогда 
	 
		Если ИмяТекРаздела = "ФизЛица" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыФизЛиц";
		ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделов1и2";
		ИначеЕсли ИмяТекРаздела = "Раздел4" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела4";	
		КонецЕсли;
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		УстановитьДоступностьКнопкиУдалитьСтраницу(ЭтаФорма[НаимТаблицыСтраницы]);
		
	// Многостраничные и многострочные разделы.
	//	
	ИначеЕсли ИмяТекРаздела = "Раздел2"
	      ИЛИ ИмяТекРаздела = "Раздел3" Тогда
		  
		Если ИмяТекРаздела = "Раздел2" Тогда
			  
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
			
		ИначеЕсли ИмяТекРаздела = "Раздел3" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела3";
			
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
			
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;
				
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппыДопСтрок);
				Если ЭтаФорма[ИмяГруппыДопСтрок].Количество() = 1 Тогда 
					Обл = ТабличныйДокумент.Области["УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1"];
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьДоступностьКнопкиУдалитьСтраницу(ЭтаФорма[НаимТаблицыСтраницы]);
		
		Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_2");
			Если Обл = Неопределено Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
				Если Обл <> Неопределено Тогда 
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	// Многоуровневые разделы.
	//	
	ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда
		
		Если ЭтаФорма[мСтруктураРаздел1_2.Раздел1_2].Количество() = 0
			И ПустаяСтрока(ТабличныйДокумент.Области.П000010001003.Значение) Тогда
			ПостроениеПервоначальнойСтруктурыНаСервере(Истина, ИмяТекРаздела);
		КонецЕсли;														
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураРаздел1_2.Свойство("Раздел1_2", ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		СтруктураДанныхСледующаяСтраница = СтрСледующаяСтраница.ДанныеОбИсточнике[0].Значение;
				
		Если СтруктураДанныхСледующаяСтраница <> Неопределено Тогда
			Для Каждого Элемент Из СтруктураДанныхСледующаяСтраница Цикл
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;
												
				Попытка
					ТабличныйДокумент.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;
				
				Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда
					// обновляем примечания к ячейкам табличного документа
					НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
					Если НайденнаяСтрока.Количество() > 0 Тогда
						НайденнаяСтрока = НайденнаяСтрока[0];
						ТекущийКомментарий = ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст;
						НовыйКомментарий   = НайденнаяСтрока.Комментарий;
						
						// примечание к ячейке устанавливаем тогда, когда изменился текст комментария
						Если Не (ПустаяСтрока(ТекущийКомментарий) И ПустаяСтрока(НовыйКомментарий)) Тогда
							ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст = НовыйКомментарий;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		УстановитьДоступностьКнопкиУдалитьСтраницу(ТаблицаСтраницРаздела);
		
	// Многоуровневые разделы.
	//	
	ИначеЕсли ИмяТекРаздела = "Раздел1_2" Тогда
		
		Если ЭтаФорма[мСтруктураРаздел1_2.Раздел1_2].Количество() = 0 Тогда
			ПостроениеПервоначальнойСтруктурыНаСервере(Истина, ИмяТекРаздела);
			НомерСтраницыРаздела1_2Отчета = 1;
		КонецЕсли;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураРаздел1_2.Свойство("Раздел1_2", ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела[НомерСтраницыРаздела1_2Отчета - 1];
				        				
		Для Ном = 0 По СтрТаблицаСтраницы.СведенияОДоходах.Количество() - 1 Цикл
			
			СтрТабл = СтрТаблицаСтраницы.СведенияОДоходах[Ном];
			
			Если СтрТабл.Значение.АктивнаяСтраница = Истина Тогда
				
				 СтрТабл.Значение.АктивнаяСтраница = Ложь;
				 
				 Прервать;
				 
			 КонецЕсли;
			
		КонецЦикла;
				
		Если СтрТаблицаСтраницы.СведенияОДоходах[НомерСтраницыРазделаОтчета - 1].Значение.Количество() <= 1 Тогда
			НомерСледующейСтраницы = 0;
		КонецЕсли;
		
		СтрСледующаяСтраница = СтрТаблицаСтраницы.СведенияОДоходах[НомерСтраницыРазделаОтчета - 1].Значение;
		
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		
		СтрТаблицаСтраницы.СведенияОДоходах[НомерСтраницыРазделаОтчета - 1].Значение.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		СтрСледующаяСтраницаДанные = Неопределено;
		
		СтрСледующаяСтраница.Свойство("Данные", СтрСледующаяСтраницаДанные);
				
		Если СтрСледующаяСтраницаДанные.Данные <> Неопределено Тогда
			
			СтруктураДанныхСледующаяСтраница = СтрСледующаяСтраницаДанные.Данные;
			
			Для Каждого Элемент Из СтруктураДанныхСледующаяСтраница Цикл
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;
					
				Если ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			
				Попытка
					ТабличныйДокумент.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;
				
				Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда
					// обновляем примечания к ячейкам табличного документа
					НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
					Если НайденнаяСтрока.Количество() > 0 Тогда
						НайденнаяСтрока = НайденнаяСтрока[0];
						ТекущийКомментарий = ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст;
						НовыйКомментарий   = НайденнаяСтрока.Комментарий;
						
						// примечание к ячейке устанавливаем тогда, когда изменился текст комментария
						Если Не (ПустаяСтрока(ТекущийКомментарий) И ПустаяСтрока(НовыйКомментарий)) Тогда
							ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст = НовыйКомментарий;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		УстановитьДоступностьКнопкиУдалитьСтраницу(СтрТаблицаСтраницы.СведенияОДоходах);
		
	// Обычные разделы.
	//	
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела = "Титульный" Тогда
				
	ИначеЕсли НЕ ИмяТекРаздела = "Раздел1" Тогда
		УстановитьФорматВывода(ЭтаФорма, ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
		Если ИмяТекРаздела = "Раздел2" И НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.П000020010001_1.Текст) Тогда
			ТабличныйДокумент.Области.П000020010001_1.Текст = "1";
		КонецЕсли;
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопкиУдалитьСтраницу(Таблица)
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Таблица.Количество() = 1 Тогда 
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабДокНаСервере(ТекТабличноеПоле, ИмяТекТабличногоПоля, НовДанныеДопСтрокРаздела) Экспорт
	
	ЭтаФорма[ИмяТекТабличногоПоля] = ТекТабличноеПоле;
	
	Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
		ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
		ДанныеГруппыСтрок = ГруппаСтрок.Значение;
		
		ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
		
		КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
		
		КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
		
		// Выводим в табличный документ данные группы дополнительных строк
		ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
		// обновляем структуру многострочного раздела
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппыДопСтрок);
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	МассивМногострочныхБлоков = Новый Массив;
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	Если (ВыбТабличноеПолеИмя = "Раздел3") ИЛИ 
		 (ВыбТабличноеПолеИмя = "Раздел2") Тогда

		// Содержат два многострочных блока.
		// Поочередно удалим дополнительные строки в каждом из них.

		Если ВыбТабличноеПолеИмя = "Раздел3" Тогда
			МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1);
			МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2);
			МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3);

			МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1);
			МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2);
			МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3);
		Иначе
			МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы2);
			// вставить массив других листов и т.д.
		КонецЕсли;
		
		Форма.УдалитьОбластьИзТабличногоДокументаНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, МассивМногострочныхБлоков);
		
		Форма.ТабличныйДокумент = ВыбТабличноеПоле;
								
	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПолеИмя <> "ФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Если (Лев(ТекущаяОбласть.Имя,7)<>"Сумма15") И (Лев(ТекущаяОбласть.Имя,7)<>"Сумма25" ) И
					 (Лев(ТекущаяОбласть.Имя,3)<>"КБК")     И (Лев(ТекущаяОбласть.Имя,8)<>"КодОКАТО") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если (СтрНайти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (СтрНайти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	Для Инд = 0 По (МассивМногострочныхБлоков.Количество() - 1) Цикл
		// Идентификатор многострочного блока
		ИмяГруппыДопСтрок = МассивМногострочныхБлоков.Получить(Инд);
		Если ИмяГруппыДопСтрок <> Неопределено Тогда
			ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппыДопСтрок);
			
			ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
			
			// Пересчитаем автоматически вычисляемые ячейки таблицы.
			Расчет(Форма, ИмяСтраницыПанели);
		КонецЕсли;
	КонецЦикла;

	Если ВыбТабличноеПолеИмя = "Раздел1_2" Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияРазделСведенияОДоходах(Форма);
	КонецЕсли;

	Если ВыбТабличноеПолеИмя = "Раздел2" Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияРаздел2(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбластьИзТабличногоДокументаНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, МассивМногострочныхБлоков) Экспорт
		
	Для Инд = 0 По (МассивМногострочныхБлоков.Количество() - 1) Цикл
		
		// Идентификатор многострочного блока
		ИмяГруппыДопСтрок = МассивМногострочныхБлоков.Получить(Инд);
		
		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		
		ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
		
		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
		
		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
		
		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.
			
			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			
			НСтрСтр = Формат(НСтр, "ЧГ=");
			
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
				
				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
				
				НомерГрафы = 1;
				
				ИмяПервойКолонки = ИмяГруппыДопСтрок + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтрСтр;
				
				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
				
				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
				
				РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ВыбТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
				
				ЭтаФорма.ТабличныйДокумент = ВыбТабличноеПоле;
				
				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
				
				НСтр = НСтр - 1;
				
				НСтрСтр = Формат(НСтр, "ЧГ=");
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	    	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", Знач ОбластьИмя = "")

	Перем СтруктураГруппы2;

	Перем СтруктураГруппы3_2_1;
	Перем СтруктураГруппы3_2_2;
	Перем СтруктураГруппы3_2_3;

	Перем СтруктураГруппы3_3_1;
	Перем СтруктураГруппы3_3_2;
	Перем СтруктураГруппы3_3_3;
        	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;
	
	НомПоз = СтрНайти(ОбластьИмя, "_");
	
	Если НомПоз > 0 Тогда
		ОбластьИмя = Лев(ОбластьИмя, НомПоз - 1);
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020011004, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы2);
		
			СтруктураГруппы2 = Форма[СтруктураГруппы2];
			
			П000020011004 = 0;
			
			Для Ном = 1 По СтруктураГруппы2.Количество() Цикл
				
				П000020011004 = П000020011004 + Форма.ТабличныйДокумент.Области["П000020010004_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000020011004.Значение = П000020011004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020011008, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы2);
		
			СтруктураГруппы2 = Форма[СтруктураГруппы2];
			
			П000020011008 = 0;
			
			Для Ном = 1 По СтруктураГруппы2.Количество() Цикл
				
				П000020011008 = П000020011008 + Форма.ТабличныйДокумент.Области["П000020010008_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000020011008.Значение = П000020011008;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020011009, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы2);
		
			СтруктураГруппы2 = Форма[СтруктураГруппы2];
			
			П000020011009 = 0;
			
			Для Ном = 1 По СтруктураГруппы2.Количество() Цикл
				
				П000020011009 = П000020011009 + Форма.ТабличныйДокумент.Области["П000020010009_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000020011009.Значение = П000020011009;
			
		КонецЕсли;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006005, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, СтруктураГруппы3_2_1);
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, СтруктураГруппы3_2_2);
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, СтруктураГруппы3_2_3);
					
			СтруктураГруппы3_2_1 = Форма[СтруктураГруппы3_2_1];
			СтруктураГруппы3_2_2 = Форма[СтруктураГруппы3_2_2];
			СтруктураГруппы3_2_3 = Форма[СтруктураГруппы3_2_3];
			
			П000030006005 = 0;
			
			Для Ном = 1 По СтруктураГруппы3_2_1.Количество() Цикл
				
				П000030006005 = П000030006005 + Форма.ТабличныйДокумент.Области["П000030007005_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_2_2.Количество() Цикл
				
				П000030006005 = П000030006005 + Форма.ТабличныйДокумент.Области["П000030008005_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_2_3.Количество() Цикл
				
				П000030006005 = П000030006005 + Форма.ТабличныйДокумент.Области["П000030009005_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000030006005.Значение = П000030006005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006007, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, СтруктураГруппы3_2_1);
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, СтруктураГруппы3_2_2);
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, СтруктураГруппы3_2_3);
					
			СтруктураГруппы3_2_1 = Форма[СтруктураГруппы3_2_1];
			СтруктураГруппы3_2_2 = Форма[СтруктураГруппы3_2_2];
			СтруктураГруппы3_2_3 = Форма[СтруктураГруппы3_2_3];
			
			П000030006007 = 0;
			
			Для Ном = 1 По СтруктураГруппы3_2_1.Количество() Цикл
				
				П000030006007 = П000030006007 + Форма.ТабличныйДокумент.Области["П000030007007_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_2_2.Количество() Цикл
				
				П000030006007 = П000030006007 + Форма.ТабличныйДокумент.Области["П000030008007_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_2_3.Количество() Цикл
				
				П000030006007 = П000030006007 + Форма.ТабличныйДокумент.Области["П000030009007_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000030006007.Значение = П000030006007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006008, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, СтруктураГруппы3_2_1);
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, СтруктураГруппы3_2_2);
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, СтруктураГруппы3_2_3);
					
			СтруктураГруппы3_2_1 = Форма[СтруктураГруппы3_2_1];
			СтруктураГруппы3_2_2 = Форма[СтруктураГруппы3_2_2];
			СтруктураГруппы3_2_3 = Форма[СтруктураГруппы3_2_3];
			
			П000030006008 = 0;
			
			Для Ном = 1 По СтруктураГруппы3_2_1.Количество() Цикл
				
				П000030006008 = П000030006008 + Форма.ТабличныйДокумент.Области["П000030007008_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_2_2.Количество() Цикл
				
				П000030006008 = П000030006008 + Форма.ТабличныйДокумент.Области["П000030008008_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_2_3.Количество() Цикл
				
				П000030006008 = П000030006008 + Форма.ТабличныйДокумент.Области["П000030009008_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000030006008.Значение = П000030006008;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030010005, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, СтруктураГруппы3_3_1);
			СтруктураГруппы3_3_1 = Форма[СтруктураГруппы3_3_1];
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, СтруктураГруппы3_3_2);
			СтруктураГруппы3_3_2 = Форма[СтруктураГруппы3_3_2];
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, СтруктураГруппы3_3_3);
			СтруктураГруппы3_3_3 = Форма[СтруктураГруппы3_3_3];
			
			П000030010005 = 0;
			
			Для Ном = 1 По СтруктураГруппы3_3_1.Количество() Цикл
				
				П000030010005 = П000030010005 + Форма.ТабличныйДокумент.Области["П000030011005_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_3_2.Количество() Цикл
				
				П000030010005 = П000030010005 + Форма.ТабличныйДокумент.Области["П000030012005_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_3_3.Количество() Цикл
				
				П000030010005 = П000030010005 + Форма.ТабличныйДокумент.Области["П000030013005_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000030010005.Значение = П000030010005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030010007, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, СтруктураГруппы3_3_1);
			СтруктураГруппы3_3_1 = Форма[СтруктураГруппы3_3_1];
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, СтруктураГруппы3_3_2);
			СтруктураГруппы3_3_2 = Форма[СтруктураГруппы3_3_2];
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, СтруктураГруппы3_3_3);
			СтруктураГруппы3_3_3 = Форма[СтруктураГруппы3_3_3];
			
			П000030010007 = 0;
			
			Для Ном = 1 По СтруктураГруппы3_3_1.Количество() Цикл
				
				П000030010007 = П000030010007 + Форма.ТабличныйДокумент.Области["П000030011007_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_3_2.Количество() Цикл
				
				П000030010007 = П000030010007 + Форма.ТабличныйДокумент.Области["П000030012007_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
									
			Форма.ТабличныйДокумент.Области.П000030010007.Значение = П000030010007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030010008, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, СтруктураГруппы3_3_1);
			СтруктураГруппы3_3_1 = Форма[СтруктураГруппы3_3_1];
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, СтруктураГруппы3_3_2);
			СтруктураГруппы3_3_2 = Форма[СтруктураГруппы3_3_2];
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, СтруктураГруппы3_3_3);
			СтруктураГруппы3_3_3 = Форма[СтруктураГруппы3_3_3];
			
			П000030010008 = 0;
			
			Для Ном = 1 По СтруктураГруппы3_3_1.Количество() Цикл
				
				П000030010008 = П000030010008 + Форма.ТабличныйДокумент.Области["П000030011008_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_3_2.Количество() Цикл
				
				П000030010008 = П000030010008 + Форма.ТабличныйДокумент.Области["П000030012008_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Для Ном = 1 По СтруктураГруппы3_3_3.Количество() Цикл
				
				П000030010008 = П000030010008 + Форма.ТабличныйДокумент.Области["П000030013008_" + Формат(Ном, "ЧГ=")].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000030010008.Значение = П000030010008;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомКоррект", ТабличныйДокумент.Области.НомКоррект.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомКоррект) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомКоррект);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)	
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт	
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	
	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);

    ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
			
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);

    ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

    Раздел1_2 = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураРаздел1_2 Цикл
						
		Раздел1_2.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		              		
		ТаблЗнач = Неопределено;
		
		Если Раздел1_2.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеОбИсточнике") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДанныеОбИсточнике");
				ТаблЗнач.Колонки.Добавить("ДанныеОбИсточнике", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.ДанныеОбИсточнике = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеОбИсточнике[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("СведенияОДоходах") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("СведенияОДоходах");
				ТаблЗнач.Колонки.Добавить("СведенияОДоходах", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
										
					СведенияОдоходах = Новый Массив;
					
					Для Каждого ЭлементСведенияОдоходах Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].СведенияОДоходах Цикл
							
						СведенияОдоходах.Добавить(ЭлементСведенияОдоходах.Значение);
							
					КонецЦикла;
					
					СтрокаТаблЗнач.СведенияОДоходах = СведенияОдоходах;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		           			
	КонецЦикла;
	
	СписокСохранения.Вставить("Раздел1_2", Раздел1_2);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	    
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Раздел1"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел1_2" Тогда
		 
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(Раздел.ИмяСтраницы)
		   И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли мСтруктураМногостраничныхРазделов.Свойство(Раздел.ИмяСтраницы)
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
		
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Раздел1"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел1_2" Тогда
		 
			Продолжить;
			
		КонецЕсли;
			
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доп. листы с данными физических лиц формируются автоматически, в случае, если у руководителя, гл. бухгалтера или уполномоченного лица нет ИНН.%1Формирование происходит при первоначальном открытии отчета или по нажатию на кнопку ""Обновить"", которая находится на верхней командной панели формы отчета.'"), Символы.ПС));
		
		Возврат;		 
		
	КонецЕсли;			 
	
	Модифицированность = Истина;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		ДобавитьСтраницуВРазделе1НаСервере();
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
				
		ДобавитьСтраницуВРазделе1_2НаСервере();
		
	Иначе
		
		ВставитьДополнительнуюСтраницуНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе1НаСервере()
	
	ВставитьДопСтраницуРаздел1_2НаСервере("Раздел1");
	СохранитьАктивныйРаздел1_2НаСервере("Раздел1");
	ОчиститьТабличноеПолеНаСервере("Раздел1_2");
	СохранитьАктивныйРаздел1_2НаСервере("Раздел1_2");
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе1_2НаСервере()
	
	ВставитьДопСтраницуРаздел1_2НаСервере("Раздел1_2");
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполненияНаСервере(1, ИмяТекущейСтраницыПанели);
	
	ВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено )
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(Форма, ИмяТекТабличногоПоля);

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.
	//
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
        				
		// Сохраняем данные группы дополнительных строк текущей страницы.
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы2);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
											
		ТаблицаДопСтрокГруппы1 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы2].Добавить().Таблица;
						
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы1);
		
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаДопСтрокГруппы1);
		
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		// Так как Раздел 3 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		
		// Сохраняем данные группы дополнительных строк текущей страницы.

		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы2 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы2);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1, ТаблицаДопСтрокГруппы2);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы3 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы3);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2, ТаблицаДопСтрокГруппы3);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы4 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы4);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3, ТаблицаДопСтрокГруппы4);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы5 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы5);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1, ТаблицаДопСтрокГруппы5);

		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы6 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы6);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2, ТаблицаДопСтрокГруппы6);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы7 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы7);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3, ТаблицаДопСтрокГруппы7);
		
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];

		Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
		 ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
			// формируем представление дополнительной страницы

			Если ИмяТекущейСтраницыПанели = "ФизЛица" Тогда
				// Для раздела с данными по физлицам представлением
				// будет ФИО физического лица
				ЗагТекущейСтраницыПанели = Форма.ТабличныйДокумент.Области.ФизЛицФИО.Значение;
				
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
				ЗагТекущейСтраницыПанели = Форма.ТабличныйДокумент.Области.П000020001003.Значение;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
				ЗагТекущейСтраницыПанели = Форма.ТабличныйДокумент.Области.П000030001003.Значение;
			Иначе
				ЗагТекущейСтраницыПанели = "Новая страница";
			КонецЕсли;
			СтрТаблицаСтраницы.Представление    = ЗагТекущейСтраницыПанели;
		КонецЕсли;
		
		Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
			СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
		Иначе
			СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
		КонецЕсли;

		Если (ИмяТекущейСтраницыПанели = "Раздел2") Или (ИмяТекущейСтраницыПанели = "Раздел3") Тогда
			
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
		КонецЕсли;
		
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		// Очищаем показатели текущей страницы и, в случае, если
		// страница содержит многострочный раздел, удаляем все
		// дополнительно созданные строки.
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);

		// Выполняем расчет показателей добавленной страницы
		Расчет(Форма, ИмяТекущейСтраницыПанели);

		Модифицированность = Истина;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		
		ЭлементыДанныхФормыДерево = ТекущиеДанные.ПолучитьЭлементы();
		ИмяКолонки = "КолонкаНомерСтраницыРазделаОтчета";
		ИскомоеЗначение = КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1;
		ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
		Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
			ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
			Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
				ТекущаяСтраницаРазделаПослеУдаления = ЭлементДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		
	КонецЕсли;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		УдалитьДополнительнуюСтраницу12НаСервере("Раздел1");
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_2" Тогда
		УдалитьДопСтраницуРаздела12НаСервере();
	Иначе
		УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	КонецЕсли;
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если КопияТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
			СтраницаРаздела.КолонкаРазделыОтчета = "Источник"+Символы.ПС+"дохода " + НомерСтраницы;
		ИначеЕсли КопияТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_2" Тогда
			СтраницаРаздела.КолонкаРазделыОтчета = "Сведения"+Символы.ПС+"о доходах " + НомерСтраницы;
		Иначе
			СтраницаРаздела.КолонкаРазделыОтчета = "Стр. " + НомерСтраницы;
		КонецЕсли;
		
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтраницуРаздела12НаСервере()
	
	СохранитьАктивныйРаздел1_2НаСервере("Раздел1_2");
	УдалитьДополнительнуюСтраницу12НаСервере("Раздел1_2");
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	ИзменитьТаблицуПараметровАвтозаполненияНаСервере(-1, ИмяТекущейСтраницыПанели);
	
	УдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
				
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполненияНаСервере(Парам, Лист = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(ЭтаФорма, Парам, Лист);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Форма, Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	ИмяТекущейСтраницыПанели = Лист;
	
	Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];
	
	НомерТекущейСтраницы = 1;
	Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		
		ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа
		
		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(
			Форма, ИмяТекущейСтраницыПанели, НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		
		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
						
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			#Если НаКлиенте Тогда
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
			#Иначе
				Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ТаблицаЗначений") Тогда
					ТаблВариантов.ТаблицаВариантовЗаполнения.Загрузить(НоваяТаблицаВариантыЗаполнения);
				Иначе
					ТаблВариантов.ТаблицаВариантовЗаполнения.Загрузить(НоваяТаблицаВариантыЗаполнения.Выгрузить());
				КонецЕсли;
			#КонецЕсли
			
		КонецЕсли;
		
		
	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа
		
		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)
	Перем ТаблицаСтраницРаздела;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);

		// очищаем редактируемые ячейки удаляемой страницы
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);

		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			//
			Если (ИмяТекущейСтраницыПанели = "Раздел2") ИЛИ
				 (ИмяТекущейСтраницыПанели = "Раздел3") Тогда

				// Предварительно проверим, содержит ли страница многострочные части
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок[0].Значение;

				Если ДанныеДопСтрокРаздела <> Неопределено Тогда
					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;
											
						ПромТаблицаГруппыСтрок = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
						КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);

						// Заменяем таблицу значений с данными текущей страницы.
						КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, Форма[ИмяГруппыДопСтрок]);
						// Выводим в табличный документ строки многострочной группы
						ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;

			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл

				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Если (ИмяТекущейСтраницыПанели = "Раздел2")
				Или (ИмяТекущейСтраницыПанели = "Раздел1_2")
				Или (ИмяТекущейСтраницыПанели = "Раздел4") Тогда

					#Если НаКлиенте Тогда
					
						Если Форма.ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Тогда
							Продолжить; // Пропустим цикл
						КонецЕсли;
					
					#Иначе
						
						Если Форма.ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Тогда
							Продолжить; // Пропустим цикл
						КонецЕсли;
						  					
					#КонецЕсли
					
				КонецЕсли;

				Попытка
					Форма[ИмяТекТабличногоПоля].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			КонецЦикла;

			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;

		Расчет(Форма, ИмяТекущейСтраницыПанели);
		Форма.Модифицированность = Истина;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
				
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
		
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
		
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		УдалитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
			
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
    	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	МаксимальноеКоличествоСтрокГруппы = 200;
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	ВысотаСтроки = 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок - ВысотаСтроки + 1;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок - ВысотаСтроки + 1;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 1, ОбластьЯчейки.Верх, 1);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 1, ОбластьЯчейкиИсходнойОбласти.Верх, 1);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	ОтступОтКрая = 2;
	
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,      ОтступОтКрая, НомерНижнЯчейкиОбласти,      ОтступОтКрая);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти, ОтступОтКрая, НомерНижнЯчейкиНовойОбласти, ОтступОтКрая);

	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;
    	
	НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
		
	//
	// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	// убираем известный глюк
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		СтруктураГруппы[НовыйПорядковыйНомер - 1].П000020010001 = НовыйПорядковыйНомер;
	КонецЕсли;

	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1 Тогда
		СтруктураГруппы[НовыйПорядковыйНомер - 1].П000030007001 = НовыйПорядковыйНомер;
	КонецЕсли;

	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2 Тогда
		СтруктураГруппы[НовыйПорядковыйНомер - 1].П000030008001 = НовыйПорядковыйНомер;
	КонецЕсли;

	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3 Тогда
		СтруктураГруппы[НовыйПорядковыйНомер - 1].П000030009001 = НовыйПорядковыйНомер;
	КонецЕсли;

	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1 Тогда
		СтруктураГруппы[НовыйПорядковыйНомер - 1].П000030011001 = НовыйПорядковыйНомер;
	КонецЕсли;

	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2 Тогда
		СтруктураГруппы[НовыйПорядковыйНомер - 1].П000030012001 = НовыйПорядковыйНомер;
	КонецЕсли;

	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3 Тогда
		СтруктураГруппы[НовыйПорядковыйНомер - 1].П000030013001 = НовыйПорядковыйНомер;
	КонецЕсли;

	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	          	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() = ИсходноеКоличествоСтрокГруппы Тогда
				
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Нельзя удалять не добавленные строки.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 1, ОбластьСдвинутойЯчейки.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число("0"+ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	Расчет(Форма, ТекТабличноеПолеИмя);
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяГруппы + "01_1"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЕсли;
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
	
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтраницуРаздел1_2НаСервере(ИмяТекущейСтраницыПанели)
	
	ВставитьДопСтраницуРаздел1_2(ЭтаФорма, ИмяТекущейСтраницыПанели);
	ПослеВставкиДополнительнойСтраницыРаздел1_2НаСервере(ИмяТекущейСтраницыПанели);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДопСтраницуРаздел1_2(Форма, ИмяТекущейСтраницыПанели)

	Перем ТаблицаСтраницРаздела;
	Перем ТаблицаДоходовИсточника;

	Если Не Форма.мСтруктураРаздел1_2.Свойство("Раздел1_2", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	ТекТабличноеПоле     = Форма.ТабличныйДокумент;
	// находим активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		//Вставляем Источник дохода
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		    СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];

			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
				// формируем представление дополнительной страницы
				ЗагТекущейСтраницыПанели = "Новая страница";
				// Определяем представление (название) дополнительной страницы 
				Если ПустаяСтрока(ЗагТекущейСтраницыПанели) Тогда
					ЗагТекущейСтраницыПанели = "Новая страница";
				КонецЕсли;

				СтрТаблицаСтраницы.Представление    = ЗагТекущейСтраницыПанели;
			КонецЕсли; // пусто

			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(Форма, "ТабличныйДокумент");
			
			Если СтрТаблицаСтраницы.ДанныеОбИсточнике.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеОбИсточнике[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.ДанныеОбИсточнике.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
						
			СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

			// Добавляем НОВЫЙ источник дохода
			СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
			СтрНоваяСтраница.Представление      = "Новая страница";
			СтрНоваяСтраница.АктивнаяСтраница   = Истина; // Активная страница

			// Очищаем показатели текущей страницы и, в случае, если
			// страница содержит многострочный раздел, удаляем все
			// дополнительно созданные строки.
			ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);

			УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);

			// Добавляем ПАРУ раздела 1_2
			// Объявляем массив доходов
			МассивДоходовПоОрганизации = Новый СписокЗначений;

			// Объявляем структуру доход
			СтруктураДоходов = Новый Структура;
			СтруктураДоходов.Вставить("Данные", Неопределено); // т.к. вставляется ПАРА то доход не определен

			Струк = Новый Структура;
			Струк.Вставить("Данные",СтруктураДоходов);
			Струк.Вставить("АктивнаяСтраница",Истина);
			Струк.Вставить("Представление","");

			// Вставляем в общий массив
			МассивДоходовПоОрганизации.Добавить(Струк);
						
			Если СтрНоваяСтраница.СведенияОДоходах.Количество() > 0 Тогда
				СтрНоваяСтраница.СведенияОДоходах[0].Значение = МассивДоходовПоОрганизации[0].Значение;
			Иначе
				СтрНоваяСтраница.СведенияОДоходах.Добавить(МассивДоходовПоОрганизации[0].Значение);
			КонецЕсли;

		КонецЕсли; // СтрТаблицаСтраницы <> Неопределено
	КонецЕсли; // если Раздел1

	Если ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда

		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			
			Для Инд = 0 По СтрТаблицаСтраницы.СведенияОДоходах.Количество() -1 Цикл
				Если СтрТаблицаСтраницы.СведенияОДоходах[Инд].Значение.АктивнаяСтраница = Истина Тогда
					АктСтр = Инд; // индекс активной странички
					Прервать;
				КонецЕсли;
			КонецЦикла;

			СтрТаблицаСтраницы.СведенияОДоходах[АктСтр].Значение.АктивнаяСтраница = Ложь; // убираем активность
			СтруктураДанныхТекущейТаблицыРаздел1_2 = СобратьДанныеТекущегоТаблПоля(Форма, "ТабличныйДокумент");
			
			Данные = Новый Структура;
			Данные.Вставить("Данные", СтруктураДанныхТекущейТаблицыРаздел1_2);
			
			СтрТаблицаСтраницы.СведенияОДоходах[АктСтр].Значение.Данные = Данные;
			
			// добавляем новый экземпляр доходов

			СтруктураДоходов = Новый Структура;
			СтруктураДоходов.Вставить("Данные", Неопределено);

			Струк = Новый Структура;
			Струк.Вставить("Данные",СтруктураДоходов);
			Струк.Вставить("АктивнаяСтраница",Истина);
			Струк.Вставить("Представление","");

			// добавляем в массив еще одну струкуту с чистыми значениями
						
			СтрТаблицаСтраницы.СведенияОДоходах.Добавить(Струк);

		КонецЕсли; // СтрТаблицаСтраницы <> Неопределено

			ОчиститьТабличноеПоле(Форма, "Раздел1_2");

			УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);

	КонецЕсли; // ИмяТекущейСтраницыПанели = "Раздел1_2"

КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыРаздел1_2НаСервере(ИмяТекущейСтраницыПанели, ПерейтиНаВставленныйЛист = Истина)
	
	ПослеВставкиДополнительнойСтраницыРаздел1_2(ЭтаФорма, ИмяТекущейСтраницыПанели, ПерейтиНаВставленныйЛист);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПослеВставкиДополнительнойСтраницыРаздел1_2(Форма, ИмяТекущейСтраницыПанели, ПерейтиНаВставленныйЛист)
	
	ТекущийЭлемент = Форма.РазделыОтчета.НайтиПоИдентификатору(Форма.Элементы.РазделыОтчета.ТекущаяСтрока);
	
	Родитель = ТекущийЭлемент.ПолучитьРодителя();

	Если НЕ Родитель = Неопределено Тогда
		ТекущийЭлемент = Родитель;
	КонецЕсли;
    	
	НомерДобавляемойСтраницы = ТекущийЭлемент.ПолучитьЭлементы().Количество() + 1;
    	
	ДобавляемаяСтраница = ТекущийЭлемент.ПолучитьЭлементы().Добавить();
			
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		
		ДобавляемаяСтраница.КолонкаРазделыОтчета              = "Источник" + Символы.ПС + "дохода " + НомерДобавляемойСтраницы;
		ДобавляемаяСтраница.ИндексКартинки                    = 0;
		ДобавляемаяСтраница.КолонкаРазделыОтчетаСокрНаим      = ТекущийЭлемент.КолонкаРазделыОтчетаСокрНаим;
		ДобавляемаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомерДобавляемойСтраницы;
		ДобавляемаяСтраница.РазделМногостраничный             = ТекущийЭлемент.РазделМногостраничный;
		ДобавляемаяСтраница.РазделМногострочный               = ТекущийЭлемент.РазделМногострочный;
		
		ИдентификаторДобавляемойСтраницы = ДобавляемаяСтраница.ПолучитьИдентификатор();
		
		ТекущийЭлемент = ДобавляемаяСтраница;
		НомерДобавляемойСтраницы = ТекущийЭлемент.ПолучитьЭлементы().Количество() + 1;
		
		ДобавляемаяСтраница = ТекущийЭлемент.ПолучитьЭлементы().Добавить();
				
	КонецЕсли;
	
	ДобавляемаяСтраница.КолонкаРазделыОтчета              = "Сведения" + Символы.ПС + "о доходах " + НомерДобавляемойСтраницы;
	ДобавляемаяСтраница.ИндексКартинки                    = 1;
	ДобавляемаяСтраница.КолонкаРазделыОтчетаСокрНаим      = "Раздел1_2";
	ДобавляемаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомерДобавляемойСтраницы;
	ДобавляемаяСтраница.РазделМногостраничный             = Истина;
	ДобавляемаяСтраница.РазделМногострочный               = ТекущийЭлемент.РазделМногострочный;
	
	Если НЕ ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИдентификаторДобавляемойСтраницы = ДобавляемаяСтраница.ПолучитьИдентификатор();
	КонецЕсли;
		    	
	Если ПерейтиНаВставленныйЛист Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ИдентификаторДобавляемойСтраницы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостроениеПервоначальнойСтруктурыНаСервере(Первый = Истина, НаимРаздела)
	
	ПостроениеПервоначальнойСтруктуры(ЭтаФорма, Первый, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПостроениеПервоначальнойСтруктуры(Форма, Первый = Истина, НаимРаздела)
	Перем ТаблицаСтраницРаздела;
	Перем ТаблицаДоходовИсточника;

	Если Не Форма.мСтруктураРаздел1_2.Свойство("Раздел1_2", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	Если Первый Тогда
				
		ОчиститьТабличноеПоле(Форма, НаимРаздела);
		СтруктураДанныхТекущейТаблицыРаздел1 = СобратьДанныеТекущегоТаблПоля(Форма, "ТабличныйДокумент");

		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;
		СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
		СтрНоваяСтраница.ДанныеОбИсточнике.Добавить(СтруктураДанныхТекущейТаблицыРаздел1);

		СтруктураДоходов = Новый Структура;
		СтруктураДоходов.Вставить("Данные", Неопределено);

		Струк = Новый Структура;
		Струк.Вставить("Данные",СтруктураДоходов);
		Струк.Вставить("АктивнаяСтраница",Истина);
		Струк.Вставить("Представление","");
        		
		СтрНоваяСтраница.СведенияОДоходах.Добавить(Струк);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницу12НаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	УдалитьДополнительнуюСтраницу12(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтраницу12(Форма, ИмяТекущейСтраницыПанели)
	Перем ТаблицаСтраницРаздела;
    	
	Если Не Форма.мСтруктураРаздел1_2.Свойство("Раздел1_2", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина))[0];
	ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);

	Если ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда

		Если СтрТаблицаСтраницы.СведенияОДоходах.Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;

		АктСтр = 0;

		Для Инд = 0 По СтрТаблицаСтраницы.СведенияОДоходах.Количество() -1 Цикл
			Если СтрТаблицаСтраницы.СведенияОДоходах[Инд].Значение.АктивнаяСтраница = Истина Тогда
				АктСтр = Инд; // индекс активной странички
				Прервать;
			КонецЕсли;
		КонецЦикла;

		СтрТаблицаСтраницы = ТаблицаСтраницРаздела[ИндексТекСтрока].СведенияОДоходах;

	КонецЕсли;

	Если СтрТаблицаСтраницы <> Неопределено Тогда

		Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

			Если ТаблицаСтраницРаздела.Количество() <= 1 Тогда
				Возврат;
			КонецЕсли;

			ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
			ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);
		Иначе
			МассивДляУдаления = СтрТаблицаСтраницы;
			
			МассивДляУдаления.Удалить(АктСтр);
			
			ИндексТекСтрока = АктСтр;
		КонецЕсли;

		// очищаем редактируемые ячейки удаляемой страницы
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);

		Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
			КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Иначе
			КолвоДопСтраниц = СтрТаблицаСтраницы.Количество();
		КонецЕсли;
		
		Если КолвоДопСтраниц > 0 Тогда
			Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
				СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];
			Иначе
				СтрТаблицаСтраницыЗамена = СтрТаблицаСтраницы[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];
			КонецЕсли;
            
			// Восстановим данные замещаемой страницы.
			Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
				СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.ДанныеОбИсточнике[0].Значение;
			Иначе
				СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Значение.Данные.Данные;
			КонецЕсли;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Попытка
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			КонецЦикла;
			
			Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
				СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
			Иначе
				СтрТаблицаСтраницыЗамена.Значение.АктивнаяСтраница = Истина;
			КонецЕсли;

		КонецЕсли;

		Расчет(Форма, ИмяТекущейСтраницыПанели);
		Форма.Модифицированность = Истина;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ОбновитьНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	ЗаполнитьСведенияОбФЛ();
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	ЗаполнитьСведенияОбФЛ(Истина);
	СформироватьДеревоРазделовОтчетаНаСервере();
	ЗаполнитьДатуПодписиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	Модифицированность = Истина;

	Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить() Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все разделы (листы) отчета.%1Продолжить операцию?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОчиститьНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	
	ТаблицаСтраницыФизЛиц.Очистить();
	ТаблицаСтраницыРазделов1и2.Очистить();
	ТаблицаСтраницыРаздела2.Очистить();
	ТаблицаСтраницыРаздела3.Очистить();
	ТаблицаСтраницыРаздела4.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма, "дляВыбораСтраницОтчета");

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	ДополнительныеПараметры =  Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере(НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#Иначе
			ИзменитьТаблицуВариантовЗаполненияНаКлиенте(НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере(ПолныйРучнойВвод = Ложь)
	
	ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, ПолныйРучнойВвод);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТаблицуВариантовЗаполненияНаКлиенте(ПолныйРучнойВвод = Ложь)
	
	ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, ПолныйРучнойВвод);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьТаблицуВариантовЗаполнения(Форма, ПолныйРучнойВвод)

	Перем МассивВариантовЗаполненияСтраниц;
	
	ПереборЗнач = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы().Количество();

	Пока ПереборЗнач > 0 цикл
		ИмяСтраницы = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы()[ПереборЗнач-1].ИмяСтраницы;
		ПереборЗнач = ПереборЗнач-1;
		
		КолСтрВРазделе = ПолучитьКоличествоСтраницРаздела(Форма, ИмяСтраницы); // кол-во страниц в разделе
		
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницы);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПолныйРучнойВвод Тогда
						
			Если КолСтрВРазделе = 1 Тогда
				
				Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
					Если Строка.ВариантЗаполнения = 4 Тогда
						Строка.ВариантЗаполнения = 0; // полный ручной ввод
					КонецЕсли;
				КонецЦикла;
												
				УстановитьЦветФонаЯчейки(Форма,,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				
			КонецЕсли; // КолСтрВРазделе = 1 Иначе // если многостраничный раздел
			
			Если КолСтрВРазделе >= 2 Тогда
				
				Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
					Продолжить;
				КонецЕсли;
				
				МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
				
				Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
					Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд].ТаблицаВариантовЗаполнения Цикл
						Если Строка.ВариантЗаполнения = 4 Тогда
							Строка.ВариантЗаполнения = 0; // полный ручной ввод
						КонецЕсли; // ВариантЗаполнения <> 0 
					КонецЦикла; // Для каждого
				КонецЦикла; // Для
				УстановитьЦветФонаЯчейки(Форма,,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела); // текущую обновим
			КонецЕсли; // КолСтрВРазделе >= 2
			
		ИначеЕсли ПолныйРучнойВвод Тогда
			
			// Все в эталонном виде
			Если КолСтрВРазделе = 1 Тогда
				Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
					Если Стр.ВариантЗаполнения = 0 Тогда
						Стр.ВариантЗаполнения = 4
					КонецЕсли;
				КонецЦикла;
						
				УстановитьЦветФонаЯчейки(Форма,,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				
			КонецЕсли; // если одна страница в разделе
			
			Если КолСтрВРазделе >= 2 Тогда
				Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
					Продолжить;
				КонецЕсли;
				
				МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
				
				Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
					
					Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд].ТаблицаВариантовЗаполнения Цикл
						Если Строка.ВариантЗаполнения = 0 Тогда
							Строка.ВариантЗаполнения = 4; // полный автоматический ввод
						КонецЕсли; // ВариантЗаполнения <> 0 
					КонецЦикла; // Для каждого
					
				КонецЦикла; // Для
				
				УстановитьЦветФонаЯчейки(Форма,,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела); // текущую обновим
				
			КонецЕсли; // если более 1 страница в разделе
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКоличествоСтраницРаздела(Форма, ИмяТекущейСтраницыПанели)
	
	Перем ТаблицаСтраницРаздела;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат 1;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	КоличествоСтраниц = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	
	Возврат КоличествоСтраниц;	
	
КонецФункции

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	УстановитьФорматВывода(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    	        	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
			
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();

	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		СохрТЗМногострочнойГруппы2 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		СохрТЗМногострочнойГруппы3_Стр2_1 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1].Выгрузить();
		СохрТЗМногострочнойГруппы3_Стр2_2 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2].Выгрузить();
		СохрТЗМногострочнойГруппы3_Стр2_3 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3].Выгрузить();
		СохрТЗМногострочнойГруппы3_Стр3_1 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1].Выгрузить();
		СохрТЗМногострочнойГруппы3_Стр3_2 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2].Выгрузить();
		СохрТЗМногострочнойГруппы3_Стр3_3 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	Если НомерКорректировки = 0 Тогда
		СтруктураДанныхТитульный.Вставить("НомКоррект", "");
	КонецЕсли;
	ВывестиМакетВТаблДокНаСервере("Титульный", 0, 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	СтруктураПараметров = Новый Структура;
    	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.ПолучитьЭлементы().Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.ПолучитьЭлементы() Цикл
				
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.ПолучитьЭлементы().Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.ПолучитьЭлементы() Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3);
						Если Пометка = 0 Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если ИмяСтраницыПанели = "Раздел1" Тогда
			Если ЭтаФорма[мСтруктураРаздел1_2.Раздел1_2].Количество() >= 1 Тогда
				СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
				ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			Иначе
				ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 1, 1);
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				ВывестиМакетВТаблДокНаСервере("Раздел1_2", 1, 1);
				СтруктураПараметров.ИмяСтраницы = "Раздел1_2";
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				СтруктураПараметров.ИмяСтраницы = "Раздел1";
			КонецЕсли;
		Иначе
			Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
				ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 1, 1);
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			Иначе
				// выводим на печать все созданные страницы многостраничного раздела
				СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
				ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			КонецЕсли;

		КонецЕсли; // Раздел1 Раздел1_2
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы2);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1].Загрузить(СохрТЗМногострочнойГруппы3_Стр2_1);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2].Загрузить(СохрТЗМногострочнойГруппы3_Стр2_2);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3].Загрузить(СохрТЗМногострочнойГруппы3_Стр2_3);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1].Загрузить(СохрТЗМногострочнойГруппы3_Стр3_1);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2].Загрузить(СохрТЗМногострочнойГруппы3_Стр3_2);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3].Загрузить(СохрТЗМногострочнойГруппы3_Стр3_3);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	СтруктураДанныхТитульный.Вставить("НомКоррект", Строка(НомерКорректировки));
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);

КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если ИмяСтраницы = "Раздел1" Тогда
	
		Если Не мСтруктураРаздел1_2.Свойство("Раздел1_2", ТаблицаСтраницРаздела) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		Если ИмяСтраницы = "Раздел1" Тогда
			СтруктураПараметровСтраницы.Вставить("НаименованиеЛиста", "Раздел1");
			СтруктураПараметровСтраницы.Вставить("ИмяСтраницыПанели", "Раздел1");
		КонецЕсли;
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
		
		Если ИмяСтраницы = "Раздел1" Тогда
			
			МассивПризнаковАктивностиРаздела1_2 = Новый Массив;
			Для Инд = 0 По ЭтаФорма[мСтруктураРаздел1_2.Раздел1_2][ТекущийИндекс].СведенияОДоходах.Количество()-1 Цикл
				МассивПризнаковАктивностиРаздела1_2.Добавить(
					ЭтаФорма[мСтруктураРаздел1_2.Раздел1_2][ТекущийИндекс].СведенияОДоходах[Инд].Значение.АктивнаяСтраница);
			КонецЦикла;
			
			Для Инд = 0 По ЭтаФорма[мСтруктураРаздел1_2.Раздел1_2][ТекущийИндекс].СведенияОДоходах.Количество()-1 Цикл
				СтруктураПараметровСтраницы.Вставить("НаименованиеЛиста", "Раздел1_2");
				СтруктураПараметровСтраницы.Вставить("ИмяСтраницыПанели", "Раздел1");
				СтруктураПараметровСтраницы.ИмяСтраницы = "Раздел1_2";
				
				ВывестиМакетВТаблДокНаСервере("Раздел1_2", Инд + 1, ТекущийИндекс + 1);
				ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
				
				СтруктураПараметровСтраницы.ИмяСтраницы = "Раздел1";
			КонецЦикла;
			
			Для Инд = 0 По ЭтаФорма[мСтруктураРаздел1_2.Раздел1_2][ТекущийИндекс].СведенияОДоходах.Количество()-1 Цикл
				ЭтаФорма[мСтруктураРаздел1_2.Раздел1_2][ТекущийИндекс].СведенияОДоходах[Инд].Значение.АктивнаяСтраница
					= МассивПризнаковАктивностиРаздела1_2[Инд];
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", "ПечатнаяФормаОтчета2012Кв3_Титульный");
	СоответствиеРазделовМакетам.Вставить("ФизЛица",   "ПечатнаяФормаОтчета2012Кв3_ФизЛица");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   "ПечатнаяФормаОтчета2012Кв3_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел1_2", "ПечатнаяФормаОтчета2012Кв3_Раздел1_2");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   "ПечатнаяФормаОтчета2012Кв3_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",   "ПечатнаяФормаОтчета2012Кв3_Раздел3");
	СоответствиеРазделовМакетам.Вставить("Раздел4",   "ПечатнаяФормаОтчета2012Кв3_Раздел4");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
	
	КолвоМнгГрупп = 0;
	
	Если Парам1.ИмяСтраницы = "Раздел2" Тогда
		КолвоМнгГрупп = 1;
	ИначеЕсли Парам1.ИмяСтраницы = "Раздел3" Тогда	
		КолвоМнгГрупп = 6;
	КонецЕсли;
	
	Для НомГруппы = 1 По КолвоМнгГрупп Цикл
		
		Если Парам1.ИмяСтраницы = "Раздел2" Тогда
			ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел3" Тогда	
			Если НомГруппы = 1 Тогда
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1;
			ИначеЕсли НомГруппы = 2 Тогда	
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2;
			ИначеЕсли НомГруппы = 3 Тогда		
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3;
			ИначеЕсли НомГруппы = 4 Тогда		
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1;
			ИначеЕсли НомГруппы = 5 Тогда			
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2;
			ИначеЕсли НомГруппы = 6 Тогда				
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3;
			КонецЕсли;
		КонецЕсли;
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		ОбластьМнгЧасти              = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть" + ?(Парам1.ИмяСтраницы = "Раздел3", НомГруппы, ""));
		ВысотаОбластиМнгЧасти        = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть" + ?(Парам1.ИмяСтраницы = "Раздел3", НомГруппы, "")).ВысотаТаблицы;
		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, , ВысотаОбластиМнгЧасти).Области[0].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
		
		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
			
			КолвоСтрокВПечатнойФормеСтр = Формат(КолвоСтрокВПечатнойФорме, "ЧГ=");
			
			НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + "01_" + КолвоСтрокВПечатнойФормеСтр).Верх;
			НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + Формат(мСтруктураКолвоКолонокРазделов[ИдГруппы], "ЧЦ=2; ЧВН=") + "_" + КолвоСтрокВПечатнойФормеСтр).Низ;
			
			ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
			
			Для Ном = 1 По КолвоДопСтрок Цикл
				
				МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
				
			КонецЦикла;
			
			Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
				НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
				Если НЕ НайденнаяОбласть = Неопределено Тогда 
					НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, СтрНайти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
				КонецЕсли;
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок - 1 Цикл
				
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
		
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
			
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписиРук = Новый Массив(8);
	МассивДатаПодписиБух = Новый Массив(8);
	МассивДатаПодписиУпП = Новый Массив(8);
	МассивИННРук		 = Новый Массив(12);
	МассивИННБух 		 = Новый Массив(12);
	МассивИННУП 		 = Новый Массив(12);
				
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = "00" + СтрИНН;
		КонецЕсли;
				
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИННРук");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивИННРук[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИННГБ");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивИННБух[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИННУП");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивИННУП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргДиректор.Значение) Тогда
				МассивДатаПодписиРук[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргБухгалтер.Значение) Тогда
				МассивДатаПодписиБух[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргУП.Значение) Тогда
				МассивДатаПодписиУпП[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);	
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук", МассивДатаПодписиРук);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух", МассивДатаПодписиБух);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиУпП", МассивДатаПодписиУпП);	
	ОбщиеРеквизитыРазделов.Вставить("ИННРук", МассивИННРук);	
	ОбщиеРеквизитыРазделов.Вставить("ИННГБ",  МассивИННБух);	
	ОбщиеРеквизитыРазделов.Вставить("ИННУП",  МассивИННУП);	
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если СтрНайти(Область.Имя, "ДобавлениеСтроки") > 0
			Или СтрНайти(Область.Имя, "ДобавитьСтроку") > 0
			Или СтрНайти(Область.Имя, "УдалитьСтроку") > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Область.Имя, "ДобавитьСтраницу") > 0
			Или СтрНайти(Область.Имя, "УдалитьСтраницу") > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ИНН") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КПП") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ОтветственныйУчастник") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомКвартал") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "КодИМНС") > 0
					  ИЛИ Область.Имя = "ОГРН"
					  ИЛИ СтрЧислоВхождений(Область.Имя, "Прил") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННРук") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННГБ") > 0 
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННУП") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;	
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ФизЛица" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ФизЛицДокДата") > 0 Тогда
					
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						СтрокаДт =  Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
						Для Ном = 1 По СтрДлина(СтрокаДт) Цикл
							
							МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрокаДт, Ном, 1);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Продолжить;	
				ИначеЕсли (СтрЧислоВхождений(Область.Имя, "ФизЛицКодГражд") > 0
                    ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицИнд") > 0  
					ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицДок") > 0
				    ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицС") > 0) 
					И (Область.Имя<>"ФизЛицДокВид") И (Область.Имя<>"ФизЛицДокВыдан")  
					И (Область.Имя<>"ФизЛицДокСерияНомер") 
					И (Область.Имя<>"ФизЛицСлТел")  И (Область.Имя<>"ФизЛицСубъект") Тогда
					
					Если Не ПустаяСтрока(Область.Значение) Тогда
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					КонецЕсли;
					Продолжить;     				
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел1" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КодСтраны") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;	

			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел2" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КодСтраны") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "Ставка") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КодВЭД") > 0 Тогда
				 
				 Если ЗначениеЗаполнено(Область.Значение) Тогда
					 
					 Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						 
						 МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						 
					 КонецЦикла;
					 
				 КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДатаНач") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаКон") > 0 Тогда
					  
					СтрДата = "";
					  
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						СтрДата = СтрЗаменить(Лев(Строка(Область.Значение), 10), ".", "");
					КонецЕсли;
					  
					Для Ном = 1 По СтрДлина(СтрДата) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрДата, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;	
					
				КонецЕсли;
			
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел3" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КодСтраны") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			
		ИначеЕсли Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда	
			
			МакетПечатнойФормы.Области[Область.Имя].Защита = Ложь;
			
			МакетПечатнойФормы.Области[Область.Имя].Текст = Область.Текст;
			
			МакетПечатнойФормы.Области[Область.Имя].Защита = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		Если Реквизит.Ключ = "ДатаПодписиРук" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиРук";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиБух" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиБух";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиУпП" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
			НаименованиеОбласти = "ДатаПодписиУпП";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ИННРук" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ИННРук";
				Постфикс = "1";
				Разделитель = Ложь;
			КонецЕсли;	
		ИначеЕсли Реквизит.Ключ = "ИННГБ" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ИННГБ";
				Постфикс = "1";
				Разделитель = Ложь;
			КонецЕсли;		
		ИначеЕсли Реквизит.Ключ = "ИННУП" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ИННУП";
				Постфикс = "1";
				Разделитель = Ложь;
			КонецЕсли;			
		Иначе
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
		КонецЕсли;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Цикл
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				Если НЕ Реквизит.Значение[Ном - 1] = Неопределено Тогда
					МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение = Реквизит.Значение[Ном - 1];
				КонецЕсли;
			КонецЦикла;
			
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ИнициализацияСоставаПоказателей();
	
	ИзвлечьДанные();
	
	ДеревоДляЗагрузки = Неопределено;
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, Новый Структура, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");

		Сообщение.Сообщить();

		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
		
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , СтруктураРеквизитовФормы.мСохраненныйДок.КПП, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала, СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	РегламентированнаяОтчетность.СтандартнаяПостобработкаТекстаВыгрузки(Текст);

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ИнициализацияСоставаПоказателей();
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

&НаСервере
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
	Иначе
		ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	ДанныеФизЛиц = ПолучитьДанныеФизЛиц( ?(СтруктураМногостраничныхРазделов = Неопределено, мСтруктураМногостраничныхРазделов, СтруктураМногостраничныхРазделов));
	
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	СписокДляВозврата.Добавить(ДанныеФизЛиц);
	
	Возврат СписокДляВозврата;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргКПП  = СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН  = Орг.ИНН;
	ОргОГРН = СокрЛП(ПоказателиТитульный.ОГРН);
	
	ОргНазв      = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргДиректор  = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргУП        = ПоказателиТитульный.ОргУП;
	
	ИННРук = СокрЛП(ПоказателиТитульный.ИННРук);
	ИННБух = СокрЛП(ПоказателиТитульный.ИННГБ);
	ИННУП  = СокрЛП(ПоказателиТитульный.ИННУП);
	
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		ПризнВидаДок = Число(ВидДок);
	КонецЕсли;
		
	ТипЧисло = Новый ОписаниеТипов("Число");
	НомКорректировки = ТипЧисло.ПривестиЗначение(ПоказателиТитульный.НомКоррект);
	
	ПризнОтчетногоПериода = СокрЛП(ПоказателиТитульный.НалогПериод);
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	                                         
	Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
	Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);
	Текст.ДобавитьСтроку("КППЮЛ:" + СокрЛП(ОргКПП));
	ВставитьНеобязательныйРеквизит(Текст, "ОГРН", СокрЛП(ОргОГРН));
	Текст.ДобавитьСтроку("###");
	
	// Сведения о руководстве организации.
	СведенияОФизлицах = Инф.Получить(1).Значение;
	
	Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор));
	
	Если НЕ ПустаяСтрока(ИННРук) Тогда
		Текст.ДобавитьСтроку("ИННРук:" + ИННРук);
	Иначе
		СведенияОРуководителе = СведенияОФизлицах.Найти(ОргДиректор, "ФизЛицФИО");
		Если СведенияОРуководителе <> Неопределено Тогда
			ВставитьНеобязательныйРеквизит(Текст, "ТелСлужРук", СокрЛП(СведенияОРуководителе.ФизЛицСлТел));
			ВставитьНеобязательныйРеквизит(Текст, "ДатаРождРук", Формат(СведенияОРуководителе.ФизЛицДатаР, "ДФ=dd.MM.yyyy"));
			ВставитьНеобязательныйРеквизит(Текст, "МестоРождРук", СокрЛП(СведенияОРуководителе.ФизЛицМестоР));
			ВставитьНеобязательныйРеквизит(Текст, "ПолРук", СведенияОРуководителе.ФизЛицПол);
			ВставитьНеобязательныйРеквизит(Текст, "ГраждРук", СокрЛП(СведенияОРуководителе.ФизЛицГражданство));
			ВставитьНеобязательныйРеквизит(Текст, "КодГраждРук", СокрЛП(СведенияОРуководителе.ФизЛицКодГражд));
			
			Если ЗначениеЗаполнено(СведенияОРуководителе.ФизЛицДокКод) ИЛИ ЗначениеЗаполнено(СведенияОРуководителе.ФизЛицДокСерияНомер) Тогда
				СведенияОДокументе = СокрЛП(СведенияОРуководителе.ФизЛицДокКод) + "," + СокрЛП(СведенияОРуководителе.ФизЛицДокСерияНомер);
				ВставитьНеобязательныйРеквизит(Текст, "УдЛичнРук", СведенияОДокументе);
			КонецЕсли;
			ВставитьНеобязательныйРеквизит(Текст, "ВыдУдЛичнРук", СокрЛП(СведенияОРуководителе.ФизЛицДокВыдан));
			ВставитьНеобязательныйРеквизит(Текст, "ДатаУдЛичнРук", СокрЛП(СведенияОРуководителе.ФизЛицДокДата));
			
			ВставитьНеобязательныйРеквизит(Текст, "АдрМЖРукРФ", ПредставлениеАдресаФЛ(СведенияОРуководителе));
			ВставитьНеобязательныйРеквизит(Текст, "АдрМЖРукРез", СокрЛП(СведенияОРуководителе.ФизЛицИноАдрес));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОргБухгалтер) Тогда
		Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер));
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИННБух) Тогда
		Текст.ДобавитьСтроку("ИННБух:" + ИННБух);
	Иначе
		СведенияОБухгалтере = СведенияОФизлицах.Найти(ОргБухгалтер, "ФизЛицФИО");
		Если СведенияОБухгалтере <> Неопределено Тогда
			ВставитьНеобязательныйРеквизит(Текст, "ТелСлужБух", СокрЛП(СведенияОБухгалтере.ФизЛицСлТел));
			
			Если ЗначениеЗаполнено(СведенияОБухгалтере.ФизЛицДокКод) ИЛИ ЗначениеЗаполнено(СведенияОБухгалтере.ФизЛицДокСерияНомер) Тогда
				СведенияОДокументе = СокрЛП(СведенияОБухгалтере.ФизЛицДокКод) + "," + СокрЛП(СведенияОБухгалтере.ФизЛицДокСерияНомер);
				ВставитьНеобязательныйРеквизит(Текст, "УдЛичнБух", СведенияОДокументе);
			КонецЕсли;
			ВставитьНеобязательныйРеквизит(Текст, "ВыдУдЛичнБух", СокрЛП(СведенияОБухгалтере.ФизЛицДокВыдан));
			ВставитьНеобязательныйРеквизит(Текст, "ДатаУдЛичнБух", СокрЛП(СведенияОБухгалтере.ФизЛицДокДата));
			
			ВставитьНеобязательныйРеквизит(Текст, "АдрМЖБухРФ", ПредставлениеАдресаФЛ(СведенияОБухгалтере));
			ВставитьНеобязательныйРеквизит(Текст, "АдрМЖБухРез", СокрЛП(СведенияОБухгалтере.ФизЛицИноАдрес));
		КонецЕсли;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ФИОУпПред:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргУП));
	Если НЕ ПустаяСтрока(ИННУП) Тогда
		Текст.ДобавитьСтроку("ИННУпПред:" + ИННУП);
	Иначе
		СведенияОПредставителе = СведенияОФизлицах.Найти(ОргУП, "ФизЛицФИО");
		Если СведенияОПредставителе <> Неопределено Тогда
			ВставитьНеобязательныйРеквизит(Текст, "ТелСлужУпПред", СокрЛП(СведенияОПредставителе.ФизЛицСлТел));
			ВставитьНеобязательныйРеквизит(Текст, "ДатаРождУпПред", Формат(СведенияОПредставителе.ФизЛицДатаР, "ДФ=dd.MM.yyyy"));
			ВставитьНеобязательныйРеквизит(Текст, "МестоРождУпПред", СокрЛП(СведенияОПредставителе.ФизЛицМестоР));
			ВставитьНеобязательныйРеквизит(Текст, "ПолУпПред", СведенияОПредставителе.ФизЛицПол);
			ВставитьНеобязательныйРеквизит(Текст, "ГраждУпПред", СокрЛП(СведенияОПредставителе.ФизЛицГражданство));
			ВставитьНеобязательныйРеквизит(Текст, "КодГраждУпПред", СокрЛП(СведенияОПредставителе.ФизЛицКодГражд));
			
			Если ЗначениеЗаполнено(СведенияОПредставителе.ФизЛицДокКод) ИЛИ ЗначениеЗаполнено(СведенияОПредставителе.ФизЛицДокСерияНомер) Тогда
				СведенияОДокументе = СокрЛП(СведенияОПредставителе.ФизЛицДокКод) + "," + СокрЛП(СведенияОПредставителе.ФизЛицДокСерияНомер);
				ВставитьНеобязательныйРеквизит(Текст, "УдЛичнУпПред", СведенияОДокументе);
			КонецЕсли;
			ВставитьНеобязательныйРеквизит(Текст, "ВыдУдЛичнУпПред", СокрЛП(СведенияОПредставителе.ФизЛицДокВыдан));
			ВставитьНеобязательныйРеквизит(Текст, "ДатаУдЛичнУпПред", СокрЛП(СведенияОПредставителе.ФизЛицДокДата));
			
			ВставитьНеобязательныйРеквизит(Текст, "АдрМЖУпПредРФ", ПредставлениеАдресаФЛ(СведенияОПредставителе));
			ВставитьНеобязательныйРеквизит(Текст, "АдрМЖУпПредРез", СокрЛП(СведенияОПредставителе.ФизЛицИноАдрес));
		КонецЕсли;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("###");
	Текст.ДобавитьСтроку("ПризФОтч:1"); 
	Текст.ДобавитьСтроку("КНД:" + СтруктураРеквизитовФормы.КНД); 
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки)); 
	Текст.ДобавитьСтроку("ВерФОтч:3.00004");
	Текст.ДобавитьСтроку("ПериодВерОтч:14.09.2012,");
	Текст.ДобавитьСтроку("ПризВидДок:" + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:" + НомКорректировки);
	КонецЕсли;
	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	Текст.ДобавитьСтроку("ГодПериодОтч:" + Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	
	КодПоМестуПредставления = "210";
	Если ЗначениеЗаполнено(ПоказателиТитульный.ОтветственныйУчастник) Тогда
		КодПоМестуПредставления = "218";
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ДокПредст:" + КодПоМестуПредставления);
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеАдресаФЛ(СведенияОФизЛице)
	
	Если ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицИндекс)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицКодСуб)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицРайон)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицГород)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицНП)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицУлица)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицДом)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицКорпус)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицКвартира) Тогда
		ПредставлениеАдреса = "643"
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицИндекс)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицКодСуб)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицРайон)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицГород)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицНП)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицУлица)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицДом)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицКорпус)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицКвартира);
	Иначе
		ПредставлениеАдреса = "";
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

&НаСервере
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	Показатели = мТаблицаСоставПоказателей.Выгрузить();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И СтруктураРеквизитовФормы.ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяРаздела = "Раздел1" Тогда
			ВыгрузитьРаздел1(Текст);
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла__ = Ложь;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
									
									ВыходИзДвойногоЦикла__ = Истина;
									Прервать;
									
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла__ Тогда
								Прервать;
							КонецЕсли;
														
							ном = ном + 1;
							
						КонецЦикла;
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							Если ИмяЯчейки = "ПериодРаздел2" Тогда
								
								Если ЗначениеЗаполнено(ТекПок.ДатаНач)
								 ИЛИ ЗначениеЗаполнено(ТекПок.ДатаКон) Тогда
								
									ЗначениеЯчейки = Лев(Строка(ТекПок.ДатаНач), 10) + "," + Лев(Строка(ТекПок.ДатаКон), 10);
									
								Иначе	
									
									ЗначениеЯчейки = "";
									
								КонецЕсли;
																
							Иначе
								
								ЗначениеЯчейки = ТекПок[ИмяЯчейки];
								
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;

								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							Если ИмяЯчейки = "ПериодРаздел2" Тогда
								
								Если ЗначениеЗаполнено(ТекПок.ДатаНач)
								 ИЛИ ЗначениеЗаполнено(ТекПок.ДатаКон) Тогда
								
									ЗначениеЯчейки = Лев(Строка(ТекПок.ДатаНач), 10) + "," + Лев(Строка(ТекПок.ДатаКон), 10);
									
								Иначе	
									
									ЗначениеЯчейки = "";
									
								КонецЕсли;
								
							Иначе
								
								ЗначениеЯчейки = ТекПок[ИмяЯчейки];
								
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					Если Лев(ИмяЯчейки, 2) = "_П" Тогда
						Если ЗначениеЗаполнено(ТекПок[Сред(ИмяЯчейки, 3)]) Тогда
							ЗначениеЯчейки = "1";
						Иначе
							ЗначениеЯчейки = "0";
						КонецЕсли;
					Иначе
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					КонецЕсли;
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					Если Лев(ИмяЯчейки, 2) = "_П" Тогда
						Если ЗначениеЗаполнено(ТекПок[Сред(ИмяЯчейки, 3)]) Тогда
							ЗначениеЯчейки = "1";
						Иначе
							ЗначениеЯчейки = "0";
						КонецЕсли;
					Иначе
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					КонецЕсли;
					
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла_ = Ложь;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла_ = Истина;
								Прервать;
								
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла_ Тогда
							Прервать;
						КонецЕсли;
												
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла_ = Истина;
								Прервать;
								
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла_ Тогда
							Прервать;
						КонецЕсли;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	Замена = Новый СписокЗначений;
	Замена.Добавить("П000040001004:");
	Замена.Добавить("П000040001005:");
	Замена.Добавить("П000040002004:");
	Замена.Добавить("П000040002005:");
	Замена.Добавить("П000040003005:");
	Замена.Добавить("П000040004004:");
	Замена.Добавить("П000040004005:");
	Замена.Добавить("П000040005004:");
	Замена.Добавить("П000040005005:");
	Замена.Добавить("П000040006004:");
	Замена.Добавить("П000040006005:");
	Замена.Добавить("П000040007004:");
	Замена.Добавить("П000040007005:");
	Замена.Добавить("П000040008005:");
	Замена.Добавить("П000040009004:");
	Замена.Добавить("П000040009005:");
	Замена.Добавить("П000040010004:");
	Замена.Добавить("П000040010005:");
	Замена.Добавить("П000040011004:");
	Замена.Добавить("П000040011005:");
	Замена.Добавить("П000040012004:");
	Замена.Добавить("П000040012005:");
	Замена.Добавить("П000040013005:");
	Замена.Добавить("П000040014004:");
	Замена.Добавить("П000040014005:");
	Замена.Добавить("П000040015004:");
	Замена.Добавить("П000040015005:");
	Замена.Добавить("П000040016005:");
	
	СоответствиеКодовПоказателейДлинамЗначений = Новый Соответствие;
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010001003", 1000);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010003003", 50);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010004003", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010006003", 128);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010007003", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020001003", 1000);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020002003", 50);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020003003", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020005003", 128);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020007003", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020010002", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030001003", 1000);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030002003", 50);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030003003", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030005003", 128);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030007002", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030008002", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030009002", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030011002", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030012002", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000030013002", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000040003001", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000040008001", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000040013001", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000040016001", 120);
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		
		// вставим разделитель блоков
		Если Тек13Симв = "П000030005003" И Лев(Текст.ПолучитьСтроку(ТекИнд + 1), 3) <> "###" Тогда
			ТЕкст.ВставитьСтроку(ТекИнд + 1, "###");			
		КонецЕсли;
		
		// вставим "0", где он обязателен
		Если Замена.НайтиПоЗначению(ТекСтрока) <> Неопределено Тогда
			Текст.ЗаменитьСтроку(ТекИнд, ТекСтрока + "0");
		КонецЕсли;
		
		// обрежем значения текстовых показателей
		ДлинаЗначения = СоответствиеКодовПоказателейДлинамЗначений[Тек13Симв];
		Если ДлинаЗначения <> Неопределено Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТекСтрока, 13 + 1 + ДлинаЗначения)));
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ИзвлечьДанные()
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						СтруктураДопСтрок = Новый Структура;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							
							СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0; //возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";
	
	Если БратьИзформы Тогда
		Орг = СтруктураРеквизитовФормы.Организация;
	Иначе
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Источник данных для формирования отчета не определен!'"), ПредставлениеОтчета);
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если Данные = Неопределено Тогда
			Если ВыводитьСообщения Тогда
								
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Источник данных для формирования отчета не определен!'"), ПредставлениеОтчета);
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
		ПредставлениеОтчета = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок) + ". ";
	КонецЕсли;
		 
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргИНН       = Орг.ИНН;
	ОргНазв      = ПоказателиТитульный.ОргНазв;
	ОргДиректор  = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргУП        = ПоказателиТитульный.ОргУП;
	
	ИННРук = СокрЛП(ПоказателиТитульный.ИННРук);
	ИННБух = СокрЛП(ПоказателиТитульный.ИННГБ);
	ИННУП  = СокрЛП(ПоказателиТитульный.ИННУП);
	
	Если ТекущаяДатаСеанса() >= '20080101' Тогда
		Если ПустаяСтрока(ОргДиректор) И ПустаяСтрока(ОргУП) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе		
		Если ПустаяСтрока(ОргДиректор) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ОргИНН) Тогда
		Если ВыводитьСообщения Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Неверно задан ИНН организации!'");

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если ПустаяСтрока(ОргНазв) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не задано полное название организации!", "Титульный", "ОргНазв");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	ОГРН = СокрЛП(ПоказателиТитульный.ОГРН);
	Если СтрДлина(ОГРН) <> 13
	 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОГРН) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Неверно указан ОГРН организации", "Титульный", "ОГРН");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИННРук) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИННРук, Истина) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Неверно задан ИНН руководителя организации!", "Титульный", "ИННРук");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргУП");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИННБух) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИННБух, Истина) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Неверно задан ИНН главного бухгалтера!", "Титульный", "ИННГБ");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Фамилия, имя или отчество уполномоченного представителя содержат недопустимые символы!", "Титульный", "ОргУП");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИННУП) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИННУП, Истина) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Неверно задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

&НаСервере
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;
	ПредставлениеОтчета = "";
	
	Если БратьИзФормы Тогда
	Иначе
		
		ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		ДанныеВариановАвтоЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
			
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПредставлениеОтчета = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Выгрузить();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	РазделыСп = Новый СписокЗначений;
	ПоказателиКопия = Показатели.Скопировать();
	ПоказателиКопия.Свернуть("ИмяПоляТаблДокумента", "");
		
	РазделыСп.ЗагрузитьЗначения(ПоказателиКопия.ВыгрузитьКолонку("ИмяПоляТаблДокумента"));
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
		ЭлРазделаСп = РазделыСп.НайтиПоЗначению(ИмяРаздела);
		Если ЭлРазделаСп = Неопределено Тогда
			ЭлРазделаСп = РазделыСп.Добавить(ИмяРаздела);
		КонецЕсли;
		СостояниеРаздела = Неопределено;
		Разделы.Свойство(ИмяРаздела, СостояниеРаздела);
		ЭлРазделаСп.Представление = СостояниеРаздела;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Раздел Из РазделыСп Цикл
		
		Разд = Неопределено;
		Разделы.Свойство(Раздел.Значение, Разд);
		ИмяРаздела = Раздел.Значение;
		Призн = Разд;
		
		Если ИмяРаздела = "Раздел1" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							ном = ном + 1;
							
						КонецЦикла;
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							Если ИмяЯчейки = "ПериодРаздел2" Тогда
								
								Если ЗначениеЗаполнено(ТекПок.ДатаНач)
								 ИЛИ ЗначениеЗаполнено(ТекПок.ДатаКон) Тогда
								
									ЗначениеЯчейки = Лев(Строка(ТекПок.ДатаНач), 10) + "," + Лев(Строка(ТекПок.ДатаКон), 10);
									
								Иначе	
									
									ЗначениеЯчейки = "";
									
								КонецЕсли;
								
							Иначе
								
								ЗначениеЯчейки = ТекПок[ИмяЯчейки];
								
							КонецЕсли;
														
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦиклаВ = Ложь;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
									
									ВыходИзДвойногоЦиклаВ = Истина;
									Прервать;
									
								КонецЕсли;
								
								Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если ВыходИзДвойногоЦиклаВ Тогда
								Прервать;
							КонецЕсли;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
											 									
									ВыходИзДвойногоЦиклаВ = Истина;
									Прервать;
									
								КонецЕсли;
								
								Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
							КонецЦикла;
							
							Если ВыходИзДвойногоЦиклаВ Тогда
								Прервать;
							КонецЕсли;
							
							ном = ном + 1;
							
						КонецЦикла;
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							Если ИмяЯчейки = "ПериодРаздел2" Тогда
								
								Если ЗначениеЗаполнено(ТекПок.ДатаНач)
								 ИЛИ ЗначениеЗаполнено(ТекПок.ДатаКон) Тогда
								
									ЗначениеЯчейки = Лев(Строка(ТекПок.ДатаНач), 10) + "," + Лев(Строка(ТекПок.ДатаКон), 10);
									
								Иначе	
									
									ЗначениеЯчейки = "";
									
								КонецЕсли;
								
							Иначе
								
								ЗначениеЯчейки = ТекПок[ИмяЯчейки];
								
							КонецЕсли;
							
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					Если Лев(ИмяЯчейки, 2) = "_П" Тогда
						Если ЗначениеЗаполнено(ТекПок[Сред(ИмяЯчейки, 3)]) Тогда
							ЗначениеЯчейки = "1";
						Иначе
							ЗначениеЯчейки = "0";
						КонецЕсли;
					Иначе
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					КонецЕсли;
										
					Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					Если Лев(ИмяЯчейки, 2) = "_П" Тогда
						Если ЗначениеЗаполнено(ТекПок[Сред(ИмяЯчейки, 3)]) Тогда
							ЗначениеЯчейки = "1";
						Иначе
							ЗначениеЯчейки = "0";
						КонецЕсли;
					Иначе
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					КонецЕсли;
					
					Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла_В = Ложь;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла_В = Истина;
								Прервать;
								
							КонецЕсли;
							
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла_В Тогда
							Прервать;
						КонецЕсли;
												
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла_В = Истина;
								Прервать;
								
							КонецЕсли;
							
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла_В Тогда
							Прервать;
						КонецЕсли;
						
						ном = ном + 1;
						
					КонецЦикла;
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФизЛиц(СтруктураМногостраничныхРазделов = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	
	ТаблСведенийФизЛиц = Новый ТаблицаЗначений();
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицФИО");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСлТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДомТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДатаР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицМестоР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицПол");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГражданство");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодГражд");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВид");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокКод");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокСерияНомер");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВыдан");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокДата");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИндекс");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСубъект");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодСуб");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицРайон");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГород");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицНП");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицУлица");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДом");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКорпус");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКвартира");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИноАдрес");
	
	// Сведения по должностным лицам получим из страницы 2 титульного листа 
	Если СтруктураМногостраничныхРазделов <> Неопределено Тогда
		мСтруктураМногостраничныхРазд = РегламентированнаяОтчетность.СкопированнаяСтруктура(СтруктураМногостраничныхРазделов);
	Иначе
		мСтруктураМногостраничныхРазд = мСтруктураМногостраничныхРазделов;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазд.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	Для Каждого СтрМногоСтраничныхРазделов Из ЭтаФорма[мСтруктураМногостраничныхРазд.ФизЛица] Цикл
		
		СтрДанных = СтрМногоСтраничныхРазделов.Данные[0].Значение;
		Если СтрДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПустаяСтрока(СтрДанных.ФизЛицФИО) Тогда
			Продолжить;
		КонецЕсли;
		СтрТаблСведенийФизЛиц = ТаблСведенийФизЛиц.Добавить();
		СтрТаблСведенийФизЛиц.ФизЛицФИО = СтрДанных.ФизЛицФИО;
		СтрТаблСведенийФизЛиц.ФизЛицСлТел = СтрДанных.ФизЛицСлТел;
		СтрТаблСведенийФизЛиц.ФизЛицДомТел = СтрДанных.ФизЛицДомТел;
		Попытка
			СтрТаблСведенийФизЛиц.ФизЛицДатаР = СтрДанных.ФизЛицДатаРожд;
		Исключение
			СтрТаблСведенийФизЛиц.ФизЛицДатаР = СтрДанных.ФизЛицДатаР;
		КонецПопытки;
		СтрТаблСведенийФизЛиц.ФизЛицМестоР = СтрДанных.ФизЛицМестоР;
		СтрТаблСведенийФизЛиц.ФизЛицПол = ?(СтрДанных.ФизЛицПолЖ = "V", 2, 1);
		СтрТаблСведенийФизЛиц.ФизЛицГражданство = СтрДанных.ФизЛицГражданство;
		СтрТаблСведенийФизЛиц.ФизЛицКодГражд = СтрДанных.ФизЛицКодГражд;
		СтрТаблСведенийФизЛиц.ФизЛицДокВид = СтрДанных.ФизЛицДокВид;
		СтрТаблСведенийФизЛиц.ФизЛицДокКод = СтрДанных.ФизЛицДок;
		СтрТаблСведенийФизЛиц.ФизЛицДокСерияНомер = СтрДанных.ФизЛицДокСерияНомер;
		СтрТаблСведенийФизЛиц.ФизЛицДокВыдан = СтрДанных.ФизЛицДокВыдан;
		СтрТаблСведенийФизЛиц.ФизЛицДокДата = СтрДанных.ФизЛицДокДата;
		СтрТаблСведенийФизЛиц.ФизЛицИндекс = СтрДанных.ФизЛицИнд;
		СтрТаблСведенийФизЛиц.ФизЛицСубъект = СтрДанных.ФизЛицСубъект;
		СтрТаблСведенийФизЛиц.ФизЛицКодСуб = СтрДанных.ФизЛицС;
		СтрТаблСведенийФизЛиц.ФизЛицРайон = СтрДанных.ФизЛицРайон;
		СтрТаблСведенийФизЛиц.ФизЛицГород = СтрДанных.ФизЛицГород;
		СтрТаблСведенийФизЛиц.ФизЛицНП = СтрДанных.ФизЛицНП;
		СтрТаблСведенийФизЛиц.ФизЛицУлица = СтрДанных.ФизЛицУлица;
		СтрТаблСведенийФизЛиц.ФизЛицДом = СтрДанных.ФизЛицДом;
		СтрТаблСведенийФизЛиц.ФизЛицКорпус = СтрДанных.ФизЛицКорпус;
		СтрТаблСведенийФизЛиц.ФизЛицКвартира = СтрДанных.ФизЛицКвартира;
		СтрТаблСведенийФизЛиц.ФизЛицИноАдрес = СтрДанных.ФизЛицИноАдрес;
	КонецЦикла;
	
	Возврат ТаблСведенийФизЛиц;
	
КонецФункции

&НаСервере
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Врем = Неопределено;
	Если ИмяРаздела = "Раздел1" Тогда
		Если СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().Раздел1_2 = Неопределено ИЛИ НЕ СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().Раздел1_2.Свойство("Раздел1_2", врем) 
			ИЛИ СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().Раздел1_2.Раздел1_2.Количество() = 0 Тогда
			СтруктураРеквизитовФормы.мРаздел1Пуст = Истина;
			Возврат Истина;
		Иначе
			ЕстьНепустоеЗначение = Ложь;
			Для Каждого Пок Из СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().Раздел1_2.Раздел1_2[0].ДанныеОбИсточнике Цикл
				Если Лев(Пок.Ключ, СтрДлина("П00001000")) <> "П00001000" Тогда
					Продолжить;
				КонецЕсли;
				Если Пок.Ключ = "П000010002003" Тогда
					Если Пок.Значение <> ",," И СокрЛП(Пок.Значение) <> "" Тогда
						ЕстьНепустоеЗначение = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(Пок.Значение) Тогда
					ЕстьНепустоеЗначение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтруктураРеквизитовФормы.мРаздел1Пуст = НЕ ЕстьНепустоеЗначение;
			Возврат НЕ ЕстьНепустоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла = Ложь;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
												
						ном = ном + 1;
						
					КонецЦикла;
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						Если ИмяЯчейки = "ПериодРаздел2" Тогда
							
							Если ЗначениеЗаполнено(ТекПок.ДатаНач)
								ИЛИ ЗначениеЗаполнено(ТекПок.ДатаКон) Тогда
								
								ЗначениеЯчейки = Лев(Строка(ТекПок.ДатаНач), 10) + "," + Лев(Строка(ТекПок.ДатаКон), 10);
								
							Иначе	
								
								ЗначениеЯчейки = "";
								
							КонецЕсли;
							
						Иначе
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				Если Лев(ИмяЯчейки, 2) = "_П" Тогда
					Если ЗначениеЗаполнено(ТекПок[Сред(ИмяЯчейки, 3)]) Тогда
						ЗначениеЯчейки = "1";
					Иначе
						ЗначениеЯчейки = "0";
					КонецЕсли;
				Иначе
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				КонецЕсли;
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				ВыходИзДвойногоЦикла_ = Ложь;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
							
							ВыходИзДвойногоЦикла_ = Истина;
							Прервать;
							
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					Если ВыходИзДвойногоЦикла_ Тогда
						Прервать;
					КонецЕсли;
										
					ном = ном + 1;
					
				КонецЦикла;
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел1" Тогда
		СтруктураРеквизитовФормы.мРаздел1Пуст = Булево(СтраницаПустая);
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияСоставаПоказателей()

	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));

	мТаблицаСоставПоказателей.Очистить();

	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СоставПоказателей2007Кв1");
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;
		КонецЦикла;
	КонецЦикла;
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьНеобязательныйРеквизит(Текст, ИмяРеквизита, ЗначениеРеквизита)
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Текст.ДобавитьСтроку(ИмяРеквизита + ":" + ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");

		Сообщение.Сообщить();

		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьРаздел1(Текст)
	Перем Значение;
	
	ПоказателиШапки = Новый СписокЗначений;
	ПоказателиШапки.Добавить("П000010001003");
	ПоказателиШапки.Добавить("П000010002003");
	ПоказателиШапки.Добавить("П000010003003");
	ПоказателиШапки.Добавить("П000010004003");
	ПоказателиШапки.Добавить("П000010005003", "КодСтраны");
	ПоказателиШапки.Добавить("П000010006003");
	
	ПоказателиМнЧ = Новый СписокЗначений;
	ПоказателиМнЧ.Добавить("П000010007003");
	ПоказателиМнЧ.Добавить("П000010008003");
	ПоказателиМнЧ.Добавить("П000010009003");
	ПоказателиМнЧ.Добавить("П000010010003");
	ПоказателиМнЧ.Добавить("П000010011003");
	ПоказателиМнЧ.Добавить("П000010012003");
	ПоказателиМнЧ.Добавить("П000010013003");
	ПоказателиМнЧ.Добавить("П000010014003");
	ПоказателиМнЧ.Добавить("П000010015003");
	ПоказателиМнЧ.Добавить("П000010016003");
	
	Попытка
		Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().Раздел1_2.Раздел1_2;
	Исключение
		ВыгрузитьПустойРаздел12(Текст);
		Возврат;
	КонецПопытки;
	
	Для Каждого Стр Из Данные Цикл
		Источник = Стр.ДанныеОбИсточнике;
		Доходы = Стр.СведенияОДоходах;
		
		Для Каждого ПоказательШапки Из ПоказателиШапки Цикл
			ИмяЯчейки = ?(ПустаяСтрока(ПоказательШапки.Представление), ПоказательШапки.Значение, ПоказательШапки.Представление);
			Источник.Свойство(ИмяЯчейки, Значение);
			Если ИмяЯчейки = "П000010002003" И НЕ ПустаяСтрока(Значение) Тогда
				Значение = РегламентированнаяОтчетность.СтрЗаменитьПробелы(Значение);
			КонецЕсли;
			Текст.ДобавитьСтроку(ПоказательШапки.Значение + ":" + СокрЛП(ВРЕГ(Значение)));
				
		КонецЦикла;
		
		Текст.ДобавитьСтроку("###");
		
		Для Каждого Доход Из Доходы Цикл
			
			Для Каждого ПоказательМнЧ Из ПоказателиМнЧ Цикл
				ИмяЯчейки = ?(ПустаяСтрока(ПоказательМнЧ.Представление), ПоказательМнЧ.Значение, ПоказательМнЧ.Представление);
				
				Если Доход.Данные.Данные = Неопределено Тогда
					
					Значение = "";
					
				Иначе
					
					Доход.Данные.Данные.Свойство(ИмяЯчейки, Значение);
			
				КонецЕсли;
								
				Если ИмяЯчейки = "П000010009003" ИЛИ ИмяЯчейки = "П000010011003" ИЛИ ИмяЯчейки = "П000010014003" ИЛИ
						ИмяЯчейки = "П000010015003" ИЛИ ИмяЯчейки = "П000010016003" Тогда
					Значение = Формат(Значение, "ЧЦ=15; ЧДЦ=0; ЧН=' '; ЧГ=");
				КонецЕсли;
				Если ИмяЯчейки = "П000010013003" Тогда
					Значение = Формат(Значение, "ЧРД=.; ЧН=' '; ЧГ=");
				КонецЕсли;
				Текст.ДобавитьСтроку(ПоказательМнЧ.Значение + ":" + СокрЛП(ВРЕГ(Значение)));
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьПустойРаздел12(Текст)
	
	Текст.ДобавитьСтроку("П000010001003:");
	Текст.ДобавитьСтроку("П000010002003:");
	Текст.ДобавитьСтроку("П000010003003:");
	Текст.ДобавитьСтроку("П000010004003:");
	Текст.ДобавитьСтроку("П000010005003:");
	Текст.ДобавитьСтроку("П000010006003:");
	Текст.ДобавитьСтроку("###");
	Текст.ДобавитьСтроку("П000010007003:");
	Текст.ДобавитьСтроку("П000010008003:");
	Текст.ДобавитьСтроку("П000010009003:");
	Текст.ДобавитьСтроку("П000010010003:");
	Текст.ДобавитьСтроку("П000010011003:");
	Текст.ДобавитьСтроку("П000010012003:");
	Текст.ДобавитьСтроку("П000010013003:");
	Текст.ДобавитьСтроку("П000010014003:");
	Текст.ДобавитьСтроку("П000010015003:");
	Текст.ДобавитьСтроку("П000010016003:");
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		Если Область.Имя = "ОтветственныйУчастник" Тогда
			СтандартнаяОбработка = Ложь;
			Если Область.Значение = "Х" Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = "Х";
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
	
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		
		ПолеТабличногоДокументаФизЛица = ТабличныйДокумент;
		
		Если (СтрНайти(Область.Имя, "ФизЛицИнд") > 0)
			Или (Область.Имя = "ФизЛицСубъект")
			Или (Область.Имя = "ФизЛицРайон")
			Или (Область.Имя = "ФизЛицГород")
			Или (Область.Имя = "ФизЛицС")
			Или (Область.Имя = "ФизЛицНП")
			Или (Область.Имя = "ФизЛицУлица")
			Или (Область.Имя = "ФизЛицДом")
			Или (Область.Имя = "ФизЛицКорпус")
			Или (Область.Имя = "ФизЛицКвартира") Тогда
			
			СтандартнаяОбработка = Ложь;
									
			Индекс = ПолеТабличногоДокументаФизЛица.Области.ФизЛицИнд.Значение;
			
			РоссийскийАдрес = Новый Соответствие;
			
			РоссийскийАдрес.Вставить("Индекс",	        Индекс);
			РоссийскийАдрес.Вставить("Регион",          ПолеТабличногоДокументаФизЛица.Области.ФизЛицСубъект.Значение);
			РоссийскийАдрес.Вставить("КодРегиона",      ПолеТабличногоДокументаФизЛица.Области.ФизЛицС.Значение);
			РоссийскийАдрес.Вставить("Район",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицРайон.Значение);
			РоссийскийАдрес.Вставить("Город",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицГород.Значение);
			РоссийскийАдрес.Вставить("НаселенныйПункт", ПолеТабличногоДокументаФизЛица.Области.ФизЛицНП.Значение);
			РоссийскийАдрес.Вставить("Улица",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицУлица.Значение);
			РоссийскийАдрес.Вставить("Дом",             ПолеТабличногоДокументаФизЛица.Области.ФизЛицДом.Значение);
			РоссийскийАдрес.Вставить("Корпус",          ПолеТабличногоДокументаФизЛица.Области.ФизЛицКорпус.Значение);
			РоссийскийАдрес.Вставить("Квартира",        ПолеТабличногоДокументаФизЛица.Области.ФизЛицКвартира.Значение);
			
			ЗначенияПолей = Новый СписокЗначений;
			
			ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],          "КодРегиона");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
			ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
			
			ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
			+ РоссийскийАдрес["Регион"] + ","
			+ РоссийскийАдрес["Район"] + ","
			+ РоссийскийАдрес["Город"] + ","
			+ РоссийскийАдрес["НаселенныйПункт"] + ","
			+ РоссийскийАдрес["Улица"] + ","
			+ РоссийскийАдрес["Дом"] + ","
			+ РоссийскийАдрес["Корпус"] + ","
			+ РоссийскийАдрес["Квартира"]);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
			ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
			ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
			ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
			
			ТипЗначения = Тип("ОписаниеОповещения");
			ПараметрыКонструктора = Новый Массив(3);
			ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
			ПараметрыКонструктора[1] = ЭтаФорма;
			ПараметрыКонструктора[2] = ДополнительныеПараметры;
			
			Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
			
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
			
		ИначеЕсли Область.Имя = "ФизЛицПолМ" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Модифицированность = Истина;
			
			Если Область.Значение = "V" Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = "V";
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолЖ.Значение = "";
			КонецЕсли;
			
		ИначеЕсли Область.Имя = "ФизЛицПолЖ" Тогда
			
			Модифицированность = Истина;
			
			СтандартнаяОбработка = Ложь;
			
			Если Область.Значение = "V" Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = "V";
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолМ.Значение = "";
			КонецЕсли;
			
		КонецЕсли;
				
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		     
		Ячейка = Область.Имя;
		
		Если Лев(Ячейка, 9) = "КодСтраны" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				
						
				СтандартнаяОбработка = Истина;
				
				Возврат;
					
			КонецЕсли;
			
			ПолеТабличногоДокументаРаздел1 = ТабличныйДокумент;
			
			ПервоначальноеЗначение = ПолеТабличногоДокументаРаздел1.Области.КодСтраны.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор страны");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мОКСМ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
			
			ДополнительныеПараметры = Новый Структура("ПолеТабличногоДокументаРаздел1", ПолеТабличногоДокументаРаздел1);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияВыборСтраныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
		
		Ячейка = Элемент.ТекущаяОбласть.Имя;
		
		Если (Ячейка = "П000010010003") Тогда
			СтандартнаяОбработка = Ложь;
			
			НачЗначение = СтруктураРеквизитовФормы.мСведенияОДоходахДата1;
			
			ДополнительныеПараметры = Новый Структура("НачЗначение", НачЗначение);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиДатуНачальнаяДатаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВводДаты(ОписаниеОповещения, НачЗначение, "Начальная дата отчетного периода", ЧастиДаты.Дата);
			
		ИначеЕсли (Ячейка = "П000010007003") Или (Ячейка = "П000010008003") Тогда
			
			СтандартнаяОбработка = Ложь;
			Колонка = ?(Ячейка = "П000010007003", "Название", "Код");
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				
				СтандартнаяОбработка = Истина;
				Возврат;
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор кода");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мВидыДоходовЗаПределамиРФРаздел1);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(Колонка, Область.Значение));
			ДополнительныеПараметры = Новый Структура("Ячейка", Ячейка);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияВыборКодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		Ячейка = Элемент.ТекущаяОбласть.Имя;
				
		// Выбор КодВЭД
		Если СтрНайти(Ячейка,"КодВЭД") > 0 Тогда
			СтандартнаяОбработка = Ложь;
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				
				СтандартнаяОбработка = Истина;
				Возврат;
				
			КонецЕсли;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор кода");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мВидыДеятельностиДоходыЗаПределамиРФ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Область.Значение));
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияКодВЭДЗавершение", ЭтотОбъект);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли (СтрНайти(Ячейка,"П000020010002") > 0) Или (СтрНайти(Ячейка, "П000020010003") > 0) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				СтандартнаяОбработка = Истина;
				Возврат;
			КонецЕсли;
			
			КолонкаПоиска = "Код";
			Если СтрНайти(Ячейка, "П000020010002") > 0 Тогда
				КолонкаПоиска = "Название";
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор кода");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мВидыДоходовЗаПределамиРФРаздел2);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, Область.Значение));
			
			ДополнительныеПараметры = Новый Структура("Ячейка", Ячейка);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияВыборКодаРаздел2Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли Лев(Ячейка, 9) = "КодСтраны" Тогда
			СтандартнаяОбработка = Ложь;
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				
				СтандартнаяОбработка = Истина;
				Возврат;
				
			КонецЕсли;
			
			ПолеТабличногоДокументаРаздел2 = ТабличныйДокумент;
			
			ПервоначальноеЗначение = ПолеТабличногоДокументаРаздел2.Области.КодСтраны.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор страны");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мОКСМ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
			ДополнительныеПараметры =  Новый Структура("ПолеТабличногоДокументаРаздел2", ПолеТабличногоДокументаРаздел2);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияВыборСтраныРаздел2Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		
		Ячейка = Элемент.ТекущаяОбласть.Имя;
		
		Если (СтрНайти(Ячейка, "П000030009004_") > 0
			Или  СтрНайти(Ячейка, "П000030013004_") > 0)
			И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Если ((СтрНайти(Ячейка,СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1) > 0)
			Или (СтрНайти(Ячейка, СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2) > 0)
			Или (СтрНайти(Ячейка, СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1) > 0)
			Или (СтрНайти(Ячейка, СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2) > 0))
			И (СтрНайти(Ячейка, "1_") = 0)
			И (СтрНайти(Ячейка, "5_") = 0)
			И (СтрНайти(Ячейка, "7_") = 0)
			И (СтрНайти(Ячейка, "8_") = 0)
			И (СтрНайти(Ячейка, "6_") = 0) Тогда
			
			СтандартнаяОбработка = Ложь;
			СмысловаяЧасть = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(Ячейка);
			НомГрафы = Сред(Ячейка, 13, 1);
			
			КолонкаПоиска = Неопределено;
			Если НомГрафы = "4" Тогда
				КолонкаПоиска = "Код";
			КонецЕсли;
			
			Если НомГрафы = "2" Тогда
				КолонкаПоиска = "Название";
			КонецЕсли;
			ТекЗнач = Область.Значение;
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				
				СтандартнаяОбработка = Истина;
				Возврат;

			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор кода");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мВидыРасходовДоходыЗаПределамиРФ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ТекЗнач));
			
			ДополнительныеПараметры = Новый Структура("СмысловаяЧасть, Ячейка", СмысловаяЧасть, Ячейка);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенийВыборКодаРаздел3Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		ИначеЕсли Лев(Ячейка, 9) = "КодСтраны" Тогда
			СтандартнаяОбработка = Ложь;
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				
				СтандартнаяОбработка = Истина;
				Возврат;
				
			КонецЕсли;
			
			ПолеТабличногоДокументаРаздел3 = ТабличныйДокумент;
			
			ПервоначальноеЗначение = ПолеТабличногоДокументаРаздел3.Области.КодСтраны.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор страны");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мОКСМ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
			ДополнительныеПараметры = Новый Структура("ПолеТабличногоДокументаРаздел3", ПолеТабличногоДокументаРаздел3);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияВыборСтраныРаздел3Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
		
		ОбластьИмя = Область.Имя;
		
		Если (СтрНайти(ОбластьИмя, "НомСтр") = 0) И (ОбластьИмя <> "П000040003001") И (ОбластьИмя <> "П000040008001") И (ОбластьИмя <> "П000040013001") И (ОбластьИмя <> "П000040016001") Тогда
			СтандартнаяОбработка = Ложь;
			Если Область.Значение = "V" Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = "V";
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДатуНачальнаяДатаЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	НачЗначение = ?(Дата = Неопределено, ДополнительныеПараметры.НачЗначение, Дата);
	
	
	Если (Дата <> Неопределено) Тогда
		СтруктураРеквизитовФормы.мСведенияОДоходахДата1 = НачЗначение;
		НачЗначение2 = СтруктураРеквизитовФормы.мСведенияОДоходахДата2;
		ДополнительныеПараметры = Новый Структура("НачЗначение2", НачЗначение2);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиДатуКонечнаяДатаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводДаты(ОписаниеОповещения, НачЗначение2, "Конечная дата отчетного периода", ЧастиДаты.Дата);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВвестиДатуКонечнаяДатаЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	НачЗначение2 = ?(Дата = Неопределено, ДополнительныеПараметры.НачЗначение2, Дата);
	
	Если (Дата <> Неопределено) Тогда
		СтруктураРеквизитовФормы.мСведенияОДоходахДата2 = НачЗначение2;
		
		Дата1 = Формат(СтруктураРеквизитовФормы.мСведенияОДоходахДата1, "дд.ММ.гггг");
		Дата2 = Формат(СтруктураРеквизитовФормы.мСведенияОДоходахДата2, "дд.ММ.гггг");
		Дата1 = СтрЗаменить(Дата1, " 0:00:00", "");
		Дата2 = СтрЗаменить(Дата2, " 0:00:00", "");
		
		Если ПустаяСтрока(Дата1) И ПустаяСтрока(Дата2) Тогда
			ТабличныйДокумент.Области.П000010010003.Значение = "";
		Иначе
			ТабличныйДокумент.Области.П000010010003.Значение = Дата1 + "," + Дата2;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияВыборСтраныРаздел3Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаРаздел3 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел3;
	
	Если Результат <> Неопределено Тогда
		Значение1 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат, Результат["Код"]);
		
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			Значение2 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат,Результат["Название"]);
			Если Значение2 = "Пустое значение" Тогда
				Значение1 = "";
				Значение2 = "";
			КонецЕсли;
			
			ПолеТабличногоДокументаРаздел3.Области.КодСтраны.Значение = Значение1;
			
			Модифицированность = Истина;
			
		Иначе
			ПолеТабличногоДокументаРаздел3.Области.КодСтраны.Значение = Значение1;
			Модифицированность = Истина;
		КонецЕсли;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенийВыборКодаРаздел3Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СмысловаяЧасть = ДополнительныеПараметры.СмысловаяЧасть;
	Ячейка = ДополнительныеПараметры.Ячейка;
	
	Если Результат <> Неопределено Тогда
		Значение1 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат,Результат["Код"]);
		
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			Значение0 = Результат["Название"];
			ПослДваСимвола = Прав(СмысловаяЧасть,2);
			Если ПослДваСимвола = "2_" Тогда
				// выбран вид дохода
				ЯчейкаРядом = СтрЗаменить(Ячейка,"2_","4_");
				ТабличныйДокумент.Области[Ячейка].Значение = ?(Значение0 = "Пустое значение", "", Значение0);
				ТабличныйДокумент.Области[ЯчейкаРядом].Значение = Значение1;
				Модифицированность = Истина;
			Иначе
				ЯчейкаРядом = СтрЗаменить(Ячейка,"4_","2_");
				ТабличныйДокумент.Области[Ячейка].Значение = ?(Значение1 = "Пустое значение", "", Значение1);
				ТабличныйДокумент.Области[ЯчейкаРядом].Значение = ?(Значение0 = "Пустое значение", "", Значение0);
				Модифицированность = Истина;
			КонецЕсли;
		Конецесли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияВыборСтраныРаздел2Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаРаздел2 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел2;
	
	Если Результат <> Неопределено Тогда
		Значение1 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат, Результат["Код"]);
		
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			Значение2 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат,Результат["Название"]);
			Если Значение2 = "Пустое значение" Тогда
				Значение1 = "";
				Значение2 = "";
			КонецЕсли;
			
			ПолеТабличногоДокументаРаздел2.Области.КодСтраны.Значение = Значение1;
			
			Модифицированность = Истина;
			
		Иначе
			ПолеТабличногоДокументаРаздел2.Области.КодСтраны.Значение = Значение1;
			Модифицированность = Истина;
		КонецЕсли;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияВыборКодаРаздел2Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ячейка = ДополнительныеПараметры.Ячейка;
	
	Если Результат <> Неопределено Тогда
		Значение1 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат,Результат["Код"]);
		
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			Значение2 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат,Результат["Название"]);
			Значение2 = ?(Значение2 = "Пустое значение", "", Значение2);
			Если СтрНайти(Ячейка, "П000020010002") > 0 Тогда
				ЯчейкаРядом = СтрЗаменить(Ячейка,"П000020010002","П000020010003");
				ТабличныйДокумент.Области[Ячейка].Значение = Значение2;
				ТабличныйДокумент.Области[ЯчейкаРядом].Значение = Значение1;
				Модифицированность = Истина;
				
			Иначе
				
				ЯчейкаРядом = СтрЗаменить(Ячейка,"П000020010003","П000020010002");
				ТабличныйДокумент.Области[Ячейка].Значение = Значение1;
				ТабличныйДокумент.Области[ЯчейкаРядом].Значение = Значение2;
				Модифицированность = Истина;
				
			КонецЕсли;
		Иначе
			ТабличныйДокумент.Области[Ячейка].Значение = Значение1;
			Модифицированность = Истина;
		КонецЕсли;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияКодВЭДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Значение1 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат,Результат["Код"]);
		ТабличныйДокумент.Области.КодВЭД.Значение = Значение1;
		Модифицированность = Истина;
	Конецесли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияВыборКодаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ячейка = ДополнительныеПараметры.Ячейка;
	
	Если Результат <> Неопределено Тогда
		Значение1 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат, Результат["Код"]);
		
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			Значение2 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат,Результат["Название"]);
			Если Значение2 = "Пустое значение" Тогда
				Значение2 = "";
			КонецЕсли;
			Если СтрНайти(Ячейка, "П000010007003") > 0 Тогда
				ЯчейкаРядом = "П000010008003";
				ТабличныйДокумент.Области[Ячейка].Значение = Значение2;
				ТабличныйДокумент.Области[ЯчейкаРядом].Значение = Значение1;
				Модифицированность = Истина;
				
			Иначе
				ЯчейкаРядом = "П000010007003";
				ТабличныйДокумент.Области[Ячейка].Значение = Значение1;
				ТабличныйДокумент.Области[ЯчейкаРядом].Значение = Значение2;
				Модифицированность = Истина;
				
			КонецЕсли;
		Иначе
			ТабличныйДокумент.Области[Ячейка].Значение = Значение1;
			Модифицированность = Истина;
		КонецЕсли;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияВыборСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	
	Если Результат <> Неопределено Тогда
		Значение1 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат, Результат["Код"]);
		
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			Значение2 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат,Результат["Название"]);
			Если Значение2 = "Пустое значение" Тогда
				Значение1 = "";
				Значение2 = "";
			КонецЕсли;
			
			ПолеТабличногоДокументаРаздел1.Области.КодСтраны.Значение = Значение1;
			
			Модифицированность = Истина;
			
		Иначе
			
			ПолеТабличногоДокументаРаздел1.Области.КодСтраны.Значение = Значение1;
			
			Модифицированность = Истина;
			
		КонецЕсли;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области.ФизЛицИнд.Значение      = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области.ФизЛицС.Значение        = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области.ФизЛицСубъект.Значение  = РоссийскийАдрес_["Регион"];
		ТабличныйДокумент.Области.ФизЛицРайон.Значение    = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области.ФизЛицГород.Значение    = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области.ФизЛицНП.Значение       = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области.ФизЛицУлица.Значение    = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области.ФизЛицДом.Значение      = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области.ФизЛицКорпус.Значение   = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области.ФизЛицКвартира.Значение = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	
	Модифицированность = Истина;
	
	Если СтрНайти(ОбластьИмя, "П000030009002_") > 0 Тогда
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			ТабличныйДокумент.Области[СтрЗаменить(ОбластьИмя, "П000030009002", "П000030009004")].Значение = ?(ПустаяСтрока(Область.Значение), "", "11300000");
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ОбластьИмя, "П000030013002_") > 0 Тогда
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			ТабличныйДокумент.Области[СтрЗаменить(ОбластьИмя, "П000030013002", "П000030013004")].Значение = ?(ПустаяСтрока(Область.Значение), "", "11300000");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		Если ОбластьИмя = "ДатаПодписи" Тогда 
			ДатаПодписи = Область.Значение;
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
			ДатаПодписиПриИзмененииНаСервере();
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		ИначеЕсли ОбластьИмя = "НомКоррект" Тогда 
			ОписаниеТипа = Новый ОписаниеТипов("Число");
			НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
			Область.Значение = Строка(НомерКорректировки);
			СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
			ТабличныйДокумент.Области["ВидДок"].Значение = ?(НомерКорректировки = 0, "1", "3");
			Модифицированность = Истина;
		КонецЕсли;
	
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		РасчетНаКлиенте("Раздел2", ОбластьИмя);
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		
		ИдМнгРаздела = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
		
		Если НЕ ИдМнгРаздела = Неопределено Тогда
			
			РасчетНаКлиенте("Раздел3", ОбластьИмя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр2_3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку5" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку6" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку7" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3_Стр3_3;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Формат(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1, "ЧГ=");
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры