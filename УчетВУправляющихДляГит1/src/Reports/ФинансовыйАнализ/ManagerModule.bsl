#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Для формирования отчета в фоновом задании.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  АдресХранилища - Строка - адрес временного хранилища, куда будет помещен результат формирования отчета.
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("РезультатГлавное",                 Новый ТабличныйДокумент);
	ДанныеОтчета.Вставить("РезультатБухгалтерскаяОтчетность", Новый ТабличныйДокумент);
	ДанныеОтчета.Вставить("РезультатАнализОтчетности",        Новый ТабличныйДокумент);
	ДанныеОтчета.Вставить("РезультатКоэффициенты",            Новый ТабличныйДокумент);
	ДанныеОтчета.Вставить("РезультатРентабельность",          Новый ТабличныйДокумент);
	ДанныеОтчета.Вставить("РезультатОценки",                  Новый ТабличныйДокумент);
	ДанныеОтчета.Вставить("ОбластиРасшифровки",               НоваяТаблицаОбластиРасшифровки());
	ДанныеОтчета.Вставить("ПроверкаАктуализации",             Новый Структура);
	ДанныеОтчета.Вставить("АдресХранилищаДанныеФинансовогоАнализа");
	
	// Проверим актуальность данных
	ПроверкаАктуализации = ПроверкаАктуальностьДанныхУчета(ПараметрыОтчета.Организация, ПараметрыОтчета.Период);
	ДанныеОтчета.ПроверкаАктуализации = ПроверкаАктуализации;
	Если ПроверкаАктуализации.ТребуетсяАктуализация Тогда
		ПоместитьВоВременноеХранилище(ДанныеОтчета, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ДанныеФинансовогоАнализа = ПодготовитьВсеДанныеФинансовогоАнализа(ПараметрыОтчета, ПроверкаАктуализации);
	ДанныеОтчета.АдресХранилищаДанныеФинансовогоАнализа =
		ПоместитьВоВременноеХранилище(ДанныеФинансовогоАнализа, ПараметрыОтчета.АдресХранилищаДанныеФинансовогоАнализа);
	
	// Подготовим табличные документы
	ВывестиГлавное(ДанныеОтчета.РезультатГлавное, ДанныеФинансовогоАнализа);
	ВывестиБухгалтерскуюОтчетность(ДанныеОтчета.РезультатБухгалтерскаяОтчетность, ДанныеФинансовогоАнализа);
	ВывестиАнализОтчетности(ДанныеОтчета.РезультатАнализОтчетности, ДанныеФинансовогоАнализа);
	ВывестиКоэффициенты(ДанныеОтчета.РезультатКоэффициенты, ДанныеФинансовогоАнализа, ДанныеОтчета.ОбластиРасшифровки);
	ВывестиРентабельность(ДанныеОтчета.РезультатРентабельность, ДанныеФинансовогоАнализа, ДанныеОтчета.ОбластиРасшифровки);
	ВывестиОценки(ДанныеОтчета.РезультатОценки, ДанныеФинансовогоАнализа, ДанныеОтчета.ОбластиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, АдресХранилища);
	
КонецПроцедуры

// Формирует печатную форму по данным отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма отчета.
//
Функция СформироватьПечатнуюФорму(ПараметрыОтчета) Экспорт
	
	ДанныеФинансовогоАнализа = ПолучитьИзВременногоХранилища(ПараметрыОтчета.АдресХранилищаДанныеФинансовогоАнализа);
	
	// Подготовим табличный документ печатной формы
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ЭтоОсновнаяФормаОтчета = Ложь;
	ВывестиГлавное(ТабличныйДокумент, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета);
	Если НЕ ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
		ВывестиБухгалтерскуюОтчетность(ТабличныйДокумент, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета);
		ВывестиАнализОтчетности(ТабличныйДокумент, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета);
		ВывестиКоэффициенты(ТабличныйДокумент, ДанныеФинансовогоАнализа, Неопределено, ЭтоОсновнаяФормаОтчета);
		ВывестиРентабельность(ТабличныйДокумент, ДанныеФинансовогоАнализа, Неопределено, ЭтоОсновнаяФормаОтчета);
		ВывестиОценки(ТабличныйДокумент, ДанныеФинансовогоАнализа, Неопределено, ЭтоОсновнаяФормаОтчета);
	КонецЕсли;
	
	// Добавим колонтитул для табличного документа
	ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = НСтр("ru='Страница [&НомерСтраницы] из [&СтраницВсего]'");
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область Главное

Процедура ВывестиГлавное(ТабличныйДокумент, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета = Истина)
	
	ОбластиМакета = ВсеОбластиМакета("Главное");
	
	// Шапка
	ОбластьШапка = ОбластиМакета.Шапка;
	ПараметрыШапки = Новый Структура;
	ПараметрыШапки.Вставить("Организация", ДанныеФинансовогоАнализа.Организация.НаименованиеСокращенное);
	ПараметрыШапки.Вставить("Год",         Формат(ДанныеФинансовогоАнализа.Период,"ДФ=гггг"));
	ПараметрыШапки.Вставить("ДатаФакта",   ДанныеФинансовогоАнализа.ДатаФакта);
	Если ДанныеФинансовогоАнализа.ВидыДеятельности.Количество() > 0 Тогда
		СтрокаВидДеятельности = ДанныеФинансовогоАнализа.ВидыДеятельности[0];
		ПараметрыШапки.Вставить("ВидДеятельности", СтрокаВидДеятельности.НаименованиеОКВЭД);
	КонецЕсли;
	ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	// Анализ отчетности
	Если ДанныеФинансовогоАнализа.АнализОтчетности.Количество() = 0 Тогда
		ТабличныйДокумент.Вывести(ОбластиМакета.АнализНеПроведенНетОтчетности);
		Возврат;
	КонецЕсли;
	
	Если ДанныеФинансовогоАнализа.ЭтоПрогноз Тогда
		ОбластьГлавное = ОбластиМакета.ГлавноеПрогноз;
	Иначе
		ОбластьГлавное = ОбластиМакета.Главное;
	КонецЕсли;
	СтрокаАнализОтчетности = ДанныеФинансовогоАнализа.АнализОтчетности[0];
	ПараметрыГлавное = Новый Структура;
	ПараметрыГлавное.Вставить("Год",              Формат(ДанныеФинансовогоАнализа.Период,"ДФ=гггг"));
	ПараметрыГлавное.Вставить("Продажи",          СтрокаАнализОтчетности.Показатели.Продажи_1);
	ПараметрыГлавное.Вставить("Прибыль",          СтрокаАнализОтчетности.Показатели.Прибыль_1);
	Если ДанныеФинансовогоАнализа.ЭтоПрогноз Тогда
		ПараметрыГлавное.Вставить("Продажи0",         СтрокаАнализОтчетности.Показатели.Продажи_0);
		ПараметрыГлавное.Вставить("ЧистыеАктивы0",    СтрокаАнализОтчетности.Показатели.ЧистыеАктивы_0);
		ПараметрыГлавное.Вставить("Прибыль0",         СтрокаАнализОтчетности.Показатели.Прибыль_0);
	КонецЕсли;
	ПараметрыГлавное.Вставить("ЧистыеАктивы",     СтрокаАнализОтчетности.Показатели.ЧистыеАктивы_1);
	ПараметрыГлавное.Вставить("ВалютаОтчетности", ДанныеФинансовогоАнализа.ВалютаОтчетности);
	ПараметрыГлавное.Вставить("ДатаФакта",        ДанныеФинансовогоАнализа.ДатаФакта);
	ИменаПоказателейСКартинками = "Продажи;Прибыль;ЧистыеАктивы";

	УстановитьКартинкиАнализаОтчетности(
		ОбластьГлавное,
		СтрокаАнализОтчетности.Показатели,
		ИменаПоказателейСКартинками,
		1, // Текущая колонка
		2, // Предыдущая колонка
		ДанныеФинансовогоАнализа.ЭтоПрогноз);
	
	// Коэффициенты
	СтрокаФинансовогоАнализа = ДанныеФинансовогоАнализа.ФинансовыйАнализ[0];
	ПоказателиПлатежеспособность = СтрокаФинансовогоАнализа.ПоказателиПлатежеспособности;
	МассивКоэффициентов = Новый Массив;
	МассивКоэффициентов.Добавить("АбсолютнаяЛиквидность");
	МассивКоэффициентов.Добавить("БыстраяЛиквидность");
	МассивКоэффициентов.Добавить("ТекущаяЛиквидность");
	
	Для Каждого ИмяКоэффициента Из МассивКоэффициентов Цикл
		ПараметрыГлавное.Вставить(
			СтрШаблон("Коэффициент%1", ИмяКоэффициента), // Например, КоэффициентАбсолютнаяЛиквидность
			ПоказателиПлатежеспособность[ИмяКоэффициента + "_1"]);
		ИмяОбласти = ИмяКоэффициента + ?(ДанныеФинансовогоАнализа.ЭтоПрогноз, "Прогноз", "");
		Если ЭтоОсновнаяФормаОтчета Тогда
			ИмяОценки = СтрШаблон("Оценка%1_1", ИмяКоэффициента); // Например, ОценкаАбсолютнаяЛиквидность_1
			УстановитьЦветЯчейкиПоОценке(ОбластьГлавное, ИмяОбласти, ПоказателиПлатежеспособность[ИмяОценки]);
		КонецЕсли;
	КонецЦикла;
	
	// Финансовая устойчивость
	ПоказателиФинансовойУстойчивости = СтрокаФинансовогоАнализа.ПоказателиФинансовойУстойчивости;
	ИмяКоэффициента = "НаличиеСобственныхСредств";
	ИмяОбласти = ИмяКоэффициента + ?(ДанныеФинансовогоАнализа.ЭтоПрогноз, "Прогноз", "");
	ПараметрыГлавное.Вставить(
		СтрШаблон("Коэффициент%1", ИмяКоэффициента), 
		ПоказателиФинансовойУстойчивости[ИмяКоэффициента + "_1"]);
	Если ЭтоОсновнаяФормаОтчета Тогда
		ИмяОценки = СтрШаблон("Оценка%1_1", ИмяКоэффициента);
		УстановитьЦветЯчейкиПоОценке(ОбластьГлавное, ИмяОбласти, ПоказателиФинансовойУстойчивости[ИмяОценки]);
	КонецЕсли;
	
	// Рентабельность
	МассивИменРентабельность = СтрРазделить("РентабельностьПродукции;РентабельностьКомпании;РентабельностьПродаж;РентабельностьАктивов", ";");
	Для Каждого ИмяРентабельности Из МассивИменРентабельность Цикл
		ИмяПоказателей = СтрШаблон("Показатели%1", ИмяРентабельности);
		ИмяЗначения = СтрШаблон("%1_1", ИмяРентабельности);
		ЗначениеРентабельности = СтрокаФинансовогоАнализа[ИмяПоказателей][ИмяЗначения];
		ПараметрыГлавное.Вставить(ИмяРентабельности, ЗначениеРентабельности);
		Если ЭтоОсновнаяФормаОтчета Тогда
			ИмяОбласти = ИмяРентабельности + ?(ДанныеФинансовогоАнализа.ЭтоПрогноз, "Прогноз", "");
			ИмяОбластиПроцента = ИмяРентабельности + "Процент" + ?(ДанныеФинансовогоАнализа.ЭтоПрогноз, "Прогноз", "");
			ИмяОценкиРентабельности = СтрШаблон("Оценка%1", ИмяРентабельности);
			УстановитьЦветЯчейкиПоОценке(ОбластьГлавное, ИмяОбласти, СтрокаФинансовогоАнализа[ИмяПоказателей][ИмяОценкиРентабельности]);
			УстановитьЦветЯчейкиПоОценке(ОбластьГлавное, ИмяОбластиПроцента, СтрокаФинансовогоАнализа[ИмяПоказателей][ИмяОценкиРентабельности]);
		КонецЕсли;
	КонецЦикла;
	
	// Риск банкротства
	ПоказателиРискБанкротства = СтрокаФинансовогоАнализа.ПоказателиРискБанкротства;
	ПараметрыГлавное.Вставить("ПояснениеОценкиРискаБанкротства", 
		ПоказателиРискБанкротства.ПояснениеОценкиРискБанкротства);
		
	Если ЭтоОсновнаяФормаОтчета Тогда
		ИмяОбласти = "ПояснениеОценкиРискБанкротства" + ?(ДанныеФинансовогоАнализа.ЭтоПрогноз, "Прогноз", "");
		УстановитьЦветЯчейкиПоОценке(ОбластьГлавное, ИмяОбласти, ПоказателиРискБанкротства.ОценкаРискБанкротства);
	КонецЕсли;
	
	// Кредитоспособность
	ПоказателиКредитоспособность = СтрокаФинансовогоАнализа.ПоказателиКредитоспособность;
	ПараметрыГлавное.Вставить("ПояснениеОценкиКредитоспособность", 
		ПоказателиКредитоспособность.ПояснениеОценкиКредитоспособность);
		
	Если ЭтоОсновнаяФормаОтчета Тогда
		ИмяОбласти = "ПояснениеОценкиКредитоспособность" + ?(ДанныеФинансовогоАнализа.ЭтоПрогноз, "Прогноз", "");
		УстановитьЦветЯчейкиПоОценке(ОбластьГлавное, ИмяОбласти, ПоказателиКредитоспособность.ОценкаКредитоспособность);
	КонецЕсли;
	
	ОбластьГлавное.Параметры.Заполнить(ПараметрыГлавное);
	ТабличныйДокумент.Вывести(ОбластьГлавное);
	
КонецПроцедуры

#КонецОбласти

#Область БухгалтерскаяОтчетность

Процедура ПодготовитьДанныеБухгалтерскойОтчетности(ДанныеФинансовогоАнализа, ПроверкаАктуализации)
	
	Если ПроверкаАктуализации.ТребуетсяАктуализация Тогда
		ДатаАктуальностиУчета = НачалоМесяца(ПроверкаАктуализации.ДатаАктуальности)-1;
	Иначе
		ДатаАктуальностиУчета = Мин(НачалоМесяца(ТекущаяДатаСеанса())-1, ДанныеФинансовогоАнализа.Период);
	КонецЕсли;
	
	ДанныеФинансовогоАнализа.Вставить("ДанныеБухгалтерскойОтчетности", НоваяТаблицаДанныеБухгалтерскойОтчетности());
	ЭтоПрогноз = (КонецДня(ДатаАктуальностиУчета) <> КонецГода(ДанныеФинансовогоАнализа.Период));
	ДанныеФинансовогоАнализа.Вставить("ЭтоПрогноз", ЭтоПрогноз);
	ДанныеФинансовогоАнализа.Вставить("ДатаФакта", Формат(ДатаАктуальностиУчета,"ДЛФ=D"));
	ДанныеФинансовогоАнализа.Вставить("ВалютаОтчетности", ВалютаБухгалтерскойОтчетности("384"));
	
	// Для расчета итогов в отчете о финансовых результатах используются округленные значения показателей.
	// Для расчета итогов в балансе используются реальные значения.
	// Общее приведение к единице измерения отчета применяется после того как произошел расчет итогов.
	// Поэтому для расчета показателей ОФР будем использовать коэффициент округления.
	КоэффициентОкругления = -3; // В тысячах рублей
	КоэффициентЕдиницыИзмерения = 1000; // В тысячах рублей
	
	// Для того, чтобы получить данные 4 периода, необходимо запросить данные три раза:
	// 1. Запрашиваем данные за указанный пользователем период с Начала года по дату актуальности учета;
	// 2. Запрашиваем данные за предыдущие 3 периода по балансу и 2 по ОФР;
	// 3. Запрашиваем данные за последний период по ОФР.
	
	ДанныеБухОтчетностиТекущийПериод = РегламентированнаяОтчетность.ПоказателиАвтозаполненияБухгалтерскойОтчетности(
		ДанныеФинансовогоАнализа.Организация,
		НачалоГода(ДатаАктуальностиУчета),
		ДатаАктуальностиУчета);
		
	Если НЕ ЕстьДанныеБухОтчетности(ДанныеБухОтчетностиТекущийПериод) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущийГод = НачалоГода(ДатаАктуальностиУчета) - 1;
	ДанныеБухОтчетностиПредыдущийПериод = РегламентированнаяОтчетность.ПоказателиАвтозаполненияБухгалтерскойОтчетности(
		ДанныеФинансовогоАнализа.Организация,
		НачалоГода(ПредыдущийГод),
		КонецГода(ПредыдущийГод));
		
	// Добавим данные за 4 год по отчету о прибылях и убытках
	ПозапрошлыйГод = НачалоГода(ПредыдущийГод) - 1;
	ДанныеБухОтчетностиПозапрошлыйПериод = РегламентированнаяОтчетность.ПоказателиАвтозаполненияБухгалтерскойОтчетности(
		ДанныеФинансовогоАнализа.Организация,
		НачалоГода(ПозапрошлыйГод),
		КонецГода(ПозапрошлыйГод),
		Ложь);
	
	Показатели = Новый Структура;
	
	// Сформируем данные за текущий период
	Для Каждого ИсходныйПоказатель Из ДанныеБухОтчетностиТекущийПериод Цикл
		// Регламентированная отчетность возвращает года, нумеруя их 3, 4, 5.
		// Для финансового анализа нумеруем года с 1.
		ИмяИсходногоПоказателя = ИсходныйПоказатель.Ключ;
		ПоказательГод = Число(Прав(ИмяИсходногоПоказателя, 1))-2; 
		
		// За текущий период берем только данные первого года
		Если ПоказательГод <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		// Сформируем имя показателя
		// Например, из исходного 12203 получится П1220_1.
		ИмяСтроки = Сред(ИмяИсходногоПоказателя, 1, 4);
		ИмяПоказателя = СтрШаблон("П%1_%2",
			ИмяСтроки,
			ПоказательГод);
			
		Если НЕ ЭтоПоказательОФР(ИмяИсходногоПоказателя) Тогда
			ЗначениеПоказателя = ИсходныйПоказатель.Значение;
		ИначеЕсли НЕ ДанныеФинансовогоАнализа.ЭтоПрогноз Тогда
			ЗначениеПоказателя = Окр(ИсходныйПоказатель.Значение, КоэффициентОкругления);
		Иначе // Прогнозные данные делаем только для отчета о прибылях и убытках
			
			// Запомним исходные данные
			Показатели.Вставить(
				СтрШаблон("П%1_0", ИмяСтроки),
				Окр(ИсходныйПоказатель.Значение, КоэффициентОкругления));
			
			Если ДанныеБухОтчетностиПредыдущийПериод[ИмяИсходногоПоказателя] <> Неопределено
				И ДанныеБухОтчетностиПредыдущийПериод[ИмяИсходногоПоказателя] <> 0 Тогда
				ИмяПоказателяЗаПредыдущийГод = ИмяСтроки + Строка(ПоказательГод + 3);
				
				// Для прогнозных значений используем округленные значения показателей,
				// чтобы пользователь мог проверить рассчитанные значения вручную.
				ЗначениеЗаПрошлыйГод = Окр(ДанныеБухОтчетностиПредыдущийПериод[ИмяИсходногоПоказателя], КоэффициентОкругления);
				ЗначениеНаКонецМесяцаТекущегоГода = Окр(ИсходныйПоказатель.Значение, КоэффициентОкругления);
				ЗначениеНаКонецМесяцаПрошлогоГода = Окр(ДанныеБухОтчетностиТекущийПериод[ИмяПоказателяЗаПредыдущийГод], КоэффициентОкругления);
				Если ЗначениеНаКонецМесяцаПрошлогоГода <> 0 Тогда
					// Есть данные за предыдущий год, тогда используем формулу:
					// ПрогнозНаГод = ЗначениеЗаПрошлыйГод * ЗначениеНаКонецМесяцаТекущегоГода / ЗначениеНаКонецМесяцаПрошлогоГода.
					ЗначениеПоказателя = (ЗначениеЗаПрошлыйГод * ЗначениеНаКонецМесяцаТекущегоГода / ЗначениеНаКонецМесяцаПрошлогоГода);
				Иначе
					// Если после округления значение стало 0, то используем простую формулу прогноза
					// ПрогнозНаГод = ЗначениеНаКонецМесяцаТекущегоГода * 12 / НомерМесяца.
					ЗначениеПоказателя = ЗначениеНаКонецМесяцаТекущегоГода * 12 / Месяц(ДатаАктуальностиУчета);
				КонецЕсли;
			Иначе
				// Если данных нет, тогда используем формулу:
				// ПрогнозНаГод = ЗначениеНаКонецМесяцаТекущегоГода * 12 / НомерМесяца.
				ЗначениеНаКонецМесяцаТекущегоГода = Окр(ИсходныйПоказатель.Значение, КоэффициентОкругления);
				ЗначениеПоказателя = ЗначениеНаКонецМесяцаТекущегоГода * 12 / Месяц(ДатаАктуальностиУчета);
			КонецЕсли;
			ЗначениеПоказателя = Окр(ЗначениеПоказателя, КоэффициентОкругления);
		КонецЕсли;
		Показатели.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	КонецЦикла;
	
	// Сформируем данные за предыдущие периоды
	Для Каждого ИсходныйПоказатель Из ДанныеБухОтчетностиПредыдущийПериод Цикл
		ИмяИсходногоПоказателя = ИсходныйПоказатель.Ключ;
		ПоказательГод = Число(Прав(ИмяИсходногоПоказателя, 1))-1;
		ИмяСтроки = Сред(ИмяИсходногоПоказателя, 1, 4);
		ИмяПоказателя = СтрШаблон("П%1_%2",
			ИмяСтроки,
			ПоказательГод);
			
		Если ЭтоПоказательОФР(ИмяИсходногоПоказателя) Тогда
			ЗначениеИсходногоПоказателя = Окр(ИсходныйПоказатель.Значение, КоэффициентОкругления);
		Иначе
			ЗначениеИсходногоПоказателя = ИсходныйПоказатель.Значение;
		КонецЕсли;
		Показатели.Вставить(ИмяПоказателя, ЗначениеИсходногоПоказателя);
	КонецЦикла;
	
	// Соберем данные по ОФР для последнего периода
	Для Каждого ИсходныйПоказатель Из ДанныеБухОтчетностиПозапрошлыйПериод Цикл
		ИмяИсходногоПоказателя = ИсходныйПоказатель.Ключ;
		ПоказательГод = Число(Прав(ИмяИсходногоПоказателя, 1));
		Если ПоказательГод <> 4 ИЛИ НЕ СтрНачинаетсяС(ИмяИсходногоПоказателя, "2") Тогда
			Продолжить;
		КонецЕсли;
		ИмяСтроки = Сред(ИмяИсходногоПоказателя, 1, 4);
		ИмяПоказателя = СтрШаблон("П%1_%2",
			ИмяСтроки,
			ПоказательГод);
		Если ЭтоПоказательОФР(ИмяИсходногоПоказателя) Тогда
			ЗначениеИсходногоПоказателя = Окр(ИсходныйПоказатель.Значение, КоэффициентОкругления);
		Иначе
			ЗначениеИсходногоПоказателя = ИсходныйПоказатель.Значение;
		КонецЕсли;
		Показатели.Вставить(ИмяПоказателя, ЗначениеИсходногоПоказателя);
	КонецЦикла;
	
	// Считаем итоги по разделам
	СтруктураИтогов = Новый Структура;
	// Баланс
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П1100", "1110;1120;1130;1140;1150;1160;1170;1180;1190");
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П1200", "1210;1220;1230;1240;1250;1260");
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П1600", "1100;1200");
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П1300", "1310;1320;1340;1350;1360;1370");
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П1400", "1410;1420");
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П1500", "1510;1520;1530;1540;1550");
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П1700", "1300;1400;1500");
	// ОФР
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П2100", "2110;2120");
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П2200", "2100;2210;2220");
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П2300", "2200;2310;2320;2330;2340;2350");
	ДобавитьВСтруктуруМассивПоказателей(СтруктураИтогов, "П2400", "2300;2410;2430;2450;2460");

	Для Год = 0 По 4 Цикл
		Для Каждого КлючИЗначение Из СтруктураИтогов Цикл
			// Для ОФР следует посчитать и исходные данные. Для Баланса не выполняем такой расчет.
			Если Год = 0 И НЕ (ДанныеФинансовогоАнализа.ЭтоПрогноз И СтрНачинаетсяС(КлючИЗначение.Ключ, "П2")) Тогда
				Продолжить;
			КонецЕсли;
			ИмяИтогаПоРазделу = СтрШаблон("%1_%2", КлючИЗначение.Ключ, Год);
			Показатели.Вставить(ИмяИтогаПоРазделу, 0);
			Для Каждого ИмяПоказателя Из КлючИЗначение.Значение Цикл
				ИмяПоказателяСтроки = СтрШаблон("П%1_%2", 
					СтрЗаменить(ИмяПоказателя,"-",""), 
					Год);
				Показатели[ИмяИтогаПоРазделу] = Показатели[ИмяИтогаПоРазделу] + Показатели[ИмяПоказателяСтроки];
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Удалим года, по которым нет данных
	Для Год = 1 По 4 Цикл
		Если Показатели["П1600_" + Год] = 0 И Показатели["П1700_" + Год] = 0 И Показатели["П2400_" + Год] = 0 Тогда
			Для Каждого Показатель Из Показатели Цикл
				Если СтрЗаканчиваетсяНа(Показатель.Ключ, Год) Тогда
					Показатели.Удалить(Показатель.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Приведем значения показателей к валюте отчетности
	Для Каждого Показатель Из Показатели Цикл
		Показатели[Показатель.Ключ] = Окр(Показатель.Значение / КоэффициентЕдиницыИзмерения, 0);
	КонецЦикла;
	
	Если Показатели.Количество() > 0 Тогда
		НоваяСтрока = ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности.Добавить();
		НоваяСтрока.Показатели = Показатели;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиБухгалтерскуюОтчетность(ТабличныйДокумент, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета = Истина)
	
	Если ДанныеФинансовогоАнализа.ЭтоПрогноз Тогда
		ОбластиМакета = ВсеОбластиМакета("БухгалтерскаяОтчетностьПрогноз");
	Иначе
		ОбластиМакета = ВсеОбластиМакета("БухгалтерскаяОтчетность");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	Если ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
		ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаНетОтчетности);
	Иначе
		Для Каждого СтрокаТаблицы Из ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности Цикл
			
			ВывестиБаланс(ТабличныйДокумент, ОбластиМакета, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета, СтрокаТаблицы);
			
			ВывестиОтчетОФинансовомРезультате(ТабличныйДокумент, ОбластиМакета, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета, СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиБаланс(ТабличныйДокумент, ОбластиМакета, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета, СтрокаТаблицы)
	
	ТабличныйДокумент.Вывести(ОбластиМакета.БалансШапка);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
	КонецЕсли;
	
	ОбластиМакета.БалансГода.Параметры.Заполнить(ДанныеФинансовогоАнализа);
	ОбластиМакета.БалансГода.Параметры.Заполнить(ДанныеФинансовогоАнализа.СтруктураГодов);
	ТабличныйДокумент.Вывести(ОбластиМакета.БалансГода);
	
	Для Каждого Раздел Из ПоказателиБаланса() Цикл
		ОбластьШапкаРаздела = ОбластиМакета["Шапка" + Раздел.Ключ];
		ОбластьШапкаРаздела.Параметры.Заполнить(ДанныеФинансовогоАнализа);
		ТабличныйДокумент.Вывести(ОбластьШапкаРаздела);
		Для Каждого Строка Из Раздел.Значение Цикл
			ВыводитьСтроку = Ложь;
			Для Год = 1 По ДанныеФинансовогоАнализа.СтруктураГодов.Количество() Цикл
				// Если есть данные, хотя бы за один год, тогда выводим всю строку
				ИмяПоказателя = Строка+"_"+Год;
				Если СтрокаТаблицы.Показатели.Свойство(ИмяПоказателя) И СтрокаТаблицы.Показатели[ИмяПоказателя] <> 0 Тогда
					ВыводитьСтроку = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ВыводитьСтроку Тогда
				ОбластьСтрока = ОбластиМакета[Строка];
				ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы.Показатели);
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЕсли;
		КонецЦикла;
		// Итоги выводим всегда, даже если они нулевые
		ОбластьИтоги = ОбластиМакета["Итого" + Раздел.Ключ];
		ОбластьИтоги.Параметры.Заполнить(СтрокаТаблицы.Показатели);
		ТабличныйДокумент.Вывести(ОбластьИтоги);
	КонецЦикла;
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиОтчетОФинансовомРезультате(ТабличныйДокумент, ОбластиМакета, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета, СтрокаТаблицы)
	
	ТабличныйДокумент.Вывести(ОбластиМакета.ПрибылиУбыткиШапка);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
	КонецЕсли;
	
	ОбластиМакета.ПрибылиУбыткиГода.Параметры.Заполнить(ДанныеФинансовогоАнализа);
	ОбластиМакета.ПрибылиУбыткиГода.Параметры.Заполнить(ДанныеФинансовогоАнализа.СтруктураГодов);
	ТабличныйДокумент.Вывести(ОбластиМакета.ПрибылиУбыткиГода);
	
	ПоказателиПрибылиУбытки = СтрРазделить("П2110;П2120;П2100;П2210;П2220;П2200;П2310;П2320;П2330;П2340;П2350;П2300;П2410;П2430;П2450;П2460",";");
	Для Каждого Строка Из ПоказателиПрибылиУбытки Цикл
		ВыводитьСтроку = Ложь;
		Для Год = 1 По ДанныеФинансовогоАнализа.СтруктураГодов.Количество() Цикл
			ИмяПоказателя = Строка+"_"+Год;
			Если СтрокаТаблицы.Показатели.Свойство(ИмяПоказателя) И СтрокаТаблицы.Показатели[ИмяПоказателя] <> 0 Тогда
				ВыводитьСтроку = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьСтроку Тогда
			ОбластьСтрока = ОбластиМакета[Строка];
			ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы.Показатели);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЕсли;
	КонецЦикла;
	ОбластьИтоги = ОбластиМакета.ИтогоПрибылиУбытки;
	ОбластьИтоги.Параметры.Заполнить(СтрокаТаблицы.Показатели);
	ТабличныйДокумент.Вывести(ОбластьИтоги);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

Функция ПоказателиБаланса()
	
	ПоказателиБаланса = Новый Структура;
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиБаланса, "Раздел1", "П1110;П1120;П1130;П1140;П1150;П1160;П1170;П1180;П1190");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиБаланса, "Раздел2", "П1210;П1220;П1230;П1240;П1250;П1260");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиБаланса, "Раздел3", "П1310;П1320;П1340;П1350;П1360;П1370");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиБаланса, "Раздел4", "П1410;П1420");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиБаланса, "Раздел5", "П1510;П1520;П1530;П1540;П1550");
	
	Возврат ПоказателиБаланса;
	
КонецФункции

Функция НоваяТаблицаДанныеБухгалтерскойОтчетности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Показатели"); // Структура
	Возврат Результат;

КонецФункции

Функция ЕстьДанныеБухОтчетности(ДанныеБухОтчетностиТекущийПериод)

	ЕстьДанные = Ложь;
	Для Каждого Показатель Из ДанныеБухОтчетностиТекущийПериод Цикл
		// Проверим, есть ли данные за выбранный пользователем год. Имена показатели текущего года заканчиваются на 3.
		// Проверять будем по оборотным показателям. Оборотные показатели указываются в отчете о финансовом результате.
		Если ЭтоПоказательОФР(Показатель.Ключ) И СтрЗаканчиваетсяНа(Показатель.Ключ, "3") И Показатель.Значение <> 0 Тогда
			ЕстьДанные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьДанные;
	
КонецФункции

Функция ВалютаБухгалтерскойОтчетности(КодВалютыОтчетности)

	Если КодВалютыОтчетности = "383" Тогда
		Возврат НСтр("ru='В рублях'");
	ИначеЕсли КодВалютыОтчетности = "384" Тогда
		Возврат НСтр("ru='В тысячах рублей'");
	Иначе // "385"
		Возврат НСтр("ru='В миллионах рублей'");
	КонецЕсли;

КонецФункции

Функция ЭтоПоказательОФР(ИмяПоказателя)

	// Показатели отчета о финансовых результатах начинаются с "2", например 21103
	Возврат СтрНачинаетсяС(ИмяПоказателя, 2);

КонецФункции

#КонецОбласти

#Область АнализОтчетности

Процедура ПодготовитьДанныеАнализаОтчетности(ДанныеФинансовогоАнализа)

	ДанныеФинансовогоАнализа.Вставить("АнализОтчетности", НоваяТаблицаАнализОтчетности());
	Если НЕ ДанныеФинансовогоАнализа.Свойство("ДанныеБухгалтерскойОтчетности")
		ИЛИ ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности.Количество() = 0
		ИЛИ ДанныеФинансовогоАнализа.ДанныеПоГодам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетПоказателей = Новый Структура;
	ДобавитьВСтруктуруМассивПоказателей(РасчетПоказателей, "Продажи",      "2110");
	ДобавитьВСтруктуруМассивПоказателей(РасчетПоказателей, "Прибыль",      "2400");
	ДобавитьВСтруктуруМассивПоказателей(РасчетПоказателей, "Деньги",       "1250");
	ДобавитьВСтруктуруМассивПоказателей(РасчетПоказателей, "Запасы",       "1210");
	ДобавитьВСтруктуруМассивПоказателей(РасчетПоказателей, "ОС",           "1150");
	ДобавитьВСтруктуруМассивПоказателей(РасчетПоказателей, "Дебиторы",     "1220;1230;1240;1260");
	ДобавитьВСтруктуруМассивПоказателей(РасчетПоказателей, "Кредиторы",    "1520");
	ДобавитьВСтруктуруМассивПоказателей(РасчетПоказателей, "Кредиты",      "1410;1510");
	ДобавитьВСтруктуруМассивПоказателей(РасчетПоказателей, "ЧистыеАктивы", "1600;-1410;-1420;-1510;-1520;-1540;-1550");
	
	Для Каждого СтрокаТаблицы Из ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности Цикл
		
		ДанныеОтчетности = СтрокаТаблицы.Показатели;
		
		НоваяСтрока = ДанныеФинансовогоАнализа.АнализОтчетности.Добавить();
		НоваяСтрока.Показатели       = Новый Структура;
			
		РассчитатьПоказатели(
			РасчетПоказателей,
			НоваяСтрока.Показатели,
			ДанныеФинансовогоАнализа.ДанныеПоГодам,
			ДанныеОтчетности);
			
		Если ДанныеФинансовогоАнализа.ЭтоПрогноз Тогда
			НоваяСтрока.Показатели.Вставить("Продажи_0",      ДанныеОтчетности.П2110_0);
			НоваяСтрока.Показатели.Вставить("Прибыль_0",      ДанныеОтчетности.П2400_0);
			НоваяСтрока.Показатели.Вставить("ЧистыеАктивы_0", НоваяСтрока.Показатели.ЧистыеАктивы_1);
			// Прогнозные значения чистых активов считаем по формуле:
			// Чистые активы (прогноз) = Чистые активы (факт) + Прибыль (прогноз) - Прибыль (факт).
			ЧистыеАктивы_1 = НоваяСтрока.Показатели.ЧистыеАктивы_1 + НоваяСтрока.Показатели.Прибыль_1 - НоваяСтрока.Показатели.Прибыль_0;
			НоваяСтрока.Показатели.Вставить("ЧистыеАктивы_1", ЧистыеАктивы_1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиАнализОтчетности(ТабличныйДокумент, ДанныеФинансовогоАнализа, ЭтоОсновнаяФормаОтчета = Истина)

	Если ДанныеФинансовогоАнализа.ЭтоПрогноз Тогда
		ОбластиМакета = ВсеОбластиМакета("АнализОтчетностиПрогноз");
	Иначе
		ОбластиМакета = ВсеОбластиМакета("АнализОтчетности");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	Если ДанныеФинансовогоАнализа.АнализОтчетности.Количество() = 0 Тогда
		ТабличныйДокумент.Вывести(ОбластиМакета.АнализНеПроведенНетОтчетности);
	Иначе

		ИменаПоказателейСКартинками = "Продажи;Прибыль;Деньги;Запасы;ОС;Дебиторы;Кредиторы;Кредиты;ЧистыеАктивы";
		Для Каждого СтрокаТаблицы Из ДанныеФинансовогоАнализа.АнализОтчетности Цикл
			ОбластиМакета.Показатели.Параметры.Заполнить(ДанныеФинансовогоАнализа.СтруктураГодов);
			ОбластиМакета.Показатели.Параметры.Заполнить(СтрокаТаблицы.Показатели);
			ОбластиМакета.Показатели.Параметры.Заполнить(ДанныеФинансовогоАнализа);
			
			Для НомерГода = 1 По 3 Цикл
				УстановитьКартинкиАнализаОтчетности(
					ОбластиМакета.Показатели,
					СтрокаТаблицы.Показатели,
					ИменаПоказателейСКартинками,
					Строка(НомерГода),    // Текущая колонка
					Строка(НомерГода+1)); // Предыдущая колонка
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(ОбластиМакета.Показатели);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаАнализОтчетности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Показатели"); // Структура
	Возврат Результат;

КонецФункции 

Процедура УстановитьКартинкиАнализаОтчетности(ОбластьМакета, Показатели, ИменаПоказателейСКартинками, Номер1, Номер2, ЭтоПрогноз = Ложь)
	
	ЕстьДанные = Показатели.Свойство("Продажи_" + Номер1)
		И Показатели["Продажи_" + Номер1] <> Неопределено
		И Показатели.Свойство("Продажи_" + Номер2)
		И Показатели["Продажи_" + Номер2] <> Неопределено;
	
	ВсеКартинки = ВсеКартинкиТабличногоДокумента(ОбластьМакета);
	ИменаПоказателей = СтрРазделить(ИменаПоказателейСКартинками, ";", Ложь);
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		
		Если ЕстьДанные Тогда
			ЗначениеПоказателя1 = Показатели[ИмяПоказателя + "_" + Номер1];
			ЗначениеПоказателя2 = Показатели[ИмяПоказателя + "_" + Номер2];
			Если ЗначениеПоказателя1 > ЗначениеПоказателя2 Тогда
				ВыбраннаяКартинка = БиблиотекаКартинок.ДосьеУвеличениеПоказателя;
			ИначеЕсли ЗначениеПоказателя1 < ЗначениеПоказателя2 Тогда
				ВыбраннаяКартинка = БиблиотекаКартинок.ДосьеУменьшениеПоказателя;
			Иначе
				ВыбраннаяКартинка = Новый Картинка;
			КонецЕсли;
		Иначе
			ВыбраннаяКартинка = Новый Картинка;
		КонецЕсли;
		ИмяКартинки = СтрШаблон("Картинка%1%2_%3",
			ИмяПоказателя,
			?(ЭтоПрогноз, "Прогноз", ""),
			Номер1);
		ВсеКартинки[ИмяКартинки].Картинка = ВыбраннаяКартинка;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФинансовыйАнализ

Процедура ПодготовитьДанныеФинансовогоАнализа(ДанныеФинансовогоАнализа)

	ДанныеФинансовогоАнализа.Вставить("ФинансовыйАнализ", НоваяТаблицаФинансовыйАнализ());
	Если НЕ ДанныеФинансовогоАнализа.Свойство("ДанныеБухгалтерскойОтчетности")
		ИЛИ ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности.Количество() = 0
		ИЛИ ДанныеФинансовогоАнализа.ДанныеПоГодам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтчетности = ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности[0];
	НоваяСтрока = ДанныеФинансовогоАнализа.ФинансовыйАнализ.Добавить();
	НоваяСтрока.ГодОтчетности    = ДанныеФинансовогоАнализа.ДанныеПоГодам[0].Год;
	
	// Платежеспособность
	НоваяСтрока.ПоказателиПлатежеспособности = Новый Структура;
	ДобавитьПоказателиПлатежеспособности(НоваяСтрока.ПоказателиПлатежеспособности, СтрокаОтчетности, ДанныеФинансовогоАнализа);
	
	// Финансовая устойчивость
	НоваяСтрока.ПоказателиФинансовойУстойчивости = Новый Структура;
	ДобавитьПоказателиФинансовойУстойчивости(НоваяСтрока.ПоказателиФинансовойУстойчивости, СтрокаОтчетности, ДанныеФинансовогоАнализа);
	
	// Рентабельность активов
	НоваяСтрока.ПоказателиРентабельностьАктивов = Новый Структура;
	ДобавитьПоказателиРентабельностьАктивов(НоваяСтрока.ПоказателиРентабельностьАктивов, СтрокаОтчетности, ДанныеФинансовогоАнализа);
	
	// Рентабельность продаж
	НоваяСтрока.ПоказателиРентабельностьПродаж = Новый Структура;
	ДобавитьПоказателиРентабельностьПродаж(НоваяСтрока.ПоказателиРентабельностьПродаж, СтрокаОтчетности, ДанныеФинансовогоАнализа);
	
	// Рентабельность продукции
	НоваяСтрока.ПоказателиРентабельностьПродукции = Новый Структура;
	ДобавитьПоказателиРентабельностьПродукции(НоваяСтрока.ПоказателиРентабельностьПродукции, СтрокаОтчетности, ДанныеФинансовогоАнализа);
	
	// Рентабельность предприятия
	НоваяСтрока.ПоказателиРентабельностьКомпании = Новый Структура;
	ДобавитьПоказателиРентабельностьКомпании(НоваяСтрока.ПоказателиРентабельностьКомпании, СтрокаОтчетности, ДанныеФинансовогоАнализа);

	// Риск банкротства
	НоваяСтрока.ПоказателиРискБанкротства = Новый Структура;
	ДобавитьПоказателиРискБанкротства(НоваяСтрока.ПоказателиРискБанкротства, СтрокаОтчетности, ДанныеФинансовогоАнализа);
	
	// Кредитоспособность
	НоваяСтрока.ПоказателиКредитоспособность = Новый Структура;
	ДобавитьПоказателиКредитоспособность(НоваяСтрока.ПоказателиКредитоспособность, СтрокаОтчетности, ДанныеФинансовогоАнализа);
	
КонецПроцедуры

#Область Коэффициенты

Процедура ВывестиКоэффициенты(ТабличныйДокумент, ДанныеФинансовогоАнализа, ОбластиРасшифровки, ЭтоОсновнаяФормаОтчета = Истина)

	ПараметрыВывода   = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиМакета",      ВсеОбластиМакета("Коэффициенты"));
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("СтруктураГодов",     ДанныеФинансовогоАнализа.СтруктураГодов);
	ПараметрыВывода.Вставить("ЭтоПрогноз",         ДанныеФинансовогоАнализа.ЭтоПрогноз);
	ПараметрыВывода.Вставить("ЭтоТорговля",        ДанныеФинансовогоАнализа.ЭтоТорговля);
	
	ОбластьШапка = ПараметрыВывода.ОбластиМакета.Шапка;
	ОбластьШапка.Параметры.ТекстЗаголовка = НСтр("ru='Коэффициенты'");
	ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.Шапка);
	
	Если ДанныеФинансовогоАнализа.ФинансовыйАнализ.Количество() = 0 Тогда
		ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.АнализНеПроведенНетОтчетности);
	Иначе
		СтрокаТаблицы = ДанныеФинансовогоАнализа.ФинансовыйАнализ[0];
		
		ВывестиРазделТекущаяЛиквидность(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		ВывестиРазделБыстраяЛиквидность(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		ВывестиРазделАбсолютнаяЛиквидность(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		ВывестиРазделНаличиеСобственныхСредств(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		
		Если ЭтоОсновнаяФормаОтчета Тогда
			ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатКоэффициенты", "ИмяДокумента");
			Для Каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
				НоваяСтрока = ОбластиРасшифровки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделТекущаяЛиквидность(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиПлатежеспособности;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Коэффициент текущей ликвидности'"));
	
	ТекущаяЛиквидность = ?(Показатели.Свойство("ТекущаяЛиквидность_1"), Показатели.ТекущаяЛиквидность_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.ТекущаяЛиквидностьПояснение.Параметры.Заполнить(Показатели);
		ТабличныйДокумент.Вывести(ОбластиМакета.ТекущаяЛиквидностьПояснение);
	Иначе
		ОбластьМакета = ОбластиМакета.ТекущаяЛиквидность;
		ОбластьМакета.Параметры.Заполнить(Показатели);
		УстановитьЦветЯчейкиПоОценке(ОбластьМакета, "ПояснениеОценкиТекущаяЛиквидность", Показатели.ОценкаТекущаяЛиквидность_1);
		
		// Диаграмма
		СтруктураДиаграммы = НовыйСтруктураДиаграммы();
		СтруктураДиаграммы.ТабличныйДокумент  = ТабличныйДокумент;
		СтруктураДиаграммы.ОбластьМакета      = ОбластьМакета;
		СтруктураДиаграммы.ИмяДиаграммы       = "ДиаграммаТекущаяЛиквидность";
		СтруктураДиаграммы.ЗначениеПоказателя = ТекущаяЛиквидность;
		СтруктураДиаграммы.ГраницыДиаграммы.НижняяГраница  = 0;
		СтруктураДиаграммы.ГраницыДиаграммы.ВерхняяГраница = 3;
		СтруктураДиаграммы.ТекстТочкиДиаграммы = СтрШаблон(НСтр("ru = 'Коэффициент текущей ликвидности = %1'"), ТекущаяЛиквидность);
		
		ВывестиОбластьДиаграмма(СтруктураДиаграммы);
		
		ВывестиОбластьПоказатьРасчет("РезультатКоэффициенты", "ТекущаяЛиквидность",ОбластиМакета, ТабличныйДокумент);
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "ТекущаяЛиквидность";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;
	
	// Пояснения
	Если Показатели.ОценкаТекущаяЛиквидность_1 = ПлохаяОценка() Тогда
		ОбластьКоэффициент = ОбластиМакета.ТекущаяЛиквидностьКрасный;
	ИначеЕсли Показатели.ОценкаТекущаяЛиквидность_1 = СредняяОценка() Тогда
		ОбластьКоэффициент = ОбластиМакета.ТекущаяЛиквидностьЖелтый;
	Иначе
		ОбластьКоэффициент = ОбластиМакета.ТекущаяЛиквидностьЗеленый;
	КонецЕсли;
	ОбластьКоэффициент.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьКоэффициент);
	ТабличныйДокумент.Вывести(ОбластиМакета.ТекущаяЛиквидностьПояснения);
	
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.ТекущаяЛиквидностьРасчет;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатКоэффициенты",
			"ТекущаяЛиквидность",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделБыстраяЛиквидность(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиПлатежеспособности;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Коэффициент быстрой ликвидности'"));
	
	БыстраяЛиквидность = ?(Показатели.Свойство("БыстраяЛиквидность_1"), Показатели.БыстраяЛиквидность_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.БыстраяЛиквидностьПояснение.Параметры.Заполнить(Показатели);
		ТабличныйДокумент.Вывести(ОбластиМакета.БыстраяЛиквидностьПояснение);
	Иначе
		ОбластьМакета = ОбластиМакета.БыстраяЛиквидность;
		ОбластьМакета.Параметры.Заполнить(Показатели);
		УстановитьЦветЯчейкиПоОценке(ОбластьМакета, "ПояснениеОценкиБыстраяЛиквидность", Показатели.ОценкаБыстраяЛиквидность_1);
		
		// Диаграмма
		СтруктураДиаграммы = НовыйСтруктураДиаграммы();
		СтруктураДиаграммы.ТабличныйДокумент  = ТабличныйДокумент;
		СтруктураДиаграммы.ОбластьМакета      = ОбластьМакета;
		СтруктураДиаграммы.ИмяДиаграммы       = "ДиаграммаБыстраяЛиквидность";
		СтруктураДиаграммы.ЗначениеПоказателя = БыстраяЛиквидность;
		СтруктураДиаграммы.ГраницыДиаграммы.НижняяГраница  = 0;
		СтруктураДиаграммы.ГраницыДиаграммы.ВерхняяГраница = 1.6;
		СтруктураДиаграммы.ТекстТочкиДиаграммы = СтрШаблон(НСтр("ru = 'Коэффициент быстрой ликвидности = %1'"), БыстраяЛиквидность);
		
		ВывестиОбластьДиаграмма(СтруктураДиаграммы);
		ВывестиОбластьПоказатьРасчет("РезультатКоэффициенты", "БыстраяЛиквидность",ОбластиМакета, ТабличныйДокумент);
		
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "БыстраяЛиквидность";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;
	
	// Пояснения
	Если Показатели.ОценкаБыстраяЛиквидность_1 = ПлохаяОценка() Тогда
		ОбластьКоэффициент = ОбластиМакета.БыстраяЛиквидностьКрасный;
	ИначеЕсли Показатели.ОценкаБыстраяЛиквидность_1 = СредняяОценка() Тогда
		ОбластьКоэффициент = ОбластиМакета.БыстраяЛиквидностьЖелтый;
	Иначе
		ОбластьКоэффициент = ОбластиМакета.БыстраяЛиквидностьЗеленый;
	КонецЕсли;
	ОбластьКоэффициент.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьКоэффициент);
	ТабличныйДокумент.Вывести(ОбластиМакета.БыстраяЛиквидностьПояснения);
	
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.БыстраяЛиквидностьРасчет;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатКоэффициенты",
			"БыстраяЛиквидность",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделАбсолютнаяЛиквидность(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиПлатежеспособности;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Коэффициент абсолютной ликвидности'"));
	
	АбсолютнаяЛиквидность = ?(Показатели.Свойство("АбсолютнаяЛиквидность_1"), Показатели.АбсолютнаяЛиквидность_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.АбсолютнаяЛиквидностьПояснение.Параметры.Заполнить(Показатели);
		ТабличныйДокумент.Вывести(ОбластиМакета.АбсолютнаяЛиквидностьПояснение);
	Иначе
		ОбластьМакета = ОбластиМакета.АбсолютнаяЛиквидность;
		ОбластьМакета.Параметры.Заполнить(Показатели);
		УстановитьЦветЯчейкиПоОценке(ОбластиМакета.АбсолютнаяЛиквидность, "ПояснениеОценкиАбсолютнаяЛиквидность", Показатели.ОценкаАбсолютнаяЛиквидность_1);
		
		// Диаграмма
		СтруктураДиаграммы = НовыйСтруктураДиаграммы();
		СтруктураДиаграммы.ТабличныйДокумент  = ТабличныйДокумент;
		СтруктураДиаграммы.ОбластьМакета      = ОбластьМакета;
		СтруктураДиаграммы.ИмяДиаграммы       = "ДиаграммаАбсолютнаяЛиквидность";
		СтруктураДиаграммы.ЗначениеПоказателя = АбсолютнаяЛиквидность;
		СтруктураДиаграммы.ГраницыДиаграммы.НижняяГраница  = 0;
		СтруктураДиаграммы.ГраницыДиаграммы.ВерхняяГраница = 0.2;
		СтруктураДиаграммы.ТекстТочкиДиаграммы = СтрШаблон(НСтр("ru = 'Коэффициент абсолютной ликвидности = %1'"), АбсолютнаяЛиквидность);
		
		ВывестиОбластьДиаграмма(СтруктураДиаграммы);
		ВывестиОбластьПоказатьРасчет("РезультатКоэффициенты", "АбсолютнаяЛиквидность",ОбластиМакета, ТабличныйДокумент);
		
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "АбсолютнаяЛиквидность";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;
	
	// Пояснения
	Если Показатели.ОценкаАбсолютнаяЛиквидность_1 = ПлохаяОценка() Тогда
		ОбластьКоэффициент = ОбластиМакета.АбсолютнаяЛиквидностьКрасный;
	ИначеЕсли Показатели.ОценкаАбсолютнаяЛиквидность_1 = СредняяОценка() Тогда
		ОбластьКоэффициент = ОбластиМакета.АбсолютнаяЛиквидностьЖелтый;
	Иначе
		ОбластьКоэффициент = ОбластиМакета.АбсолютнаяЛиквидностьЗеленый;
	КонецЕсли;
	ОбластьКоэффициент.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьКоэффициент);
	ТабличныйДокумент.Вывести(ОбластиМакета.АбсолютнаяЛиквидностьПояснения);
	
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.АбсолютнаяЛиквидностьРасчет;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатКоэффициенты",
			"АбсолютнаяЛиквидность",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделНаличиеСобственныхСредств(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиФинансовойУстойчивости;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Коэффициент наличия собственных средств'"));
	
	НаличиеСобственныхСредств = ?(Показатели.Свойство("НаличиеСобственныхСредств_1"), Показатели.НаличиеСобственныхСредств_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.НаличиеСобственныхСредствПояснение.Параметры.Заполнить(Показатели);
		ТабличныйДокумент.Вывести(ОбластиМакета.НаличиеСобственныхСредствПояснение);
	Иначе
		// Диаграмма
		Если ПараметрыВывода.ЭтоТорговля Тогда
			
			ОбластьМакета = ОбластиМакета.НаличиеСобственныхСредствТорговля;
			ОбластьМакета.Параметры.Заполнить(Показатели);
			УстановитьЦветЯчейкиПоОценке(ОбластьМакета, 
				"ПояснениеОценкиНаличиеСобственныхСредствТорговля", 
				Показатели.ОценкаНаличиеСобственныхСредств_1);
				
			// Диаграмма
			СтруктураДиаграммы = НовыйСтруктураДиаграммы();
			СтруктураДиаграммы.ТабличныйДокумент  = ТабличныйДокумент;
			СтруктураДиаграммы.ОбластьМакета      = ОбластьМакета;
			СтруктураДиаграммы.ИмяДиаграммы       = "ДиаграммаНаличиеСобственныхСредствТорговля";
			СтруктураДиаграммы.ЗначениеПоказателя = НаличиеСобственныхСредств;
			СтруктураДиаграммы.ГраницыДиаграммы.НижняяГраница  = 0;
			СтруктураДиаграммы.ГраницыДиаграммы.ВерхняяГраница = 0.5;
			СтруктураДиаграммы.ТекстТочкиДиаграммы = СтрШаблон(НСтр("ru = 'Коэффициент наличия собственных средств = %1'"), НаличиеСобственныхСредств);
			
			ВывестиОбластьДиаграмма(СтруктураДиаграммы);
		Иначе
			ОбластьМакета = ОбластиМакета.НаличиеСобственныхСредств;
			ОбластьМакета.Параметры.Заполнить(Показатели);
			УстановитьЦветЯчейкиПоОценке(ОбластьМакета, 
				"ПояснениеОценкиНаличиеСобственныхСредств", 
				Показатели.ОценкаНаличиеСобственныхСредств_1);
		
			// Диаграмма
			СтруктураДиаграммы = НовыйСтруктураДиаграммы();
			СтруктураДиаграммы.ТабличныйДокумент  = ТабличныйДокумент;
			СтруктураДиаграммы.ОбластьМакета      = ОбластьМакета;
			СтруктураДиаграммы.ИмяДиаграммы       = "ДиаграммаНаличиеСобственныхСредств";
			СтруктураДиаграммы.ЗначениеПоказателя = НаличиеСобственныхСредств;
			СтруктураДиаграммы.ГраницыДиаграммы.НижняяГраница  = 0;
			СтруктураДиаграммы.ГраницыДиаграммы.ВерхняяГраница = 0.8;
			СтруктураДиаграммы.ТекстТочкиДиаграммы = СтрШаблон(НСтр("ru = 'Коэффициент наличия собственных средств = %1'"), НаличиеСобственныхСредств);
			
			ВывестиОбластьДиаграмма(СтруктураДиаграммы);
		КонецЕсли;
		ВывестиОбластьПоказатьРасчет("РезультатКоэффициенты", "НаличиеСобственныхСредств",ОбластиМакета, ТабличныйДокумент);
		
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "НаличиеСобственныхСредств";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;
	
	// Пояснения
	Если Показатели.ОценкаНаличиеСобственныхСредств_1 = ПлохаяОценка() Тогда
		ОбластьКоэффициент = ОбластиМакета.НаличиеСобственныхСредствКрасный;
	ИначеЕсли Показатели.ОценкаНаличиеСобственныхСредств_1 = СредняяОценка() Тогда
		ОбластьКоэффициент = ОбластиМакета.НаличиеСобственныхСредствЖелтый;
	Иначе
		ОбластьКоэффициент = ОбластиМакета.НаличиеСобственныхСредствЗеленый;
	КонецЕсли;

	ОбластьКоэффициент.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьКоэффициент);
	
	Если ПараметрыВывода.ЭтоТорговля Тогда
		ТабличныйДокумент.Вывести(ОбластиМакета.НаличиеСобственныхСредствПоясненияТорговля);
	Иначе
		ТабличныйДокумент.Вывести(ОбластиМакета.НаличиеСобственныхСредствПояснения);
	КонецЕсли;
	
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.НаличиеСобственныхСредствРасчет;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатКоэффициенты",
			"НаличиеСобственныхСредств",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоказателиПлатежеспособности(Показатели, СтрокаОтчетности, ДанныеФинансовогоАнализа)
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	ДанныеПоГодам = ДанныеФинансовогоАнализа.ДанныеПоГодам;

	// Показатели коэффициентов
	РасчетПоказателей = Новый Структура;
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "ТекущаяЛиквидность",    "1210;1220;1230;1240;1250;1260", "1510;1520;1550");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "БыстраяЛиквидность",    "1230;1240;1250",                "1510;1520;1550");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "АбсолютнаяЛиквидность", "1250",                          "1510;1520;1550");
	РассчитатьПоказателиДеление(РасчетПоказателей, Показатели, ДанныеПоГодам, ДанныеОтчетности);
	
	// Показатели, для отображения пояснения к расчетам
	ПоказателиПоясненияРасчета = Новый Структура;
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "НДС",           "1220");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "Деньги",        "1250");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "Запасы",        "1210");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "Задолженность", "1230");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "ФинансовыеВложения", "1240");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "ПрочиеОборотныеАктивы", "1260");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "КраткосрочныеОбязательства", "1510;1520;1550");
	РассчитатьПоказатели(ПоказателиПоясненияРасчета, Показатели, ДанныеПоГодам, ДанныеОтчетности);
	
	// Оценка коэффициентов
	ГраницыОценокКоэффициентов = Новый Структура;
	ГраницыОценокКоэффициентов.Вставить("ТекущаяЛиквидность", Новый Структура("НижняяГраница, ВерхняяГраница",
		1, 1.5));
	ГраницыОценокКоэффициентов.Вставить("БыстраяЛиквидность", Новый Структура("НижняяГраница, ВерхняяГраница",
		0.5, 0.8));
	ГраницыОценокКоэффициентов.Вставить("АбсолютнаяЛиквидность", Новый Структура("НижняяГраница, ВерхняяГраница",
		0.05, 0.1));
	Для Каждого ГраницаОценкиКоэффициента Из ГраницыОценокКоэффициентов Цикл
		ИмяКоэффициента = СтрШаблон("%1_1", ГраницаОценкиКоэффициента.Ключ);
		Границы = ГраницаОценкиКоэффициента.Значение;
		ОценкаКоэффициента = ?(Показатели[ИмяКоэффициента] <= Границы.НижняяГраница, ПлохаяОценка(), 
			?(Показатели[ИмяКоэффициента] <= Границы.ВерхняяГраница, СредняяОценка(), ХорошаяОценка()));
		Показатели.Вставить(
			СтрШаблон("Оценка%1", ИмяКоэффициента),
			ОценкаКоэффициента);
	КонецЦикла;
	
	ПоясненияПлатежеспособность = Новый Структура;
	ПоясненияПлатежеспособность.Вставить(
		ХорошаяОценка(),
		НСтр("ru='Соответствует высокой платежеспособности'"));
	ПоясненияПлатежеспособность.Вставить(
		СредняяОценка(),
		НСтр("ru='Соответствует средней платежеспособности'"));
	ПоясненияПлатежеспособность.Вставить(
		ПлохаяОценка(),
		НСтр("ru='Соответствует низкой платежеспособности'"));
	
	Показатели.Вставить("ПояснениеОценкиТекущаяЛиквидность",    ПоясненияПлатежеспособность[Показатели.ОценкаТекущаяЛиквидность_1]);
	Показатели.Вставить("ПояснениеОценкиБыстраяЛиквидность",    ПоясненияПлатежеспособность[Показатели.ОценкаБыстраяЛиквидность_1]);
	Показатели.Вставить("ПояснениеОценкиАбсолютнаяЛиквидность", ПоясненияПлатежеспособность[Показатели.ОценкаАбсолютнаяЛиквидность_1]);
	
КонецПроцедуры

Процедура ДобавитьПоказателиФинансовойУстойчивости(Показатели, СтрокаОтчетности, ДанныеФинансовогоАнализа)
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	ДанныеПоГодам = ДанныеФинансовогоАнализа.ДанныеПоГодам;

	РасчетПоказателей = Новый Структура;
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "НаличиеСобственныхСредств", "1300;1530;1540", "1700");
	РассчитатьПоказателиДеление(РасчетПоказателей, Показатели, ДанныеПоГодам, ДанныеОтчетности);
	
	// Рассчитаем процент наличия собственных средств
	Показатели.Вставить("ПроцентНаличияСобственныхСредств", Показатели.НаличиеСобственныхСредств_1 * 100);
	
	// Показатели, для отображения пояснения к расчетам
	ПоказателиПоясненияРасчета = Новый Структура;
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "Пассивы",            "1700");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "СобственныйКапитал", "1300;1530;1540");
	РассчитатьПоказатели(ПоказателиПоясненияРасчета, Показатели, ДанныеПоГодам, ДанныеОтчетности);
	
	// Оценка коэффициентов
	ЭтоТорговля = ДанныеФинансовогоАнализа.ЭтоТорговля;
	ОценкаКоэффициента = ?(Показатели.НаличиеСобственныхСредств_1 <= ?(ЭтоТорговля, 0.15, 0.25), ПлохаяОценка(), 
		?(Показатели.НаличиеСобственныхСредств_1 <= ?(ЭтоТорговля, 0.25, 0.4), СредняяОценка(), ХорошаяОценка()));
	Показатели.Вставить(
		"ОценкаНаличиеСобственныхСредств_1",
		ОценкаКоэффициента);
	
	ПоясненияФинансовойУстойчивости = Новый Структура;
	ПоясненияФинансовойУстойчивости.Вставить(
		ХорошаяОценка(),
		НСтр("ru='Высокая финансовая устойчивость'"));
	ПоясненияФинансовойУстойчивости.Вставить(
		СредняяОценка(),
		НСтр("ru='Средняя финансовая устойчивость'"));
	ПоясненияФинансовойУстойчивости.Вставить(
		ПлохаяОценка(),
		НСтр("ru='Низкая финансовая устойчивость'"));
	
	Показатели.Вставить("ПояснениеОценкиНаличиеСобственныхСредств", ПоясненияФинансовойУстойчивости[Показатели.ОценкаНаличиеСобственныхСредств_1]);
	
КонецПроцедуры

#КонецОбласти

#Область Рентабельность

Процедура ВывестиРентабельность(ТабличныйДокумент, ДанныеФинансовогоАнализа, ОбластиРасшифровки, ЭтоОсновнаяФормаОтчета = Истина)

	ПараметрыВывода   = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиМакета",      ВсеОбластиМакета("Рентабельность"));
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("СтруктураГодов",     ДанныеФинансовогоАнализа.СтруктураГодов);
	ПараметрыВывода.Вставить("ЭтоПрогноз",         ДанныеФинансовогоАнализа.ЭтоПрогноз);
	
	ОбластьШапка = ПараметрыВывода.ОбластиМакета.Шапка;
	ОбластьШапка.Параметры.ТекстЗаголовка = НСтр("ru='Рентабельность'");
	ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.Шапка);
	
	Если ДанныеФинансовогоАнализа.ФинансовыйАнализ.Количество() = 0 Тогда
		ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.АнализНеПроведенНетОтчетности);
	Иначе
		СтрокаТаблицы  = ДанныеФинансовогоАнализа.ФинансовыйАнализ[0];
		
		ВывестиРазделРентабельностьПродукции(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		ВывестиРазделРентабельностьКомпании(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		ВывестиРазделРентабельностьАктивов(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		ВывестиРазделРентабельностьПродаж(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		
		Если ЭтоОсновнаяФормаОтчета Тогда
			ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатРентабельность", "ИмяДокумента");
			Для Каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
				НоваяСтрока = ОбластиРасшифровки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделРентабельностьАктивов(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиРентабельностьАктивов;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Рентабельность активов'"));
	
	РентабельностьАктивов = ?(Показатели.Свойство("РентабельностьАктивов_1"), Показатели.РентабельностьАктивов_1, 0);
	СредняяРентабельность = ?(Показатели.Свойство("РентабельностьАктивов3_1"), Показатели.РентабельностьАктивов3_1, 0);
	ПредельнаяРентабельность = ?(Показатели.Свойство("РентабельностьАктивов4_1"), Показатели.РентабельностьАктивов4_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.РентабельностьАктивовПояснение.Параметры.Заполнить(Показатели);
		ОбластиМакета.РентабельностьАктивовПояснение.Параметры.РентабельностьАктивов = РентабельностьАктивов;
		ТабличныйДокумент.Вывести(ОбластиМакета.РентабельностьАктивовПояснение);
	Иначе
		// Диаграмма
		ОбластьРентабельностьАктивов = ?(СредняяРентабельность = 0,
			ОбластиМакета.РентабельностьАктивов0,
			ОбластиМакета.РентабельностьАктивов);
		Если СредняяРентабельность = 0 Тогда
			Диаграмма = ОбластьРентабельностьАктивов.Рисунки.ДиаграммаРентабельностьАктивов0.Объект;
		Иначе
			Диаграмма = ОбластьРентабельностьАктивов.Рисунки.ДиаграммаРентабельностьАктивов.Объект;
			Диаграмма.МинимальноеЗначение = 0;
			МаксимальноеЗначение = СредняяРентабельность * 2 * 100;
			МаксимальноеЗначение = ?(МаксимальноеЗначение > 100, МаксимальноеЗначение - МаксимальноеЗначение % 100,
				?(МаксимальноеЗначение > 10, МаксимальноеЗначение - МаксимальноеЗначение % 10,
				?(МаксимальноеЗначение > 1, Окр(МаксимальноеЗначение, 0),
			МаксимальноеЗначение)));
			Диаграмма.МаксимальноеЗначение = МаксимальноеЗначение;
			Полоса1 = Диаграмма.ПолосыИзмерительнойДиаграммы[0];
			Полоса1.Конец = ПредельнаяРентабельность * 100;
			Полоса2 = Диаграмма.ПолосыИзмерительнойДиаграммы[1];
			Полоса2.Начало = ПредельнаяРентабельность * 100;
			Полоса2.Конец  = СредняяРентабельность * 100;
			Полоса3 = Диаграмма.ПолосыИзмерительнойДиаграммы[2];
			Полоса3.Начало = СредняяРентабельность * 100;
		КонецЕсли;
		ЗначениеТочкиДиаграммы = ?(РентабельностьАктивов * 100 < Диаграмма.МинимальноеЗначение, 
			Диаграмма.МинимальноеЗначение,
			?(РентабельностьАктивов * 100 > Диаграмма.МаксимальноеЗначение, 
			Диаграмма.МаксимальноеЗначение, 
			РентабельностьАктивов * 100));
		ТекстТочкиДиаграммы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Рентабельность активов %1'"),
			РентабельностьАктивов) + " %";
		Диаграмма.УстановитьЗначение(0, 0, ЗначениеТочкиДиаграммы, , ТекстТочкиДиаграммы);
		
		Если СредняяРентабельность = 0 Тогда
			ОбластьРентабельностьАктивов = ОбластиМакета.РентабельностьАктивов0;
			ОбластьРентабельностьАктивов.Параметры.Заполнить(Показатели);
			ОбластьРентабельностьАктивов.Параметры.РентабельностьАктивов = РентабельностьАктивов;
			УстановитьЦветЯчейкиПоОценке(ОбластьРентабельностьАктивов, "ПояснениеОценкиРентабельностьАктивов0", Показатели.ОценкаРентабельностьАктивов);
		Иначе
			ОбластьРентабельностьАктивов = ОбластиМакета.РентабельностьАктивов;
			ОбластьРентабельностьАктивов.Параметры.Заполнить(Показатели);
			ОбластьРентабельностьАктивов.Параметры.РентабельностьАктивов = РентабельностьАктивов;
			УстановитьЦветЯчейкиПоОценке(ОбластьРентабельностьАктивов, "ПояснениеОценкиРентабельностьАктивов", Показатели.ОценкаРентабельностьАктивов);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьРентабельностьАктивов);
		Если СредняяРентабельность = 0 Тогда
			ТабличныйДокумент.Рисунки.ДиаграммаРентабельностьАктивов0.Объект.ОбластьПостроения.ШкалаЗначений.ФорматПодписей = "ЧС=2;ЧН=";
		Иначе
			ТабличныйДокумент.Рисунки.ДиаграммаРентабельностьАктивов.Объект.ОбластьПостроения.ШкалаЗначений.ФорматПодписей = "ЧС=2;ЧН=";
		КонецЕсли;
		ВывестиОбластьПоказатьРасчет("РезультатРентабельность", "РентабельностьАктивовПояснение", ОбластиМакета, ТабличныйДокумент);
		
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "РентабельностьАктивовПояснение";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;
	
	// Пояснения
	ТабличныйДокумент.Вывести(ОбластиМакета.РентабельностьАктивовПояснения);
	
	Если СредняяРентабельность <> 0 Тогда
		ОбластьГраницы = ОбластиМакета.РентабельностьАктивовГраницы;
		ОбластьГраницы.Параметры.СредняяРентабельность = СредняяРентабельность;
		ОбластьГраницы.Параметры.ПредельнаяРентабельность = ПредельнаяРентабельность;
		ТабличныйДокумент.Вывести(ОбластьГраницы);
	КонецЕсли;
	
	ОбластьРасчет = ОбластиМакета.РентабельностьАктивовРасчет;
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	// Показатели для расчета
	Если ПараметрыВывода.ЭтоПрогноз Тогда
		ОбластьПоказатели = ОбластиМакета.РентабельностьАктивовПоказателиПрогноз;
	Иначе
		ОбластьПоказатели = ОбластиМакета.РентабельностьАктивовПоказатели;
	КонецЕсли;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	Если ЗначениеЗаполнено(Показатели.ВидДеятельности) Тогда
		ПояснениеРасчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Средняя рентабельность приведена по данным Росстата для вида деятельности ""%1""'"),
			Показатели.ВидДеятельности);
		ОбластьПоказатели.Параметры.ПояснениеРасчета = ПояснениеРасчета;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатРентабельность",
			"РентабельностьАктивовПояснение",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделРентабельностьПродаж(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиРентабельностьПродаж;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Рентабельность продаж'"));
	
	РентабельностьПродаж  = ?(Показатели.Свойство("РентабельностьПродаж_1"), Показатели.РентабельностьПродаж_1, 0);
	СредняяРентабельность = ?(Показатели.Свойство("РентабельностьПродаж3_1"), Показатели.РентабельностьПродаж3_1, 0);
	ПредельнаяРентабельность = ?(Показатели.Свойство("РентабельностьПродаж4_1"), Показатели.РентабельностьПродаж4_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.РентабельностьПродажПояснение.Параметры.Заполнить(Показатели);
		ОбластиМакета.РентабельностьПродажПояснение.Параметры.РентабельностьПродаж = РентабельностьПродаж;
		ТабличныйДокумент.Вывести(ОбластиМакета.РентабельностьПродажПояснение);
	Иначе
		// Диаграмма
		ОбластьРентабельностьПродаж = ?(СредняяРентабельность = 0,
			ОбластиМакета.РентабельностьПродаж0,
			ОбластиМакета.РентабельностьПродаж);
		Если СредняяРентабельность = 0 Тогда
			Диаграмма = ОбластьРентабельностьПродаж.Рисунки.ДиаграммаРентабельностьПродаж0.Объект;
		Иначе
			Диаграмма = ОбластьРентабельностьПродаж.Рисунки.ДиаграммаРентабельностьПродаж.Объект;
			Диаграмма.МинимальноеЗначение = 0;
			МаксимальноеЗначение = СредняяРентабельность * 2 * 100;
			МаксимальноеЗначение = ?(МаксимальноеЗначение > 100, МаксимальноеЗначение - МаксимальноеЗначение % 100,
				?(МаксимальноеЗначение > 10, МаксимальноеЗначение - МаксимальноеЗначение % 10,
				?(МаксимальноеЗначение > 1, Окр(МаксимальноеЗначение, 0),
			МаксимальноеЗначение)));
			Диаграмма.МаксимальноеЗначение = МаксимальноеЗначение;
			Полоса1 = Диаграмма.ПолосыИзмерительнойДиаграммы[0];
			Полоса1.Конец = ПредельнаяРентабельность * 100;
			Полоса2 = Диаграмма.ПолосыИзмерительнойДиаграммы[1];
			Полоса2.Начало = ПредельнаяРентабельность * 100;
			Полоса2.Конец  = СредняяРентабельность * 100;
			Полоса3 = Диаграмма.ПолосыИзмерительнойДиаграммы[2];
			Полоса3.Начало = СредняяРентабельность * 100;
		КонецЕсли;
		ЗначениеТочкиДиаграммы = ?(РентабельностьПродаж * 100 < Диаграмма.МинимальноеЗначение, 
			Диаграмма.МинимальноеЗначение,
			?(РентабельностьПродаж * 100 > Диаграмма.МаксимальноеЗначение, 
			Диаграмма.МаксимальноеЗначение, 
			РентабельностьПродаж * 100));
		ТекстТочкиДиаграммы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Рентабельность продаж %1'"),
			РентабельностьПродаж) + " %";
		Диаграмма.УстановитьЗначение(0, 0, ЗначениеТочкиДиаграммы, , ТекстТочкиДиаграммы);
		
		ОбластьРентабельностьПродаж.Параметры.Заполнить(Показатели);
		ОбластьРентабельностьПродаж.Параметры.РентабельностьПродаж = РентабельностьПродаж;
		Если СредняяРентабельность = 0 Тогда
			УстановитьЦветЯчейкиПоОценке(ОбластьРентабельностьПродаж, "ПояснениеОценкиРентабельностьПродаж0", Показатели.ОценкаРентабельностьПродаж);
		Иначе
			УстановитьЦветЯчейкиПоОценке(ОбластьРентабельностьПродаж, "ПояснениеОценкиРентабельностьПродаж", Показатели.ОценкаРентабельностьПродаж);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьРентабельностьПродаж);
		Если СредняяРентабельность = 0 Тогда
			ТабличныйДокумент.Рисунки.ДиаграммаРентабельностьПродаж0.Объект.ОбластьПостроения.ШкалаЗначений.ФорматПодписей = "ЧС=2;ЧН=";
		Иначе
			ТабличныйДокумент.Рисунки.ДиаграммаРентабельностьПродаж.Объект.ОбластьПостроения.ШкалаЗначений.ФорматПодписей = "ЧС=2;ЧН=";
		КонецЕсли;
		ВывестиОбластьПоказатьРасчет("РезультатРентабельность", "РентабельностьПродажПояснение", ОбластиМакета, ТабличныйДокумент);
		
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "РентабельностьПродажПояснение";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;
	
	// Пояснения
	ТабличныйДокумент.Вывести(ОбластиМакета.РентабельностьПродажПояснения);
	
	Если СредняяРентабельность <> 0 Тогда
		ОбластьГраницы = ОбластиМакета.РентабельностьПродажГраницы;
		ОбластьГраницы.Параметры.СредняяРентабельность = СредняяРентабельность;
		ОбластьГраницы.Параметры.ПредельнаяРентабельность = ПредельнаяРентабельность;
		ТабличныйДокумент.Вывести(ОбластьГраницы);
	КонецЕсли;
	
	ОбластьРасчет = ОбластиМакета.РентабельностьПродажРасчет;
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	
	// Показатели для расчета
	Если ПараметрыВывода.ЭтоПрогноз Тогда
		ОбластьПоказатели = ОбластиМакета.РентабельностьПродажПоказателиПрогноз;
	Иначе
		ОбластьПоказатели = ОбластиМакета.РентабельностьПродажПоказатели;
	КонецЕсли;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	Если ЗначениеЗаполнено(Показатели.ВидДеятельности) Тогда
		ПояснениеРасчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Средняя рентабельность приведена по данным Росстата для вида деятельности ""%1""'"),
			Показатели.ВидДеятельности);
		ОбластьПоказатели.Параметры.ПояснениеРасчета = ПояснениеРасчета;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатРентабельность",
			"РентабельностьПродажПояснение",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделРентабельностьПродукции(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиРентабельностьПродукции;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Рентабельность продукции'"));
	
	РентабельностьПродукции = ?(Показатели.Свойство("РентабельностьПродукции_1"), Показатели.РентабельностьПродукции_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.РентабельностьПродукцииПояснение.Параметры.Заполнить(Показатели);
		ТабличныйДокумент.Вывести(ОбластиМакета.РентабельностьПродукцииПояснение);
	Иначе
		ОбластьМакета = ОбластиМакета.РентабельностьПродукции;
		ОбластьМакета.Параметры.Заполнить(Показатели);
		УстановитьЦветЯчейкиПоОценке(ОбластьМакета, "ПояснениеОценкиРентабельностьПродукции", Показатели.ОценкаРентабельностьПродукции);
		
		// Диаграмма
		СтруктураДиаграммы = НовыйСтруктураДиаграммы();
		СтруктураДиаграммы.ТабличныйДокумент  = ТабличныйДокумент;
		СтруктураДиаграммы.ОбластьМакета      = ОбластьМакета;
		СтруктураДиаграммы.ИмяДиаграммы       = "ДиаграммаРентабельностьПродукции";
		СтруктураДиаграммы.ЗначениеПоказателя = РентабельностьПродукции;
		СтруктураДиаграммы.ГраницыДиаграммы.НижняяГраница  = -10;
		СтруктураДиаграммы.ГраницыДиаграммы.ВерхняяГраница = 20;
		СтруктураДиаграммы.ТекстТочкиДиаграммы = СтрШаблон(НСтр("ru = 'Рентабельность продукции %1%2'"), РентабельностьПродукции, "%");
		
		ВывестиОбластьДиаграмма(СтруктураДиаграммы);
		ВывестиОбластьПоказатьРасчет("РезультатРентабельность", "РентабельностьПродукции", ОбластиМакета, ТабличныйДокумент);
		
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "РентабельностьПродукции";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;

	// Пояснения
	Если Показатели.ОценкаРентабельностьПродукции = ПлохаяОценка() Тогда
		ОбластьРентабельность = ОбластиМакета.РентабельностьПродукцииКрасный;
	ИначеЕсли Показатели.ОценкаРентабельностьПродукции = СредняяОценка() Тогда
		ОбластьРентабельность = ОбластиМакета.РентабельностьПродукцииЖелтый;
	Иначе
		ОбластьРентабельность = ОбластиМакета.РентабельностьПродукцииЗеленый;
	КонецЕсли;
	ОбластьРентабельность.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьРентабельность);
	ТабличныйДокумент.Вывести(ОбластиМакета.РентабельностьПродукцииПояснения);
	
	// Показатели для расчета
	Если ПараметрыВывода.ЭтоПрогноз Тогда
		ОбластьПоказатели = ОбластиМакета.РентабельностьПродукцииРасчетПрогноз;
	Иначе
		ОбластьПоказатели = ОбластиМакета.РентабельностьПродукцииРасчет;
	КонецЕсли;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатРентабельность",
			"РентабельностьПродукции",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделРентабельностьКомпании(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиРентабельностьКомпании;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Рентабельность компании'"));
	
	РентабельностьКомпании = ?(Показатели.Свойство("РентабельностьКомпании_1"), Показатели.РентабельностьКомпании_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.РентабельностьКомпанииПояснение.Параметры.Заполнить(Показатели);
		ТабличныйДокумент.Вывести(ОбластиМакета.РентабельностьКомпанииПояснение);
	Иначе
		ОбластьМакета = ОбластиМакета.РентабельностьКомпании;
		ОбластьМакета.Параметры.Заполнить(Показатели);
		УстановитьЦветЯчейкиПоОценке(ОбластьМакета, "ПояснениеОценкиРентабельностьКомпании", Показатели.ОценкаРентабельностьКомпании);
		
		// Диаграмма
		СтруктураДиаграммы = НовыйСтруктураДиаграммы();
		СтруктураДиаграммы.ТабличныйДокумент  = ТабличныйДокумент;
		СтруктураДиаграммы.ОбластьМакета      = ОбластьМакета;
		СтруктураДиаграммы.ИмяДиаграммы       = "ДиаграммаРентабельностьКомпании";
		СтруктураДиаграммы.ЗначениеПоказателя = РентабельностьКомпании;
		СтруктураДиаграммы.ГраницыДиаграммы.НижняяГраница  = -10;
		СтруктураДиаграммы.ГраницыДиаграммы.ВерхняяГраница = 30;
		СтруктураДиаграммы.ТекстТочкиДиаграммы = СтрШаблон(НСтр("ru = 'Рентабельность компании %1%2'"), РентабельностьКомпании, "%");
		
		ВывестиОбластьДиаграмма(СтруктураДиаграммы);
		ВывестиОбластьПоказатьРасчет("РезультатРентабельность", "РентабельностьКомпании", ОбластиМакета, ТабличныйДокумент);
		
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "РентабельностьКомпании";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;
	
	// Пояснения
	Если Показатели.ОценкаРентабельностьКомпании = ПлохаяОценка() Тогда
		ОбластьРентабельность = ОбластиМакета.РентабельностьКомпанииКрасный;
	ИначеЕсли Показатели.ОценкаРентабельностьКомпании = СредняяОценка() Тогда
		ОбластьРентабельность = ОбластиМакета.РентабельностьКомпанииЖелтый;
	Иначе
		ОбластьРентабельность = ОбластиМакета.РентабельностьКомпанииЗеленый;
	КонецЕсли;
	ОбластьРентабельность.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьРентабельность);
	ТабличныйДокумент.Вывести(ОбластиМакета.РентабельностьКомпанииПояснения);
	
	// Показатели для расчета
	Если ПараметрыВывода.ЭтоПрогноз Тогда
		ОбластьПоказатели = ОбластиМакета.РентабельностьКомпанииРасчетПрогноз;
	Иначе
		ОбластьПоказатели = ОбластиМакета.РентабельностьКомпанииРасчет;
	КонецЕсли;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатРентабельность",
			"РентабельностьКомпании",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоказателиРентабельностьАктивов(Показатели, СтрокаОтчетности, ДанныеФинансовогоАнализа)
	
	Показатели.Вставить("ОценкаРентабельностьАктивов", "");
	Показатели.Вставить("ПояснениеОценкиРентабельностьАктивов", "");
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	ДанныеПоГодам = ДанныеФинансовогоАнализа.ДанныеПоГодам;
	
	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		// Чистая прибыль
		ИмяПоказателя = "РентабельностьАктивов1_" + НомерГода;
		ЧистаяПрибыль = ДанныеОтчетности["П2400_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, ЧистаяПрибыль);
		// Активы
		ИмяПоказателя = "РентабельностьАктивов2_" + НомерГода;
		Активы = ДанныеОтчетности["П1600_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, Активы);
		// Средняя цифра по отрасли
		РентабельностьПоОтрасли = СредняяРентабельностьАктивовПоОтрасли(ДанныеФинансовогоАнализа.ВидыДеятельности, ДанныеГода.Год);
		ИмяПоказателя = "РентабельностьАктивов3_" + НомерГода;
		СредняяРентабельность = РентабельностьПоОтрасли.Рентабельность;
		Показатели.Вставить(ИмяПоказателя, СредняяРентабельность);
		Показатели.Вставить("ВидДеятельности", РентабельностьПоОтрасли.ВидДеятельности);
		// 90% от средней
		ИмяПоказателя = "РентабельностьАктивов4_" + НомерГода;
		ПредельнаяРентабельность = Окр(0.9 * СредняяРентабельность, 2);
		Показатели.Вставить(ИмяПоказателя, ПредельнаяРентабельность);
		// Рентабельность контрагента
		ИмяПоказателя = "РентабельностьАктивов_" + НомерГода;
		РентабельностьАктивов = ?(Активы = 0, 0, Окр(ЧистаяПрибыль / Активы * 100, 2));
		Показатели.Вставить(ИмяПоказателя, РентабельностьАктивов);
		
		Если НомерГода = "1" Тогда
			ОценкаРентабельностьАктивов = ?(РентабельностьАктивов < ПредельнаяРентабельность, ПлохаяОценка(), 
				?(РентабельностьАктивов <= СредняяРентабельность, СредняяОценка(), ХорошаяОценка()));
			Показатели.ОценкаРентабельностьАктивов = ОценкаРентабельностьАктивов;
			Если ОценкаРентабельностьАктивов = ПлохаяОценка() Тогда
				Показатели.ПояснениеОценкиРентабельностьАктивов = ?(СредняяРентабельность = 0, 
					НСтр("ru='Низкая рентабельность активов'"),
					НСтр("ru='Значительно ниже средней по отрасли'"));
			ИначеЕсли ОценкаРентабельностьАктивов = СредняяОценка() Тогда
				Показатели.ПояснениеОценкиРентабельностьАктивов = ?(СредняяРентабельность = 0, 
					НСтр("ru='Средняя рентабельность активов'"),
					НСтр("ru='Немного ниже средней по отрасли'"));
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиРентабельностьАктивов = ?(СредняяРентабельность = 0, 
					НСтр("ru='Высокая рентабельность активов'"),
					НСтр("ru='Выше средней по отрасли'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиРентабельностьПродаж(Показатели, СтрокаОтчетности, ДанныеФинансовогоАнализа)
	
	Показатели.Вставить("ОценкаРентабельностьПродаж", "");
	Показатели.Вставить("ПояснениеОценкиРентабельностьПродаж", "");
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	ДанныеПоГодам = ДанныеФинансовогоАнализа.ДанныеПоГодам;
	
	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		// Прибыль от продаж
		ИмяПоказателя = "РентабельностьПродаж1_" + НомерГода;
		ПрибыльОтПродаж = ДанныеОтчетности["П2200_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, ПрибыльОтПродаж);
		// Себестоимость продаж
		ИмяПоказателя = "РентабельностьПродаж2_" + НомерГода;
		Себестоимость = -(ДанныеОтчетности["П2120_" + НомерГода]
			+ ДанныеОтчетности["П2210_" + НомерГода]
			+ ДанныеОтчетности["П2220_" + НомерГода]);
		Показатели.Вставить(ИмяПоказателя,Себестоимость);
		// Средняя цифра по отрасли
		РентабельностьПоОтрасли = СредняяРентабельностьПродажПоОтрасли(ДанныеФинансовогоАнализа.ВидыДеятельности, ДанныеГода.Год);
		ИмяПоказателя = "РентабельностьПродаж3_" + НомерГода;
		СредняяРентабельность = РентабельностьПоОтрасли.Рентабельность;
		Показатели.Вставить(ИмяПоказателя, СредняяРентабельность);
		Показатели.Вставить("ВидДеятельности", РентабельностьПоОтрасли.ВидДеятельности);
		// 90% от средней
		ИмяПоказателя = "РентабельностьПродаж4_" + НомерГода;
		ПредельнаяРентабельность = Окр(0.9 * СредняяРентабельность, 2);
		Показатели.Вставить(ИмяПоказателя, ПредельнаяРентабельность);
		// Рентабельность контрагента
		ИмяПоказателя = "РентабельностьПродаж_" + НомерГода;
		РентабельностьПродаж = ?(Себестоимость = 0, 0, Окр(ПрибыльОтПродаж / Себестоимость * 100, 2));
		Показатели.Вставить(ИмяПоказателя, РентабельностьПродаж);
		
		Если НомерГода = "1" Тогда
			ОценкаРентабельностьПродаж = ?(РентабельностьПродаж < ПредельнаяРентабельность, ПлохаяОценка(),
				?(РентабельностьПродаж <= СредняяРентабельность, СредняяОценка(), ХорошаяОценка()));
			Показатели.ОценкаРентабельностьПродаж = ОценкаРентабельностьПродаж;
			Если ОценкаРентабельностьПродаж = ПлохаяОценка() Тогда
				Показатели.ПояснениеОценкиРентабельностьПродаж = ?(СредняяРентабельность = 0, 
					НСтр("ru='Низкая рентабельность продаж'"), 
					НСтр("ru='Значительно ниже средней по отрасли'"));
			ИначеЕсли ОценкаРентабельностьПродаж = СредняяОценка() Тогда
				Показатели.ПояснениеОценкиРентабельностьПродаж = ?(СредняяРентабельность = 0, 
					НСтр("ru='Средняя рентабельность продаж'"),
					НСтр("ru='Немного ниже средней по отрасли'"));
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиРентабельностьПродаж = ?(СредняяРентабельность = 0, 
					НСтр("ru='Высокая рентабельность продаж'"),
					НСтр("ru='Выше средней по отрасли'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиРентабельностьПродукции(Показатели, СтрокаОтчетности, ДанныеФинансовогоАнализа)
	
	Показатели.Вставить("ОценкаРентабельностьПродукции", "");
	Показатели.Вставить("ПояснениеОценкиРентабельностьПродукции", "");
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	ДанныеПоГодам = ДанныеФинансовогоАнализа.ДанныеПоГодам;

	ПоказателиПоясненияРасчета = Новый Структура;
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "Прибыль", "2200");
	ДобавитьВСтруктуруМассивПоказателей(ПоказателиПоясненияРасчета, "Выручка", "2110");
	РассчитатьПоказатели(ПоказателиПоясненияРасчета, Показатели, ДанныеПоГодам, ДанныеОтчетности);
	
	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		// Рентабельность продукции
		Выручка = Показатели["Выручка_" + НомерГода];
		ПрибыльОтПродаж = Показатели["Прибыль_" + НомерГода];
		
		ИмяПоказателя = "РентабельностьПродукции_" + НомерГода;
		РентабельностьПродукции = ?(Выручка = 0, 0, Окр(ПрибыльОтПродаж / Выручка * 100, 2));
		Показатели.Вставить(ИмяПоказателя, РентабельностьПродукции);
	КонецЦикла;
	
	ОценкаРентабельностьПродукции = ?(Показатели.РентабельностьПродукции_1 < 0, ПлохаяОценка(), 
		?(Показатели.РентабельностьПродукции_1 <= 6, СредняяОценка(), ХорошаяОценка()));

	Показатели.ОценкаРентабельностьПродукции = ОценкаРентабельностьПродукции;
	Если ОценкаРентабельностьПродукции = ПлохаяОценка() Тогда
		Показатели.ПояснениеОценкиРентабельностьПродукции = НСтр("ru='Низкая рентабельность продукции'"); 
	ИначеЕсли ОценкаРентабельностьПродукции = СредняяОценка() Тогда
		Показатели.ПояснениеОценкиРентабельностьПродукции = НСтр("ru='Средняя рентабельность продукции'");
	Иначе // "ХорошаяОценка"
		Показатели.ПояснениеОценкиРентабельностьПродукции = НСтр("ru='Высокая рентабельность продукции'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоказателиРентабельностьКомпании(Показатели, СтрокаОтчетности, ДанныеФинансовогоАнализа)
	
	Показатели.Вставить("ОценкаРентабельностьКомпании", "");
	Показатели.Вставить("ПояснениеОценкиРентабельностьКомпании", "");
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	ДанныеПоГодам = ДанныеФинансовогоАнализа.ДанныеПоГодам;
	
	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		// Прибыль от продаж
		ИмяПоказателя = "ЧистаяПрибыль_" + НомерГода;
		ЧистаяПрибыль = ДанныеОтчетности["П2400_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, ЧистаяПрибыль);
		// Выручка
		ИмяПоказателя = "Выручка_" + НомерГода;
		Выручка = ДанныеОтчетности["П2110_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, Выручка);
		// Рентабельность продукции
		ИмяПоказателя = "РентабельностьКомпании_" + НомерГода;
		РентабельностьКомпании = ?(Выручка = 0, 0, Окр(ЧистаяПрибыль / Выручка * 100, 2));
		Показатели.Вставить(ИмяПоказателя, РентабельностьКомпании);
		
		Если НомерГода = "1" Тогда
			ОценкаРентабельностьКомпании = ?(РентабельностьКомпании < 0, ПлохаяОценка(), 
				?(РентабельностьКомпании <= 10, СредняяОценка(), ХорошаяОценка()));
			Показатели.ОценкаРентабельностьКомпании = ОценкаРентабельностьКомпании;
			Если ОценкаРентабельностьКомпании = ПлохаяОценка() Тогда
				Показатели.ПояснениеОценкиРентабельностьКомпании = НСтр("ru='Низкая рентабельность компании'"); 
			ИначеЕсли ОценкаРентабельностьКомпании = СредняяОценка() Тогда
				Показатели.ПояснениеОценкиРентабельностьКомпании = НСтр("ru='Средняя рентабельность компании'"); 
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиРентабельностьКомпании = НСтр("ru='Высокая рентабельность компании'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Оценки

Процедура ВывестиОценки(ТабличныйДокумент, ДанныеФинансовогоАнализа, ОбластиРасшифровки, ЭтоОсновнаяФормаОтчета = Истина)

	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиМакета",      ВсеОбластиМакета("Оценки"));
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("СтруктураГодов",     ДанныеФинансовогоАнализа.СтруктураГодов);
	ПараметрыВывода.Вставить("ЭтоПрогноз",         ДанныеФинансовогоАнализа.ЭтоПрогноз);
	
	ОбластьШапка = ПараметрыВывода.ОбластиМакета.Шапка;
	ОбластьШапка.Параметры.ТекстЗаголовка = НСтр("ru='Оценки'");
	ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.Шапка);
	
	Если ДанныеФинансовогоАнализа.ФинансовыйАнализ.Количество() = 0 Тогда
		ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.АнализНеПроведенНетОтчетности);
	Иначе
		СтрокаТаблицы = ДанныеФинансовогоАнализа.ФинансовыйАнализ[0];
		
		ВывестиРазделРискБанкротства(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		ВывестиРазделКредитоспособность(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, ЭтоОсновнаяФормаОтчета);
		
		Если ЭтоОсновнаяФормаОтчета Тогда
			ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатОценки", "ИмяДокумента");
			Для Каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
				НоваяСтрока = ОбластиРасшифровки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделРискБанкротства(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиРискБанкротства;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Оценка риска банкротства'"));
	
	ИндексАльтмана = ?(Показатели.Свойство("ИндексАльтмана_1"), Показатели.ИндексАльтмана_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.РискБанкротстваПояснение.Параметры.Заполнить(Показатели);
		ОбластиМакета.РискБанкротстваПояснение.Параметры.ИндексАльтмана = ИндексАльтмана;
		ОбластиМакета.РискБанкротстваПояснение.Параметры.ПояснениеОценкиРискБанкротства = Показатели.ПояснениеОценкиРискБанкротства;
		ТабличныйДокумент.Вывести(ОбластиМакета.РискБанкротстваПояснение);
	Иначе
		// Диаграмма
		Диаграмма = ОбластиМакета.РискБанкротства.Рисунки.ДиаграммаРискБанкротства.Объект;
		Если НЕ Показатели.ПятиФакторнаяМодель Тогда
			Полоса1 = Диаграмма.ПолосыИзмерительнойДиаграммы[0];
			Полоса1.Конец = 110;
			Полоса2 = Диаграмма.ПолосыИзмерительнойДиаграммы[1];
			Полоса2.Начало = 110;
			Полоса2.Конец  = 260;
			Полоса3 = Диаграмма.ПолосыИзмерительнойДиаграммы[2];
			Полоса3.Начало = 260;
		КонецЕсли;
		ЗначениеТочкиДиаграммы = ?(ИндексАльтмана < 0, 0, ?(ИндексАльтмана > 5, 500, ИндексАльтмана * 100));
		ТекстТочкиДиаграммы    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Индекс Альтмана Z = %1'"),
			ИндексАльтмана);
		Диаграмма.УстановитьЗначение(0, 0, ЗначениеТочкиДиаграммы, , ТекстТочкиДиаграммы);
		
		ОбластиМакета.РискБанкротства.Параметры.Заполнить(Показатели);
		ОбластиМакета.РискБанкротства.Параметры.ИндексАльтмана = ИндексАльтмана;
		УстановитьЦветЯчейкиПоОценке(ОбластиМакета.РискБанкротства, "ПояснениеОценкиРискБанкротства", Показатели.ОценкаРискБанкротства);
	
		ТабличныйДокумент.Вывести(ОбластиМакета.РискБанкротства);
		ТабличныйДокумент.Рисунки.ДиаграммаРискБанкротства.Объект.ОбластьПостроения.ШкалаЗначений.ФорматПодписей = "ЧС=2;ЧН=";
		ВывестиОбластьПоказатьРасчет("РезультатОценки", "РискБанкротстваПояснение",ОбластиМакета, ТабличныйДокумент);
		
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "РискБанкротстваПояснение";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;
	
	// Пояснения
	ОбластьРасчет = ?(Показатели.ПятиФакторнаяМодель, 
		ОбластиМакета.РискБанкротстваРасчетПроизводство, 
		ОбластиМакета.РискБанкротстваРасчет);
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	// Показатели для расчета
	ОбластьПоказатели = ?(Показатели.ПятиФакторнаяМодель, 
		ОбластиМакета.РискБанкротстваПоказателиПроизводство, 
		ОбластиМакета.РискБанкротстваПоказатели);
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатОценки",
			"РискБанкротстваПояснение",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиРазделКредитоспособность(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода, ЭтоОсновнаяФормаОтчета)
	
	Показатели    = СтрокаДанных.ПоказателиКредитоспособность;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ВывестиШапкуПоказателя(ТабличныйДокумент, ОбластиМакета.ШапкаПоказателя, НСтр("ru='Кредитоспособность'"));
	
	Кредитоспособность = ?(Показатели.Свойство("Кредитоспособность_1"), Показатели.Кредитоспособность_1, 0);
	Если НЕ ЭтоОсновнаяФормаОтчета Тогда
		ОбластиМакета.КредитоспособностьПояснение.Параметры.Заполнить(Показатели);
		ОбластиМакета.КредитоспособностьПояснение.Параметры.Кредитоспособность = Кредитоспособность;
		ТабличныйДокумент.Вывести(ОбластиМакета.КредитоспособностьПояснение);
	Иначе
		ОбластьМакета = ОбластиМакета.Кредитоспособность;
		ОбластьМакета.Параметры.Кредитоспособность = Кредитоспособность;
		ОбластьМакета.Параметры.Заполнить(Показатели);
		УстановитьЦветЯчейкиПоОценке(ОбластьМакета,
			"ПояснениеОценкиКредитоспособность",
			Показатели.ОценкаКредитоспособность);
		
		// Диаграмма
		СтруктураДиаграммы = НовыйСтруктураДиаграммы();
		СтруктураДиаграммы.ТабличныйДокумент  = ТабличныйДокумент;
		СтруктураДиаграммы.ОбластьМакета      = ОбластьМакета;
		СтруктураДиаграммы.ИмяДиаграммы       = "ДиаграммаКредитоспособность";
		СтруктураДиаграммы.ЗначениеПоказателя = Кредитоспособность;
		СтруктураДиаграммы.ГраницыДиаграммы.НижняяГраница  = 1;
		СтруктураДиаграммы.ГраницыДиаграммы.ВерхняяГраница = 3;
		СтруктураДиаграммы.ТекстТочкиДиаграммы = СтрШаблон(НСтр("ru = 'Оценка кредитоспособности S = %1'"), Кредитоспособность);
		
		ВывестиОбластьДиаграмма(СтруктураДиаграммы);
		ВывестиОбластьПоказатьРасчет("РезультатОценки", "КредитоспособностьПояснение", ОбластиМакета, ТабличныйДокумент);
		
		СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "КредитоспособностьПояснение";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	КонецЕсли;

	// Пояснения
	ОбластьРасчет = ОбластиМакета.КредитоспособностьРасчет;
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	
	// Показатели для расчета
	Если ПараметрыВывода.ЭтоПрогноз Тогда
		ОбластьПоказатели = ОбластиМакета.КредитоспособностьПоказателиПрогноз;
	Иначе
		ОбластьПоказатели = ОбластиМакета.КредитоспособностьПоказатели;
	КонецЕсли;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	
	Если ЭтоОсновнаяФормаОтчета Тогда
		СкрытьРасчет(
			"РезультатОценки",
			"КредитоспособностьПояснение",
			ОбластиМакета,
			СтрокаОбласти,
			ТабличныйДокумент);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьПоказателиРискБанкротства(Показатели, СтрокаОтчетности, ДанныеФинансовогоАнализа)
	
	Показатели.Вставить("ОценкаРискБанкротства", "");
	Показатели.Вставить("ПояснениеОценкиРискБанкротства", "");
	
	РасчетПоказателей = Новый Структура;
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "РискБанкротства1", "1300;1400;-1100", "1600");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "РискБанкротства2", "1370",            "1600");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "РискБанкротства3", "2300;2330",       "1600");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "РискБанкротства4", "1300",            "1400;1500");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "РискБанкротства5", "2110",            "1600");
	
	Показатели.Вставить("ПятиФакторнаяМодель", ЭтоПроизводственноеПредприятие(ДанныеФинансовогоАнализа.ВидыДеятельности));
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	ДанныеПоГодам = ДанныеФинансовогоАнализа.ДанныеПоГодам;
	
	РассчитатьПоказателиДеление(РасчетПоказателей, Показатели, ДанныеПоГодам, ДанныеОтчетности);
	
	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		Если Показатели.ПятиФакторнаяМодель Тогда
			ИндексАльтмана = Окр(0.717 * Показатели["РискБанкротства1_" + НомерГода]
				+ 0.847 * Показатели["РискБанкротства2_" + НомерГода]
				+ 3.107 * Показатели["РискБанкротства3_" + НомерГода]
				+ 0.42  * Показатели["РискБанкротства4_" + НомерГода]
				+ 0.995 * Показатели["РискБанкротства5_" + НомерГода], 3);
		Иначе
			ИндексАльтмана = Окр(6.56 * Показатели["РискБанкротства1_" + НомерГода]
				+ 3.26 * Показатели["РискБанкротства2_" + НомерГода]
				+ 6.72 * Показатели["РискБанкротства3_" + НомерГода]
				+ 1.05 * Показатели["РискБанкротства4_" + НомерГода], 3);
		КонецЕсли;
		Показатели.Вставить("ИндексАльтмана_" + НомерГода, ИндексАльтмана);
	КонецЦикла;
	
	Если Показатели.ПятиФакторнаяМодель Тогда
		ОценкаРискБанкротства = ?(Показатели.ИндексАльтмана_1 >= 2.9, ХорошаяОценка(),
			?(Показатели.ИндексАльтмана_1 > 1.23, СредняяОценка(), ПлохаяОценка()));
	Иначе
		ОценкаРискБанкротства = ?(Показатели.ИндексАльтмана_1 >= 2.6, ХорошаяОценка(),
			?(Показатели.ИндексАльтмана_1 > 1.1, СредняяОценка(), ПлохаяОценка()));
	КонецЕсли;
	Показатели.ОценкаРискБанкротства = ОценкаРискБанкротства;
	Если ОценкаРискБанкротства = ПлохаяОценка() Тогда
		Показатели.ПояснениеОценкиРискБанкротства = НСтр("ru='Высокий риск банкротства'");
	ИначеЕсли ОценкаРискБанкротства = СредняяОценка() Тогда
		Показатели.ПояснениеОценкиРискБанкротства = НСтр("ru='Вероятность банкротства невысока'");
	Иначе // "ХорошаяОценка"
		Показатели.ПояснениеОценкиРискБанкротства = НСтр("ru='Устойчивое финансовое состояние'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоказателиКредитоспособность(Показатели, СтрокаОтчетности, ДанныеФинансовогоАнализа)
	
	Показатели.Вставить("ОценкаКредитоспособность", "");
	Показатели.Вставить("ПояснениеОценкиКредитоспособность", "");
	
	РасчетПоказателей = Новый Структура;
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "Кредитоспособность1", "1250",           "1510;1520;1550");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "Кредитоспособность2", "1230;1240;1250", "1510;1520;1550");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "Кредитоспособность3", "1200",           "1510;1520;1550");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "Кредитоспособность4", "1300;1530;1540", "1700");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "Кредитоспособность5", "2200",           "2110");
	ДобавитьРасчетПоказателяДеление(РасчетПоказателей, "Кредитоспособность6", "2400",           "2110");
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	
	РассчитатьПоказателиДеление(РасчетПоказателей, Показатели, ДанныеФинансовогоАнализа.ДанныеПоГодам, ДанныеОтчетности);
	
	Показатели.Вставить("КредитоспособностьВесКатегории1", 0.05);
	Показатели.Вставить("КредитоспособностьВесКатегории2", 0.1);
	Показатели.Вставить("КредитоспособностьВесКатегории3", 0.4);
	Показатели.Вставить("КредитоспособностьВесКатегории4", 0.2);
	Показатели.Вставить("КредитоспособностьВесКатегории5", 0.15);
	Показатели.Вставить("КредитоспособностьВесКатегории6", 0.1);
	
	Для Каждого ДанныеГода Из ДанныеФинансовогоАнализа.ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		
		Кредитоспособность1 = Показатели["Кредитоспособность1_" + НомерГода];
		Категория1 = ?(Кредитоспособность1 >= 0.1, 1, ?(Кредитоспособность1 >= 0.05, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория1_" + НомерГода, Категория1);
		
		Кредитоспособность2 = Показатели["Кредитоспособность2_" + НомерГода];
		Категория2 = ?(Кредитоспособность2 >= 0.8, 1, ?(Кредитоспособность2 >= 0.5, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория2_" + НомерГода, Категория2);
		
		Кредитоспособность3 = Показатели["Кредитоспособность3_" + НомерГода];
		Категория3 = ?(Кредитоспособность3 >= 1.5, 1, ?(Кредитоспособность3 >= 1, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория3_" + НомерГода, Категория3);
		
		Кредитоспособность4 = Показатели["Кредитоспособность4_" + НомерГода];
		Если ДанныеФинансовогоАнализа.ЭтоТорговля Тогда
			Категория4 = ?(Кредитоспособность4 >= 0.25, 1, ?(Кредитоспособность4 >= 0.15, 2, 3));
		Иначе
			Категория4 = ?(Кредитоспособность4 >= 0.4, 1, ?(Кредитоспособность4 >= 0.25, 2, 3));
		КонецЕсли;
		Показатели.Вставить("КредитоспособностьКатегория4_" + НомерГода, Категория4);
		
		Кредитоспособность5 = Показатели["Кредитоспособность5_" + НомерГода];
		Категория5 = ?(Кредитоспособность5 >= 0.1, 1, ?(Кредитоспособность5 >= 0, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория5_" + НомерГода, Категория5);
		
		Кредитоспособность6 = Показатели["Кредитоспособность6_" + НомерГода];
		Категория6 = ?(Кредитоспособность6 >= 0.06, 1, ?(Кредитоспособность6 >= 0, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория6_" + НомерГода, Категория6);
		
		Кредитоспособность = 0;
		Для Номер = 1 По 6 Цикл
			Категория    = Показатели["КредитоспособностьКатегория" + Номер + "_" + НомерГода];
			ВесКатегории = Показатели["КредитоспособностьВесКатегории" + Номер];
			Кредитоспособность = Кредитоспособность + Категория * ВесКатегории;
		КонецЦикла;
		Кредитоспособность = Окр(Кредитоспособность, 2);
		Показатели.Вставить("Кредитоспособность_" + НомерГода, Кредитоспособность);
	КонецЦикла;
	
	ОценкаКредитоспособность = ?(Показатели.Кредитоспособность_1 <= 1.25, ХорошаяОценка(), 
		?(Показатели.Кредитоспособность_1 <= 2.35, СредняяОценка(), ПлохаяОценка()));
	Показатели.ОценкаКредитоспособность = ОценкаКредитоспособность;
	Если ОценкаКредитоспособность = ПлохаяОценка() Тогда
		Показатели.ПояснениеОценкиКредитоспособность = НСтр("ru='Кредитование связано с повышенным риском'");
	ИначеЕсли ОценкаКредитоспособность = СредняяОценка() Тогда
		Показатели.ПояснениеОценкиКредитоспособность = НСтр("ru='Кредитование требует взвешенного подхода'");
	Иначе // "ХорошаяОценка"
		Показатели.ПояснениеОценкиКредитоспособность = НСтр("ru='Кредитоспособность не вызывает сомнений'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура РассчитатьПоказателиДеление(РасчетПоказателей, Показатели, ДанныеПоГодам, ДанныеОтчетности)

	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		Для Каждого РасчетПоказателя Из РасчетПоказателей Цикл
			ИмяПоказателя = РасчетПоказателя.Ключ + "_" + НомерГода;
			ЗначениеЧислителя = 0;
			Для Каждого ЭлементРасчета Из РасчетПоказателя.Значение.Числитель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЧислителя = ЗначениеЧислителя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеЗнаменателя = 0;
			Для Каждого ЭлементРасчета Из РасчетПоказателя.Значение.Знаменатель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЗнаменателя = ЗначениеЗнаменателя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеПоказателя = ?(ЗначениеЗнаменателя = 0, 0, Окр(ЗначениеЧислителя / ЗначениеЗнаменателя, 3));
			Показатели.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьПоказатели(ПоказателиПоясненияРасчета, Показатели, ДанныеПоГодам, ДанныеОтчетности)

	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		Для Каждого ПоказательПоясненияРасчета Из ПоказателиПоясненияРасчета Цикл
			ИмяПоказателя = СтрШаблон("%1_%2", ПоказательПоясненияРасчета.Ключ, НомерГода);
			ЗначениеПоказателя = 0;
			Для Каждого ЭлементПоказателя Из ПоказательПоясненияРасчета.Значение Цикл
				Множитель = ?(Лев(ЭлементПоказателя, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементПоказателя, "-", "") + "_" + НомерГода;
				ЗначениеПоказателя = ЗначениеПоказателя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			Показатели.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьРасчетПоказателяДеление(РасчетПоказателей, ИмяПоказателя, Числитель, Знаменатель)
	
	// Ключ - код для вывода в отчет, значение - числитель и знаменатель, 
	// каждый из которых - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	СтруктураРасчета = Новый Структура;
	СтруктураРасчета.Вставить("Числитель", СтрРазделить(Числитель, ";", Ложь));
	СтруктураРасчета.Вставить("Знаменатель", СтрРазделить(Знаменатель, ";", Ложь));
	
	РасчетПоказателей.Вставить(ИмяПоказателя, СтруктураРасчета);

КонецПроцедуры

Процедура ДобавитьВСтруктуруМассивПоказателей(СтруктураПоказателей, ИмяПоказателя, Расчет)

	// Ключ - код для вывода в отчет, значение - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	СтруктураПоказателей.Вставить(ИмяПоказателя, СтрРазделить(Расчет, ";"));

КонецПроцедуры

Функция ЭтоПроизводственноеПредприятие(ВидыДеятельности)
	
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОсновнойКодОКВЭД = ВидыДеятельности[0].КодОКВЭД;
	Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
		ПроизводственныеКоды = СтрРазделить(
			"10;12;13;14;15;16;17;19;08.92.2;20;21;22;23;24;25;26;27;28;29;30;31;32;33;35", ";", Ложь);
	Иначе
		ПроизводственныеКоды = СтрРазделить(
			"15;16;17;18;19;20;21;23;24;25;26;27;28;29;30;31;32;33;34;35;36;40", ";", Ложь);
	КонецЕсли;
	
	Для каждого ПроизводственныйКод Из ПроизводственныеКоды Цикл
	    Если Лев(ОсновнойКодОКВЭД, СтрДлина(ПроизводственныйКод)) = ПроизводственныйКод Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ЭтоТорговоеПредприятие(ВидыДеятельности)
	
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОсновнойКодОКВЭД = ВидыДеятельности[0].КодОКВЭД;
	Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
		ТорговыеКоды = СтрРазделить("45;46;47;64.91", ";", Ложь);
	Иначе
		ТорговыеКоды = СтрРазделить("50;51;52;65.21", ";", Ложь);
	КонецЕсли;
	
	Для Каждого ТорговыйКод Из ТорговыеКоды Цикл
		Если Лев(ОсновнойКодОКВЭД, СтрДлина(ТорговыйКод)) = ТорговыйКод Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Функция СредняяРентабельностьАктивовПоОтрасли(ВидыДеятельности, Год)
	
	Если Число(Год) > 2018 Тогда
		ИскомыйГод = "2018";
	ИначеЕсли Число(Год) < 2010 Тогда
		ИскомыйГод = "2010";
	Иначе
		ИскомыйГод = Год;
	КонецЕсли;
		
	Результат = Новый Структура("ВидДеятельности,Рентабельность", Неопределено, 0);
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИспользоватьОКВЭД2 = Число(Год) >= 2017;
	Если ИспользоватьОКВЭД2 Тогда
		Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
			ОсновнойКодОКВЭД = ВидыДеятельности[0].КодОКВЭД;
		Иначе
			ОсновнойКодОКВЭД = "";
		КонецЕсли;
	Иначе
		Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
			ОсновнойКодОКВЭД = ГруппаРентабельностиПоКодуОКВЭД2(ВидыДеятельности[0].КодОКВЭД);
		Иначе
			ОсновнойКодОКВЭД = ВидыДеятельности[0].КодОКВЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОсновнойКодОКВЭД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ИспользоватьОКВЭД2 Тогда
		Макет = ПолучитьОбщийМакет("ПредельныеЗначенияРентабельностиИНалоговойНагрузки2017");
	Иначе
		Макет = ПолучитьОбщийМакет("ПредельныеЗначенияРентабельностиИНалоговойНагрузки");
	КонецЕсли;
	
	Результат.ВидДеятельности = ВидыДеятельности[0].НаименованиеОКВЭД;
	
	ОбластьСтроки = Неопределено;
	ОбластьКлассификаторов = Макет.Область("Классификатор");
	ВозможныеКодыОКВЭД = ИерархияКодовОКВЭД(ОсновнойКодОКВЭД);
	Для каждого ВозможныйКодОКВЭД Из ВозможныеКодыОКВЭД Цикл
		ОбластьСтроки = Макет.НайтиТекст(ВозможныйКодОКВЭД, , ОбластьКлассификаторов, Ложь, Истина);
		Если ОбластьСтроки <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОбластьСтроки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НомерСтроки   = ОбластьСтроки.Верх;
	
	ОбластьРентабельностьАктивов = Макет.Область("РентабельностьАктивов");
	ОбластьКолонки = Макет.НайтиТекст(ИскомыйГод, , ОбластьРентабельностьАктивов, , Истина);
	НомерКолонки   = ОбластьКолонки.Лево;
	Результат.Рентабельность = Число(Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст);
	
	Возврат Результат;

КонецФункции

Функция ГруппаРентабельностиПоКодуОКВЭД2(КодОКВЭД2)
	
	// Ключ - код ОКВЭД или группа редакции 2, значение - группа редакции 1.
	СоответствиеКодов = Новый Соответствие; 
	СоответствиеКодов.Вставить("01",      "01");
	СоответствиеКодов.Вставить("02",      "01");
	СоответствиеКодов.Вставить("03",      "05");
	СоответствиеКодов.Вставить("05",      "10");
	СоответствиеКодов.Вставить("06",      "10");
	СоответствиеКодов.Вставить("07",      "13");
	СоответствиеКодов.Вставить("07.21",   "10");
	СоответствиеКодов.Вставить("08",      "13");
	СоответствиеКодов.Вставить("08.92",   "10");
	СоответствиеКодов.Вставить("09.1",    "10");
	СоответствиеКодов.Вставить("09.9",    "13");
	СоответствиеКодов.Вставить("10",      "15");
	СоответствиеКодов.Вставить("11",      "15");
	СоответствиеКодов.Вставить("12",      "15");
	СоответствиеКодов.Вставить("13",      "17");
	СоответствиеКодов.Вставить("14",      "17");
	СоответствиеКодов.Вставить("15",      "19");
	СоответствиеКодов.Вставить("15.11.1", "17");
	СоответствиеКодов.Вставить("16",      "20");
	СоответствиеКодов.Вставить("17",      "21");
	СоответствиеКодов.Вставить("18",      "22");
	СоответствиеКодов.Вставить("19",      "23");
	СоответствиеКодов.Вставить("20",      "24");
	СоответствиеКодов.Вставить("21",      "24");
	СоответствиеКодов.Вставить("22",      "25");
	СоответствиеКодов.Вставить("23",      "26");
	СоответствиеКодов.Вставить("24",      "27");
	СоответствиеКодов.Вставить("24.46",   "23");
	СоответствиеКодов.Вставить("25",      "28");
	СоответствиеКодов.Вставить("25.4",    "29");
	СоответствиеКодов.Вставить("26",      "32");
	СоответствиеКодов.Вставить("26.80",   "24");
	СоответствиеКодов.Вставить("27",      "30");
	СоответствиеКодов.Вставить("27.5",    "29");
	СоответствиеКодов.Вставить("28",      "29");
	СоответствиеКодов.Вставить("28.23",   "30");
	СоответствиеКодов.Вставить("28.99.3", "34");
	СоответствиеКодов.Вставить("29",      "34");
	СоответствиеКодов.Вставить("30",      "34");
	СоответствиеКодов.Вставить("31",      "36");
	СоответствиеКодов.Вставить("32",      "30");
	СоответствиеКодов.Вставить("32.20.9", "95");
	СоответствиеКодов.Вставить("32.30.9", "95");
	СоответствиеКодов.Вставить("33",      "29");
	СоответствиеКодов.Вставить("33.1",    "28");
	СоответствиеКодов.Вставить("33.11",   "28");
	СоответствиеКодов.Вставить("33.12",   "28");
	СоответствиеКодов.Вставить("33.13",   "30");
	СоответствиеКодов.Вставить("33.14",   "30");
	СоответствиеКодов.Вставить("33.15",   "34");
	СоответствиеКодов.Вставить("33.16",   "34");
	СоответствиеКодов.Вставить("33.17",   "34");
	СоответствиеКодов.Вставить("33.19",   "34");
	СоответствиеКодов.Вставить("33.2",    "34");
	СоответствиеКодов.Вставить("35",      "40");
	СоответствиеКодов.Вставить("36",      "40");
	СоответствиеКодов.Вставить("37",      "90");
	СоответствиеКодов.Вставить("38",      "36");
	СоответствиеКодов.Вставить("39",      "90");
	СоответствиеКодов.Вставить("41",      "45");
	СоответствиеКодов.Вставить("42",      "45");
	СоответствиеКодов.Вставить("43",      "45");
	СоответствиеКодов.Вставить("45",      "50");
	СоответствиеКодов.Вставить("46",      "51");
	СоответствиеКодов.Вставить("47",      "52");
	СоответствиеКодов.Вставить("47.3",    "50");
	СоответствиеКодов.Вставить("49",      "60");
	СоответствиеКодов.Вставить("50",      "61");
	СоответствиеКодов.Вставить("51",      "62");
	СоответствиеКодов.Вставить("52",      "63");
	СоответствиеКодов.Вставить("52.7",    "95");
	СоответствиеКодов.Вставить("53",      "64");
	СоответствиеКодов.Вставить("55",      "55");
	СоответствиеКодов.Вставить("56",      "55");
	СоответствиеКодов.Вставить("58",      "22");
	СоответствиеКодов.Вставить("59.1",    "92");
	СоответствиеКодов.Вставить("59.2",    "22");
	СоответствиеКодов.Вставить("60",      "92");
	СоответствиеКодов.Вставить("61",      "64");
	СоответствиеКодов.Вставить("62",      "72");
	СоответствиеКодов.Вставить("63.1",    "72");
	СоответствиеКодов.Вставить("63.9",    "92");
	СоответствиеКодов.Вставить("64",      "65");
	СоответствиеКодов.Вставить("65",      "66");
	СоответствиеКодов.Вставить("66",      "67");
	СоответствиеКодов.Вставить("68",      "70");
	СоответствиеКодов.Вставить("69",      "74");
	СоответствиеКодов.Вставить("70",      "74");
	СоответствиеКодов.Вставить("71",      "74");
	СоответствиеКодов.Вставить("72",      "73");
	СоответствиеКодов.Вставить("73",      "74");
	СоответствиеКодов.Вставить("74",      "74");
	СоответствиеКодов.Вставить("75",      "85");
	СоответствиеКодов.Вставить("77",      "71");
	СоответствиеКодов.Вставить("78",      "74");
	СоответствиеКодов.Вставить("79",      "63");
	СоответствиеКодов.Вставить("80",      "74");
	СоответствиеКодов.Вставить("81",      "74");
	СоответствиеКодов.Вставить("81.29.2", "90");
	СоответствиеКодов.Вставить("81.3",    "01");
	СоответствиеКодов.Вставить("82",      "74");
	СоответствиеКодов.Вставить("84",      "75");
	СоответствиеКодов.Вставить("84.23.5", "84");
	СоответствиеКодов.Вставить("85",      "80");
	СоответствиеКодов.Вставить("86",      "85");
	СоответствиеКодов.Вставить("87",      "85");
	СоответствиеКодов.Вставить("88",      "85");
	СоответствиеКодов.Вставить("90",      "92");
	СоответствиеКодов.Вставить("91",      "92");
	СоответствиеКодов.Вставить("92",      "92");
	СоответствиеКодов.Вставить("93",      "92");
	СоответствиеКодов.Вставить("94",      "91");
	СоответствиеКодов.Вставить("95.11",   "72");
	СоответствиеКодов.Вставить("95.12",   "32");
	СоответствиеКодов.Вставить("95.2",    "52");
	СоответствиеКодов.Вставить("96",      "93");
	СоответствиеКодов.Вставить("97",      "95");
	СоответствиеКодов.Вставить("98",      "95");
	СоответствиеКодов.Вставить("99",      "95");
	
	ДлинаКода = СтрДлина(КодОКВЭД2);
	Для КоличествоЗнаков = 0 По ДлинаКода - 2 Цикл
		КодДляПоиска = Лев(КодОКВЭД2, ДлинаКода - КоличествоЗнаков);
		ГруппаОКВЭД1 = СоответствиеКодов[КодДляПоиска];
		Если ГруппаОКВЭД1 <> Неопределено Тогда
			Возврат ГруппаОКВЭД1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";

КонецФункции

Функция СредняяРентабельностьПродажПоОтрасли(ВидыДеятельности, Год)
	
	Результат = Новый Структура("ВидДеятельности,Рентабельность", Неопределено, 0);
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Число(Год) > 2018 Тогда
		ИскомыйГод = "2018";
	ИначеЕсли Число(Год) < 2010 Тогда
		ИскомыйГод = "2010";
	Иначе
		ИскомыйГод = Год;
	КонецЕсли;
	
	ИспользоватьОКВЭД2 = Число(Год) >= 2017;
	Если ИспользоватьОКВЭД2 Тогда
		Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
			ОсновнойКодОКВЭД = ВидыДеятельности[0].КодОКВЭД;
		Иначе
			ОсновнойКодОКВЭД = "";
		КонецЕсли;
	Иначе
		Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
			ОсновнойКодОКВЭД = ГруппаРентабельностиПоКодуОКВЭД2(ВидыДеятельности[0].КодОКВЭД);
		Иначе
			ОсновнойКодОКВЭД = ВидыДеятельности[0].КодОКВЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОсновнойКодОКВЭД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ИспользоватьОКВЭД2 Тогда
		Макет = ПолучитьОбщийМакет("ПредельныеЗначенияРентабельностиИНалоговойНагрузки2017");
	Иначе
		Макет = ПолучитьОбщийМакет("ПредельныеЗначенияРентабельностиИНалоговойНагрузки");
	КонецЕсли;
	
	Результат.ВидДеятельности = ВидыДеятельности[0].НаименованиеОКВЭД;
	
	ОбластьСтроки = Неопределено;
	ОбластьКлассификаторов = Макет.Область("Классификатор");
	ВозможныеКодыОКВЭД = ИерархияКодовОКВЭД(ОсновнойКодОКВЭД);
	Для каждого ВозможныйКодОКВЭД Из ВозможныеКодыОКВЭД Цикл
		ОбластьСтроки = Макет.НайтиТекст(ВозможныйКодОКВЭД, , ОбластьКлассификаторов, Ложь, Истина);
		Если ОбластьСтроки <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОбластьСтроки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НомерСтроки   = ОбластьСтроки.Верх;
	
	ОбластьРентабельностьПродаж = Макет.Область("РентабельностьПродаж");
	ОбластьКолонки = Макет.НайтиТекст(ИскомыйГод, , ОбластьРентабельностьПродаж, , Истина);
	НомерКолонки   = ОбластьКолонки.Лево;
	Результат.Рентабельность = Число(Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст);
	
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаФинансовыйАнализ()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ГодОтчетности",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПоказателиРискБанкротства");         // Структура
	Результат.Колонки.Добавить("ПоказателиКредитоспособность");      // Структура
	Результат.Колонки.Добавить("ПоказателиРентабельностьАктивов");   // Структура
	Результат.Колонки.Добавить("ПоказателиРентабельностьПродаж");    // Структура
	Результат.Колонки.Добавить("ПоказателиРентабельностьПродукции"); // Структура
	Результат.Колонки.Добавить("ПоказателиРентабельностьКомпании");  // Структура
	Результат.Колонки.Добавить("ПоказателиПлатежеспособности");      // Структура
	Результат.Колонки.Добавить("ПоказателиФинансовойУстойчивости");  // Структура
	
	Возврат Результат;

КонецФункции

Функция НовыйСтруктураДиаграммы()

	СтруктураДиаграммы = Новый Структура;
	СтруктураДиаграммы.Вставить("ГраницыДиаграммы", Новый Структура("НижняяГраница, ВерхняяГраница"));
	СтруктураДиаграммы.Вставить("ИмяДиаграммы", "");
	СтруктураДиаграммы.Вставить("ЗначениеПоказателя", 0);
	СтруктураДиаграммы.Вставить("ТабличныйДокумент");
	СтруктураДиаграммы.Вставить("ОбластьМакета");
	СтруктураДиаграммы.Вставить("ТекстТочкиДиаграммы", "");
	Возврат СтруктураДиаграммы;
	
КонецФункции

Процедура ВывестиОбластьПоказатьРасчет(ИмяДокумента, ИмяОбласти, ОбластиМакета, ТабличныйДокумент)

	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Показать", ИмяДокумента, ИмяОбласти);
	ОбластиМакета.ПоказатьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьРасчет);

КонецПроцедуры

Процедура ВывестиШапкуПоказателя(ТабличныйДокумент, Область, Текст)
	
	Структура = Новый Структура("ИмяПоказателя", Текст);
	Область.Параметры.Заполнить(Структура);
	ТабличныйДокумент.Вывести(Область);

КонецПроцедуры

Процедура ВывестиОбластьДиаграмма(СтруктураДиаграммы)

	Диаграмма = СтруктураДиаграммы.ОбластьМакета.Рисунки[СтруктураДиаграммы.ИмяДиаграммы].Объект;
	ЗначениеПоказателя = СтруктураДиаграммы.ЗначениеПоказателя;
	ГраницыДиаграммы = СтруктураДиаграммы.ГраницыДиаграммы;
	Если ЗначениеПоказателя < ГраницыДиаграммы.НижняяГраница Тогда
		ЗначениеТочкиДиаграммы = ГраницыДиаграммы.НижняяГраница;
	ИначеЕсли ЗначениеПоказателя > ГраницыДиаграммы.ВерхняяГраница Тогда
		ЗначениеТочкиДиаграммы = ГраницыДиаграммы.ВерхняяГраница;
	Иначе
		ЗначениеТочкиДиаграммы = ЗначениеПоказателя;
	КонецЕсли;
	Диаграмма.УстановитьЗначение(0, 0, ЗначениеТочкиДиаграммы * 100, , СтруктураДиаграммы.ТекстТочкиДиаграммы);
	
	СтруктураДиаграммы.ТабличныйДокумент.Вывести(СтруктураДиаграммы.ОбластьМакета);
	// Формат шкалы не переносится из макета.
	СтруктураДиаграммы.ТабличныйДокумент.Рисунки[СтруктураДиаграммы.ИмяДиаграммы].Объект.ОбластьПостроения.ШкалаЗначений.ФорматПодписей = "ЧС=2;ЧН=";
	
КонецПроцедуры

Процедура УстановитьЦветЯчейкиПоОценке(Область, ИмяОбласти, Оценка);

	Если Оценка = ПлохаяОценка() Тогда
		Область.Области[ИмяОбласти].ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Оценка = ХорошаяОценка() Тогда
		Область.Области[ИмяОбласти].ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	КонецЕсли;

КонецПроцедуры

Процедура СкрытьРасчет(ИмяДокумента, ИмяОбласти, ОбластиМакета, СтрокаОбласти, ТабличныйДокумент)
	
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Свернуть", ИмяДокумента, ИмяОбласти);
	ОбластиМакета.СкрытьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.СкрытьРасчет);
	СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодготовкаДанныхОтчета

Функция ПодготовитьВсеДанныеФинансовогоАнализа(ПараметрыОтчета, ПроверкаАктуализации)

	ДанныеФинансовогоАнализа = Новый Структура;
	ДанныеФинансовогоАнализа.Вставить("СтруктураГодов",   СтруктураГодов(ПараметрыОтчета.Период));
	ДанныеФинансовогоАнализа.Вставить("ВидыДеятельности", НоваяТаблицаВидыДеятельности());
	ДанныеФинансовогоАнализа.Вставить("Организация",      ПараметрыОтчета.Организация);
	ДанныеФинансовогоАнализа.Вставить("Период",           ПараметрыОтчета.Период);
	
	ДобавитьВидДеятельности(ДанныеФинансовогоАнализа);
	ПодготовитьДанныеБухгалтерскойОтчетности(ДанныеФинансовогоАнализа, ПроверкаАктуализации);
	ДобавитьДанныеПоГодам(ДанныеФинансовогоАнализа);
	ПодготовитьДанныеАнализаОтчетности(ДанныеФинансовогоАнализа);
	ПодготовитьДанныеФинансовогоАнализа(ДанныеФинансовогоАнализа);
	
	Возврат ДанныеФинансовогоАнализа;

КонецФункции

Процедура ДобавитьВидДеятельности(ДанныеФинансовогоАнализа)

	Если ЗначениеЗаполнено(ДанныеФинансовогоАнализа.Организация.КодОКВЭД) 
		ИЛИ ЗначениеЗаполнено(ДанныеФинансовогоАнализа.Организация.КодОКВЭД2) Тогда
		
		СтрокаВидДеятельности = ДанныеФинансовогоАнализа.ВидыДеятельности.Добавить();
		Если ЗначениеЗаполнено(ДанныеФинансовогоАнализа.Организация.КодОКВЭД2) Тогда
			СтрокаВидДеятельности.КодОКВЭД = ДанныеФинансовогоАнализа.Организация.КодОКВЭД2;
			СтрокаВидДеятельности.НаименованиеОКВЭД = ДанныеФинансовогоАнализа.Организация.НаименованиеОКВЭД2;
			СтрокаВидДеятельности.ЭтоОКВЭД2 = Истина;
		Иначе
			СтрокаВидДеятельности.КодОКВЭД = ДанныеФинансовогоАнализа.Организация.КодОКВЭД;
			СтрокаВидДеятельности.НаименованиеОКВЭД = ДанныеФинансовогоАнализа.Организация.НаименованиеОКВЭД;
			СтрокаВидДеятельности.ЭтоОКВЭД2 = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеФинансовогоАнализа.Вставить("ЭтоТорговля", ЭтоТорговоеПредприятие(ДанныеФинансовогоАнализа.ВидыДеятельности));
	
КонецПроцедуры

Функция ПроверкаАктуальностьДанныхУчета(Организация, Период)

	ПараметрыПроверкиАктуальности = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверкиАктуальности.Организация = Организация;
	ПараметрыПроверкиАктуальности.Период      = Период;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Обработки.ЗакрытиеМесяца.ПроверитьАктуальностьВФоне(ПараметрыПроверкиАктуальности, АдресХранилища);
	ПроверкаАктуальности = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Возврат ПроверкаАктуальности;
	
КонецФункции

Процедура ДобавитьДанныеПоГодам(ДанныеФинансовогоАнализа)
	
	Если НЕ ДанныеФинансовогоАнализа.Свойство("ДанныеБухгалтерскойОтчетности")
		ИЛИ ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаОтчетности = ДанныеФинансовогоАнализа.ДанныеБухгалтерскойОтчетности[0];
	
	ДанныеПоГодам = Новый ТаблицаЗначений;
	ДанныеПоГодам.Колонки.Добавить("НомерГода");
	ДанныеПоГодам.Колонки.Добавить("Год");
	Для НомерГода = 1 По ДанныеФинансовогоАнализа.СтруктураГодов.Количество() Цикл
		ИмяПоказателя = СтрШаблон("П1110_%1", НомерГода);
		Если СтрокаОтчетности.Показатели.Свойство(ИмяПоказателя) Тогда
			ИмяГода = СтрШаблон("Год_%1", НомерГода);
			НоваяСтрока = ДанныеПоГодам.Добавить();
			НоваяСтрока.НомерГода = Строка(НомерГода);
			НоваяСтрока.Год = ДанныеФинансовогоАнализа.СтруктураГодов[ИмяГода];
		КонецЕсли;
	КонецЦикла;
	
	ДанныеФинансовогоАнализа.Вставить("ДанныеПоГодам", ДанныеПоГодам);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеФункции

Функция ВсеОбластиМакета(ИмяМакета)
	
	Макет     = Отчеты.ФинансовыйАнализ.ПолучитьМакет(ИмяМакета);
	Результат = Новый Структура;
	Для Каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Результат.Вставить(Область.Имя, Макет.ПолучитьОбласть(Область.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции 

Функция ВсеКартинкиТабличногоДокумента(ТабличныйДокумент)
	
	Результат = Новый Структура;
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка Тогда
			Результат.Вставить(Рисунок.Имя, Рисунок);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаОбластиРасшифровки()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяДокумента",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяОбласти",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПерваяСтрока",    Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ПоследняяСтрока", Новый ОписаниеТипов("Число"));
	Возврат Результат;
	
КонецФункции

Функция СтруктураГодов(Дата)
	
	СтруктураГодов = Новый Структура;
	СтруктураГодов.Вставить("Год_1", Формат(Год(Дата), "ЧГ="));
	СтруктураГодов.Вставить("Год_2", Формат(Год(Дата) - 1, "ЧГ="));
	СтруктураГодов.Вставить("Год_3", Формат(Год(Дата) - 2, "ЧГ="));
	СтруктураГодов.Вставить("Год_4", Формат(Год(Дата) - 3, "ЧГ="));
	Возврат СтруктураГодов;
	
КонецФункции

Функция НоваяТаблицаВидыДеятельности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КодОКВЭД",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеОКВЭД", Новый ОписаниеТипов("Строка"));
	// ЭтоОКВЭД2 = Истина - код в строке по классификатору редакции 2, Ложь - редакции 1.
	Результат.Колонки.Добавить("ЭтоОКВЭД2",         Новый ОписаниеТипов("Булево"));
	Возврат Результат;

КонецФункции

Функция ПлохаяОценка()
	Возврат "ПлохаяОценка";
КонецФункции

Функция СредняяОценка()
	Возврат "СредняяОценка";
КонецФункции

Функция ХорошаяОценка()
	Возврат "ХорошаяОценка";
КонецФункции

Функция ИерархияКодовОКВЭД(КодОКВЭД)
	
	Результат = Новый Массив;
    Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(КодОКВЭД, ".", "")) Тогда 
        Возврат Результат; // Корректный код может содержать только цифры и точки
    КонецЕсли;
    ДлинаКода = СтрДлина(КодОКВЭД); 
    Для Поз = 0 По ДлинаКода Цикл
        ЧастьКода = Лев(КодОКВЭД, ДлинаКода - Поз);
        Если СтрЗаканчиваетсяНа(ЧастьКода, ".") Тогда 
            Продолжить; // На точку код оканчиваться не может
        КонецЕсли;
        Результат.Добавить(ЧастьКода);
        Если ДлинаКода - Поз <= 2 Тогда 
            Прервать; // Кодов из 1 символа не бывает
        КонецЕсли;
    КонецЦикла;
    Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли