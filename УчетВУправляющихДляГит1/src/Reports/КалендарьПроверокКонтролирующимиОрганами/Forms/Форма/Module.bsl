&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.Организация;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СформироватьОтчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Элементы.РезультатПроверки, "ФормированиеОтчета");
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбОшибке", 0.1, Истина);
	ИначеЕсли ОжиданиеОтвета Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 3, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Элементы.РезультатПроверки, "ФормированиеОтчета");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания)
		ИЛИ ОжиданиеОтвета 
		ИЛИ ЭтотОбъект.РезультатПроверки.ВысотаТаблицы > 0 Тогда
		ТекущийЭлемент = Элементы.РезультатПроверки;
	Иначе
		ТекущийЭлемент = Элементы.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УведомлениеОСпецрежимахНалогообложения" Тогда
	
		ЗапомнитьСозданиеЗаявленияОбОтменеПроверки(Источник);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.РезультатПроверки, "Неактуальность");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОценкаРисковНалоговойПроверкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ОткрытьФорму("Отчет.ОценкаРискаНалоговойПроверки.Форма", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПроверкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Если СтрНайти(Расшифровка, "http") = 1 Тогда
			ПерейтиПоНавигационнойСсылке(Расшифровка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеЗаполнения = ДанныеЗаполненияЗаявления(Расшифровка);
		РегламентированнаяОтчетностьКлиент.СоздатьУведомлениеОСпецрежимах(
			Организация,
			ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеИсключенииПроверки"),
			ДанныеЗаполнения);
		СозданоЗаявлениеОбОтменеПроверки = Истина;
		ИдентификаторЗаявленияОбОтменеПроверки = Расшифровка.Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.РезультатПроверки, "ФормированиеОтчета");
	
	Результат = СформироватьОтчетНаСервере();
	
	Если НЕ Результат Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	Иначе
		
		ОбработатьОшибкиФормированияОтчета();
		
		Если ОжиданиеОтвета Тогда
			// Повторный вызов процедуры формирования при асинхронном получении данных от сервиса
			ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 3, Истина);
		Иначе
			Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
					Элементы.РезультатПроверки, "НеИспользовать");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	ИдентификаторЗадания = Неопределено;
	ОписаниеОшибки       = "";
	
	Если НЕ ПроверитьЗаполнение() Тогда 
		Возврат Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Организация) Тогда 
		// Проверка заполнения не сработает, когда опция ИспользоватьНесклолькоОрганизацийБухгалтерскийУчет = Ложь.
		ОписаниеОшибки = НСтр("ru='Заполните реквизиты организации.'");
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Организация);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Новый УникальныйИдентификатор, 
		"Отчеты.КалендарьПроверокКонтролирующимиОрганами.СформироватьОтчет", 
		ПараметрыОтчета, 
		СтрШаблон(НСтр("ru='Формирование отчета: Календарь проверок: %1'"), Организация));
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
		ИдентификаторЗадания = Неопределено;
	Иначе
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Возврат РезультатВыполнения.ЗаданиеВыполнено;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьПредупреждениеОбОшибке()

	ОбработатьОшибкиФормированияОтчета();

КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		
		ИдентификаторЗадания = Неопределено;
		ЗагрузитьПодготовленныеДанные();
		
		ОбработатьОшибкиФормированияОтчета();
		
		Если ОжиданиеОтвета Тогда
			// Повторный вызов процедуры формирования при асинхронном получении данных от сервиса
			ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 3, Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
				Элементы.РезультатПроверки, "НеИспользовать");
		КонецЕсли;
		
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьОтчет()

	СформироватьОтчетНаКлиенте();

КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		СформироватьОтчетНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	ДанныеОтчета   = ПолучитьИзВременногоХранилища(АдресХранилища);
	ОписаниеОшибки = ДанныеОтчета.ОписаниеОшибки;
	ОжиданиеОтвета = ДанныеОтчета.ОжиданиеОтвета;
	
	// Очистка
	РезультатПроверки.Очистить();
	Элементы.РезультатПроверки.ИспользуемоеИмяФайла = Неопределено;
	РезультатПроверки.ТекущаяОбласть = РезультатПроверки.Область(1, 2, 1, 2);
	
	// Заполнение
	Если НЕ ОжиданиеОтвета
		И НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		РезультатПроверки.Вывести(ДанныеОтчета.РезультатПроверки);
		Элементы.РезультатПроверки.ИспользуемоеИмяФайла = СокрЛП(ДанныеОтчета.ИмяФайлаПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкиФормированияОтчета()

	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
	
		ТекстВопроса = НСтр("ru='Для формирования календаря проверок
			|необходимо подключиться к интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	ИначеЕсли ОписаниеОшибки = "НеУказанПароль" Тогда
		ТекстВопроса = НСтр("ru='Необходимо указать пароль к Интернет-поддержке пользователей
			|и установить флажок ""Запомнить пароль"".
			|Указать сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	ИначеЕсли ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторМестаВызова", "kalendar_proverok");
		ОткрытьФорму("ОбщаяФорма.Сервис1СКонтрагентНеПодключен", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ДанныеЗаполненияЗаявления(Знач СтруктураПараметров)
	
	Возврат Справочники.ПроверкиКонтролирующимиОрганами.ДанныеЗаполненияЗаявленияОбОтменеПроверки(СтруктураПараметров);

КонецФункции

&НаСервере
Процедура ЗапомнитьСозданиеЗаявленияОбОтменеПроверки(Заявление)
	
	Если НЕ СозданоЗаявлениеОбОтменеПроверки 
		ИЛИ НЕ ЗначениеЗаполнено(ИдентификаторЗаявленияОбОтменеПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запись = РегистрыСведений.ЗаявленияОбОтменеПроверокКонтролирующимиОрганами.СоздатьМенеджерЗаписи();
	Запись.Организация   = Организация;
	Запись.Идентификатор = ИдентификаторЗаявленияОбОтменеПроверки;
	Запись.Заявление     = Заявление;
	Запись.Записать();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.РезультатПроверки, "Неактуальность");
	
	СозданоЗаявлениеОбОтменеПроверки       = Ложь;
	ИдентификаторЗаявленияОбОтменеПроверки = "";

КонецПроцедуры 

#КонецОбласти
