&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2016Кв1";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0001000020";
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхФизЛицо   = Новый Структура;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Структура содержит имена и число уровней многоуровневых разделов.
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", 2);
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   СтруктураРеквизитовФормы.мИдГруппы1);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1",  "ТаблицаСтраницыРаздел1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел22", "ТаблицаСтраницыРаздел22");
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 2);
	
	ЦветЗаполняетсяТолькоВручную                           = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир                           = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир                        = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную                       = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически                           = Новый Цвет(255, 255, 255);

	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "01/12/2015";
	
	// Код отчета, равен КНД.
	СтруктураРеквизитовФормы.мКодОтчета = 1151072;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.01", Истина);
	
	СтруктураРеквизитовФормы.КНД = "1151072";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации
		= Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("КБКПоУмолчанию", "18210703000011000110");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногоуровневыхРазделов()
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		
		ИмяРаздела = Элем.Ключ;
		КолУровней = Элем.Значение;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для ТекУровень = 0 По КолУровней - 1 Цикл
			ТекВетка = ТекВетка.Строки.Добавить();
			ТекВетка.Данные = Новый Структура;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу",   ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",     ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("ПризнМногострочности",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",      ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел22.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе     = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Ложь;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "ФизЛицо";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе     = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Ложь;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел21";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел22";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "Раздел1";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")
			И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ИзмененияПроизошли = Истина;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	Попытка
		ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		Если Лев(ИмяПоказателя, 1) = "_" Тогда
			Возврат ИзмененияПроизошли;
		КонецЕсли;
	Исключение
		ИзмененияПроизошли = Ложь;
	КонецПопытки;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ЭтаФорма, ТипНП);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ЭтаФорма, ТипНП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = ИНН;
		Форма.ТабличныйДокумент.Области.КПП.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = Форма.ТабличныйДокумент.Области.НаимОрг.Значение;
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ИП
		И НЕ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.ИНН.Значение) Тогда
		
		СтрокаСведений = "ДатаРожд, Гражд, КодУдЛичн, ОрганВыданУдЛичн, СерияУдЛичн, НомерУдЛичн, ДатаУдЛичн,
			|ИндексМЖ, КодСубъектМЖ, РайонМЖ, ГородМЖ, НПунктМЖ, УлицаМЖ, ДомМЖ, КорпусМЖ, КвартираМЖ";
		
		СведенияОФизЛице = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		Если СведенияОФизЛице.Свойство("ДатаРожд") Тогда
			Форма.СтруктураДанныхФизЛицо.ДатаРождения
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ДатаРожд), СведенияОФизЛице.ДатаРожд, '00010101');
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("Гражд") Тогда
			Форма.СтруктураДанныхФизЛицо.КодСтраныГражданства
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.Гражд), СокрЛП(СведенияОФизЛице.Гражд), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("КодУдЛичн") Тогда
			Форма.СтруктураДанныхФизЛицо.КодВидаДокумента
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.КодУдЛичн), СокрЛП(СведенияОФизЛице.КодУдЛичн), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("СерияУдЛичн") И СведенияОФизЛице.Свойство("НомерУдЛичн") Тогда
			СерУдЛичн = ?(ЗначениеЗаполнено(СведенияОФизЛице.СерияУдЛичн), СокрЛП(СведенияОФизЛице.СерияУдЛичн), "");
			НомУдЛичн = ?(ЗначениеЗаполнено(СведенияОФизЛице.НомерУдЛичн), СокрЛП(СведенияОФизЛице.НомерУдЛичн), "");
			Форма.СтруктураДанныхФизЛицо.СерияНомерДокумента = СерУдЛичн + " " + НомУдЛичн;
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("ОрганВыданУдЛичн") Тогда
			Форма.СтруктураДанныхФизЛицо.КемВыданДокумент
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ОрганВыданУдЛичн), СокрЛП(СведенияОФизЛице.ОрганВыданУдЛичн), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("ДатаУдЛичн") Тогда
			Форма.СтруктураДанныхФизЛицо.ДатаВыдачи
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ДатаУдЛичн), СведенияОФизЛице.ДатаУдЛичн, '00010101');
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("ИндексМЖ") Тогда
			Форма.СтруктураДанныхФизЛицо.АдресИндекс
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ИндексМЖ), СокрЛП(СведенияОФизЛице.ИндексМЖ), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("КодСубъектМЖ") Тогда
			Форма.СтруктураДанныхФизЛицо.АдресКодРегиона
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.КодСубъектМЖ), СокрЛП(СведенияОФизЛице.КодСубъектМЖ), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("РайонМЖ") Тогда
			Форма.СтруктураДанныхФизЛицо.АдресРайон
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.РайонМЖ), СокрЛП(СведенияОФизЛице.РайонМЖ), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("ГородМЖ") Тогда
			Форма.СтруктураДанныхФизЛицо.АдресГород
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ГородМЖ), СокрЛП(СведенияОФизЛице.ГородМЖ), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("НПунктМЖ") Тогда
			Форма.СтруктураДанныхФизЛицо.АдресНаселенныйПункт
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.НПунктМЖ), СокрЛП(СведенияОФизЛице.НПунктМЖ), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("УлицаМЖ") Тогда
			Форма.СтруктураДанныхФизЛицо.АдресУлица
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.УлицаМЖ), СокрЛП(СведенияОФизЛице.УлицаМЖ), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("ДомМЖ") Тогда
			Форма.СтруктураДанныхФизЛицо.АдресНомерДома
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ДомМЖ), СокрЛП(СведенияОФизЛице.ДомМЖ), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("КорпусМЖ") Тогда
			Форма.СтруктураДанныхФизЛицо.АдресНомерКорпуса
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.КорпусМЖ), СокрЛП(СведенияОФизЛице.КорпусМЖ), "");
		КонецЕсли;
		Если СведенияОФизЛице.Свойство("КвартираМЖ") Тогда
			Форма.СтруктураДанныхФизЛицо.АдресНомерКвартиры
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.КвартираМЖ), СокрЛП(СведенияОФизЛице.КвартираМЖ), "");
		КонецЕсли;
		
	ИначеЕсли НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
		
		Форма.СтруктураДанныхФизЛицо.ДатаРождения = '00010101';
		Форма.СтруктураДанныхФизЛицо.КодСтраныГражданства = "";
		Форма.СтруктураДанныхФизЛицо.КодВидаДокумента = "";
		Форма.СтруктураДанныхФизЛицо.СерияНомерДокумента = "";
		Форма.СтруктураДанныхФизЛицо.КемВыданДокумент = "";
		Форма.СтруктураДанныхФизЛицо.ДатаВыдачи = '00010101';
		Форма.СтруктураДанныхФизЛицо.СтатусНалогоплательщика = "";
		Форма.СтруктураДанныхФизЛицо.АдресИндекс = "";
		Форма.СтруктураДанныхФизЛицо.АдресКодРегиона = "";
		Форма.СтруктураДанныхФизЛицо.АдресРайон = "";
		Форма.СтруктураДанныхФизЛицо.АдресГород = "";
		Форма.СтруктураДанныхФизЛицо.АдресНаселенныйПункт = "";
		Форма.СтруктураДанныхФизЛицо.АдресУлица = "";
		Форма.СтруктураДанныхФизЛицо.АдресНомерДома = "";
		Форма.СтруктураДанныхФизЛицо.АдресНомерКорпуса = "";
		Форма.СтруктураДанныхФизЛицо.АдресНомерКвартиры = "";
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
		"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
		ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервереСФормированиемРаздела1();
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервереСФормированиемРаздела1()
	
	РасчетНаСервере();
	СформироватьРаздел1();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	УстановитьФорматВыводаНаСервере(ИмяРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела) Экспорт
	Перем СтруктураГруппы, Индекс, ИндексСтр;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	ПолучитьТаблицуСоставаПоказателей();
	
	Для Каждого СтрПоказатели Из ТаблицаСоставПоказателей Цикл
	
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя			 = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность	 = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме	 = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя		 = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя			 = ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Пока ТабличныйДокумент.Области.Найти(ИмяПоказателя + "_" + ИндексСтр) <> Неопределено Цикл
					ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя + "_" + ИндексСтр];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатнаяФормаОтчета2016Кв1_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("ФизЛицо",   ПрефиксИменМакетов + "ФизЛицо");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   ПрефиксИменМакетов + "Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   ПрефиксИменМакетов + "Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел22",  ПрефиксИменМакетов + "Раздел22");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		// Определение исходного количества строк на листе МЧБ.
		Если Парам1.ИмяСтраницы = "Раздел1" Тогда
			ИсхКолвоСтрокБлока = 10;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + Формат(НовыйСчетчик, "ЧГ=") + "_" + НомерЯчейки);
				КонецЦикла;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);

				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ФизлицоФамилия";
	НовСтр.Значение = ОбщиеРеквизитыРазделов.ФизлицоФамилия;
	НовСтр.ЗначениеМЧБ = ОбщиеРеквизитыРазделов.ФизлицоФамилия;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ФизлицоИмяИнициал";
	НовСтр.Значение = ОбщиеРеквизитыРазделов.ФизлицоИмяИнициал;
	НовСтр.ЗначениеМЧБ = ОбщиеРеквизитыРазделов.ФизлицоИмяИнициал;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ФизлицоОтчествоИнициал";
	НовСтр.Значение = ОбщиеРеквизитыРазделов.ФизлицоОтчествоИнициал;
	НовСтр.ЗначениеМЧБ = ОбщиеРеквизитыРазделов.ФизлицоОтчествоИнициал;
	
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
						
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "П000100000102") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000200004003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000300008003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000400004003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000500005003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000700004003") > 0 Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
				СокрЛП(Показатель.Значение), 11, "-", 1);
		ИначеЕсли Показатель.Имя = "П000400007003"
			ИЛИ СтрНайти(Показатель.Имя, "П000730000101") > 0
			ИЛИ СтрНайти(Показатель.Имя, "П000730000106") > 0 Тогда
			Если НЕ ЗначениеЗаполнено(Показатель.ЗначениеМЧБ) Тогда
				Показатель.ЗначениеМЧБ = "--.----";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ПостфиксВИмениОбластиМногострочнаяЧасть = "";
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть);
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Постфикс = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Постфикс;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх, ,
	ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ  = КоординатаНиз;
			Верх = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
	
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
	
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=")).Имя = Зап.Область;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохрТЗМногострочнойГруппы1 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
				
				ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
			Иначе
				
				СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
				ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Загрузить(СохрТЗМногострочнойГруппы1);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	Если ИмяТекРаздела = "Раздел2" Тогда
		
		КолУровнейРаздела = мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
		
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка21_1 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			Для НомСтрокиВВетке21_1 = 1 По Ветка21_1.Строки.Количество() Цикл
				
				Ветка21_2 = Ветка21_1.Строки[НомСтрокиВВетке21_1 - 1];
				
				ТабличныйДокумент.Очистить();
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Раздел2"));
				Для Каждого ЭлСтруктуры Из Ветка21_1.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Раздел21"));
				Для Каждого ЭлСтруктуры Из Ветка21_2.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН");
	Если НЕ Область = Неопределено Тогда
		СтрИНН = Область.Значение;
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП");
	Если НЕ Область = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	Если НЕ Область = Неопределено Тогда
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(ИсходныйМакет.Область("НаимОрг").Значение);
		ОбщиеРеквизитыРазделов.Вставить("ФизлицоФамилия",         ФИОИП.Фамилия);
		ОбщиеРеквизитыРазделов.Вставить("ФизлицоИмяИнициал",      Лев(ФИОИП.Имя, 1));
		ОбщиеРеквизитыРазделов.Вставить("ФизлицоОтчествоИнициал", Лев(ФИОИП.Отчество, 1));
	Иначе
		ОбщиеРеквизитыРазделов.Вставить("ФизлицоФамилия",         "-");
		ОбщиеРеквизитыРазделов.Вставить("ФизлицоИмяИнициал",      "-");
		ОбщиеРеквизитыРазделов.Вставить("ФизлицоОтчествоИнициал", "-");
	КонецЕсли;
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Если ЭлементСтруктуры.Ключ = "Раздел7" Тогда
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
							
							СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
						КонецЦикла;
						
					Иначе
						
						Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
						   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
							
							СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
							
							Ном = Ном + 1;
							
							Продолжить;
							
						КонецЕсли;
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
							
							СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
							
						КонецЦикла;
						
					КонецЕсли;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		МассивТаблЗнач = Новый Массив;
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Раздел2"
			И Раздел.ИмяСтраницы <> "Раздел21" Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		// Многоуровневые разделы и входящие в них подразделы.
		Если Раздел.ИмяСтраницы = "Раздел2"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел21" Тогда
			
			ИмяМногоуровневогоРаздела = Лев(Раздел.ИмяСтраницы, 7);
			
			ДеревоДанныхРазделУровень0 = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяМногоуровневогоРаздела]);
			
			Если Раздел.ИмяСтраницы = "Раздел2" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					Если ДеревоДанныхРазделУровень0.Строки[0].Данные.Количество() = 0 Тогда
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
						СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Раздел.ИмяСтраницы = "Раздел21" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					ДеревоДанныхРазделУровень1 = ДеревоДанныхРазделУровень0.Строки[0];
					Если ДеревоДанныхРазделУровень1.Строки.Количество() = 1 Тогда
						Если ДеревоДанныхРазделУровень1.Строки[0].Данные.Количество() = 0 Тогда
							ТабличныйДокумент.Очистить();
							ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногоуровневыхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СохраненныеДанныеОтчета();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если СписокСохранения.Свойство("ОкружениеСохранения") Тогда
		СтрокаРаздел21 = ДеревоНастройкиСтраниц.Строки.Найти("Раздел21", "ИмяСтраницы");
		Если СтрокаРаздел21 <> Неопределено Тогда
			СтрокаРаздел21.ИмяСтраницы = "Раздел2";
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения"
						+ ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	// Восстанавливаем сохраненные данные многоуровневых разделов.
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Раздел2"
			И Раздел.ИмяСтраницы <> "Раздел21" Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	УстановитьФорматВыводаНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Перем ДанныеМногостраничныхРазделов;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	Для Каждого Показатель Из ДанныеТит Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН", "");
			Для Ном = 1 По 12 Цикл
				ДанныеТит.ИНН = ДанныеТит.ИНН + СокрЛП(ДанныеТит["ИНН1_" + Ном]);
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			ДанныеТит.ИНН = СтрЗаменить(ДанныеТит.ИНН, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП", "");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП = ДанныеТит.КПП + СокрЛП(ДанныеТит["КПП1_" + Ном]);
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
			ДанныеТит.КПП = СтрЗаменить(ДанныеТит.КПП, "-", "");
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			ДанныеТит.Вставить("НалоговыйОрган", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.НалоговыйОрган = ДанныеТит.НалоговыйОрган + СокрЛП(ДанныеТит["НалоговыйОрган" + Ном]);
				ДанныеТит.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки
					+ СтрЗаменить(СокрЛП(ДанныеТит["НомерКорректировки" + Ном]), "-", "");
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
				Если НЕ ЗначениеЗаполнено(ДанныеТит.НомерКорректировки) Тогда
					ДанныеТит.НомерКорректировки = "0";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период", "");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = ДанныеТит.Период + СокрЛП(ДанныеТит["Период" + Ном]);
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = ДанныеТит.ОтчетГод + СокрЛП(ДанныеТит["ОтчетГод" + Ном]);
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = ДанныеТит.ПоМесту + СокрЛП(ДанныеТит["ПоМесту" + Ном]);
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = ДанныеТит.Прил + СокрЛП(ДанныеТит["Прил" + Ном]);
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				Если ЭлементСтруктуры.Ключ = "Раздел1" Тогда
					
					ТЗ_1 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					Для каждого СтрокаТЗ_1 Из ТЗ_1 Цикл
						СтрокаТЗ_1.ДанныеДопСтрок =  СтрокаТЗ_1.ДанныеДопСтрок.П0001000020;
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				Если ЭлементСтруктуры.Ключ = "Раздел21" Тогда
					
					ТЗ_21 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					ИменаПоказателейСтрок010_040 = "П000210001003,П000210002003,П000210003003,П000210004003";
					
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					
					ПредЗначСтр010 = Неопределено;
					ПредЗначСтр020 = Неопределено;
					ПредЗначСтр030 = Неопределено;
					ПредЗначСтр040 = Неопределено;
					
					Для каждого СтрокаТЗ_21 Из ТЗ_21 Цикл
						
						ТекЗначСтр010 = СокрЛП(СтрокаТЗ_21.Данные["П000210001003"]);
						ТекЗначСтр020 = СокрЛП(СтрокаТЗ_21.Данные["П000210002003"]);
						ТекЗначСтр030 = СокрЛП(СтрокаТЗ_21.Данные["П000210003003"]);
						ТекЗначСтр040 = СокрЛП(СтрокаТЗ_21.Данные["П000210004003"]);
						
						Если НЕ (ТекЗначСтр010 = ПредЗначСтр010
							   И ТекЗначСтр020 = ПредЗначСтр020
							   И ТекЗначСтр030 = ПредЗначСтр030
							   И ТекЗначСтр040 = ПредЗначСтр040) Тогда
							
							ВеткаРаздел21_1 = ДеревоДанных.Строки.Добавить();
							ВеткаРаздел21_1.Данные = Новый Структура;
							
							Для каждого Показатель Из СтрокаТЗ_21.Данные Цикл
								Если СтрНайти(ИменаПоказателейСтрок010_040, Показатель.Ключ) = 0 Тогда
									Продолжить;
								КонецЕсли;
								ВеткаРаздел21_1.Данные.Вставить(Показатель.Ключ, Показатель.Значение);
							КонецЦикла;
							
							ПредЗначСтр010 = ТекЗначСтр010;
							ПредЗначСтр020 = ТекЗначСтр020;
							ПредЗначСтр030 = ТекЗначСтр030;
							ПредЗначСтр040 = ТекЗначСтр040;
							
						КонецЕсли;
						
						ВеткаРаздел21_2 = ВеткаРаздел21_1.Строки.Добавить();
						ВеткаРаздел21_2.Данные = Новый Структура;
						
						Для каждого Показатель Из СтрокаТЗ_21.Данные Цикл
							Если СтрНайти(ИменаПоказателейСтрок010_040, Показатель.Ключ) > 0 Тогда
								Продолжить;
							КонецЕсли;
							ВеткаРаздел21_2.Данные.Вставить(Показатель.Ключ, Показатель.Значение);
						КонецЦикла;
						
					КонецЦикла;
					
					ДанныеМногоуровневыхРазделов.Вставить("Раздел2", ДеревоДанных);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 2.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210010003", "П000210010103;П000210010203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210006003", "П000210007003;П000210010103;П000210010203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210012003", "П000210005003;П000210008003;П000210011003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210016003", "П000210005003;П000210008003;П000210010103;П000210010203;П000210011003;П000210013003;П000210014003;П000210015003");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	ОтчетСкопированОтчетныйГодИзменился = Истина;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НачальныеОперацииСМногострочнымиБлоками();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			ТабличныйДокумент.Области.ПоМесту.Значение = "255";
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			Если Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)
				= Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
				ОтчетСкопированОтчетныйГодИзменился = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СообщенияОбИзменениях = Новый Массив;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			ТаблицаСтраницыРаздел1[0].Данные[0].Значение.Вставить("П000100001003", СтруктураРеквизитовФормы.КБКПоУмолчанию);
			
		Иначе
			
			Если ОтчетСкопированОтчетныйГодИзменился Тогда
				
				ЗначСтавки = НалоговаяСтавка_Раздел21Строки110и120(ЭтаФорма);
				ЗначКоэф = ЗначениеКоэффициентаП1_1Ст333_12НКРФ();
				
				ДеревоДанныеРаздела21 = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
				
				Для каждого Строка21_1 Из ДеревоДанныеРаздела21.Строки Цикл
					НомВодОбъекта = ДеревоДанныеРаздела21.Строки.Индекс(Строка21_1) + 1;
					Для каждого Строка21_2 Из Строка21_1.Строки Цикл
						НомСтраницы = Строка21_1.Строки.Индекс(Строка21_2) + 1;
						
						Строка080 = СокрЛП(Строка21_2.Данные["П000210008003"]);
						
						ПредЗначСтавки = Строка21_2.Данные["П000210011003"];
						Если ЗначениеЗаполнено(ПредЗначСтавки) И (ЗначСтавки <> ПредЗначСтавки) Тогда
							Строка050 = СокрЛП(Строка21_2.Данные["П000210005003"]);
							ВодныйОбъектВКрымуИлиВСевастополе = (Строка050 = "50091" ИЛИ Строка050 = "50092");
							ЗначениеСтавкиОпределяетсяПоОтчетномуГоду
								= (Строка080 = "1" ИЛИ ВодныйОбъектВКрымуИлиВСевастополе);
							Если ЗначениеСтавкиОпределяетсяПоОтчетномуГоду Тогда
								Строка21_2.Данные.Вставить("П000210011003", ЗначСтавки);
								СообщенияОбИзменениях.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Раздел 2.1 -> Водный объект %1 -> Страница %2: в строке 110 изменено значение с %3 на %4.'"),
								НомВодОбъекта, НомСтраницы, ПредЗначСтавки, ЗначСтавки));
							КонецЕсли;
						КонецЕсли;
						
						ПредЗначСтавки = Строка21_2.Данные["П000210012003"];
						Если ЗначениеЗаполнено(ПредЗначСтавки) И (ЗначСтавки <> ПредЗначСтавки) Тогда
							ЗначениеСтавкиОпределяетсяПоОтчетномуГоду = (Строка080 = "1");
							Если ЗначениеСтавкиОпределяетсяПоОтчетномуГоду Тогда
								Строка21_2.Данные.Вставить("П000210012003", ЗначСтавки);
								СообщенияОбИзменениях.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Раздел 2.1 -> Водный объект %1 -> Страница %2: в строке 120 изменено значение с %3 на %4.'"),
								НомВодОбъекта, НомСтраницы, ПредЗначСтавки, ЗначСтавки));
							КонецЕсли;
						КонецЕсли;
						
						ПредЗначКоэф = Строка21_2.Данные["П000210013003"];
						Если ЗначениеЗаполнено(ПредЗначКоэф) И (ЗначКоэф <> ПредЗначКоэф ИЛИ Строка080 = "1") Тогда
							ЗначКоэф_ = ?(Строка080 = "1", 0, ЗначКоэф);
							Строка21_2.Данные.Вставить("П000210013003", ЗначКоэф_);
							СообщенияОбИзменениях.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Раздел 2.1 -> Водный объект %1 -> Страница %2: в строке 130 изменено значение с %3 на %4.'"),
							НомВодОбъекта, НомСтраницы, ПредЗначКоэф, ЗначКоэф_));
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
					= ПоместитьВоВременноеХранилище(ДеревоДанныеРаздела21, УникальныйИдентификатор);
				
				Для каждого Страница Из ТаблицаСтраницыРаздел22 Цикл
					НомСтраницы = ТаблицаСтраницыРаздел22.Индекс(Страница) + 1;
					ДанныеСтраницы = Страница.Данные[0].Значение;
					ПредЗначКоэф = ДанныеСтраницы["П000220012003"];
					Если ЗначениеЗаполнено(ПредЗначКоэф) И (ЗначКоэф <> ПредЗначКоэф) Тогда
						ДанныеСтраницы.Вставить("П000220012003", ЗначКоэф);
						СообщенияОбИзменениях.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Раздел 2.2 -> Страница %1: в строке 120 изменено значение с %2 на %3.'"),
						НомСтраницы, ПредЗначКоэф, ЗначКоэф));
					КонецЕсли;
				КонецЦикла;
				
				Если СообщенияОбИзменениях.Количество() > 0 Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Установлены актуальные для %1 года значения:'"),
					Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ="));
					Сообщение.Сообщить();
					
					Для каждого Сообщ Из СообщенияОбИзменениях Цикл
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = Сообщ;
						Сообщение.Сообщить();
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		Если СтруктураРеквизитовФормы.ИП
			И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
			И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
			ТабличныйДокумент.Области.КодФормыРеорганизации.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если НЕ СтруктураРеквизитовФормы.ИП
				И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
				И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
		СтраницаСведения = мДеревоСтраницОтчета.ПолучитьЭлементы()[1];
		Если СтруктураРеквизитовФормы.ИП Тогда
			СтраницаСведения.ПоказатьСтраницу = 1;
			СтраницаСведения.ВыводНаПечать    = 1;
		Иначе
			СтраницаСведения.ПоказатьСтраницу = 0;
			СтраницаСведения.ВыводНаПечать    = 0;
		Конецесли;
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СообщенияОбИзменениях.Количество() > 0 Тогда
		РасчетНаСервереСФормированиемРаздела1();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Произведен перерасчет всех рассчитываемых показателей.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейкахНаСервере();
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеКоэффициентаП1_1Ст333_12НКРФ()
	
	Год = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если Год >= 2025 Тогда
		Коэффициент = 4.65;
	ИначеЕсли Год >= 2024 Тогда
		Коэффициент = 4.05;
	ИначеЕсли Год >= 2023 Тогда
		Коэффициент = 3.52;
	ИначеЕсли Год >= 2022 Тогда
		Коэффициент = 3.06;
	ИначеЕсли Год >= 2021 Тогда
		Коэффициент = 2.66;
	ИначеЕсли Год >= 2020 Тогда
		Коэффициент = 2.31;
	ИначеЕсли Год >= 2019 Тогда
		Коэффициент = 2.01;
	ИначеЕсли Год >= 2018 Тогда
		Коэффициент = 1.75;
	ИначеЕсли Год >= 2017 Тогда
		Коэффициент = 1.52;
	ИначеЕсли Год >= 2016 Тогда
		Коэффициент = 1.32;
	ИначеЕсли Год >= 2015 Тогда
		Коэффициент = 1.15;
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛПол";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		НаимОрганизации = "";
		СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
		
		Возврат СокрЛП(НаимОрганизации);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если МесяцОкончания = 3 Тогда
		КодОтчетногоПериода = ?(ЗаполненКодФормыРеорганизации, "51", "21");
	ИначеЕсли МесяцОкончания = 6 Тогда
		КодОтчетногоПериода = ?(ЗаполненКодФормыРеорганизации, "54", "22");
	ИначеЕсли МесяцОкончания = 9 Тогда
		КодОтчетногоПериода = ?(ЗаполненКодФормыРеорганизации, "55", "23");
	Иначе
		КодОтчетногоПериода = ?(ЗаполненКодФормыРеорганизации, "56", "24");
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = КодОтчетногоПериода;
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
		Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛицо";
	СтрокаУровня1.Представление            = "Сведения о физическом лице";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 0;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный  = ?(ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения = ?(ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ?(Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
		Конецесли;

	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2016Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	// Титульный лист.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
		"Выбор кода по месту нахождения (учета)", КоллекцияСписковВыбора["КодыПоМестуНахождения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
		"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["КодыФормыРеорганизации"]);
	
	// Сведения о физическом лице, не являющемся индивидуальным предпринимателем.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтатусНалогоплательщика", 1, ,
		"Выбор статуса налогоплательщика", КоллекцияСписковВыбора["СтатусыНалогоплательщика"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодВидаДокумента", 2, ,
		"Выбор кода вида документа", КоллекцияСписковВыбора["КодыВидовДокументов"]);
	
	// Раздел 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100001003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	// Раздел 2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210005003", 5, ,
		"Выбор кода водопользования", КоллекцияСписковВыбора["КодыВодопользованияРаздел21"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210008003", 1, ,
		"Выбор кода цели забора воды", КоллекцияСписковВыбора["КодыЦелиЗабораВоды"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210013003", 0, ,
		"Выбор коэффициента, установленного пунктом 1.1 статьи 333.12 НК РФ", КоллекцияСписковВыбора["КоэффициентП1_1Ст333_12НКРФ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210014003", 0, ,
		"Выбор коэффициента, установленного пунктом 4 статьи 333.12 НК РФ", КоллекцияСписковВыбора["КоэффициентыСтр140Раздел21"]);
	
	// Раздел 2.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220001003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220006003", 5, ,
		"Выбор кода водопользования", КоллекцияСписковВыбора["КодыВодопользованияРаздел22"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220012003", 0, ,
		"Выбор коэффициента, установленного пунктом 1.1 статьи 333.12 НК РФ", КоллекцияСписковВыбора["КоэффициентП1_1Ст333_12НКРФ"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	Если Область.Имя = "П000210013003" ИЛИ Область.Имя = "П000220012003" Тогда
		ПараметрыФормы.Вставить("НаимКолонкиКод", "Коэффициент");
		ПараметрыФормы.Вставить("НаимКолонкиНазвание", "Отчетный год");
	ИначеЕсли Область.Имя = "П000210014003" Тогда
		ПараметрыФормы.Вставить("НаимКолонкиКод", "Коэффициент");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки501");

	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						СтруктураДопСтрок = Новый Структура;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							
							СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	СведенияОФизЛице = мДанныеОтчета.ФизЛицо;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД", СтруктураРеквизитовФормы.КНД);
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период", СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО", СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг", СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг", СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",               СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация));
	
	ПараметрыВыгрузки.Вставить("ЭтоФизЛицоБезИНН", СтруктураРеквизитовФормы.ИП
		И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация.ИНН));
	
	ПараметрыВыгрузки.Вставить("ДатаРожд",        Формат(СведенияОФизЛице.ДатаРождения, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ОКСМ",            СокрЛП(СведенияОФизЛице.КодСтраныГражданства));
	ПараметрыВыгрузки.Вставить("СтатусНп",        СокрЛП(СведенияОФизЛице.СтатусНалогоплательщика));
	ПараметрыВыгрузки.Вставить("УдЛичнКодВидДок", СокрЛП(СведенияОФизЛице.КодВидаДокумента));
	ПараметрыВыгрузки.Вставить("УдЛичнСерНомДок", СокрЛП(СведенияОФизЛице.СерияНомерДокумента));
	ПараметрыВыгрузки.Вставить("УдЛичнДатаДок",   Формат(СведенияОФизЛице.ДатаВыдачи, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("УдЛичнВыдДок",    СокрЛП(СведенияОФизЛице.КемВыданДокумент));
	
	ПараметрыВыгрузки.Вставить("Индекс", СокрЛП(СведенияОФизЛице.АдресИндекс));
	ПараметрыВыгрузки.Вставить("КодРегион", СокрЛП(СведенияОФизЛице.АдресКодРегиона));
	ПараметрыВыгрузки.Вставить("Район", СокрЛП(СведенияОФизЛице.АдресРайон));
	ПараметрыВыгрузки.Вставить("Город", СокрЛП(СведенияОФизЛице.АдресГород));
	ПараметрыВыгрузки.Вставить("НаселПункт", СокрЛП(СведенияОФизЛице.АдресНаселенныйПункт));
	ПараметрыВыгрузки.Вставить("Улица", СокрЛП(СведенияОФизЛице.АдресУлица));
	ПараметрыВыгрузки.Вставить("Дом", СокрЛП(СведенияОФизЛице.АдресНомерДома));
	ПараметрыВыгрузки.Вставить("Корпус", СокрЛП(СведенияОФизЛице.АдресНомерКорпуса));
	ПараметрыВыгрузки.Вставить("Кварт", СокрЛП(СведенияОФизЛице.АдресНомерКвартиры));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_VODANAL");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ВоднНалог");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
			+ "_" + ПараметрыВыгрузки.КодНО
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
			?(ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг), "000000000000"),
			СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	Перем Индекс, ИндексСтр;
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("250");
	ВозможныеКодыПоМесту.Добавить("255");
	
	ВозможныеКодыПериода = "21|22|23|24|51|54|55|56";
	
	ВозможныеКодыФормыРеорганизции = "0|1|2|3|5|6";
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) И СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			ОписаниеОшибки = "Задан ИНН налогоплательщика, не состоящий из 12 цифр.";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС("Не задана фамилия налогоплательщика.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС("Не задано имя налогоплательщика.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "Не задан ИНН налогоплательщика.";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			ОписаниеОшибки = "Задан ИНН налогоплательщика, не состоящий из 10 цифр.";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			СообщитьВТС("Не задан КПП налогоплательщика.", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			ОписаниеОшибки = "Задан КПП налогоплательщика, не состоящий из 9 символов.";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "КПП");
			СтатусПроверки = Ложь;
		Иначе
			Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
				Символы56КПП = Сред(ПараметрыВыгрузки.КППОрг, 5, 2);
				Если ПараметрыВыгрузки.ПоМесту = "250" Тогда
					Если НЕ (Символы56КПП = "36" ИЛИ Символы56КПП = "76") Тогда
						СообщитьВТС("Если код места представления декларации равен 250, 5-й и 6-й символы КПП организации должны быть равны ""36"" или ""76"".", "Титульный", "КПП");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("Не задано наименование налогоплательщика.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа.", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭД) Тогда
		СообщитьВТС("Не задан код по ОКВЭД.", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		СообщитьВТС("Задано некорректное значение кода по ОКВЭД. Допустимы значения, соответствующие шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места, по которому представляется декларация.", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код места, по которому представляется декларация.", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти(ВозможныеКодыПериода, ПараметрыВыгрузки.Период) = 0 Тогда
		СообщитьВТС("Задано некорректное значение кода налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ПрПодп = "2")
		И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ПрПодп = "2")
		И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		СообщитьВТС("Не задано наименование документа, удостоверяющего полномочия представителя.", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации (ликвидации).", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			Если СтрНайти(ВозможныеКодыФормыРеорганизции, ПараметрыВыгрузки.ФормРеорг) = 0 Тогда
				СообщитьВТС("Задано некорректное значение кода формы реорганизации (ликвидации).", "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			Иначе
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации.", "Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации.", "Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Сведения о физическом лице.
	ВозможныеСтатусыНП = Новый Массив;
	ВозможныеСтатусыНП.Добавить("1");
	ВозможныеСтатусыНП.Добавить("2");
	ПроверятьУдЛичн = Ложь;
	ПроверятьАдрес = Ложь;
	Если ПараметрыВыгрузки.ЭтоФизЛицоБезИНН Тогда // это физлицо без ИНН
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДатаРожд) Тогда
			СообщитьВТС("В сведениях о физическом лице не задана дата рождения.",
			"ФизЛицо", "ДатаРождения");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ДлинаОКСМ = СтрДлина(ПараметрыВыгрузки.ОКСМ);
		Если ДлинаОКСМ <> 3 Тогда
			СообщитьВТС("В сведениях о физическом лице не" + ?(ДлинаОКСМ = 0, "", "верно")
			+ " задан код страны гражданства.", "ФизЛицо", "КодСтраныГражданства");
			СтатусПроверки = Ложь;
		КонецЕсли;
		СтатусНП = СокрЛП(ПараметрыВыгрузки.СтатусНП);
		Если ВозможныеСтатусыНП.Найти(СтатусНП) = Неопределено Тогда
			СообщитьВТС("В сведениях о физическом лице не" + ?(НЕ ЗначениеЗаполнено(СтатусНП), "", "верно")
			+ " задан статус налогоплательщика.", "ФизЛицо", "СтатусНалогоплательщика");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ПроверятьУдЛичн = Истина;
		ПроверятьАдрес = Истина;
	ИначеЕсли ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда // это физлицо с ИНН
		СтатусНП = СокрЛП(ПараметрыВыгрузки.СтатусНП);
		Если ЗначениеЗаполнено(СтатусНП) Тогда
			Если ВозможныеСтатусыНП.Найти(СтатусНП) = Неопределено Тогда
				СообщитьВТС("В сведениях о физическом лице неверно задан статус налогоплательщика.",
				"ФизЛицо", "СтатусНалогоплательщика");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнКодВидДок)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнСерНомДок)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнДатаДок)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнВыдДок) Тогда
			ПроверятьУдЛичн = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.Индекс)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КодРегион)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.Район)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.Город)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.НаселПункт)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.Улица)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.Дом)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.Корпус)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.Кварт) Тогда
			ПроверятьАдрес = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПроверятьУдЛичн Тогда
		ДлинаКодВидДок = СтрДлина(ПараметрыВыгрузки.УдЛичнКодВидДок);
		Если ДлинаКодВидДок <> 2 Тогда
			СообщитьВТС("В сведениях о физическом лице не" + ?(ДлинаКодВидДок = 0, "", "верно")
			+ " задан код вида документа.", "ФизЛицо", "КодВидаДокумента");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнСерНомДок) Тогда
			СообщитьВТС("В сведениях о физическом лице не заданы серия и номер документа.",
			"ФизЛицо", "СерияНомерДокумента");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнДатаДок) Тогда
			СообщитьВТС("В сведениях о физическом лице не задана дата выдачи документа.",
			"ФизЛицо", "ДатаВыдачи");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнВыдДок) Тогда
			СообщитьВТС("В сведениях о физическом лице не задано наименование органа, выдавшего документ.",
			"ФизЛицо", "КемВыданДокумент");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПроверятьАдрес Тогда
		ДлинаКодРегион = СтрДлина(ПараметрыВыгрузки.КодРегион);
		Если ДлинаКодРегион <> 2 Тогда
			СообщитьВТС("В сведениях о физическом лице не" + ?(ДлинаКодРегион = 0, "", "верно")
			+ " задан код региона.", "ФизЛицо", "АдресКодРегиона");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	Раздел1 = мДанныеОтчета.Раздел1;
	ЗаполненРаздел1 = Ложь;
	Для Каждого СтраницаРаздела1 Из Раздел1 Цикл
		Данные1 = СтраницаРаздела1.Данные[0].Значение;
		Если СтраницаПуста(Данные1, "Раздел1", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполненРаздел1 = Истина;
		НомерСтраницы1 = Раздел1.Индекс(СтраницаРаздела1) + 1;
		// КБК.
		КБКДлина = СтрДлина(СокрЛП(Данные1["П000100001003"]));
		Если КБКДлина <> 20 Тогда
			СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1
			+ ": не" + ?(КБКДлина = 0, "", "верно")
			+ " задан код бюджетной классификации.", "Раздел1", "П000100001003", НомерСтраницы1);
			СтатусПроверки = Ложь;
		КонецЕсли;
		// Проверка многострочной части текущего экземпляра раздела 1.
		ЕстьЗаполненнаяМногострочнаяЧастьРаздела1 = Ложь;
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Пока Данные1.Свойство("П000100002003_" + ИндексСтр) Цикл
			ОКТМО = СокрЛП(Данные1["П000100002003_" + ИндексСтр]);
			Сумма = Данные1["П000100003003_" + ИндексСтр];
			Если НЕ (ЗначениеЗаполнено(ОКТМО)
				ИЛИ ЗначениеЗаполнено(Сумма)) Тогда
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Продолжить;
			КонецЕсли;
			ЕстьЗаполненнаяМногострочнаяЧастьРаздела1 = Истина;
			// ОКТМО.
			ОКТМОДлина = СтрДлина(ОКТМО);
			Если НЕ (ОКТМОДлина = 11 ИЛИ ОКТМОДлина = 8) Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1 + ": в строке "
				+ ИндексСтр + " не" + ?(ОКТМОДлина = 0, "", "верно") + " задан код по ОКТМО.",
				"Раздел1", "П000100002003_" + ИндексСтр, НомерСтраницы1);
				СтатусПроверки = Ложь;
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		КонецЦикла;
		Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела1 Тогда
			СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1
			+ ": в строке 1 не задан код по ОКТМО.",
			"Раздел1", "П000100002003_1" , НомерСтраницы1);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗаполненРаздел1 Тогда
		СообщитьВТС("Раздел 1 не заполнен.", "Раздел1", "П000100001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 2.1.
	// Определение необходимости проверки раздела 2.1.
	ДанныеРаздела21 = ДанныеМногоуровневыхРазделов.Раздел2;
	ПроверятьРаздел21 = Ложь;
	Для каждого Страница010_040 Из ДанныеРаздела21.Строки Цикл
		ЗаполненРаздел21 = НЕ СтраницаПуста(Страница010_040.Данные, "Раздел21_1", ДеревоВыгрузки);
		Если ЗаполненРаздел21 Тогда
			ПроверятьРаздел21 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого Страница050_160 Из Страница010_040.Строки Цикл
			ЗаполненРаздел21 = НЕ СтраницаПуста(Страница050_160.Данные, "Раздел21_2", ДеревоВыгрузки);
			Если ЗаполненРаздел21 Тогда
				ПроверятьРаздел21 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел21 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьРаздел21 Тогда
		ВозможныеКодыЦЗВ = Новый Массив;
		ВозможныеКодыЦЗВ.Добавить("1");
		ВозможныеКодыЦЗВ.Добавить("2");
		ВозможныеКодыЦЗВ.Добавить("3");
		Для каждого Страница010_040 Из ДанныеРаздела21.Строки Цикл
			НомерСтраницы010_040 = ДанныеРаздела21.Строки.Индекс(Страница010_040) + 1;
			// КБК.
			КБКДлина = СтрДлина(СокрЛП(Страница010_040.Данные["П000210001003"]));
			Если КБКДлина <> 20 Тогда
				СообщитьВТС("Раздел 2.1 -> Водный объект " + НомерСтраницы010_040
				+ ": не" + ?(КБКДлина = 0, "", "верно") + " задан код бюджетной классификации.",
				"Раздел2", "П000210001003", НомерСтраницы010_040);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКТМО.
			ОКТМОДлина = СтрДлина(СокрЛП(Страница010_040.Данные["П000210002003"]));
			Если НЕ (ОКТМОДлина = 11 ИЛИ ОКТМОДлина = 8) Тогда
				СообщитьВТС("Раздел 2.1 -> Водный объект " + НомерСтраницы010_040
				+ ": не" + ?(ОКТМОДлина = 0, "", "верно") + " задан код по ОКТМО.",
				"Раздел2", "П000210002003", НомерСтраницы010_040);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Наименование водного объекта.
			Если НЕ ЗначениеЗаполнено(Страница010_040.Данные["П000210003003"]) Тогда
				СообщитьВТС("Раздел 2.1 -> Водный объект " + НомерСтраницы010_040
				+ ": не задано наименование водного объекта.",
				"Раздел2", "П000210003003", НомерСтраницы010_040);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Лицензия на водопользование (серия, номер, вид лицензии).
			Если НЕ ЗначениеЗаполнено(Страница010_040.Данные["П000210004003"]) Тогда
				СообщитьВТС("Раздел 2.1 -> Водный объект " + НомерСтраницы010_040
				+ ": не задана лицензия на водопользование (серия, номер, вид лицензии).",
				"Раздел2", "П000210004003", НомерСтраницы010_040);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ЕстьЗаполненныйЭкземплярСтраницы050_160 = Ложь;
			Для каждого Страница050_160 Из Страница010_040.Строки Цикл
				Если СтраницаПуста(Страница050_160.Данные, "Раздел21_2", ДеревоВыгрузки) Тогда
					Продолжить;
				КонецЕсли;
				ЕстьЗаполненныйЭкземплярСтраницы050_160 = Истина;
				НомерСтраницы050_160 = Страница010_040.Строки.Индекс(Страница050_160) + 1;
				КоординатыСтраницы050_160 = Строка(НомерСтраницы010_040) + "," + Строка(НомерСтраницы050_160);
				КодВодПольз = СокрЛП(Страница050_160.Данные["П000210005003"]);
				КодЦЗВ      = СокрЛП(Страница050_160.Данные["П000210008003"]);
				// Код водопользования.
				КодВодПользДлина = СтрДлина(КодВодПольз);
				Если КодВодПользДлина <> 5 Тогда
					СообщитьВТС("Раздел 2.1 -> Водный объект " + НомерСтраницы010_040
					+ " -> Страница " + НомерСтраницы050_160 + ": не" + ?(КодВодПользДлина = 0, "", "верно")
					+ " задан код водопользования.", "Раздел21", "П000210005003", КоординатыСтраницы050_160);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код цели забора воды.
				Если ВозможныеКодыЦЗВ.Найти(КодЦЗВ) = Неопределено Тогда
					СообщитьВТС("Раздел 2.1 -> Водный объект " + НомерСтраницы010_040
					+ " -> Страница " + НомерСтраницы050_160 + ": не" + ?(НЕ ЗначениеЗаполнено(КодЦЗВ), "", "верно")
					+ " задан код цели забора воды.", "Раздел21", "П000210008003", КоординатыСтраницы050_160);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Строка 130 не должна быть заполнена, если в строке 080 задан код 1.
				Если КодЦЗВ = "1" И ЗначениеЗаполнено(Страница050_160.Данные["П000210013003"]) Тогда
					СообщитьВТС("Раздел 2.1 -> Водный объект " + НомерСтраницы010_040 + " -> Страница "
					+ НомерСтраницы050_160 + ": строка 130 не должна быть заполнена, если в строке 080 задан код ""1"".",
					"Раздел21", "П000210013003", КоординатыСтраницы050_160);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьЗаполненныйЭкземплярСтраницы050_160 Тогда
				СообщитьВТС("Раздел 2.1 -> Водный объект " + НомерСтраницы010_040
				+ " -> Страница 1: должны быть заданы код водопользования и код цели забора воды.",
				"Раздел21", "П000210005003", НомерСтраницы010_040 + ",1");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Раздел 2.2.
	// Определение необходимости проверки раздела 2.2.
	Раздел22 = мДанныеОтчета.Раздел22;
	ПроверятьРаздел22 = Ложь;
	Для Каждого СтраницаРаздела22 Из Раздел22 Цикл
		Данные22 = СтраницаРаздела22.Данные[0].Значение;
		Если СтраницаПуста(Данные22, "Раздел22", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		ПроверятьРаздел22 = Истина;
		Прервать;
	КонецЦикла;
	Если ПроверятьРаздел22 Тогда
		Для Каждого СтраницаРаздела22 Из Раздел22 Цикл
			Данные22 = СтраницаРаздела22.Данные[0].Значение;
			Если СтраницаПуста(Данные22, "Раздел22", ДеревоВыгрузки) Тогда
				Продолжить;
			КонецЕсли;
			НомерСтраницы22 = Раздел22.Индекс(СтраницаРаздела22) + 1;
			// КБК.
			КБКДлина = СтрДлина(СокрЛП(Данные22["П000220001003"]));
			Если КБКДлина <> 20 Тогда
				СообщитьВТС("Раздел 2.2 -> Страница " + НомерСтраницы22 + ": не" + ?(КБКДлина = 0, "", "верно")
				+ " задан код бюджетной классификации.", "Раздел22", "П000220001003", НомерСтраницы22);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКТМО.
			ОКТМОДлина = СтрДлина(СокрЛП(Данные22["П000220002003"]));
			Если НЕ (ОКТМОДлина = 11 ИЛИ ОКТМОДлина = 8) Тогда
				СообщитьВТС("Раздел 2.2 -> Страница " + НомерСтраницы22 + ": не" + ?(ОКТМОДлина = 0, "", "верно")
				+ " задан код по ОКТМО.", "Раздел22", "П000220002003", НомерСтраницы22);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Наименование водного объекта.
			Если НЕ ЗначениеЗаполнено(Данные22["П000220003003"]) Тогда
				СообщитьВТС("Раздел 2.2 -> Страница " + НомерСтраницы22 + ": не задано наименование водного объекта.",
				"Раздел22", "П000220003003", НомерСтраницы22);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Лицензия на водопользование (серия, номер, вид лицензии).
			// Договор на водопользование(договор пользования водными объектами).
			Если НЕ (ЗначениеЗаполнено(Данные22["П000220004003"])
				ИЛИ ЗначениеЗаполнено(Данные22["П000220005003"])) Тогда
				СообщитьВТС("Раздел 2.2 -> Страница " + НомерСтраницы22 + ": не заданы лицензия на водопользование (серия, номер, вид лицензии) и(или) договор на водопользование(договор пользования водными объектами).",
				"Раздел22", "П000220004003", НомерСтраницы22);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Код водопользования.
			КодВодПольз = СокрЛП(Данные22["П000220006003"]);
			КодВодПользДлина = СтрДлина(КодВодПольз);
			Если КодВодПользДлина <> 5 Тогда
				СообщитьВТС("Раздел 2.2 -> Страница " + НомерСтраницы22 + ": не" + ?(КодВодПользДлина = 0, "", "верно")
				+ " задан код водопользования.", "Раздел22", "П000220006003", НомерСтраницы22);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Перем Индекс, ИндексСтр;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Раздел 1.
	ДанныеРаздела1 = мДанныеОтчета.Раздел1;
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	Для Каждого СтраницаРаздела Из ДанныеРаздела1 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзСумНалПУ = СкопироватьУзел(УзелРодитель, СумНалПУ);
		Для каждого Эл Из ЭкзСумНалПУ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть раздела 1.
		СумПУ = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "СумПУ");
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Пока ДанныеСтраницы.Свойство("П000100002003_" + ИндексСтр) Цикл
			ЭкзСумПУ = СкопироватьУзел(ЭкзСумНалПУ, СумПУ);
			Для Каждого Эл Из ЭкзСумПУ.Строки Цикл
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + ИндексСтр]);
			КонецЦикла;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 2.
	РасчНалБаза = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНалБаза");
	// Раздел 2.1.
	// Определение необходимости выгрузки раздела 2.1.
	ДанныеРаздела21 = ДанныеМногоуровневыхРазделов.Раздел2;
	ВыгружатьРаздел21 = Ложь;
	Для каждого Страница010_040 Из ДанныеРаздела21.Строки Цикл
		ЗаполненРаздел21 = НЕ СтраницаПуста(Страница010_040.Данные, "Раздел21_1", УзелРодитель.Владелец());
		Если ЗаполненРаздел21 Тогда
			ВыгружатьРаздел21 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого Страница050_160 Из Страница010_040.Строки Цикл
			ЗаполненРаздел21 = НЕ СтраницаПуста(Страница050_160.Данные, "Раздел21_2", УзелРодитель.Владелец());
			Если ЗаполненРаздел21 Тогда
				ВыгружатьРаздел21 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ВыгружатьРаздел21 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыгружатьРаздел21 Тогда
		// Строки 010-040 раздела 2.1.
		РасчНБЗабВод = ПолучитьПодчиненныйЭлемент(РасчНалБаза, "РасчНБЗабВод");
		Для каждого Страница010_040 Из ДанныеРаздела21.Строки Цикл
			ЭкзРасчНБЗабВод = СкопироватьУзел(РасчНалБаза, РасчНБЗабВод);
			Для каждого Эл Из ЭкзРасчНБЗабВод.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, Страница010_040.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Строки 050-160 раздела 2.1.
			РасчНБКод = ПолучитьПодчиненныйЭлемент(ЭкзРасчНБЗабВод, "РасчНБКод");
			Для каждого Страница050_160 Из Страница010_040.Строки Цикл
				ЭкзРасчНБКод = СкопироватьУзел(ЭкзРасчНБЗабВод, РасчНБКод);
				Для каждого Эл Из ЭкзРасчНБКод.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, Страница050_160.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	// Раздел 2.2.
	// Определение необходимости выгрузки раздела 2.2.
	ДанныеРаздела22 = мДанныеОтчета.Раздел22;
	ВыгружатьРаздел22 = Ложь;
	Для Каждого СтраницаРаздела22 Из ДанныеРаздела22 Цикл
		Если СтраницаПуста(СтраницаРаздела22.Данные[0].Значение, "Раздел22", УзелРодитель.Владелец()) Тогда
			Продолжить;
		КонецЕсли;
		ВыгружатьРаздел22 = Истина;
		Прервать;
	КонецЦикла;
	Если ВыгружатьРаздел22 Тогда
		РасчНБИсклЗабВод = ПолучитьПодчиненныйЭлемент(РасчНалБаза, "РасчНБИсклЗабВод");;
		Для Каждого СтраницаРаздела Из ДанныеРаздела22 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			ЭкзРасчНБИсклЗабВод = СкопироватьУзел(РасчНалБаза, РасчНБИсклЗабВод);
			
			КодВодПольз = СокрЛП(ДанныеСтраницы["П000220006003"]);
			ПервыйСимвол_КодВодПольз = ?(СтрДлина(КодВодПольз) = 5, Лев(КодВодПольз, 1), Неопределено);
			
			Для Каждого Эл Из ЭкзРасчНБИсклЗабВод.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					
					// Переопределение обязательности атрибутов.
					Если (Эл.Код = "ПлощВодПр" И ПервыйСимвол_КодВодПольз = "2")
						ИЛИ (Эл.Код = "КолПроизвЭл" И ПервыйСимвол_КодВодПольз = "3")
						ИЛИ ((Эл.Код = "ОбъемДрев" ИЛИ Эл.Код = "РасстСплав") И ПервыйСимвол_КодВодПольз = "4") Тогда
						Эл.Обязательность = "О";
					КонецЕсли;
					
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(	Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML

	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел2" Тогда
		
		Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница2.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел21" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела2 = НайденнаяСтраница2;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Раздел2" ИЛИ Ячейка.Раздел = "Раздел21" Тогда
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		ИначеЕсли Ячейка.СтрокаПП <> Неопределено
			И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "1");
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_1");
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				Иначе
					Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(Ячейка.ИмяЯчейки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	Иначе
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			Если ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				
				ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
				
				КолСтрокВДеревеДанныхРаздел2 = Макс(ДеревоДанныхРаздел2.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРаздел2 = 1 По КолСтрокВДеревеДанныхРаздел2 Цикл
					
					ЭлементРаздел2 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРаздел2.КолонкаРазделыОтчета              = "Водный объект " + НомерСтраницыРаздел2;
					ЭлементРаздел2.КолонкаРазделыОтчетаСокрНаим      = "Раздел2";
					ЭлементРаздел2.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел2;
					ЭлементРаздел2.ИндексКартинки                    = 0;
					ЭлементРаздел2.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРаздел2.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхРаздел21
						= Макс(ДеревоДанныхРаздел2.Строки[НомерСтраницыРаздел2 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыРаздел21 = 1 По КолСтрокВДеревеДанныхРаздел21 Цикл
						
						ЭлементРаздел21 = ЭлементРаздел2.ПолучитьЭлементы().Добавить();
						
						ЭлементРаздел21.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницыРаздел21;
						ЭлементРаздел21.КолонкаРазделыОтчетаСокрНаим      = "Раздел21";
						ЭлементРаздел21.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел21;
						ЭлементРаздел21.ИндексКартинки                    = 1;
						ЭлементРаздел21.РазделМногостраничный             = ЭлементРаздел2.РазделМногостраничный;
						ЭлементРаздел21.РазделМногострочный               = ЭлементРаздел2.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21" Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		#КонецЕсли
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить водный объект";
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Заголовок
			= "Удалить водный объект";
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
		#КонецЕсли
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы)
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Раздел1" Тогда
		
		ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, ИдГруппы);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочного блока.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + ИдГруппы].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела = ТаблицаДопСтрокГруппы;
		
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если НаимРаздела = "Раздел1" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ЗагТекущейСтраницыПанели = СтрТаблицаСтраницы.Представление;
			
			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) Тогда
				СтрТаблицаСтраницы.Представление = "Новая страница";
			КонецЕсли;
			
			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многостраничные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел22" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ЗагТекущейСтраницыПанели = СтрТаблицаСтраницы.Представление;
			
			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) Тогда
				СтрТаблицаСтраницы.Представление = "Новая страница";
			КонецЕсли;
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многоуровневые разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел2" ИЛИ НаимРаздела = "Раздел21" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(НаимРаздела, 7)]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ТекВетка.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(НаимРаздела, 7)]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы)
	
	Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	Иначе
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные и многострочные разделы.
	//
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей.
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными.
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела.
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "03_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "03_1");
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		
	// Многостраничные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел22" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		
	// Многоуровневые разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел2"
		ИЛИ ИмяТекРаздела = "Раздел21" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(ИмяТекРаздела, 7)]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет", ОписаниеОповещения);
	Иначе
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДеревоРазделовВФормеОтчета(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		ЗаполнитьПериодОтчета(ЭтаФорма);
	Иначе
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Модифицированность = Истина;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		ДобавитьСтраницуВРазделе2НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21" Тогда
		
		Родитель21 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя21 = Родитель21.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе21НаСервере(НомСтраницыРодителя21);
		
	Иначе
		
		ВставитьДополнительнуюСтраницуНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим <> "Раздел2" Тогда
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "03_1");
		Если Обл <> Неопределено Тогда
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе2НаСервере()
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	// Ур. 0.
	ВеткаРаздел2 = ДеревоДанныхРаздел2.Строки.Добавить();
	ВеткаРаздел2.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаРаздел21 = ВеткаРаздел2.Строки.Добавить();
	ВеткаРаздел21.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел2.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел2 = ДеревоДанныхРаздел2.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаРаздел2.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
	ВеткаРаздел21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел2"));
	ВеткаРаздел2.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница2.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе21НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	// Ур. 0.
	ВеткаРаздел2 = ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел21 = ВеткаРаздел2.Строки.Добавить();
	ВеткаРаздел21.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел21 = ДеревоДанныхРаздел2.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаРаздел21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
	ВеткаРаздел21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		НСтрСтр = Формат(НСтр, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел21" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			// Стр. 100 = стр. 101 + стр. 102.
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210010003, ОбластьИмя) > 0) Тогда
				Форма.ТабличныйДокумент.Области.П000210010003.Значение
					= Форма.ТабличныйДокумент.Области.П000210010103.Значение
					+ Форма.ТабличныйДокумент.Области.П000210010203.Значение;
			КонецЕсли;
			
			// Стр. 060 = стр. 070 + стр. 100.
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210006003, ОбластьИмя) > 0) Тогда
				Форма.ТабличныйДокумент.Области.П000210006003.Значение
					= Форма.ТабличныйДокумент.Области.П000210007003.Значение
					+ Форма.ТабличныйДокумент.Области.П000210010003.Значение;
			КонецЕсли;
			
			КодЦелиЗабораВоды = СокрЛП(Форма.ТабличныйДокумент.Области.П000210008003.Значение);
			Если КодЦелиЗабораВоды <> "1" Тогда
				// Стр. 120 = стр. 110 х 5.
				Если ЗначениеЗаполнено(ОбластьИмя)
					И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210012003, ОбластьИмя) > 0) Тогда
					Форма.ТабличныйДокумент.Области.П000210012003.Значение
						= Форма.ТабличныйДокумент.Области.П000210011003.Значение * 5;
				КонецЕсли;
			КонецЕсли;
			
			// Стр. 160 = стр. 101 х Окр15как20(стр. 110 х стр. 130 х стр. 140 х стр. 150)
			//			+ стр. 102 х Окр15как20(стр. 120 х стр. 130 х стр. 140 х стр. 150).
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210016003, ОбластьИмя) > 0) Тогда
				Стр130 = Форма.ТабличныйДокумент.Области.П000210013003.Значение;
				Стр130 = ?(Стр130 = 0, 1, Стр130);
				Стр140 = Форма.ТабличныйДокумент.Области.П000210014003.Значение;
				Стр140 = ?(Стр140 = 0, 1, Стр140);
				Стр150 = Форма.ТабличныйДокумент.Области.П000210015003.Значение;
				Стр150 = ?(Стр150 = 0, 1, Стр150);
				Форма.ТабличныйДокумент.Области.П000210016003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					  Форма.ТабличныйДокумент.Области.П000210010103.Значение
					* Окр(Форма.ТабличныйДокумент.Области.П000210011003.Значение * Стр130 * Стр140 * Стр150)
					+ Форма.ТабличныйДокумент.Области.П000210010203.Значение
					* Окр(Форма.ТабличныйДокумент.Области.П000210012003.Значение * Стр130 * Стр140 * Стр150));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		РасчетВСтруктуре(Форма, ИмяРаздела);
		
	ИначеЕсли ИмяРаздела = "" Тогда
		Расчет(Форма, "Раздел22");
		Расчет(Форма, "Раздел21");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста)
	
	ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ИмяЛиста];
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Страница.Данные[0].Пометка = Ложь; // для инициализации обмена с сервером
		
		Если ИмяЛиста = "Раздел22" Тогда
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				ГруппаКодов = Лев(СокрЛП(Форма.ТабличныйДокумент.Области.П000220006003.Значение), 1);
				Если ГруппаКодов = "5" Тогда
					Продолжить;// авторасчет не производится (возможен ручной ввод).
				КонецЕсли;
				Строка130 = 0;
				Если ГруппаКодов = "2" Тогда
					Строка130
						= Форма.ТабличныйДокумент.Области.П000220007003.Значение
						* Окр(Форма.ТабличныйДокумент.Области.П000220011003.Значение
						* Форма.ТабличныйДокумент.Области.П000220012003.Значение) / 4;
				ИначеЕсли ГруппаКодов = "3" Тогда
					Строка130
						= Форма.ТабличныйДокумент.Области.П000220008003.Значение
						* Окр(Форма.ТабличныйДокумент.Области.П000220011003.Значение
						* Форма.ТабличныйДокумент.Области.П000220012003.Значение);
				ИначеЕсли ГруппаКодов = "4" Тогда
					Строка130
						= Форма.ТабличныйДокумент.Области.П000220009003.Значение
						* Форма.ТабличныйДокумент.Области.П000220010003.Значение
						* Окр(Форма.ТабличныйДокумент.Области.П000220011003.Значение
						* Форма.ТабличныйДокумент.Области.П000220012003.Значение) / 100;
				КонецЕсли;
				Строка130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка130);
				Форма.ТабличныйДокумент.Области.П000220013003.Значение = Строка130;
			Иначе
				ГруппаКодов = Лев(СокрЛП(Данные.П000220006003), 1);
				Если ГруппаКодов = "5" Тогда
					Продолжить;// авторасчет не производится (возможен ручной ввод).
				КонецЕсли;
				Строка130 = 0;
				Если ГруппаКодов = "2" Тогда
					Строка130
						= Данные.П000220007003
						* Окр(Данные.П000220011003
						* Данные.П000220012003) / 4;
				ИначеЕсли ГруппаКодов = "3" Тогда
					Строка130
						= Данные.П000220008003
						* Окр(Данные.П000220011003
						* Данные.П000220012003);
				ИначеЕсли ГруппаКодов = "4" Тогда
					Строка130
						= Данные.П000220009003
						* Данные.П000220010003
						* Окр(Данные.П000220011003
						* Данные.П000220012003) / 100;
				КонецЕсли;
				Строка130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка130);
			КонецЕсли;
			Данные.Вставить("П000220013003", Строка130);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	Если ИмяРаздела = "Раздел21" Тогда
		
		ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВеткаДереваЗначений = ДеревоДанныхРаздел2.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];
		КонецЕсли;
		
		Для каждого ВеткаРаздел2 Из ДеревоДанныхРаздел2.Строки Цикл
			Для каждого ВеткаРаздел21 Из ВеткаРаздел2.Строки Цикл
				
				Если ВеткаРаздел21 = АктивнаяВеткаДереваЗначений Тогда
					Для каждого Показатель Из ВеткаРаздел21.Данные Цикл
						ВеткаРаздел21.Данные.Вставить(Показатель.Ключ,
							Форма.ТабличныйДокумент.Области[Показатель.Ключ].Значение);
					КонецЦикла;
				КонецЕсли;
				
				ВеткаРаздел21.Данные.Вставить("П000210010003",
					ВеткаРаздел21.Данные.П000210010103 + ВеткаРаздел21.Данные.П000210010203);
				
				ВеткаРаздел21.Данные.Вставить("П000210006003",
					ВеткаРаздел21.Данные.П000210007003 + ВеткаРаздел21.Данные.П000210010003);
				
				КодЦелиЗабораВоды = СокрЛП(ВеткаРаздел21.Данные.П000210008003);
				Если КодЦелиЗабораВоды <> "1" Тогда
					ВеткаРаздел21.Данные.Вставить("П000210012003",
						ВеткаРаздел21.Данные.П000210011003 * 5);
				КонецЕсли;
				
				Стр130 = ВеткаРаздел21.Данные.П000210013003;
				Стр130 = ?(Стр130 = 0, 1, Стр130);
				Стр140 = ВеткаРаздел21.Данные.П000210014003;
				Стр140 = ?(Стр140 = 0, 1, Стр140);
				Стр150 = ВеткаРаздел21.Данные.П000210015003;
				Стр150 = ?(Стр150 = 0, 1, Стр150);
				
				ВеткаРаздел21.Данные.Вставить("П000210016003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					ВеткаРаздел21.Данные.П000210010103
					* Окр(ВеткаРаздел21.Данные.П000210011003 * Стр130 * Стр140 * Стр150)
					+ ВеткаРаздел21.Данные.П000210010203
					* Окр(ВеткаРаздел21.Данные.П000210012003 * Стр130 * Стр140 * Стр150)));
				
				Если ВеткаРаздел21 = АктивнаяВеткаДереваЗначений Тогда
					Форма.ТабличныйДокумент.Области["П000210010003"].Значение
						= ВеткаРаздел21.Данные.П000210010003;
					Форма.ТабличныйДокумент.Области["П000210006003"].Значение
						= ВеткаРаздел21.Данные.П000210006003;
					Форма.ТабличныйДокумент.Области["П000210012003"].Значение
						= ВеткаРаздел21.Данные.П000210012003;
					Форма.ТабличныйДокумент.Области["П000210016003"].Значение
						= ВеткаРаздел21.Данные.П000210016003;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		
		ЭлементыДанныхФормыДерево = ТекущиеДанные.ПолучитьЭлементы();
		ИмяКолонки = "КолонкаНомерСтраницыРазделаОтчета";
		ИскомоеЗначение = КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1;
		ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
		Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
			ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
			Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
				ТекущаяСтраницаРазделаПослеУдаления = ЭлементДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел2НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел21НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	Иначе
		
		УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
		НомерСтраницы = 1;
		Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			СтраницаРаздела.КолонкаРазделыОтчета = "Стр. " + НомерСтраницы;
			СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
		КонецЦикла;
		Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
		КонецЕсли;
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Истина;
				Обл.Текст = "Удалить страницу";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел2НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	КолСтраницРаздел2 = ДеревоДанныхРаздел2.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел2, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхРаздел2.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница2.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел2", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел21НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	КолСтраницРаздел21 = ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел21, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 1.
	ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел21", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтаФорма, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк.
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	
	Инд = 1;
	Пока ТекТабличноеПоле.Области.Найти(
		"УдалитьСтроку" + ИмяГруппы + "03_" + Формат(Инд, "ЧГ=")) <> Неопределено Цикл
		Обл = ТекТабличноеПоле.Область("УдалитьСтроку" + ИмяГруппы + "03_" + Формат(Инд, "ЧГ="));
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Инд = Инд + 1;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;
	
	Если ИмяТекущейСтраницы = "Раздел1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки= ИмяПервойЯчейки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=");
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат(НСтр, "ЧГ=");
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат(НСтр - 1, "ЧГ=");
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + Формат(НомТекущейСтроки, "ЧГ=");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "03_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЕсли;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда
		СобратьДанные();
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "КодСтраныГражданства" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму(
			"Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор кода страны";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	ИначеЕсли Лев(Область.Имя, 5) = "Адрес" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области.АдресИндекс.Значение);
		РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области.АдресКодРегиона.Значение);
		РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.АдресКодРегиона.Значение);
		РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.АдресРайон.Значение);
		РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.АдресГород.Значение);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.АдресНаселенныйПункт.Значение);
		РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.АдресУлица.Значение);
		РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.АдресНомерДома.Значение);
		РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.АдресНомерКорпуса.Значение);
		РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.АдресНомерКвартиры.Значение);
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
			
		Если Регион.Количество() > 0 Тогда
			
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
			
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
																												  + РоссийскийАдрес["Регион"] + ","
																												  + РоссийскийАдрес["Район"] + ","
																												  + РоссийскийАдрес["Город"] + ","
																												  + РоссийскийАдрес["НаселенныйПункт"] + ","
																												  + РоссийскийАдрес["Улица"] + ","
																												  + РоссийскийАдрес["Дом"] + ","
																												  + РоссийскийАдрес["Корпус"] + ","
																												  + РоссийскийАдрес["Квартира"]);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
		
	ИначеЕсли Область.Имя = "П000210004003"
		ИЛИ Область.Имя = "П000220004003" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Парам = Новый Структура;
		Парам.Вставить("НачальноеЗначениеВыбора", Область.Значение);
		ФормаВводаЛицензии = ПолучитьФорму("Отчет.РегламентированныйОтчетВода.Форма.ФормаВводаЛицензии", Парам);
		
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВводаЛицензииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВводаЛицензии.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВводаЛицензии.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаЛицензии.Открыть();
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда 
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКВЭД") > 0 Тогда
		Если НЕ ПустаяСтрока(ЗначПоказателя) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПоказателя) Тогда
			ТекстСообщения = "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!" + Символы.ПС
						   + "Допустимы значения, соответствующие следующим шаблонам:" + Символы.ПС
						   + """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяПоказателя = "П000210005003" ИЛИ ИмяПоказателя = "П000210008003" Тогда
		ЗаполнитьЗначение_Раздел21Строка110();
	КонецЕсли;
	Если ИмяПоказателя = "П000210008003" Тогда
		ЗаполнитьЗначение_Раздел21Строка120();
		ЗаполнитьЗначение_Раздел21Строка130();
		ЗаполнитьЗначение_Раздел21Строка150();
	КонецЕсли;
	Если ИмяПоказателя = "П000220006003" Тогда
		ЗаполнитьЗначение_Раздел22Строка110();
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ЗаполнитьПериодОтчета(ЭтаФорма);
		
	Иначе
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		Если ТабличныйДокумент.Области.Найти("АдресИндекс") <> Неопределено Тогда
			ТабличныйДокумент.Области.АдресИндекс.Значение = РоссийскийАдрес_["Индекс"];
			ТабличныйДокумент.Области.АдресКодРегиона.Значение = РоссийскийАдрес_["КодРегиона"];
			ТабличныйДокумент.Области.АдресРайон.Значение = РоссийскийАдрес_["Район"];
			ТабличныйДокумент.Области.АдресГород.Значение = РоссийскийАдрес_["Город"];
			ТабличныйДокумент.Области.АдресНаселенныйПункт.Значение = РоссийскийАдрес_["НаселенныйПункт"];
			ТабличныйДокумент.Области.АдресУлица.Значение = РоссийскийАдрес_["Улица"];
			ТабличныйДокумент.Области.АдресНомерДома.Значение = РоссийскийАдрес_["Дом"];
			ТабличныйДокумент.Области.АдресНомерКорпуса.Значение = РоссийскийАдрес_["Корпус"];
			ТабличныйДокумент.Области.АдресНомерКвартиры.Значение = РоссийскийАдрес_["Квартира"];
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		РеквизитыЭлемента = РеквизитыЭлементаСправочника(Результат);
		Если Область.Значение = РеквизитыЭлемента.ЦифровойКод Тогда
			Область.Очистить();
		Иначе
			Область.Значение = РеквизитыЭлемента.ЦифровойКод;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаЛицензииЗавершение(Результат, ДопПараметры) Экспорт
	
	Область = ДопПараметры.Область;
	Если Результат <> Неопределено Тогда
		Если СтрДлина(СокрЛП(Результат)) <= 14 Тогда
			Область.Значение = Результат;
			Модифицированность = Истина;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя ""Лицензия на водопользование"" не должна превышать 14 символов.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция РеквизитыЭлементаСправочника(Результат)
	
	Возврат Новый Структура("ЦифровойКод", Результат.Код);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные()
	
	СформироватьРаздел1();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1()
	
	Перем ИмяТаблСтраницРаздела1;
	Перем ИмяТаблСтраницРаздела22;
	
	Если НЕ (мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ИмяТаблСтраницРаздела1)
		И мСтруктураМногостраничныхРазделов.Свойство("Раздел22", ИмяТаблСтраницРаздела22)) Тогда
		Возврат;
	КонецЕсли;
	
	// Промежуточная таблица значений. Имена колонок соответствуют именам показателей раздела 1.
	ПромТЗ = Новый ТаблицаЗначений;
	ОписаниеТиповСтрока20 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20));
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11));
	ПромТЗ.Колонки.Добавить("П000100001003", ОписаниеТиповСтрока20);
	ПромТЗ.Колонки.Добавить("П000100002003", ОписаниеТиповСтрока11);
	ПромТЗ.Колонки.Добавить("П000100003003", СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
	
	// Заполнение промежуточной таблицы значений данными раздела 2.1.
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	КолВетокРазд21СоСтроками010_040 = ДеревоДанныхРаздел2.Строки.Количество();
	Для Инд = 0 По КолВетокРазд21СоСтроками010_040 - 1 Цикл
		ВеткаСоСтроками010_040 = ДеревоДанныхРаздел2.Строки[Инд];
		КолВетокРазд21СоСтроками050_160 = ВеткаСоСтроками010_040.Строки.Количество();
		Для Инд_ = 0 По КолВетокРазд21СоСтроками050_160 - 1 Цикл
			ВеткаСоСтроками050_160 = ВеткаСоСтроками010_040.Строки[Инд_];
			НовСтрТЗ = ПромТЗ.Добавить();
			НовСтрТЗ.П000100001003 = СокрЛП(ВеткаСоСтроками010_040.Данные["П000210001003"]);
			НовСтрТЗ.П000100002003 = СокрЛП(ВеткаСоСтроками010_040.Данные["П000210002003"]);
			НовСтрТЗ.П000100003003 = ВеткаСоСтроками050_160.Данные["П000210016003"];
		КонецЦикла;
	КонецЦикла;
	
	// Заполнение промежуточной таблицы значений данными раздела 2.2.
	ТаблСтраницРаздела22 = ЭтаФорма[ИмяТаблСтраницРаздела22];
	КолСтраницРаздела22 = ТаблСтраницРаздела22.Количество();
	Для Инд = 0 По КолСтраницРаздела22 - 1 Цикл
		ДанныеСтраницыРаздела22 = ТаблСтраницРаздела22[Инд].Данные[0].Значение;
		НовСтрТЗ = ПромТЗ.Добавить();
		НовСтрТЗ.П000100001003 = СокрЛП(ДанныеСтраницыРаздела22["П000220001003"]);
		НовСтрТЗ.П000100002003 = СокрЛП(ДанныеСтраницыРаздела22["П000220002003"]);
		НовСтрТЗ.П000100003003 = ДанныеСтраницыРаздела22["П000220013003"];
	КонецЦикла;
	
	ПромТЗ.Свернуть("П000100001003,П000100002003", "П000100003003");
	ПромТЗ.Сортировать("П000100001003,П000100002003");
	
	// Удаление первой незаполненной строки промежуточной таблицы (случай,
	// когда в разделе 2.1 или в разделе 2.2 нет данных для заполнения раздела 1).
	Если ПромТЗ.Количество() > 1 Тогда
		Если НЕ (ЗначениеЗаполнено(ПромТЗ[0].П000100001003)
			ИЛИ ЗначениеЗаполнено(ПромТЗ[0].П000100002003)
			ИЛИ ЗначениеЗаполнено(ПромТЗ[0].П000100003003)) Тогда
			ПромТЗ.Удалить(ПромТЗ[0]);
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка раздела 1.
	ТаблСтраницРаздела1 = ЭтаФорма[ИмяТаблСтраницРаздела1];
	КолСтраницРаздела1 = ТаблСтраницРаздела1.Количество();
	Для ОбратныйИндекс = 1 По КолСтраницРаздела1 Цикл
		Инд = КолСтраницРаздела1 - ОбратныйИндекс;
		СтрокаТаблицы = ТаблСтраницРаздела1[Инд];
		Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
			Если ТаблСтраницРаздела1.Количество() = 1 Тогда
				// В таблице должно быть не менее одной строки.
				СтрокаТаблицы.АктивнаяСтраница = Истина;
			Иначе
				ТаблСтраницРаздела1.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ОчиститьТабличноеПолеНаСервере("Раздел1");
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел1");
	
	// Формирование раздела 1 по данным промежуточной таблицы значений.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		ПредыдущийКБК = ПромТЗ[0]["П000100001003"];
		ИндДопСтроки = 0;
		Для Инд = 0 По ПромТЗ.Количество() - 1 Цикл
			ТекущийКБК = ПромТЗ[Инд]["П000100001003"];
			Если Инд > 0 Тогда
				Если ТекущийКБК <> ПредыдущийКБК Тогда
					// Добавление страницы в раздел 1.
					ВставитьДополнительнуюСтраницуНаСервере("Раздел1");
					ИндДопСтроки = 0;
				КонецЕсли;
			КонецЕсли;
			Если ИндДопСтроки > 0 Тогда
				// Вставка дополнительной строки на странице раздела 1.
				ВставитьДополнительнуюСтроку(ЭтаФорма, "Раздел1");
			КонецЕсли;
			
			ИндДопСтрокиСтр = Формат(ИндДопСтроки + 1, "ЧГ=");
			ТабличныйДокумент.Области["П000100001003"].Значение = ПромТЗ[Инд]["П000100001003"];
			ТабличныйДокумент.Области["П000100002003_" + ИндДопСтрокиСтр].Значение = ПромТЗ[Инд]["П000100002003"];
			ТабличныйДокумент.Области["П000100003003_" + ИндДопСтрокиСтр].Значение = ПромТЗ[Инд]["П000100003003"];
			
			ПредыдущийКБК = ТекущийКБК;
			ИндДопСтроки = ИндДопСтроки + 1;
		КонецЦикла;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		НайденныйРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "Раздел1");
		НайденнаяСтраница = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			НайденныйРаздел.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", 1);
		Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере("Раздел1", 1);
		
	Иначе
		
		ИндСтраницыР1 = 0;
		ТаблСтраницРаздела1[ИндСтраницыР1].Данные[0].Значение
		= Новый Структура("П000100001003,П000100002003_1,П000100003003_1", "", "", 0);
		ТаблСтраницРаздела1[ИндСтраницыР1].ДанныеДопСтрок[0].Значение.Очистить();
		ДопСтрокаСтраницыР1 = ТаблСтраницРаздела1[0].ДанныеДопСтрок[0].Значение.Добавить();
		
		ПредыдущийКБК = ПромТЗ[0]["П000100001003"];
		ИндДопСтроки = 0;
		Для Инд = 0 По ПромТЗ.Количество() - 1 Цикл
			ТекущийКБК = ПромТЗ[Инд]["П000100001003"];
			Если Инд > 0 И ТекущийКБК <> ПредыдущийКБК Тогда
				// Добавление страницы в раздел 1.
				ТаблСтраницРаздела1.Добавить();
				ИндСтраницыР1 = ТаблСтраницРаздела1.Количество() - 1;
				
				ТаблСтраницРаздела1[ИндСтраницыР1].Данные.Добавить(
				Новый Структура("П000100001003,П000100002003_1,П000100003003_1", "", "", 0));
				
				СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
				+ ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел1")].Добавить().Таблица;
				ТаблСтраницРаздела1[ИндСтраницыР1].ДанныеДопСтрок.Добавить(
				СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
				ДанныеДопСтрокСтраницыР1 = ТаблСтраницРаздела1[ИндСтраницыР1].ДанныеДопСтрок[0].Значение;
				
				ДопСтрокаСтраницыР1 = ДанныеДопСтрокСтраницыР1.Добавить();
				
				ИндДопСтроки = 0;
			КонецЕсли;
			Если ИндДопСтроки > 0 Тогда
				// Вставка дополнительной строки на странице раздела 1.
				ДанныеДопСтрокСтраницыР1 = ТаблСтраницРаздела1[ИндСтраницыР1].ДанныеДопСтрок[0].Значение;
				ДопСтрокаСтраницыР1 = ДанныеДопСтрокСтраницыР1.Добавить();
			КонецЕсли;
			
			ТаблСтраницРаздела1[ИндСтраницыР1].Данные[0].Значение.Вставить("П000100001003", ПромТЗ[Инд]["П000100001003"]);
			
			ИндДопСтрокиСтр = Формат(ИндДопСтроки + 1, "ЧГ=");
			ТаблСтраницРаздела1[ИндСтраницыР1].Данные[0].Значение.Вставить(
			"П000100002003_" + ИндДопСтрокиСтр, ПромТЗ[Инд]["П000100002003"]);
			ТаблСтраницРаздела1[ИндСтраницыР1].Данные[0].Значение.Вставить(
			"П000100003003_" + ИндДопСтрокиСтр, ПромТЗ[Инд]["П000100003003"]);
			
			ДопСтрокаСтраницыР1.П000100002003 = ПромТЗ[Инд]["П000100002003"];
			ДопСтрокаСтраницыР1.П000100003003 = ПромТЗ[Инд]["П000100003003"];
			
			ПредыдущийКБК = ТекущийКБК;
			ИндДопСтроки = ИндДопСтроки + 1;
		КонецЦикла;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначение_Раздел21Строка110()
	
	ОбластьНалоговойСтавки = ТабличныйДокумент.Области.П000210011003;
	
	ОтчетныйГод = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Строка050 = СокрЛП(ТабличныйДокумент.Области.П000210005003.Значение);
	Строка080 = СокрЛП(ТабличныйДокумент.Области.П000210008003.Значение);
	
	ВодныйОбъектВКрымуИлиВСевастополе = (Строка050 = "50091" ИЛИ Строка050 = "50092");
	
	ЗначениеСтавкиОпределяетсяПоОтчетномуГоду = (Строка080 = "1" ИЛИ ВодныйОбъектВКрымуИлиВСевастополе);
	
	Если ЗначениеСтавкиОпределяетсяПоОтчетномуГоду Тогда
		
		ОбластьНалоговойСтавки.Значение = НалоговаяСтавка_Раздел21Строки110и120(ЭтаФорма);
		
	Иначе
		
		МассивСвойствПоказателей = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", "П000210005003"));
		Если МассивСвойствПоказателей.Количество() > 0 Тогда
			МассивКодовВодопользования = МассивСвойствПоказателей[0].ТаблицаЗначений.НайтиСтроки(Новый Структура("Код", Строка050));
			Если МассивКодовВодопользования.Количество() > 0 Тогда
				ОбластьНалоговойСтавки.Значение = МассивКодовВодопользования[0].РезультатПроверки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначение_Раздел21Строка120()
	
	ВодоснабжениеНаселения = (СокрЛП(ТабличныйДокумент.Области.П000210008003.Значение) = "1");
	Если ВодоснабжениеНаселения Тогда
		ТабличныйДокумент.Области.П000210012003.Значение = НалоговаяСтавка_Раздел21Строки110и120(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначение_Раздел21Строка130()
	
	Стр080 = СокрЛП(ТабличныйДокумент.Области.П000210008003.Значение);
	ЗаполнятьСтр130 = (Стр080 <> "1" И Стр080 <> "");
	Если ЗаполнятьСтр130 Тогда
		ТабличныйДокумент.Области.П000210013003.Значение = ЗначениеКоэффициентаП1_1Ст333_12НКРФ();
	Иначе
		ТабличныйДокумент.Области.П000210013003.Значение = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НалоговаяСтавка_Раздел21Строки110и120(Форма)
	
	Год = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если Год = 2015 Тогда
		Ставка = 81;
	ИначеЕсли Год = 2016 Тогда
		Ставка = 93;
	ИначеЕсли Год = 2017 Тогда
		Ставка = 107;
	ИначеЕсли Год = 2018 Тогда
		Ставка = 122;
	ИначеЕсли Год = 2019 Тогда
		Ставка = 141;
	ИначеЕсли Год = 2020 Тогда
		Ставка = 162;
	ИначеЕсли Год = 2021 Тогда
		Ставка = 186;
	ИначеЕсли Год = 2022 Тогда
		Ставка = 214;
	ИначеЕсли Год = 2023 Тогда
		Ставка = 246;
	ИначеЕсли Год = 2024 Тогда
		Ставка = 283;
	ИначеЕсли Год = 2025 Тогда
		Ставка = 326;
	КонецЕсли;
	
	Возврат Ставка;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначение_Раздел21Строка150()
	
	Строка080 = СокрЛП(ТабличныйДокумент.Области.П000210008003.Значение);
	
	Если Строка080 = "2" Тогда
		ТабличныйДокумент.Области.П000210015003.Значение = 10;
	Иначе
		ТабличныйДокумент.Области.П000210015003.Значение = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначение_Раздел22Строка110()
	
	ОбластьНалоговойСтавки = ТабличныйДокумент.Области.П000220011003;
	
	МассивСвойствПоказателей = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", "П000220006003"));
	Если МассивСвойствПоказателей.Количество() > 0 Тогда
		Строка060 = СокрЛП(ТабличныйДокумент.Области.П000220006003.Значение);
		МассивКодовВодопользования = МассивСвойствПоказателей[0].ТаблицаЗначений.НайтиСтроки(Новый Структура("Код", Строка060));
		Если МассивКодовВодопользования.Количество() > 0 Тогда
			ОбластьНалоговойСтавки.Значение = МассивКодовВодопользования[0].РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхФизЛицо.Очистить();
	
	ТаблицаСтраницыРаздел1.Очистить();
	ТаблицаСтраницыРаздел22.Очистить();
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		ИмяТекРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели)
	
	АвтоРасчПоказатели = Новый Массив;
	НеАвтоРасчПоказатели = Новый Массив;
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОбрабОбл1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
			ОбрабОбл2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
			Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
			 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбл1);
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбл2);
			Иначе
				РазрешитьВводДанныхВОбласть(Форма, ОбрабОбл1);
				РазрешитьВводДанныхВОбласть(Форма, ОбрабОбл2);
			КонецЕсли;
			
			ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОбрабОбл = Форма.ТабличныйДокумент.Области.НаимОрг;
			Если ЗначениеЗаполнено(ОпределяющаяОбласть.Значение)
				И ОпределяющаяОбласть.Значение <> "0" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабОбл);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбл);
				ОбрабОбл.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
		Иначе
			ОбрабОбл1 = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОбрабОбл2 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
			ОбрабОбл3 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбл1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбл2);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбл3);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "ФизЛицо" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.ДатаРождения);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.КодСтраныГражданства);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.КодВидаДокумента);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.СерияНомерДокумента);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.КемВыданДокумент);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.ДатаВыдачи);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.СтатусНалогоплательщика);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресИндекс);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресКодРегиона);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресРайон);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресГород);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресНаселенныйПункт);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресУлица);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресНомерДома);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресНомерКорпуса);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресНомерКвартиры);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.ДатаРождения);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.КодСтраныГражданства);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.КодВидаДокумента);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.СерияНомерДокумента);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.КемВыданДокумент);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.ДатаВыдачи);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.СтатусНалогоплательщика);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресИндекс);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресКодРегиона);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресРайон);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресГород);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресНаселенныйПункт);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресУлица);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресНомерДома);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресНомерКорпуса);
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.АдресНомерКвартиры);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел21" Тогда
		
		АвтоРасчПоказатели.Добавить("П000210006003");
		АвтоРасчПоказатели.Добавить("П000210010003");
		
		КодЦелиЗабораВоды = СокрЛП(Форма.ТабличныйДокумент.Области.П000210008003.Значение);
		Если КодЦелиЗабораВоды = "1" Тогда
			НеАвтоРасчПоказатели.Добавить("П000210012003");
		Иначе
			АвтоРасчПоказатели.Добавить("П000210012003");
		КонецЕсли;
		
		АвтоРасчПоказатели.Добавить("П000210016003");
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел22" Тогда
		
		ГруппаКодов = Лев(СокрЛП(Форма.ТабличныйДокумент.Области.П000220006003.Значение), 1);
		
		Строка070 = Форма.ТабличныйДокумент.Области.П000220007003;
		Строка080 = Форма.ТабличныйДокумент.Области.П000220008003;
		Строка090 = Форма.ТабличныйДокумент.Области.П000220009003;
		Строка100 = Форма.ТабличныйДокумент.Области.П000220010003;
		
		Если ГруппаКодов = "2" Тогда
			РазрешитьВводДанныхВОбласть(Форма, Строка070);
			ЗапретитьВводДанныхВОбласть(Форма, Строка080);
			ЗапретитьВводДанныхВОбласть(Форма, Строка090);
			ЗапретитьВводДанныхВОбласть(Форма, Строка100);
			АвтоРасчПоказатели.Добавить("П000220013003");
		ИначеЕсли ГруппаКодов = "3" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, Строка070);
			РазрешитьВводДанныхВОбласть(Форма, Строка080);
			ЗапретитьВводДанныхВОбласть(Форма, Строка090);
			ЗапретитьВводДанныхВОбласть(Форма, Строка100);
			АвтоРасчПоказатели.Добавить("П000220013003");
		ИначеЕсли ГруппаКодов = "4" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, Строка070);
			ЗапретитьВводДанныхВОбласть(Форма, Строка080);
			РазрешитьВводДанныхВОбласть(Форма, Строка090);
			РазрешитьВводДанныхВОбласть(Форма, Строка100);
			АвтоРасчПоказатели.Добавить("П000220013003");
		ИначеЕсли ГруппаКодов = "5" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, Строка070);
			ЗапретитьВводДанныхВОбласть(Форма, Строка080);
			ЗапретитьВводДанныхВОбласть(Форма, Строка090);
			ЗапретитьВводДанныхВОбласть(Форма, Строка100);
			НеАвтоРасчПоказатели.Добавить("П000220013003");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, Строка070);
			РазрешитьВводДанныхВОбласть(Форма, Строка080);
			РазрешитьВводДанныхВОбласть(Форма, Строка090);
			РазрешитьВводДанныхВОбласть(Форма, Строка100);
			АвтоРасчПоказатели.Добавить("П000220013003");
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Обл.Защита = Ложь;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			Обл.Защита = Истина;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПок Из НеАвтоРасчПоказатели Цикл
		Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
		Обл.Защита = Ложь;
		Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		Если СтруктураГруппы.Количество() > 0 И СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		ТестовоеИмя = ИмяГруппы + "03_" + Формат(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1, "ЧГ=");
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 
			И ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

#Область МеханизмПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры


&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
		
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
		
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
		
	Иначе
		СписокРасшифровкиформулы.Очистить();
		
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверитьКС_1_1(СтруктураРезультата);
	ПроверитьКС_1_2(СтруктураРезультата);
	ПроверитьКС_2_1(СтруктураРезультата);
	ПроверитьКС_2_2(СтруктураРезультата);
	ПроверитьКС_2_3(СтруктураРезультата);
	ПроверитьКС_2_4(СтруктураРезультата);
	ПроверитьКС_2_5(СтруктураРезультата);
	ПроверитьКС_2_6(СтруктураРезультата);
	ПроверитьКС_2_7(СтруктураРезультата);
	ПроверитьКС_2_8(СтруктураРезультата);
	ПроверитьКС_2_9(СтруктураРезультата);
	ПроверитьКС_2_10(СтруктураРезультата);
	ПроверитьКС_2_11(СтруктураРезультата);
	ПроверитьКС_2_12(СтруктураРезультата);
	ПроверитьКС_2_13(СтруктураРезультата);
	ПроверитьКС_2_14(СтруктураРезультата);
	ПроверитьКС_2_15(СтруктураРезультата);
	ПроверитьКС_2_16(СтруктураРезультата);
	ПроверитьКС_2_17(СтруктураРезультата);
	ПроверитьКС_2_18(СтруктураРезультата);
	ПроверитьКС_2_19(СтруктураРезультата);
	ПроверитьКС_2_20(СтруктураРезультата);
	ПроверитьКС_2_21(СтруктураРезультата);
	ПроверитьКС_2_22(СтруктураРезультата);
	ПроверитьКС_2_23(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
			
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор);
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", АдресВоВременномХранилище);
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверитьКС_1_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 (КС 1.1)'");
	ОписаниеКС      = НСтр("ru='Код бюджетной классификации (строка 010 Раздела 1) должен соответствовать КБК в строке 010 раздела 2.1 или в строке 010 раздела 2.2'");
	
	ОписаниеОшибки  = НСтр("ru='Для КБК, указанного в разделе 1 по которому уплачивается налог, не заполнен раздел 2'");
	
	Р1Ст10Гр03 = ПоказательПоСтроке("Р1Ст10Гр03");
	Р21Ст10Гр03 = ПоказательПоСтроке("Р21Ст10Гр03");
	Р22Ст10Гр03 = ПоказательПоСтроке("Р22Ст10Гр03");
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	Для Каждого СтраницаРаздела Из Раздел1 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел1.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р1Ст10Гр03);
		ВнестиПоказательВРасшифровку(Р1Ст10Гр03, "Раздел1", НомерСтраницыСтр);
		
		Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
			ДанныеСтраницы21 = СтраницаРаздела21.Данные;
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст10Гр03);
			
			Если Р1Ст10Гр03.Значение = Р21Ст10Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р21Ст10Гр03, Р21Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст10Гр03.ПорядокСтраницы));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтраницаРаздела Из Раздел22 Цикл
			ДанныеСтраницы22 = СтраницаРаздела.Данные[0].Значение;
			НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы22, Р22Ст10Гр03);
			
			Если Р1Ст10Гр03.Значение = Р22Ст10Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р22Ст10Гр03, "Раздел22", НомерСтраницыСтр);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СоотношениеВыполняется = (Р1Ст10Гр03.Значение = Р21Ст10Гр03.Значение) ИЛИ (Р1Ст10Гр03.Значение = Р22Ст10Гр03.Значение);
		Расшифровка = ПредставлениеДляРасшифровки(Р1Ст10Гр03.Значение) + " = " + ПредставлениеДляРасшифровки(Р21Ст10Гр03.Значение)
			+ " или " + ПредставлениеДляРасшифровки(Р1Ст10Гр03.Значение) + " = " + ПредставлениеДляРасшифровки(Р22Ст10Гр03.Значение);
		
		Если СоотношениеВыполняется Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 (КС 1.2)'");
	ОписаниеКС      = НСтр("ru='Код ОКТМО (строка 020 Раздела 1)  должен соответствовать ОКТМО в строке 020 раздела 2.1 или в строке 020 раздела 2.2'");
	
	ОписаниеОшибки  = НСтр("ru='Для ОКТМО, указанного в разделе 1 по которому уплачивается налог, не заполнен раздел 2'");
	
	Р1Ст20Гр03 = ПоказательПоСтроке("Р1Ст20Гр03");
	Р21Ст20Гр03 = ПоказательПоСтроке("Р21Ст20Гр03");
	Р22Ст20Гр03 = ПоказательПоСтроке("Р22Ст20Гр03");
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	Для Каждого СтраницаРаздела Из Раздел1 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел1.Индекс(СтраницаРаздела) + 1);
		
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000100002003_");
		
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Ст20Гр03, Инд);
			ВнестиПоказательВРасшифровку(Р1Ст20Гр03, "Раздел1", НомерСтраницыСтр);
			
			Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
				ДанныеСтраницы21 = СтраницаРаздела21.Данные;
				
				ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст20Гр03);
				
				Если Р1Ст20Гр03.Значение = Р21Ст20Гр03.Значение Тогда
					ВнестиПоказательВРасшифровку(Р21Ст20Гр03, Р21Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст20Гр03.ПорядокСтраницы));
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтраницаРаздела Из Раздел22 Цикл
				ДанныеСтраницы22 = СтраницаРаздела.Данные[0].Значение;
				НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
				
				ВставитьЗначениеПоказателя(ДанныеСтраницы22, Р22Ст20Гр03);
				
				Если Р1Ст20Гр03.Значение = Р22Ст20Гр03.Значение Тогда
					ВнестиПоказательВРасшифровку(Р22Ст20Гр03, "Раздел22", НомерСтраницыСтр);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			СоотношениеВыполняется = (Р1Ст20Гр03.Значение = Р21Ст20Гр03.Значение) ИЛИ (Р1Ст20Гр03.Значение = Р22Ст20Гр03.Значение);
			
			Расшифровка = ПредставлениеДляРасшифровки(Р1Ст20Гр03.Значение) + " = " + ПредставлениеДляРасшифровки(Р21Ст20Гр03.Значение)
				+ " или " + ПредставлениеДляРасшифровки(Р1Ст20Гр03.Значение) + " = " + ПредставлениеДляРасшифровки(Р22Ст20Гр03.Значение);
			
			Если СоотношениеВыполняется Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
				Расшифровка, ЭтоОшибка, ОписаниеОшибки, , );
			
			СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
			СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
			СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.1)'");
	ОписаниеКС      = НСтр("ru='Код бюджетной классификации в строке 010 подраздела 2.1 должен соответствовать КБК в строке 010 раздела 1 '");
	
	ОписаниеОшибки  = НСтр("ru='КБК, указанный в подразделе 2.1 раздела 2, отсутствует в разделе 1. Либо неверно указан КБК в подразделе 2.1 раздела 2'");
	
	Р21Ст10Гр03 = ПоказательПоСтроке("Р21Ст10Гр03");
	Р1Ст10Гр03 = ПоказательПоСтроке("Р1Ст10Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р21Ст10Гр03.Значение) Тогда
			Возврат;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р21Ст10Гр03, Р21Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст10Гр03.ПорядокСтраницы));
		
		Для Каждого СтраницаРаздела Из Раздел1 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			НомерСтраницыСтр = СтрокаЧГ0(Раздел1.Индекс(СтраницаРаздела) + 1);
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы, Р1Ст10Гр03);
			
			Если Р21Ст10Гр03.Значение = Р1Ст10Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р1Ст10Гр03, "Раздел1", НомерСтраницыСтр);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
		СоотношениеВыполняется = (Р21Ст10Гр03.Значение = Р1Ст10Гр03.Значение);
		Расшифровка = ПредставлениеДляРасшифровки(Р21Ст10Гр03.Значение) + " = " + ПредставлениеДляРасшифровки(Р1Ст10Гр03.Значение);
		
		Если СоотношениеВыполняется Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.2)'");
	ОписаниеКС      = НСтр("ru='Код ОКТМО в строке 020 подраздела 2.1 должен соответствовать ОКТМО в строке 020 раздела 1'");
	
	ОписаниеОшибки  = НСтр("ru='ОКТМО, указанный в подразделе 2.1 раздела 2, отсутствует в разделе 1. Либо неверно указан ОКТМО в подразделе 2.1 раздела 2.'");
	
	Р21Ст20Гр03 = ПоказательПоСтроке("Р21Ст20Гр03");
	Р1Ст20Гр03 = ПоказательПоСтроке("Р1Ст20Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст20Гр03);
		ВнестиПоказательВРасшифровку(Р21Ст20Гр03, Р21Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст20Гр03.ПорядокСтраницы));
		
		Для Каждого СтраницаРаздела Из Раздел1 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			НомерСтраницыСтр = СтрокаЧГ0(Раздел1.Индекс(СтраницаРаздела) + 1);
			
			КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000100002003_");
			Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Ст20Гр03, Инд);
				Если Р21Ст20Гр03.Значение = Р1Ст20Гр03.Значение Тогда
					ВнестиПоказательВРасшифровку(Р1Ст20Гр03, "Раздел1", НомерСтраницыСтр);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Р21Ст20Гр03.Значение = Р1Ст20Гр03.Значение Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
		СоотношениеВыполняется = (Р21Ст20Гр03.Значение = Р1Ст20Гр03.Значение);
		Расшифровка = ПредставлениеДляРасшифровки(Р21Ст20Гр03.Значение) + " = " + ПредставлениеДляРасшифровки(Р1Ст20Гр03.Значение);
		
		Если СоотношениеВыполняется Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.3)'");
	ОписаниеКС      = НСтр("ru='Код водопользования в строке 050 подраздела 2.1 раздела 2 должен иметь значение: ""11011"" - ""11015"" или ""11021"" - ""11024"" или ""11031"" - ""11036"" или ""11041"" - ""11043"" или ""11051"" - ""11054"" или ""11061"" - ""11063"" или ""11071"" - ""11076"" или ""11081"" - ""11084"" или  ""11091"" - ""11092"" или ""11101"" - ""11106"" или ""11111"" - ""11122"" или ""12011"" - ""12015"" или ""12021"" - ""12024"" или ""12031"" - ""12036"" или ""12041"" - ""12043"" или ""12051"" - ""12054"" или ""12061"" - ""12063"" или ""12071"" - ""12076"" или ""12081"" - ""12084"" или ""12091"" - ""12092"" или ""12101"" - ""12106"" или ""12111"" - ""12113"" или ""12121"" - ""12122"" или ""13010"" - ""13140"" или ""50091"" - ""50092""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида водопользования в подразделе 2.1 раздела 2'");
	
	Р21Ст50Гр03 = ПоказательПоСтроке("Р21Ст50Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	
	МассивКодовВодопользования = МассивКодовИзМакета();
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст50Гр03);
		Если НЕ ЗначениеЗаполнено(Р21Ст50Гр03.Значение) Тогда
			Возврат;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р21Ст50Гр03, Р21Ст50Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст50Гр03.ПорядокСтраницы));
		
		СоотношениеВыполняется = ПараметрВходитВДиапазон(Р21Ст50Гр03.Значение, МассивКодовВодопользования,
			"11011-11015|11021-11024|11031-11036|11041-11043|11051-11054|11061-11063|11071-11076|11081-11084|11091-11092|11101-11106|11111-11122|12011-12015|12021-12024|12031-12036|12041-12043|12051-12054|12061-12063|12071-12076|12081-12084|12091-12092|12101-12106|12111-12113|12121-12122|13010-13140|50091-50092");
		Расшифровка = ПредставлениеДляРасшифровки(Р21Ст50Гр03.Значение);
		
		Если СоотношениеВыполняется Тогда
				ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.4)'");
	ОписаниеКС      = НСтр("ru='Общий объем воды в строке 060 подраздела 2.1 раздела 2 должен быть больше или равен объему воды в строке 070 подраздела 2.1 раздела 2 или больше или равен объему воды в строке 100 подраздела 2.1 раздела 2'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан объем забранной воды в подразделе 2.1 раздела 2'");
	
	Р21Ст60Гр03 = ПоказательПоСтроке("Р21Ст60Гр03");
	Р21Ст70Гр03 = ПоказательПоСтроке("Р21Ст70Гр03");
	Р21Ст100Гр03 = ПоказательПоСтроке("Р21Ст100Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст60Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст100Гр03);
		ВнестиПоказательВРасшифровку(Р21Ст60Гр03, Р21Ст60Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст60Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст70Гр03, Р21Ст70Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст70Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст100Гр03, Р21Ст100Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст100Гр03.ПорядокСтраницы));
		
		СоотношениеВыполняется = (Р21Ст60Гр03.Значение >= Р21Ст70Гр03.Значение ИЛИ Р21Ст60Гр03.Значение >= Р21Ст100Гр03.Значение);
		Расшифровка = Р21Ст60Гр03.ЗначениеСтр + " >= " + Р21Ст70Гр03.ЗначениеСтр + " ИЛИ " + Р21Ст60Гр03.ЗначениеСтр + " >= "
			+ Р21Ст100Гр03.ЗначениеСтр;
		
		Если СоотношениеВыполняется Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.5)'");
	ОписаниеКС      = НСтр("ru='Общий объем воды в строке 060 подраздела 2.1 раздела 2 должен быть равен сумме значений строк 070 и 100 подраздела 2.1 раздела 2'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан объем забранной воды в подразделе 2.1 раздела 2'");
	
	Р21Ст60Гр03 = ПоказательПоСтроке("Р21Ст60Гр03");
	Р21Ст70Гр03 = ПоказательПоСтроке("Р21Ст70Гр03");
	Р21Ст100Гр03 = ПоказательПоСтроке("Р21Ст100Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст60Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст100Гр03);
		ВнестиПоказательВРасшифровку(Р21Ст60Гр03, Р21Ст60Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст60Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст70Гр03, Р21Ст70Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст70Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст100Гр03, Р21Ст100Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст100Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р21Ст60Гр03.Значение, Р21Ст70Гр03.Значение + Р21Ст100Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р21Ст70Гр03.ЗначениеСтр + " + " + Р21Ст100Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.6)'");
	ОписаниеКС      = НСтр("ru='Код цели забора воды в строке 080 подраздела 2.1 раздела 2 должен иметь значение равное ""1"", ""2"" или ""3""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код цели забора воды в подразделе 2.1 раздела 2'");
	
	Р21Ст80Гр03 = ПоказательПоСтроке("Р21Ст80Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст80Гр03);
		Если НЕ ЗначениеЗаполнено(Р21Ст80Гр03.Значение) Тогда
			Возврат;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р21Ст80Гр03, Р21Ст80Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст80Гр03.ПорядокСтраницы));
		
		СоотношениеВыполняется = КодНайден(Р21Ст80Гр03.Значение, "1,2,3");
		Расшифровка = ПредставлениеДляРасшифровки(Р21Ст80Гр03.Значение) + " = ""1"", ""2"" или ""3""";
		
		Если СоотношениеВыполняется Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.7)'");
	ОписаниеКС      = НСтр("ru='Объем воды в строке 100 подраздела 2.1 раздела 2 должен быть равен сумме значений строк 101 и 102 подраздела 2.1 раздела 2'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан объем воды, забранной из водного объекта, признаваемый объектом налогообложения в подразделе 2.1 раздела 2'");
	
	Р21Ст100Гр03 = ПоказательПоСтроке("Р21Ст100Гр03");
	Р21Ст101Гр03 = ПоказательПоСтроке("Р21Ст101Гр03");
	Р21Ст102Гр03 = ПоказательПоСтроке("Р21Ст102Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст100Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст101Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст102Гр03);
		ВнестиПоказательВРасшифровку(Р21Ст100Гр03, Р21Ст100Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст100Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст101Гр03, Р21Ст101Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст101Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст102Гр03, Р21Ст102Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст102Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р21Ст100Гр03.Значение, Р21Ст101Гр03.Значение + Р21Ст102Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р21Ст101Гр03.ЗначениеСтр + " + " + Р21Ст102Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.8)'");
	ОписаниеКС      = НСтр("ru='Коэффициент в строке 140 подраздела 2.1 раздела 2 должен иметь значение 1.1, если строка 140 заполнена'");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента в подразделе 2.1 раздела 2'");
	
	Р21Ст140Гр03 = ПоказательПоСтроке("Р21Ст140Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст140Гр03);
		ВнестиПоказательВРасшифровку(Р21Ст140Гр03, Р21Ст140Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст140Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р21Ст140Гр03.Значение, 1.1);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр;
		
		УсловиеВыполнено = ЗначениеЗаполнено(Р21Ст140Гр03.Значение);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.9)'");
	ОписаниеКС      = НСтр("ru='Коэффициент в строке 150 подраздела 2.1 раздела 2 должен иметь значение 10 или ""-""'");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента в подразделе 2.1 раздела 2'");
	
	Р21Ст150Гр03 = ПоказательПоСтроке("Р21Ст150Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	
	МассивДопустимыхЗначений = Новый Массив;
	МассивДопустимыхЗначений.Добавить(0);
	МассивДопустимыхЗначений.Добавить(10);
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст150Гр03);
		ВнестиПоказательВРасшифровку(Р21Ст150Гр03, Р21Ст150Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст150Гр03.ПорядокСтраницы));
		
		Расшифровка = "" + Р21Ст150Гр03.Значение + " = 10 или 0";
		
		УсловиеВыполнено = НЕ МассивДопустимыхЗначений.Найти(Р21Ст150Гр03.Значение) = Неопределено;
		Если УсловиеВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.1 раздела 2 (КС 2.10)'");
	ОписаниеКС      = НСтр("ru='Сумма налога, подлежащая уплате в строке 160 подраздела 2.1 раздела 2 должна быть равна (строка 101 х округленное значение (строки 110 х строка 130 х строка 140 х строка 150) + строка 102 х округленное значение (строки 120 х строка 130 х строка 140 х строка 150) подраздела 2.1 раздела 2)'");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы налога в подразделе 2.1 раздела 2'");
	
	Р21Ст160Гр03 = ПоказательПоСтроке("Р21Ст160Гр03");
	Р21Ст101Гр03 = ПоказательПоСтроке("Р21Ст101Гр03");
	Р21Ст110Гр03 = ПоказательПоСтроке("Р21Ст110Гр03");
	Р21Ст130Гр03 = ПоказательПоСтроке("Р21Ст130Гр03");
	Р21Ст140Гр03 = ПоказательПоСтроке("Р21Ст140Гр03");
	Р21Ст150Гр03 = ПоказательПоСтроке("Р21Ст150Гр03");
	Р21Ст102Гр03 = ПоказательПоСтроке("Р21Ст102Гр03");
	Р21Ст120Гр03 = ПоказательПоСтроке("Р21Ст120Гр03");
	Раздел21 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела21 Из Раздел21 Цикл
		ДанныеСтраницы21 = СтраницаРаздела21.Данные;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст160Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст101Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст110Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст130Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст140Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст150Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст102Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы21, Р21Ст120Гр03);
		
		ВнестиПоказательВРасшифровку(Р21Ст160Гр03, Р21Ст160Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст160Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст101Гр03, Р21Ст101Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст101Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст110Гр03, Р21Ст110Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст110Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст130Гр03, Р21Ст130Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст130Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст140Гр03, Р21Ст140Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст140Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст150Гр03, Р21Ст150Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст150Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст102Гр03, Р21Ст102Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст102Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р21Ст120Гр03, Р21Ст120Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела21.Представление, Р21Ст120Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р21Ст160Гр03.Значение, Р21Ст101Гр03.Значение
			* Окр(Р21Ст110Гр03.Значение * ?(Р21Ст130Гр03.Значение = 0, 1, Р21Ст130Гр03.Значение) 
			* ?(Р21Ст140Гр03.Значение = 0, 1, Р21Ст140Гр03.Значение) * ?(Р21Ст150Гр03.Значение = 0, 1, Р21Ст150Гр03.Значение))
			+ Р21Ст102Гр03.Значение * Окр(Р21Ст120Гр03.Значение * ?(Р21Ст130Гр03.Значение = 0, 1, Р21Ст130Гр03.Значение)
			* ?(Р21Ст140Гр03.Значение = 0, 1, Р21Ст140Гр03.Значение) * ?(Р21Ст150Гр03.Значение = 0, 1, Р21Ст150Гр03.Значение))
			, Истина, Истина);
			
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р21Ст101Гр03.ЗначениеСтр + " * окр.(" + Р21Ст110Гр03.ЗначениеСтр
			+ ?(Р21Ст130Гр03.Значение = 0, "", " * " + Р21Ст130Гр03.ЗначениеСтр)
			+ ?(Р21Ст140Гр03.Значение = 0, "", " * " + Р21Ст140Гр03.ЗначениеСтр)
			+ ?(Р21Ст150Гр03.Значение = 0, "", " * " + Р21Ст150Гр03.ЗначениеСтр) + ") + "
			+ Р21Ст102Гр03.ЗначениеСтр + " * окр.(" + Р21Ст120Гр03.ЗначениеСтр
			+ ?(Р21Ст130Гр03.Значение = 0, "", " * " + Р21Ст130Гр03.ЗначениеСтр)
			+ ?(Р21Ст140Гр03.Значение = 0, "", " * " + Р21Ст140Гр03.ЗначениеСтр) + ?(Р21Ст150Гр03.Значение = 0, "", " * "
			+ Р21Ст150Гр03.ЗначениеСтр) + ") Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_11(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.11)'");
	ОписаниеКС      = НСтр("ru='Код бюджетной классификации в строке 010 подраздела 2.2 раздела 2 должен соответствовать КБК в строке 010 раздела 1 '");
	
	ОписаниеОшибки  = НСтр("ru='КБК, указанный в подразделе 2.2 раздела 2, отсутствует в разделе 1. Либо неверно указан КБК в подразделе 2.2 раздела 2'");
	
	Р22Ст10Гр03 = ПоказательПоСтроке("Р22Ст10Гр03");
	Р1Ст10Гр03 = ПоказательПоСтроке("Р1Ст10Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р22Ст10Гр03.Значение) Тогда
			Возврат;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р22Ст10Гр03, "Раздел22", НомерСтраницыСтр);
		
		Для Каждого СтраницаРаздела Из Раздел1 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			НомерСтраницыСтр = СтрокаЧГ0(Раздел1.Индекс(СтраницаРаздела) + 1);
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы, Р1Ст10Гр03);
			
			Если Р22Ст10Гр03.Значение = Р1Ст10Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р1Ст10Гр03, "Раздел1", НомерСтраницыСтр);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
		СоотношениеВыполняется = (Р22Ст10Гр03.Значение = Р1Ст10Гр03.Значение);
		Расшифровка = ПредставлениеДляРасшифровки(Р22Ст10Гр03.Значение) + " = " + ПредставлениеДляРасшифровки(Р1Ст10Гр03.Значение);
		
		Если СоотношениеВыполняется Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_12(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.12)'");
	ОписаниеКС      = НСтр("ru='Код ОКТМО в строке 020 подраздела 2.2 должен соответствовать ОКТМО в строке 020 раздела 1'");
	
	ОписаниеОшибки  = НСтр("ru='ОКТМО, указанный в подразделе 2.2 раздела 2, отсутствует в разделе 1. Либо неверно указан ОКТМО в подразделе 2.2 раздела 2'");
	
	Р22Ст20Гр03 = ПоказательПоСтроке("Р22Ст20Гр03");
	Р1Ст20Гр03 = ПоказательПоСтроке("Р1Ст20Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Если РазделНеЗаполнен(Раздел22) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст20Гр03);
		ВнестиПоказательВРасшифровку(Р22Ст20Гр03, "Раздел22", НомерСтраницыСтр);
		
		Для Каждого СтраницаРаздела Из Раздел1 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			НомерСтраницыСтр = СтрокаЧГ0(Раздел1.Индекс(СтраницаРаздела) + 1);
			
			КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000100002003_");
			Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Ст20Гр03, Инд);
				Если Р22Ст20Гр03.Значение = Р1Ст20Гр03.Значение Тогда
					ВнестиПоказательВРасшифровку(Р1Ст20Гр03, "Раздел1", НомерСтраницыСтр);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Р22Ст20Гр03.Значение = Р1Ст20Гр03.Значение Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СоотношениеВыполняется = (Р22Ст20Гр03.Значение = Р1Ст20Гр03.Значение);
		Расшифровка = ПредставлениеДляРасшифровки(Р22Ст20Гр03.Значение) + " = " + ПредставлениеДляРасшифровки(Р1Ст20Гр03.Значение);
		
		Если СоотношениеВыполняется Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_13(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.13)'");
	ОписаниеКС      = НСтр("ru='Код водопользования в строке 060 подраздела 2.2 раздела 2 должен иметь значение: ""21010"" - ""21120"" или ""22010"" - ""22140"" или ""30100"" - ""32100"" или ""40100"" - ""41200"" или ""50091"" - ""50092""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида водопользования в подразделе 2.2 раздела 2'");
	
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		Если НЕ ЗначениеЗаполнено(Р22Ст60Гр03.Значение) Тогда
			Возврат;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		СоотношениеВыполняется = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "21010-21120|22010-22140|30100-32100|40100-41200|50091-50092");
		
		Расшифровка = ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение);
		
		Если СоотношениеВыполняется Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_14(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.14)'");
	ОписаниеКС      = НСтр("ru='Строки 080, 090, 100 подраздела 2.2 раздела 2 не заполняются, если код в строке 060 подраздела 2.2 раздела 2 равен ""21010"" - ""22140"" или ""50091"" - ""50092""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида водопользования в подразделе 2.2 раздела 2'");
	
	Р22Ст80Гр03 = ПоказательПоСтроке("Р22Ст80Гр03");
	Р22Ст90Гр03 = ПоказательПоСтроке("Р22Ст90Гр03");
	Р22Ст100Гр03 = ПоказательПоСтроке("Р22Ст100Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
	
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст80Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст90Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст100Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст80Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст90Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст100Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		Расшифровка = Р22Ст80Гр03.ЗначениеСтр + " = 0 И " + Р22Ст90Гр03.ЗначениеСтр + " = 0 И " + Р22Ст100Гр03.ЗначениеСтр
			+ " = 0, когда " + ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение) + " равен ""21010"" - ""22140"" или ""50091"" - ""50092""";
		СоотношениеВыполняется = (Р22Ст80Гр03.Значение = 0 И Р22Ст90Гр03.Значение = 0 И Р22Ст100Гр03.Значение = 0);
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "21010-22140|50091-50092");;
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И СоотношениеВыполняется) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_15(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.15)'");
	ОписаниеКС      = НСтр("ru='Строки 070, 090, 100 подраздела 2.2 раздела 2 не заполняются, если код в строке 060 подраздела 2.2 раздела 2 равен ""30100"" - ""32100"" или ""50091"" - ""50092""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида водопользования в подразделе 2.2 раздела 2'");
	
	Р22Ст70Гр03 = ПоказательПоСтроке("Р22Ст70Гр03");
	Р22Ст80Гр03 = ПоказательПоСтроке("Р22Ст80Гр03");
	Р22Ст90Гр03 = ПоказательПоСтроке("Р22Ст90Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
	
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст80Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст90Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст70Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст80Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст90Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		Расшифровка = Р22Ст70Гр03.ЗначениеСтр + " = 0 И " + Р22Ст80Гр03.ЗначениеСтр + " = 0 И " + Р22Ст90Гр03.ЗначениеСтр
			+ " = 0, когда " + ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение) + " равен ""30100"" - ""32100"" или ""50091"" - ""50092""";
		СоотношениеВыполняется = (Р22Ст70Гр03.Значение = 0 И Р22Ст80Гр03.Значение = 0 И Р22Ст90Гр03.Значение = 0);
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "30100-32100|50091-50092");;
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И СоотношениеВыполняется) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_16(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.16)'");
	ОписаниеКС      = НСтр("ru='Строки 070, 080 подраздела 2.2 раздела 2 не заполняются, если код в строке 060 подраздела 2.2 раздела 2 равен ""40100"" - ""41200"" или ""50091"" - ""50092""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида водопользования в подразделе 2.2 раздела 2'");
	
	Р22Ст70Гр03 = ПоказательПоСтроке("Р22Ст70Гр03");
	Р22Ст80Гр03 = ПоказательПоСтроке("Р22Ст80Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
	
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст80Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст70Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст80Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		Расшифровка = Р22Ст70Гр03.ЗначениеСтр + " = 0 И " + Р22Ст80Гр03.ЗначениеСтр + " = 0, когда "
			+ ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение) + " равен ""40100"" - ""41200"" или ""50091"" - ""50092""";
		СоотношениеВыполняется = (Р22Ст70Гр03.Значение = 0 И Р22Ст80Гр03.Значение = 0);
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "40100-41200|50091-50092");;
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И СоотношениеВыполняется) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_17(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.17)'");
	ОписаниеКС      = НСтр("ru='Площадь предоставленного водного пространства (строка 070 подраздела 2.2 раздела 2) должна иметь значение больше или равное нулю, если код в строке 060 подраздела 2.2 раздела 2 равен ""21010"" - ""22140""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида водопользования в подразделе 2.2 раздела 2'");
	
	Р22Ст70Гр03 = ПоказательПоСтроке("Р22Ст70Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст70Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		Расшифровка = Р22Ст70Гр03.ЗначениеСтр + " >= 0, когда " + ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение) + " равен ""21010"" - ""22140""";
		СоотношениеВыполняется = (Р22Ст70Гр03.Значение >= 0);
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "21010-22140");;
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И СоотношениеВыполняется) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_18(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.18)'");
	ОписаниеКС      = НСтр("ru='Количество произведенной электроэнергии (строка 080 подраздела 2.2 раздела 2) должно иметь значение больше или равное нулю, если код в строке 060 подраздела 2.2 раздела 2 равен ""30100"" - ""32100""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида водопользования в подразделе 2.2 раздела 2'");
	
	Р22Ст80Гр03 = ПоказательПоСтроке("Р22Ст80Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст80Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст80Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		Расшифровка = Р22Ст80Гр03.ЗначениеСтр + " >= 0, когда " + ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение) + " равен ""30100"" - ""32100""";
		СоотношениеВыполняется = (Р22Ст80Гр03.Значение >= 0);
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "30100-32100");
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И СоотношениеВыполняется) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_19(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.19)'");
	ОписаниеКС      = НСтр("ru='Объем древесины (строка 090 подраздела 2.2 раздела 2) должен иметь значение больше или равное нулю, если код в строке 060 подраздела 2.2 раздела 2 равен ""40100"" - ""41200""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида водопользования в подразделе 2.2 раздела 2'");
	
	Р22Ст90Гр03 = ПоказательПоСтроке("Р22Ст90Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст90Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст90Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		Расшифровка = Р22Ст90Гр03.ЗначениеСтр + " >= 0, когда " + ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение) + " равен ""40100"" - ""41200""";
		СоотношениеВыполняется = (Р22Ст90Гр03.Значение >= 0);
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "40100-41200");
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И СоотношениеВыполняется) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_20(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.20)'");
	ОписаниеКС      = НСтр("ru='Расстояние сплава (строка 100 подраздела 2.2 раздела 2) должно иметь значение больше или равное нулю, если код в строке 060 подраздела 2.2 раздела 2 равен ""40100"" - ""41200""'");
	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида водопользования в подразделе 2.2 раздела 2'");
	
	Р22Ст100Гр03 = ПоказательПоСтроке("Р22Ст100Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст100Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст100Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		Расшифровка = Р22Ст100Гр03.ЗначениеСтр + " >= 0, когда " + ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение) + " равен ""40100"" - ""41200""";
		СоотношениеВыполняется = (Р22Ст100Гр03.Значение >= 0);
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "40100-41200");
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И СоотношениеВыполняется) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_21(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.21)'");
	ОписаниеКС      = НСтр("ru='Сумма налога, подлежащая уплате в строке 130 подраздела 2.2 раздела 2 должна быть равна (строка 070 х округленное значение (строки 110 х строка 120) / 4, если код в строке 060 подраздела 2.2 раздела 2 равен ""21010"" - ""22140""'");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы налога в подразделе 2.2 раздела 2'");
	
	Р22Ст130Гр03 = ПоказательПоСтроке("Р22Ст130Гр03");
	Р22Ст70Гр03 = ПоказательПоСтроке("Р22Ст70Гр03");
	Р22Ст110Гр03 = ПоказательПоСтроке("Р22Ст110Гр03");
	Р22Ст120Гр03 = ПоказательПоСтроке("Р22Ст120Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст130Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст110Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст120Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст130Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст70Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст110Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст120Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		КС = ПоказателиКС(Р22Ст130Гр03.Значение, Р22Ст70Гр03.Значение * Окр(Р22Ст110Гр03.Значение * Р22Ст120Гр03.Значение) / 4,
			Истина, Истина);
		
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Ст70Гр03.ЗначениеСтр + " * окр.(" + Р22Ст110Гр03.ЗначениеСтр + " * "
			+ Р22Ст120Гр03.ЗначениеСтр + ") / 4 " + " Итог [" + КС.ПраваяЧастьСтр + "], когда "
			+ ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение) + " равен ""21010"" - ""22140""";
		
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "21010-22140");
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_22(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.22)'");
	ОписаниеКС      = НСтр("ru='Сумма налога, подлежащая уплате в строке 130 подраздела 2.2 раздела 2 должна быть равна (строка 080 х округленное значение (строки 110 х строка 120), если код в строке 060 подраздела 2.2 раздела 2 равен ""30100"" - ""32100""'");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы налога в подразделе 2.2 раздела 2'");
	
	Р22Ст130Гр03 = ПоказательПоСтроке("Р22Ст130Гр03");
	Р22Ст80Гр03 = ПоказательПоСтроке("Р22Ст80Гр03");
	Р22Ст110Гр03 = ПоказательПоСтроке("Р22Ст110Гр03");
	Р22Ст120Гр03 = ПоказательПоСтроке("Р22Ст120Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст130Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст80Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст110Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст120Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст130Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст80Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст110Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст120Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		КС = ПоказателиКС(Р22Ст130Гр03.Значение, Р22Ст80Гр03.Значение * Окр(Р22Ст110Гр03.Значение * Р22Ст120Гр03.Значение),
			Истина, Истина);
			
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Ст80Гр03.ЗначениеСтр + " * окр.(" + Р22Ст110Гр03.ЗначениеСтр + " * "
			+ Р22Ст120Гр03.ЗначениеСтр + ") Итог [" + КС.ПраваяЧастьСтр + "], когда "
			+ ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение) + " равен ""30100"" - ""32100""";
		
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "30100-32100");
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_23(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка подраздела 2.2 раздела 2 (КС 2.23)'");
	ОписаниеКС      = НСтр("ru='Сумма налога, подлежащая уплате в строке 130 подраздела 2.2 раздела 2 должна быть равна (строка 090 х строка 100 х округленное значение (строки 110 х строка 120) / 100, если код в строке 060 подраздела 2.2 раздела 2 равен ""40100"" - ""41200""'");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы налога в подразделе 2.2 раздела 2'");
	
	Р22Ст130Гр03 = ПоказательПоСтроке("Р22Ст130Гр03");
	Р22Ст90Гр03 = ПоказательПоСтроке("Р22Ст90Гр03");
	Р22Ст100Гр03 = ПоказательПоСтроке("Р22Ст100Гр03");
	Р22Ст110Гр03 = ПоказательПоСтроке("Р22Ст110Гр03");
	Р22Ст120Гр03 = ПоказательПоСтроке("Р22Ст120Гр03");
	Р22Ст60Гр03 = ПоказательПоСтроке("Р22Ст60Гр03");
	Раздел22 = мДанныеОтчета.Раздел22;
	
	МассивКодовВодопользования = МассивКодовИзМакета("КодыВодопользованияРаздел22");
	
	Для Каждого СтраницаРаздела Из Раздел22 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел22.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст130Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст90Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст100Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст110Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст120Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р22Ст60Гр03);
		
		ВнестиПоказательВРасшифровку(Р22Ст130Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст90Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст100Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст110Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст120Гр03, "Раздел22", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р22Ст60Гр03, "Раздел22", НомерСтраницыСтр);
		
		КС = ПоказателиКС(Р22Ст130Гр03.Значение, Р22Ст90Гр03.Значение * Р22Ст100Гр03.Значение
			* Окр(Р22Ст110Гр03.Значение * Р22Ст120Гр03.Значение) / 100, Истина, Истина);
		
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р22Ст90Гр03.ЗначениеСтр + " * " + Р22Ст100Гр03.ЗначениеСтр + " * окр.("
			+ Р22Ст110Гр03.ЗначениеСтр + " * " + Р22Ст120Гр03.ЗначениеСтр + ") / 100 " + " Итог [" + КС.ПраваяЧастьСтр
			+ "], когда " + ПредставлениеДляРасшифровки(Р22Ст60Гр03.Значение)
			+ " равен ""40100"" - ""42100""";
		
		УсловиеВыполнено = ПараметрВходитВДиапазон(Р22Ст60Гр03.Значение, МассивКодовВодопользования, "40100-41200");
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, , );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	Если УсловныйКодПоказателя = "Р1Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000100001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000210001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000220001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П000100002003_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П000210002003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П000220002003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст50Гр03" Тогда
		Результат.Вставить("Имя", "П000210005003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст60Гр03" Тогда
		Результат.Вставить("Имя", "П000210006003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст70Гр03" Тогда
		Результат.Вставить("Имя", "П000210007003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст100Гр03" Тогда
		Результат.Вставить("Имя", "П000210010003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст80Гр03" Тогда
		Результат.Вставить("Имя", "П000210008003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст101Гр03" Тогда
		Результат.Вставить("Имя", "П000210010103");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст102Гр03" Тогда
		Результат.Вставить("Имя", "П000210010203");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст140Гр03" Тогда
		Результат.Вставить("Имя", "П000210014003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст160Гр03" Тогда
		Результат.Вставить("Имя", "П000210016003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст110Гр03" Тогда
		Результат.Вставить("Имя", "П000210011003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст130Гр03" Тогда
		Результат.Вставить("Имя", "П000210013003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст150Гр03" Тогда
		Результат.Вставить("Имя", "П000210015003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст120Гр03" Тогда
		Результат.Вставить("Имя", "П000210012003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст60Гр03" Тогда
		Результат.Вставить("Имя", "П000220006003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст80Гр03" Тогда
		Результат.Вставить("Имя", "П000220008003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст90Гр03" Тогда
		Результат.Вставить("Имя", "П000220009003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст100Гр03" Тогда
		Результат.Вставить("Имя", "П000220010003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст70Гр03" Тогда
		Результат.Вставить("Имя", "П000220007003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст130Гр03" Тогда
		Результат.Вставить("Имя", "П000220013003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст110Гр03" Тогда
		Результат.Вставить("Имя", "П000220011003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст120Гр03" Тогда
		Результат.Вставить("Имя", "П000220012003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	КонецЕсли;
	
	Если Результат.Представление = "" Тогда
		Результат.Вставить("Представление", ПредставлениеПоказателя(Результат.Имя));
	КонецЕсли;
	
	ДобавитьКординаты(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПредставлениеПоказателя(ИмяПоказателя)
	
	Раздел = Новый Структура();
	Раздел.Вставить("П00010", "Раздела 1");
	Раздел.Вставить("П00021", "Подраздела 2.1");
	Раздел.Вставить("П00022", "Подраздела 2.2");
	
	ПодстрокаРаздела = Раздел[Лев(ИмяПоказателя, 6)];
	ПодстрокаСтроки = Сред(ИмяПоказателя, 9, 3);
	Если Прав(ИмяПоказателя,2) = "%1" Тогда
		ПодстрокаГрафы = Сред(ИмяПоказателя, 12, 2);
	Иначе
		ПодстрокаГрафы = Прав(ИмяПоказателя,2);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Графа %1 строка %2 %3'"), ПодстрокаГрафы,
		ПодстрокаСтроки, ПодстрокаРаздела);
	
КонецФункции

&НаСервере
Процедура ДобавитьКординаты(Результат)
	Перем ИмяПоказателя;
	
	ИмяПоказателя = Результат.Имя;
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "_%1", "");
	
	Если СтрНайти("П000210001003|П000210002003|П000210003003|П000210004003", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел2");
		Результат.Вставить("ПорядокСтраницы",1);
	
	ИначеЕсли СтрНайти("П000210005003|П000210006003|П000210007003|П000210008003|П000210009003|П000210010003|П000210010103
						|П000210010203|П000210011003|П000210012003|П000210013003|П000210014003|П000210015003|П000210016003", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел21");
		Результат.Вставить("ПорядокСтраницы", 2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ТипЗнч(ИсточникДанных) = Тип("СтрокаТаблицыЗначений") Тогда
		Если ИсточникДанных.Владелец().Колонки.Найти(Показатель.Имя) <> Неопределено Тогда
			ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	Иначе
		Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
			ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		Если ЗначениеПоказателя = Неопределено Тогда
			ЗначениеПоказателя = 0;
		Иначе
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки)
	
	НомерСтрокиСтр = СтрокаЧГ0(НомерСтроки);
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ТипЗнч(ИсточникДанных) = Тип("СтрокаТаблицыЗначений") Тогда
		ИмяПоказателя = ИмяКолонки_МнЧ(Показатель.Имя);
		Если ИсточникДанных.Владелец().Колонки.Найти(ИмяПоказателя) <> Неопределено Тогда
			ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	Иначе
		Если ИсточникДанных.Свойство(ИмяПоказателя) Тогда
			ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
	ДобавитьКординаты(Показатель);
	
КонецПроцедуры

&НаСервере
Функция ИмяКолонки_МнЧ(ИмяПараметра)
	Возврат Лев(ИмяПараметра, СтрНайти(ИмяПараметра, "_") - 1);
КонецФункции

&НаСервере
Функция ПоказателиКС(ЛеваяЧасть, ПраваяЧасть, РазмерЛев = Ложь, РазмерПрав = Ложь)
	
	ПоказателиКС = Новый Структура();
	
	Если РазмерЛев Тогда 
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть);
	КонецЕсли;
	
	Если РазмерПрав Тогда 
		ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть);
	КонецЕсли;
	
	ПоказателиКС.Вставить("ЛеваяЧасть", ЛеваяЧасть);
	ПоказателиКС.Вставить("ЛеваяЧастьСтр", Формат(ЛеваяЧасть, "ЧРД=,; ЧН="));
	
	ПоказателиКС.Вставить("ПраваяЧасть", ПраваяЧасть);
	ПоказателиКС.Вставить("ПраваяЧастьСтр", Формат(ПраваяЧасть, "ЧРД=,; ЧН="));
	
	Возврат ПоказателиКС;
	
КонецФункции

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено, СсылкаНаДокумент = Неопределено)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя + ?(СсылкаНаДокумент <> Неопределено , " (по данным за предыдущий отчетный период)", ""),
		ЗначениеПоказателя,
		"",
		?(СсылкаНаДокумент = Неопределено, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, СсылкаНаДокумент),
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок,
		ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено,
		Коммент = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Коммент);
	
КонецПроцедуры

Функция НомерСтраницы(НомСтрокиВДереве, НомСтрокиВВетке2, НомСтрокиВВетке21 = "")
	
	Разделитель = ",";
	Возврат СтрокаЧГ0(НомСтрокиВДереве) + Разделитель + СтрокаЧГ0(НомСтрокиВВетке2) + Разделитель + СтрокаЧГ0(НомСтрокиВВетке21);
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, Ветка211 = Неопределено, НомерСтраницы)
	
	ОбъединеннаяСтруктура = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из Ветка2.Данные Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из Ветка21.Данные Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Если Ветка211 <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из Ветка211.Данные Цикл
			ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Представление = НомерСтраницы;
	НоваяСтрока.Данные = ОбъединеннаяСтруктура;
	
КонецПроцедуры

Функция ДанныеИзДереваРаздела(ИмяРаздела) Экспорт
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Представление");
	Таблица.Колонки.Добавить("Данные");
	
	Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
		Ветка2 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
		Для НомСтрокиВВетке2 = 1 По Ветка2.Строки.Количество() Цикл
			Ветка21 = Ветка2.Строки[НомСтрокиВВетке2 - 1];
			
			Если Ветка21.Строки.Количество() = 0 Тогда
				Представление = НомерСтраницы(НомСтрокиВДереве, НомСтрокиВВетке2,);
				ДобавитьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, , Представление);
				
			Иначе
				Для НомСтрокиВВетке21 = 1 По Ветка21.Строки.Количество() Цикл
					Ветка211 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
					Представление = НомерСтраницы(НомСтрокиВДереве, НомСтрокиВВетке2, НомСтрокиВВетке21);
					ДобавитьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, Ветка211, Представление);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция НомерСтраницыМнУ(НомерСтраницы, ПорядокСтраницы)
	Перем Результат;
	
	Результат = "";
	ЧислоПорядков = СтрЧислоВхождений(НомерСтраницы, ",") + 1;
	Если ЧислоПорядков = 0 Тогда
		Возврат НомерСтраницы;
		
	ИначеЕсли ЧислоПорядков = ПорядокСтраницы Тогда
		Возврат НомерСтраницы;
		
	Иначе
		
		Результат = НомерСтраницыНав(НомерСтраницы, ПорядокСтраницы);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НомерСтраницыНав(НомерСтраницы, ПорядокСтраницы)
	
	МассивНомеров = СтрРазделить(НомерСтраницы, ",");
	
	Индекс = МассивНомеров.ВГраница();
	Пока Индекс >= ПорядокСтраницы Цикл 
		Если Индекс > ПорядокСтраницы-1 Тогда
			МассивНомеров.Удалить(Индекс);
		КонецЕсли; 
		Индекс = Индекс - 1; 
	КонецЦикла;
	
	Возврат СтрСоединить(МассивНомеров, ",");
	
КонецФункции

&НаСервере
Функция ПредставлениеДляРасшифровки(ЗначениеПредставления, ПредставлениеПустого = "")
	
	ТипПредставления = ТипЗнч(ЗначениеПредставления);
	Если ТипПредставления = Тип("Строка") Тогда
		Представление = """" + ЗначениеПредставления +  """";
		ПредставлениеПустого = """""";
	ИначеЕсли ТипПредставления = Тип("Дата") Тогда
		Представление = Формат(ЗначениеПредставления, "ДЛФ=D");
		ПредставлениеПустого = """ . . """;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(ЗначениеПредставления), Представление, ПредставлениеПустого);
	
КонецФункции

&НаСервере
Функция КоличествоСтрок(Данные, Показатель)
	Инд = 1; Количество = 0;
	Пока Данные.Свойство(Показатель + СтрокаЧГ0(Инд)) Цикл
		Количество = Количество + 1;
		Инд = Инд + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция МассивКодовИзМакета(КодыРаздела = "КодыВодопользованияРаздел21")
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2016Кв1");
	МассивКодов = Новый Массив;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Область.Имя = КодыРаздела Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					МассивКодов.Добавить(КодПоказателя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивКодов;
КонецФункции

&НаСервере
Функция ПараметрВходитВДиапазон(Показатель, МассивКодов, ДиапазонЗначений = Неопределено)
	
	Если ДиапазонЗначений = Неопределено Тогда
		Возврат МассивКодов;
	КонецЕсли;
	
	МассивДиапазона = СтрРазделить(ДиапазонЗначений, "|");
	ВГраница = МассивДиапазона.ВГраница();
	Инд1 = 0;
	Пока Инд1 <= ВГраница Цикл
		Элемент = МассивДиапазона[Инд1];
		НомерВхождения = СтрНайти(Элемент, "-");
		Если НомерВхождения > 0 Тогда
			Первый = Лев(Элемент, НомерВхождения - 1);
			Последний = Сред(Элемент, НомерВхождения + 1);
			ПервыйИнд = МассивКодов.Найти(Первый);
			ПоследнийИнд = МассивКодов.Найти(Последний);
			Если ПервыйИнд <> Неопределено И ПоследнийИнд <> Неопределено Тогда
				Для Инд2 = ПервыйИнд По ПоследнийИнд Цикл
					Если Инд2 = ПервыйИнд Тогда
						МассивДиапазона[Инд1] = МассивКодов[Инд2];
						
					Иначе
						Инкр(Инд1);
						Инкр(ВГраница);
						МассивДиапазона.Вставить(Инд1, МассивКодов[Инд2]);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Инкр(Инд1);
		
	КонецЦикла;
	
	Возврат МассивДиапазона.Найти(Показатель) <> Неопределено;
	
КонецФункции

&НаСервере
Процедура Инкр(ИнкрементируемоеЗначение, Шаг = 1) Экспорт
	
	ИнкрементируемоеЗначение = ИнкрементируемоеЗначение + Шаг;
	
КонецПроцедуры

&НаСервере
Функция КодНайден(ЗначениеКода, Условия = Неопределено)
	
	МассивКодов = СтрРазделить(Условия, ",");
	Возврат МассивКодов.Найти(ЗначениеКода) <> Неопределено;
	
КонецФункции

Функция РазделНеЗаполнен(Раздел)
	Результат = Истина;
	Для Каждого СтраницаРаздела Из Раздел Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Для Каждого ПараметрРаздела Из ДанныеСтраницы Цикл
			Если ЗначениеЗаполнено(ПараметрРаздела.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции