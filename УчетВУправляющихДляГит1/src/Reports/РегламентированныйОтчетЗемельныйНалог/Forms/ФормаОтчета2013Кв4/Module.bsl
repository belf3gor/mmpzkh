&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2013Кв4";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	СтруктураДанныхТитульный = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
		
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1", "ТаблицаСтраницыРаздела1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2", "ТаблицаСтраницыРаздела2");
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
         	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2011";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1153005";
    		
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.02", Истина);

	СтруктураРеквизитовФормы.мПечатныеформы     = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
    		
	ИмяРаздела = "Титульный";
		
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация        	  = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("ОбязРазделов");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияОтчета");
	СтруктураРеквизитовФормы.Вставить("мДанныеОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЕстьВыбранные");
	СтруктураРеквизитовФормы.Вставить("мИнтервалАвтосохранения");
	СтруктураРеквизитовФормы.Вставить("мНеВызыватьРасчет");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мНеВызыватьРасчет = Ложь;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ОтобразитьНомерКорректировки(ЭтаФорма);
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			
			// Заполнение значений по умолчанию
			ТабличныйДокумент.Области.ПоМесту.Значение = "270";
			ТабличныйДокумент.Области.Период.Значение  = "34";
			
		КонецЕсли;
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;

	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
			
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
	 
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003003_1", "П000010002103_1;П000010002303_1;П000010002503_1;П000010002703_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010004003_1", "П000010002103_1;П000010002303_1;П000010002503_1;П000010002703_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003003_2", "П000010002103_2;П000010002303_2;П000010002503_2;П000010002703_2");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010004003_2", "П000010002103_2;П000010002303_2;П000010002503_2;П000010002703_2");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	

	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");

	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач СохраненныйДок)
	
	Если СохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(СохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			СохраненныйДок = СохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не СохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			СохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				СохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000020000100";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
    	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2013Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	Если ДатаПодписи >= '20120101' Тогда
		ИмяСекцииКБК = "КБК_2012Кв1"
	Иначе
		ИмяСекцииКБК = "КодыКБК";
	КонецЕсли;
	
	ИмяСекцииКатегорийЗемли = ?(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-01-01', "КатегорииЗемли2013", "КатегорииЗемли");
	
	Для Инд = 1 По 2 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003_" + Инд, 20, , "Выбор КБК", КоллекцияСписковВыбора[ИмяСекцииКБК]);
	КонецЦикла;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001003", 20, , "Выбор КБК", КоллекцияСписковВыбора[ИмяСекцииКБК]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор налогового периода", КоллекцияСписковВыбора["НалоговыеПериоды"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыОрг", 1, , "Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["КодыФормОрг"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020003003", 12, , "Выбор категории земли", КоллекцияСписковВыбора[ИмяСекцииКатегорийЗемли]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004003", 1, , "Выбор категории земли", КоллекцияСписковВыбора["ПериодыСтроительства"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020007003_КодЛьготы", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020009003",           7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020011003_КодЛьготы", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020020003_КодЛьготы", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020022003",           7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020024003_КодЛьготы", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот6"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020026003_КодЛьготы", 7, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьгот7"]);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			  		   = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения 		   = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения  = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					   = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
		
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;				
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;					
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;				
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Строка(НомерКорр);
	Форма.ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	Если СокрЛП(ТабличныйДокумент.Области.Период.Значение) = "" ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = "34";
		ТабличныйДокумент.Области.Период.Значение = КодОтчетногоПериода;	
	КонецЕсли;	
	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ТабличныйДокумент.Области.ОтчетГод.Значение = ОтчетныйГод;
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
    
	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
	              		
		// заполняем ИНН
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
				
		Форма.ТабличныйДокумент.Области.ИНН1.Значение = ИНН;
		
		// заполняем КПП
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
				
		Форма.ТабличныйДокумент.Области.КПП1.Значение = КПП;
						
		// заполняем код ИФНС
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		Форма.ТабличныйДокумент.Области.КодИМНС.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
				
		// заполняем телефон организации
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
				
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ТабличныйДокумент.Области.ОКВЭД.Значение);
																	 
	// заполняем сведения о подписантах
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
		Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		
	Иначе
		
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
		
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , ПоказателиОтчета);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность              = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана        = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        				= КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант 									= Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки 			= "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Перем ТаблицаСтраниц;
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
		
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	СформироватьСпискиВыбора();
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") = 1 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "СобратьДанные") > 0 И Область.Текст <> "" Тогда
		СобратьДанные("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;
	  	
	Если Лев(ИмяЯчейки, 7) = "КодИМНС" Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭтоПолеВводаОснованияЛьготы = (СтрНайти(ИмяЯчейки, "_Основание") > 0);
	Если ЭтоПолеВводаОснованияЛьготы Тогда
		ВвестиОснованиеЛьготы(Область);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
				
		ТребРезультат = 0;
				
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
			    	ТЗВыбора.Удалить(ЭлементТЗ);
			 	КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
				
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	Иначе
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1"
			ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
			
		КонецЕсли;
	КонецЕсли;
		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
		
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
						   
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
						   
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда			
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");

		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");

		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
    
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области.КодИМНС.Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области.КПП1.Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Если Область.Имя = КодПоказателя Тогда	

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Тогда	
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Модифицированность = Истина;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
		
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010003003_1, ОбластьИмя) > 0
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010004003_1, ОбластьИмя) > 0 Тогда
				
				СуммаНалога = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000010002103_1.Значение)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000010002303_1.Значение)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000010002503_1.Значение)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000010002703_1.Значение);
				
				Форма.ТабличныйДокумент.Области.П000010003003_1.Значение = Макс(СуммаНалога, 0);
				Форма.ТабличныйДокумент.Области.П000010004003_1.Значение = -Мин(СуммаНалога, 0);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010003003_2, ОбластьИмя) > 0
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010004003_2, ОбластьИмя) > 0 Тогда
				
				СуммаНалога = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000010002103_2.Значение)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000010002303_2.Значение)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000010002503_2.Значение)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000010002703_2.Значение);
				
				Форма.ТабличныйДокумент.Области.П000010003003_2.Значение = Макс(СуммаНалога, 0);
				Форма.ТабличныйДокумент.Области.П000010004003_2.Значение = -Мин(СуммаНалога, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			ЧислоМесяцевВОтчетномПериоде = 12;
			
			// Коэффициент Кл определяется как отношение числа полных месяцев, 
			// в течение которых отсутствует налоговая льгота, к числу календарных 
			// месяцев в налоговом периоде.
			П000020015003 = Форма.ТабличныйДокумент.Области.П000020015003.Значение;
			П000020018003 = Форма.ТабличныйДокумент.Области.П000020018003.Значение;
			
			Если П000020018003 = 0 Тогда
				П000020019003 = 1;
			Иначе
				ЧислоМесяцевИспользованияЛьготы = П000020015003 - П000020018003;
				П000020019003 = Макс(ЧислоМесяцевИспользованияЛьготы / ЧислоМесяцевВОтчетномПериоде, 0);
				П000020019003 = Окр(П000020019003, 4);
			КонецЕсли;
			
			Форма.ТабличныйДокумент.Области.П000020019003.Значение = П000020019003;
			П000020019003 = Форма.ТабличныйДокумент.Области.П000020019003.Значение;
			
			П000020005003 = Форма.ТабличныйДокумент.Области.П000020005003.Значение;
			
			П000020006003_Числ = Форма.ТабличныйДокумент.Области.П000020006003_Числ.Значение;
			П000020006003_Знам = Форма.ТабличныйДокумент.Области.П000020006003_Знам.Значение;
			П000020006003 = П000020006003_Числ / ?(П000020006003_Знам = 0, 1, П000020006003_Знам);
			Если П000020006003 > 1 Тогда
				Если П000020006003_Знам = 0 Тогда
					П000020006003 = 1;
					
					Сообщение = Новый СообщениеПользователю;
					
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доля налогоплательщика в праве на земельный участок не может превышать единицу.%1По строке 060 не указан знаменатель дроби.'"), Символы.ПС);
					
					Сообщение.Сообщить();
					
				КонецЕсли;
			КонецЕсли;
			
			П000020012003_Числ = Форма.ТабличныйДокумент.Области.П000020012003_Числ.Значение;
			П000020012003_Знам = Форма.ТабличныйДокумент.Области.П000020012003_Знам.Значение;
			П000020012003 = П000020012003_Числ / ?(П000020012003_Знам = 0, 1, П000020012003_Знам);
			Если П000020012003 > 1 Тогда
				Если П000020012003_Знам = 0 Тогда
					П000020012003 = 0;
					
					Сообщение = Новый СообщениеПользователю;
					
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доля не облагаемой площади земельного участка не может превышать единицу.%1По строке 120 не указан знаменатель дроби.'"), Символы.ПС);
					
					Сообщение.Сообщить();
					
				КонецЕсли;
			КонецЕсли;
			
			П000020008003 = Форма.ТабличныйДокумент.Области.П000020008003.Значение;
			П000020010003 = Форма.ТабличныйДокумент.Области.П000020010003.Значение;
			
			Если П000020006003 = 0 Тогда
				ОсноваДляРасчетаНалоговойБазы = П000020005003;
			Иначе
				ОсноваДляРасчетаНалоговойБазы = П000020005003 * П000020006003;
			КонецЕсли;
			
			Если П000020008003 <> 0 ИЛИ П000020010003 <> 0 Тогда
				П000020013003 = Макс(ОсноваДляРасчетаНалоговойБазы - (П000020008003 + П000020010003), 0);
			ИначеЕсли П000020012003 > 0 Тогда
				П000020013003 = Макс((ОсноваДляРасчетаНалоговойБазы - (ОсноваДляРасчетаНалоговойБазы * П000020012003 * (1 - П000020019003))), 0);
			Иначе
				П000020013003 = Макс(ОсноваДляРасчетаНалоговойБазы, 0);
			КонецЕсли;
			Форма.ТабличныйДокумент.Области.П000020013003.Значение = П000020013003;
			
			// Коэффициент Кв определяется как отношение числа полных месяцев, 
			// в течение которых данный земельный участок находился в собственности
			// (постоянном (бессрочном) пользовании, пожизненном наследуемом владении) 
			// налогоплательщика, указанных по строке с кодом 150, к числу календарных 
			// месяцев в налоговом периоде.
			
			П000020016003 = П000020015003 / ЧислоМесяцевВОтчетномПериоде;
			П000020016003 = Окр(П000020016003, 4);
			Форма.ТабличныйДокумент.Области.П000020016003.Значение = П000020016003;
			
			П000020004003 = Форма.ТабличныйДокумент.Области.П000020004003.Значение;
			П000020013003 = Форма.ТабличныйДокумент.Области.П000020013003.Значение;
			П000020014003 = Форма.ТабличныйДокумент.Области.П000020014003.Значение;
			
			ОсноваДляРасчетаСтроки170 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020013003) * П000020014003 * П000020016003 / 100;
			Если П000020004003 = "1" Тогда
				П000020017003 = ОсноваДляРасчетаСтроки170 * 2;
			ИначеЕсли П000020004003 = "2" Тогда
				П000020017003 = ОсноваДляРасчетаСтроки170 * 4;
			Иначе
				П000020017003 = ОсноваДляРасчетаСтроки170;
			КонецЕсли;
			
			// П000020017003 = Окр(П000020017003, 2);
			
			П000020017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003);
			
			Форма.ТабличныйДокумент.Области.П000020017003.Значение = П000020017003;
			
			П000020020003_КодЛьготы = Форма.ТабличныйДокумент.Области.П000020020003_КодЛьготы.Значение;
			Если НЕ ПустаяСтрока(П000020020003_КодЛьготы) Тогда
				П000020021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) * (1 - П000020019003);
			Иначе
				П000020021003 = 0;
			КонецЕсли;
			Форма.ТабличныйДокумент.Области.П000020021003.Значение = П000020021003;
			
			П000020022003 = Форма.ТабличныйДокумент.Области.П000020022003.Значение;
			Если НЕ ПустаяСтрока(П000020022003) Тогда
				П000020023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) * (1 - П000020019003);
			Иначе
				П000020023003 = 0;
			КонецЕсли;
			Форма.ТабличныйДокумент.Области.П000020023003.Значение = П000020023003;
			
			П000020021003 = Форма.ТабличныйДокумент.Области.П000020021003.Значение;
			П000020023003 = Форма.ТабличныйДокумент.Области.П000020023003.Значение;
			П000020025003 = Форма.ТабличныйДокумент.Области.П000020025003.Значение;
			П000020027003 = Форма.ТабличныйДокумент.Области.П000020027003.Значение;
			
			Если ЗначениеЗаполнено(П000020025003) Тогда
				П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020025003);
				
			ИначеЕсли ЗначениеЗаполнено(П000020027003) Тогда
				П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020027003);
				
			ИначеЕсли ЗначениеЗаполнено(П000020021003) Тогда
				П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020021003);
				
			ИначеЕсли ЗначениеЗаполнено(П000020023003) Тогда
				П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020023003);
				
			Иначе
				П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003);
				
			КонецЕсли;
			
			П000020028003 = Макс(П000020028003, 0);
			Форма.ТабличныйДокумент.Области.П000020028003.Значение = П000020028003;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда	
		
		ПолныйРасчетРаздела1(Форма);
		Расчет(Форма, "Раздел1");	
		ПолныйРасчетРаздела2(Форма);
		Расчет(Форма, "Раздел2");	

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолныйРасчетРаздела1(Форма, ОбластьИмя = "")
			
	Для Каждого СтраницаРаздела1 Из Форма.ТаблицаСтраницыРаздела1 Цикл
		
		Если СтраницаРаздела1.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		ПолеТабличногоДокументаРаздел1 = СтраницаРаздела1.Данные[0].Значение;
		
		Если ПолеТабличногоДокументаРаздел1.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010003003_1, ОбластьИмя) > 0
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010004003_1, ОбластьИмя) > 0 Тогда
			
			СуммаНалога = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел1.П000010002103_1)
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел1.П000010002303_1)
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел1.П000010002503_1)
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел1.П000010002703_1);
			
			ПолеТабличногоДокументаРаздел1.П000010003003_1 = Макс(СуммаНалога, 0);
			ПолеТабличногоДокументаРаздел1.П000010004003_1 = -Мин(СуммаНалога, 0);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010003003_2, ОбластьИмя) > 0
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010004003_2, ОбластьИмя) > 0 Тогда
			
			СуммаНалога = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел1.П000010002103_2)
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел1.П000010002303_2)
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел1.П000010002503_2)
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел1.П000010002703_2);
			
			ПолеТабличногоДокументаРаздел1.П000010003003_2 = Макс(СуммаНалога, 0);
			ПолеТабличногоДокументаРаздел1.П000010004003_2 = -Мин(СуммаНалога, 0);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолныйРасчетРаздела2(Форма, ОбластьИмя = "")
			
	Для Каждого СтраницаРаздела2 Из Форма.ТаблицаСтраницыРаздела2 Цикл
		
		ПолеТабличногоДокументаРаздел2 = СтраницаРаздела2.Данные[0].Значение;
		
		Если ПолеТабличногоДокументаРаздел2.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоМесяцевВОтчетномПериоде = 12;
		
		// Коэффициент Кл определяется как отношение числа полных месяцев, 
		// в течение которых отсутствует налоговая льгота, к числу календарных 
		// месяцев в налоговом периоде.
		П000020015003 = ПолеТабличногоДокументаРаздел2.П000020015003;
		П000020018003 = ПолеТабличногоДокументаРаздел2.П000020018003;
		
		Если П000020018003 = 0 Тогда
			П000020019003 = 1;
		Иначе
			ЧислоМесяцевИспользованияЛьготы = П000020015003 - П000020018003;
			П000020019003 = Макс(ЧислоМесяцевИспользованияЛьготы / ЧислоМесяцевВОтчетномПериоде, 0);
			П000020019003 = Окр(П000020019003, 4);
		КонецЕсли;
		
		ПолеТабличногоДокументаРаздел2.П000020019003 = П000020019003;
		П000020019003 = ПолеТабличногоДокументаРаздел2.П000020019003;
		
		П000020005003 = ПолеТабличногоДокументаРаздел2.П000020005003;
		
		П000020006003_Числ = ПолеТабличногоДокументаРаздел2.П000020006003_Числ;
		П000020006003_Знам = ПолеТабличногоДокументаРаздел2.П000020006003_Знам;
		П000020006003 = П000020006003_Числ / ?(П000020006003_Знам = 0, 1, П000020006003_Знам);
		Если П000020006003 > 1 Тогда
			Если П000020006003_Знам = 0 Тогда
				П000020006003 = 1;
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доля налогоплательщика в праве на земельный участок не может превышать единицу.%1По строке 060 не указан знаменатель дроби.'"), Символы.ПС);
				
				Сообщение.Сообщить();
				
			КонецЕсли;
		КонецЕсли;
		
		П000020012003_Числ = ПолеТабличногоДокументаРаздел2.П000020012003_Числ;
		П000020012003_Знам = ПолеТабличногоДокументаРаздел2.П000020012003_Знам;
		П000020012003 = П000020012003_Числ / ?(П000020012003_Знам = 0, 1, П000020012003_Знам);
		Если П000020012003 > 1 Тогда
			Если П000020012003_Знам = 0 Тогда
				П000020012003 = 0;
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доля не облагаемой площади земельного участка не может превышать единицу.%1По строке 120 не указан знаменатель дроби.'"), Символы.ПС);
				
				Сообщение.Сообщить();
				
			КонецЕсли;
		КонецЕсли;
		
		П000020008003 = ПолеТабличногоДокументаРаздел2.П000020008003;
		П000020010003 = ПолеТабличногоДокументаРаздел2.П000020010003;
		
		Если П000020006003 = 0 Тогда
			ОсноваДляРасчетаНалоговойБазы = П000020005003;
		Иначе
			ОсноваДляРасчетаНалоговойБазы = П000020005003 * П000020006003;
		КонецЕсли;
		
		Если П000020008003 <> 0 ИЛИ П000020010003 <> 0 Тогда
			П000020013003 = Макс(ОсноваДляРасчетаНалоговойБазы - (П000020008003 + П000020010003), 0);
		ИначеЕсли П000020012003 > 0 Тогда
			П000020013003 = Макс((ОсноваДляРасчетаНалоговойБазы - (ОсноваДляРасчетаНалоговойБазы * П000020012003 * (1 - П000020019003))), 0);
		Иначе
			П000020013003 = Макс(ОсноваДляРасчетаНалоговойБазы, 0);
		КонецЕсли;
		ПолеТабличногоДокументаРаздел2.П000020013003 = П000020013003;
		
		// Коэффициент Кв определяется как отношение числа полных месяцев, 
		// в течение которых данный земельный участок находился в собственности
		// (постоянном (бессрочном) пользовании, пожизненном наследуемом владении) 
		// налогоплательщика, указанных по строке с кодом 150, к числу календарных 
		// месяцев в налоговом периоде.
		
		П000020016003 = П000020015003 / ЧислоМесяцевВОтчетномПериоде;
		П000020016003 = Окр(П000020016003, 4);
		ПолеТабличногоДокументаРаздел2.П000020016003 = П000020016003;
		
		П000020004003 = ПолеТабличногоДокументаРаздел2.П000020004003;
		П000020013003 = ПолеТабличногоДокументаРаздел2.П000020013003;
		П000020014003 = ПолеТабличногоДокументаРаздел2.П000020014003;
		
		ОсноваДляРасчетаСтроки170 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020013003) * П000020014003 * П000020016003 / 100;
		Если П000020004003 = "1" Тогда
			П000020017003 = ОсноваДляРасчетаСтроки170 * 2;
		ИначеЕсли П000020004003 = "2" Тогда
			П000020017003 = ОсноваДляРасчетаСтроки170 * 4;
		Иначе
			П000020017003 = ОсноваДляРасчетаСтроки170;
		КонецЕсли;
		
		// П000020017003 = Окр(П000020017003, 2);
		
		П000020017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003);
		
		ПолеТабличногоДокументаРаздел2.П000020017003 = П000020017003;
		
		П000020020003_КодЛьготы = ПолеТабличногоДокументаРаздел2.П000020020003_КодЛьготы;
		Если НЕ ПустаяСтрока(П000020020003_КодЛьготы) Тогда
			П000020021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) * (1 - П000020019003);
		Иначе
			П000020021003 = 0;
		КонецЕсли;
		ПолеТабличногоДокументаРаздел2.П000020021003 = П000020021003;
		
		П000020022003 = ПолеТабличногоДокументаРаздел2.П000020022003;
		Если НЕ ПустаяСтрока(П000020022003) Тогда
			П000020023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) * (1 - П000020019003);
		Иначе
			П000020023003 = 0;
		КонецЕсли;
		ПолеТабличногоДокументаРаздел2.П000020023003 = П000020023003;
		
		П000020021003 = ПолеТабличногоДокументаРаздел2.П000020021003;
		П000020023003 = ПолеТабличногоДокументаРаздел2.П000020023003;
		П000020025003 = ПолеТабличногоДокументаРаздел2.П000020025003;
		П000020027003 = ПолеТабличногоДокументаРаздел2.П000020027003;
		
		Если ЗначениеЗаполнено(П000020025003) Тогда
			П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020025003);
			
		ИначеЕсли ЗначениеЗаполнено(П000020027003) Тогда
			П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020027003);
			
		ИначеЕсли ЗначениеЗаполнено(П000020021003) Тогда
			П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020021003);
			
		ИначеЕсли ЗначениеЗаполнено(П000020023003) Тогда
			П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020023003);
			
		Иначе
			П000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000020017003);
			
		КонецЕсли;
		
		П000020028003 = Макс(П000020028003, 0);
		ПолеТабличногоДокументаРаздел2.П000020028003 = П000020028003;
		                               		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Перем ТаблицаСтраницРаздела;
	
	Если Область.Имя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		ДатаПодписиПриИзмененииНаСервере();
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
		Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения+1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);

			Сообщение.Сообщить();
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Область.Имя = "ОКВЭД" Тогда
		
		Если НЕ ПустаяСтрока(Область.Значение) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
					
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);

			Сообщение.Сообщить();

		КонецЕсли;
		
	ИначеЕсли Область.Имя = "П000010000100" Тогда	
		
		// Изменим во всех листах многостраничного документа.
		СРП = ТабличныйДокумент.Области.П000010000100.Значение;
		мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
			Если Страница.Данные.Количество() > 0 Тогда
				Страница.Данные[0].Значение.П000010000100 = СРП;
				Страница.Данные[0].Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Область.Имя = "П000020006003_Числ" Тогда		
		
		СтруктураРеквизитовФормы.мНеВызыватьРасчет = Ложь;
		Если ТабличныйДокумент.Области.П000020006003_Знам.Значение = 0 Тогда
			СтруктураРеквизитовФормы.мНеВызыватьРасчет = Истина;
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "П000020012003_Числ" Тогда			
		
		СтруктураРеквизитовФормы.мНеВызыватьРасчет = Ложь;
		Если ТабличныйДокумент.Области.П000020012003_Знам.Значение = 0 Тогда
			СтруктураРеквизитовФормы.мНеВызыватьРасчет = Истина;
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "П000020015003"
		    И Область.Значение > 12 Тогда
		
		Область.Значение = 12;
		
	ИначеЕсли Область.Имя = "П000020018003"
		    И Область.Значение > 12 Тогда
		
		Область.Значение = 12;
			
	КонецЕсли;
	    	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1"
	 ИЛИ ИмяРаздела = "Раздел2" Тогда
		
		ИмяОбласти = Область.Имя;
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	          	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
		
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		КМенюРО.Видимость = Истина;
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                  = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел1"
	 ИЛИ НаимРаздела = "Раздел2" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел1" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела1";
			
		ИначеЕсли НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
			
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
			
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
						
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы)
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел1"
		ИЛИ ИмяТекРаздела = "Раздел2" Тогда
		
		Если ИмяТекРаздела = "Раздел1" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела1";
		ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		
	// Обычные разделы.
	//	
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела = "Титульный" Тогда
		УправлениеЛистамиНаСервере();
	Иначе
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
	
		СРП = ТабличныйДокумент.Области.П000010000100.Значение;
	
	КонецЕсли; 
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
	
		ТабличныйДокумент.Области.П000010000100.Значение = СРП;
	
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
			
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
    	
    ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)

	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные(Команда)
	
	Если ТаблицаСтраницыРаздела2.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	СформироватьРаздел1НаСервере(Истина);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаИПодготовкаРаздела1НаСервере(АвансовыеПлатежи)
	Перем ТаблицаСтраницРаздела1;

	Если Не мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела1) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела1 = ЭтаФорма[ТаблицаСтраницРаздела1];
	
	Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела1 Цикл
		
		Если НЕ СтрокаТаблицы.Данные.Количество() = 0 Тогда
			
			Для Блок = 1 По 2 Цикл
				
				АвансовыйПлатеж = АвансовыеПлатежи.Добавить();
				АвансовыйПлатеж.КБК   = СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010001003" + "_" + Блок]);
				АвансовыйПлатеж.ОКАТО = СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002003" + "_" + Блок]);
				
				АвансовыйПлатеж.СуммаАвансовыхПлатежей1Кв = Число(СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002303" + "_" + Блок]));
				АвансовыйПлатеж.СуммаАвансовыхПлатежей2Кв = Число(СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002503" + "_" + Блок]));
				АвансовыйПлатеж.СуммаАвансовыхПлатежей3Кв = Число(СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002703" + "_" + Блок]));
				
			КонецЦикла;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтраниц = ТаблицаСтраницРаздела1.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтраниц Цикл
		Инд = КоличествоСтраниц - ОбратныйИндекс;
		СтрокаТаблицы = ТаблицаСтраницРаздела1[Инд];
		Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
			Если ТаблицаСтраницРаздела1.Количество() = 1 Тогда
				// В таблице должно быть не менее одной строки.
				СтрокаТаблицы.АктивнаяСтраница = Истина;
			Иначе
				ТаблицаСтраницРаздела1.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьТабличноеПолеНаСервере("Раздел1");
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел1");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1НаСервере(ПоРазделу2 = Ложь)
	
	АвансовыеПлатежи = Новый ТаблицаЗначений;
	АвансовыеПлатежи.Колонки.Добавить("КБК");
	АвансовыеПлатежи.Колонки.Добавить("ОКАТО");
	АвансовыеПлатежи.Колонки.Добавить("СуммаАвансовыхПлатежей1Кв");
	АвансовыеПлатежи.Колонки.Добавить("СуммаАвансовыхПлатежей2Кв");
	АвансовыеПлатежи.Колонки.Добавить("СуммаАвансовыхПлатежей3Кв");
		
	Если ПоРазделу2 Тогда
		ОчисткаИПодготовкаРаздела1НаСервере(АвансовыеПлатежи);
	КонецЕсли;
	
	ДанныеДляЗаполнения = Новый ТаблицаЗначений;
	ДанныеДляЗаполнения.Колонки.Добавить("КБК");
	ДанныеДляЗаполнения.Колонки.Добавить("ОКАТО");
	ДанныеДляЗаполнения.Колонки.Добавить("Налог");
	
	// собираем данные раздела 1
	ТаблДанныхРаздел1 = ЭтаФорма[мСтруктураМногостраничныхРазделов.Раздел1];
	
	// собираем данные раздела 2
	ТаблДанныхРаздел2 = ЭтаФорма[мСтруктураМногостраничныхРазделов.Раздел2];
	
	Для Каждого Стр из ТаблДанныхРаздел2 Цикл
		
		Попытка

			КБК = Стр.Данные[0].Значение.П000020001003;

		Исключение

			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнены страницы Раздела 2!'");
			Сообщение.Сообщить();
			УстановитьВидимостьУдалитьСтраницу("ТаблицаСтраницыРаздела1");
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			Возврат;

		КонецПопытки;
		
		ОКАТО = Стр.Данные[0].Значение.П000020002003;
		ОкрП000020028003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Стр.Данные[0].Значение.П000020028003);
		
		Если НЕ ПустаяСтрока(КБК) Тогда

			Если НЕ ПустаяСтрока(ОКАТО) Тогда
				НовСтр = ДанныеДляЗаполнения.Добавить();
				НовСтр.КБК   = КБК;
				НовСтр.ОКАТО = ОКАТО;
				НовСтр.Налог = ОкрП000020028003;
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не заполнен код ОКТМО на странице Раздела 2!'");
				Сообщение.Сообщить();
				УстановитьВидимостьУдалитьСтраницу("ТаблицаСтраницыРаздела1");
				РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
				Возврат;
			КонецЕсли;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнен код КБК на странице Раздела 2!'");
			Сообщение.Сообщить();
			УстановитьВидимостьУдалитьСтраницу("ТаблицаСтраницыРаздела1");
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	// сворачиваем по КБК и ОКАТО, суммируем по колонке Налог
	ДанныеДляЗаполнения.Свернуть("КБК, ОКАТО", "Налог");
	
	Если ПоРазделу2 Тогда
		УдалитьДополнительнуюСтраницуНаСервере("Раздел1");
	КонецЕсли;
	
	// заполняем раздел 1 полученными данными
	КоличествоБлоковНаЛисте = 2;
	ПерваяСтраница = Истина;
	Для Инд = 0 По ДанныеДляЗаполнения.Количество() - 1 Цикл
		ТекСтр = ДанныеДляЗаполнения[Инд];
		Если Инд % КоличествоБлоковНаЛисте = 0 И Инд <> 0 Тогда
			ВставитьДополнительнуюСтраницуНаСервере("Раздел1");
		КонецЕсли;
		ОкончаниеИмениОбласти = Формат(Инд % КоличествоБлоковНаЛисте + 1, "ЧГ=");
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			
			ТабличныйДокумент.Области["П000010001003_" + ОкончаниеИмениОбласти].Значение = ТекСтр.КБК;
			ТабличныйДокумент.Области["П000010002003_" + ОкончаниеИмениОбласти].Значение = ТекСтр.ОКАТО;
			ТабличныйДокумент.Области["П000010002103_" + ОкончаниеИмениОбласти].Значение = ТекСтр.Налог;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КБК",   ТекСтр.КБК);
			СтруктураОтбора.Вставить("ОКАТО", ТекСтр.ОКАТО);
			
			СтрокиАвансов = АвансовыеПлатежи.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиАвансов.Количество() > 0 Тогда 
				ТабличныйДокумент.Области["П000010002303_" + ОкончаниеИмениОбласти].Значение = СтрокиАвансов[0].СуммаАвансовыхПлатежей1Кв;
				ТабличныйДокумент.Области["П000010002503_" + ОкончаниеИмениОбласти].Значение = СтрокиАвансов[0].СуммаАвансовыхПлатежей2Кв;
				ТабличныйДокумент.Области["П000010002703_" + ОкончаниеИмениОбласти].Значение = СтрокиАвансов[0].СуммаАвансовыхПлатежей3Кв;	
			КонецЕсли;
			
		Иначе
			ТаблДанныхРаздел1[Цел(Инд / КоличествоБлоковНаЛисте)].Данные[0].Значение["П000010001003_" + ОкончаниеИмениОбласти] = ТекСтр.КБК;
			ТаблДанныхРаздел1[Цел(Инд / КоличествоБлоковНаЛисте)].Данные[0].Значение["П000010002003_" + ОкончаниеИмениОбласти] = ТекСтр.ОКАТО;
			ТаблДанныхРаздел1[Цел(Инд / КоличествоБлоковНаЛисте)].Данные[0].Значение["П000010002103_" + ОкончаниеИмениОбласти] = ТекСтр.Налог;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	УстановитьВидимостьУдалитьСтраницу("ТаблицаСтраницыРаздела1");
	РасчетНаСервере();
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)

	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		СтруктураРеквизитовФормы.ВидДокумента = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
		
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
			
	ТаблицаСтраницыРаздела1.Очистить();
	ТаблицаСтраницыРаздела2.Очистить();
		
	ИнициализацияМногостраничныхРазделов();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"  Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
		УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
    ПроверитьТочность();
	
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;

			
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");

		Сообщение.Сообщить();

		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	Если НомерКорректировки = 0 Тогда
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", "");
	КонецЕсли;
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	СтруктураДанныхТитульный.Вставить("НомерКорректировки", Строка(НомерКорректировки));
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
					
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
								
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
									
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
		
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2013Кв4_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   ПрефиксИменМакетов + "Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   ПрефиксИменМакетов + "Раздел2");
			
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	                                                                                        	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
		
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "П000010002003") = 1
		 ИЛИ СтрНайти(Показатель.Имя, "П000020002003") = 1 Тогда
			ОКТМО = СокрЛП(Показатель.Значение);
			ОКТМО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКТМО, 11, "-", 1);
			Показатель.ЗначениеМЧБ = ОКТМО;
		КонецЕсли;
	КонецЦикла;
	
    ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДообнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
										
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
										
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);

					Сообщение.Сообщить();

				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
		
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатныеЛисты[0].Значение, СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=dd.MM.yyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, Дополнять_ = Истина)
	
	Если (Область.Имя = "П000020018003_3" ИЛИ Область.Имя = "П000020022003_3") И Значение = "1" Тогда
		Значение = "1.0"
	КонецЕсли;
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	ТаблДок = ЭтаФорма[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(СтруктураПараметровЛиста.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	СтруктураРеквизитовФормы.мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		СтруктураРеквизитовФормы.мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
		
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		СтруктураРеквизитовФормы.мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",		РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",			"1153005");
	ПараметрыВыгрузки.Вставить("ДатаДок",		Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",	Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",		СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",		Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",		СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",		СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",		СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ПараметрыВыгрузки.Вставить("КодРеорг", СокрЛП(Титульный.КодФормыОрг));
	ПараметрыВыгрузки.Вставить("ИННРеорг", СокрЛП(Титульный.ИНН_Реорг));
	ПараметрыВыгрузки.Вставить("КППРеорг", СокрЛП(Титульный.КПП_Реорг));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",			ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",        ?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",        СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	          	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",				"NO_ZEMND_1_075_00_05_02_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_ZEMND");

	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ЗемНалНД");
	
	ПараметрыВыгрузки.Вставить("ИдФайл",		СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	КБКОКТМОРаздела1 = Новый ТаблицаЗначений;
	КБКОКТМОРаздела1.Колонки.Добавить("ОКТМО");
	КБКОКТМОРаздела1.Колонки.Добавить("КБК");
	КБКОКТМОРаздела1.Колонки.Добавить("НомерЛиста");
	КБКОКТМОРаздела1.Колонки.Добавить("НомерПарыКБКОКТМО");
	
	КБКОКТМОРаздела2 = Новый ТаблицаЗначений;
	КБКОКТМОРаздела2.Колонки.Добавить("ОКТМО");
	КБКОКТМОРаздела2.Колонки.Добавить("КБК");
	КБКОКТМОРаздела2.Колонки.Добавить("НомерЛиста");
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("250");
	ВозможныеКодыПоМесту.Добавить("251");
	ВозможныеКодыПоМесту.Добавить("270");
	
	Титульный = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел1;
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	ИначеЕсли (СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 И СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.КППОрг) И СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПериодОтч <> "34" И ПараметрыВыгрузки.ПериодОтч <> "50" Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Значение кода налогового периода должно быть равно ""34"" или ""50""!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан налогоплательщик!", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) ИЛИ СтрДлина(ПараметрыВыгрузки.КодИФНС) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;

	КонецЕсли;
	
	// проверяем параметры реорганизации
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КодРеорг) Тогда
		
		Если ПустаяСтрока(ПараметрыВыгрузки.КодРеорг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код формы реорганизации!", "Титульный", "КодФормыОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрНайти("0,1,2,3,5,6", ПараметрыВыгрузки.КодРеорг) = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан код формы реорганизации!", "Титульный", "КодФормыОрг");
			СтатусПроверки = Ложь;	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПараметрыВыгрузки.КодРеорг) И ПараметрыВыгрузки.КодРеорг <> "0" Тогда
			
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации!", "Титульный", "ИНН_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации!", "Титульный", "КПП_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// проверка раздела 1
	Для Каждого Лист Из Раздел1 Цикл

		ДанныеЛиста = Лист.Данные;
		ИндексЛиста = Раздел1.Индекс(Лист) + 1;
		Для Инд = 1 По 2 Цикл
			ТекКБК = СокрЛП(ДанныеЛиста[0].Значение["П000010001003_" + Инд]);
			ТекОКТМО = СокрЛП(ДанныеЛиста[0].Значение["П000010002003_" + Инд]);
			Строка030 = ДанныеЛиста[0].Значение["П000010003003_" + Инд];
			Строка040 = ДанныеЛиста[0].Значение["П000010004003_" + Инд];
			
			БлокЗаполнен = НЕ ПустаяСтрока(ТекКБК) ИЛИ НЕ ПустаяСтрока(ТекОКТМО)
			           ИЛИ ЗначениеЗаполнено(Строка030) ИЛИ ЗначениеЗаполнено(Строка040);
			Если БлокЗаполнен Тогда	
				
				НовСтр = КБКОКТМОРаздела1.Добавить();
				НовСтр.ОКТМО = ТекОКТМО;
				НовСтр.КБК = ТекКБК;
				НовСтр.НомерЛиста = Раздел1.Индекс(Лист) + 1;
				НовСтр.НомерПарыКБКОКТМО = Инд;
				ДлинаКБК = СтрДлина(ТекКБК);
				Если ДлинаКБК <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + ИндексЛиста + " не" + ?(ДлинаКБК = 0, "", " верно") + " задан КБК!", "Раздел1", "П000010001003_" + Инд, ИндексЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаОКТМО = СтрДлина(ТекОКТМО);
				Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда	
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + ИндексЛиста + " не" + ?(ДлинаОКТМО = 0, "", " верно") + " задан код по ОКТМО!", "Раздел1", "П000010002003_" + Инд, ИндексЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;

				Если ЗначениеЗаполнено(Строка030) И ЗначениеЗаполнено(Строка040) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + ИндексЛиста + " одновременно заполнены строки 030 и 040!", "Раздел1", "П000010003003_" + Инд, ИндексЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
	Если КБКОКТМОРаздела1.Количество() = 0 Тогда	
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано ни одно из значений кодов по ОКТМО и КБК в разделе 1!", "Раздел1", "П000010001003_1", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПовторыКБКОКТМО = КБКОКТМОРаздела1.Скопировать();
	ПовторыКБКОКТМО.Колонки.Добавить("Количество");
	ПовторыКБКОКТМО.ЗаполнитьЗначения(1, "Количество");
	ПовторыКБКОКТМО.Свернуть("КБК, ОКТМО", "Количество");
	
	Для Каждого КБКОКТМО Из ПовторыКБКОКТМО Цикл	
		Если КБКОКТМО.Количество > 1 Тогда	
			Если ЗначениеЗаполнено(КБКОКТМО.КБК) И ЗначениеЗаполнено(КБКОКТМО.ОКТМО) Тогда	
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 обнаружено повторяющееся сочетание кода КБК " + КБКОКТМО.КБК + " и кода ОКТМО " + КБКОКТМО.ОКТМО + "!", "Раздел1", , 1);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Проверка сведений раздела 2.
	Для Каждого Лист2 Из Раздел2 Цикл
		
		ДанныеЛиста2 = Лист2.Данные;
		НомерЛиста = Раздел2.Индекс(Лист2) + 1;
		
		Если ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020000100) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020003003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020001003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020002003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020004003) ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020005003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020006003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020006003_Знам)
 		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020020003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020020003_Основание)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020017003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020019003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020007003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020007003_Основание)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020008003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020009003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020010003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020011003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020011003_Основание)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020012003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020012003_Знам)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020013003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020014003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020015003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020016003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020021003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020023003)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020028003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020024003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020024003_Основание)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020025003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020026003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020026003_Основание)
		 ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020027003) Тогда	
			
			НовСтр = КБКОКТМОРаздела2.Добавить();
			НовСтр.ОКТМО = СокрЛП(ДанныеЛиста2[0].Значение.П000020002003);	
			НовСтр.КБК = СокрЛП(ДанныеЛиста2[0].Значение.П000020001003);
			НовСтр.НомерЛиста = Раздел2.Индекс(Лист2) + 1;
					
			Если ПустаяСтрока(ДанныеЛиста2[0].Значение.П000020000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не указан кадастровый номер земельного участка!", "Раздел2", "П000020000100", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020001003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020001003));
			Если ДлинаП000020001003 <> 20 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020001003 = 0, "", "верно") + " указано значение кода бюджетной классификации!", "Раздел2", "П000020001003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020002003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020002003));
			Если ДлинаП000020002003 <> 11 И ДлинаП000020002003 <> 8 Тогда	
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020002003 = 0, "", "верно") + " указано значение кода по ОКТМО!", "Раздел2", "П000020002003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020003003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020003003));
			Если ДлинаП000020003003 <> 12 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020003003 = 0, "", "верно") + " указано значение показателя ""Категория земель (код)""!", "Раздел2", "П000020003003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначП000020004003 = ДанныеЛиста2[0].Значение.П000020004003;
			ДлинаП000020004003 = СтрДлина(СокрЛП(ЗначП000020004003));
			Если ДлинаП000020004003 <> 0 И ЗначП000020004003 <> "1" И ЗначП000020004003 <> "2" Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно указано значение периода строительства!", "Раздел2", "П000020004003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка060Числитель = ДанныеЛиста2[0].Значение.П000020006003_Числ;
			Строка060Знаменатель = ДанныеЛиста2[0].Значение.П000020006003_Знам;
			Если Строка060Числитель <> 0 И Строка060Знаменатель = 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан знаменатель в значении доли налогоплательщика в праве на земельный участок!", "Раздел2", "П000020006003_Знам", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка060Числитель = 0 И Строка060Знаменатель <> 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан числитель в значении доли налогоплательщика в праве на земельный участок!", "Раздел2", "П000020006003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка060Числитель > Строка060Знаменатель Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 числитель в доле налогоплательщика в праве на земельный участок не может быть больше знаменателя!", "Раздел2", "П000020006003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020007003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020007003_КодЛьготы));
			Если ДлинаП000020007003 <> 0 И ДлинаП000020007003 <> 7 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 070!", "Раздел2", "П000020007003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020007003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020008003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 070!", "Раздел2", "П000020007003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020009003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020009003));
			Если ДлинаП000020009003 <> 0 И ДлинаП000020009003 <> 7 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 090!", "Раздел2", "П000020009003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020009003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020010003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 090!", "Раздел2", "П000020009003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020011003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020011003_КодЛьготы));
			Если ДлинаП000020011003 <> 0 И ДлинаП000020011003 <> 7 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 110!", "Раздел2", "П000020011003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020011003 = 0 И (ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020012003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста2[0].Значение.П000020012003_Знам)) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 110!", "Раздел2", "П000020011003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка120Числитель = ДанныеЛиста2[0].Значение.П000020012003_Числ;
			Строка120Знаменатель = ДанныеЛиста2[0].Значение.П000020012003_Знам;
			Если Строка120Числитель <> 0 И Строка120Знаменатель = 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан знаменатель в значении доли необлагаемой площади земельного участка!", "Раздел2", "П000020012003_Знам", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка120Числитель = 0 И Строка120Знаменатель <> 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан числитель в значении доли необлагаемой площади земельного участка!", "Раздел2", "П000020012003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка120Числитель > Строка120Знаменатель Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 числитель в значении доли необлагаемой площади земельного участка не может быть больше знаменателя!", "Раздел2", "П000020012003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020020003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020020003_КодЛьготы));
			Если ДлинаП000020020003 <> 0 И ДлинаП000020020003 <> 7 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 200!", "Раздел2", "П000020020003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020020003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020021003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 200!", "Раздел2", "П000020020003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020022003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020022003));
			Если ДлинаП000020022003 <> 0 И ДлинаП000020022003 <> 7 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы в строке 220!", "Раздел2", "П000020022003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020022003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020023003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы в строке 220!", "Раздел2", "П000020022003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020024003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020024003_КодЛьготы));
			Если ДлинаП000020024003 <> 0 И ДлинаП000020024003 <> 7 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы (п. 2 ст.387 Кодекса)!", "Раздел2", "П000020024003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020024003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020025003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы (п. 2 ст.387 Кодекса)!", "Раздел2", "П000020024003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаП000020026003 = СтрДлина(СокрЛП(ДанныеЛиста2[0].Значение.П000020026003_КодЛьготы));
			Если ДлинаП000020026003 <> 0 И ДлинаП000020026003 <> 7 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 неверно задан код налоговой льготы (п. 2 ст.387 Кодекса)!", "Раздел2", "П000020026003", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаП000020026003 = 0 И ЗначениеСуммыЗаполнено(ДанныеЛиста2[0].Значение.П000020027003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задан код налоговой льготы (п. 2 ст.387 Кодекса)!", "Раздел2", "П000020026003", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КБКОКТМОРаздела2.Количество() = 0 Тогда	
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано ни одно из значений кодов по ОКТМО и КБК  в разделе 2!", "Раздел2", "П000020001003", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Для Каждого ЕдКБКОКТМОРаздела1 Из КБКОКТМОРаздела1 Цикл	
		Если КБКОКТМОРаздела2.НайтиСтроки(Новый Структура("КБК, ОКТМО", ЕдКБКОКТМОРаздела1.КБК, ЕдКБКОКТМОРаздела1.ОКТМО)).Количество() = 0 Тогда	
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Для значений кода по ОКТМО """ + ЕдКБКОКТМОРаздела1.ОКТМО + """ и КБК """ + ЕдКБКОКТМОРаздела1.КБК + """ на странице " + ЕдКБКОКТМОРаздела1.НомерЛиста + " раздела 1 отсутствуют заполненные экземпляры раздела 2!", "Раздел1", "П000010002003_" + ЕдКБКОКТМОРаздела1.НомерПарыКБКОКТМО, ЕдКБКОКТМОРаздела1.НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЕдКБКОКТМОРаздела2 Из КБКОКТМОРаздела2 Цикл	
		Если КБКОКТМОРаздела1.НайтиСтроки(Новый Структура("КБК, ОКТМО", ЕдКБКОКТМОРаздела2.КБК, ЕдКБКОКТМОРаздела2.ОКТМО)).Количество() = 0 Тогда	
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Для значений кода по ОКТМО """ + ЕдКБКОКТМОРаздела2.ОКТМО + """ и КБК """ + ЕдКБКОКТМОРаздела2.КБК + """ на странице " + ЕдКБКОКТМОРаздела2.НомерЛиста + " раздела 2 отсутствуют соответствующие значения в разделе 1!", "Раздел2", "П000020001003", ЕдКБКОКТМОРаздела2.НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;

	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки503");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
			
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
			
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(СтруктураРеквизитовФормы.мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда	
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел1;
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	УзелСумПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумПУ");
                  	
	Для Каждого ЛистРаздела1 Из Раздел1 Цикл
		
		ДанныеЛистаРаздела1 = ЛистРаздела1.Данные[0].Значение;
		Если НЕ ПустаяСтрока(ДанныеЛистаРаздела1.П000010000100) Тогда
			ЗадатьЗначениеЭлемента(УзелРодитель, "НаимСРП", СокрЛП(ДанныеЛистаРаздела1.П000010000100));
		КонецЕсли;
		
		Для БлокРаздела1 = 1 По 2 Цикл
			
			КБК = СокрЛП(ДанныеЛистаРаздела1["П000010001003_" + БлокРаздела1]);
			ОКТМО = СокрЛП(ДанныеЛистаРаздела1["П000010002003_" + БлокРаздела1]);
			СумНал = ДанныеЛистаРаздела1["П000010003003_" + БлокРаздела1];
			СумНалУменьш = ДанныеЛистаРаздела1["П000010004003_" + БлокРаздела1];
			
			Если НЕ ЗначениеЗаполнено(КБК) ИЛИ НЕ ЗначениеЗаполнено(ОКТМО) Тогда	
				Продолжить;
			КонецЕсли;
			
			// выгружаем данные раздела 1
			УзелРаздел1 =  СкопироватьУзел(УзелРодитель, УзелСумПУ);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "КБК", КБК);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "ОКТМО", ОКТМО);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "НалИсчисл", ДанныеЛистаРаздела1["П000010002103_" + БлокРаздела1]);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "АвПУКв1"  , ДанныеЛистаРаздела1["П000010002303_" + БлокРаздела1]);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "АвПУКв2"  , ДанныеЛистаРаздела1["П000010002503_" + БлокРаздела1]);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "АвПУКв3"  , ДанныеЛистаРаздела1["П000010002703_" + БлокРаздела1]);
			ЗадатьЗначениеЭлемента(УзелРаздел1, "НалПУ", СумНал - СумНалУменьш);
			
			// выгружаем соответствующие данные раздела 2
			УзелРасчПлатЗН = ПолучитьПодчиненныйЭлемент(УзелРаздел1, "РасчПлатЗН");
			
			Для Каждого ЛистРаздела2 Из Раздел2 Цикл
				
				ДанныеЛистаРаздела2 = ЛистРаздела2.Данные[0].Значение;
				Если КБК <> СокрЛП(ДанныеЛистаРаздела2.П000020001003) ИЛИ ОКТМО <> СокрЛП(ДанныеЛистаРаздела2.П000020002003) Тогда	
					Продолжить;
				КонецЕсли;
				
				УзелРаздел2 = СкопироватьУзел(УзелРаздел1, УзелРасчПлатЗН);
				ЗаполнитьДаннымиУзел(ДанныеЛистаРаздела2, УзелРаздел2);
				
				// Дополнение кодов льгот основаниями.
				НаименованиеУзлаЛьготы = "Льгот387_2Сум";
				КодЛьготы = ДанныеЛистаРаздела2.П000020007003_КодЛьготы;
				Основание = ДанныеЛистаРаздела2.П000020007003_Основание;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					УзелКодаЛьготы = ПолучитьПодчиненныйЭлемент(ПолучитьПодчиненныйЭлемент(УзелРаздел2, "ОпрНалБаза"), НаименованиеУзлаЛьготы);
					ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					ЗадатьЗначениеЭлемента(УзелКодаЛьготы, "КодНалЛьгот", ПолныйКодЛьготы);
				КонецЕсли;
				
				НаименованиеУзлаЛьготы = "Льгот387_2Пл";
				КодЛьготы = ДанныеЛистаРаздела2.П000020011003_КодЛьготы;
				Основание = ДанныеЛистаРаздела2.П000020011003_Основание;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					УзелКодаЛьготы = ПолучитьПодчиненныйЭлемент(ПолучитьПодчиненныйЭлемент(УзелРаздел2, "ОпрНалБаза"), НаименованиеУзлаЛьготы);
					ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					ЗадатьЗначениеЭлемента(УзелКодаЛьготы, "КодНалЛьгот", ПолныйКодЛьготы);
				КонецЕсли;
				
				НаименованиеУзлаЛьготы = "Льгот387_2Осв";
				КодЛьготы = ДанныеЛистаРаздела2.П000020020003_КодЛьготы;
				Основание = ДанныеЛистаРаздела2.П000020020003_Основание;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					УзелКодаЛьготы = ПолучитьПодчиненныйЭлемент(ПолучитьПодчиненныйЭлемент(УзелРаздел2, "СумНалИсчисл"), НаименованиеУзлаЛьготы);
					ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					ЗадатьЗначениеЭлемента(УзелКодаЛьготы, "КодНалЛьгот", ПолныйКодЛьготы);
				КонецЕсли;
				
				НаименованиеУзлаЛьготы = "Льгот387_2УмСум";
				КодЛьготы = ДанныеЛистаРаздела2.П000020024003_КодЛьготы;
				Основание = ДанныеЛистаРаздела2.П000020024003_Основание;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					УзелКодаЛьготы = ПолучитьПодчиненныйЭлемент(ПолучитьПодчиненныйЭлемент(УзелРаздел2, "СумНалИсчисл"), НаименованиеУзлаЛьготы);
					ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					ЗадатьЗначениеЭлемента(УзелКодаЛьготы, "КодНалЛьгот", ПолныйКодЛьготы);
				КонецЕсли;
				
				НаименованиеУзлаЛьготы = "Льгот387_2СнСтав";
				КодЛьготы = ДанныеЛистаРаздела2.П000020026003_КодЛьготы;
				Основание = ДанныеЛистаРаздела2.П000020026003_Основание;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					УзелКодаЛьготы = ПолучитьПодчиненныйЭлемент(ПолучитьПодчиненныйЭлемент(УзелРаздел2, "СумНалИсчисл"), НаименованиеУзлаЛьготы);
					ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					ЗадатьЗначениеЭлемента(УзелКодаЛьготы, "КодНалЛьгот", ПолныйКодЛьготы);
				КонецЕсли;
				
				// Выгрузка значения долей.
				Если ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000020006003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000020006003_Знам) Тогда
					ЗадатьЗначениеЭлемента(УзелРаздел2, "ДоляЗУ", Формат(ДанныеЛистаРаздела2.П000020006003_Числ, "ЧН=0; ЧГ=") + "/" + Формат(ДанныеЛистаРаздела2.П000020006003_Знам, "ЧН=0; ЧГ="));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000020012003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛистаРаздела2.П000020012003_Знам) Тогда
					УзелЛьгот387_2Пл = ПолучитьПодчиненныйЭлемент(ПолучитьПодчиненныйЭлемент(УзелРаздел2, "ОпрНалБаза"), "Льгот387_2Пл");
					ЗадатьЗначениеЭлемента(УзелЛьгот387_2Пл, "ДоляПлЗУ", Формат(ДанныеЛистаРаздела2.П000020012003_Числ, "ЧН=0; ЧГ=") + "/" + Формат(ДанныеЛистаРаздела2.П000020012003_Знам, "ЧН=0; ЧГ="));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(ТипНП = Неопределено)
    	
	Возврат;

КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено И НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			 СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("КодНалоговогоОргана",      СтруктураДанныхТитульный.КодИМНС);
	ПараметрыОтчета.Вставить("КПП",                  	 СтруктураДанныхТитульный.КПП1);
	ПараметрыОтчета.Вставить("ДатаПодписи",              ДатаПодписи);
			                                    		
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1", ТаблицаСтраницыРаздела1);
	Контейнер.Вставить("Раздел2", ТаблицаСтраницыРаздела2);
		
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета, Контейнер);
			
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры 

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготы(Область)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОснованиеЛьготы", Область.Значение);
	
	ФормаВвода = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВводаОснованияЛьготы", ПараметрыФормы, ЭтаФорма);
	
	ДополнительныеПараметры = Новый Структура("Область", Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиОснованиеЛьготыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаВвода.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВвода.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВвода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		Область.Значение = Результат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, мСтруктураЦветовРаскраски)
	
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, мСтруктураЦветовРаскраски)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, НаимТекущегоРаздела)
	
	Если НаимТекущегоРаздела = "Раздел2" Тогда
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области.П000020007003_КодЛьготы;
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.П000020007003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020008003;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть1, Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть2, Форма.мСтруктураЦветовРаскраски);
		Иначе
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть1, Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть2, Форма.мСтруктураЦветовРаскраски);
			
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть1);
		КонецЕсли;
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.П000020009003;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000020010003;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
		Иначе
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
		КонецЕсли;
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области.П000020011003_КодЛьготы;
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.П000020011003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020012003_Числ;
		ОбрабатываемаяОбласть3 = Форма.ТабличныйДокумент.Области.П000020012003_Знам;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть1, Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть2, Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть3, Форма.мСтруктураЦветовРаскраски);
		Иначе
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть1, Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть2, Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть3, Форма.мСтруктураЦветовРаскраски);
			
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть1);
		КонецЕсли;
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области.П000020020003_КодЛьготы;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000020020003_Основание;
		Если ОпределяющаяОбласть.Значение = "3022400" Тогда
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
		КонецЕсли;
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области.П000020024003_КодЛьготы;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000020024003_Основание;
		Если ОпределяющаяОбласть.Значение = "3022200" Тогда
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
		КонецЕсли;
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области.П000020026003_КодЛьготы;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000020026003_Основание;
		Если ОпределяющаяОбласть.Значение = "3022500" Тогда
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
		КонецЕсли;
		
	ИначеЕсли НаимТекущегоРаздела = "Раздел1" Тогда
		
		РазрешитьВводСРП = (Форма.СтруктураДанныхТитульный.ПоМесту = "250" ИЛИ Форма.СтруктураДанныхТитульный.ПоМесту = "251");
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000010000100;
		Если РазрешитьВводСРП Тогда
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
		Иначе
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОснованиеЛьготыПоУмолчанию(ОбластьОснованияЛьготы)
	
	Если ПустаяСтрока(ОбластьОснованияЛьготы.Значение) Тогда
		ОбластьОснованияЛьготы.Значение = "000000000000";
	КонецЕсли;
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

#Область МеханизмПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверитьКС_1_1(СтруктураРезультата);
	
	ПроверитьКС_1_2(СтруктураРезультата);
	
	ПроверитьКС_1_3(СтруктураРезультата);
	
	ПроверитьКС_1_4(СтруктураРезультата);
	
	ПроверитьКС_1_5(СтруктураРезультата);
	
	ПроверитьКС_1_6(СтруктураРезультата);
	
	ПроверитьКС_1_7(СтруктураРезультата);
	
	ПроверитьКС_1_8(СтруктураРезультата);
	
	ПроверитьКС_1_9(СтруктураРезультата);
	
	ПроверитьКС_1_10(СтруктураРезультата);
	
	ПроверитьКС_1_11(СтруктураРезультата);
	
	ПроверитьКС_1_12(СтруктураРезультата);
	
	ПроверитьКС_1_13(СтруктураРезультата);
	
	ПроверитьКС_1_14(СтруктураРезультата);
	
	ПроверитьКС_1_15(СтруктураРезультата);
	
	ПроверитьКС_1_16(СтруктураРезультата);
	
	ПроверитьКС_1_17(СтруктураРезультата);
	
	ПроверитьКС_1_18(СтруктураРезультата);
	
	ПроверитьКС_1_19(СтруктураРезультата);
	
	ПроверитьКС_1_20(СтруктураРезультата);
	
	ПроверитьКС_1_21а(СтруктураРезультата);
	
	ПроверитьКС_1_21б(СтруктураРезультата);
	
	ПроверитьКС_1_22а(СтруктураРезультата);
	
	ПроверитьКС_1_22б(СтруктураРезультата);
	
	ПроверитьКС_1_23а(СтруктураРезультата);
	
	ПроверитьКС_1_23б(СтруктураРезультата);
	
	ПроверитьКС_1_24(СтруктураРезультата);
	
	ПроверитьКС_1_25(СтруктураРезультата);
	
	ПроверитьКС_1_26(СтруктураРезультата);
	
	ПроверитьКС_1_27(СтруктураРезультата);
	
	ПроверитьКС_1_28(СтруктураРезультата);
	
	ПроверитьКС_1_29(СтруктураРезультата);
	
	ПроверитьКС_1_30(СтруктураРезультата);
	
	ПроверитьКС_1_31(СтруктураРезультата);
	
	ПроверитьКС_1_32(СтруктураРезультата);
	
	ПроверитьКС_1_35(СтруктураРезультата);
	
	ПроверитьКС_1_36(СтруктураРезультата);
	
	ПроверитьКС_1_37(СтруктураРезультата);
	
	ПроверитьКС_1_38(СтруктураРезультата);
	
	ПроверитьКС_1_39(СтруктураРезультата);
	
	ПроверитьКС_1_40(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей",
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор);
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", АдресВоВременномХранилище);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверитьКС_1_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1 (КС 1.1)'");
	ОписаниеКС     = НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (строка 021 Раздела 1) должна быть равна сумме всех значений строк 280 Раздела 2 по соответствующим кодам ОТКМО и КБК'");
	
	Нарушение       = НСтр("ru='НК РФ ст.387'");
	ОписаниеОшибки1 = НСтр("ru='Завышена исчисленная сумма земельного налога, подлежащая уплате в бюджет за налоговый период'");
	ОписаниеОшибки2 = НСтр("ru='Занижена исчисленная сумма земельного налога, подлежащая уплате в бюджет за налоговый период'");
	
	Р1Стр010 = ПоказательПоСтроке("Р1Стр010");
	Р1Стр020 = ПоказательПоСтроке("Р1Стр020");
	Р1Стр021 = ПоказательПоСтроке("Р1Стр021");
	
	Р2Стр010 = ПоказательПоСтроке("Р2Стр010");
	Р2Стр020 = ПоказательПоСтроке("Р2Стр020");
	Р2Стр280 = ПоказательПоСтроке("Р2Стр280");
	
	Раздел1 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел1;
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого СтраницаР1 Из Раздел1 Цикл
		ДанныеСтраницыР1 = СтраницаР1.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел1.Индекс(СтраницаР1) + 1);
		
		Для НомерСтроки = 1 По 2 Цикл;
			Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
			
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР1, Р1Стр010, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР1, Р1Стр020, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР1, Р1Стр021, НомерСтроки);
			
			КБК   = СокрЛП(Р1Стр010.Значение);
			ОКТМО = СокрЛП(Р1Стр020.Значение);
			
			Если НЕ ЗначениеЗаполнено(ОКТМО) ИЛИ НЕ ЗначениеЗаполнено(КБК) Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			
			ВнестиПоказательВРасшифровку(Р1Стр010, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр020, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр021, "Раздел1", НомерСтраницыСтр);
			
			КонтрольноеЗначение = 0;
			ЕстьСведенияРасчета = Ложь;
			СчетчикСоставляющих = 0;
			
			Расшифровка = "По КБК """ + КБК + """ и ОКТМО """ + ОКТМО + """ "
			            + Р1Стр021.ЗначениеСтр + " = ";
			
			Для Каждого СтраницаР2 Из Раздел2 Цикл
				ДанныеСтраницыР2 = СтраницаР2.Данные[0].Значение;
				НомерСтраницыР2Стр = СтрокаЧГ0(Раздел2.Индекс(СтраницаР2) + 1);
				
				ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Стр010);
				ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Стр020);
				ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Стр280);
				
				Раздел2КБК   = СокрЛП(Р2Стр010.Значение);
				Раздел2ОКТМО = СокрЛП(Р2Стр020.Значение);
				Если Раздел2ОКТМО <> ОКТМО ИЛИ Раздел2КБК <> КБК Тогда
					Продолжить;
				КонецЕсли;
				
				ВнестиПоказательВРасшифровку(Р2Стр280, "Раздел2", НомерСтраницыР2Стр);
				
				ЕстьСведенияРасчета = Истина;
				
				КонтрольноеЗначение = КонтрольноеЗначение + Р2Стр280.Значение;
				СчетчикСоставляющих = СчетчикСоставляющих + 1;
				
				Расшифровка = Расшифровка + Р2Стр280.ЗначениеСтр + " + ";
			КонецЦикла;
			
			Если ЕстьСведенияРасчета Тогда
				Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3);
				Если СчетчикСоставляющих > 1 Тогда
					Расшифровка = Расшифровка + " Итог [" + КонтрольноеЗначение + "]";
				КонецЕсли;
				
				Если Р1Стр021.Значение > КонтрольноеЗначение Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ОписаниеОшибки = ОписаниеОшибки1;
				ИначеЕсли Р1Стр021.Значение < КонтрольноеЗначение Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ОписаниеОшибки = ОписаниеОшибки2;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					ОписаниеОшибки = "";
				КонецЕсли;
			
			Иначе
				Расшифровка = Расшифровка + "[сведения не указаны]";
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = "Не заполнены листы раздела 2";
			КонецЕсли;
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
				Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1 (КС 1.2)'");
	ОписаниеКС     = НСтр("ru='Сумма налога, подлежащая уплате в бюджет (строка 030 Раздела 1) должна быть равна разнице значения строки 021 Раздела 1 и суммы строк 023, 025, 027 Раздела 1 по соответствующим кодам ОКТМО и КБК, если такая разница больше или равна нулю'");
	
	Нарушение       = НСтр("ru='НК РФ ст.387'");
	ОписаниеОшибки1 = НСтр("ru='Завышена сумма земельного налога, подлежащая уплате в бюджет'");
	ОписаниеОшибки2 = НСтр("ru='Занижена сумма земельного налога, подлежащая уплате в бюджет'");
	
	Р1Стр010 = ПоказательПоСтроке("Р1Стр010");
	Р1Стр020 = ПоказательПоСтроке("Р1Стр020");
	Р1Стр021 = ПоказательПоСтроке("Р1Стр021");
	Р1Стр023 = ПоказательПоСтроке("Р1Стр023");
	Р1Стр025 = ПоказательПоСтроке("Р1Стр025");
	Р1Стр027 = ПоказательПоСтроке("Р1Стр027");
	Р1Стр030 = ПоказательПоСтроке("Р1Стр030");
	
	Раздел1 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел1;
	
	Для Каждого Страница Из Раздел1 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел1.Индекс(Страница) + 1);
		
		Для НомерСтроки = 1 По 2 Цикл;
			Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
			
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр010, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр020, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр021, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр023, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр025, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр027, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр030, НомерСтроки);
			
			КБК   = СокрЛП(Р1Стр010.Значение);
			ОКТМО = СокрЛП(Р1Стр020.Значение);
			
			Если НЕ ЗначениеЗаполнено(ОКТМО) ИЛИ НЕ ЗначениеЗаполнено(КБК) Тогда
				Продолжить;
			КонецЕсли;
			
			КонтрольноеЗначение = Р1Стр021.Значение - (Р1Стр023.Значение + Р1Стр025.Значение + Р1Стр027.Значение);
			
			ПроверятьСоотношение = КонтрольноеЗначение >= 0;
			Если НЕ ПроверятьСоотношение Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			
			ВнестиПоказательВРасшифровку(Р1Стр010, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр020, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр030, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр021, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр023, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр025, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр027, "Раздел1", НомерСтраницыСтр);
			
			Если Р1Стр030.Значение > КонтрольноеЗначение Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = ОписаниеОшибки1;
			ИначеЕсли Р1Стр030.Значение < КонтрольноеЗначение Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = ОписаниеОшибки2;
			Иначе
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеОшибки = "";
			КонецЕсли;
			
			Расшифровка = "По КБК """ + КБК + """ и ОКТМО """ + ОКТМО + """ "
			            + Р1Стр030.ЗначениеСтр + " = " + Р1Стр021.ЗначениеСтр + " - ("
			            + Р1Стр023.ЗначениеСтр + " + " + Р1Стр025.ЗначениеСтр + " + " + Р1Стр027.ЗначениеСтр
			            + ") Итог [" + КонтрольноеЗначение + "]"
			            + " при условии, что " + КонтрольноеЗначение + " >= 0";
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
				Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1 (КС 1.3)'");
	ОписаниеКС     = НСтр("ru='Сумма налога, исчисленная к уменьшению (строка 040 Раздела 1) должна быть равна разнице суммы строк 023, 025, 027 Раздела 1 и значения строки 021 Раздела 1 по соответствующим кодам ОКТМО и КБК, если такая разница больше нуля'");
	
	Нарушение       = НСтр("ru='НК РФ ст.387'");
	ОписаниеОшибки1 = НСтр("ru='Завышена сумма земельного налога, подлежащая уплате в бюджет'");
	ОписаниеОшибки2 = НСтр("ru='Занижена сумма земельного налога, подлежащая уплате в бюджет'");
	
	Р1Стр010 = ПоказательПоСтроке("Р1Стр010");
	Р1Стр020 = ПоказательПоСтроке("Р1Стр020");
	Р1Стр021 = ПоказательПоСтроке("Р1Стр021");
	Р1Стр023 = ПоказательПоСтроке("Р1Стр023");
	Р1Стр025 = ПоказательПоСтроке("Р1Стр025");
	Р1Стр027 = ПоказательПоСтроке("Р1Стр027");
	Р1Стр040 = ПоказательПоСтроке("Р1Стр040");
	
	Раздел1 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел1;
	
	Для Каждого Страница Из Раздел1 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел1.Индекс(Страница) + 1);
		
		Для НомерСтроки = 1 По 2 Цикл;
			Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
			
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр010, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр020, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр021, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр023, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр025, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр027, НомерСтроки);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр040, НомерСтроки);
			
			КБК   = СокрЛП(Р1Стр010.Значение);
			ОКТМО = СокрЛП(Р1Стр020.Значение);
			
			Если НЕ ЗначениеЗаполнено(ОКТМО) ИЛИ НЕ ЗначениеЗаполнено(КБК) Тогда
				Продолжить;
			КонецЕсли;
			
			КонтрольноеЗначение = Р1Стр023.Значение + Р1Стр025.Значение + Р1Стр027.Значение - Р1Стр021.Значение;
			
			ПроверятьСоотношение = КонтрольноеЗначение > 0;
			Если НЕ ПроверятьСоотношение Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			
			ВнестиПоказательВРасшифровку(Р1Стр010, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр020, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр040, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр021, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр023, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр025, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр027, "Раздел1", НомерСтраницыСтр);
			
			Если Р1Стр040.Значение < КонтрольноеЗначение Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = ОписаниеОшибки1;
			ИначеЕсли Р1Стр040.Значение > КонтрольноеЗначение Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = ОписаниеОшибки2;
			Иначе
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеОшибки = "";
			КонецЕсли;
			
			Расшифровка = "По КБК """ + КБК + """ и ОКТМО """ + ОКТМО + """ "
			            + Р1Стр040.ЗначениеСтр + " = ("
			            + Р1Стр023.ЗначениеСтр + " + " + Р1Стр025.ЗначениеСтр + " + " + Р1Стр027.ЗначениеСтр
			            + ") - " + Р1Стр021.ЗначениеСтр + " Итог [" + КонтрольноеЗначение + "]"
			            + " при условии, что " + КонтрольноеЗначение + " > 0";
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
				Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.4)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы (строка 070 Раздела 2) должен быть заполнен, если значение строки 080 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы'");
	
	Р2Стр070 = ПоказательПоСтроке("Р2Стр070");
	Р2Стр080 = ПоказательПоСтроке("Р2Стр080");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр070);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		
		ПроверятьСоотношение = Р2Стр080.Значение > 0;
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр070, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр070.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр070.ЗначениеСтр + """)"
		            + " при условии, что " + Р2Стр080.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.5)'");
	ОписаниеКС     = НСтр("ru='Значение строки 080 Раздела 2 (Не облагаемая налогом сумма) должно быть заполнено, если заполнена строка 070 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не исчислена сумма налоговой льготы'");
	
	Р2Стр070 = ПоказательПоСтроке("Р2Стр070");
	Р2Стр080 = ПоказательПоСтроке("Р2Стр080");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр070);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр070.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр070, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр080.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр080.ЗначениеСтр + " <> 0"
		            + " при условии, что код льготы заполнен (""" + Р2Стр070.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.6)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы (строка 090 Раздела 2) должен быть заполнен, если значение строки 100 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ п.5 ст.391'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы'");
	
	Р2Стр090 = ПоказательПоСтроке("Р2Стр090");
	Р2Стр100 = ПоказательПоСтроке("Р2Стр100");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр090);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		
		ПроверятьСоотношение = Р2Стр100.Значение > 0;
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр090, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр090.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр090.ЗначениеСтр + """)"
		            + " при условии, что " + Р2Стр100.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.7)'");
	ОписаниеКС     = НСтр("ru='Значение строки 100 Раздела 2 (Не облагаемая налогом сумма) должно быть заполнено, если заполнена строка 090 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ п. 2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не исчислена сумма налоговой льготы'");
	
	Р2Стр090 = ПоказательПоСтроке("Р2Стр090");
	Р2Стр100 = ПоказательПоСтроке("Р2Стр100");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр090);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр090.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр090, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр100.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр100.ЗначениеСтр + " <> 0"
		            + " при условии, что код льготы заполнен (""" + Р2Стр090.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.8)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы (строка 110 Раздела 2) должен быть заполнен, если значение строки 120 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы'");
	
	Р2Стр110 = ПоказательПоСтроке("Р2Стр110");
	Р2Стр120ч = ПоказательПоСтроке("Р2Стр120ч");
	Р2Стр120з = ПоказательПоСтроке("Р2Стр120з");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр110);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120з);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр120ч.Значение) И ЗначениеЗаполнено(Р2Стр120з.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр110, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр120ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр120з, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр110.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр110.ЗначениеСтр + """)"
		            + " при условии, что " + Р2Стр120ч.ЗначениеСтр + " / " + Р2Стр120з.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.9)'");
	ОписаниеКС     = НСтр("ru='Доля необлагаемой площади земельного участка (строка 120 Раздела 2) должна быть заполнена, если заполнена строка 110 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ п. 2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не указана доля необлагаемой площади земельного участка'");
	
	Р2Стр110 = ПоказательПоСтроке("Р2Стр110");
	Р2Стр120ч = ПоказательПоСтроке("Р2Стр120ч");
	Р2Стр120з = ПоказательПоСтроке("Р2Стр120з");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр110);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120з);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр110.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр120ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр120з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр110, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр120ч.Значение) ИЛИ НЕ ЗначениеЗаполнено(Р2Стр120з.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ПредставлениеДроби = "[не заполнена]";
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ПредставлениеДроби = Р2Стр120ч.ЗначениеСтр + " / " + Р2Стр120з.ЗначениеСтр;
		КонецЕсли;
		
		Расшифровка = ПредставлениеДроби + " <> 0"
		            + " при условии, что код льготы заполнен (""" + Р2Стр110.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.10)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы (строка 200 Раздела 2) должен быть заполнен, если значение строки 210 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы'");
	
	Р2Стр200 = ПоказательПоСтроке("Р2Стр200");
	Р2Стр210 = ПоказательПоСтроке("Р2Стр210");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр200);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр210);
		
		ПроверятьСоотношение = Р2Стр210.Значение > 0;
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр200, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр210, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр200.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр200.ЗначениеСтр + """)"
		            + " при условии, что " + Р2Стр210.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_11(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.11)'");
	ОписаниеКС     = НСтр("ru='Значение строки 210 Раздела 2 (Сумма налоговой льготы) должно быть заполнено, если заполнена строка 200 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ п. 2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не исчислена сумма налоговой льготы'");
	
	Р2Стр200 = ПоказательПоСтроке("Р2Стр200");
	Р2Стр210 = ПоказательПоСтроке("Р2Стр210");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр200);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр210);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр200.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр210, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр200, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр210.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр210.ЗначениеСтр + " <> 0"
		            + " при условии, что код льготы заполнен (""" + Р2Стр200.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_12(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.12)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы (строка 220 Раздела 2) должен быть заполнен, если значение строки 230 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ ст.395, ст. 7'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы'");
	
	Р2Стр220 = ПоказательПоСтроке("Р2Стр220");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр220);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		
		ПроверятьСоотношение = Р2Стр230.Значение > 0;
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр220, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр220.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр220.ЗначениеСтр + """)"
		            + " при условии, что " + Р2Стр230.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_13(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.13)'");
	ОписаниеКС     = НСтр("ru='Значение строки 230 Раздела 2 (Сумма налоговой льготы) должно быть заполнено, если заполнена строка 220 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ ст.395, ст. 7'");
	ОписаниеОшибки = НСтр("ru='Не исчислена сумма налоговой льготы'");
	
	Р2Стр220 = ПоказательПоСтроке("Р2Стр220");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр220);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр220.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр220, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр230.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр230.ЗначениеСтр + " <> 0"
		            + " при условии, что код льготы заполнен (""" + Р2Стр220.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_14(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.14)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы (строка 240 Раздела 2) должен быть заполнен, если значение строки 250 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы'");
	
	Р2Стр240 = ПоказательПоСтроке("Р2Стр240");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр240);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		
		ПроверятьСоотношение = Р2Стр250.Значение > 0;
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр240, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр240.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр240.ЗначениеСтр + """)"
		            + " при условии, что " + Р2Стр250.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_15(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.15)'");
	ОписаниеКС     = НСтр("ru='Значение строки 250 Раздела 2 (Сумма налоговой льготы) должно быть заполнено, если заполнена строка 240 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ п. 2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не исчислена сумма налоговой льготы'");
	
	Р2Стр240 = ПоказательПоСтроке("Р2Стр240");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр240);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр240.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр240, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр250.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр250.ЗначениеСтр + " <> 0"
		            + " при условии, что код льготы заполнен (""" + Р2Стр240.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_16(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.16)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы (строка 260 Раздела 2) должен быть заполнен, если значение строки 270 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы'");
	
	Р2Стр260 = ПоказательПоСтроке("Р2Стр260");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр260);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		
		ПроверятьСоотношение = Р2Стр270.Значение > 0;
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр260, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр260.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр260.ЗначениеСтр + """)"
		            + " при условии, что " + Р2Стр270.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_17(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.17)'");
	ОписаниеКС     = НСтр("ru='Значение строки 270 Раздела 2 (Сумма налоговой льготы) должно быть заполнено, если заполнена строка 260 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ п. 2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Не исчислена сумма налоговой льготы'");
	
	Р2Стр260 = ПоказательПоСтроке("Р2Стр260");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр260);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр260.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр260, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр270.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр270.ЗначениеСтр + " <> 0"
		            + " при условии, что код льготы заполнен (""" + Р2Стр260.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_18(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.18)'");
	ОписаниеКС     = НСтр("ru='Количество полных месяцев использования льготы (строка 180 Раздела 2) должно быть больше нуля, если заполнены строки 200 и 210 Раздела 2 или строки 220 и 230 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст. 387, ст.395, ст.7'");
	ОписаниеОшибки = НСтр("ru='Возможно неправомерное применение льготы'");
	
	Р2Стр180 = ПоказательПоСтроке("Р2Стр180");
	Р2Стр200 = ПоказательПоСтроке("Р2Стр200");
	Р2Стр210 = ПоказательПоСтроке("Р2Стр210");
	Р2Стр220 = ПоказательПоСтроке("Р2Стр220");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр180);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр200);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр210);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр220);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		
		ПроверятьСоотношение = (ЗначениеЗаполнено(Р2Стр200.Значение) И ЗначениеЗаполнено(Р2Стр210.Значение))
		                   ИЛИ (ЗначениеЗаполнено(Р2Стр220.Значение) И ЗначениеЗаполнено(Р2Стр230.Значение));
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр180, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр200, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр210, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр220, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = (Р2Стр180.Значение > 0);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр180.ЗначениеСтр + " > 0"
		            + " при условии, что код льготы (стр. 200) заполнен (""" + Р2Стр200.ЗначениеСтр + """) и " + Р2Стр200.ЗначениеСтр + " <> 0"
		            + " или код льготы (стр. 220) заполнен (""" + Р2Стр220.ЗначениеСтр + """) и " + Р2Стр230.ЗначениеСтр + " <> 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_19(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.19)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы (строка 210 Раздела 2) должна быть равна значение строки 170 Раздела 2 * (1 - строка 190 Раздела 2)'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст. 387'");
	ОписаниеОшибки = НСтр("ru='Неправильно определен коэффициент Кл'");
	
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	Р2Стр190 = ПоказательПоСтроке("Р2Стр190");
	Р2Стр210 = ПоказательПоСтроке("Р2Стр210");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр190);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр210);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр210.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр210, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр190, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр170.Значение * (1 - Р2Стр190.Значение);
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр210.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр210.ЗначениеСтр + " = "
		            + Р2Стр170.ЗначениеСтр + " * (1 - " + Р2Стр190.ЗначениеСтр + ")"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_20(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.20)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы (строка 230 Раздела 2) должна быть равна значение строки 170 Раздела 2 * (1 - строка 190 Раздела 2)'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст. 387'");
	ОписаниеОшибки = НСтр("ru='Неправильно определен коэффициент Кл'");
	
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	Р2Стр190 = ПоказательПоСтроке("Р2Стр190");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр190);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр230.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр190, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр170.Значение * (1 - Р2Стр190.Значение);
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр230.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр230.ЗначениеСтр + " = "
		            + Р2Стр170.ЗначениеСтр + " * (1 - " + Р2Стр190.ЗначениеСтр + ")"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_21а(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.21а)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна разнице значений строк 050 и 080, если такая разница больше нуля и строки 060 и 100 Раздела 2 не заполнены'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст. 387'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена не облагаемая налогом сумма, уменьшающая величину налоговой базы'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр080  = ПоказательПоСтроке("Р2Стр080");
	Р2Стр100  = ПоказательПоСтроке("Р2Стр100");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		
		КонтрольноеЗначение = Р2Стр050.Значение - Р2Стр080.Значение;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Строка060Заполнена = ЗначениеЗаполнено(Р2Стр060ч.Значение) И ЗначениеЗаполнено(Р2Стр060з.Значение);
		ПроверятьСоотношение = (Р2Стр080.Значение <> 0 И Р2Стр100.Значение = 0 И НЕ Строка060Заполнена И КонтрольноеЗначение > 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = "
		            + Р2Стр050.ЗначениеСтр + " - " + Р2Стр080.ЗначениеСтр
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что " + КонтрольноеЗначение + " > 0"
		            + " и не заполнены строки 060 и 100";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_21б(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.21б)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна нулю, если разница значений строк 050 и 080 меньше нуля и строки 060 и 100 Раздела 2 не заполнены'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст. 387'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена не облагаемая налогом сумма, уменьшающая величину налоговой базы'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр080  = ПоказательПоСтроке("Р2Стр080");
	Р2Стр100  = ПоказательПоСтроке("Р2Стр100");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		
		ОпределяющееЗначение = Р2Стр050.Значение - Р2Стр080.Значение;
		ОпределяющееЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(ОпределяющееЗначение, 2));
		
		Строка060Заполнена = ЗначениеЗаполнено(Р2Стр060ч.Значение) И ЗначениеЗаполнено(Р2Стр060з.Значение);
		ПроверятьСоотношение = (Р2Стр080.Значение <> 0 И Р2Стр100.Значение = 0 И НЕ Строка060Заполнена И ОпределяющееЗначение < 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = 0;
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = " + КонтрольноеЗначение
		            + " при условии, что " + Р2Стр050.ЗначениеСтр + " - " + Р2Стр080.ЗначениеСтр
		            + " Итог [" + ОпределяющееЗначение + "] < 0"
		            + " и не заполнены строки 060 и 100";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_22а(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.22а)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна разнице значений строк 050 и 100, если такая разница больше нуля и строки 060 и 080 Раздела 2 не заполнены'");
	
	Нарушение      = НСтр("ru='НК РФ п.5 ст. 391'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена не облагаемая налогом сумма, уменьшающая величину налоговой базы'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр080  = ПоказательПоСтроке("Р2Стр080");
	Р2Стр100  = ПоказательПоСтроке("Р2Стр100");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		
		КонтрольноеЗначение = Р2Стр050.Значение - Р2Стр100.Значение;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Строка060Заполнена = ЗначениеЗаполнено(Р2Стр060ч.Значение) И ЗначениеЗаполнено(Р2Стр060з.Значение);
		ПроверятьСоотношение = (Р2Стр080.Значение = 0 И Р2Стр100.Значение <> 0 И НЕ Строка060Заполнена И КонтрольноеЗначение > 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = "
		            + Р2Стр050.ЗначениеСтр + " - " + Р2Стр100.ЗначениеСтр
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что " + КонтрольноеЗначение + " > 0"
		            + " и не заполнены строки 060 и 080";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_22б(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.22б)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна нулю, если разница значений строк 050 и 100 меньше нуля и строки 060 ит 080 Раздела 2 не заполнены'");
	
	Нарушение      = НСтр("ru='НК РФ п.5 ст. 391'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена не облагаемая налогом сумма, уменьшающая величину налоговой базы'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр080  = ПоказательПоСтроке("Р2Стр080");
	Р2Стр100  = ПоказательПоСтроке("Р2Стр100");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		
		ОпределяющееЗначение = Р2Стр050.Значение - Р2Стр100.Значение;
		ОпределяющееЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(ОпределяющееЗначение, 2));
		
		Строка060Заполнена = ЗначениеЗаполнено(Р2Стр060ч.Значение) И ЗначениеЗаполнено(Р2Стр060з.Значение);
		ПроверятьСоотношение = (Р2Стр080.Значение = 0 И Р2Стр100.Значение <> 0 И НЕ Строка060Заполнена И ОпределяющееЗначение < 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = 0;
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = " + КонтрольноеЗначение
		            + " при условии, что " + Р2Стр050.ЗначениеСтр + " - " + Р2Стр100.ЗначениеСтр
		            + " Итог [" + ОпределяющееЗначение + "] < 0"
		            + " и не заполнены строки 060 и 080";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_23а(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.23а)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна строк 050 - строка 080 - строка 100 Раздела 2, если такая разница больше нуля и строка 060 Раздела 2 не заполнена'");
	
	Нарушение      = НСтр("ru='НК РФ п.5 ст. 391, п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена не облагаемая налогом сумма, уменьшающая величину налоговой базы'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр080  = ПоказательПоСтроке("Р2Стр080");
	Р2Стр100  = ПоказательПоСтроке("Р2Стр100");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		
		КонтрольноеЗначение = Р2Стр050.Значение - Р2Стр080.Значение - Р2Стр100.Значение;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Строка060Заполнена = ЗначениеЗаполнено(Р2Стр060ч.Значение) И ЗначениеЗаполнено(Р2Стр060з.Значение);
		ПроверятьСоотношение = (Р2Стр080.Значение <> 0 И Р2Стр100.Значение <> 0 И НЕ Строка060Заполнена И КонтрольноеЗначение > 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = "
		            + Р2Стр050.ЗначениеСтр + " - " + Р2Стр080.ЗначениеСтр
		            + " - " + Р2Стр100.ЗначениеСтр
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что " + КонтрольноеЗначение + " > 0"
		            + " и не заполнена строка 060";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_23б(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.23б)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна нулю, если строка 050 Раздела 2 - строка 080 Раздела 2 - строка 100 Раздела 2 меньше нуля и строка 060 Раздела 2 не заполнена'");
	
	Нарушение      = НСтр("ru='НК РФ п.5 ст. 391, п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена не облагаемая налогом сумма, уменьшающая величину налоговой базы'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр080  = ПоказательПоСтроке("Р2Стр080");
	Р2Стр100  = ПоказательПоСтроке("Р2Стр100");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		
		ОпределяющееЗначение = Р2Стр050.Значение - Р2Стр080.Значение - Р2Стр100.Значение;
		ОпределяющееЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(ОпределяющееЗначение, 2));
		
		Строка060Заполнена = ЗначениеЗаполнено(Р2Стр060ч.Значение) И ЗначениеЗаполнено(Р2Стр060з.Значение);
		ПроверятьСоотношение = (Р2Стр080.Значение <> 0 И Р2Стр100.Значение <> 0 И НЕ Строка060Заполнена И ОпределяющееЗначение < 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = 0;
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = " + КонтрольноеЗначение
		            + " при условии, что " + Р2Стр050.ЗначениеСтр
		            + " - " + Р2Стр080.ЗначениеСтр + " - " + Р2Стр100.ЗначениеСтр
		            + " Итог [" + ОпределяющееЗначение + "] < 0"
		            + " и не заполнена строка 060";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_24(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.24)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна строка 050 - (строка 050 * строка 120 Раздела 2 * (1 - строка 190 Раздела 2))'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена налоговая база'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр120ч = ПоказательПоСтроке("Р2Стр120ч");
	Р2Стр120з = ПоказательПоСтроке("Р2Стр120з");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	Р2Стр190  = ПоказательПоСтроке("Р2Стр190");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр190);
		
		ПроверятьСоотношение = (Р2Стр120ч.Значение <> 0 И Р2Стр120з.Значение <> 0 И Р2Стр190.Значение <> 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр120ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр120з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр190, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр050.Значение - (Р2Стр050.Значение * Р2Стр120ч.Значение / Р2Стр120з.Значение * (1 - Р2Стр190.Значение));
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = " + Р2Стр050.ЗначениеСтр
		            + " - (" + Р2Стр050.ЗначениеСтр + " * " + Р2Стр120ч.ЗначениеСтр
		            + " / " + Р2Стр120з.ЗначениеСтр + " * (1 - " + Р2Стр190.ЗначениеСтр + "))"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_25(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.25)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна (строка 050 Раздела 2 * строка 060 Раздела 2) - строка 080 Раздела 2, если строка 100 Раздела 2 не заполнена'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена налоговая база'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр080  = ПоказательПоСтроке("Р2Стр080");
	Р2Стр100  = ПоказательПоСтроке("Р2Стр100");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		
		ПроверятьСоотношение = (Р2Стр060ч.Значение <> 0 И Р2Стр060з.Значение <> 0 И Р2Стр080.Значение <> 0 И Р2Стр100.Значение = 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр050.Значение * Р2Стр060ч.Значение / Р2Стр060з.Значение - Р2Стр080.Значение;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = " + Р2Стр050.ЗначениеСтр
		            + " * " + Р2Стр060ч.ЗначениеСтр + " / " + Р2Стр060з.ЗначениеСтр
		            + " - " + Р2Стр080.ЗначениеСтр
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что строка 100 не заполнена";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_26(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.26)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна (строка 050 раздела 2 * строка 060 Раздела 2) - строка 100 Раздела 2, если такая разница больше нуля и строка 080 Раздела 2 не заполнена'");
	
	Нарушение      = НСтр("ru='НК РФ п.5 ст.391'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена налоговая база'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр080  = ПоказательПоСтроке("Р2Стр080");
	Р2Стр100  = ПоказательПоСтроке("Р2Стр100");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		
		ПроверятьСоотношение = (Р2Стр060ч.Значение <> 0 И Р2Стр060з.Значение <> 0 И Р2Стр100.Значение <> 0 И Р2Стр080.Значение = 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		КонтрольноеЗначение = Р2Стр050.Значение * Р2Стр060ч.Значение / Р2Стр060з.Значение - Р2Стр100.Значение;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		ПроверятьСоотношение = КонтрольноеЗначение > 0;
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = " + Р2Стр050.ЗначениеСтр
		            + " * " + Р2Стр060ч.ЗначениеСтр + " / " + Р2Стр060з.ЗначениеСтр
		            + " - " + Р2Стр100.ЗначениеСтр
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что строка 100 не заполнена";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_27(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.27)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна (строка 050 Раздела 2 * строка 060 Раздела 2) - (строка 080 Раздела 2 + строка 100 Раздела 2), если такая разница больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387, п.5 ст.391'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена налоговая база'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр080  = ПоказательПоСтроке("Р2Стр080");
	Р2Стр100  = ПоказательПоСтроке("Р2Стр100");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		
		ПроверятьСоотношение = (Р2Стр060ч.Значение <> 0 И Р2Стр060з.Значение <> 0 И Р2Стр100.Значение <> 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		КонтрольноеЗначение = (Р2Стр050.Значение * Р2Стр060ч.Значение / Р2Стр060з.Значение)
		                    - (Р2Стр080.Значение + Р2Стр100.Значение);
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		ПроверятьСоотношение = КонтрольноеЗначение > 0;
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = (" + Р2Стр050.ЗначениеСтр
		            + " * " + Р2Стр060ч.ЗначениеСтр + " / " + Р2Стр060з.ЗначениеСтр +")"
		            + " - (" + Р2Стр080.ЗначениеСтр + " + " + Р2Стр100.ЗначениеСтр + ")"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_28(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.28)'");
	ОписаниеКС     = НСтр("ru='Налоговая база (строка 130 Раздела 2) должна быть равна (строка 050 Раздела 2 * строка 060 Раздела 2) - (строка 050 раздела 2 * строка 060 Раздела 2) * (строка 120 раздела 2 * (1 - строка 190 Раздела 2), если такая разница больше нуля и строки 060, 120, 190 Раздела 2 заполнены или Налоговая база (строка 130 Раздела 2) должна быть равна нулю, если (строка 050 Раздела 2 * строка 060 Раздела 2) - (строка 050 раздела 2 * строка 060 Раздела 2) * (строка 120 раздела 2 * (1 - строка 190 Раздела 2) меньше или равна нулю и строки 060, 120, 190 Раздела 2 заполнены'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена налоговая база'");
	
	Р2Стр050  = ПоказательПоСтроке("Р2Стр050");
	Р2Стр060ч = ПоказательПоСтроке("Р2Стр060ч");
	Р2Стр060з = ПоказательПоСтроке("Р2Стр060з");
	Р2Стр120ч = ПоказательПоСтроке("Р2Стр120ч");
	Р2Стр120з = ПоказательПоСтроке("Р2Стр120з");
	Р2Стр130  = ПоказательПоСтроке("Р2Стр130");
	Р2Стр190  = ПоказательПоСтроке("Р2Стр190");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр190);
		
		ПроверятьСоотношение = (Р2Стр060ч.Значение <> 0 И Р2Стр060з.Значение <> 0 И Р2Стр120ч.Значение <> 0 И Р2Стр120з.Значение <> 0 И Р2Стр190.Значение <> 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		ОпределяющееЗначение = (Р2Стр050.Значение * Р2Стр060ч.Значение / Р2Стр060з.Значение)
		                     - (Р2Стр050.Значение * Р2Стр060ч.Значение / Р2Стр060з.Значение)
		                     * (Р2Стр120ч.Значение / Р2Стр120з.Значение * (1 - Р2Стр190.Значение));
		ОпределяющееЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(ОпределяющееЗначение, 2));
		
		Если ОпределяющееЗначение > 0 Тогда
			КонтрольноеЗначение = ОпределяющееЗначение;
			ОписаниеУсловия = " при условии, что " + ОпределяющееЗначение + " > 0 и строки 060, 120, 190 заполнены";
		Иначе
			КонтрольноеЗначение = 0;
			ОписаниеУсловия = " при условии, что " + ОпределяющееЗначение + " <= 0 и строки 060, 120, 190 заполнены";
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр120ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр120з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр190, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = (Р2Стр130.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр130.ЗначениеСтр + " = (" + Р2Стр050.ЗначениеСтр
		            + " * " + Р2Стр060ч.ЗначениеСтр + " / " + Р2Стр060з.ЗначениеСтр +")"
		            + " - (" + Р2Стр050.ЗначениеСтр
		            + " * " + Р2Стр060ч.ЗначениеСтр + " / " + Р2Стр060з.ЗначениеСтр +")"
		            + " * (" + Р2Стр120ч.ЗначениеСтр + " / " + Р2Стр120з.ЗначениеСтр + " * (1 - " + Р2Стр190.ЗначениеСтр + "))"
		            + " Итог [" + КонтрольноеЗначение + "]" + ОписаниеУсловия;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_29(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.29)'");
	ОписаниеКС     = НСтр("ru='Коэффициент Кв (строка 160 раздела 2) должен быть равен ""1"", если значение строки 150 =""12"" (земельный участок использовался в течение всего налогового периода)'");
	
	Нарушение      = НСтр("ru='НК РФ п.7 ст.396'");
	ОписаниеОшибки = НСтр("ru='Неправильно указан коэффициент Кв'");
	
	Р2Стр150 = ПоказательПоСтроке("Р2Стр150");
	Р2Стр160 = ПоказательПоСтроке("Р2Стр160");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр160);
		
		ПроверятьСоотношение = (Р2Стр150.Значение = 12);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр160, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр150, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = 1;
		
		СоотношениеВыполняется = (Р2Стр160.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр160.ЗначениеСтр + " = " + КонтрольноеЗначение
		            + " при условии, что " + Р2Стр150.Значение + " = 12";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_30(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.30)'");
	ОписаниеКС     = НСтр("ru='Сумма исчисленного налога (строка 170 Раздела 2) должна быть равна строка 130 Раздела 2 * строка 140 Раздела 2 * строка 160 Раздела 2) / 100'");
	
	Нарушение      = НСтр("ru='НК РФ ст.396'");
	ОписаниеОшибки = НСтр("ru='Неправильно указана сумма исчисленного налога'");
	
	Р2Стр040 = ПоказательПоСтроке("Р2Стр040");
	Р2Стр130 = ПоказательПоСтроке("Р2Стр130");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	Р2Стр160 = ПоказательПоСтроке("Р2Стр160");
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр040);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр160);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		
		ПроверятьСоотношение = НЕ ЗначениеЗаполнено(Р2Стр040.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр160, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр130.Значение * Р2Стр140.Значение * Р2Стр160.Значение / 100;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр170.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр170.ЗначениеСтр + " = " + Р2Стр130.ЗначениеСтр
		            + " * " + Р2Стр140.ЗначениеСтр + " * " + Р2Стр160.ЗначениеСтр + " / 100"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_31(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.31)'");
	ОписаниеКС     = НСтр("ru='Сумма исчисленного налога (строка 170 Раздела 2) должна быть равна (строка 130 Раздела 2 * строка 140 Раздела 2 * строка 160 Раздела 2) / 100) * 2, если значение строки 040 раздела 2 = ""1""'");
	
	Нарушение      = НСтр("ru='НК РФ ст.396'");
	ОписаниеОшибки = НСтр("ru='Неправильно указана сумма исчисленного налога с учетом коэффициента 2'");
	
	Р2Стр040 = ПоказательПоСтроке("Р2Стр040");
	Р2Стр130 = ПоказательПоСтроке("Р2Стр130");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	Р2Стр160 = ПоказательПоСтроке("Р2Стр160");
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр040);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр160);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		
		ПроверятьСоотношение = (Р2Стр040.Значение = "1");
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр160, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр040, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр130.Значение * Р2Стр140.Значение * Р2Стр160.Значение / 100 * 2;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр170.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр170.ЗначениеСтр + " = " + Р2Стр130.ЗначениеСтр
		            + " * " + Р2Стр140.ЗначениеСтр + " * " + Р2Стр160.ЗначениеСтр + " / 100 * 2"
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что """ + Р2Стр040.ЗначениеСтр + """ = ""1""";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_32(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.32)'");
	ОписаниеКС     = НСтр("ru='Сумма исчисленного налога (строка 170 Раздела 2) должна быть равна (строка 130 Раздела 2 * строка 140 Раздела 2 * строка 160 Раздела 2) / 100) * 4, если значение строки 040 раздела 2 = ""2""'");
	
	Нарушение      = НСтр("ru='НК РФ ст.396'");
	ОписаниеОшибки = НСтр("ru='Неправильно указана сумма исчисленного налога с учетом коэффициента 4'");
	
	Р2Стр040 = ПоказательПоСтроке("Р2Стр040");
	Р2Стр130 = ПоказательПоСтроке("Р2Стр130");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	Р2Стр160 = ПоказательПоСтроке("Р2Стр160");
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр040);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр160);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		
		ПроверятьСоотношение = (Р2Стр040.Значение = "2");
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр160, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр040, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр130.Значение * Р2Стр140.Значение * Р2Стр160.Значение / 100 * 4;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр170.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр170.ЗначениеСтр + " = " + Р2Стр130.ЗначениеСтр
		            + " * " + Р2Стр140.ЗначениеСтр + " * " + Р2Стр160.ЗначениеСтр + " / 100 * 4"
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что """ + Р2Стр040.ЗначениеСтр + """ = ""2""";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_35(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.35)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы (строка 250 Раздела 2) должна быть равна произведению значения строки 170 Раздела 2 * процент, на который уменьшается исчисленная сумма налога / 100'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Неправильно указана сумма налоговой льготы'");
	
	Р2Стр001 = ПоказательПоСтроке("Р2Стр001");
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Льготы = РегламентированнаяОтчетность.ЛьготыПоКадастровымНомерам(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.ДатаОкончания);
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр001);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		
		Льгота = Льготы.Найти(СокрЛП(Р2Стр001.Значение), "КадастровыйНомер");
		ПроверятьСоотношение = (Льгота <> Неопределено И Льгота.ПроцентУменьшенияСуммыНалога <> 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр001, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
			СписокРасшифровкиПоказателей,
			"П000020000100",
			"Уменьшение суммы налога в процентах",
			Строка(Льгота.ПроцентУменьшенияСуммыНалога),
			"",
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2",
			Неопределено,
			НомерСтраницыСтр,
			СчетчикФормулДляРасшифровок);
		
		КонтрольноеЗначение = Р2Стр170.Значение * Льгота.ПроцентУменьшенияСуммыНалога / 100;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр250.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр250.ЗначениеСтр + " = " + Р2Стр170.ЗначениеСтр
		            + " * " + Льгота.ПроцентУменьшенияСуммыНалога + " / 100"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_36(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.36)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы (строка 270 Раздела 2) должна быть равна значение строки 130 Раздела 2 * (налоговая ставка (строка 140 раздела 2) - пониженная ставка) / 100'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.387'");
	ОписаниеОшибки = НСтр("ru='Неправильно указана сумма налоговой льготы'");
	
	Р2Стр001 = ПоказательПоСтроке("Р2Стр001");
	Р2Стр130 = ПоказательПоСтроке("Р2Стр130");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Льготы = РегламентированнаяОтчетность.ЛьготыПоКадастровымНомерам(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.ДатаОкончания);
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр001);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		
		Льгота = Льготы.Найти(СокрЛП(Р2Стр001.Значение), "КадастровыйНомер");
		ПроверятьСоотношение = (Льгота <> Неопределено И Льгота.СниженнаяНалоговаяСтавка <> 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр001, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
			СписокРасшифровкиПоказателей,
			"П000020000100",
			"Уменьшение налоговой ставки до (%)",
			Строка(Льгота.СниженнаяНалоговаяСтавка),
			"",
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2",
			Неопределено,
			НомерСтраницыСтр,
			СчетчикФормулДляРасшифровок);
		
		КонтрольноеЗначение = Р2Стр130.Значение * (Р2Стр140.Значение - Льгота.СниженнаяНалоговаяСтавка) / 100;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр270.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр270.ЗначениеСтр + " = " + Р2Стр130.ЗначениеСтр
		            + " * (" + Р2Стр140.ЗначениеСтр + " - " + Льгота.СниженнаяНалоговаяСтавка + ") / 100"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_37(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.37)'");
	ОписаниеКС     = НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (строка 280 Раздела 2) должна быть равна разнице значение строк 170 и 250 Раздела 2, если строка 250 Раздела 2 заполнена'");
	
	Нарушение      = НСтр("ru='НК РФ ст.396'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена исчисленная сумма земельного налога, подлежащая уплате в бюджет за налоговый период'");
	
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	Р2Стр280 = ПоказательПоСтроке("Р2Стр280");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр280);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр250.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр280, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр170.Значение - Р2Стр250.Значение;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр280.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр280.ЗначениеСтр + " = " + Р2Стр170.ЗначениеСтр
		            + " - " + Р2Стр250.ЗначениеСтр
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что " + Р2Стр250.ЗначениеСтр + " <> 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_38(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.38)'");
	ОписаниеКС     = НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (строка 280 Раздела 2) должна быть равна разнице значение строк 170 и 270 Раздела 2, если строка 270 Раздела 2 заполнена'");
	
	Нарушение      = НСтр("ru='НК РФ ст.396'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена исчисленная сумма земельного налога, подлежащая уплате в бюджет за налоговый период'");
	
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	Р2Стр280 = ПоказательПоСтроке("Р2Стр280");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр280);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр270.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр280, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр170.Значение - Р2Стр270.Значение;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр280.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр280.ЗначениеСтр + " = " + Р2Стр170.ЗначениеСтр
		            + " - " + Р2Стр270.ЗначениеСтр
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что " + Р2Стр270.ЗначениеСтр + " <> 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_39(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.39)'");
	ОписаниеКС     = НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (строка 280 Раздела 2) должна быть равна разнице значение строк 170 и 210 Раздела 2, если строка 210 Раздела 2 заполнена, а строки 230, 250, 270 Раздела 2 не заполнены'");
	
	Нарушение      = НСтр("ru='НК РФ ст.396'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена исчисленная сумма земельного налога, подлежащая уплате в бюджет за налоговый период'");
	
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	Р2Стр210 = ПоказательПоСтроке("Р2Стр210");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	Р2Стр280 = ПоказательПоСтроке("Р2Стр280");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр210);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр280);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр210.Значение)
		                     И НЕ ЗначениеЗаполнено(Р2Стр230.Значение)
		                     И НЕ ЗначениеЗаполнено(Р2Стр250.Значение)
		                     И НЕ ЗначениеЗаполнено(Р2Стр270.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр280, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр210, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр170.Значение - Р2Стр210.Значение;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр280.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр280.ЗначениеСтр + " = " + Р2Стр170.ЗначениеСтр
		            + " - " + Р2Стр210.ЗначениеСтр
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что " + Р2Стр210.ЗначениеСтр + " <> 0"
		            + " и " + Р2Стр230.ЗначениеСтр + " = 0"
		            + " и " + Р2Стр250.ЗначениеСтр + " = 0"
		            + " и " + Р2Стр270.ЗначениеСтр + " = 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_40(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.40)'");
	ОписаниеКС     = НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (строка 280 Раздела 2) должна быть равна разнице значение строк 170 и 230 Раздела 2, если строка 230 Раздела 2 заполнена, а строки 210, 250, 270 Раздела 2 не заполнены.'");
	
	Нарушение      = НСтр("ru='НК РФ ст.396'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена исчисленная сумма земельного налога, подлежащая уплате в бюджет за налоговый период'");
	
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	Р2Стр210 = ПоказательПоСтроке("Р2Стр210");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	Р2Стр280 = ПоказательПоСтроке("Р2Стр280");
	
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр210);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр280);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр230.Значение)
		                     И НЕ ЗначениеЗаполнено(Р2Стр210.Значение)
		                     И НЕ ЗначениеЗаполнено(Р2Стр250.Значение)
		                     И НЕ ЗначениеЗаполнено(Р2Стр270.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр280, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр210, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр170.Значение - Р2Стр230.Значение;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		СоотношениеВыполняется = (Р2Стр280.Значение = КонтрольноеЗначение);
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр280.ЗначениеСтр + " = " + Р2Стр170.ЗначениеСтр
		            + " - " + Р2Стр230.ЗначениеСтр
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что " + Р2Стр230.ЗначениеСтр + " <> 0"
		            + " и " + Р2Стр210.ЗначениеСтр + " = 0"
		            + " и " + Р2Стр250.ЗначениеСтр + " = 0"
		            + " и " + Р2Стр270.ЗначениеСтр + " = 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	Если УсловныйКодПоказателя = "Р1Стр010" Тогда
		Результат.Вставить("Имя", "П000010001003_%1");
		Результат.Вставить("Представление", НСтр("ru='Код бюджетной классификации (строка 010%1 раздела 1)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр020" Тогда
		Результат.Вставить("Имя", "П000010002003_%1");
		Результат.Вставить("Представление", НСтр("ru='Код по ОКТМО (строка 020%1 раздела 1)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр021" Тогда
		Результат.Вставить("Имя", "П000010002103_%1");
		Результат.Вставить("Представление", НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (руб.) (строка 021%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр023" Тогда
		Результат.Вставить("Имя", "П000010002303_%1");
		Результат.Вставить("Представление", НСтр("ru='В т.ч. сумма авансовых платежей, подлежащая уплате в бюджет за первый квартал (руб.) (строка 023%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр025" Тогда
		Результат.Вставить("Имя", "П000010002503_%1");
		Результат.Вставить("Представление", НСтр("ru='В т.ч. сумма авансовых платежей, подлежащая уплате в бюджет за второй квартал (руб.) (строка 025%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр027" Тогда
		Результат.Вставить("Имя", "П000010002703_%1");
		Результат.Вставить("Представление", НСтр("ru='В т.ч. сумма авансовых платежей, подлежащая уплате в бюджет за третий квартал (руб.) (строка 027%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр030" Тогда
		Результат.Вставить("Имя", "П000010003003_%1");
		Результат.Вставить("Представление", НСтр("ru='Сумма налога, подлежащая уплате в бюджет (руб.) (строка 030%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр040" Тогда
		Результат.Вставить("Имя", "П000010004003_%1");
		Результат.Вставить("Представление", НСтр("ru='Сумма налога, исчисленная к уменьшению (руб.) (строка 040%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр001" Тогда
		Результат.Вставить("Имя", "П000020000100");
		Результат.Вставить("Представление", НСтр("ru='Кадастровый номер земельного участка%1 раздела 2'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр010" Тогда
		Результат.Вставить("Имя", "П000020001003");
		Результат.Вставить("Представление", НСтр("ru='Код бюджетной классификации (строка 010%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр020" Тогда
		Результат.Вставить("Имя", "П000020002003");
		Результат.Вставить("Представление", НСтр("ru='Код по ОКТМО (строка 020%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр070" Тогда
		Результат.Вставить("Имя", "П000020007003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде не облагаемой налогом суммы (строка 070%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр040" Тогда
		Результат.Вставить("Имя", "П000020004003");
		Результат.Вставить("Представление", НСтр("ru='Период строительства (строка 040%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр050" Тогда
		Результат.Вставить("Имя", "П000020005003");
		Результат.Вставить("Представление", НСтр("ru='Кадастровая стоимость (доля кадастровой стоимости) земельного участка (строка 050%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр060ч" Тогда
		Результат.Вставить("Имя", "П000020006003_Числ");
		Результат.Вставить("Представление", НСтр("ru='Доля налогоплательщика в праве на земельный участок (числитель) (строка 060%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр060з" Тогда
		Результат.Вставить("Имя", "П000020006003_Знам");
		Результат.Вставить("Представление", НСтр("ru='Доля налогоплательщика в праве на земельный участок (знаменатель) (строка 060%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр080" Тогда
		Результат.Вставить("Имя", "П000020008003");
		Результат.Вставить("Представление", НСтр("ru='Не облагаемая налогом сумма (руб.) (п.2 ст .387 Налогового кодекса Российской Федерации) (строка 080%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр090" Тогда
		Результат.Вставить("Имя", "П000020009003");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде не облагаемой налогом суммы (строка 090%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр100" Тогда
		Результат.Вставить("Имя", "П000020010003");
		Результат.Вставить("Представление", НСтр("ru='Не облагаемая налогом сумма (руб.) (п.5 ст .391 Кодекса) (строка 100%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр110" Тогда
		Результат.Вставить("Имя", "П000020011003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде необлагаемой площади  земельного участка (строка 110%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр120ч" Тогда
		Результат.Вставить("Имя", "П000020012003_Числ");
		Результат.Вставить("Представление", НСтр("ru='Доля необлагаемой площади земельного участка (п.2 ст .387 Кодекса) (числитель) (строка 120%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр120з" Тогда
		Результат.Вставить("Имя", "П000020012003_Знам");
		Результат.Вставить("Представление", НСтр("ru='Доля необлагаемой площади земельного участка (п.2 ст .387 Кодекса) (знаменатель) (строка 120%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр130" Тогда
		Результат.Вставить("Имя", "П000020013003");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база (руб.) (строка 130%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр140" Тогда
		Результат.Вставить("Имя", "П000020014003");
		Результат.Вставить("Представление", НСтр("ru='Налоговая ставка (%) (строка 140%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр150" Тогда
		Результат.Вставить("Имя", "П000020015003");
		Результат.Вставить("Представление", НСтр("ru='Количество полных месяцев владения земельным участком в течение налогового периода (строка 150%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр160" Тогда
		Результат.Вставить("Имя", "П000020016003");
		Результат.Вставить("Представление", НСтр("ru='Коэффициент Кв (строка 160%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр170" Тогда
		Результат.Вставить("Имя", "П000020017003");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного налога (строка 170%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр180" Тогда
		Результат.Вставить("Имя", "П000020018003");
		Результат.Вставить("Представление", НСтр("ru='Количество полных месяцев использования льготы (строка 180%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр190" Тогда
		Результат.Вставить("Имя", "П000020019003");
		Результат.Вставить("Представление", НСтр("ru='Коэффициент Кл (строка 190%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр200" Тогда
		Результат.Вставить("Имя", "П000020020003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде освобождения от налогообложения (строка 200%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр210" Тогда
		Результат.Вставить("Имя", "П000020021003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налоговой льготы (руб.) (п.2 ст . 387 Кодекса) (строка 210%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр220" Тогда
		Результат.Вставить("Имя", "П000020022003");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде освобождения от налогообложения (строка 220%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр230" Тогда
		Результат.Вставить("Имя", "П000020023003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налоговой льготы (руб.) (ст .395 Кодекса) (строка 230%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр240" Тогда
		Результат.Вставить("Имя", "П000020024003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде уменьшения суммы налога (строка 240%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр250" Тогда
		Результат.Вставить("Имя", "П000020025003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налоговой льготы (руб.) (п.2 ст . 387 Кодекса) (строка 250%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр260" Тогда
		Результат.Вставить("Имя", "П000020026003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде снижения налоговой ставки (строка 260%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр270" Тогда
		Результат.Вставить("Имя", "П000020027003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налоговой льготы (руб.) (п.2 ст . 387 Кодекса) (строка 270%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр280" Тогда
		Результат.Вставить("Имя", "П000020028003");
		Результат.Вставить("Представление", НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (руб.) (строка 280%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки)
	
	НомерСтрокиСтр = СтрокаЧГ0(НомерСтроки);
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС)
	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено)
	
	НомерСтраницыДляЗамены = ?(ЗначениеЗаполнено(НомерСтраницы), НомерСтраницы, "");
	ПредставлениеПоказателя = СтрокаСНомеромСтраницы(Показатель.Представление, НомерСтраницыДляЗамены);
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция СтрокаСНомеромСтраницы (ИсходнаяСтрока, НомерСтраницы)
	
	ТекстСтраница = Нстр("ru='страница №'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИсходнаяСтрока, ", " + ТекстСтраница + " " + НомерСтраницы + ")");
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
КонецПроцедуры

&НаСервере
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	Если мОбъектОтчета = Неопределено Тогда
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	Возврат мОбъектОтчета;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
КонецФункции