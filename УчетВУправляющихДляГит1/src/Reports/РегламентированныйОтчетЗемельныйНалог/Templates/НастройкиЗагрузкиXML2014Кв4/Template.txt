// Область "Настройки" описывает параметры инициализации механизма загрузки
// регламентированных отчетов из файлов выгрузки. Формат области настроек - JSON.
//
// Описание параметров:
//  * Установкой параметра "РазрешитьЗагрузку" в "true" или "false" регулируем видимость
//    кнопки "Загрузить" и возможность загрузки из файла в форме отчета.
//  * Параметр "ФорматыСхемВыгрузки" описывает соответствие имен макетов схем выгрузки
//    поддерживаемым форматам загрузки. Если у формы единственная схема выгрузки или
//    нужно всегда использовать схему по умолчанию - указываем значение "null".
//  * Параметр "ОбластиОбработчиков" содержит список имен используемых обработчиков
//    загружаемых данных. Имена соответствуют областям макета, в которых можно размещать
//    произвольные алгоритмы на языке "1С:Предприятие" для обработки доступных объектов.
//
// Примечание:
//  Сопоставление имен узлов из файла XML и имен показателей отчета выполняется по данным схемы выгрузки,
//  поэтому обработчики используются для получения значений показателей не описанных в схеме выгрузки.
//
#Область Настройки
{
	"РазрешитьЗагрузку"   : true,
	
	"ФорматыСхемВыгрузки" : null,
	"ОбластиОбработчиков" : {
		"ПередЗагрузкой"  : "ПредОбработкаСхемыЗагрузки",
		"ПослеЗагрузки"   : "ПостОбработкаДокументаОтчета",
	}
}
#КонецОбласти

// Доступны параметры:
//
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПредОбработкаСхемыЗагрузки
	
	НайденныеУзлы = УзлыПоXPath(П.ДеревоДляЗагрузки, "//ЗемНалНД");
	Для Каждого НайденныйУзел Из НайденныеУзлы Цикл
		НайденныйУзел.Обязательность = "ОП"; // не выполнять автозагрузку узла
	КонецЦикла;
		
	НайденныеУзлы = УзлыПоXPath(П.ДеревоДляЗагрузки, "//ЗемНалНД/СумПУ/РасчПлатЗН");
	Для Каждого НайденныйУзел Из НайденныеУзлы Цикл
		НайденныйУзел.Обязательность = "ОП"; // не выполнять автозагрузку узла
		
		УзлыКодНалЛьгот = УзлыПоXPath(НайденныйУзел, "@ДоляЗУ");
		Для Каждого УзелКодНалЛьгот Из УзлыКодНалЛьгот Цикл
			УзелКодНалЛьгот.Ключ = "П000020007003_Основание";
		КонецЦикла;
		УзлыКодНалЛьгот = УзлыПоXPath(НайденныйУзел, "ОпрНалБаза/Льгот387_2Пл/@ДоляПлЗУ");
		Для Каждого УзелКодНалЛьгот Из УзлыКодНалЛьгот Цикл
			УзелКодНалЛьгот.Ключ = "П000020011003_Основание";
		КонецЦикла;
		УзлыКодНалЛьгот = УзлыПоXPath(НайденныйУзел, "ОпрНалБаза/Льгот387_2Сум/@КодНалЛьгот");
		Для Каждого УзелКодНалЛьгот Из УзлыКодНалЛьгот Цикл
			УзелКодНалЛьгот.Ключ = "П000020007003_КодЛьготы";
		КонецЦикла;
		УзлыКодНалЛьгот = УзлыПоXPath(НайденныйУзел, "ОпрНалБаза/Льгот387_2Пл/@КодНалЛьгот");
		Для Каждого УзелКодНалЛьгот Из УзлыКодНалЛьгот Цикл
			УзелКодНалЛьгот.Ключ = "П000020011003_КодЛьготы";
		КонецЦикла;
		УзлыКодНалЛьгот = УзлыПоXPath(НайденныйУзел, "СумНалИсчисл/Льгот387_2Осв/@КодНалЛьгот");
		Для Каждого УзелКодНалЛьгот Из УзлыКодНалЛьгот Цикл
			УзелКодНалЛьгот.Ключ = "П000020020003_КодЛьготы";
		КонецЦикла;
		УзлыКодНалЛьгот = УзлыПоXPath(НайденныйУзел, "СумНалИсчисл/Льгот387_2УмСум/@КодНалЛьгот");
		Для Каждого УзелКодНалЛьгот Из УзлыКодНалЛьгот Цикл
			УзелКодНалЛьгот.Ключ = "П000020024003_КодЛьготы";
		КонецЦикла;
		УзлыКодНалЛьгот = УзлыПоXPath(НайденныйУзел, "СумНалИсчисл/Льгот387_2СнСтав/@КодНалЛьгот");
		Для Каждого УзелКодНалЛьгот Из УзлыКодНалЛьгот Цикл
			УзелКодНалЛьгот.Ключ = "П000020026003_КодЛьготы";
		КонецЦикла;
	КонецЦикла;
	
#КонецОбласти

// Доступны параметры:
//
//  П.ДанныеОтчета      - заполненные данные документа регламентированного отчета;
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПостОбработкаДокументаОтчета
	
	ГруппыСтрокРаздела1 = УзлыПоXPath(П.ДеревоДляЗагрузки, "//ЗемНалНД/СумПУ"); // Раздел 1 (все группы строк)
	
	НомСтроки = 1; НомСтраницы = 1;
	Для НомГруппы = 1 По ГруппыСтрокРаздела1.Количество() Цикл
		ТекущаяГруппа = ГруппыСтрокРаздела1[НомГруппы - 1];
		Если НомСтроки > 2 Тогда
			НомСтроки = 1;
			НомСтраницы = НомСтраницы + 1;
		КонецЕсли;
		УзлыНаимСРП = УзлыПоXPath(ТекущаяГруппа, "../@НаимСРП");
		Если ЗначениеЗаполнено(УзлыНаимСРП) Тогда
			ЗаполнитьПоказательДокументаИзУзлаДерева(УзлыНаимСРП[0], П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
		КонецЕсли;
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(ТекущаяГруппа, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы, НомСтроки);
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	
	СтраницыРаздела2 = УзлыПоXPath(П.ДеревоДляЗагрузки, "//РасчПлатЗН"); // Раздел 2 (все страницы)
	
	НомерСтраницы = 1;
	Для НомСтраницы = 1 По СтраницыРаздела2.Количество() Цикл
		ТекущаяСтраница = СтраницыРаздела2[НомСтраницы - 1];
		
		УзелНомКадастрЗУ = УзлыПоXPath(ТекущаяСтраница, "@НомКадастрЗУ")[0];
		Если НЕ ЗначениеЗаполнено(УзелНомКадастрЗУ.Значение) Тогда
			Продолжить;
		КонецЕсли; 
		
		УзелОКТМО = УзлыПоXPath(ТекущаяСтраница, "../@ОКТМО")[0];
		УзелДопПоказатель = ТекущаяСтраница.Строки.Вставить(0);
		ЗаполнитьЗначенияСвойств(УзелДопПоказатель, УзелОКТМО, , "Родитель, Строки"); // важны только раздел, ключ и значение
		УзелДопПоказатель.Раздел = "Раздел2";
		УзелДопПоказатель.Ключ = "П000020002003";
		
		УзелКБК = УзлыПоXPath(ТекущаяСтраница, "../@КБК")[0];
		УзелДопПоказатель = ТекущаяСтраница.Строки.Вставить(0);
		ЗаполнитьЗначенияСвойств(УзелДопПоказатель, УзелКБК, , "Родитель, Строки"); // важны только раздел, ключ и значение
		УзелДопПоказатель.Раздел = "Раздел2";
		УзелДопПоказатель.Ключ = "П000020001003";
	
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(ТекущаяСтраница, П.ДанныеОтчета, П.ПараметрыОтчета, , НомерСтраницы);
		НомерСтраницы = НомерСтраницы + 1;
	КонецЦикла;
	
	Раздел2 = Неопределено;
	
	П.ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство("Раздел2", Раздел2);
	Если Раздел2 <> Неопределено Тогда
		Для Каждого СтраницаРаздела Из Раздел2 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные;
			ЗначениеПоказателя = "";
			Если ДанныеРаздела.Свойство("П000020007003_Основание", ЗначениеПоказателя) Тогда
				ЧастиЗначения = СтрРазделить(ЗначениеПоказателя, "/");
				ДанныеРаздела.Вставить("П000020006003_Числ", ЧислоИзСтроки(ЧастиЗначения[0]));
				ДанныеРаздела.Вставить("П000020006003_Знам", ЧислоИзСтроки(?(ЧастиЗначения.ВГраница() > 0 , ЧастиЗначения[1], "")));
			КонецЕсли;
			Если ДанныеРаздела.Свойство("П000020011003_Основание", ЗначениеПоказателя) Тогда
				ЧастиЗначения = СтрРазделить(ЗначениеПоказателя, "/");
				ДанныеРаздела.Вставить("П000020012003_Числ", ЧислоИзСтроки(ЧастиЗначения[0]));
				ДанныеРаздела.Вставить("П000020012003_Знам", ЧислоИзСтроки(?(ЧастиЗначения.ВГраница() > 0 , ЧастиЗначения[1], "")));
			КонецЕсли;
			Если ДанныеРаздела.Свойство("П000020007003_КодЛьготы", ЗначениеПоказателя) Тогда
				ЧастиЗначения = СтрРазделить(ЗначениеПоказателя, "/");
				ДанныеРаздела.Вставить("П000020007003_КодЛьготы", ЧастиЗначения[0]);
				ДанныеРаздела.Вставить("П000020007003_Основание", ?(ЧастиЗначения.ВГраница() > 0 , ЧастиЗначения[1], ""));
			КонецЕсли;
			Если ДанныеРаздела.Свойство("П000020011003_КодЛьготы", ЗначениеПоказателя) Тогда
				ЧастиЗначения = СтрРазделить(ЗначениеПоказателя, "/");
				ДанныеРаздела.Вставить("П000020011003_КодЛьготы", ЧастиЗначения[0]);
				ДанныеРаздела.Вставить("П000020011003_Основание", ?(ЧастиЗначения.ВГраница() > 0 , ЧастиЗначения[1], ""));
			КонецЕсли;
			Если ДанныеРаздела.Свойство("П000020020003_КодЛьготы", ЗначениеПоказателя) Тогда
				ЧастиЗначения = СтрРазделить(ЗначениеПоказателя, "/");
				ДанныеРаздела.Вставить("П000020020003_КодЛьготы", ЧастиЗначения[0]);
				ДанныеРаздела.Вставить("П000020020003_Основание", ?(ЧастиЗначения.ВГраница() > 0 , ЧастиЗначения[1], ""));
			КонецЕсли;
			Если ДанныеРаздела.Свойство("П000020024003_КодЛьготы", ЗначениеПоказателя) Тогда
				ЧастиЗначения = СтрРазделить(ЗначениеПоказателя, "/");
				ДанныеРаздела.Вставить("П000020024003_КодЛьготы", ЧастиЗначения[0]);
				ДанныеРаздела.Вставить("П000020024003_Основание", ?(ЧастиЗначения.ВГраница() > 0 , ЧастиЗначения[1], ""));
			КонецЕсли;
			Если ДанныеРаздела.Свойство("П000020026003_КодЛьготы", ЗначениеПоказателя) Тогда
				ЧастиЗначения = СтрРазделить(ЗначениеПоказателя, "/");
				ДанныеРаздела.Вставить("П000020026003_КодЛьготы", ЧастиЗначения[0]);
				ДанныеРаздела.Вставить("П000020026003_Основание", ?(ЧастиЗначения.ВГраница() > 0 , ЧастиЗначения[1], ""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

#КонецОбласти