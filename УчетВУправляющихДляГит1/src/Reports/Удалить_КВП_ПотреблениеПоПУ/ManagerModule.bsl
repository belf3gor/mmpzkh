#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА

// Формирует заголовок отчета.
//
// Возвращаемое значение:
//  Строка - заголовок отчета
//
Функция ЗаголовокОтчета(ПараметрыОтчета) Экспорт
	ЗаголовокОтчета = Новый Структура();
	
	ЗаголовокОтчета.Вставить("Заголовок", "Потребление по приборам учета");
	ЗаголовокОтчета.Вставить("Период", "с " + Формат(ПараметрыОтчета.ДатаНач, "ДФ='dd.MM.yyyy'") + " по " + Формат(ПараметрыОтчета.ДатаКон, "ДФ='dd.MM.yyyy'"));
	ЗаголовокОтчета.Вставить("Объект", ПараметрыОтчета.Объект);
	
	Возврат ЗаголовокОтчета;

КонецФункции // ЗаголовокОтчета()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который будет осуществлен вывод
//  ПоказыватьЗаголовок - Булево - показывать ли заголовок
//  ВысотаЗаголовка - Число - переменная, в которую запишется высота
//                 области заголовка
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт

	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран объект");
		Возврат;
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	
	//Вывод заголовка отчета
	
	Макет = Отчеты.Удалить_КВП_ПотреблениеПоПУ.ПолучитьМакет("Макет");
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовка.Параметры.Заполнить(ЗаголовокОтчета(ПараметрыОтчета));
	ДокументРезультат.Вывести(ОбластьЗаголовка);
	
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;

	//выборка всех объектов учета по выбранному владельцу
	ТаблицаОбъектов = Новый ТабличныйДокумент;

	Область = Макет.ПолучитьОбласть("ЗаголовокТаблицы|Объект");
	ТаблицаОбъектов.Вывести(Область);

	ПостроительОтчета = Новый ПостроительОтчета();
	ПостроительОтчета.Параметры.Вставить("Объект", ПараметрыОтчета.Объект);
	ПостроительОтчета.Параметры.Вставить("ДатаНач", НачалоДня(ПараметрыОтчета.ДатаНач) - 1);
	ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ПараметрыОтчета.ДатаКон));
	Если ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		ПостроительОтчета.Параметры.Вставить("Здание", ПараметрыОтчета.Объект.Владелец);
		ПостроительОтчета.Параметры.Вставить("НомерПервойКвартиры",    ПараметрыОтчета.Объект.НомерПервойКвартиры);
		ПостроительОтчета.Параметры.Вставить("НомерПоследнейКвартиры", ПараметрыОтчета.Объект.НомерПоследнейКвартиры);
	КонецЕсли;

	ПостроительОтчета.Текст = ПолучитьТекстЗапроса(ПараметрыОтчета);
	ПостроительОтчета.Выполнить();

	РезультатЗапроса = ПостроительОтчета.Результат;

	//Получаем начальные показания счетчиков для дальнейшего сравнения показаний
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ПоказанияСчетчиковСрезПервых.Период,
	|	КВП_ПоказанияСчетчиковСрезПервых.Счетчик,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПервых.ДневноеПоказание, 0) + ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПервых.НочноеПоказание, 0) + ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПервых.ПиковоеПоказание, 0) КАК Показание,
	|	КВП_ПоказанияСчетчиковСрезПервых.Регистратор.ВводНачальныхПоказаний КАК ВводНачальныхПоказаний,
	|	КВП_ПоказанияСчетчиковСрезПервых.Счетчик.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ втПоказанияСчетчиков
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПервых КАК КВП_ПоказанияСчетчиковСрезПервых
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоказанияСчетчиков.Период,
	|	втПоказанияСчетчиков.Счетчик,
	|	втПоказанияСчетчиков.Показание,
	|	втПоказанияСчетчиков.ВводНачальныхПоказаний,
	|	втПоказанияСчетчиков.Коэффициент * втПоказанияСчетчиков.Показание КАК УчетноеКоличество
	|ИЗ
	|	втПоказанияСчетчиков КАК втПоказанияСчетчиков";
	Результат = Запрос.Выполнить().Выгрузить();
	
	ВспомогательнаяТаблица = РезультатЗапроса.Выгрузить();
	
	//Готовим осоновную таблицу с результатами
	Для Каждого Счетчик Из ВспомогательнаяТаблица Цикл 
		
		Если Счетчик.ДатаТек = Счетчик.ДатаПред
			И Счетчик.ПокТек = Счетчик.ПокПред Тогда
			
			НайденныеСтроки = Результат.НайтиСтроки(Новый Структура("Период, Счетчик, Показание", 
			Счетчик.ДатаТек, Счетчик.Счетчик, Счетчик.ПокТек));
			Если НЕ НайденныеСтроки.Количество() = 0 Тогда
				Если НайденныеСтроки.Получить(0).ВводНачальныхПоказаний = Ложь Тогда
					Счетчик.ДатаПред = "-";
					Счетчик.ПокПред = 0;
					Счетчик.Расход = НайденныеСтроки.Получить(0).Показание;
					Счетчик.УчетноеКоличество = НайденныеСтроки.Получить(0).УчетноеКоличество;
				Иначе
					Счетчик.ДатаПред = "-";
					Счетчик.ПокПред = 0;					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	

	тмВспомогательнаяТаблица = ВспомогательнаяТаблица.Скопировать();
	ТаблицаУслуг = ВспомогательнаяТаблица.Скопировать();
	ТаблицаУслуг.Свернуть("ВидУслуги");
	КоличествоУслуг = ТаблицаУслуг.Количество();
	ВспомогательнаяТаблица.Свернуть("ВидОбъекта, УровеньИерархии, Паркинг, Здание, Подъезд, Объект, НомСчетчика, ВидУслуги, КодКвартиры, Квартира","ПокТек, ДатаТек, ПокПред, ДатаПред, Расход, УчетноеКоличество");
	
	ЭтоПаркинг = Ложь;
	ВидОбъектаВладельца = "Здание";
	ВидОбъектаИндСч = "ЛицевойСчетПомещение";
	Если (ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Здания") И (ПараметрыОтчета.Объект.ТипСооружения = Перечисления.УПЖКХ_ТипСооружения.Паркинг))
    	ИЛИ (ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") И (Справочники.УПЖКХ_ВидыПомещений.Выбрать().ТипПомещения = Перечисления.КВП_ТипыПомещений.Автоместо))
			Тогда
				ЭтоПаркинг = Истина;
				ВидОбъектаВладельца = "Паркинг";
				ВидОбъектаИндСч = "ПарковочноеМесто";
	КонецЕсли;
	
	ДопТаблицаОбъектов = ВспомогательнаяТаблица.Скопировать();
	ДопТаблицаОбъектов.Очистить();
	ВспомогательнаяТаблица.Колонки.Добавить("ДопОбъект", Новый ОписаниеТипов("Булево"));
	
	МассивСтрокДляУдаления = Новый Массив;
	
	ТаблицаЗданий = ВспомогательнаяТаблица.Скопировать();
	ТаблицаЗданий.Свернуть(ВидОбъектаВладельца);
	Для Каждого ТекСтрока Из ТаблицаЗданий Цикл
		СтрокаЗдания = ВспомогательнаяТаблица.Найти(ТекСтрока[ВидОбъектаВладельца], "Объект");
		Если СтрокаЗдания = Неопределено Тогда
			МассивСтрокДляУдаления.Очистить();
			Для Каждого ТекУслуга Из ТаблицаУслуг Цикл
				НоваяСтрока = ВспомогательнаяТаблица.Добавить();
				НоваяСтрока.ВидОбъекта = ВидОбъектаВладельца;
				НоваяСтрока[ВидОбъектаВладельца] = ТекСтрока[ВидОбъектаВладельца];
				НоваяСтрока.Объект = ТекСтрока[ВидОбъектаВладельца];
				НоваяСтрока.НомСчетчика = "-";
				НоваяСтрока.ВидУслуги = ТекУслуга.ВидУслуги;
				НоваяСтрока.ДопОбъект = Истина;
				Расход = 0;
				УчетноеКоличество = 0;
				Если ЭтоПаркинг Тогда
					СтрокиПаркМест = тмВспомогательнаяТаблица.НайтиСтроки(
						Новый Структура("ВидУслуги, ВидОбъекта, Паркинг", 
						ТекУслуга.ВидУслуги, "ПарковочноеМесто", НоваяСтрока.Объект));
					Для Каждого СтрокаПаркМеста Из СтрокиПаркМест Цикл
						Расход = Расход + СтрокаПаркМеста.Расход;
						УчетноеКоличество = УчетноеКоличество + СтрокаПаркМеста.УчетноеКоличество;
					КонецЦикла;
				Иначе
					СтрокиПодъездов = тмВспомогательнаяТаблица.НайтиСтроки(
							Новый Структура("ВидУслуги, ВидОбъекта, Здание", 
							ТекУслуга.ВидУслуги, "Подъезд", НоваяСтрока.Объект));
					СпПодъездов = Новый СписокЗначений;
					Для Каждого СтрокаПодъезда Из СтрокиПодъездов Цикл
						Расход = Расход + СтрокаПодъезда.Расход;
						УчетноеКоличество = УчетноеКоличество + СтрокаПодъезда.УчетноеКоличество;
						СпПодъездов.Добавить(СтрокаПодъезда.Объект);
					КонецЦикла;
					СтрокиЛС = тмВспомогательнаяТаблица.НайтиСтроки(
					Новый Структура("ВидУслуги, ВидОбъекта, Здание", 
						ТекУслуга.ВидУслуги, "ЛицевойСчет", НоваяСтрока.Объект));
					Для Каждого СтрокаЛС Из СтрокиЛС Цикл
						Если НЕ СпПодъездов.НайтиПоЗначению(СтрокаЛС.Подъезд) = Неопределено Тогда
							Продолжить;
						КонецЕсли;    
						Расход = Расход + СтрокаЛС.Расход;
						УчетноеКоличество = УчетноеКоличество + СтрокаЛС.УчетноеКоличество;
					КонецЦикла;
					
					СтрокиПомещение = тмВспомогательнаяТаблица.НайтиСтроки(
					Новый Структура("ВидУслуги, ВидОбъекта, Здание", 
						ТекУслуга.ВидУслуги, "Помещение", НоваяСтрока.Объект));
					Для Каждого СтрокиПомещение Из СтрокиПомещение Цикл
						Если НЕ СпПодъездов.НайтиПоЗначению(СтрокиПомещение.Подъезд) = Неопределено Тогда
							Продолжить;
						КонецЕсли;    
						Расход = Расход + СтрокиПомещение.Расход;
						УчетноеКоличество = УчетноеКоличество + СтрокиПомещение.УчетноеКоличество;
					КонецЦикла;
					
				КонецЕсли;
				НоваяСтрока.Расход = Расход;
				НоваяСтрока.УчетноеКоличество = УчетноеКоличество;
				Если Расход = 0 Тогда
					МассивСтрокДляУдаления.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
			КолСтрок = Мин(КоличествоУслуг, МассивСтрокДляУдаления.Количество());
			Если КолСтрок = КоличествоУслуг Тогда
				КолСтрок = КолСтрок - 1;
			КонецЕсли;
			Для Индекс = 0 По КолСтрок - 1 Цикл
				ВспомогательнаяТаблица.Удалить(МассивСтрокДляУдаления[Индекс]);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоПаркинг Тогда
		ВспомогательнаяТаблица.Сортировать("Паркинг, КодКвартиры, УровеньИерархии");
	Иначе
		ВспомогательнаяТаблица.Сортировать("Здание, Подъезд, КодКвартиры, УровеньИерархии");
	КонецЕсли;
	
	ТЗОбъектов = ВспомогательнаяТаблица.Скопировать();
	ТЗОбъектов.Свернуть("Здание, Паркинг, Подъезд, Объект, ВидОбъекта, Квартира");
	ТЗОбъектов.Колонки.Добавить("КолСтрок", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ТЗОбъектов Цикл
		Для Каждого СтрокаУслуги Из ТаблицаУслуг Цикл
			СтрокиОбъекта = ВспомогательнаяТаблица.НайтиСтроки(Новый Структура("Объект, ВидУслуги", ТекСтрока.Объект, СтрокаУслуги.ВидУслуги));
			ТекСтрока.КолСтрок = Макс(ТекСтрока.КолСтрок, СтрокиОбъекта.Количество());
		КонецЦикла;
	КонецЦикла;	
		
	//выводим колонку "Объекты"     
	ТаблицаОбъектов.НачатьАвтогруппировкуСтрок();
	СЧ = 0;
	Пока СЧ < ТЗОбъектов.Количество() Цикл
		Для Индекс = 1 По ТЗОбъектов.Получить(СЧ).КолСтрок Цикл			
			
			ТекущаяСтрока = ТЗОбъектов.Получить(Сч);
			Если (Сч + 1) < (ТЗОбъектов.Количество()) Тогда
				СледующаяСтрока = ТЗОбъектов.Получить(Сч + 1);
			КонецЕсли;
			Если (Сч - 1) >= 0 Тогда
				ПредыдущаяСтрока = ТЗОбъектов.Получить(Сч - 1);
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("СтрокаТаблицы|Объект");
			Область.Параметры.Объект = ТЗОбъектов.Получить(СЧ).Объект;
								
			Если ТекущаяСтрока.ВидОбъекта = "Здание" ИЛИ ТекущаяСтрока.ВидОбъекта = "Паркинг" Тогда
				УровеньГруппировки = 0;
				Область.Область().ЦветФона = Новый Цвет(214,234,255);
			ИначеЕсли ТекущаяСтрока.ВидОбъекта = "Подъезд" ИЛИ ТекущаяСтрока.ВидОбъекта = "ПарковочноеМесто" Тогда
				УровеньГруппировки = 1;
				Область.Область().Отступ = 1;
				Область.Область().ЦветФона = Новый Цвет(231,255,239);
			ИначеЕсли ТекущаяСтрока.ВидОбъекта = "ЛицевойСчет"
				И ТекущаяСтрока.Объект.Адрес = ПредыдущаяСтрока.Объект Тогда
				УровеньГруппировки = 3;
				Область.Область().Отступ = 3;
			Иначе
				УровеньГруппировки = 2;
				Область.Область().Отступ = 2;
			КонецЕсли;
				
			Область.Параметры.Квартира = ТекущаяСтрока.Квартира;
			ТаблицаОбъектов.Вывести(Область, УровеньГруппировки);
			
		КонецЦикла;	
		СЧ = СЧ + 1;
	КонецЦикла;
	
	ТаблицаОбъектов.ЗакончитьАвтогруппировкуСтрок();
	
	Область = Макет.ПолучитьОбласть("Итоги|Объект");
	ТаблицаОбъектов.Вывести(Область);
	ДокументРезультат.Присоединить(ТаблицаОбъектов);
	// готово

	// идем по справочнику услуг, добавляем секции в табличный документ
	// и заполняем данными из основной выборки
	ЗапросПоУслугам = Новый Запрос();
	ЗапросПоУслугам.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Наименование КАК Наименование,
	|	КВП_Услуги.Ссылка
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	РезультатЗапросаПоУслугам = ЗапросПоУслугам.Выполнить();
	ВыборкаУслуг = РезультатЗапросаПоУслугам.Выбрать();

	Пока ВыборкаУслуг.Следующий() Цикл

		Услуга = ВыборкаУслуг.Ссылка;
		ИтогРасход = 0;
		ИтогУчетноеКоличество = 0;
		УслугаНайдена = Ложь;

		//Для Каждого Строка Из ВспомогательнаяТаблица Цикл
		//	Если Строка.ДопОбъект Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	Строка.ВидУслуги   = "";
		//	Строка.ПокТек      = "";
		//	Строка.ДатаТек     = "-";
		//	Строка.ПокПред     = "";
		//	Строка.ДатаПред    = "-";
		//	Строка.Расход      = "";
		//КонецЦикла;

		Макет = ПолучитьМакет("Макет");
		ТаблицаРезультат = Новый ТабличныйДокумент;

		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			Если Выборка.ВидУслуги = Услуга Тогда
				УслугаНайдена = Истина;
				Для Каждого Строка Из ВспомогательнаяТаблица Цикл
					Если Строка.Объект = Выборка.Объект И Строка.НомСчетчика = Выборка.НомСчетчика Тогда
						Если ЗначениеЗаполнено(Строка.ПокПред) Тогда
							Строка.ПокПред = Выборка.ПокПред;
							Строка.ДатаПред = Выборка.ДатаПред;
						Иначе
							Строка.ПокПред = "-";
							Строка.ДатаПред = "-";
						КонецЕсли;
						//Если ЗначениеЗаполнено(Строка.Расход) Тогда 
						//	Строка.Расход = Выборка.Расход;
						//Иначе 
						//	Строка.Расход = 0;
						//КонецЕсли;
						Строка.ПокТек = Выборка.ПокТек;
						Строка.ДатаТек = Выборка.ДатаТек;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		КонецЦикла; //Выборка

		Если УслугаНайдена Тогда

			Область = Макет.ПолучитьОбласть("ЗаголовокТаблицы|Услуга");
			Область.Параметры.ВидУслуги = Услуга.Наименование;
			ТаблицаРезультат.Вывести(Область);

			Для Каждого ТекСтрока Из ТЗОбъектов Цикл
				СтрокиОбъекта = ВспомогательнаяТаблица.НайтиСтроки(Новый Структура("Объект, ВидУслуги", ТекСтрока.Объект, Услуга));
				Для Каждого Строка Из СтрокиОбъекта Цикл
					Область = Макет.ПолучитьОбласть("СтрокаТаблицы|Услуга");
					Область.Параметры.Заполнить(Строка);
					Если Строка.ВидОбъекта = "Здание" ИЛИ Строка.ВидОбъекта = "Паркинг" Тогда
						Область.Область().ЦветФона = Новый Цвет(214,234,255);
					ИначеЕсли Строка.ВидОбъекта = "Подъезд" ИЛИ Строка.ВидОбъекта = "ПарковочноеМесто" Тогда
						Область.Область().ЦветФона = Новый Цвет(231,255,239);
					ИначеЕсли Строка.ВидОбъекта = "Помещение" Тогда
                        //Область.Область().ЦветФона = Новый Цвет(231,200,200);
					КонецЕсли;
					
					ТекРасход = 0;
					ТекУчетноеКоличество = 0;
					Если Строка.ВидУслуги = Услуга Тогда
						Попытка
							ТекРасход = Число(Строка.Расход);
							ТекУчетноеКоличество = Число(Строка.УчетноеКоличество);
						Исключение
							ТекРасход = 0;
							ТекУчетноеКоличество = 0;
						КонецПопытки;
					КонецЕсли;
					Область.Параметры.Расход = ТекРасход;
					Область.Параметры.УчетноеКоличество = ТекУчетноеКоличество;
					ТаблицаРезультат.Вывести(Область);
					Если Строка.ВидОбъекта = "Здание" ИЛИ Строка.ВидОбъекта = "Паркинг" Тогда
						ИтогРасход = ИтогРасход + ТекРасход;
						ИтогУчетноеКоличество = ИтогУчетноеКоличество + ТекУчетноеКоличество;
					КонецЕсли;
				КонецЦикла;
				КолДопСтрок = ТекСтрока.КолСтрок - СтрокиОбъекта.Количество();
				Для Индекс = 1 По КолДопСтрок Цикл
					Область = Макет.ПолучитьОбласть("СтрокаТаблицы|Услуга");
					Если ТекСтрока.ВидОбъекта = "Здание" ИЛИ ТекСтрока.ВидОбъекта = "Паркинг" Тогда
						Область.Область().ЦветФона = Новый Цвет(214,234,255);
					ИначеЕсли ТекСтрока.ВидОбъекта = "Подъезд" Тогда
						Область.Область().ЦветФона = Новый Цвет(231,255,239);
					КонецЕсли;
					Область.Параметры.НомСчетчика = "-";
					Область.Параметры.ДатаТек  = "-";
					Область.Параметры.ДатаПред = "-";
					Область.Параметры.Расход = 0;
					Область.Параметры.УчетноеКоличество = 0;
					ТаблицаРезультат.Вывести(Область);
				КонецЦикла;
			КонецЦикла;

			Область = Макет.ПолучитьОбласть("Итоги|Услуга");
			Область.Параметры.ИтогРасход = ИтогРасход;
			Область.Параметры.ИтогУчетноеКоличество = ИтогУчетноеКоличество;
			ТаблицаРезультат.Вывести(Область);

			ДокументРезультат.Присоединить(ТаблицаРезультат);

		КонецЕсли;

	КонецЦикла; //ВыборкаУслуг

	// Подвал
	Область = Макет.ПолучитьОбласть("Подвал");
	ДокументРезультат.Вывести(Область);

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 4;

	// Объединим ячейки под заголовок
	ДокументРезультат.Область("R2C2:R2C" + ДокументРезультат.ШиринаТаблицы).Объединить();
	ДокументРезультат.Область("R3C2:R3C" + ДокументРезультат.ШиринаТаблицы).Объединить();

	ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка + 2, , ВысотаЗаголовка + 4, );

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2,
	                                  ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);

	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры // СформироватьОтчет()

// Формирует и возвращает текст запроса.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ПолучитьТекстЗапроса(ПараметрыОтчета) Экспорт	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ПОМЕСТИТЬ УстановленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаНач, ) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Период > &ДатаНач
	|	И КВП_ЗакрепленныеСчетчики.Период < &ДатаКон
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА ""ЛицевойСчет""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|					ТОГДА ""Подъезд""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|								И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Здание)
	|							ТОГДА ""Здание""
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|										И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения <> ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|									ТОГДА ""Помещение""
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|												И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Паркинг)
	|											ТОГДА ""Паркинг""
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|														И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|													ТОГДА ""ПарковочноеМесто""
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидОбъекта,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА 4
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|					ТОГДА 2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|								И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Здание)
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|										И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|									ТОГДА 2
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|												И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Паркинг)
	|											ТОГДА 1
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|														И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения <> ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|													ТОГДА 3
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК УровеньИерархии,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес.Владелец
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|					ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Владелец
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|							ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Владелец
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|									ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Здание,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|				И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|			ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Владелец
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|						И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Паркинг)
	|					ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект
	|			КОНЕЦ
	|	КОНЕЦ КАК Паркинг,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА КВП_Подъезды.Ссылка
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|					ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Подъезд
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|							ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Подъезд,
	|	ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Представление КАК НомСчетчика1,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК ВидУслуги,
	|	ЕСТЬNULL(ПоказанияСчетчиковТекущие.ДневноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.НочноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.ПиковоеПоказание, 0) КАК ПокТек,
	|	ЕСТЬNULL(ПоказанияСчетчиковТекущие.Период, ""-"") КАК ДатаТек,
	|	ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.ДневноеПоказание, ЕСТЬNULL(ПоказанияСчетчиковСрезПервых.ДневноеПоказание, 0)) + ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.НочноеПоказание, ЕСТЬNULL(ПоказанияСчетчиковСрезПервых.НочноеПоказание, 0)) + ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.ПиковоеПоказание, ЕСТЬNULL(ПоказанияСчетчиковСрезПервых.ПиковоеПоказание, 0)) КАК ПокПред,
	|	ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.Период, ЕСТЬNULL(ПоказанияСчетчиковСрезПервых.Период, ""-"")) КАК ДатаПред,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА ВЫБОР
	|					КОГДА ПоказанияСчетчиковТекущие.Период = ПоказанияСчетчиковПредыдущие.Период
	|						ТОГДА 0
	|					ИНАЧЕ ЕСТЬNULL(ПоказанияСчетчиковТекущие.ДневноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.НочноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.ПиковоеПоказание, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(ПоказанияСчетчиковТекущие.ДневноеПоказание, 0) - ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.ДневноеПоказание, ЕСТЬNULL(ПоказанияСчетчиковСрезПервых.ДневноеПоказание, 0)) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.НочноеПоказание, 0) - ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.НочноеПоказание, ЕСТЬNULL(ПоказанияСчетчиковСрезПервых.НочноеПоказание, 0)) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.ПиковоеПоказание, 0) - ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.ПиковоеПоказание, ЕСТЬNULL(ПоказанияСчетчиковСрезПервых.ПиковоеПоказание, 0))
	|	КОНЕЦ КАК Расход,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК НомСчетчика,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Коэффициент КАК Коэффициент,
	|	ЕСТЬNULL(ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес.Код, ВЫБОР
	|			КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|				ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Код
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодКвартиры,
	|	ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес КАК Квартира,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	ПоказанияСчетчиковПредыдущие.Регистратор.ВводНачальныхПоказаний КАК ВводНачальныхПоказаний
	|ПОМЕСТИТЬ втИтоговаяТаблица
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКон,
	|			ВЫБОР
	|					КОГДА Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|						ТОГДА Объект В
	|								(ВЫБРАТЬ
	|									ЛицевыеСчета.ЛицевойСчет
	|								ИЗ
	|									РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ) КАК ЛицевыеСчета
	|								ГДЕ
	|									ЛицевыеСчета.Действует)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И Счетчик В
	|					(ВЫБРАТЬ
	|						УстановленныеСчетчики.Счетчик
	|					ИЗ
	|						УстановленныеСчетчики КАК УстановленныеСчетчики
	|					СГРУППИРОВАТЬ ПО
	|									УстановленныеСчетчики.Счетчик) {(Счетчик).* КАК Счетчик, (Счетчик.ВидУслуги).* КАК Услуга}) КАК ЗакрепленныеСчетчикиСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаКон, {(Счетчик).* КАК Счетчик, (Счетчик.ВидУслуги).* КАК Услуга}) КАК ПоказанияСчетчиковТекущие
	|		ПО ЗакрепленныеСчетчикиСрезПоследних.Счетчик = ПоказанияСчетчиковТекущие.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаНач, {(Счетчик).* КАК Счетчик, (Счетчик.ВидУслуги).* КАК Услуга}) КАК ПоказанияСчетчиковПредыдущие
	|		ПО ЗакрепленныеСчетчикиСрезПоследних.Счетчик = ПоказанияСчетчиковПредыдущие.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Подъезды КАК КВП_Подъезды
	|		ПО ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес.Владелец = КВП_Подъезды.Владелец
	|			И (ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес.Код МЕЖДУ КВП_Подъезды.НомерПервойКвартиры И КВП_Подъезды.НомерПоследнейКвартиры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПервых(&ДатаНач, ) КАК ПоказанияСчетчиковСрезПервых
	|		ПО ЗакрепленныеСчетчикиСрезПоследних.Счетчик = ПоказанияСчетчиковСрезПервых.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяТаблица.ВидОбъекта,
	|	втИтоговаяТаблица.УровеньИерархии,
	|	втИтоговаяТаблица.Здание,
	|	втИтоговаяТаблица.Паркинг,
	|	втИтоговаяТаблица.Подъезд,
	|	втИтоговаяТаблица.Объект,
	|	втИтоговаяТаблица.НомСчетчика1,
	|	втИтоговаяТаблица.ВидУслуги,
	|	втИтоговаяТаблица.ПокТек,
	|	втИтоговаяТаблица.ДатаТек,
	|	втИтоговаяТаблица.ПокПред,
	|	втИтоговаяТаблица.ДатаПред,
	|	втИтоговаяТаблица.Расход,
	|	втИтоговаяТаблица.НомСчетчика,
	|	втИтоговаяТаблица.Коэффициент * втИтоговаяТаблица.Расход КАК УчетноеКоличество,
	|	втИтоговаяТаблица.КодКвартиры,
	|	втИтоговаяТаблица.Квартира,
	|	втИтоговаяТаблица.Счетчик,
	|	втИтоговаяТаблица.ВводНачальныхПоказаний
	|ИЗ
	|	втИтоговаяТаблица КАК втИтоговаяТаблица";
	
	Если ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	втИтоговаяТаблица.Объект = &Объект ";

	ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	(втИтоговаяТаблица.Объект = &Объект
		|	ИЛИ втИтоговаяТаблица.Объект.Владелец = &Объект
		|	ИЛИ втИтоговаяТаблица.Объект.Адрес.Владелец = &Объект)";
		
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	втИтоговаяТаблица.Объект = &Объект
		|	ИЛИ (втИтоговаяТаблица.Объект.Адрес.Владелец = &Здание
		|	И втИтоговаяТаблица.Объект.Адрес.Владелец.Код >= &НомерПервойКвартиры
		|	И втИтоговаяТаблица.Объект.Адрес.Владелец.Код <= &НомерПоследнейКвартиры)";

	ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда  
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	(втИтоговаяТаблица.Объект = &Объект
		|	ИЛИ втИтоговаяТаблица.Объект.Владелец = &Объект
		|	ИЛИ втИтоговаяТаблица.Объект.Адрес.Владелец = &Объект)";

	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|{УПОРЯДОЧИТЬ ПО
	|Объект.*}
	|АВТОУПОРЯДОЧИВАНИЕ";

	Если ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		Если ПараметрыОтчета.Объект.ЭтоГруппа Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &Объект", " В ИЕРАРХИИ(&Объект)");
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапроса()

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли