&НаКлиенте
Перем ПараметрыОбработчикаОжидания; 

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	УстановитьНачальныеНастройки();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	Если Отчет.РежимРасшифровки Тогда
		СформироватьОтчетНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	Если ТекущийМакет <> "МакетКарты" И НЕ ЗавершитьРаботуСОтчетом Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Завершить работу с отчетом?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда		
		СохранитьНастройкуМакета(ВыбранноеЗначение);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если НЕ Отчет.РежимРасшифровки Тогда
		БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Отчет.Организация) Тогда
		Отчет.ВключатьОбособленныеПодразделения = Ложь;
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатСхемыВыбор(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено ИЛИ НЕ РасшифровкиДоступны Тогда		
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");

	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	Если СтрНайти(ИмяЭлемента, "Расшифровка") = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = РасшифроватьСхемуНалоговойБазыНаСервере(ИмяЭлемента);
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		УстановитьВидимостьИндикатора(Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "ФормированиеОтчета");
	Иначе
		ОбновитьСтраницы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяФормыВызова       = Неопределено;
	
	Если НЕ РасшифровкиДоступны Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	ЗначениеРасшифровки = Неопределено;
	
	РезультатВыполнения = ОбработкаРасшифровкиНаСервере(Расшифровка, ИмяФормыВызова, ЗначениеРасшифровки);
	
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
	ИначеЕсли НЕ ИмяФормыВызова = Неопределено Тогда
		ПараметрыФормы = Новый Структура("Ключ", ЗначениеРасшифровки);
		ОткрытьФорму(ИмяФормыВызова, ПараметрыФормы);
	КонецЕсли;
	
	ОбновитьСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ОбработатьПереходНазад(Ложь);
	ОбновитьСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСтруктураНалоговойБазы(Команда)
	
	ОбработатьПереходНазад(Истина);
	ОбновитьСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСхемы(Команда)
	
	ПараметрыДляФормы = Новый Структура("ИмяМакета, Настройка", ТекущийМакет, ПолучитьНастройкуМакета(ТекущийМакет));
	
	ОткрытьФорму("Отчет.АнализСостоянияНалоговогоУчетаПоУСН.Форма.ФормаВарианта", ПараметрыДляФормы, ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		УстановитьВидимостьИндикатора(Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "ФормированиеОтчета");
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		ОбновитьСтраницы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаКлиенте()
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Вставить("Организация",                       Отчет.Организация);
	ПараметрыАктуализации.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыАктуализации.Вставить("ДатаАктуальности",                  ДатаАктуальности);
	ПараметрыАктуализации.Вставить("ДатаОкончанияАктуализации",         Отчет.КонецПериода);

	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтотОбъект,
		ПараметрыАктуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеМесяцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "СформироватьОтчет" Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
		Активизировать();
		СформироватьОтчет("");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ДополнитьПараметрыОтчетаДляРасшифровкиНаСервере(ПараметрыОтчета, ИмяЭлемента)
	
	Если СтрНайти(ИмяЭлемента, "Расшифровка") = 0 Тогда	
		Возврат;		
	КонецЕсли;
	
	ИмяРасшифровки = СтрЗаменить(ИмяЭлемента, "Расшифровка", "");
	
	ОтключитьТаблицы = Ложь;
	Расшифровка 	 = Неопределено;
	ВыделятьНДСУСН 	 = Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.ВыделятьНДСУСН(ПараметрыОтчета);
	
	Если СтрНайти(ИмяРасшифровки, "МакетРасшифровкиПоНоменклатуре") > 0 Тогда
		ИмяМакета = ?(ВыделятьНДСУСН, "МакетРасшифровкиПоНоменклатуре", "МакетРасшифровкиПоНоменклатуре2009");
	ИначеЕсли СтрНайти(ИмяРасшифровки, "МакетРасшифровкиПоРБП") > 0 Тогда
		ИмяМакета = ?(ВыделятьНДСУСН, "МакетРасшифровкиПоРБП", "МакетРасшифровкиПоРБП2009");
	ИначеЕсли СтрНайти(ИмяРасшифровки, "МакетРасшифровкиПоТЗР") > 0 Тогда
		ИмяМакета = ?(ВыделятьНДСУСН, "МакетРасшифровкиПоТЗР", "МакетРасшифровкиПоТЗР2009");
	ИначеЕсли СтрНайти(ИмяРасшифровки, "МакетРасшифровкиПоНДС") > 0 Тогда
		ИмяМакета = ?(ВыделятьНДСУСН, "МакетРасшифровкиПоНДС", "МакетРасшифровкиПоНДС2009");
	ИначеЕсли СтрДлина(ИмяРасшифровки) > 1 Тогда
		ИмяМакета = ИмяРасшифровки;
	ИначеЕсли СтрДлина(ИмяРасшифровки) = 1 Тогда
		ИмяМакета        = "МакетРасшифровкиДоходов";
		ОтключитьТаблицы = Истина;
		Расшифровка      = Число(ИмяРасшифровки);
	Иначе 	
		Возврат;
	КонецЕсли;
	                    
	ПутьМакета   = ТекущийМакет + "/" + ПутьМакета;
	ТекущийМакет = ИмяМакета;
	
	ПараметрыОтчета.Вставить("Расшифровка"     , Расшифровка);
	ПараметрыОтчета.Вставить("ОтключитьТаблицы", ОтключитьТаблицы);
    ПараметрыОтчета.Вставить("ИмяМакета"       , ИмяМакета);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                      , Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода"                    , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                     , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("ДатаИзмененияУПпоНДС"             , Отчет.ДатаИзмененияУПпоНДС);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыОтчета.Вставить("УникальныйИдентификатор"          , УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("КоллекцияНастроек"                , Отчет.КоллекцияНастроек);
	ПараметрыОтчета.Вставить("ИмяМакета"                        , ТекущийМакет);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УстановитьВидимостьИндикатора(Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "НеИспользовать");
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			
			ОбновитьСтраницы();
			
					
			БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		УстановитьВидимостьИндикатора(Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "НеИспользовать");
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Отчет.ДатаИзмененияУПпоНДС = Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.ДатаИзмененияУчетнойПолитикиПоНДС(
		Отчет.Организация, Отчет.КонецПериода);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	// очистим КЭШ отчетов 
	КэшОтчетов = Новый Структура;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.ЗаполнитьСхемуНалоговойБазы(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.ЗаполнитьСхемуНалоговойБазы", 
			ПараметрыОтчета, 
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция РасшифроватьСхемуНалоговойБазыНаСервере(ИмяЭлемента)
	
	Результат.Очистить();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Если ЗначениеЗаполнено(КэшОтчетовАдресХранилища) Тогда
		КэшОтчетов = ПолучитьИзВременногоХранилища(КэшОтчетовАдресХранилища);
	Иначе
		КэшОтчетов = Новый Структура;
	КонецЕсли;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	ПараметрыОтчета.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыОтчета.Вставить("КэшОтчетов" , КэшОтчетов);
	
	ДополнитьПараметрыОтчетаДляРасшифровкиНаСервере(ПараметрыОтчета, ИмяЭлемента);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.СформироватьРасшифровку(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, 
																			"Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.СформироватьРасшифровку", 
																			ПараметрыОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = "Анализ состояния налогового учета по УСН" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);
	
	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		
		ЗаголовокОтчета = ЗаголовокОтчета + " " + БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
		
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Форма.Период = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Форма.ВидПериода, Форма.Отчет.НачалоПериода, Форма.Отчет.КонецПериода);
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереходНазад(НаГлавную = Ложь)
	
	ТочкаРазделителя = СтрНайти(ПутьМакета, "/");
	
	Если ТочкаРазделителя = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМакета = Лев(ПутьМакета, ТочкаРазделителя - 1);
	
	Если ИмяМакета <> "МакетКарты" Тогда
		СхемаКомпоновкиДанных = Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.ПолучитьМакет(ИмяМакета);
		
		ПараметрыОтчета = Новый Структура("ИмяМакета, КоллекцияНастроек", ИмяМакета, Отчет.КоллекцияНастроек);
		Настройки = Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.ПолучитьНастройкуМакета(ПараметрыОтчета);
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КэшОтчетовАдресХранилища) Тогда
		КэшОтчетов = ПолучитьИзВременногоХранилища(КэшОтчетовАдресХранилища);
	Иначе
		КэшОтчетов = Новый Структура;
	КонецЕсли;
	
	КэшРезультата = Неопределено;
	КэшОтчетов.Свойство(ИмяМакета, КэшРезультата);
	
	КэшОтчетовАдресХранилища = ПоместитьВоВременноеХранилище(КэшОтчетов, Новый УникальныйИдентификатор);
	
	Если НаГлавную или КэшРезультата = Неопределено Тогда
		
		ПутьМакета   = "";
		ТекущийМакет = "МакетКарты";
		
	Иначе
		
		// Загрузим результат, если есть сохраненный
		ЭтаФорма.Результат.Очистить();
		ЭтаФорма.Результат.Вывести(КэшРезультата.Результат);
		ЭтаФорма.Результат.ФиксацияСверху = КэшРезультата.ФиксацияСверху;
		
		Если СтрНайти(ИмяМакета, "МакетРасшифровкиПоНоменклатуре") Тогда
			
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(КэшРезультата.ДанныеРасшифровки), ДанныеРасшифровки);
			
		КонецЕсли;	
		
		ПутьМакета   = СтрЗаменить(ПутьМакета, ИмяМакета + "/", "");
		ТекущийМакет = ИмяМакета;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработкаРасшифровкиНаСервере(Расшифровка, ИмяФормыВызова, ЗначениеРасшифровки = Неопределено)

	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ОбъектОтчет    = ЭтаФорма.РеквизитФормыВЗначение("Отчет");
	ВыделятьНДСУСН = Истина;
	
	Если ЗначениеЗаполнено(КэшОтчетовАдресХранилища) Тогда
		КэшОтчетов = ПолучитьИзВременногоХранилища(КэшОтчетовАдресХранилища);
	Иначе
		КэшОтчетов = Новый Структура;
	КонецЕсли;
	
	ДанныеРасшифровкиИзХранилища = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭлементРасшифровкиДанных     = ДанныеРасшифровкиИзХранилища.ДанныеРасшифровки.Элементы[Расшифровка];
	ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля();
	
	Если СтрНайти(ТекущийМакет, "МакетРасшифровкиПоНоменклатуре") Тогда 
		
		КэшОтчета	= КэшОтчетов[ТекущийМакет];
		КэшОтчета.Вставить("ДанныеРасшифровки",     ПоместитьВоВременноеХранилище(ДанныеРасшифровкиИзХранилища, Новый УникальныйИдентификатор));
		КэшОтчетов.Вставить(ТекущийМакет, КэшОтчета);
		
		ПолеРасшифровки = "ЭлементРасхода";
		СтрокаЗначенияРасшифровки = ЭлементРасшифровкиДанныхПоля.Найти(ПолеРасшифровки);
		ЗначениеРасшифровки       = ?(СтрокаЗначенияРасшифровки = Неопределено, Неопределено, СтрокаЗначенияРасшифровки.Значение);
		
		Если ЗначениеРасшифровки = Неопределено Тогда
			
			МассивРасшифровок = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровкиИзХранилища.ДанныеРасшифровки, ,);
			
			Для Каждого Элемент Из МассивРасшифровок Цикл
				
				Если Элемент.Поле = ПолеРасшифровки Тогда
					
					ЗначениеРасшифровки = Элемент.Значение;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИмяМакета 			   = ?(ВыделятьНДСУСН, "МакетРасшифровкиНоменклатурыПоДокументам", "МакетРасшифровкиНоменклатурыПоДокументам2009");
		ПутьМакета   = ТекущийМакет + "/" + ПутьМакета;
		ТекущийМакет = ИмяМакета;
		
		ЗначениеРасшифровки = Новый Структура("ИмяПараметра, ЗначениеПараметра", "Номенклатура", ЗначениеРасшифровки);
		
		Результат.Очистить();
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		
		ИдентификаторЗадания = Неопределено;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		
		ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
		ПараметрыОтчета.Вставить("КэшОтчетов" , КэшОтчетов);
		ПараметрыОтчета.Вставить("ОтключитьТаблицы", Ложь);
		ПараметрыОтчета.Вставить("Расшифровка", ЗначениеРасшифровки);
		
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.СформироватьРасшифровку(ПараметрыОтчета, АдресХранилища);
			РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
		Иначе
			РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.СформироватьРасшифровку", 
																				ПараметрыОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
			АдресХранилища       = РезультатВыполнения.АдресХранилища;
			ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;		
		КонецЕсли;
		
		Если РезультатВыполнения.ЗаданиеВыполнено Тогда
			ЗагрузитьПодготовленныеДанныеНаСервере();
		КонецЕсли;
		
	Иначе	
		МассивРасшифровок = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровкиИзХранилища.ДанныеРасшифровки, ,);		
		Для Каждого Элемент Из МассивРасшифровок Цикл
			
			Если СтрНайти(Элемент.Поле, "Регистратор")
				И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Элемент.Значение)) Тогда
				
				ЗначениеРасшифровки = Элемент.Значение;
				Объект = ЗначениеРасшифровки.ПолучитьОбъект();
				
				Если НЕ Метаданные.Документы.Найти(Объект.Метаданные().Имя) = Неопределено Тогда
					
					ИмяФормыВызова = "Документ." + Объект.Метаданные().Имя + ".ФормаОбъекта";
					
				КонецЕсли;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Процедура СохранитьНастройкуМакета(Значение)
	
	Если Отчет.КоллекцияНастроек = Неопределено Тогда
		
		Отчет.КоллекцияНастроек = Новый Структура;
		
	КонецЕсли;
	
	Отчет.КоллекцияНастроек.Вставить(Значение.ИмяМакета, Значение.Настройка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкуМакета(ИмяМакета)
	
	ПараметрыОтчета = Новый Структура("ИмяМакета, КоллекцияНастроек", ИмяМакета, Отчет.КоллекцияНастроек);
	Настройки = Отчеты.АнализСостоянияНалоговогоУчетаПоУСН.ПолучитьНастройкуМакета(ПараметрыОтчета);
	
	Возврат ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	
КонецФункции 

&НаСервере
Процедура УстановитьНачальныеНастройки()
	
	Если Параметры.Свойство("Организация") Тогда
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Отчет.Организация = Параметры.Организация;
		КонецЕсли;
	Иначе	
		Отчет.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	ВидПериода = Перечисления.ДоступныеПериодыОтчета.Квартал;
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если Параметры.Свойство("НачалоПериода") Тогда
		Если ЗначениеЗаполнено(Параметры.НачалоПериода) Тогда
			Отчет.НачалоПериода = Параметры.НачалоПериода;
		КонецЕсли;
	Иначе
		Отчет.НачалоПериода = НачалоКвартала(ТекущаяДата);
	КонецЕсли;
	
	Если Параметры.Свойство("КонецПериода") Тогда
		Если ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
			Отчет.КонецПериода = Параметры.КонецПериода;
		КонецЕсли;
	Иначе
		Отчет.КонецПериода = КонецКвартала(ТекущаяДата);
	КонецЕсли;
	
	Если Параметры.Свойство("РежимРасшифровки") Тогда
		Если ЗначениеЗаполнено(Параметры.РежимРасшифровки) Тогда
			Отчет.РежимРасшифровки = Параметры.РежимРасшифровки;
		КонецЕсли;
	КонецЕсли;
	
	Отчет.КоллекцияНастроек = ?(Отчет.КоллекцияНастроек = Неопределено, Новый Структура, Отчет.КоллекцияНастроек);
	КэшОтчетов              = Новый Структура;
	
	ТекущийМакет = "МакетКарты";
	
	ИмяМакетаКарты = "МакетКарты";
	НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	Если ТипЗнч(НастройкиКлиента) = Тип("НастройкиКлиентскогоПриложения") 
		И НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ИмяМакетаКарты = "МакетКарты82";
	КонецЕсли;
	
	ОбъектОтчет		= РеквизитФормыВЗначение("Отчет");
	РезультатСхемы	= ОбъектОтчет.ПолучитьМакет(ИмяМакетаКарты);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
	ЗавершитьРаботуСОтчетом = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницы()
	
	Главная = ТекущийМакет = "МакетКарты";
	
	Элементы.ГруппаГлавное.Видимость = Главная;
	Элементы.ГруппаРасшифровка.Видимость = НЕ Главная;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИндикатора(ПоказываитьИндикатор)
	
	Элементы.РезультатСхемы.Видимость = НЕ ПоказываитьИндикатор;
	Элементы.ИндикаторВыполнения.Видимость = ПоказываитьИндикатор;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ЗначениеЗаполнено(КэшОтчетовАдресХранилища) Тогда
		КэшОтчетов = ПолучитьИзВременногоХранилища(КэшОтчетовАдресХранилища);
	Иначе
		КэшОтчетов = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Свойство("РезультатСхема") Тогда
			РезультатСхемы = РезультатВыполнения.РезультатСхема;
			РасшифровкиДоступны = Истина;
		Иначе
			Результат = РезультатВыполнения.Результат;
			Если ТипЗнч(КэшОтчетов) = Тип("Структура") Тогда
				КэшОтчетов = РезультатВыполнения.КэшОтчетов;
				КэшОтчетовАдресХранилища = ПоместитьВоВременноеХранилище(КэшОтчетов, Новый УникальныйИдентификатор);
			КонецЕсли;
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатВыполнения.ДанныеРасшифровки, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	Элементы.РезультатСхемы.Видимость = Истина;
	Элементы.ИндикаторВыполнения.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗавершитьРаботуСОтчетом = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры
