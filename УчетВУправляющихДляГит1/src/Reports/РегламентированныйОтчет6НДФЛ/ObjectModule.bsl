#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2017Кв4") Тогда
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/10/2017");
	КонецЕсли;
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "6-НДФЛ");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета", 1151099);
	СтруктураРеквизитовФормы.Вставить("КНД", "1151099");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей", "СоставПоказателей" + Прав(СокрЛП(ИмяФормы), 7));
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1", "П00001");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2", "П00002");
	СтруктураРеквизитовФормы.Вставить("ВысотаСтрокиРаздела1", 9);
	СтруктураРеквизитовФормы.Вставить("ВысотаСтрокиРаздела2", 6);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика", Новый Цвет(192, 220, 192));
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
			
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.02", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
		
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы	      = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
																  
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	СформироватьСтруктуруПоказателей(ИмяФормы,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы,
														ДанныеОтчета,
														СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
							 			 ДанныеОтчета,
							 			 ПараметрыВыгрузки,
							 			 РезультатВыгрузки) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы);
										
	КодировкаФайлаВыгрузки = "windows-1251";									
										
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки);
																
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "6НДФЛ");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
		
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы);
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
		
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы,
								СохраненныеДанныеОтчета = Неопределено,
								ДеревоСтраницОтчета = Неопределено) Экспорт
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
															  СтруктураРеквизитовФормы,
															  СохраненныеДанныеОтчета,
															  ДеревоСтраницОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
															СтруктураРеквизитовФормы,
															СписокСохранения,
															ДеревоСтраницОтчета)
	
	Перем ДанныеМногострочныхРазделов;
	
	// Настройки отчета.
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	НастройкаРаздела1 = ДеревоНастройкиСтраниц.Строки.Найти("Раздел1", "ИмяСтраницы");
	Если НастройкаРаздела1 <> Неопределено Тогда
		НастройкаРаздела1.Представление = "Раздел 1";
	КонецЕсли;
	НастройкаРаздела2 = ДеревоНастройкиСтраниц.Строки.Найти("Раздел2", "ИмяСтраницы");
	Если НастройкаРаздела2 <> Неопределено Тогда
		НастройкаРаздела2.Представление = "Раздел 2";
	КонецЕсли;
	
	ДеревоСтраницОтчета = ДеревоНастройкиСтраниц.Скопировать();
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	
	Для Каждого Показатель Из ДанныеТит Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН", "");
			Для Ном = 1 По 10 Цикл
				ДанныеТит.ИНН = ДанныеТит.ИНН + СокрЛП(ДанныеТит["ИНН1_" + Ном]);
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			ДанныеТит.ИНН = СтрЗаменить(ДанныеТит.ИНН, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП", "");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП = ДанныеТит.КПП + СокрЛП(ДанныеТит["КПП1_" + Ном]);
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
			ДанныеТит.КПП = СтрЗаменить(ДанныеТит.КПП, "-", "");
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			ДанныеТит.Вставить("НалоговыйОрган", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.НалоговыйОрган = ДанныеТит.НалоговыйОрган + СокрЛП(ДанныеТит["НалоговыйОрган" + Ном]);
				ДанныеТит.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки
					+ СтрЗаменить(СокрЛП(ДанныеТит["НомерКорректировки" + Ном]), "-", "");
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(ДанныеТит.НомерКорректировки) Тогда
				ДанныеТит.НомерКорректировки = "0";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = ДанныеТит.ОтчетГод + СокрЛП(ДанныеТит["ОтчетГод" + Ном]);
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период", "");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = ДанныеТит.Период + СокрЛП(ДанныеТит["Период" + Ном]);
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = ДанныеТит.ПоМесту + СокрЛП(ДанныеТит["ПоМесту" + Ном]);
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = ДанныеТит.Прил + СокрЛП(ДанныеТит["Прил" + Ном]);
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Если ДанныеМногострочныхРазделов.Свойство("П0000100010") Тогда
			ТЗ = ДанныеМногострочныхРазделов["П0000100010"];
			ДанныеРаздела = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел1"];
			НомСтр = 1;
			ИмяПервойКолонки = ТЗ.Колонки[0].Имя;
			Пока ДанныеРаздела.Свойство(ИмяПервойКолонки + "_" + Формат(НомСтр, "ЧГ=")) Цикл
				Для каждого ИмяКолонки Из ТЗ.Колонки Цикл
					ТЗ[НомСтр - 1][ИмяКолонки.Имя] = ДанныеРаздела[ИмяКолонки.Имя + "_" + Формат(НомСтр, "ЧГ=")];
				КонецЦикла;
				НомСтр = НомСтр + 1;
			КонецЦикла;
			ДанныеМногострочныхРазделов.Вставить("П00001", ТЗ.Скопировать());
			ДанныеМногострочныхРазделов.Удалить("П0000100010");
		КонецЕсли;
		
		Если ДанныеМногострочныхРазделов.Свойство("П0000200100") Тогда
			ТЗ = ДанныеМногострочныхРазделов["П0000200100"];
			ДанныеРаздела = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел2"];
			НомСтр = 1;
			ИмяПервойКолонки = ТЗ.Колонки[0].Имя;
			Пока ДанныеРаздела.Свойство(ИмяПервойКолонки + "_" + Формат(НомСтр, "ЧГ=")) Цикл
				Для каждого ИмяКолонки Из ТЗ.Колонки Цикл
					ТЗ[НомСтр - 1][ИмяКолонки.Имя] = ДанныеРаздела[ИмяКолонки.Имя + "_" + Формат(НомСтр, "ЧГ=")];
				КонецЦикла;
				НомСтр = НомСтр + 1;
			КонецЦикла;
			ДанныеМногострочныхРазделов.Вставить("П00002", ТЗ.Скопировать());
			ДанныеМногострочныхРазделов.Удалить("П0000200100");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
														   
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",  РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД", СтруктураРеквизитовФормы.КНД);
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч", СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС", СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("ВидДок", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКТМО", СокрЛП(Титульный.ОКТМО));
	ПараметрыВыгрузки.Вставить("ТелОрг", СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг", СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг", СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта", СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП", ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП", ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",
		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.мСохраненныйДок.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв", "Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв", ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв", ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв", ?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв", "Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв", ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв", ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв", СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта", ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта", ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDFL6");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДФЛ6");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
				ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
				СокрЛП(ПараметрыВыгрузки.ИННОрг),
				СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки502");

	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость
			   И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность),
					?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
						 			 ДанныеОтчета,
						 			 ПараметрыВыгрузки,
						 			 РезультатВыгрузки) Экспорт
									 
	СтатусПроверки = Истина;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("124");
	ВозможныеКодыПоМесту.Добавить("125");
	ВозможныеКодыПоМесту.Добавить("126");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("220");
	ВозможныеКодыПоМесту.Добавить("320");
	ВозможныеКодыПоМесту.Добавить("335");
	
	ВозможныеКодыПериода = "21|31|33|34|51|52|53|90";
	
	ВозможныеКодыФормыРеорганизции = СтрРазделить("0,1,2,3,5,6", ",", Ложь);
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "Не задан ИНН налогового агента. Внесите исправление в справочник организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			ОписаниеОшибки = "Задан ИНН налогового агента, не состоящий из 12 цифр. Внесите исправление в справочник организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияИП) Тогда
			ОписаниеОшибки = "Не задана фамилия налогового агента. Укажите фамилию индивидуального предпринимателя в справочнике организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяИП) Тогда
			ОписаниеОшибки = "Не задано имя налогового агента. Укажите имя индивидуального предпринимателя в справочнике организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "Не задан ИНН налогового агента. Внесите исправление в справочник организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			ОписаниеОшибки = "Задан ИНН налогового агента, не состоящий из 10 цифр. Внесите исправление в справочник организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			ОписаниеОшибки = "Не задан КПП налогового агента. Внесите исправление в справочник организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			ОписаниеОшибки = "Задан КПП налогового агента, не состоящий из 9 символов. Внесите исправление в справочник организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "КПП");
			СтатусПроверки = Ложь;
		Иначе
			Символы56КПП = Сред(ПараметрыВыгрузки.КППОрг, 5, 2);
			Если Символы56КПП = "50" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "5-й и 6-й символы КПП налогового агента не должны быть равны ""50"".",
				"Титульный", "КПП");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			ОписаниеОшибки = "Не задано наименование налогового агента. Заполните наименование в справочнике организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КодНалоговогоОргана = СокрЛП(ПараметрыВыгрузки.КодИФНС);
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "Не задан код налогового органа, в который представляется расчет.";
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(КодНалоговогоОргана) <> 4
		  ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "Задан код налогового органа, не состоящий из 4 цифр.";
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКТМО) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код по ОКТМО.", "Титульный", "ОКТМО");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКТМО) <> 11 И СтрДлина(ПараметрыВыгрузки.ОКТМО) <> 8 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан некорректный код по ОКТМО.", "Титульный", "ОКТМО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код места нахождения (учета).", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан некорректный код места нахождения (учета).", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПериодОтч) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код периода представления.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти(ВозможныеКодыПериода, ПараметрыВыгрузки.ПериодОтч) = 0 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан некорректный код периода представления.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2")
		И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2")
		И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя налогоплательщика.",
			"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код формы реорганизации.",
			"Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задано некорректное значение кода формы реорганизации.",
				"Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации.",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации.",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				Иначе
					Символы56КПП = Сред(ПараметрыВыгрузки.КППРеорг, 5, 2);
					Если Символы56КПП = "50" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"5-й и 6-й символы КПП реорганизованной организации не должны быть равны ""50"".",
						"Титульный", "КППРеорганизованнойОрганизации");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	НомСтр  = 1;
	НомСтр_ = Формат(НомСтр, "ЧГ=");
	Раздел1 = ДанныеОтчета.Раздел1;
	Пока Раздел1.Свойство("П000010001001_" + НомСтр_) Цикл
		Если НЕ (Раздел1["П000010002501_" + НомСтр_] <= Раздел1["П000010002001_" + НомСтр_]) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1: в группе " + НомСтр_
			+ " строк 010-050 значение в строке 025 должно быть меньше или равно значению в строке 020.",
			"Раздел1", "П000010002501_" + НомСтр_);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ (Раздел1["П000010004501_" + НомСтр_] <= Раздел1["П000010004001_" + НомСтр_]) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1: в группе " + НомСтр_
			+ " строк 010-050 значение в строке 045 должно быть меньше или равно значению в строке 040.",
			"Раздел1", "П000010004501_" + НомСтр_);
			СтатусПроверки = Ложь;
		КонецЕсли;
		НомСтр  = НомСтр + 1;
		НомСтр_ = Формат(НомСтр, "ЧГ=");
	КонецЦикла;
	
	// Раздел 2.
	НомСтр  = 1;
	НомСтр_ = Формат(НомСтр, "ЧГ=");
	Раздел2 = ДанныеОтчета.Раздел2;
	Пока Раздел2.Свойство("П000020010001_" + НомСтр_) Цикл
		Если ЗначениеЗаполнено(Раздел2["П000020010001_" + НомСтр_]) Тогда
			Если НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, Раздел2["П000020010001_" + НомСтр_]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 2: в группе " + НомСтр_
				+ " строк 100-140 значение в строке 100 не должно выходить за пределы периода с 01.01.1900 по 31.12.2099.",
				"Раздел2", "П000020010001_" + НомСтр_);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Раздел2["П000020011001_" + НомСтр_]) Тогда
			Если НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, Раздел2["П000020011001_" + НомСтр_]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 2: в группе " + НомСтр_
				+ " строк 100-140 значение в строке 110 не должно выходить за пределы периода с 01.01.1900 по 31.12.2099.",
				"Раздел2", "П000020011001_" + НомСтр_);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Раздел2["П000020012001_" + НомСтр_]) Тогда
			Если НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, Раздел2["П000020012001_" + НомСтр_]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 2: в группе " + НомСтр_
				+ " строк 100-140 значение в строке 120 не должно выходить за пределы периода с 01.01.1900 по 31.12.2099.",
				"Раздел2", "П000020012001_" + НомСтр_);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Раздел2["П000020011001_" + НомСтр_])
			И ЗначениеЗаполнено(Раздел2["П000020012001_" + НомСтр_]) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 2: в группе " + НомСтр_
			+ " строк 100-140 значение в строке 120 не должно быть заполнено, если не заполнено значение в строке 110.",
			"Раздел2", "П000020012001_" + НомСтр_);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(Раздел2["П000020011001_" + НомСтр_])
	       И НЕ ЗначениеЗаполнено(Раздел2["П000020012001_" + НомСтр_]) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 2: в группе " + НомСтр_
			+ " строк 100-140 значение в строке 120 должно быть заполнено, если заполнено значение в строке 110.",
			"Раздел2", "П000020012001_" + НомСтр_);
			СтатусПроверки = Ложь;
		КонецЕсли;
		НомСтр = НомСтр + 1;
		НомСтр_ = Формат(НомСтр, "ЧГ=");
	КонецЦикла;
	
	Возврат СтатусПроверки;
											
КонецФункции														

Процедура СообщитьВТС(ИмяФормы, Владелец, Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы, ПровДата)
	
	Возврат ПровДата >= '19000101' И ПровДата <= '20991231';
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеОтчета, ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, СтруктураРеквизитовФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)	
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеОтчета, ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // Учтем оба варианта: кириллицу и латиницу.
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
					ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти")
						И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы, ДанныеОтчета, Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
						ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеОтчета, ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеОтчета, ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы, Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы, ДанныеОтчета, УзелРодитель)
	
	// Раздел 1.
	Данные = ДанныеОтчета.Раздел1;
	УзелРаздел1 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ОбобщПоказ");
	// Немногострочные данные.
	Для каждого Эл Из УзелРаздел1.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(ИмяФормы, Эл, Данные[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	// Многострочные данные.
	УзелСумСтавка = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРаздел1, "СумСтавка");
	НомерСтроки = 1;
	Пока Данные.Свойство("П000010001001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		Если НомерСтроки = 1 Тогда
			ЭкзУзелСумСтавка = УзелСумСтавка;
		Иначе
			ЭкзУзелСумСтавка = СкопироватьУзел(ИмяФормы, УзелРаздел1, УзелСумСтавка, УзелРаздел1.Строки.Количество() - 1);
		КонецЕсли;
		ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеОтчета, Данные, ЭкзУзелСумСтавка, НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Раздел 2.
	УзелРаздел2 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ДохНал");
	Данные = ДанныеОтчета.Раздел2;
	// Многострочные данные.
	УзелСумДата = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРаздел2, "СумДата");
	НомерСтроки = 1;
	НомерСтрокиСтр = "1";
	Пока Данные.Свойство("П000020010001_" + НомерСтрокиСтр) Цикл
		Если НЕ (ЗначениеЗаполнено(Данные["П000020010001_" + НомерСтрокиСтр])
			ИЛИ ЗначениеЗаполнено(Данные["П000020011001_" + НомерСтрокиСтр])
			ИЛИ ЗначениеЗаполнено(Данные["П000020012001_" + НомерСтрокиСтр])
			ИЛИ ЗначениеЗаполнено(Данные["П000020013001_" + НомерСтрокиСтр])
			ИЛИ ЗначениеЗаполнено(Данные["П000020014001_" + НомерСтрокиСтр])) Тогда
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
			Продолжить;
		КонецЕсли;
		ЭкзУзелСумДата = СкопироватьУзел(ИмяФормы, УзелРаздел2, УзелСумДата, УзелРаздел2.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзУзелСумДата.Строки Цикл
			ТекЗнач = Данные[Эл.Ключ + "_" + НомерСтрокиСтр];
			Если НЕ ЗначениеЗаполнено(ТекЗнач) И ТипЗнч(ТекЗнач) = Тип("Дата") Тогда
				ВывестиПоказательВXML(ИмяФормы, Эл, "00.00.0000");
			Иначе
				ВывестиПоказательВXML(ИмяФормы, Эл, ТекЗнач);
			КонецЕсли;
		КонецЦикла;
		НомерСтроки = НомерСтроки + 1;
		НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, СтруктураРеквизитовФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, СтруктураРеквизитовФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		  ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		    И УзелПуст(ИмяФормы, СтруктураРеквизитовФормы, Узел) Тогда // Учтем оба варианта: кириллицу и латиницу.
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			   ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // Учтем оба варианта: кириллицу и латиницу.
		И УзелПуст(ИмяФормы, СтруктураРеквизитовФормы, Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0
		ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // Учтем оба варианта: кириллицу и латиницу.
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)),
				СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция УзелПуст(ИмяФормы, СтруктураРеквизитовФормы, Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
		НЕ ЗначениеЗаполнено(Узел.Значение)
		ИЛИ Узел.Значение = Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала, "ДФ=дд.ММ.гггг"));
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, СтруктураРеквизитовФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();

	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	
	ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
					
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
		ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
		ПечатныйБланкФормируетсяВФорматеPDF = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
		ВидПечати = "";
	КонецЕсли;
				
	Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
		
		ПоказателиОтчета = ПараметрыПечати.СохраненныйОтчет.ДанныеОтчета.Получить().ПоказателиОтчета;
		
		ДанныеМногострочныхРазделов = ПараметрыПечати.СохраненныйОтчет.ДанныеОтчета.Получить().ДанныеМногострочныхРазделов;
		
		ДанныеРазделов = Новый Структура;
		ДанныеРазделов.Вставить("Титульный", ПоказателиОтчета.ПолеТабличногоДокументаТитульный);
		ДанныеРазделов.Вставить("Раздел1",   ПоказателиОтчета.ПолеТабличногоДокументаРаздел1);
		ДанныеРазделов.Вставить("Раздел2",   ПоказателиОтчета.ПолеТабличногоДокументаРаздел2);
		ДанныеРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 
			ДанныеМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы1]);
		ДанныеРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 
			ДанныеМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы2]);	
			
	КонецЕсли;	
			
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, ДанныеРазделов.Титульный);
	
	ВыведеныРазделы12 = Ложь;
	
	Для Каждого СтраницаОтчета Из ДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтраницаОтчета.ВыводНаПечать = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтраницаОтчета.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтраницаОтчета.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтраницаОтчета.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтраницаОтчета.ИмяОбластиТабличногоПоля);
		Структурапараметров.Вставить("ВидПечати",		   ВидПечати);
									
		Если СтраницаОтчета.ИмяСтраницы = "Титульный" Тогда
			
			ВывестиНаПечатьЛист(ИмяФормы,
								СтруктураПараметров,
								ОбщиеРеквизитыРазделов,
								СтруктураРеквизитовФормы,
								ДанныеРазделов);
			
		Иначе
			
			Если НЕ ВыведеныРазделы12 Тогда
				
				ВывестиНаПечатьРазделы12(ИмяФормы,
								   		 СтруктураПараметров,
								       	 ОбщиеРеквизитыРазделов,
								   		 СтруктураРеквизитовФормы,
								   		 ДанныеРазделов);
				
				ВыведеныРазделы12 = Истина;
				
			КонецЕсли;
			
		КонецЕсли;					
			
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(СтруктураРеквизитовФормы, ,
												СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
												
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
												
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
						
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		    		
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
		
	КонецЦикла;
		
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = СтруктураРеквизитовФормы.НаименованиеОтчета
							+ НСтр("ru=' за '")
							+ ПредставлениеПериода(
								НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
							 	КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),
							 	"ФП = Истина")
							+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка",    АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка", ИмяФайлаПечатногоБланка);
	
	Возврат ПечатныйБланк;
	
КонецФункции

Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, СтруктураДанныхТитульный)
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	СтрИНН = "";
	
	Если СтруктураДанныхТитульный.Свойство("ИНН", СтрИНН) Тогда
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			
			СтрИНН = СтрИНН + "--";
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрКПП = "";
	
	Если СтруктураДанныхТитульный.Свойство("КПП", СтрКПП) Тогда
						
		Для Ном = 1 По СтрДлина(СтрКПП) Цикл
			
			МассивКПП[Ном - 1] = Сред(СтрКПП, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаПодписи = "";
	
	Если СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписи) Тогда	
		
		Если ТипЗнч(ДатаПодписи) = Тип("Строка") Тогда 
			
			СтрДатаПодписи = Лев(СтрЗаменить(ДатаПодписи, ".", ""), 8);
			
		ИначеЕсли ТипЗнч(ДатаПодписи) = Тип("Дата") Тогда 
			
			Если ЗначениеЗаполнено(ДатаПодписи) Тогда 
				
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
				
			Иначе
				
				СтрДатаПодписи = "        ";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

Процедура ВывестиНаПечатьЛист(ИмяФормы,
							  СтруктураПараметров,
							  ОбщиеРеквизитыРазделов,
							  СтруктураРеквизитовФормы,
							  ДанныеРазделов,
							  ТабличныйДокумент = Неопределено)	
	
	ПрефиксИменМакетов = "ПечатныйБланк" + Прав(СокрЛП(ИмяФормы), 7) + "_";
			
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   ПрефиксИменМакетов + "Раздел12");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   ПрефиксИменМакетов + "Раздел12");
	
	МЧБРаздела = СоответствиеРазделовМакетам[СтруктураПараметров.ИмяСтраницы];
	
	МакетПечатнойФормы = ЭтотОбъект.ПолучитьМакет(МЧБРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу  = 5;
	МакетПечатнойФормы.ПолеСлева  = 5;
			
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   МакетПечатнойФормы,
						   ОбщиеРеквизитыРазделов,
						   ДанныеРазделов,
						   ТабличныйДокумент);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
			
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
														  СтруктураПараметров,
														  ТабличныйДокумент,
														  СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры
													  
Процедура ЗаполнитьПечатнуюФорму(ИмяФормы,
								 ПараметрыПечати,
								 МакетПечатнойФормы,
								 ОбщиеРеквизитыРазделов,
								 ДанныеРазделов,
								 ТабличныйДокумент)	
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	Если ТабличныйДокумент = Неопределено Тогда
		
		МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ПараметрыПечати.ИмяСтраницы);
		
		ПоказателиОтчета = ДанныеРазделов[ПараметрыПечати.ИмяСтраницы];
		
	Иначе
		
		МакетФормыОтчета = ТабличныйДокумент;
		
		ПоказателиОтчета = ТабличныйДокумент.Области;
		
	КонецЕсли;	
		
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		
		Если ТипЗнч(Показатель) = Тип("ОбластьЯчеекТабличногоДокумента")
		   И (НЕ Показатель.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   ИЛИ НЕ Показатель.СодержитЗначение) Тогда
		   
		   Продолжить;
		   
		КонецЕсли;   
				
		НовСтр = Показатели.Добавить();
		
		НовСтр.Имя = ?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), Показатель.Ключ, Показатель.Имя);
		НовСтр.Значение = Показатель.Значение;
		НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета);
		
	КонецЦикла;
		
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4)
							   + Сред(ДатаПодписиСтр, 3, 2)
							   + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4)
										 + Сред(ДатаПодписиСтр, 3, 2)
										 + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка значений на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		НайденноеЗначение = Показатели.Найти("НомерКорректировки", "Имя");
		Если НайденноеЗначение <> Неопределено Тогда
			Если НайденноеЗначение.Значение = 0 Тогда
				НомКоррСтрока = "000";
			Иначе
				НомКоррСтрока = Формат(НайденноеЗначение.Значение, "ЧЦ=3;ЧВН=");
			КонецЕсли;
			Для Ном = 1 По 3 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "НомерКорректировки" + Ном;
				НовСтр.Значение = Сред(НомКоррСтрока, Ном, 1);
				НовСтр.ЗначениеМЧБ = Сред(НомКоррСтрока, Ном, 1);
			КонецЦикла;
			Показатели.Удалить(НайденноеЗначение);
		КонецЕсли;
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Особая обработка ИНН.
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "ОКТМО") > 0 Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
				СокрЛП(Показатель.Значение), 11, "-", 1);
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень, ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если (РезультатПоиска.ЗначениеМЧБ = "0" ИЛИ РезультатПоиска.ЗначениеМЧБ = "0,00")
								ИЛИ СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							// Разделение областей показателя на 2 части.
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
									ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (Целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область,
										?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть),
										ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область, СтрДробнаяЧасть,
										ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ, , "0");
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, но считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
								ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка")
								ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
				КонецЕсли;
				
			Иначе
				ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета)
	
	ФорматОбласти = "";
			
	Область = МакетФормыОтчета.Области.Найти(?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), 
		Показатель.Ключ, Показатель.Имя));
	
	Если НЕ Область = Неопределено Тогда
		
		ФорматОбласти = Область.Формат;
		
	КонецЕсли;
			
	ТипЗначения = ТипЗнч(Показатель.Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
					
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ИмяФормы, ФорматОбласти);
		
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		
		Результат = Формат(Показатель.Значение, СобратьСтрокуФормата(ИмяФормы, СоотвСтрокаФормата));
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Результат = СокрЛП(Показатель.Значение);
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
						
		Результат = Формат(Показатель.Значение, ?(ПустаяСтрока(ФорматОбласти), "ДФ=ddMMyyyy", ФорматОбласти));
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = "--.--.----";
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		
		Результат = Формат(Показатель.Значение, ФорматОбласти);
		
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция АдресЗначенияОбласти(ИмяФормы, Область)
	
	Имя = Область.Имя;
	
	КореньИмениОбласти = Неопределено;
	
	СтрИндексЗнакоместа = "";
	
	ИндексЗнакоместа = 0;
	
	ДлинаИмени = СтрДлина(Имя);
	
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
		
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Процедура ПрисвоитьЗначениеОбласти(ИмяФормы,
								   Область,
								   Знач Значение,
								   ИндексЗнакоместа = 0,
								   ДополнятьСправа_ = Истина,
								   СимволДополнения = Неопределено)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Если ДополнятьСправа_ Тогда
				Если СимволДополнения = Неопределено Тогда
					Значение = "-";
				Иначе
					Значение = СимволДополнения;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьСтрокуФормата(ИмяФормы, Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ИмяФормы, ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

Процедура ВывестиНаПечатьРазделы12(ИмяФормы,
								   СтруктураПараметров,
								   ОбщиеРеквизитыРазделов,
								   СтруктураРеквизитовФормы,
								   ДанныеРазделов)
	
	// Определение необходимого количества листов.
	//
	КолЛистовПоКолСтрокРазд1 = ДанныеРазделов[СтруктураРеквизитовФормы.мИдГруппы1].Количество();
	
	ДробКол = ДанныеРазделов[СтруктураРеквизитовФормы.мИдГруппы2].Количество() / 5;
	ЦелКол = Цел(ДанныеРазделов[СтруктураРеквизитовФормы.мИдГруппы2].Количество() / 5);
	КолЛистовПоКолСтрокРазд2 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
	
	КолЛистовРазд12 = Макс(КолЛистовПоКолСтрокРазд1, КолЛистовПоКолСтрокРазд2);
	
	// Формирование данных для заполнения листов.
	//
	МассивДанныхРаздел1 = Новый Массив;
	Для НомЛиста = 1 По КолЛистовРазд12 Цикл
		ПриращениеКНомеру = (НомЛиста - 1) * 1;
		ТЗ_Раздел1 = ДанныеРазделов[СтруктураРеквизитовФормы.мИдГруппы1].Скопировать();
		ТЗ_Раздел1.Очистить();
		Для НомСтрВЭлементеМассива = 1 По 1 Цикл
			Постфикс = Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
			
			ИмяП000010001001 = "П000010001001_" + Постфикс;
			ИмяП000010002001 = "П000010002001_" + Постфикс;
			ИмяП000010002501 = "П000010002501_" + Постфикс;
			ИмяП000010003001 = "П000010003001_" + Постфикс;
			ИмяП000010004001 = "П000010004001_" + Постфикс;
			ИмяП000010004501 = "П000010004501_" + Постфикс;
			ИмяП000010005001 = "П000010005001_" + Постфикс;
			
			НовСтрокаТЗ = ТЗ_Раздел1.Добавить();
			
			НовСтрокаТЗ["П000010001001"] = 0;
			НовСтрокаТЗ["П000010002001"] = 0;
			НовСтрокаТЗ["П000010002501"] = 0;
			НовСтрокаТЗ["П000010003001"] = 0;
			НовСтрокаТЗ["П000010004001"] = 0;
			НовСтрокаТЗ["П000010004501"] = 0;
			НовСтрокаТЗ["П000010005001"] = 0;
			
			Если ДанныеРазделов.Раздел1.Свойство(ИмяП000010001001) Тогда
				НовСтрокаТЗ["П000010001001"] = ДанныеРазделов.Раздел1[ИмяП000010001001];
				НовСтрокаТЗ["П000010002001"] = ДанныеРазделов.Раздел1[ИмяП000010002001];
				НовСтрокаТЗ["П000010002501"] = ДанныеРазделов.Раздел1[ИмяП000010002501];
				НовСтрокаТЗ["П000010003001"] = ДанныеРазделов.Раздел1[ИмяП000010003001];
				НовСтрокаТЗ["П000010004001"] = ДанныеРазделов.Раздел1[ИмяП000010004001];
				НовСтрокаТЗ["П000010004501"] = ДанныеРазделов.Раздел1[ИмяП000010004501];
				НовСтрокаТЗ["П000010005001"] = ДанныеРазделов.Раздел1[ИмяП000010005001];
			КонецЕсли;
		КонецЦикла;
		МассивДанныхРаздел1.Добавить(ТЗ_Раздел1);
	КонецЦикла;
	
	МассивДанныхРаздел2 = Новый Массив;
	Для НомЛиста = 1 По КолЛистовРазд12 Цикл
		ПриращениеКНомеру = (НомЛиста - 1) * 5;
		ТЗ_Раздел2 = ДанныеРазделов[СтруктураРеквизитовФормы.мИдГруппы2].Скопировать();
		ТЗ_Раздел2.Очистить();
		Для НомСтрВЭлементеМассива = 1 По 5 Цикл
			Постфикс = Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
			
			ИмяП000020010001 = "П000020010001_" + Постфикс;
			ИмяП000020011001 = "П000020011001_" + Постфикс;
			ИмяП000020012001 = "П000020012001_" + Постфикс;
			ИмяП000020013001 = "П000020013001_" + Постфикс;
			ИмяП000020014001 = "П000020014001_" + Постфикс;
			
			НовСтрокаТЗ = ТЗ_Раздел2.Добавить();
			
			НовСтрокаТЗ["П000020010001"] = '00010101';
			НовСтрокаТЗ["П000020011001"] = '00010101';
			НовСтрокаТЗ["П000020012001"] = '00010101';
			НовСтрокаТЗ["П000020013001"] = 0;
			НовСтрокаТЗ["П000020014001"] = 0;
			
			Если ДанныеРазделов.Раздел2.Свойство(ИмяП000020010001) Тогда
				НовСтрокаТЗ["П000020010001"] = ДанныеРазделов.Раздел2[ИмяП000020010001];
				НовСтрокаТЗ["П000020011001"] = ДанныеРазделов.Раздел2[ИмяП000020011001];
				НовСтрокаТЗ["П000020012001"] = ДанныеРазделов.Раздел2[ИмяП000020012001];
				НовСтрокаТЗ["П000020013001"] = ДанныеРазделов.Раздел2[ИмяП000020013001];
				НовСтрокаТЗ["П000020014001"] = ДанныеРазделов.Раздел2[ИмяП000020014001];
			КонецЕсли;
		КонецЦикла;
		МассивДанныхРаздел2.Добавить(ТЗ_Раздел2);
	КонецЦикла;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Вывод листов.
	//
	Для НомЛиста = 1 По КолЛистовРазд12 Цикл
		
		ТабличныйДокумент.Очистить();
		
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы,
			СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + "Раздел1"));
			
		ВывестиРазделВТабличныйДокумент(ИмяФормы, СтруктураРеквизитовФормы.мИдГруппы1,
			МассивДанныхРаздел1[НомЛиста - 1], ТабличныйДокумент, СтруктураРеквизитовФормы);
	
		Если НомЛиста = 1 Тогда
			ТабличныйДокумент.Область("П000010006001").Значение = ДанныеРазделов.Раздел1["П000010006001"];
			ТабличныйДокумент.Область("П000010007001").Значение = ДанныеРазделов.Раздел1["П000010007001"];
			ТабличныйДокумент.Область("П000010008001").Значение = ДанныеРазделов.Раздел1["П000010008001"];
			ТабличныйДокумент.Область("П000010009001").Значение = ДанныеРазделов.Раздел1["П000010009001"];
		Иначе
			ТабличныйДокумент.Область("П000010007001").Формат
				= СтрЗаменить(ТабличныйДокумент.Область("П000010007001").Формат, "ЧН=0", "ЧН=-");
			ТабличныйДокумент.Область("П000010008001").Формат
				= СтрЗаменить(ТабличныйДокумент.Область("П000010008001").Формат, "ЧН=0", "ЧН=-");
			ТабличныйДокумент.Область("П000010009001").Формат
				= СтрЗаменить(ТабличныйДокумент.Область("П000010009001").Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы,
			СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + "Раздел2"));
			
		ВывестиРазделВТабличныйДокумент(ИмяФормы, СтруктураРеквизитовФормы.мИдГруппы2,
			МассивДанныхРаздел2[НомЛиста - 1], ТабличныйДокумент, СтруктураРеквизитовФормы);
		
		СтруктураПараметров.Вставить("НаименованиеЛиста", "Разделы 1, 2");
		
		ВывестиНаПечатьЛист(ИмяФормы,
							СтруктураПараметров,
							ОбщиеРеквизитыРазделов,
							СтруктураРеквизитовФормы,
							ДанныеРазделов,
							ТабличныйДокумент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиРазделВТабличныйДокумент(ИмяФормы,
										  ИмяГруппы,
										  СтруктураГруппы,
										  ТабличныйДокумент,
										  СтруктураРеквизитовФормы) Экспорт
	
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1 Тогда
		
		ВысотаСтроки = СтруктураРеквизитовФормы.ВысотаСтрокиРаздела1;
		
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		
		ВысотаСтроки = СтруктураРеквизитовФормы.ВысотаСтрокиРаздела2;	
		
	КонецЕсли;	
	
	Если ТекущееКоличествоСтрокГруппы > 1 Тогда
		
		ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ИмяФормы, ТабличныйДокумент, 1,
			ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
			
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
									
			ОбластьЯчейкиТаблицы = ТабличныйДокумент.Области[КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы];
			
			ЗначениеЯчейки = СтрокаТаблицы[КолонкаТаблицы.Имя];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				
			Иначе
				
				ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ИмяФормы,
														 ТабличныйДокумент,
														 ИсходноеКоличествоСтрокГруппы,
														 ТекущееКоличествоСтрокГруппы,
														 ИмяГруппы,
														 СтруктураГруппы,
														 ВысотаСтроки)
	
	ОбластьДопСтроки = ТабличныйДокумент.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура;
	
	Для Каждого Область Из ТабличныйДокумент.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТабличныйДокумент.Области["МногострочнаяЧасть"].Верх;
	
	МногострочнаяЧастьНиз = ТабличныйДокумент.Области["МногострочнаяЧасть"].Низ;
	
	ТабличныйДокумент.ВставитьОбласть(ОбластьДопСтроки.Область(),
									  ТабличныйДокумент.Область(МногострочнаяЧастьНиз + 1, ,
									  	МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1)
											* ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				ОбластьТаблДок = ТабличныйДокумент.Область(КоординатыОбластей[Область.Имя]
					+ (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки,
						Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы
							- НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
								
					ОбластьТаблДок.Очистить();
					
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_"))
					+ Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабличныйДокумент.Область(ТабличныйДокумент.Области["МногострочнаяЧасть"].Верх, ,
		ТабличныйДокумент.Области["МногострочнаяЧасть"].Низ).Имя = "";
	
	ТабличныйДокумент.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли