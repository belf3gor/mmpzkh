&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).СформироватьСтруктуруРеквизитовФормы(
		Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
					
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел1 = Новый Структура;
	СтруктураДанныхРаздел2 = Новый Структура;
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 7);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 5);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);

	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
			
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу",   ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",     ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("ПризнМногострочности",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",      ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = СтруктураРеквизитовФормы.ВысотаСтрокиРаздела1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = СтруктураРеквизитовФормы.ВысотаСтрокиРаздела2;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "Раздел1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		ТекТабличноеПоле = "Раздел2";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы2;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")
			И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоказателя = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ИзмененияПроизошли = Истина;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле = ЭтаФорма[ИмяТекТабличногоПоля];
	
	Попытка
		ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		Если Лев(ИмяПоказателя, 1) = "_" Тогда
			Возврат ИзмененияПроизошли;
		КонецЕсли;
	Исключение
		ИзмененияПроизошли = Ложь;
	КонецПопытки;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, КодНО, ТелОрганизации, ФИО, ОКТМО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = ИНН;
		Форма.ТабличныйДокумент.Области.КПП.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			Если ЗначениеЗаполнено(СведенияОбОрганизации.НаимЮЛСокр) Тогда
				НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
			Иначе
				НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			КонецЕсли;
		КонецЕсли;
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НаименованиеОрганизации;
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		Форма.ТабличныйДокумент.Области.ОКТМО.Значение = СокрЛП(СведенияОбОрганизации.ОКТМО);
		
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда // представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
			СтруктураРеквизитовФормы.Организация) Тогда // подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
				СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе // есть представитель, подписант - он
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя  = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ДополнительныеПараметры = Новый Структура("НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ВывестиРазделВТабличныйДокумент(ЭтаФорма.ИмяФормы,
		ИмяГруппы, ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")),
		ТабличныйДокумент, СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// Реальное кол-во строк (колво заполненных строк).
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
	
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
	
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
	
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
	
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=")).Имя = Зап.Область;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
	  <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
	 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	ДанныеРазделов = Новый Структура;
	ДанныеРазделов.Вставить("Титульный", СтруктураДанныхТитульный);
	ДанныеРазделов.Вставить("Раздел1",   СтруктураДанныхРаздел1);
	ДанныеРазделов.Вставить("Раздел2",   СтруктураДанныхРаздел2);
	ДанныеРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 
		ДанныеФормыВЗначение(ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1], Тип("ТаблицаЗначений")));
	ДанныеРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 
		ДанныеФормыВЗначение(ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2], Тип("ТаблицаЗначений")));
		
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыбраннаяФорма", 		   	 СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыПечати.Вставить("ДанныеРазделов", 		   	 ДанныеРазделов);
	ПараметрыПечати.Вставить("ВидПечати", 			   	 ВидПечати);
	ПараметрыПечати.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	ПараметрыПечати.Вставить("ДеревоВыбранныхСтраниц", 	 ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц,
													   	 Тип("ДеревоЗначений")));
													   	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ПечатныйБланк(ПараметрыПечати);

	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(
			ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		МассивТаблЗнач = Новый Массив;
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	Если НЕ СписокСохранения.Свойство("ОкружениеСохранения") Тогда
		ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	КонецЕсли;
	
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки
		= ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	// Добавление итого по строкам 130 и 140 раздела 2 (справочно).
	Если НЕ СтруктураДанныхРаздел2.Свойство("П000020013002") Тогда
		СтруктураДанныхРаздел2.Вставить("П000020013002", 0);
		СтруктураДанныхРаздел2.Вставить("П000020014002", 0);
		РасчетНаСервере("Раздел2");
	КонецЕсли;
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанныхТитульный"] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ОтчетСкопированОрганизацияИзменилась = Ложь;
	ОтчетСкопированПериодИзменился = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НачальныеОперацииСМногострочнымиБлоками();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
				Если СтруктураРеквизитовФормы.Организация
					= РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация) Тогда
					ТабличныйДокумент.Области.ПоМесту.Значение = ?(ОрганизацияКрупнейшийНалогоплательщик(), "213", "214");
				Иначе
					ТабличныйДокумент.Области.ПоМесту.Значение = "220";
				КонецЕсли;
			Иначе
				ТабличныйДокумент.Области.ПоМесту.Значение = "120";
			КонецЕсли;
			
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				<> СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияИзменилась = Истина;
			КонецЕсли;
			Если КонецМесяца(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)
				<> КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
				ОтчетСкопированПериодИзменился = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			Если ОтчетСкопированПериодИзменился ИЛИ ОтчетСкопированОрганизацияИзменилась Тогда
				ПоказатьПериод();
			КонецЕсли;
			Если ОтчетСкопированОрганизацияИзменилась Тогда
				
				Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
					Если СтруктураРеквизитовФормы.Организация
						= РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация) Тогда
						ТабличныйДокумент.Области.ПоМесту.Значение = "214";
					Иначе
						ТабличныйДокумент.Области.ПоМесту.Значение = "220";
					КонецЕсли;
				Иначе
					ТабличныйДокумент.Области.ПоМесту.Значение = "120";
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ПоказатьПериод();
		КонецЕсли;
		
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейкахНаСервере();
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ОтчетЗаполненУспешно = Ложь;
		ЗаполнитьАвтоНаСервере(ОтчетЗаполненУспешно);
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияКрупнейшийНалогоплательщик()
	
	Возврат СтруктураРеквизитовФормы.Организация.Метаданные().Реквизиты.Найти(
	"КрупнейшийНалогоплательщик") <> Неопределено И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	СтруктураРеквизитовФормы.Организация, "КрупнейшийНалогоплательщик")) = Тип("Булево")
	И СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик;
	
КонецФункции

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛСокр,НаимЮЛПол";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НаимЮЛСокр) Тогда
			Возврат СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
		Иначе
			Возврат СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ЗаполненКодФормыРеорг = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	
	КодОтчетногоПериода = 0;
	Если МесяцОкончания = 3 Тогда
		КодОтчетногоПериода = ?(ЗаполненКодФормыРеорг, 51, 21);
	ИначеЕсли МесяцОкончания = 6 Тогда
		КодОтчетногоПериода = ?(ЗаполненКодФормыРеорг, 52, 31);
	ИначеЕсли МесяцОкончания = 9 Тогда
		КодОтчетногоПериода = ?(ЗаполненКодФормыРеорг, 53, 33);
	ИначеЕсли МесяцОкончания = 12 Тогда
		КодОтчетногоПериода = ?(ЗаполненКодФормыРеорг, 90, 34);
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
		Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
		мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);

	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2017Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	// Титульный лист.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "ПоМесту" ИЛИ КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
			
	Возврат ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
		
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
			
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										  		  мДанныеОтчета,
										  		  СтруктураРеквизитовФормы);	
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
			
	Возврат ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												 		 мДанныеОтчета,
												 		 СтруктураРеквизитовФормы);	
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
			
	Возврат ОбъектОтчета.ПроверитьВозможностьВыгрузки(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												 	  мДанныеОтчета,
													  ПараметрыВыгрузки,
													  ЭтаФорма);
			
КонецФункции

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
			
	Возврат ОбъектОтчета.СохраненныеДанныеОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												 СтруктураРеквизитовФормы,
												 СохраненныеДанныеОтчета,
												 ДанныеФормыВЗначение(мДеревоСтраницОтчета,
												 	Тип("ДеревоЗначений")));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
			
	ОбъектОтчета.ЗаполнитьДанными(СтруктураРеквизитовФормы.мВыбраннаяФорма,
								  мДанныеОтчета,
								  ПараметрыВыгрузки,
								  ДеревоВыгрузки,
								  ЭтаФорма,
								  СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
		
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ЭтаФорма.ТаблицаСообщений;
	                   	
	РезультатВыгрузки = ОбъектОтчета(ЭтаФорма.ИмяФормы).УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	Если РезультатВыгрузки.РеглОтчетВыгружен Тогда
	
		ФайлВыгрузки = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ФайлВыгрузки.Записать(ИмяВременногоФайла);
	
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, РезультатВыгрузки.КодировкаФайлаВыгрузки);
	
		ТекстВыгрузки = ЧтениеТекста.Прочитать();
	
		ЧтениеТекста.Закрыть();
		ЧтениеТекста = Неопределено;
	
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;	
		
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(
			Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многострочные разделы.
	//
	Если НаимРаздела = "Раздел1"
		ИЛИ НаимРаздела = "Раздел2" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многострочные разделы.
	//
	Если ИмяТекРаздела = "Раздел1"
		ИЛИ ИмяТекРаздела = "Раздел2" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
				
		ОбъектОтчета(ЭтаФорма.ИмяФормы).ВывестиРазделВТабличныйДокумент(ЭтаФорма.ИмяФормы,
			ИмяГруппы, ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")),
			ТабличныйДокумент, СтруктураРеквизитовФормы);
		
		Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппыДопСтрок = КЗ.Ключ;
			Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
				Если Обл <> Неопределено Тогда 
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг = Форма.ТабличныйДокумент.Области.НаимОрг;
		
		ОблКодФормыРеорг = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОблКодИННРеорг   = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(Форма.ТабличныйДокумент.Области.ПоМесту.Значение);
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			
			ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
			
			Если ЗначениеЗаполнено(ЗначКодФормыРеорг) И ЗначКодФормыРеорг <> "0" Тогда
				
				Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
					Форма.ТабличныйДокумент.Области.НаимОрг.Значение
					= Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				КонецЕсли;
				
				РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение
				= Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			КонецЕсли;
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		ЗаполнитьПериодОтчета(ЭтаФорма);
	Иначе
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		НСтрСтр = Формат(НСтр, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		ИтогоСтр130 = 0;
		ИтогоСтр140 = 0;
		
		Ном = 1;
		Постфикс = "_1";
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			ОблСтр130 = Форма.ТабличныйДокумент.Области.Найти("П000020013001" + Постфикс);
			ОблСтр140 = Форма.ТабличныйДокумент.Области.Найти("П000020014001" + Постфикс);
			
			Пока ОблСтр130 <> Неопределено Цикл
				
				ИтогоСтр130 = ИтогоСтр130 + ОблСтр130.Значение;
				ИтогоСтр140 = ИтогоСтр140 + ОблСтр140.Значение;
				
				Ном = Ном + 1;
				Постфикс = "_" + Формат(Ном, "ЧГ=");
				
				ОблСтр130 = Форма.ТабличныйДокумент.Области.Найти("П000020013001" + Постфикс);
				ОблСтр140 = Форма.ТабличныйДокумент.Области.Найти("П000020014001" + Постфикс);
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000020013002.Значение = ИтогоСтр130;
			Форма.ТабличныйДокумент.Области.П000020014002.Значение = ИтогоСтр140;
			
		Иначе
			
			ЕстьПокСтр130 = Истина;
			
			ЗначСтр130 = Форма.СтруктураДанныхРаздел2["П000020013001" + Постфикс];
			ЗначСтр140 = Форма.СтруктураДанныхРаздел2["П000020014001" + Постфикс];
			
			Пока ЕстьПокСтр130 Цикл
				
				ИтогоСтр130 = ИтогоСтр130 + ЗначСтр130;
				ИтогоСтр140 = ИтогоСтр140 + ЗначСтр140;
				
				Ном = Ном + 1;
				Постфикс = "_" + Формат(Ном, "ЧГ=");
				
				ЕстьПокСтр130 = Форма.СтруктураДанныхРаздел2.Свойство("П000020013001" + Постфикс);
				
				Если ЕстьПокСтр130 Тогда
					
					ЗначСтр130 = Форма.СтруктураДанныхРаздел2["П000020013001" + Постфикс];
					ЗначСтр140 = Форма.СтруктураДанныхРаздел2["П000020014001" + Постфикс];
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Форма.СтруктураДанныхРаздел2.Вставить("П000020013002", ИтогоСтр130);
		Форма.СтруктураДанныхРаздел2.Вставить("П000020014002", ИтогоСтр140);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	
	Расчет(ЭтаФорма, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = КоличествоСтрокВМногострочнойЧасти(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// Номера строк исходной области.
	Если ТекущаяСтраница = "Раздел1" Тогда
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх - 1;
	Иначе
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	КонецЕсли;
	НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк.
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	
	Обл = ТекТабличноеПоле.Область("УдалитьСтроку" + ИмяПервойЯчейки + "_" + КолСтрокСтр1);
	Если Обл <> Неопределено Тогда
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЕсли;
	Если КолСтрокСтр1 = "2" Тогда
		Обл = ТекТабличноеПоле.Область("УдалитьСтроку" + ИмяПервойЯчейки + "_1");
		Если Обл <> Неопределено Тогда
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
		КонецЕсли;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;
	
	Если ИмяТекущейСтраницы = "Раздел1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел2" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоСтрокВМногострочнойЧасти(Форма, ИмяПоказателя)
	
	ИмяКолонки = Лев(ИмяПоказателя, 13);
	
	Для каждого ЭлемСтрукт Из Форма.мСтруктураИменаКолонокРазделов Цикл
		Для каждого Элем Из ЭлемСтрукт.Значение Цикл
			Если ИмяКолонки = Элем.Значение Тогда
				Возврат Форма[ЭлемСтрукт.Ключ].Количество();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки= ИмяПервойЯчейки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=");
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		Если ТекущаяСтраница = "Раздел1" Тогда
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх - 1;
		Иначе
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		КонецЕсли;
		НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				НСтрСтр  = Формат(НСтр, "ЧГ=");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=");
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧГ=");
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
				
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + Формат(НомТекущейСтроки, "ЧГ=");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Область("УдалитьСтроку" + ИмяПервойЯчейки + "_1");
		Если Обл <> Неопределено Тогда
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ОКТМО = РеквизитЭлементаСправочника(РезультатВыбора.Ссылка);
		Если ОКТМО <> Неопределено Тогда
			ТабличныйДокумент.Области["ОКТМО"].Значение = ОКТМО;
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовФормы.ИП Тогда
			ТабличныйДокумент.Области["ПоМесту"].Значение = КодПоМестуДляЮрЛицаПослеВыбораКодаИФНС(РезультатВыбора.Ссылка);
			УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		КонецЕсли;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КодПоМестуДляЮрЛицаПослеВыбораКодаИФНС(СсылкаНаРегистрациюВНО)
	
	КодПоМесту = "";
	
	Если СтруктураРеквизитовФормы.Организация
		= РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация) Тогда
		
		КодПоМесту = ?(ОрганизацияКрупнейшийНалогоплательщик(), "213", "214");
		
		РегистрацияВНалоговомОрганеВладелец = СсылкаНаРегистрациюВНО.Владелец;
		
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОрганеВладелец) Тогда
			
			РегистрацияВНалоговомОрганеВладелецЭтоСправочникСсылка
			= Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистрацияВНалоговомОрганеВладелец));
			
			Если РегистрацияВНалоговомОрганеВладелецЭтоСправочникСсылка Тогда
				
				РегистрацияВНалоговомОрганеВладелецЕстьРеквизитРегистрацияВНалоговомОргане
				= РегистрацияВНалоговомОрганеВладелец.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено;
				
				Если РегистрацияВНалоговомОрганеВладелец.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане")
					<> Неопределено И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОрганеВладелец,
					"РегистрацияВНалоговомОргане")) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
					И РегистрацияВНалоговомОрганеВладелец.РегистрацияВНалоговомОргане <> СсылкаНаРегистрациюВНО Тогда
					
					КодПоМесту = "220";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		КодПоМесту = "220";
		
	КонецЕсли;
	
	Возврат КодПоМесту;
	
КонецФункции

&НаСервере
Функция РеквизитЭлементаСправочника(Ссылка)
	
	Если Ссылка.Метаданные().Реквизиты.Найти("КодПоОКТМО") <> Неопределено Тогда
		Возврат Ссылка.КодПоОКТМО;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВыборСтавкиНалогаЗавершение(СтавкаЭлемент, ДопПараметр) Экспорт
	
	Если СтавкаЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области[ДопПараметр].Значение
			= ?(ТипЗнч(СтавкаЭлемент.Значение) = Тип("Число"), СтавкаЭлемент.Значение, 0);
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Лев(Область.Имя, 13) = "П000010001001" Тогда
		
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			СтандартнаяОбработка = Ложь;
			Ставки = Новый СписокЗначений;
			Ставки.Добавить("", "Пустое значение");
			Ставки.Добавить(3);
			Ставки.Добавить(5);
			Ставки.Добавить(6);
			Ставки.Добавить(7);
			Ставки.Добавить(9);
			Ставки.Добавить(10);
			Ставки.Добавить(12);
			Ставки.Добавить(13);
			Ставки.Добавить(15);
			Ставки.Добавить(30);
			Ставки.Добавить(35);
			НачЭлем = Ставки.НайтиПоЗначению(Область.Значение);
			Если НачЭлем = Неопределено Тогда
				НачЭлем = Ставки[0];
			КонецЕсли;
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСтавкиНалогаЗавершение", ЭтотОбъект, Область.Имя);
			ПоказатьВыборИзСписка(ОписаниеОповещения, Ставки, , НачЭлем);
		КонецЕсли;
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда 
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ЗаменяемыеСимволы = " " + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
		
		Если Область.Имя = "ОКТМО" Тогда
			ОКТМО = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(ЗаменяемыеСимволы, СокрЛП(Область.Значение), "");
			Если ЗначениеЗаполнено(ОКТМО) И НЕ (СтрДлина(ОКТМО) = 8 ИЛИ СтрДлина(ОКТМО) = 11) Тогда
				Область.Очистить();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Длина кода по ОКТМО должна быть равна 8 или 11. Значение кода по ОКТМО очищено!'");
				Сообщение.Сообщить();
			Иначе
				Область.Значение = ОКТМО;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПериодОтчета(ЭтаФорма);
		
	Иначе
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел2.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнение проверок перед заполнением отчета.
	
	КодыСТитЛиста = КодыСТитульногоЛиста(ЭтаФорма);
	КПП   = КодыСТитЛиста.КПП;
	КодНО = КодыСТитЛиста.КодНО;
	ОКТМО = КодыСТитЛиста.ОКТМО;
	
	СтатусПроверки = Истина;
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
				"ru='Для заполнения отчета необходимо значение КПП налогового агента. Внесите исправление в справочник организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(КПП) <> 9 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
				"ru='Задан КПП налогового агента, не состоящий из 9 символов. Внесите исправление в справочник организаций и обновите сведения в расчете (меню ""Еще"" - ""Обновить"").'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задан код налогового органа, в который представляется расчет.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(КодНО) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Задан код налогового органа, не состоящий из 4 цифр.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задан код по ОКТМО.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Задан некорректный код по ОКТМО.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Заполнение отчета прервано.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Заполнение отчета.
	
	ОтчетЗаполненУспешно = Ложь;
	
	ЗаполнитьАвтоНаСервере(ОтчетЗаполненУспешно);
	
	Если ОтчетЗаполненУспешно Тогда
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Для налогового агента по значениям%1 кода налогового органа и кода по ОКТМО не найдена соответствующая запись в справочнике ""Регистрации в налоговом органе"". Заполнение отчета прервано.'"),
			?(СтруктураРеквизитовФормы.ИП, "", " КПП,"));
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ОтчетЗаполненУспешно)
	
	КодыСТитЛиста = КодыСТитульногоЛиста(ЭтаФорма);
	
	ПараметрыОтбораРегистрацийВНО = Новый Структура;
	
	ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", КодыСТитЛиста.КодНО);
	ПараметрыОтбораРегистрацийВНО.Вставить("ОКТМО", КодыСТитЛиста.ОКТМО);
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		ПараметрыОтбораРегистрацийВНО.Вставить("КПП", КодыСТитЛиста.КПП);
	КонецЕсли;
	
	РегистрацииВНО = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(
		СтруктураРеквизитовФормы.Организация, ПараметрыОтбораРегистрацийВНО);
	
	Если РегистрацииВНО.Количество() > 0 Тогда
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
		
		ЗаполнитьПустыеСтруктурыДанных();
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация",             СтруктураРеквизитовФормы.Организация);
		ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ПараметрыОтчета.Вставить("ДатаПодписи",             ДатаПодписи);
		ПараметрыОтчета.Вставить("РегистрацииВНО",          РегистрацииВНО);
				
		Контейнер = Новый Структура();
		Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
		Контейнер.Вставить("Раздел1", СтруктураДанныхРаздел1);
		Контейнер.Вставить("Раздел1_ДанныеДопСтрок", ДанныеФормыВЗначение(П00001, Тип("ТаблицаЗначений")));
		Контейнер.Вставить("Раздел2", СтруктураДанныхРаздел2);
		Контейнер.Вставить("Раздел2_ДанныеДопСтрок", ДанныеФормыВЗначение(П00002, Тип("ТаблицаЗначений")));
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
			ИмяОтчета(ЭтаФорма.ИмяФормы),
			ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета, Контейнер);
		
		ЗначениеВДанныеФормы(Контейнер.Раздел1_ДанныеДопСтрок, ЭтаФорма.П00001);
		ЗначениеВДанныеФормы(Контейнер.Раздел2_ДанныеДопСтрок, ЭтаФорма.П00002);
		
		ЗаполнитьПустыеСтруктурыДанных();
		
		Если П00001.Количество() = 0 Тогда
			П00001.Добавить();
		КонецЕсли;
		Если П00002.Количество() = 0 Тогда
			П00002.Добавить();
		КонецЕсли;
		
		ОбновитьСтруктуруДанныхМногострочныхРазделов();
		
		ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
		РасчетНаСервере("Раздел2");
		
		ОтчетЗаполненУспешно = Истина;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруДанныхМногострочныхРазделов()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.МногострочностьВРазделе.Количество() > 0 Тогда
			
			ВывестиМакетВТаблДокНаСервере(Раздел.ИмяСтраницы, 0);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ТекОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаПодписи",                ДатаПодписи);
	ПараметрыОтчета.Вставить("ЗначениеТекущегоПоказателя", ТекОбласть.Текст);
	
	КодыСТитЛиста = КодыСТитульногоЛиста(ЭтаФорма);
	
	ПараметрыОтчета.Вставить("КодНО", КодыСТитЛиста.КодНО);
	ПараметрыОтчета.Вставить("ОКТМО", КодыСТитЛиста.ОКТМО);
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		ПараметрыОтчета.Вставить("КПП", КодыСТитЛиста.КПП);
	КонецЕсли;
	
	ИмяТекОбласти = ТекОбласть.Имя;
	
	// При расшифровке строк многострочных частей разделов 1 и 2 дополнительно передаются:
	// в случае раздела 1 - значение строки 010;
	// в случае раздела 2 - значения строк 100, 110, 120.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			СпКолонокМнЧ = мСтруктураИменаКолонокРазделов[СтруктураРеквизитовФормы.мИдГруппы1];
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			СпКолонокМнЧ = мСтруктураИменаКолонокРазделов[СтруктураРеквизитовФормы.мИдГруппы2];
		КонецЕсли;
		Для каждого ЭлСписка Из СпКолонокМнЧ Цикл
			Если ЭлСписка.Значение = Лев(ИмяТекОбласти, 13) Тогда
				ИндСтроки = Сред(ИмяТекОбласти, 14);
				Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
					Обл = ТабличныйДокумент.Области.Найти("П000010001001" + ИндСтроки);
					Если Обл <> Неопределено Тогда
						ПараметрыОтчета.Вставить("СтавкаНалога", Обл.Значение);
					КонецЕсли;
				ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
					Обл = ТабличныйДокумент.Области.Найти("П000020010001" + ИндСтроки);
					Если Обл <> Неопределено Тогда
						ПараметрыОтчета.Вставить("ДатаФактическогоПолученияДохода", Обл.Значение);
					КонецЕсли;
					Обл = ТабличныйДокумент.Области.Найти("П000020011001" + ИндСтроки);
					Если Обл <> Неопределено Тогда
						ПараметрыОтчета.Вставить("ДатаУдержанияНалога", Обл.Значение);
					КонецЕсли;
					Обл = ТабличныйДокумент.Области.Найти("П000020012001" + ИндСтроки);
					Если Обл <> Неопределено Тогда
						ПараметрыОтчета.Вставить("СрокПеречисленияНалога", Обл.Значение);
					КонецЕсли;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(ИмяТекОбласти);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы,
		СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы,
		СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КодыСТитульногоЛиста(Форма)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КПП   = СокрЛП(Форма.ТабличныйДокумент.Области.КПП.Значение);
		КодНО = СокрЛП(Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		ОКТМО = СокрЛП(Форма.ТабличныйДокумент.Области.ОКТМО.Значение);
	Иначе
		КПП   = СокрЛП(Форма.СтруктураДанныхТитульный.КПП);
		КодНО = СокрЛП(Форма.СтруктураДанныхТитульный.НалоговыйОрган);
		ОКТМО = СокрЛП(Форма.СтруктураДанныхТитульный.ОКТМО);
	КонецЕсли;
	
	Возврат Новый Структура("КПП,КодНО,ОКТМО", КПП, КодНО, ОКТМО);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		Если СтруктураГруппы.Количество() > 0 И СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 Тогда
			ИмяИскОбласти = мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение
				+ "_" + Формат(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1, "ЧГ=");
			Если ТабличныйДокумент.Области.Найти(ИмяИскОбласти) <> Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция	ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"			, Истина);
	СтруктураРезультата.Вставить("ДопСведенияВЗаголовокРасшифровки"	, Ложь);
	СтруктураРезультата.Вставить("ДопСведенияВСтрокуРасшифровки"	, Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	Документирование				= Ложь;
	
	мДанныеОтчета.Вставить("ДанныеКС"	, Новый Структура);
	СформироватьВспомогательныеДанные();
	мДанныеОтчета.ДанныеКС.Вставить("ВТ", Новый МенеджерВременныхТаблиц);
	мДанныеОтчета.ДанныеКС.Вставить("ГодОтчета"		, Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	мДанныеОтчета.ДанныеКС.Вставить("МесяцОтчета"	, Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	мДанныеОтчета.ДанныеКС.Вставить("ПроверитьКС_6НДФЛ"		, ПолучитьДанныеРО_6НДФЛ(мДанныеОтчета.ДанныеКС.ВТ));
	мДанныеОтчета.ДанныеКС.Вставить("ПроверитьКС_2НДФЛ"		, ПолучитьДанныеРО_2НДФЛ(мДанныеОтчета.ДанныеКС.ВТ));
	мДанныеОтчета.ДанныеКС.Вставить("ПроверитьКС_Прибыль"	, ПолучитьДанныеРО_Прибыль(мДанныеОтчета.ДанныеКС.ВТ));
	
	ПроверитьКС_1_1(СтруктураРезультата);
	ПроверитьКС_1_2(СтруктураРезультата);
	ПроверитьКС_1_3(СтруктураРезультата);
	ПроверитьКС_1_4(СтруктураРезультата);
	
	Если РазделЗаполнен(мДанныеОтчета.Раздел1) Тогда
		
		ПроверитьКС_3_1а(СтруктураРезультата);
		ПроверитьКС_3_1б(СтруктураРезультата);
		ПроверитьКС_3_2а(СтруктураРезультата);
		ПроверитьКС_3_2б(СтруктураРезультата);
		ПроверитьКС_3_3а(СтруктураРезультата);
		ПроверитьКС_3_3б(СтруктураРезультата);
		ПроверитьКС_3_4а(СтруктураРезультата);
		ПроверитьКС_3_5а(СтруктураРезультата);
		ПроверитьКС_3_6(СтруктураРезультата);
		
	КонецЕсли;
	
	мДанныеОтчета = Неопределено;
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	АдресФормул			= ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы	, Новый УникальныйИдентификатор);
	АдресПоказателей	= ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей"	, АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "6-НДФЛ");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2017Кв4");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();
	
	ПроверитьКС_1_1(СтруктураРезультата);
	ПроверитьКС_1_2(СтруктураРезультата);
	ПроверитьКС_1_3(СтруктураРезультата);
	ПроверитьКС_1_4(СтруктураРезультата);
	ПроверитьКС_3_1а(СтруктураРезультата);
	ПроверитьКС_3_1б(СтруктураРезультата);
	ПроверитьКС_3_2а(СтруктураРезультата);
	ПроверитьКС_3_2б(СтруктураРезультата);
	ПроверитьКС_3_3а(СтруктураРезультата);
	ПроверитьКС_3_3б(СтруктураРезультата);
	ПроверитьКС_3_4а(СтруктураРезультата);
	ПроверитьКС_3_5а(СтруктураРезультата);
	ПроверитьКС_3_6(СтруктураРезультата);
		
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Проверки

&НаСервере
Процедура ПроверитьКС_1_1(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Титульный лист'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Титульного листа (КС 1.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 1.2 ст. 126, п. 2 ст. 230 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата представления Расчета должна быть не позднее 1 апреля года, следующего за истекшим налоговым '") +
		НСтр("ru='периодом (для Расчета за год) и не позднее последнего дня месяца, следующего за отчетным периодом '") +
		НСтр("ru='(для Расчетов за 1 квартал, полугодие и 9 месяцев)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно нарушение установленного НК РФ срока представления Расчета'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НомерКорректировки > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьФормулу(Настройки);
	ТитульныйДатаПодписи = ПоказательПоСтроке("ТитульныйДатаПодписи");
	ТитульныйДатаПодписи.Вставить("Значение",		ДатаПодписи);
	ТитульныйДатаПодписи.Вставить("ЗначениеСтр",	Формат(ДатаПодписи, "ДЛФ=Д"));
	ВнестиПоказательВРасшифровку(ТитульныйДатаПодписи, "Титульный");
	
	КС = ПоказателиКС(ТитульныйДатаПодписи.Значение, СрокРасчета(), Ложь, Ложь);
	Настройки.ЭтоОшибка = НЕ КС.ЛеваяЧасть <= КС.ПраваяЧасть;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		ПредставлениеДляРасшифровки(КС.ЛеваяЧасть), ПредставлениеДляРасшифровки(КС.ПраваяЧасть));
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_2(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 210, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма начисленного дохода (стр.020 Раздела 1) должна быть больше или равна сумме '") +
		НСтр("ru='налоговых вычетов (стр.030 Раздела 1)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена сумма налоговых вычетов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Р1Ст20Гр01 = ПоказательПоСтроке("Р1С020");
	Р1Ст30Гр01 = ПоказательПоСтроке("Р1С030");
	Раздел1 = мДанныеОтчета.Раздел1;
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000010001001_");
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст20Гр01, Инд);
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст30Гр01, Инд);
		ВнестиПоказательВРасшифровку(Р1Ст20Гр01, "Раздел1", );
		ВнестиПоказательВРасшифровку(Р1Ст30Гр01, "Раздел1", );
		
		КС = ПоказателиКС(Р1Ст20Гр01.Значение, Р1Ст30Гр01.Значение);
		Настройки.ЭтоОшибка = НЕ КС.ЛеваяЧасть >= КС.ПраваяЧасть;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			КС.ЛеваяЧастьСтр, КС.ПраваяЧастьСтр);
		
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_3(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 210, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма исчисленного налога (стр.040 Раздела 1) должна быть равна разнице суммы начисленного дохода '") +
		НСтр("ru='(стр.020 Раздела 1) и суммы налоговых вычетов (стр.030 Раздела 1) / 100 * Ставка налога (стр.010 '") +
		НСтр("ru='Раздела 1), если сумма начисленного дохода (стр.020 Раздела 1) больше или равна сумме налоговых '") +
		НСтр("ru='вычетов (стр.030 Раздела 1)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 - %3) / 100 х %4 Итог [%5] (±%6) когда %2 >= %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка в сумме исчисленного налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Р1Ст10Гр01 = ПоказательПоСтроке("Р1С010");
	Р1Ст20Гр01 = ПоказательПоСтроке("Р1С020");
	Р1Ст30Гр01 = ПоказательПоСтроке("Р1С030");
	Р1Ст40Гр01 = ПоказательПоСтроке("Р1С040");
	Р1Ст60Гр01 = ПоказательПоСтроке("Р1С060");
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000010001001_");
	КоличествоСтрок100 = КоличествоСтрок(Раздел2, "П000020010001_");
	
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст40Гр01, Инд);
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст20Гр01, Инд);
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст30Гр01, Инд);
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст10Гр01, Инд);
		ВставитьЗначениеПоказателя(Раздел1, Р1Ст60Гр01);
		
		ВнестиПоказательВРасшифровку(Р1Ст40Гр01, "Раздел1", );
		ВнестиПоказательВРасшифровку(Р1Ст20Гр01, "Раздел1", );
		ВнестиПоказательВРасшифровку(Р1Ст30Гр01, "Раздел1", );
		ВнестиПоказательВРасшифровку(Р1Ст10Гр01, "Раздел1", );
		ВнестиПоказательВРасшифровку(Р1Ст60Гр01, "Раздел1", );
		
		Погрешность		= Р1Ст60Гр01.Значение * КоличествоСтрок100;
		ПогрешностьСтр	= Формат(Погрешность, "ЧРД=,; ЧН=");
		
		УсловиеВыполнено = (Р1Ст20Гр01.Значение >= Р1Ст30Гр01.Значение);
		КС = ПоказателиКС(Р1Ст40Гр01.Значение, (Р1Ст20Гр01.Значение - Р1Ст30Гр01.Значение) / 100 * 
			Р1Ст10Гр01.Значение, 0, 0);
		Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ КССучетомОтклонения(КС.ЛеваяЧасть, КС.ПраваяЧасть, Погрешность);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			КС.ЛеваяЧастьСтр, Р1Ст20Гр01.ЗначениеСтр, Р1Ст30Гр01.ЗначениеСтр, Р1Ст10Гр01.ЗначениеСтр, КС.ПраваяЧастьСтр,
			ПогрешностьСтр);
		
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_4(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 227.1, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма исчисленного налога (стр.040 Раздела 1) должна быть больше или равна сумме фиксированного '") +
		НСтр("ru='авансового платежа (стр.050 Раздел 1)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена сумма фиксированного авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Р1Ст40Гр01 = ПоказательПоСтроке("Р1С040");
	Р1Ст50Гр01 = ПоказательПоСтроке("Р1С050");
	Раздел1 = мДанныеОтчета.Раздел1;
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000010001001_");
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст40Гр01, Инд);
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст50Гр01, Инд);
		ВнестиПоказательВРасшифровку(Р1Ст40Гр01, "Раздел1", );
		ВнестиПоказательВРасшифровку(Р1Ст50Гр01, "Раздел1", );
		
		КС = ПоказателиКС(Р1Ст40Гр01.Значение, Р1Ст50Гр01.Значение, 0, 0);
		Настройки.ЭтоОшибка = НЕ КС.ЛеваяЧасть >= КС.ПраваяЧасть;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			КС.ЛеваяЧастьСтр, КС.ПраваяЧастьСтр);
		
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_1а(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.1а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1, Справка 2-НДФЛ'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Раздел 1 заполнен, получены данные 2-НДФЛ'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается в будущих релизах'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 и Справки 2-НДФЛ (КС 3.1а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 226, 230, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма начисленных доходов (стр.020 Раздела 1) по соответствующей ставке налога (стр.010 '") +
		НСтр("ru='Раздела 1) должна быть равна сумме строк ""Общая сумме дохода"" по соответствующей ставке налога '") +
		НСтр("ru='справок 2-НДФЛ с признаком ""1"", представленных налоговым агентом по всем налогоплательщикам'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Ставка %1%'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4] по ставке %5%'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма начисленных доходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель6НДФЛ"	, "Р1С020");
	Настройки.Вставить("ИмяПоказателя"		, "СуммаДоходов");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_3а_код(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_1б(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.1б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1, ДНП'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Раздел 1 заполнен, получены данные ДПН'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 и Декларации по налогу на прибыль (КС 3.1б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 226, 230, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма начисленных доходов (стр.020 Раздела 1) по соответствующей ставке налога (стр.010 '") +
		НСтр("ru='Раздела 1) должна быть равна общей сумме доходов (стр.020 Приложений №2 к Декларации по налогу '") +
		НСтр("ru='на прибыль) по соответствующей ставке налога (стр.010 Приложений №2 к Декларации по налогу на '") +
		НСтр("ru='прибыль), представленных налоговым агентом по всем налогоплательщикам'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Ставка %1%'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4] по ставке %5%'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма начисленных доходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель6НДФЛ"	, "Р1С020");
	Настройки.Вставить("ПоказательПрибыль"	, "П2С020");
	Настройки.Вставить("ИмяПоказателя"		, "СуммаДоходов");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_3б_код(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_2а(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.2а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1, Справка 2-НДФЛ'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Раздел 1 заполнен, получены данные 2-НДФЛ'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается в будущих релизах'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 и Справки 2-НДФЛ (КС 3.2а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 226, 230, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма начисленных доходов в виде дивидендов (стр.025 Раздела 1) должна '") +
		НСтр("ru='быть равна сумме доходов в виде дидидендов (по коду доходов ""1010"") справок 2-НДФЛ '") +
		НСтр("ru='с признаком ""1"", представленных налоговым агентом по всем налогоплательщикам'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Ставка %1%'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4] по ставке %5%'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма доходов в виде дивидендов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель6НДФЛ"	, "Р1С025");
	Настройки.Вставить("ИмяПоказателя"		, "СуммаДивидендов");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_3а_код(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_2б(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.2б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1, ДНП'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Раздел 1 заполнен, получены данные ДПН'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 и Декларации по налогу на прибыль (КС 3.2б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 226, 230, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма начисленных доходов в виде дивидендов (стр.025 Раздела 1) должна быть равна общей сумме '") +
		НСтр("ru='доходов в виде дивидендов (стр.041 Приложений №2 к Декларации по налогу на прибыль) по коду '") +
		НСтр("ru='доходов ""1010"", представленных налоговым агентом по всем налогоплательщикам'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Ставка %1%'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4] по ставке %5%'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма доходов в виде дивидендов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель6НДФЛ"	, "Р1С025");
	Настройки.Вставить("ПоказательПрибыль"	, "П2С041");
	Настройки.Вставить("ИмяПоказателя"		, "СуммаДивидендов");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_3б_код(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_3а(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.3а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1, Справка 2-НДФЛ'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Раздел 1 заполнен, получены данные 2-НДФЛ'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается в будущих релизах'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 и Справки 2-НДФЛ (КС 3.3а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 226, 230, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма исчисленного налога (стр.040 Раздела 1) по соответствующей ставке налога (стр.010 '") +
		НСтр("ru='Раздела 1) должна быть равна сумме строк ""Сумма налога исчисленная"" по соответствующей ставке '") +
		НСтр("ru='налога справок 2-НДФЛ с признаком ""1"", представленных налоговым агентом по всем налогоплательщикам'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Ставка %1%'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4] по ставке %5%'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма исчисленного налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель6НДФЛ"	, "Р1С040");
	Настройки.Вставить("ИмяПоказателя"		, "СуммаНалогаИсчисленная");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_3а_код(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_3б(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.3б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1, ДНП'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Раздел 1 заполнен, получены данные ДПН'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 и Декларации по налогу на прибыль (КС 3.3б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 226, 230, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма исчисленного налога (стр.040 Раздела 1) по соответствующей ставке налога (стр.010 '") +
		НСтр("ru='Раздела 1) должна быть равна сумме исчисленного налога (стр.030 Приложений №2 к Декларации '") +
		НСтр("ru='по налогу на прибыль) по соответствующей ставке налога (стр.010 Приложений №2 к Декларации '") +
		НСтр("ru='по налогу на прибыль), представленных налоговым агентом по всем налогоплательщикам'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Ставка %1%'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4] по ставке %5%'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма исчисленного налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель6НДФЛ"	, "Р1С040");
	Настройки.Вставить("ПоказательПрибыль"	, "П2С030");
	Настройки.Вставить("ИмяПоказателя"		, "СуммаНалогаИсчисленная");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_3б_код(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_4а(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.4а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1, Справка 2-НДФЛ'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Раздел 1 заполнен, получены данные 2-НДФЛ'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается в будущих релизах'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 и Справки 2-НДФЛ (КС 3.4а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 226, 230, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, не удержанная налоговым агентом (стр.080 Раздела 1) должна быть равна сумме '") +
		НСтр("ru='строк ""Сумма налога, не удержанная налоговым агентом"" справок 2-НДФЛ с признаком ""1"", '") +
		НСтр("ru='представленных налоговым агентом по всем налогоплательщикам'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма налога, не удержанная налоговым агентом'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель6НДФЛ"	, "Р1С080");
	Настройки.Вставить("ИмяПоказателя"		, "СуммаНалогаНеУдержанная");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (мДанныеОтчета.ДанныеКС.ПроверитьКС_6НДФЛ
		И мДанныеОтчета.ДанныеКС.ПроверитьКС_2НДФЛ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_6НДФЛ.Ссылка КАК Ссылка,
	|	ВТ_6НДФЛ.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_6НДФЛ.СуммаНалогаНеУдержанная КАК Р1С080
	|ИЗ
	|	ВТ_6НДФЛ КАК ВТ_6НДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_2НДФЛ.Ссылка КАК Ссылка,
	|	ВТ_2НДФЛ.Номер КАК Номер,
	|	ВТ_2НДФЛ.Дата КАК Дата,
	|	ВТ_2НДФЛ.Фамилия КАК Фамилия,
	|	ВТ_2НДФЛ.ИНН КАК ИНН,
	|	ВТ_2НДФЛ.СуммаНалогаНеУдержанная КАК СуммаНалогаНеУдержанная
	|ИЗ
	|	ВТ_2НДФЛ КАК ВТ_2НДФЛ
	|ГДЕ
	|	НЕ ВТ_2НДФЛ.СуммаНалогаНеУдержанная = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|ИТОГИ
	|	СУММА(СуммаНалогаНеУдержанная)
	|ПО
	|	ОБЩИЕ";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка6НДФЛ	= РезультатЗапроса[0].Выбрать();
	Выборка2НДФЛ	= РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗарегистрироватьФормулу(Настройки);
	
	Пока Выборка6НДФЛ.Следующий() Цикл
		Показатели = ЗаполнитьПоказатели(Настройки.Показатель6НДФЛ, Выборка6НДФЛ,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Выборка6НДФЛ.НомерСтраницы);
	КонецЦикла;
	
	Сумма2НДФЛ	= 0;
	Сумма2НДФЛСтр	= "";
	Пока Выборка2НДФЛ.Следующий() Цикл
		Счетчик = 0;
		Сумма2НДФЛ = Выборка2НДФЛ[Настройки.ИмяПоказателя];
		Выборка = Выборка2НДФЛ.Выбрать();
		Пока Выборка.Следующий() И Счетчик < 1000 Цикл
			Если ЗначениеЗаполнено(Выборка[Настройки.ИмяПоказателя]) Тогда
				Представление = "Справка 2-НДФЛ №" + Выборка.Номер + " от " + Выборка.Дата + ", " + Выборка.Фамилия;
				РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, 
					Неопределено, Представление, Выборка[Настройки.ИмяПоказателя], Неопределено, Неопределено, Неопределено,
					Неопределено, Неопределено, СчетчикФормулДляРасшифровок);
				Счетчик = Счетчик + 1;
			КонецЕсли;
			Если Счетчик <= 6 И ЗначениеЗаполнено(Выборка[Настройки.ИмяПоказателя]) Тогда
				Сумма2НДФЛСтр = Сумма2НДФЛСтр + ?(Счетчик = 6, ?(ЗначениеЗаполнено(Сумма2НДФЛ), "<...>", "0"), 
					Выборка[Настройки.ИмяПоказателя]) + " + ";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Настройки.ЭтоОшибка		= НЕ Выборка6НДФЛ[Настройки.Показатель6НДФЛ] = Сумма2НДФЛ;
	Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Выборка6НДФЛ[Настройки.Показатель6НДФЛ], РасшифровкаВСтр(Сумма2НДФЛСтр), Сумма2НДФЛ);
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_5а(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.5а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1, Справка 2-НДФЛ'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Раздел 1 заполнен, получены данные 2-НДФЛ'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается в будущих релизах'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 и Справки 2-НДФЛ (КС 3.5а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 230, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Количество физических лиц, получивших доход (стр.060 Раздела 1) должна быть равна '") +
		НСтр("ru='общему количеству справок 2-НДФЛ с признаком ""1""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указано количество физических лиц, получивших доход'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель6НДФЛ"	, "Р1С060");
	Настройки.Вставить("ИмяПоказателя"		, "КоличествоФизлиц");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (мДанныеОтчета.ДанныеКС.ПроверитьКС_6НДФЛ
		И мДанныеОтчета.ДанныеКС.ПроверитьКС_2НДФЛ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_6НДФЛ.Ссылка КАК Ссылка,
	|	ВТ_6НДФЛ.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_6НДФЛ.КоличествоФизлиц КАК Р1С060
	|ИЗ
	|	ВТ_6НДФЛ КАК ВТ_6НДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_2НДФЛ.Ссылка КАК Ссылка,
	|	ВТ_2НДФЛ.Номер КАК Номер,
	|	ВТ_2НДФЛ.Дата КАК Дата,
	|	ВТ_2НДФЛ.Фамилия КАК Фамилия,
	|	ВТ_2НДФЛ.ИНН КАК ИНН,
	|	1 КАК КоличествоФизлиц
	|ИЗ
	|	ВТ_2НДФЛ КАК ВТ_2НДФЛ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|ИТОГИ
	|	СУММА(КоличествоФизлиц)
	|ПО
	|	ОБЩИЕ";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка6НДФЛ	= РезультатЗапроса[0].Выбрать();
	Выборка2НДФЛ	= РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗарегистрироватьФормулу(Настройки);
	
	Пока Выборка6НДФЛ.Следующий() Цикл
		Показатели = ЗаполнитьПоказатели(Настройки.Показатель6НДФЛ, Выборка6НДФЛ,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Выборка6НДФЛ.НомерСтраницы);
	КонецЦикла;
	
	Сумма2НДФЛ	= 0;
	Пока Выборка2НДФЛ.Следующий() Цикл
		Счетчик = 0;
		Сумма2НДФЛ = Выборка2НДФЛ[Настройки.ИмяПоказателя];
		Выборка = Выборка2НДФЛ.Выбрать();
		Пока Выборка.Следующий() И Счетчик < 1000 Цикл
			Если ЗначениеЗаполнено(Выборка[Настройки.ИмяПоказателя]) Тогда
				Представление = "Справка 2-НДФЛ №" + Выборка.Номер + " от " + Выборка.Дата + ", " + Выборка.Фамилия;
				РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, 
					Неопределено, Представление, Выборка[Настройки.ИмяПоказателя], Неопределено, Неопределено, Неопределено,
					Неопределено, Неопределено, СчетчикФормулДляРасшифровок);
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Настройки.ЭтоОшибка		= НЕ Выборка6НДФЛ[Настройки.Показатель6НДФЛ] = Сумма2НДФЛ;
	Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Выборка6НДФЛ[Настройки.Показатель6НДФЛ], Сумма2НДФЛ);
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3а_код(Настройки)
	
	Если НЕ (мДанныеОтчета.ДанныеКС.ПроверитьКС_6НДФЛ
		И мДанныеОтчета.ДанныеКС.ПроверитьКС_2НДФЛ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ВТ_6НДФЛ.Ставка КАК Р1С010,
	|	ВТ_6НДФЛ.Ссылка КАК Ссылка,
	|	ВТ_6НДФЛ.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_6НДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВТ_6НДФЛ.СуммаДоходов КАК Р1С020
	|ИЗ
	|	ВТ_6НДФЛ КАК ВТ_6НДФЛ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Р1С010
	|ИТОГИ
	|	СУММА(Р1С020)
	|ПО
	|	Р1С010
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_2НДФЛ.Ставка КАК Ставка,
	|	ВТ_2НДФЛ.Ссылка КАК Ссылка,
	|	ВТ_2НДФЛ.Номер КАК Номер,
	|	ВТ_2НДФЛ.Дата КАК Дата,
	|	ВТ_2НДФЛ.Фамилия КАК Фамилия,
	|	ВТ_2НДФЛ.ИНН КАК ИНН,
	|	ВТ_2НДФЛ.СуммаДоходов КАК СуммаДоходов
	|ИЗ
	|	ВТ_2НДФЛ КАК ВТ_2НДФЛ
	|ГДЕ
	|	НЕ ВТ_2НДФЛ.СуммаДоходов = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ставка,
	|	Номер
	|ИТОГИ
	|	СУММА(СуммаДоходов)
	|ПО
	|	Ставка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Р1С020"		, Настройки.Показатель6НДФЛ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СуммаДоходов"	, Настройки.ИмяПоказателя);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка6НДФЛ	= РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка2НДФЛ	= РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка6НДФЛ.Следующий() Цикл
		
		Сумма2НДФЛ	= 0;
		Сумма2НДФЛСтр	= "";
		Сумма6НДФЛСтр	= "";
		СтавкаНайдена	= Ложь;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Ставка", Выборка6НДФЛ.Р1С010));
		ЗарегистрироватьФормулу(Настройки);
			
		Выборка = Выборка6НДФЛ.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели(Настройки.Показатель6НДФЛ, Выборка, Выборка.НомерСтроки, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Выборка.НомерСтраницы);
			Сумма6НДФЛСтр = Сумма6НДФЛСтр + Показатели[Настройки.Показатель6НДФЛ].ЗначениеСтр + " + ";
		КонецЦикла;
		
		Если Выборка2НДФЛ.НайтиСледующий(Выборка6НДФЛ.Р1С010, "Ставка") Тогда
			СтавкаНайдена = Истина;
			
			Счетчик = 0;
			Сумма2НДФЛ = Выборка2НДФЛ[Настройки.ИмяПоказателя];
			Выборка = Выборка2НДФЛ.Выбрать();
			Пока Выборка.Следующий() И Счетчик < 1000 Цикл
				Если ЗначениеЗаполнено(Выборка[Настройки.ИмяПоказателя]) Тогда
					Представление = "Справка 2-НДФЛ №" + Выборка.Номер + " от " + Выборка.Дата + ", " + Выборка.Фамилия;
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, 
						Неопределено, Представление, Выборка[Настройки.ИмяПоказателя], Неопределено, Неопределено, Неопределено,
						Неопределено, Неопределено, СчетчикФормулДляРасшифровок);
					Счетчик = Счетчик + 1;
				КонецЕсли;
				Если Счетчик <= 6 И ЗначениеЗаполнено(Выборка[Настройки.ИмяПоказателя]) Тогда
					Сумма2НДФЛСтр = Сумма2НДФЛСтр + ?(Счетчик = 6, ?(ЗначениеЗаполнено(Сумма2НДФЛ), "<...>", "0"), 
						Выборка[Настройки.ИмяПоказателя]) + " + ";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		Настройки.ЭтоОшибка		= СтавкаНайдена И НЕ Выборка6НДФЛ[Настройки.Показатель6НДФЛ] = Сумма2НДФЛ;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасшифровкаВСтр(Сумма6НДФЛСтр), Выборка6НДФЛ[Настройки.Показатель6НДФЛ], РасшифровкаВСтр(Сумма2НДФЛСтр), 
			Сумма2НДФЛ, Выборка6НДФЛ.Р1С010);
		ДополнитьСтруктуруОшибок(Настройки);
		Выборка2НДФЛ.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3б_код(Настройки)
	
	Если НЕ (мДанныеОтчета.ДанныеКС.ПроверитьКС_6НДФЛ
		И мДанныеОтчета.ДанныеКС.ПроверитьКС_Прибыль) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ВТ_6НДФЛ.Ставка КАК Р1С010,
	|	ВТ_6НДФЛ.Ссылка КАК Ссылка,
	|	ВТ_6НДФЛ.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_6НДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВТ_6НДФЛ.СуммаДоходов КАК Р1С020
	|ИЗ
	|	ВТ_6НДФЛ КАК ВТ_6НДФЛ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Р1С010
	|ИТОГИ
	|	СУММА(Р1С020)
	|ПО
	|	Р1С010
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Прибыль.Ставка КАК Ставка,
	|	ВТ_Прибыль.Ссылка КАК Ссылка,
	|	ВТ_Прибыль.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Прибыль.НомерСтроки КАК НомерСтроки,
	|	ВТ_Прибыль.Фамилия КАК Фамилия,
	|	ВТ_Прибыль.ИНН КАК ИНН,
	|	ВТ_Прибыль.СуммаДоходов КАК П2С020
	|ИЗ
	|	ВТ_Прибыль КАК ВТ_Прибыль
	|ГДЕ
	|	НЕ ВТ_Прибыль.СуммаДоходов = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ставка,
	|	НомерСтраницы,
	|	Фамилия
	|ИТОГИ
	|	СУММА(П2С020)
	|ПО
	|	Ставка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Р1С020"		, Настройки.Показатель6НДФЛ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "П2С020"		, Настройки.ПоказательПрибыль);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СуммаДоходов"	, Настройки.ИмяПоказателя);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка6НДФЛ	= РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПрибыль	= РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка6НДФЛ.Следующий() Цикл
		
		СуммаПрибыль	= 0;
		СуммаПрибыльСтр	= "";
		Сумма6НДФЛСтр	= "";
		СтавкаНайдена	= Ложь;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Ставка", Выборка6НДФЛ.Р1С010));
		ЗарегистрироватьФормулу(Настройки);
			
		Выборка = Выборка6НДФЛ.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели(Настройки.Показатель6НДФЛ, Выборка, Выборка.НомерСтроки, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Выборка.НомерСтраницы);
			Сумма6НДФЛСтр = Сумма6НДФЛСтр + Показатели[Настройки.Показатель6НДФЛ].ЗначениеСтр + " + ";
		КонецЦикла;
		
		Если ВыборкаПрибыль.НайтиСледующий(Выборка6НДФЛ.Р1С010, "Ставка") Тогда
			СтавкаНайдена = Истина;
			
			Счетчик = 0;
			СуммаПрибыль = ВыборкаПрибыль[Настройки.ПоказательПрибыль];
			Выборка = ВыборкаПрибыль.Выбрать();
			Пока Выборка.Следующий() И Счетчик < 1000 Цикл
				Показатели = ЗаполнитьПоказатели(Настройки.ПоказательПрибыль, Выборка, Выборка.НомерСтроки, Истина);
				Если ЗначениеЗаполнено(Выборка[Настройки.ПоказательПрибыль]) Тогда
					Дополнение = "Страница " + Выборка.НомерСтраницы + ", " + Выборка.Фамилия;
					ДобавитьИнфоКПредставлениюПоказателя(Показатели[Настройки.ПоказательПрибыль], Дополнение);
					РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Выборка.НомерСтраницы,,, Выборка.Ссылка);
					Счетчик = Счетчик + 1;
				КонецЕсли;
				Если Счетчик <= 6 И ЗначениеЗаполнено(Выборка[Настройки.ПоказательПрибыль]) Тогда
					СуммаПрибыльСтр = СуммаПрибыльСтр + ?(Счетчик = 6, ?(ЗначениеЗаполнено(СуммаПрибыль), "<...>", "0"), 
						Показатели[Настройки.ПоказательПрибыль].Значение) + " + ";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		Настройки.ЭтоОшибка		= СтавкаНайдена И НЕ Выборка6НДФЛ[Настройки.Показатель6НДФЛ] = СуммаПрибыль;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасшифровкаВСтр(Сумма6НДФЛСтр), Выборка6НДФЛ[Настройки.Показатель6НДФЛ], РасшифровкаВСтр(СуммаПрибыльСтр), 
			СуммаПрибыль, Выборка6НДФЛ.Р1С010);
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаПрибыль.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_6(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1, РСВ'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Раздел 1 заполнен'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Для корректной работы контрольного соотношения необходимо одновременное наличие заполненных '") +
		НСтр("ru='Расчета по страховым взносам за отчетный период и Расчетов 6-НДФЛ по организации и каждому '") +
		НСтр("ru='обособленному подразделению (при наличии)'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 и Расчета по страховым взносам (КС 3.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 126.1, 226, 226.1, 230, 420, 23, 24 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Разница суммы начисленных доходов (стр.020 Раздела 1) и суммы начисленных доходов в виде дивидендов '") +
		НСтр("ru='(стр.025 Раздела 1) должна быть больше или равна сумме выплат в стр.030 Приложения 1 к Разделу 1 '") +
		НСтр("ru='Расчета по страховым взносам (соотношение применяется к отчетному периоду по налоговому агенту в '") +
		НСтр("ru='целом, с учетом всех обособленных подразделений)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 - %2 Итог [%3] >= %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка в сумме начисленного дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	СумС020		= 0;
	СумС025		= 0;
	СумС030		= 0;
	РСВНайден	= Ложь;
	
	ЗарегистрироватьФормулу(Настройки);
	Данные6НДФЛ = ПолучитьДанныеРО_6НДФЛ_Сводные();
	ДанныеРСВ	= ПолучитьДанныеРО_РСВ(РСВНайден);
	
	Для каждого Страница6НДФЛ Из Данные6НДФЛ Цикл
		
		Показатели = ЗаполнитьПоказатели("Р1С020, Р1С025", Страница6НДФЛ, Страница6НДФЛ.НомерСтроки, Истина);
		Дополнение = "КПП " + Страница6НДФЛ.КПП + ", Ставка " + Страница6НДФЛ.Ставка;
		ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р1С020, Дополнение);
		ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р1С025, Дополнение);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Страница6НДФЛ.НомерСтраницы,,, Страница6НДФЛ.Отчет);
		СумС020 = СумС020 + Страница6НДФЛ.Р1С020;
		СумС025 = СумС025 + Страница6НДФЛ.Р1С025;
		
	КонецЦикла;
	
	Для каждого СтраницаРСВ Из ДанныеРСВ Цикл
		
		Показатели = ЗаполнитьПоказатели("РСВ030", СтраницаРСВ,, Истина);
		Дополнение = "Тариф " + СтраницаРСВ.Тариф;
		ДобавитьИнфоКПредставлениюПоказателя(Показатели.РСВ030, Дополнение);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1Прил1Подр1_1и1_2", СтраницаРСВ.НомерСтраницы,,, 
			СтраницаРСВ.Отчет);
		СумС030 = СумС030 + СтраницаРСВ.РСВ030;
		
	КонецЦикла;
	
	РасчетнаяСумма = СумС020 - СумС025;
	Настройки.ЭтоОшибка		= НЕ РасчетнаяСумма >= СумС030 ИЛИ НЕ РСВНайден;
	Настройки.ОписаниеОшибки = ?(РСВНайден, Настройки.ОписаниеОшибки, НСтр("ru='Не найден Расчет по страховым взносам'"));
	Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		СумС020, СумС025, РасчетнаяСумма, СумС030);
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_ФормированиеКонтекста

&НаСервере
Процедура СформироватьВспомогательныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("П00001", "Раздела 1 6-НДФЛ");
	ПредставлениеРазделов.Вставить("П00002", "Приложения 2 к Декларации по налогу на прибыль");
	ПредставлениеРазделов.Вставить("П01111", "подраздела 1.1 Приложения 1 к Разделу 1 Расчета по страховым взносам");
	
	мДанныеОтчета.ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	
КонецПроцедуры

&НаСервере
Функция	ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	Если УсловныйКодПоказателя = "ТитульныйДатаПодписи" Тогда
		Результат.Вставить("Имя", "ДатаПодписи");
		Результат.Вставить("Представление", Нстр("ru='Дата подписи'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1С010" Тогда
		Результат.Вставить("Имя", "П000010001001_%1");
		Результат.Вставить("Представление", Нстр("ru='Ставка налога, %'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р1С020" Тогда
		Результат.Вставить("Имя", "П000010002001_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма начисленного дохода'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1С025" Тогда
		Результат.Вставить("Имя", "П000010002501_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма начисленного дохода в виде дивидендов'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р1С030" Тогда
		Результат.Вставить("Имя", "П000010003001_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма налоговых вычетов'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1С040" Тогда
		Результат.Вставить("Имя", "П000010004001_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма исчисленного налога'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1С050" Тогда
		Результат.Вставить("Имя", "П000010005001_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма фиксированного авансового платежа'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1С060" Тогда
		Результат.Вставить("Имя", "П000010006001");
		Результат.Вставить("Представление", Нстр("ru='Количество физических лиц, получивших доход'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1С080" Тогда
		Результат.Вставить("Имя", "П000010008001");
		Результат.Вставить("Представление", Нстр("ru='Сумма налога, не удержанная налоговым агентом'"));
	
	ИначеЕсли УсловныйКодПоказателя = "П2С020" Тогда
		Результат.Вставить("Имя", "П000020002003");
		Результат.Вставить("Представление", Нстр("ru='Общая сумма дохода'"));
	
	ИначеЕсли УсловныйКодПоказателя = "П2С030" Тогда
		Результат.Вставить("Имя", "П000020003003");
		Результат.Вставить("Представление", Нстр("ru='Сумма налога исчисленная'"));
	
	ИначеЕсли УсловныйКодПоказателя = "П2С041" Тогда
		Результат.Вставить("Имя", "П000020004101_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма дохода в виде дивидендов'"));
	
	ИначеЕсли УсловныйКодПоказателя = "РСВ030" Тогда
		Результат.Вставить("Имя", "П011110003001");
		Результат.Вставить("Представление", Нстр("ru='Сумма выплат'"));
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция	ПолучитьДанныеРО_6НДФЛ(ВТ)
	
	Если НЕ мДанныеОтчета.ДанныеКС.МесяцОтчета = 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДоходовДляКС = Новый ТаблицаЗначений;
	// реквизиты отчета
	ТаблицаДоходовДляКС.Колонки.Добавить("Ссылка"					, Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	ТаблицаДоходовДляКС.Колонки.Добавить("НомерСтраницы"			, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("НомерСтроки"				, Новый ОписаниеТипов("Число"));
	// суммовые показатели
	ТаблицаДоходовДляКС.Колонки.Добавить("Ставка"					, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("СуммаДоходов"	, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("СуммаДивидендов"			, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("СуммаНалогаИсчисленная"	, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("СуммаНалогаНеУдержанная"	, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("КоличествоФизлиц"			, Новый ОписаниеТипов("Число"));
	
	Если СтруктураРеквизитовФормы.мВыбраннаяФорма = "ФормаОтчета2017Кв4" Тогда
		КолвоСтрок = КоличествоСтрок(мДанныеОтчета.Раздел1, "П000010001001_");
		Для Счетчик = 1 По КолвоСтрок Цикл
			НоваяСтрока							= ТаблицаДоходовДляКС.Добавить();
			НоваяСтрока.НомерСтраницы			= 1;
			НоваяСтрока.НомерСтроки				= Счетчик;
			НоваяСтрока.Ставка					= мДанныеОтчета.Раздел1["П000010001001_" + Счетчик];
			НоваяСтрока.СуммаДоходов			= мДанныеОтчета.Раздел1["П000010002001_" + Счетчик];
			НоваяСтрока.СуммаДивидендов			= мДанныеОтчета.Раздел1["П000010002501_" + Счетчик];
			НоваяСтрока.СуммаНалогаИсчисленная	= мДанныеОтчета.Раздел1["П000010004001_" + Счетчик];
			НоваяСтрока.КоличествоФизлиц		= мДанныеОтчета.Раздел1.П000010006001;
			НоваяСтрока.СуммаНалогаНеУдержанная	= мДанныеОтчета.Раздел1.П000010008001;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаДоходовДляКС.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВТ;
	Запрос.УстановитьПараметр("ТаблицаДоходовДляКС", ТаблицаДоходовДляКС);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ДанныеКС.Ссылка КАК Ссылка,
	|	ДанныеКС.НомерСтраницы КАК НомерСтраницы,
	|	ДанныеКС.НомерСтроки КАК НомерСтроки,
	|	ДанныеКС.Ставка КАК Ставка,
	|	ДанныеКС.СуммаДоходов КАК СуммаДоходов,
	|	ДанныеКС.СуммаДивидендов КАК СуммаДивидендов,
	|	ДанныеКС.СуммаНалогаИсчисленная КАК СуммаНалогаИсчисленная,
	|	ДанныеКС.КоличествоФизлиц КАК КоличествоФизлиц,
	|	ДанныеКС.СуммаНалогаНеУдержанная КАК СуммаНалогаНеУдержанная
	|ПОМЕСТИТЬ ВТ_6НДФЛ
	|ИЗ
	|	&ТаблицаДоходовДляКС КАК ДанныеКС";	
	
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция	ПолучитьДанныеРО_6НДФЛ_Сводные()
	
	Результат			= Новый Массив;
	СтруктураРеквизитов	= Новый Структура;
	ДанныеОтчета		= Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ГодОтчета"	, мДанныеОтчета.ДанныеКС.ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета"	, мДанныеОтчета.ДанныеКС.МесяцОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.КПП КАК КПП,
	|	ДокументРО.Ссылка КАК Ссылка,
	|	ДокументРО.Вид КАК Вид
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчет6НДФЛ""
	|	И ДокументРО.Организация = &Организация
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И МЕСЯЦ(ДокументРО.ДатаОкончания) = &МесяцОтчета
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	КПП,
	|	Вид УБЫВ
	|ИТОГИ ПО
	|	КПП";
	
	ВыборкаКПП	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКПП.Следующий() Цикл
		Выборка = ВыборкаКПП.Выбрать();
		Если Выборка.Следующий() Тогда
			
			ПолноеИмяФормы = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме("РегламентированныйОтчет6НДФЛ", 
				Выборка.Ссылка.ВыбраннаяФорма);
			ОтчетОбъект = ОбъектОтчета(ПолноеИмяФормы);
			ОтчетОбъект.СформироватьСтруктуруРеквизитовФормы(Выборка.Ссылка.ВыбраннаяФорма, СтруктураРеквизитов);
			СтруктураРеквизитов.Вставить("мСохраненныйДок", Выборка.Ссылка);
			ОтчетОбъект.СформироватьСтруктуруПоказателей(Выборка.Ссылка.ВыбраннаяФорма, ДанныеОтчета, СтруктураРеквизитов);
			
			КолвоСтрок = КоличествоСтрок(ДанныеОтчета.Раздел1, "П000010001001_");
			Для Счетчик = 1 По КолвоСтрок Цикл
				СтруктураРезультат = Новый Структура;
				СтруктураРезультат.Вставить("Отчет"			, Выборка.Ссылка);
				СтруктураРезультат.Вставить("НомерСтраницы"	, 1);
				СтруктураРезультат.Вставить("НомерСтроки"	, Счетчик);
				СтруктураРезультат.Вставить("Ставка"		, "" + ДанныеОтчета.Раздел1["П000010001001_" + Счетчик] + "%");
				СтруктураРезультат.Вставить("КПП"			, Выборка.КПП);
				СтруктураРезультат.Вставить("Р1С020"		, ДанныеОтчета.Раздел1["П000010002001_" + Счетчик]);
				СтруктураРезультат.Вставить("Р1С025"		, ДанныеОтчета.Раздел1["П000010002501_" + Счетчик]);
				Результат.Добавить(СтруктураРезультат);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция	ПолучитьДанныеРО_2НДФЛ(ВТ)
	
	Если НЕ мДанныеОтчета.ДанныеКС.МесяцОтчета = 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Документы.Найти("СправкиНДФЛДляПередачиВНалоговыйОрган") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Коды = СтруктураДанныхТитульный;
	ВерсияПостановки		= "20180609";
	МассивВидовСправок		= Новый Массив;
	МассивВидовСправок.Добавить("1");
	МассивКодовДивидендов	= Новый Массив;
	МассивКодовДивидендов.Добавить("1010");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОтчетныйГод"	, мДанныеОтчета.ДанныеКС.ГодОтчета);
	СтруктураПараметров.Вставить("ИНН"			, Коды.ИНН);
	СтруктураПараметров.Вставить("КПП"			, Коды.КПП);
	СтруктураПараметров.Вставить("ОКТМО"		, Коды.ОКТМО);
	СтруктураПараметров.Вставить("МенеджерВТ"	, ВТ);
	СтруктураПараметров.Вставить("ВерсияПостановки"		, ВерсияПостановки);
	СтруктураПараметров.Вставить("МассивВидовСправок"	, МассивВидовСправок);
	СтруктураПараметров.Вставить("МассивКодовДивидендов", МассивКодовДивидендов);
	
	Возврат ПолучитьДанныеРО_2НДФЛ_Переопределяемый(СтруктураПараметров);
	
КонецФункции

&НаСервере
Функция	ПолучитьДанныеРО_2НДФЛ_Переопределяемый(СтруктураПараметров)
	
	// функционал ожидается в будущих версиях программы
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция	ПолучитьДанныеРО_Прибыль(ВТ)
	
	Если НЕ мДанныеОтчета.ДанныеКС.МесяцОтчета = 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Отчеты.Найти("РегламентированныйОтчетПрибыль") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ГодОтчета"	, мДанныеОтчета.ДанныеКС.ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета"	, мДанныеОтчета.ДанныеКС.МесяцОтчета);
	Запрос.УстановитьПараметр("КПП"			, КодыСТитульногоЛиста(ЭтаФорма).КПП);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.Ссылка КАК Ссылка,
	|	ДокументРО.Вид КАК Вид,
	|	ДокументРО.ВыбраннаяФорма КАК Форма
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчетПрибыль""
	|	И ДокументРО.Организация = &Организация
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И МЕСЯЦ(ДокументРО.ДатаОкончания) = &МесяцОтчета
	|	И ДокументРО.КПП = &КПП
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	К10	= Новый КвалификаторыСтроки(10);
	К20	= Новый КвалификаторыСтроки(20);
	К60	= Новый КвалификаторыСтроки(60);
	
	ТаблицаДоходовДляКС = Новый ТаблицаЗначений;
	// идентификация документа
	ТаблицаДоходовДляКС.Колонки.Добавить("Ссылка"					, Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	ТаблицаДоходовДляКС.Колонки.Добавить("Форма"					, Новый ОписаниеТипов("Строка",,К20));
	ТаблицаДоходовДляКС.Колонки.Добавить("Номер"					, Новый ОписаниеТипов("Строка",,К10));
	ТаблицаДоходовДляКС.Колонки.Добавить("Дата"						, Новый ОписаниеТипов("Дата"));
	ТаблицаДоходовДляКС.Колонки.Добавить("Корректировка"			, Новый ОписаниеТипов("Строка",,К10));
	ТаблицаДоходовДляКС.Колонки.Добавить("НомерСтраницы"			, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("НомерСтроки"				, Новый ОписаниеТипов("Число"));
	// идентификация физлица
	ТаблицаДоходовДляКС.Колонки.Добавить("Фамилия"					, Новый ОписаниеТипов("Строка",,К60));
	ТаблицаДоходовДляКС.Колонки.Добавить("Имя"						, Новый ОписаниеТипов("Строка",,К60));
	ТаблицаДоходовДляКС.Колонки.Добавить("Отчество"					, Новый ОписаниеТипов("Строка",,К60));
	ТаблицаДоходовДляКС.Колонки.Добавить("ИНН"						, Новый ОписаниеТипов("Строка",,К20));
	// суммовые показатели
	ТаблицаДоходовДляКС.Колонки.Добавить("Ставка"					, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("СуммаДоходов"				, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("СуммаДивидендов"			, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("СуммаНалогаИсчисленная"	, Новый ОписаниеТипов("Число"));
	ТаблицаДоходовДляКС.Колонки.Добавить("СуммаНалогаНеУдержанная"	, Новый ОписаниеТипов("Число"));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Форма = "ФормаОтчета2016Кв4" Тогда
			
			СтруктураРеквизитов	= Новый Структура;
			ДанныеРОПрибыль		= Новый Структура;
			ОтчетОбъект			= Отчеты["РегламентированныйОтчетПрибыль"].Создать();
			ОтчетОбъект.СформироватьСтруктуруРеквизитовФормы(Выборка.Форма, СтруктураРеквизитов);
			СтруктураРеквизитов.мСохраненныйДок = Выборка.Ссылка;
			ОтчетОбъект.СформироватьСтруктуруПоказателей(Выборка.Форма, ДанныеРОПрибыль, СтруктураРеквизитов);
			Приложение2			= ДанныеРОПрибыль.Приложение2;
			
			Для каждого Страница Из Приложение2 Цикл
				
				Данные = Страница.Данные;
				
				Если НЕ РазделЗаполнен(Данные) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Данные.П000020000101)
					ИЛИ НЕ ЗначениеЗаполнено (Данные.П000020000102)
					ИЛИ НЕ ЗначениеЗаполнено (Данные.П000020000103) Тогда
					// не заполнены ключевые реквизиты
					Продолжить;
				КонецЕсли;
				
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Ссылка"		, Выборка.Ссылка);
				СтруктураДанных.Вставить("Форма"		, Выборка.Форма);
				СтруктураДанных.Вставить("Номер"		, Данные.П000020000101);
				СтруктураДанных.Вставить("Дата"			, Данные.П000020000102);
				СтруктураДанных.Вставить("Корректировка", Данные.П000020000103);
				СтруктураДанных.Вставить("НомерСтраницы", Приложение2.Индекс(Страница) + 1);
				СтруктураДанных.Вставить("Фамилия"		, Данные.П000020000301);
				СтруктураДанных.Вставить("Имя"			, Данные.П000020000302);
				СтруктураДанных.Вставить("Отчество"		, Данные.П000020000303);
				СтруктураДанных.Вставить("ИНН"			, Данные.П000020000201);
				СтруктураДанных.Вставить("Ставка"		, Данные.П000020001003);
				
				СуммыЗаполнены	= Ложь;
				КолвоСтрок		= КоличествоСтрок(Данные, "П000020004001_");
				Счетчик			= 1;
				Пока Истина Цикл
					Если НЕ СуммыЗаполнены Тогда
						НоваяСтрока = ТаблицаДоходовДляКС.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
						НоваяСтрока.СуммаДоходов			= Данные.П000020002003;
						НоваяСтрока.СуммаНалогаИсчисленная	= Данные.П000020003003;
						НоваяСтрока.СуммаНалогаНеУдержанная	= Данные.П000020003403;
						СуммыЗаполнены = Истина;
					Иначе
						ВидДохода = Данные["П000020004001_" + Счетчик];
						Если ВидДохода = "1010" Тогда
							НоваяСтрока = ТаблицаДоходовДляКС.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
							НоваяСтрока.НомерСтроки			= Счетчик;
							НоваяСтрока.СуммаДивидендов		= Данные["П000020004101_" + Счетчик];
						КонецЕсли;
						Если Счетчик = КолвоСтрок Тогда
							Прервать;
						КонецЕсли;
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДоходовДляКС.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВТ;
	Запрос.УстановитьПараметр("ТаблицаДоходовДляКС", ТаблицаДоходовДляКС);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ДанныеКС.Ссылка КАК Ссылка,
	|	ДанныеКС.Форма КАК Форма,
	|	ДанныеКС.Номер КАК Номер,
	|	ДанныеКС.Дата КАК Дата,
	|	ДанныеКС.Корректировка КАК Корректировка,
	|	ДанныеКС.НомерСтраницы КАК НомерСтраницы,
	|	ДанныеКС.НомерСтроки КАК НомерСтроки,
	|	ДанныеКС.Фамилия КАК Фамилия,
	|	ДанныеКС.Имя КАК Имя,
	|	ДанныеКС.Отчество КАК Отчество,
	|	ДанныеКС.ИНН КАК ИНН,
	|	ДанныеКС.Ставка КАК Ставка,
	|	ДанныеКС.СуммаДоходов КАК СуммаДоходов,
	|	ДанныеКС.СуммаДивидендов КАК СуммаДивидендов,
	|	ДанныеКС.СуммаНалогаИсчисленная КАК СуммаНалогаИсчисленная,
	|	ДанныеКС.СуммаНалогаНеУдержанная КАК СуммаНалогаНеУдержанная
	|ПОМЕСТИТЬ ВТ_Прибыль_Исходная
	|ИЗ
	|	&ТаблицаДоходовДляКС КАК ДанныеКС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Прибыль.Номер КАК Номер,
	|	МАКСИМУМ(Прибыль.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_Прибыль_Отбор
	|ИЗ
	|	ВТ_Прибыль_Исходная КАК Прибыль
	|
	|СГРУППИРОВАТЬ ПО
	|	Прибыль.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Прибыль_Исходная.Ссылка КАК Ссылка,
	|	ВТ_Прибыль_Исходная.Форма КАК Форма,
	|	ВТ_Прибыль_Исходная.Номер КАК Номер,
	|	ВТ_Прибыль_Исходная.Дата КАК Дата,
	|	ВТ_Прибыль_Исходная.Корректировка КАК Корректировка,
	|	ВТ_Прибыль_Исходная.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Прибыль_Исходная.НомерСтроки КАК НомерСтроки,
	|	ВТ_Прибыль_Исходная.Фамилия КАК Фамилия,
	|	ВТ_Прибыль_Исходная.Имя КАК Имя,
	|	ВТ_Прибыль_Исходная.Отчество КАК Отчество,
	|	ВТ_Прибыль_Исходная.ИНН КАК ИНН,
	|	ВТ_Прибыль_Исходная.Ставка КАК Ставка,
	|	ВТ_Прибыль_Исходная.СуммаДоходов КАК СуммаДоходов,
	|	ВТ_Прибыль_Исходная.СуммаДивидендов КАК СуммаДивидендов,
	|	ВТ_Прибыль_Исходная.СуммаНалогаИсчисленная КАК СуммаНалогаИсчисленная,
	|	ВТ_Прибыль_Исходная.СуммаНалогаНеУдержанная КАК СуммаНалогаНеУдержанная
	|ПОМЕСТИТЬ ВТ_Прибыль
	|ИЗ
	|	ВТ_Прибыль_Исходная КАК ВТ_Прибыль_Исходная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Прибыль_Отбор КАК ВТ_Прибыль_Отбор
	|		ПО ВТ_Прибыль_Исходная.Номер = ВТ_Прибыль_Отбор.Номер
	|			И ВТ_Прибыль_Исходная.Дата = ВТ_Прибыль_Отбор.Дата
	|ГДЕ
	|	НЕ ВТ_Прибыль_Исходная.Корректировка = ""99""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Прибыль_Исходная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Прибыль_Отбор";	
	
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция	ПолучитьДанныеРО_РСВ(ОтчетНайден)
	
	Результат			= Новый Массив;
	СтруктураРеквизитов	= Новый Структура;
	СтруктураРазделов	= Новый Структура;
	ДанныеОтчета		= Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ГодОтчета"	, мДанныеОтчета.ДанныеКС.ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета"	, мДанныеОтчета.ДанныеКС.МесяцОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.Ссылка КАК Ссылка,
	|	ДокументРО.Вид КАК Вид
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчетРасчетПоСтраховымВзносам""
	|	И ДокументРО.Организация = &Организация
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И МЕСЯЦ(ДокументРО.ДатаОкончания) = &МесяцОтчета
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид УБЫВ";
	
	Выборка	= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ПолноеИмяФормы = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(
			"РегламентированныйОтчетРасчетПоСтраховымВзносам", Выборка.Ссылка.ВыбраннаяФорма);
		ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПолноеИмяФормы);
		ОтчетОбъект.СформироватьСтруктуруРеквизитовФормы(Выборка.Ссылка.ВыбраннаяФорма, СтруктураРеквизитов);
		СтруктураРеквизитов.Вставить("мСохраненныйДок", Выборка.Ссылка);
		ОтчетОбъект.ИнициализироватьМногострочныеЧасти(Выборка.Ссылка.ВыбраннаяФорма		, СтруктураРеквизитов);	
		ОтчетОбъект.ИнициализироватьМногоуровневыеРазделы(Выборка.Ссылка.ВыбраннаяФорма	, СтруктураРеквизитов, 
			СтруктураРазделов);
		ОтчетОбъект.СформироватьСтруктуруПоказателейДляКС(Выборка.Ссылка.ВыбраннаяФорма, ДанныеОтчета, СтруктураРеквизитов, 
			СтруктураРазделов);
		
		КолвоСтраниц = ДанныеОтчета.Раздел1Прил1.Количество();
		Для Счетчик = 1 По КолвоСтраниц Цикл
			СтруктураРезультат = Новый Структура;
			СтруктураРезультат.Вставить("Отчет"			, Выборка.Ссылка);
			СтруктураРезультат.Вставить("НомерСтраницы"	, "" + Счетчик + ",1");
			СтруктураРезультат.Вставить("Тариф"			, ДанныеОтчета.Раздел1Прил1[Счетчик - 1].Данные.П000110000101);
			СтруктураРезультат.Вставить("РСВ030"		, ДанныеОтчета.Раздел1Прил1[Счетчик - 1].Данные.П011110003001);
			Результат.Добавить(СтруктураРезультат);
		КонецЦикла;
		
		ОтчетНайден = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КС_Сервис

&НаСервере
Функция	ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
		
		Если Документирование Тогда
			
			Настройки.Вставить("НомерКС");
			Настройки.Вставить("Раздел");
			Настройки.Вставить("Условие");
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		СтрокаОписания.ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) 
			+ Настройки.ОписаниеКС;
		Возврат Настройки;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция	ЗаполнитьПоказатели(Знач СтрокаПоказателей, Источник, НомерСтроки = 0, ПоКолонке = Ложь)

	МассивНазваний			= СтрРазделить(СтрокаПоказателей, ", ", Ложь);
	СтруктураПоказателей	= Новый Структура;
	
	Для каждого ЭлементМассива Из МассивНазваний Цикл
		Показатель = ПоказательПоСтроке(ЭлементМассива);
		СтруктураПоказателей.Вставить(ЭлементМассива, Показатель);
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			ВставитьЗначениеМногострочногоПоказателя(Источник, ЭлементКоллекции.Значение, НомерСтроки, 
				?(ПоКолонке, ЭлементКоллекции.Ключ, ""));
		Иначе
			ВставитьЗначениеПоказателя(Источник, ЭлементКоллекции.Значение, ?(ПоКолонке, ЭлементКоллекции.Ключ, ""));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПоказателей;
	
КонецФункции

&НаСервере
Процедура РасшифроватьПоказатели(Знач СтруктураПоказателей, 
	Знач Настройки,
	Знач НазваниеСтраницы,
	Знач НомерСтраницы,
	Знач ВключаяПоказатели	= Неопределено,
	Знач ИсключаяПоказатели	= Неопределено,
	Знач Отчет = Неопределено)
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		
		Если ПропуститьЭлемент(ЭлементКоллекции.Ключ, ВключаяПоказатели, ИсключаяПоказатели) Тогда
			Продолжить;
		КонецЕсли;
		
		ВнестиПоказательВРасшифровку(ЭлементКоллекции.Значение, НазваниеСтраницы, СтрокаЧГ0(НомерСтраницы), Отчет);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция	ОбработатьРезультат(Знач Настройки, Знач СтруктураРезультата);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
		"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция	ПропуститьЭлемент(НазваниеПоказателя, СтрокаВключая, СтрокаИсключая)
	
	Если СтрокаВключая = Неопределено И СтрокаИсключая = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Обработать	= Не СтрокаВключая = Неопределено И Не СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0
		Или Не СтрокаИсключая = Неопределено И СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0;
	Исключить	= Не СтрокаИсключая = Неопределено И Не СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0
		Или Не СтрокаВключая = Неопределено И СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0;
	
	Если Исключить Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Обработать Тогда
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ОписаниеКС = СформироватьОписаниеКС(Настройки, "ДопСведенияВЗаголовокРасшифровки");
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, 
		ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция	СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		
		Если Не Настройки.ДопСведенияПараметры = Неопределено И
			Не Настройки.ДопСведенияПараметры.Количество() = 0 Тогда
			
			МассивПараметров = Новый Массив;
			Для каждого ЭлементКоллекции Из Настройки.ДопСведенияПараметры Цикл
				МассивПараметров.Добавить(ЭлементКоллекции.Значение);
			КонецЦикла;
			
			КоличествоПараметров = МассивПараметров.Количество();
			
			Если КоличествоПараметров = 1 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0]);
			ИначеЕсли КоличествоПараметров = 2 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1]);
			ИначеЕсли КоличествоПараметров = 3 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2]);
			ИначеЕсли КоличествоПараметров = 4 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3]);
			ИначеЕсли КоличествоПараметров = 5 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4]);
			Иначе
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4], МассивПараметров[5]);
			КонецЕсли;
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= Формат(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок, "ЧГ=0");
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, НСтр("ru=''"));
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель, ИмяКолонки = "")
	
	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяКолонки];
	ИначеЕсли ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		Если ЗначениеПоказателя = Неопределено Тогда
			ЗначениеПоказателя = 0;
		Иначе
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки, ИмяКолонки = "")
	
	НомерСтрокиСтр = СтрокаЧГ0(НомерСтроки);
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяКолонки];
	ИначеЕсли ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

&НаСервере
Функция	РазделЗаполнен(ДанныеРаздела)
	
	Результат = Ложь;
	
	Для Каждого Показатель Из ДанныеРаздела Цикл
		Результат = ЗначениеЗаполнено(Показатель.Значение);
		Если Результат Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьИнфоКПредставлениюПоказателя(Показатель, СтрокаИнфо)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	Если СтрЗаканчиваетсяНа(ПредставлениеПоказателя, ")") Тогда
		ПозицияОткрСкобки = СтрНайти(ПредставлениеПоказателя, "(", НаправлениеПоиска.СКонца);
		Если ПозицияОткрСкобки > 0 Тогда
			ПредставлениеПоказателя = Лев(ПредставлениеПоказателя, ПозицияОткрСкобки);
			Показатель.Представление = ПредставлениеПоказателя + СтрокаИнфо + ")";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Показатель.Представление = ПредставлениеПоказателя + " (" + СтрокаИнфо + ")";
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено, СсылкаНаДокумент = Неопределено)
	
	ПредставлениеПоказателя = ПредставлениеПоказателя(Показатель);
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		?(СсылкаНаДокумент = Неопределено, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, СсылкаНаДокумент),
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция	ПредставлениеПоказателя(Показатель, ПолноеПредставление = Истина)
	
	МассивПредставлений = Новый Массив;
	
	Если Найти(Показатель.Имя, "П0") = 0 Тогда
		МассивПредставлений.Добавить(Нстр("ru='Титульный лист'"));
	Иначе
		ПодстрокаРаздела	= мДанныеОтчета.ДанныеКС.ПредставлениеРазделов[Лев(Показатель.Имя, 6)];
		ПодстрокаСтроки		= Сред(Показатель.Имя, 9, 3);
		МассивПредставлений.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Строка %1 %2'"),
			ПодстрокаСтроки, ПодстрокаРаздела));
	КонецЕсли;
	
	Если ПолноеПредставление Тогда
		МассивПредставлений.Добавить(Показатель.Представление);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПредставлений, ". ");
	
КонецФункции

&НаСервере
Функция	ПредставлениеДляРасшифровки(ЗначениеПредставления)
	
	ТипПредставления = ТипЗнч(ЗначениеПредставления);
	ПредставлениеПустого = "";
	Если ТипПредставления = Тип("Строка") Тогда
		Представление = ЗначениеПредставления;
		ПредставлениеПустого = """""";
	ИначеЕсли ТипПредставления = Тип("Дата") Тогда
		Представление = Формат(ЗначениеПредставления, "ДЛФ=D");
		ПредставлениеПустого = """ . . """;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(ЗначениеПредставления), Представление, ПредставлениеПустого);
	
КонецФункции

&НаСервере
Функция	РасшифровкаВСтр(СтрокаДляРасшифровки)
	Если ТипЗнч(СтрокаДляРасшифровки) = Тип("Строка") Тогда
		Если СтрокаДляРасшифровки= "" Тогда
			Возврат "0";
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " + " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " - " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " и " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		Иначе
			Возврат СтрокаДляРасшифровки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтрокаДляРасшифровки) = Тип("Число") Тогда
		Возврат СтрокаЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтрокаДляРасшифровки));
	Иначе
		Возврат СтрокаДляРасшифровки;
	КонецЕсли;
КонецФункции

&НаСервере
Функция	ПоказателиКС(ЛеваяЧасть, ПраваяЧасть, РазмерЛев = 2, РазмерПрав = 2)
	
	ПоказателиКС = Новый Структура();
	
	Если ТипЗнч(ЛеваяЧасть) = Тип("Число") Тогда
		Если РазмерЛев = Истина Тогда
			ЛеваяЧасть = Окр(ЛеваяЧасть, 2);
			
		ИначеЕсли ТипЗнч(РазмерЛев) = Тип("Число") Тогда
			ЛеваяЧасть = Окр(ЛеваяЧасть, РазмерЛев);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ПраваяЧасть) = Тип("Число") Тогда
		Если РазмерПрав = Истина Тогда
			ПраваяЧасть = Окр(ПраваяЧасть, 2);
			
		ИначеЕсли ТипЗнч(РазмерПрав) = Тип("Число") Тогда
			ПраваяЧасть = Окр(ПраваяЧасть, РазмерПрав);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказателиКС.Вставить("ЛеваяЧасть", ЛеваяЧасть);
	ПоказателиКС.Вставить("ЛеваяЧастьСтр", Формат(ЛеваяЧасть, "ЧРД=,; ЧН="));
	
	ПоказателиКС.Вставить("ПраваяЧасть", ПраваяЧасть);
	ПоказателиКС.Вставить("ПраваяЧастьСтр", Формат(ПраваяЧасть, "ЧРД=,; ЧН="));
	
	Возврат ПоказателиКС;
	
КонецФункции

&НаСервере
Функция	КССучетомОтклонения(ЛеваяЧасть, ПраваяЧасть, Отклонение)
	
	Возврат (ЛеваяЧасть >= ПраваяЧасть - Отклонение И ЛеваяЧасть <= ПраваяЧасть + Отклонение);
	
КонецФункции

&НаСервере
Функция	КоличествоСтрок(Данные, Показатель)
	Инд = 1; Количество = 0;
	Пока Данные.Свойство(Показатель + СтрокаЧГ0(Инд)) Цикл
		Количество = Количество + 1;
		Инд = Инд + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Функция	СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция	СрокРасчета()
	
	ОкончаниеПериодаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	Если Месяц(ОкончаниеПериодаОтчета) = 12 Тогда
		Возврат Дата(Год(ОкончаниеПериодаОтчета)+1, 4, 1);
	Иначе
		Возврат КонецМесяца(ДобавитьМесяц(ОкончаниеПериодаОтчета, 1));
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
КонецФункции