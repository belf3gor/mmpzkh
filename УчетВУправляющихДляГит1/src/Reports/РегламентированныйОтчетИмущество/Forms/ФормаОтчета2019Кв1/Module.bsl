&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания,
      ФормаДлительнойОперации;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2019";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	Если ТипЗнч(Параметры.НалоговыйОрган) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		Если НЕ Параметры.НалоговыйОрган.Пустая() Тогда
			СтруктураРеквизитовФормы.РегистрацияВНалОргане = Параметры.НалоговыйОрган;
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически
	= Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации
	= Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_1", Новый Цвет(192, 192, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы21");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ФлажокРучнойВводАдреса", Ложь);
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("РегистрацияВНалОргане");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			Иначе
				ЗаполнитьЗначенияПоУмолчанию = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнитьЗначенияПоУмолчанию Тогда
		
		ТабличныйДокумент.Области.ПоМесту.Значение = ?(ОрганизацияКрупнейшийНалогоплательщик(), "213", "214");
		
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение) Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаданиеВыполнено = ЗаполнитьАвтоНаСервере();
		Если ЗаданиеВыполнено Тогда
			Если Элементы.Расшифровать.Видимость Тогда
				Элементы.Расшифровать.Доступность = Истина;
				Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияКрупнейшийНалогоплательщик()
	
	Возврат СтруктураРеквизитовФормы.Организация.Метаданные().Реквизиты.Найти(
	"КрупнейшийНалогоплательщик") <> Неопределено И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	СтруктураРеквизитовФормы.Организация, "КрупнейшийНалогоплательщик")) = Тип("Булево")
	И СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы1  = "П0000100";
	СтруктураРеквизитовФормы.мИдГруппы21 = "П00021М1";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П0000100.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000010001003");
	ИменаГраф.Добавить("П000010002003");
	ИменаГраф.Добавить("П000010003003");
	ИменаГраф.Добавить("П000010004003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00021М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00021М103013");
	ИменаГраф.Добавить("П00021М103014");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы21, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы21);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел21", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел3", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели
		= РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		ИмяОтчета(ЭтаФорма.ИмяФормы),
		ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел21";
	СтрокаУровня1.Представление      = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2019Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
		ИмяСекции_ВидыНалоговойЛьготы_Р2Стр160_Р3Стр040 = "ВидыНалоговойЛьготы_Р2Стр160_Р3Стр040_20210101";
	Иначе
		ИмяСекции_ВидыНалоговойЛьготы_Р2Стр160_Р3Стр040 = "ВидыНалоговойЛьготы_Р2Стр160_Р3Стр040";
	КонецЕсли;
	
	//Титульный.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010002003", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	//Раздел 2.
	//
	ОтчетныйГод = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ИмяСекцииКжд = ?(ОтчетныйГод >= 2022, "Кжд_2022", "Кжд_" + Формат(ОтчетныйГод, "ЧГ="));
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000101", 2, ,
	"Выбор кода вида имущества", КоллекцияСписковВыбора["ВидыИмущества_Раздел2"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001100", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020021503", 0, ,
	"Выбор коэффициента Кжд", КоллекцияСписковВыбора[ИмяСекцииКжд]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020016003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора[ИмяСекции_ВидыНалоговойЛьготы_Р2Стр160_Р3Стр040]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020020003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр200_Р3Стр070"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020024003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр240_Р3Стр120"]);
	
	//Раздел 2.1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001100", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001001", 1, ,
	"Выбор кода номера объекта", КоллекцияСписковВыбора["КодыНомераОбъекта_Раздел21"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210003001", 2, ,
	"Выбор кода субъекта Российской Федерации", КоллекцияСписковВыбора["СубъектыРФ_Раздел21"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210003002", 1, ,
	"Выбор вида муниципального образования", КоллекцияСписковВыбора["ВидыМуниципальныхОбразований_Раздел21"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210003004", 1, ,
	"Выбор вида поселения", КоллекцияСписковВыбора["ВидыПоселений_Раздел21"]);
	
	//Раздел 3.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030000101", 2, ,
	"Выбор кода вида имущества", КоллекцияСписковВыбора["ВидыИмущества_Раздел3"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001100", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001401", 1, ,
	"Выбор кода вида сведений", КоллекцияСписковВыбора["ВидыСведений_Раздел3"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030004003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора[ИмяСекции_ВидыНалоговойЛьготы_Р2Стр160_Р3Стр040]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030007003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр200_Р3Стр070"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030012003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр240_Р3Стр120"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации
	= ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	
	КодПериода = "34";
	Если ЗаполненКодФормыРеорганизации Тогда
		КодПериода = "50";
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = КодПериода;
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение
	= Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("ФлажокРучнойВводАдреса", СтруктураРеквизитовФормы.ФлажокРучнойВводАдреса);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если СписокСохранения.Свойство("ФлажокРучнойВводАдреса") Тогда
		СтруктураРеквизитовФормы.Вставить("ФлажокРучнойВводАдреса", СписокСохранения.ФлажокРучнойВводАдреса);
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда
		СобратьДанные();
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли СтрЗаканчиваетсяНа(Область.Имя, "_Основание") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВвестиОснованиеЛьготы(Область);
		Возврат;
		
	ИначеЕсли НЕ СтруктураРеквизитовФормы.ФлажокРучнойВводАдреса
		И (СтрНачинаетсяС(Область.Имя, "П000210003") ИЛИ СтрНачинаетсяС(Область.Имя, "П00021М103"))
		И Область.Имя <> "П000210003012" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СоответствиеПоказателейСтраницыРеквизитамАдреса
		= СоответствиеПоказателейСтраницыРеквизитамАдреса(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СтруктураМногострочныхЧастей", СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей);
		ДопПараметры.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
		СоответствиеПоказателейСтраницыРеквизитамАдреса);
		
		РегионНаименование = "";
		ИмяОблКодРегиона = "";
		Для каждого Элем Из СоответствиеПоказателейСтраницыРеквизитамАдреса Цикл
			Если Элем.Значение = "КодРегиона" Тогда
				ИмяОблКодРегиона = Элем.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяОблКодРегиона) Тогда
			ОблКодРегиона = ТабличныйДокумент.Области.Найти(ИмяОблКодРегиона);
			Если ОблКодРегиона <> Неопределено Тогда
				Если Регионы.Количество() = 0 Тогда
					ЗаполнитьРегионыНаСервере();
				КонецЕсли;
				Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(ОблКодРегиона.Значение)));
				Если Регион.Количество() > 0 Тогда
					РегионНаименование = ?(Регион.Количество() > 0, Регион[0].Наим, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДопПараметры.Вставить("РегионНаименование", РегионНаименование);
		
		АдресВФорматеФИАС = РегламентированнаяОтчетностьКлиент.АдресВФорматеФИАСПоДаннымСтраницыРеглОтчета(
		ТабличныйДокумент, ДопПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", ПоляАдресаВJSON(АдресВФорматеФИАС));
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации",
		СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П000010001003")
		ИЛИ ИмяПоказателя = "П000020001001"
		ИЛИ ИмяПоказателя = "П000210001000"
		ИЛИ ИмяПоказателя = "П000030001001" Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П000010002003")
		ИЛИ ИмяПоказателя = "П000020001100"
		ИЛИ ИмяПоказателя = "П000210001100"
		ИЛИ ИмяПоказателя = "П000030001100" Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код бюджетной классификации должен состоять из 20 цифр. Значение очищено.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020000101"
		ИЛИ ИмяПоказателя = "П000030000101" Тогда
		КодВидаИмущества = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКодВидаИмущества = СтрДлина(КодВидаИмущества);
		Если ДлинаКодВидаИмущества = 2 ИЛИ ДлинаКодВидаИмущества = 0 Тогда
			Область.Значение = КодВидаИмущества;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код вида имущества должен состоять из 2 цифр. Значение очищено.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020021503" Тогда
		КоэффициентКжд = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначПоказателя);
		Если ЗначениеЗаполнено(ЗначПоказателя) И ТипЗнч(КоэффициентКжд) = Тип("Число")
			И КоэффициентКжд >= 0 И КоэффициентКжд <= 0.8 Тогда
			Область.Значение = Формат(КоэффициентКжд, "ЧДЦ=1;ЧН=0");
		Иначе
			Область.Значение = "";
			Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Введен некорректный коэффициент Кжд. Значение очищено.'");
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210004003" Тогда
		ОКОФ = СокрЛП(ЗначПоказателя);
		ОКОФ = СтрЗаменить(ОКОФ, " ", "");
		ШаблоныОКОФ = Неопределено;
		Если ОКОФСоответствуетШаблонам(ОКОФ, ШаблоныОКОФ) Тогда
			Область.Значение = ОКОФ;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			СтрокаСШаблонамиОКОФ = """" + СтрЗаменить(СтрСоединить(ШаблоныОКОФ, """, """), "9", "Х") + """";
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Введен некорректный код ОКОФ. Допустимы значения, соответствующие шаблонам: %1 (Х - любая цифра). Значение очищено.'"), СтрокаСШаблонамиОКОФ);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 И Сред(ИмяОбласти, ПозицияПодстроки) <> "_КодЛьготы" Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
	// Особая обработка для адресных показателей раздела 2.1.
	Если Область.Имя = "П000210001001" И СокрЛП(Область.Значение) <> "3" Тогда
		УдалитьДополнительныеСтрокиВРазделе21();
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
		// Особая обработка для адресных показателей раздела 2.1.
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
			Обл = ТабличныйДокумент.Области.Найти("П000210001001");
			Если Обл <> Неопределено И СокрЛП(Обл.Значение) <> "3" Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
				Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОКОФСоответствуетШаблонам(Знач ОКОФ, ШаблоныОКОФ)
	
	ШаблоныОКОФ = Новый Массив;
	ШаблоныОКОФ.Добавить("999.9");
	ШаблоныОКОФ.Добавить("999.99");
	ШаблоныОКОФ.Добавить("999.99.9");
	ШаблоныОКОФ.Добавить("999.99.99");
	ШаблоныОКОФ.Добавить("999.99.99.9");
	ШаблоныОКОФ.Добавить("999.99.99.99");
	ШаблоныОКОФ.Добавить("999.99.99.99.9");
	ШаблоныОКОФ.Добавить("999.99.99.99.99");
	ШаблоныОКОФ.Добавить("999.99.99.99.999");
	
	Для Инд = 1 По СтрДлина(ОКОФ) Цикл
		ТекСимв = Сред(ОКОФ, Инд, 1);
		Если СтрНайти("0123456789", ТекСимв) > 0 Тогда
			ОКОФ = Лев(ОКОФ, Инд - 1) + "9" + Сред(ОКОФ, Инд + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОКОФ = "" ИЛИ ШаблоныОКОФ.Найти(ОКОФ) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготы(Область)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОснованиеЛьготы", Область.Значение);
	
	ФормаВвода = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВводаОснованияЛьготы", ПараметрыФормы, ЭтаФорма);
	
	ДополнительныеПараметры = Новый Структура("Область", Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиОснованиеЛьготыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаВвода.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВвода.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВвода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		Область.Значение = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = Форма.ТабличныйДокумент.Области.НаимОрг;
		ОблКодФормыРеорг = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОблКодИННРеорг   = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(Форма.ТабличныйДокумент.Области.ПоМесту.Значение);
		
		РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
		
		ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
		
		Если ЗначениеЗаполнено(ЗначКодФормыРеорг)
			И ЗначКодФормыРеорг <> "0" Тогда
			
			Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" ИЛИ ЗначПоМесту = "281" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение
				= Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Форма.ТабличныйДокумент.Области.НаимОрг.Значение
			= Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		КодВидаИмущества = СокрЛП(Форма.ТабличныйДокумент.Области["П000020000101"].Значение);
		
		ОблСтр160_КодЛьготы = Форма.ТабличныйДокумент.Области["П000020016003_КодЛьготы"];
		ОблСтр160_Основание = Форма.ТабличныйДокумент.Области["П000020016003_Основание"];
		Если СокрЛП(ОблСтр160_КодЛьготы.Значение) = "2012000" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр160_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр160_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр160_Основание);
		КонецЕсли;
		
		ОблСтр180_Числ = Форма.ТабличныйДокумент.Области["П000020018003_Числ"];
		ОблСтр180_Знам = Форма.ТабличныйДокумент.Области["П000020018003_Знам"];
		Если КодВидаИмущества = "02" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр180_Числ);
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр180_Знам);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр180_Числ);
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр180_Знам);
		КонецЕсли;
		
		ОблСтр200_КодЛьготы = Форма.ТабличныйДокумент.Области["П000020020003_КодЛьготы"];
		ОблСтр200_Основание = Форма.ТабличныйДокумент.Области["П000020020003_Основание"];
		Если СокрЛП(ОблСтр200_КодЛьготы.Значение) = "2012400" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр200_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр200_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр200_Основание);
		КонецЕсли;
		
		ОблСтр210_Ставка = Форма.ТабличныйДокумент.Области["П000020021003"];
		Если КодВидаИмущества = "05" И СокрЛП(ОблСтр160_КодЛьготы.Значение) = "2010401" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр210_Ставка);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр210_Ставка);
		КонецЕсли;
		
		ОблСтр215_Кжд = Форма.ТабличныйДокумент.Области["П000020021503"];
		Если КодВидаИмущества = "09" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр215_Кжд);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр215_Кжд);
		КонецЕсли;
		
		ОблСтр230_СуммаАвансовЗаОтчетныеПериоды = Форма.ТабличныйДокумент.Области["П000020023003"];
		Если КодВидаИмущества = "04" ИЛИ КодВидаИмущества = "07" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр230_СуммаАвансовЗаОтчетныеПериоды);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр230_СуммаАвансовЗаОтчетныеПериоды);
		КонецЕсли;
		
		ОблСтр240_КодЛьготы   = Форма.ТабличныйДокумент.Области["П000020024003_КодЛьготы"];
		ОблСтр240_Основание   = Форма.ТабличныйДокумент.Области["П000020024003_Основание"];
		Если СокрЛП(ОблСтр240_КодЛьготы.Значение) = "2012500" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр240_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр240_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр240_Основание);
		КонецЕсли;
		ОблСтр250_СуммаЛьготы = Форма.ТабличныйДокумент.Области["П000020025003"];
		Если СокрЛП(ОблСтр240_КодЛьготы.Значение) = "" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр250_СуммаЛьготы);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр250_СуммаЛьготы);
		КонецЕсли;
		
		ОблСтр260_СуммаНалогаЗаПределамиРФ = Форма.ТабличныйДокумент.Области["П000020026003"];
		Если КодВидаИмущества = "04" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр260_СуммаНалогаЗаПределамиРФ);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр260_СуммаНалогаЗаПределамиРФ);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		Стр010 = СокрЛП(Форма.ТабличныйДокумент.Области["П000210001001"].Значение);
		
		Форма.ТабличныйДокумент.Области["СекцияПояснение_Строка030"].Видимость = Стр010 <> "3";
		
		Форма.ТабличныйДокумент.Области["СекцияСлужебная_ИдентификаторАдресногоОбъекта"].Видимость = Ложь;
		
		Для Ном = 0 По 18 Цикл
			Если Ном = 13 Тогда
				НомПреф = 1;
				Обл13 = Форма.ТабличныйДокумент.Области["П00021М103013_1"];
				Обл14 = Форма.ТабличныйДокумент.Области["П00021М103014_1"];
				Пока Обл13 <> Неопределено Цикл
					Если Стр010 = "3" Тогда
						РазрешитьВводДанныхВОбласть(Форма, Обл13);
						РазрешитьВводДанныхВОбласть(Форма, Обл14);
					Иначе
						ЗапретитьВводДанныхВОбласть(Форма, Обл13);
						ЗапретитьВводДанныхВОбласть(Форма, Обл14);
					КонецЕсли;
					НомПреф = НомПреф + 1;
					Обл13 = Форма.ТабличныйДокумент.Области.Найти("П00021М103013_" + Формат(НомПреф, "ЧГ="));
					Обл14 = Форма.ТабличныйДокумент.Области.Найти("П00021М103014_" + Формат(НомПреф, "ЧГ="));
				КонецЦикла;
			ИначеЕсли Ном = 14 Тогда
				Продолжить;
			Иначе
				Обл = Форма.ТабличныйДокумент.Области.Найти("П0002100030" + Формат(Ном, "ЧЦ=2;ЧВН=;ЧН="));
				Если Обл <> Неопределено Тогда
					Если Стр010 = "3" Тогда
						РазрешитьВводДанныхВОбласть(Форма, Обл);
					Иначе
						ЗапретитьВводДанныхВОбласть(Форма, Обл);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
			Если СтрНачинаетсяС(Обл.Имя, "ДобавлениеСтрокиП00021М1") Тогда
				Если Стр010 = "3" Тогда
					Обл.Видимость = Истина;
				Иначе
					Обл.Видимость = Ложь;
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(Обл.Имя, "СекцияСокращение_") Тогда
				Обл.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если Стр010 <> "3" Тогда
			Форма.ТабличныйДокумент.Область("П00021УИД3000").Очистить();
			Форма.ТабличныйДокумент.Область("ПС00210003001").Очистить();
			Форма.ТабличныйДокумент.Область("ПС00210003002").Очистить();
			Форма.ТабличныйДокумент.Область("ПС00210003004").Очистить();
			Форма.ТабличныйДокумент.Область("ПС00210003006").Очистить();
			Форма.ТабличныйДокумент.Область("ПС00210003008").Очистить();
			Форма.ТабличныйДокумент.Область("ПС00210003010").Очистить();
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		ОблСтр040_КодЛьготы = Форма.ТабличныйДокумент.Области["П000030004003_КодЛьготы"];
		ОблСтр040_Основание = Форма.ТабличныйДокумент.Области["П000030004003_Основание"];
		Если СокрЛП(ОблСтр040_КодЛьготы.Значение) = "2012000" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр040_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр040_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр040_Основание);
		КонецЕсли;
		
		ОблСтр070_КодЛьготы = Форма.ТабличныйДокумент.Области["П000030007003_КодЛьготы"];
		ОблСтр070_Основание = Форма.ТабличныйДокумент.Области["П000030007003_Основание"];
		Если СокрЛП(ОблСтр070_КодЛьготы.Значение) = "2012400" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр070_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр070_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр070_Основание);
		КонецЕсли;
		
		ОблСтр120_КодЛьготы = Форма.ТабличныйДокумент.Области["П000030012003_КодЛьготы"];
		ОблСтр120_Основание = Форма.ТабличныйДокумент.Области["П000030012003_Основание"];
		Если СокрЛП(ОблСтр120_КодЛьготы.Значение) = "2012500" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр120_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр120_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр120_Основание);
		КонецЕсли;
		ОблСтр130_СуммаЛьготы = Форма.ТабличныйДокумент.Области["П000030013003"];
		Если СокрЛП(ОблСтр120_КодЛьготы.Значение) = "" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр130_СуммаЛьготы);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр130_СуммаЛьготы);
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Обл.Защита = Ложь;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			Обл.Защита = Истина;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
	КонецЦикла;
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела)
	
	Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Истина
			И НЕ Обл.Защита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"]
		 ИЛИ Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"] Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = МногострочнаяЧастьТекущейОбласти(Форма, Обл.Имя);
		Если ИмяГруппы = Неопределено Тогда
			ИмяПоиска = Обл.Имя;
		Иначе
			ИмяПоиска = Лев(Обл.Имя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска) Тогда
			Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели[ИмяПоиска][0] Тогда
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОснованиеЛьготыПоУмолчанию(ОбластьОснованияЛьготы)
	
	Если НЕ ЗначениеЗаполнено(ОбластьОснованияЛьготы.Значение) Тогда
		ОбластьОснованияЛьготы.Значение = "000000000000";
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаАдресаВФорматеФИАС

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВМестеХраненияИВТабличномДокументе(Результат);
	
КонецПроцедуры

&НаСервере
Функция ПоляАдресаВJSON(ПоляАдреса)
	
	Возврат РаботаСАдресами.ПоляАдресаВJSON(ПоляАдреса);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяРаздела)
	
	Соотв = Новый Структура;
	
	Если ИмяРаздела = "Раздел21" Тогда
		
		// Немногострочные данные.
		//
		Соотв.Вставить("П00021УИД3000", "ИдентификаторАдресногоОбъекта");
		
		Соотв.Вставить("П000210003000", "Индекс");
		
		Соотв.Вставить("П000210003001", "КодРегиона");
		Соотв.Вставить("ПС00210003001", "РегионСокращение");
		
		Соотв.Вставить("П000210003002", "МуниципальныйРайонВид");
		Соотв.Вставить("ПС00210003002", "МуниципальныйРайонСокращение");
		Соотв.Вставить("П000210003003", "МуниципальныйРайон");
		
		Соотв.Вставить("П000210003004", "ПоселениеВид");
		Соотв.Вставить("ПС00210003004", "ПоселениеСокращение");
		Соотв.Вставить("П000210003005", "Поселение");
		
		Соотв.Вставить("П000210003006", "НаселенныйПунктВид");
		Соотв.Вставить("ПС00210003006", "НаселенныйПунктСокращение");
		Соотв.Вставить("П000210003007", "НаселенныйПункт");
		
		Соотв.Вставить("П000210003008", "ТерриторияТип");
		Соотв.Вставить("ПС00210003008", "ТерриторияСокращение");
		Соотв.Вставить("П000210003009", "Территория");
		
		Соотв.Вставить("П000210003010", "УлицаТип");
		Соотв.Вставить("ПС00210003010", "УлицаСокращение");
		Соотв.Вставить("П000210003011", "Улица");
		
		Соотв.Вставить("П000210003015", "ПомещениеВЗданииТип");
		Соотв.Вставить("П000210003016", "ПомещениеВЗданииНомер");
		
		Соотв.Вставить("П000210003017", "ПомещениеВКвартиреТип");
		Соотв.Вставить("П000210003018", "ПомещениеВКвартиреНомер");
		
		// Многострочные данные (здание, сооружение, объект незавершенного строительства).
		//
		Здания = Новый Массив;
		Здания.Добавить("Здания");
		Здания.Добавить(Новый Структура("П00021М103013, П00021М103014", "ЗданиеТип", "ЗданиеНомер"));
		Соотв.Вставить("П00021М1", Здания);
		
	КонецЕсли;
	
	Возврат Соотв;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресВМестеХраненияИВТабличномДокументе(Результат)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ИмяТекРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
			
			СохранитьДанныеРаздела(ИмяТекРаздела);
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
			Если ТипЗнч(ТекВетка) = Тип("СтрокаДереваЗначений") Тогда
				
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("Адрес", Результат.Значение);
				ПараметрыЗаполнения.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
				СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяТекРаздела));
				
				РегламентированнаяОтчетность.ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(ТекВетка, ПараметрыЗаполнения);
				
			КонецЕсли;
			
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
			
			ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2"
		ИЛИ ИмяРаздела = "Раздел21"
		ИЛИ ИмяРаздела = "Раздел3" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
		Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2"
		ИЛИ ИмяРаздела = "Раздел21"
		ИЛИ ИмяРаздела = "Раздел3" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительныеСтрокиВРазделе21()
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00021М1_2");
	
	Пока Обл <> Неопределено Цикл
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = Обл;
		
		УдалитьДопСтрокуНаСервере();
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00021М1_2");
		
	КонецЦикла;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000020015003, ОбластьИмя) > 0 Тогда
					
					// Стр. 150 = (Сумма по графе 3 строк с 020 по 140) / 13.
					//
					Строка150 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020002003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020003003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020004003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020005003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020006003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020007003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020008003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020009003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020010003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020011003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020012003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020013003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020014003"].Значение)) / 13;
					
					Форма.ТабличныйДокумент.Области["П000020015003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка150);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000020017003, ОбластьИмя) > 0 Тогда
					
					// Стр. 170 = (Сумма по графе 4 строк с 020 по 140) / 13.
					//
					Строка170 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020002004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020003004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020004004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020005004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020006004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020007004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020008004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020009004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020010004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020011004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020012004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020013004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020014004"].Значение)) / 13;
					
					Форма.ТабличныйДокумент.Области["П000020017003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка170);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000020019003, ОбластьИмя) > 0 Тогда
					
					// Стр. 190 = Стр. 150 - Стр. 170.
					//
					Строка190 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020015003"].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020017003"].Значение);
					
					КодВидаИмущества = СокрЛП(Форма.ТабличныйДокумент.Области["П000020000101"].Значение);
					
					Если КодВидаИмущества = "02" Тогда
						
						// Стр. 190 = (Стр. 150 - Стр. 170) х Стр. 180.
						//
						Строка180 = ?(Форма.ТабличныйДокумент.Области["П000020018003_Знам"].Значение = 0, 0,
						Форма.ТабличныйДокумент.Области["П000020018003_Числ"].Значение
						/ Форма.ТабличныйДокумент.Области["П000020018003_Знам"].Значение);
						
						Форма.ТабличныйДокумент.Области["П000020019003"].Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Строка190 * Строка180);
						
					Иначе
						
						Форма.ТабличныйДокумент.Области["П000020019003"].Значение = Строка190;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000020022003, ОбластьИмя) > 0 Тогда
					
					// Стр. 220 = Стр. 190 х Стр. 210 / 100.
					//
					Строка220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000020019003"].Значение)
					* Форма.ТабличныйДокумент.Области["П000020021003"].Значение;
					
					КодВидаИмущества = СокрЛП(Форма.ТабличныйДокумент.Области["П000020000101"].Значение);
					
					Если КодВидаИмущества = "09" Тогда
						
						// Стр. 220 = Стр. 190 х Стр. 210 х Стр. 215 / 100.
						//
						Строка215 = СокрЛП(Форма.ТабличныйДокумент.Области["П000020021503"].Значение);
						Строка215 = ?(Строка215 = "", 1, Число(Строка215));
						
						Строка220 = Строка220 * Строка215;
						
					КонецЕсли;
					
					Форма.ТабличныйДокумент.Области["П000020022003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Строка220 / 100);
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000030006003, ОбластьИмя) > 0 Тогда
					
					// Стр. 060 = (Стр. 020 - Стр. 025) х Стр. 030 х Стр. 050.
					//
					Строка030 = ?(Форма.ТабличныйДокумент.Области["П000030003003_Знам"].Значение = 0, 1,
					Форма.ТабличныйДокумент.Области["П000030003003_Числ"].Значение
					/ Форма.ТабличныйДокумент.Области["П000030003003_Знам"].Значение);
					
					Строка050 = ?(Форма.ТабличныйДокумент.Области["П000030005003_Знам"].Значение = 0, 1,
					Форма.ТабличныйДокумент.Области["П000030005003_Числ"].Значение
					/ Форма.ТабличныйДокумент.Области["П000030005003_Знам"].Значение);
					
					Строка060 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000030002003"].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000030002503"].Значение))
					* Строка030 * Строка050;
					
					Форма.ТабличныйДокумент.Области["П000030006003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Строка060);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000030010003, ОбластьИмя) > 0 Тогда
					
					// Стр. 100 = Стр. 060 х Стр. 080 х Стр. 090 х Стр. 095 / 100.
					//
					Строка090 = Форма.ТабличныйДокумент.Области["П000030009003"].Значение;
					Строка090 = ?(Строка090 = 0, 1, Строка090);
					
					Строка095 = Форма.ТабличныйДокумент.Области["П000030009503"].Значение;
					Строка095 = ?(Строка095 = 0, 1, Строка095);
					
					Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000030006003"].Значение)
					* Форма.ТабличныйДокумент.Области["П000030008003"].Значение * Строка090 * Строка095 / 100;
					
					Форма.ТабличныйДокумент.Области["П000030010003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Строка100);
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого ВеткаР2 Из ДеревоДанных.Строки Цикл
			
			Если ВеткаР2 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР2.Данные Цикл
					ВеткаР2.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			// Стр. 150 = (Сумма по графе 3 строк с 020 по 140) / 13.
			//
			Строка150 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020002003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020003003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020004003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020005003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020006003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020007003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020008003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020009003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020010003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020011003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020012003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020013003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020014003"])) / 13;
			
			ВеткаР2.Данные.Вставить("П000020015003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка150));
			
			// Стр. 170 = (Сумма по графе 4 строк с 020 по 140) / 13.
			//
			Строка170 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020002004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020003004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020004004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020005004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020006004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020007004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020008004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020009004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020010004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020011004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020012004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020013004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020014004"])) / 13;
			
			ВеткаР2.Данные.Вставить("П000020017003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка170));
			
			// Стр. 190 = Стр. 150 - Стр. 170.
			//
			Строка190 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020015003"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020017003"]);
			
			КодВидаИмущества = СокрЛП(ВеткаР2.Данные["П000020000101"]);
			
			Если КодВидаИмущества = "02" Тогда
				
				// Стр. 190 = (Стр. 150 - Стр. 170) х Стр. 180.
				//
				Строка180 = ?(ВеткаР2.Данные["П000020018003_Знам"] = 0, 0,
				ВеткаР2.Данные["П000020018003_Числ"] / ВеткаР2.Данные["П000020018003_Знам"]);
				
				ВеткаР2.Данные.Вставить("П000020019003",
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Строка190 * Строка180));
				
			Иначе
				
				ВеткаР2.Данные.Вставить("П000020019003", Строка190);
				
			КонецЕсли;
			
			// Стр. 220 = Стр. 190 х Стр. 210 / 100.
			//
			Строка220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020019003"]) * ВеткаР2.Данные["П000020021003"];
			
			КодВидаИмущества = СокрЛП(ВеткаР2.Данные["П000020000101"]);
			
			Если КодВидаИмущества = "09" Тогда
				
				// Стр. 220 = Стр. 190 х Стр. 210 х Стр. 215 / 100.
				//
				Строка215 = СокрЛП(ВеткаР2.Данные["П000020021503"]);
				Строка215 = ?(Строка215 = "", 1, Число(Строка215));
				
				Строка220 = Строка220 * Строка215;
				
			КонецЕсли;
			
			ВеткаР2.Данные.Вставить("П000020022003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, Строка220 / 100));
			
			Если ВеткаР2 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР2.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого ВеткаР3 Из ДеревоДанных.Строки Цикл
			
			Если ВеткаР3 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР3.Данные Цикл
					ВеткаР3.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			// Стр. 060 = (Стр. 020 - Стр. 025) х Стр. 030 х Стр. 050.
			//
			Строка030 = ?(ВеткаР3.Данные["П000030003003_Знам"] = 0, 1,
			ВеткаР3.Данные["П000030003003_Числ"] / ВеткаР3.Данные["П000030003003_Знам"]);
			
			Строка050 = ?(ВеткаР3.Данные["П000030005003_Знам"] = 0, 1,
			ВеткаР3.Данные["П000030005003_Числ"] / ВеткаР3.Данные["П000030005003_Знам"]);
			
			Строка060 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР3.Данные["П000030002003"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР3.Данные["П000030002503"])) * Строка030 * Строка050;
			
			ВеткаР3.Данные.Вставить("П000030006003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка060));
			
			// Стр. 100 = Стр. 060 х Стр. 080 х Стр. 090 х Стр. 095 / 100.
			//
			Строка090 = ВеткаР3.Данные["П000030009003"];
			Строка090 = ?(Строка090 = 0, 1, Строка090);
			
			Строка095 = ВеткаР3.Данные["П000030009503"];
			Строка095 = ?(Строка095 = 0, 1, Строка095);
			
			Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
			ВеткаР3.Данные["П000030006003"]) * ВеткаР3.Данные["П000030008003"] * Строка090 * Строка095 / 100;
			
			ВеткаР3.Данные.Вставить("П000030010003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка100));
			
			Если ВеткаР3 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР3.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные()
	
	СформироватьРаздел1();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1()
	
	ИнициализироватьМногоуровневыйРаздел("Раздел1");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ОКТМО");
	ТЗ.Колонки.Добавить("КБК");
	ТЗ.Колонки.Добавить("Сумма");
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	Для каждого ВеткаРаздел2 Из ДеревоДанныхРаздел2.Строки Цикл
		
		ДанныеВеткиРаздел2 = ВеткаРаздел2.Данные;
		
		НоваяСтрокаТЗ = ТЗ.Добавить();
		
		НоваяСтрокаТЗ.ОКТМО = СокрЛП(ДанныеВеткиРаздел2["П000020001001"]);
		НоваяСтрокаТЗ.КБК   = СокрЛП(ДанныеВеткиРаздел2["П000020001100"]);
		
		Стр220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ЭтаФорма, ДанныеВеткиРаздел2["П000020022003"]);
		Стр230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ЭтаФорма, ДанныеВеткиРаздел2["П000020023003"]);
		Стр250 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ЭтаФорма, ДанныеВеткиРаздел2["П000020025003"]);
		Стр260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ЭтаФорма, ДанныеВеткиРаздел2["П000020026003"]);
		
		Если СокрЛП(ДанныеВеткиРаздел2["П000020000101"]) = "04" Тогда
			НоваяСтрокаТЗ.Сумма = - Мин(Стр220 - Стр250, Стр260);
		Иначе
			НоваяСтрокаТЗ.Сумма = Стр220 - (Стр230 + Стр250);
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	Для каждого ВеткаРаздел3 Из ДеревоДанныхРаздел3.Строки Цикл
		
		ДанныеВеткиРаздел3 = ВеткаРаздел3.Данные;
		
		НоваяСтрокаТЗ = ТЗ.Добавить();
		
		НоваяСтрокаТЗ.ОКТМО = СокрЛП(ДанныеВеткиРаздел3["П000030001001"]);
		НоваяСтрокаТЗ.КБК   = СокрЛП(ДанныеВеткиРаздел3["П000030001100"]);
		
		Стр100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ЭтаФорма, ДанныеВеткиРаздел3["П000030010003"]);
		Стр110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ЭтаФорма, ДанныеВеткиРаздел3["П000030011003"]);
		Стр130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ЭтаФорма, ДанныеВеткиРаздел3["П000030013003"]);
		
		НоваяСтрокаТЗ.Сумма = Стр100 - (Стр110 + Стр130);
		
	КонецЦикла;
	
	ТЗ.Свернуть("ОКТМО, КБК", "Сумма");
	
	ТЗКоличествоСтрок = ТЗ.Количество();
	
	Для Инд = 0 По ТЗКоличествоСтрок - 1 Цикл
		ОбрИнд = ТЗКоличествоСтрок - 1 - Инд;
		СтрокаТЗ = ТЗ[ОбрИнд];
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ОКТМО)
		   И НЕ ЗначениеЗаполнено(СтрокаТЗ.КБК)
		   И НЕ ЗначениеЗаполнено(СтрокаТЗ.Сумма) Тогда
			ТЗ.Удалить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	ДеревоДанныхРаздел1 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	ДанныеМногострочнойЧастиРаздела1
	= ДеревоДанныхРаздел1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
	
	Для Инд = 0 По ТЗ.Количество() - 1 Цикл
		
		СтрокаТЗ = ТЗ[Инд];
		
		Если Инд = 0 Тогда
			СтрокаМногострочнойЧастиРаздела1 = ДанныеМногострочнойЧастиРаздела1.Строки[0];
		Иначе
			СтрокаМногострочнойЧастиРаздела1 = ДанныеМногострочнойЧастиРаздела1.Строки.Добавить();
			СтрокаМногострочнойЧастиРаздела1.Данные = Новый Структура;
			СтрокаМногострочнойЧастиРаздела1.ДанныеМногострочныхЧастей = Новый Структура;
		КонецЕсли;
		
		ДанныеСтрокиМногострочнойЧастиРаздела1 = СтрокаМногострочнойЧастиРаздела1.Данные;
		
		ДанныеСтрокиМногострочнойЧастиРаздела1.Вставить("П000010001003", СтрокаТЗ.ОКТМО);
		ДанныеСтрокиМногострочнойЧастиРаздела1.Вставить("П000010002003", СтрокаТЗ.КБК);
		ДанныеСтрокиМногострочнойЧастиРаздела1.Вставить("П000010003003", Макс(СтрокаТЗ.Сумма, 0));
		ДанныеСтрокиМногострочнойЧастиРаздела1.Вставить("П000010004003", - Мин(СтрокаТЗ.Сумма, 0));
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел1,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
		НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
		ВывестиДанныеВТабличныйДокумент("Раздел1", НовыеНомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 2.
	Структ = Новый Структура;
	Структ.Вставить("П000020015003", "П000020002003;П000020003003;П000020004003;П000020005003;П000020006003;П000020007003;П000020008003;П000020009003;П000020010003;П000020011003;П000020012003;П000020013003;П000020014003");
	Структ.Вставить("П000020017003", "П000020002004;П000020003004;П000020004004;П000020005004;П000020006004;П000020007004;П000020008004;П000020009004;П000020010004;П000020011004;П000020012004;П000020013004;П000020014004");
	Структ.Вставить("П000020019003", "П000020000101;П000020002003;П000020003003;П000020004003;П000020005003;П000020006003;П000020007003;П000020008003;П000020009003;П000020010003;П000020011003;П000020012003;П000020013003;П000020014003;П000020002004;П000020003004;П000020004004;П000020005004;П000020006004;П000020007004;П000020008004;П000020009004;П000020010004;П000020011004;П000020012004;П000020013004;П000020014004;П000020018003_Числ;П000020018003_Знам");
	Структ.Вставить("П000020022003", "П000020000101;П000020002003;П000020003003;П000020004003;П000020005003;П000020006003;П000020007003;П000020008003;П000020009003;П000020010003;П000020011003;П000020012003;П000020013003;П000020014003;П000020002004;П000020003004;П000020004004;П000020005004;П000020006004;П000020007004;П000020008004;П000020009004;П000020010004;П000020011004;П000020012004;П000020013004;П000020014004;П000020018003_Числ;П000020018003_Знам;П000020021003;П000020021503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2", Структ);
	
	// Раздел 3.
	Структ = Новый Структура;
	Структ.Вставить("П000030006003", "П000030002003;П000030002503;П000030003003_Числ;П000030003003_Знам;П000030005003_Числ;П000030005003_Знам");
	Структ.Вставить("П000030010003", "П000030002003;П000030002503;П000030003003_Числ;П000030003003_Знам;П000030005003_Числ;П000030005003_Знам;П000030008003;П000030009003;П000030009503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел3", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки505");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки505");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаПодписи",  Титульный.ДатаПодписи);
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
	СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ИмущНД");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_IMUD"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("245");
	ВозможныеКодыПоМесту.Добавить("281");
	
	ВозможныеКодыПериода = Новый Массив;
	ВозможныеКодыПериода.Добавить("34");
	ВозможныеКодыПериода.Добавить("50");
	
	ВозможныеКодыФормыРеорганизции = Новый Массив;
	ВозможныеКодыФормыРеорганизции.Добавить("0");
	ВозможныеКодыФормыРеорганизции.Добавить("1");
	ВозможныеКодыФормыРеорганизции.Добавить("2");
	ВозможныеКодыФормыРеорганизции.Добавить("3");
	ВозможныеКодыФормыРеорганизции.Добавить("5");
	ВозможныеКодыФормыРеорганизции.Добавить("6");
	
	// Титульный лист.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС("Не задан ИНН налогоплательщика.",
		"Титульный", "ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
		СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр.",
		"Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС("Не задан КПП налогоплательщика.",
		"Титульный", "КПП");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов.",
		"Титульный", "КПП");
		СтатусПроверки = Ложь;
	Иначе
		Символы56КПП = Сред(ПараметрыВыгрузки.КПП, 5, 2);
		Если Символы56КПП = "50" Тогда
			СообщитьВТС("5-й и 6-й символы КПП налогоплательщика не должны быть равны ""50"".",
			"Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС("Не задано наименование налогоплательщика.",
		"Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа.",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр.",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места, по которому представляется налоговый расчет.",
		"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код места, по которому представляется налоговый расчет.",
		"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода.",
		"Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код налогового периода.",
		"Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС("Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя.",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации.",
			"Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС("Задано некорректное значение кода формы реорганизации.",
				"Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации.",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации.",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				Иначе
					Символы56КПП = Сред(ПараметрыВыгрузки.КППРеорг, 5, 2);
					Если Символы56КПП = "50" Тогда
						СообщитьВТС("5-й и 6-й символы КПП реорганизованной организации не должны быть равны ""50"".",
						"Титульный", "КППРеорганизованнойОрганизации");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Таблица для проверки сочетаний ОКТМО и КБК раздела 1 с разделами 2 или 3.
	СочетаниеРазделов = Новый ТаблицаЗначений;
	СочетаниеРазделов.Колонки.Добавить("ОКТМО");
	СочетаниеРазделов.Колонки.Добавить("КБК");
	СочетаниеРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Страница", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("ИмяОбласти");
	СочетаниеРазделов.Колонки.Добавить("Счетчик1",  Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик2",  Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик21", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик3",  Новый ОписаниеТипов("Число"));
	
	СочетаниеРазделов.Индексы.Добавить("Раздел");
	
	// Раздел 1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1;
	ДанныеМногострочнойЧастиРаздела1
	= ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
	
	НомерСтраницы = 1;
	
	Для каждого СтрокаМнЧРаздела1 Из ДанныеМногострочнойЧастиРаздела1.Строки Цикл
		
		ЗаполненаСтрокаМнЧРаздела1 = Ложь;
		Для каждого Эл Из СтрокаМнЧРаздела1.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтрокаМнЧРаздела1 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненаСтрокаМнЧРаздела1 Тогда
			
			НомСтроки = Формат(ДанныеМногострочнойЧастиРаздела1.Строки.Индекс(СтрокаМнЧРаздела1) + 1, "ЧГ=");
			
			ИмяПокОКТМО = "П000010001003";
			ИмяПокКБК   = "П000010002003";
			
			ИмяОблОКТМО = ИмяПокОКТМО + "_" + НомСтроки;
			ИмяОблКБК   = ИмяПокКБК   + "_" + НомСтроки;
			
			ОКТМО = СокрЛП(СтрокаМнЧРаздела1.Данные[ИмяПокОКТМО]);
			КБК   = СокрЛП(СтрокаМнЧРаздела1.Данные[ИмяПокКБК]);
			
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщитьВТС("В строке " + НомСтроки + " раздела 1 не" + ?(ДлинаОКТМО = 0,
				"", "верно") + " задан код по ОКТМО.", "Раздел1", ИмяОблОКТМО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("В строке " + НомСтроки + " раздела 1 не" + ?(ДлинаКБК = 0,
				"", "верно") + " задан КБК.", "Раздел1", ИмяОблКБК, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаМнЧРаздела1.Данные["П000010003003"])
				И ЗначениеЗаполнено(СтрокаМнЧРаздела1.Данные["П000010004003"]) Тогда
				СообщитьВТС("В строке " + НомСтроки + " раздела 1 одновременно заданы строки 030 и 040.",
				"Раздел1", "П000010003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.КБК        = КБК;
			Сочетание.Раздел     = 1;
			Сочетание.Страница   = 1;
			Сочетание.ИмяОбласти = ИмяОблОКТМО;
			Сочетание.Счетчик1   = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 2.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел2;
	
	ВозможныеКодыВидаИмуществаРаздела2 = СтрРазделить("01,02,03,04,05,07,08,09,10", ",", Ложь);
	КодыВидаИмуществаРаздела2ДляСообщения = СтрСоединить(ВозможныеКодыВидаИмуществаРаздела2, """, """);
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		ЗаполненаСтраницаРаздела = Ложь;
		Для каждого Эл Из СтраницаРаздела.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтраницаРаздела = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненаСтраницаРаздела Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			КодВидаИмущества = СокрЛП(СтраницаРаздела.Данные.П000020000101);
			Если НЕ ЗначениеЗаполнено(КодВидаИмущества) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 не задан код вида имущества.",
				"Раздел2", "П000020000101", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКодыВидаИмуществаРаздела2.Найти(КодВидаИмущества) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 код вида имущества должен принимать одно из значений: """
				+ КодыВидаИмуществаРаздела2ДляСообщения + """.", "Раздел2", "П000020000101", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(СтраницаРаздела.Данные.П000020001001);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 не" + ?(ДлинаОКТМО = 0,
				"", "верно") + " задан код по ОКТМО.", "Раздел2", "П000020001001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБК = СокрЛП(СтраницаРаздела.Данные.П000020001100);
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 не" + ?(ДлинаКБК = 0,
				"", "верно") + " задан КБК.", "Раздел2", "П000020001100", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы.
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000020016003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 задан код налоговой льготы некорректной длины.",
				"Раздел2", "П000020016003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Доля балансовой стоимости.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000020018003_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000020018003_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000020018003_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2 не задан числитель в доле балансовой стоимости объекта недвижимого имущества на территории соответствующего субъекта Российской Федерации.",
					"Раздел2", "П000020018003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000020018003_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2 не задан знаменатель в доле балансовой стоимости объекта недвижимого имущества на территории соответствующего субъекта Российской Федерации.",
					"Раздел2", "П000020018003_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000020018003_Числ > СтраницаРаздела.Данные.П000020018003_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2 числитель больше знаменателя в доле балансовой стоимости объекта недвижимого имущества на территории соответствующего субъекта Российской Федерации.",
					"Раздел2", "П000020018003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли КодВидаИмущества = "02" Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 2 не задана доля балансовой стоимости объекта недвижимого имущества на территории соответствующего субъекта Российской Федерации.",
				"Раздел2", "П000020018003_Числ", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы (установленной в виде понижения налоговой ставки).
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000020020003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 2 задан код налоговой льготы (установленной в виде понижения налоговой ставки) некорректной длины.",
				"Раздел2", "П000020020003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет).
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000020024003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 2 задан код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет) некорректной длины.",
				"Раздел2", "П000020024003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО        = ОКТМО;
			Сочетание.КБК          = КБК;
			Сочетание.Раздел       = 2;
			Сочетание.Страница     = ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1;
			Сочетание.ИмяОбласти   = "П000020001001";
			Сочетание.Счетчик2     = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 2.1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел21;
	
	ВозможныеКоды1_3 = СтрРазделить("1,2,3", ",", Ложь);
	КодыКоды1_3ДляСообщения = СтрСоединить(ВозможныеКоды1_3, """, """);
	
	ВозможныеКоды1_4 = СтрРазделить("1,2,3,4", ",", Ложь);
	КодыКоды1_4ДляСообщения = СтрСоединить(ВозможныеКоды1_4, """, """);
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		ЗаполненаСтраницаРаздела = Ложь;
		Для каждого Эл Из СтраницаРаздела.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтраницаРаздела = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеМногострочнойЧастиРаздела21 = СтраницаРаздела.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы21];
		
		Если НЕ ЗаполненаСтраницаРаздела Тогда
			Для каждого СтрокаМнЧРаздела21 Из ДанныеМногострочнойЧастиРаздела21.Строки Цикл
				Для каждого Эл Из СтрокаМнЧРаздела21.Данные Цикл
					Если ЗначениеЗаполнено(Эл.Значение) Тогда
						ЗаполненаСтраницаРаздела = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЗаполненаСтраницаРаздела Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗаполненаСтраницаРаздела Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			ОКТМО = СокрЛП(СтраницаРаздела.Данные.П000210001000);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не" + ?(ДлинаОКТМО = 0,
				"", "верно") + " задан код по ОКТМО.", "Раздел21", "П000210001000", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБК = СокрЛП(СтраницаРаздела.Данные.П000210001100);
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не" + ?(ДлинаКБК = 0,
				"", "верно") + " задан КБК.", "Раздел21", "П000210001100", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодНомОбъект = СокрЛП(СтраницаРаздела.Данные.П000210001001);
			Если НЕ ЗначениеЗаполнено(КодНомОбъект) Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 2.1 не задан код номера объекта.",
				"Раздел21", "П000210001001", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКоды1_4.Найти(КодНомОбъект) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 2.1 код номера объекта должен принимать одно из значений: """
				+ КодыКоды1_4ДляСообщения + """.", "Раздел21", "П000210001001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомОбъект = СокрЛП(СтраницаРаздела.Данные.П000210002001);
			Если НЕ ЗначениеЗаполнено(НомОбъект) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан номер объекта.",
				"Раздел21", "П000210002001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если КодНомОбъект = "3" Тогда
				
				ИндексОб = СокрЛП(СтраницаРаздела.Данные.П000210003000);
				Если ЗначениеЗаполнено(ИндексОб) И СтрДлина(ИндексОб) <> 6 Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.1 задан индекс, не состоящий из 6 цифр.",
					"Раздел21", "П000210003000", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				КодРегиона = СокрЛП(СтраницаРаздела.Данные.П000210003001);
				ДлинаКодРегиона = СтрДлина(КодРегиона);
				Если ДлинаКодРегиона <> 2 Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не" + ?(ДлинаКодРегиона = 0, "", "верно")
					+ " задан код субъекта Россиийской Федерации.", "Раздел21", "П000210003001", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				МуниципВид = СокрЛП(СтраницаРаздела.Данные.П000210003002);
				Если НЕ ЗначениеЗаполнено(МуниципВид) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.1 не задан вид муниципального образования.",
					"Раздел21", "П000210003002", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозможныеКоды1_3.Найти(МуниципВид) = Неопределено Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.1 вид муниципального образования должен принимать одно из значений: """
					+ КодыКоды1_3ДляСообщения + """.", "Раздел21", "П000210003002", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				МуниципНаим = СокрЛП(СтраницаРаздела.Данные.П000210003003);
				Если НЕ ЗначениеЗаполнено(МуниципНаим) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.1 не задано наименование муниципального образования.",
					"Раздел21", "П000210003003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ПоселенВид  = СокрЛП(СтраницаРаздела.Данные.П000210003004);
				ПоселенНаим = СокрЛП(СтраницаРаздела.Данные.П000210003005);
				Если ЗначениеЗаполнено(ПоселенВид) ИЛИ ЗначениеЗаполнено(ПоселенНаим) Тогда
					Если НЕ ЗначениеЗаполнено(ПоселенВид) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан вид поселения (территории).",
						"Раздел21", "П000210003004", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеКоды1_4.Найти(ПоселенВид) = Неопределено Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 вид поселения (территории) должен принимать одно из значений: """
						+ КодыКоды1_4ДляСообщения + """.", "Раздел21", "П000210003004", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ПоселенНаим) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задано наименование поселения (территории).",
						"Раздел21", "П000210003005", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				НаселенПунктВид  = СокрЛП(СтраницаРаздела.Данные.П000210003006);
				НаселенПунктНаим = СокрЛП(СтраницаРаздела.Данные.П000210003007);
				Если ЗначениеЗаполнено(НаселенПунктВид) ИЛИ ЗначениеЗаполнено(НаселенПунктНаим) Тогда
					Если НЕ ЗначениеЗаполнено(НаселенПунктВид) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан вид населенного пункта.",
						"Раздел21", "П000210003006", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НаселенПунктНаим) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задано наименование населенного пункта.",
						"Раздел21", "П000210003007", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ЭлПланСтруктурТип  = СокрЛП(СтраницаРаздела.Данные.П000210003008);
				ЭлПланСтруктурНаим = СокрЛП(СтраницаРаздела.Данные.П000210003009);
				Если ЗначениеЗаполнено(ЭлПланСтруктурТип) ИЛИ ЗначениеЗаполнено(ЭлПланСтруктурНаим) Тогда
					Если НЕ ЗначениеЗаполнено(ЭлПланСтруктурТип) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан тип элемента планировочной структуры.",
						"Раздел21", "П000210003008", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ЭлПланСтруктурНаим) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задано наименование элемента планировочной структуры.",
						"Раздел21", "П000210003009", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ЭлУлДорСетиТип  = СокрЛП(СтраницаРаздела.Данные.П000210003010);
				ЭлУлДорСетиНаим = СокрЛП(СтраницаРаздела.Данные.П000210003011);
				Если ЗначениеЗаполнено(ЭлУлДорСетиТип) ИЛИ ЗначениеЗаполнено(ЭлУлДорСетиНаим) Тогда
					Если НЕ ЗначениеЗаполнено(ЭлУлДорСетиТип) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан тип элемента улично-дорожной сети.",
						"Раздел21", "П000210003010", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ЭлУлДорСетиНаим) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задано наименование элемента улично-дорожной сети.",
						"Раздел21", "П000210003011", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				КолСтрокРаздела21 = ДанныеМногострочнойЧастиРаздела21.Строки.Количество();
				Для каждого СтрокаМнЧРаздела21 Из ДанныеМногострочнойЧастиРаздела21.Строки Цикл
					ЗданиеТип   = СокрЛП(СтрокаМнЧРаздела21.Данные.П00021М103013);
					ЗданиеНомер = СокрЛП(СтрокаМнЧРаздела21.Данные.П00021М103014);
					Если ЗначениеЗаполнено(ЗданиеТип) ИЛИ ЗначениеЗаполнено(ЗданиеНомер) Тогда
						НомСтрМнЧ = Формат(ДанныеМногострочнойЧастиРаздела21.Строки.Индекс(СтрокаМнЧРаздела21) + 1, "ЧГ=");
						Если НЕ ЗначениеЗаполнено(ЗданиеТип) Тогда
							СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1" + ?(КолСтрокРаздела21 > 1,
							" в строке " + НомСтрМнЧ, "") + " не задан тип здания / сооружения / объекта незавершенного строительства.",
							"Раздел21", "П00021М103013_" + НомСтрМнЧ, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ЗданиеНомер) Тогда
							СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1" + ?(КолСтрокРаздела21 > 1,
							" в строке " + НомСтрМнЧ, "") + " не задан номер здания / сооружения / объекта незавершенного строительства.",
							"Раздел21", "П00021М103014_" + НомСтрМнЧ, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ПомещЗданияТип   = СокрЛП(СтраницаРаздела.Данные.П000210003015);
				ПомещЗданияНомер = СокрЛП(СтраницаРаздела.Данные.П000210003016);
				Если ЗначениеЗаполнено(ПомещЗданияТип) ИЛИ ЗначениеЗаполнено(ПомещЗданияНомер) Тогда
					Если НЕ ЗначениеЗаполнено(ПомещЗданияТип) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан тип помещения в пределах здания, сооружения / машино-места.",
						"Раздел21", "П000210003015", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ПомещЗданияНомер) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан номер помещения в пределах здания, сооружения / машино-места.",
						"Раздел21", "П000210003016", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ПомещКвартирыТип   = СокрЛП(СтраницаРаздела.Данные.П000210003017);
				ПомещКвартирыНомер = СокрЛП(СтраницаРаздела.Данные.П000210003018);
				Если ЗначениеЗаполнено(ПомещКвартирыТип) ИЛИ ЗначениеЗаполнено(ПомещКвартирыНомер) Тогда
					Если НЕ ЗначениеЗаполнено(ПомещКвартирыТип) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан тип помещения в пределах квартиры.",
						"Раздел21", "П000210003017", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ПомещКвартирыНомер) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан номер помещения в пределах квартиры.",
						"Раздел21", "П000210003018", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ВывестиСообщение_ЗаполненаСтрока030 = Ложь;
				ИмяПок = Неопределено;
				
				Для Ном = 0 По 18 Цикл
					Если Ном = 13 ИЛИ Ном = 14 Тогда
						Продолжить;
					КонецЕсли;
					ИмяПок = "П0002100030" + Формат(Ном, "ЧЦ=2;ЧВН=;ЧН=");
					Если ЗначениеЗаполнено(СтраницаРаздела.Данные[ИмяПок]) Тогда
						ВывестиСообщение_ЗаполненаСтрока030 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ВывестиСообщение_ЗаполненаСтрока030 Тогда
					Для каждого СтрокаМнЧРаздела21 Из ДанныеМногострочнойЧастиРаздела21.Строки Цикл
						Для каждого Эл Из СтрокаМнЧРаздела21.Данные Цикл
							Если ЗначениеЗаполнено(Эл.Значение) Тогда
								ИмяПок = Эл.Ключ + "_"
								+ Формат(ДанныеМногострочнойЧастиРаздела21.Строки.Индекс(СтрокаМнЧРаздела21) + 1, "ЧГ=");
								ВывестиСообщение_ЗаполненаСтрока030 = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ВывестиСообщение_ЗаполненаСтрока030 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ВывестиСообщение_ЗаполненаСтрока030 Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.1 строка 030 не должна быть заполнена, если значение в строке 010 не равно ""3"".",
					"Раздел21", ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			КодОКОФ = СокрЛП(СтраницаРаздела.Данные.П000210004003);
			КодОКОФ = СтрЗаменить(КодОКОФ, " ", "");
			Если НЕ ЗначениеЗаполнено(КодОКОФ) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан код ОКОФ.",
				"Раздел21", "П000210004003", НомСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ШаблоныОКОФ = Неопределено;
				Если НЕ ОКОФСоответствуетШаблонам(КодОКОФ, ШаблоныОКОФ) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.1 задан некорректный код ОКОФ. Допустимы значения, соответствующие шаблонам: """
					+ СтрЗаменить(СтрСоединить(ШаблоныОКОФ, """, """), "9", "Х") + """ (Х - любая цифра).",
					"Раздел21", "П000210004003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.КБК        = КБК;
			Сочетание.Раздел     = 21;
			Сочетание.Страница   = ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1;
			Сочетание.ИмяОбласти = "П000210001000";
			Сочетание.Счетчик21  = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 3.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел3;
	
	ВозможныеКодыВидаИмуществаРаздела3 = СтрРазделить("11,12,13", ",", Ложь);
	КодыВидаИмуществаРаздела3ДляСообщения = СтрСоединить(ВозможныеКодыВидаИмуществаРаздела3, """, """);
	
	ВозможныеКоды1_2 = СтрРазделить("1,2", ",", Ложь);
	КодыКоды1_2ДляСообщения = СтрСоединить(ВозможныеКоды1_2, """, """);
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		ЗаполненаСтраницаРаздела = Ложь;
		Для каждого Эл Из СтраницаРаздела.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтраницаРаздела = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненаСтраницаРаздела Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			КодВидаИмущества = СокрЛП(СтраницаРаздела.Данные.П000030000101);
			Если НЕ ЗначениеЗаполнено(КодВидаИмущества) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан код вида имущества.",
				"Раздел3", "П000030000101", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКодыВидаИмуществаРаздела3.Найти(КодВидаИмущества) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 3 код вида имущества должен принимать одно из значений: """
				+ КодыВидаИмуществаРаздела3ДляСообщения + """.", "Раздел3", "П000030000101", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(СтраницаРаздела.Данные.П000030001001);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не" + ?(ДлинаОКТМО = 0,
				"", "верно") + " задан код по ОКТМО.", "Раздел3", "П000030001001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБК = СокрЛП(СтраницаРаздела.Данные.П000030001100);
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не" + ?(ДлинаКБК = 0,
				"", "верно") + " задан КБК.", "Раздел3", "П000030001100", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаСведений = СокрЛП(СтраницаРаздела.Данные.П000030001401);
			Если НЕ ЗначениеЗаполнено(КодВидаСведений) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан код вида сведений.",
				"Раздел3", "П000030001401", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКоды1_2.Найти(КодВидаСведений) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 3 код вида сведений должен принимать одно из значений: """
				+ КодыКоды1_2ДляСообщения + """.", "Раздел3", "П000030001401", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Кадастровый номер.
			Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030001501) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан кадастровый номер.",
				"Раздел3", "П000030001501", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Доля в праве общей собственности.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003003_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003003_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003003_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 не задан числитель в доле в праве общей собственности.",
					"Раздел3", "П000030003003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003003_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 не задан знаменатель в доле в праве общей собственности.",
					"Раздел3", "П000030003003_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000030003003_Числ > СтраницаРаздела.Данные.П000030003003_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 числитель больше знаменателя в доле в праве общей собственности.",
					"Раздел3", "П000030003003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Доля кадастровой стоимости здания.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003503_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003503_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003503_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 не задан числитель в доле кадастровой стоимости здания.",
					"Раздел3", "П000030003503_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003503_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 не задан знаменатель в доле кадастровой стоимости здания.",
					"Раздел3", "П000030003503_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000030003503_Числ > СтраницаРаздела.Данные.П000030003503_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 числитель больше знаменателя в доле кадастровой стоимости здания.",
					"Раздел3", "П000030003503_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Код налоговой льготы.
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000030004003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 задан код налоговой льготы некорректной длины.",
				"Раздел3", "П000030004003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Доля кадастровой стоимости объекта недвижимого имущества на территории субъекта Российской Федерации.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030005003_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030005003_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030005003_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 не задан числитель в доле кадастровой стоимости объекта недвижимого имущества на территории субъекта Российской Федерации.",
					"Раздел3", "П000030005003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030005003_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 не задан знаменатель в доле кадастровой стоимости объекта недвижимого имущества на территории субъекта Российской Федерации.",
					"Раздел3", "П000030005003_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000030005003_Числ > СтраницаРаздела.Данные.П000030005003_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 числитель больше знаменателя в доле кадастровой стоимости объекта недвижимого имущества на территории субъекта Российской Федерации.",
					"Раздел3", "П000030005003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Код льготы (установленной в виде понижения налоговой ставки).
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000030007003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 3 задан код налоговой льготы (установленной в виде понижения налоговой ставки) некорректной длины.",
				"Раздел3", "П000030007003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет).
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000030012003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 3 задан код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет) некорректной длины.",
				"Раздел3", "П000030012003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО = ОКТМО;
			Сочетание.КБК   = КБК;
			Сочетание.Раздел     = 3;
			Сочетание.Страница   = ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1;
			Сочетание.ИмяОбласти = "П000030000101";
			Сочетание.Счетчик3   = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сочетания разделов.
	СочетанияРаздела1  = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 1));
	СочетанияРаздела2  = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 2));
	СочетанияРаздела21 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 21));
	СочетанияРаздела3  = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 3));
	
	СокращеннаяПроверка = Ложь;
	
	Если СочетанияРаздела1.Количество() = 0 Тогда
		СообщитьВТС("В разделе 1 не заполнена ни одна группа строк 010-040.",
		"Раздел1", "П000010001003_1", 1);
		СтатусПроверки = Ложь;
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СочетанияРаздела2.Количество() = 0 И СочетанияРаздела3.Количество() = 0 Тогда
		СообщитьВТС("В налоговом расчете отсутствуют заполненные листы раздела 2 или раздела 3.",
		"Раздел2", "П000020000101", 1);
		СтатусПроверки = Ложь;
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СокращеннаяПроверка Тогда
		Возврат СтатусПроверки;
	КонецЕсли;
	
	ПовторенияРаздела1 = СочетаниеРазделов.Скопировать(СочетанияРаздела1);
	ПовторенияРаздела1.Свернуть("ОКТМО, КБК", "Счетчик1");
	
	Для Каждого СтрокаПроверки Из ПовторенияРаздела1 Цикл
		Если СтрокаПроверки.Счетчик1 > 1 И ЗначениеЗаполнено(СтрокаПроверки.ОКТМО) И ЗначениеЗаполнено(СтрокаПроверки.КБК) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, КБК, Раздел", СтрокаПроверки.ОКТМО, СтрокаПроверки.КБК, 1);
			СтрокиДубликатов = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			ТаблицаДубликатов = СочетаниеРазделов.Скопировать(СтрокиДубликатов);
			ТаблицаДубликатов.Сортировать("Страница, ИмяОбласти");
			
			ПозицияПерехода = ТаблицаДубликатов[0].ИмяОбласти;
			
			ТаблицаДубликатов.Свернуть("Страница");
			ТаблицаДубликатов.Сортировать("Страница");
			
			СообщитьВТС("В разделе 1 обнаружены дублирующиеся сочетания кода по ОКТМО """ + СтрокаПроверки.ОКТМО
			+ """ и КБК """ + СтрокаПроверки.КБК + """.",
			"Раздел1", ПозицияПерехода, 1);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СочетаниеРазделовСвернутое = СочетаниеРазделов.Скопировать();
	СочетаниеРазделовСвернутое.Свернуть("ОКТМО, КБК", "Счетчик1, Счетчик2, Счетчик21, Счетчик3");
	
	Для Каждого Сочетание Из СочетаниеРазделовСвернутое Цикл
		
		Если Сочетание.Счетчик1 <> 0 И Сочетание.Счетчик2 = 0 И Сочетание.Счетчик3 = 0
			И ЗначениеЗаполнено(Сочетание.ОКТМО) И ЗначениеЗаполнено(Сочетание.КБК) Тогда
			
			// По ОКТМО и КБК группы строк 010-040 раздела 1 не найдены листы разделов 2 или 3.
			//
			УсловияПоиска = Новый Структура("ОКТМО, КБК, Раздел", Сочетание.ОКТМО, Сочетание.КБК, 1);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			ПозицияПерехода = НесвязанныеСтроки[0].ИмяОбласти;
			
			СообщитьВТС("По сочетанию кода по ОКТМО """ + Сочетание.ОКТМО + """ и КБК """
			+ Сочетание.КБК + """ раздела 1 не найдены соответствующие листы раздела 2 или раздела 3.",
			"Раздел1", ПозицияПерехода, 1);
			СтатусПроверки = Ложь;
			
		ИначеЕсли Сочетание.Счетчик1 = 0 Тогда
			
			Если Сочетание.Счетчик2 <> 0
				И ЗначениеЗаполнено(Сочетание.ОКТМО) И ЗначениеЗаполнено(Сочетание.КБК) Тогда
				
				// По ОКТМО и КБК раздела 2 не найдена группа строк 010-040 раздела 1.
				//
				УсловияПоиска = Новый Структура("ОКТМО, КБК, Раздел", Сочетание.ОКТМО, Сочетание.КБК, 2);
				НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
				
				СтраницаПерехода = НесвязанныеСтроки[0].Страница;
				ПозицияПерехода = "П000020001001";
				
				СообщитьВТС("По сочетанию кода по ОКТМО """ + Сочетание.ОКТМО + """ и КБК """
				+ Сочетание.КБК + """ на странице " + Формат(СтраницаПерехода, "ЧГ=")
				+ " раздела 2 не найдена соответствующая группа строк 010-040 в разделе 1.",
				"Раздел2", ПозицияПерехода, СтраницаПерехода);
				СтатусПроверки = Ложь;
				
			ИначеЕсли Сочетание.Счетчик21 <> 0
				И ЗначениеЗаполнено(Сочетание.ОКТМО) И ЗначениеЗаполнено(Сочетание.КБК) Тогда
				
				// По ОКТМО и КБК раздела 2.1 не найдена группа строк 010-040 раздела 1.
				//
				УсловияПоиска = Новый Структура("ОКТМО, КБК, Раздел", Сочетание.ОКТМО, Сочетание.КБК, 21);
				НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
				
				СтраницаПерехода = НесвязанныеСтроки[0].Страница;
				ПозицияПерехода = "П000210001000";
				
				СообщитьВТС("По сочетанию кода по ОКТМО """ + Сочетание.ОКТМО + """ и КБК """
				+ Сочетание.КБК + """ на странице " + Формат(СтраницаПерехода, "ЧГ=")
				+ " раздела 2.1 не найдена соответствующая группа строк 010-040 в разделе 1.",
				"Раздел21", ПозицияПерехода, СтраницаПерехода);
				СтатусПроверки = Ложь;
				
			ИначеЕсли Сочетание.Счетчик3 <> 0
				И ЗначениеЗаполнено(Сочетание.ОКТМО) И ЗначениеЗаполнено(Сочетание.КБК) Тогда
				
				// По ОКТМО и КБК раздела 3 не найдена группа строк 010-040 раздела 1.
				//
				УсловияПоиска = Новый Структура("ОКТМО, КБК, Раздел", Сочетание.ОКТМО, Сочетание.КБК, 3);
				НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
				
				СтраницаПерехода = НесвязанныеСтроки[0].Страница;
				ПозицияПерехода = "П000030001001";
				
				СообщитьВТС("По сочетанию кода по ОКТМО """ + Сочетание.ОКТМО + """ и КБК """
				+ Сочетание.КБК + """ на странице " + Формат(СтраницаПерехода, "ЧГ=")
				+ " раздела 3 не найдена соответствующая группа строк 010-040 в разделе 1.",
				"Раздел3", ПозицияПерехода, СтраницаПерехода);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ДеревоДанныхРаздел1  = ДанныеМногоуровневыхРазделов["Раздел1"];
	ДеревоДанныхРаздел2  = ДанныеМногоуровневыхРазделов["Раздел2"];
	ДеревоДанныхРаздел21 = ДанныеМногоуровневыхРазделов["Раздел21"];
	ДеревоДанныхРаздел3  = ДанныеМногоуровневыхРазделов["Раздел3"];
	
	// Раздел 1.
	//
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	
	ДанныеМногострочнойЧастиРаздела1
	= ДеревоДанныхРаздел1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
	
	Для каждого СтрокаМнЧРаздела1 Из ДанныеМногострочнойЧастиРаздела1.Строки Цикл
		
		ОКТМО_Р1 = СтрокаМнЧРаздела1.Данные["П000010001003"];
		КБК_Р1   = СтрокаМнЧРаздела1.Данные["П000010002003"];
		
		Если НЕ (ЗначениеЗаполнено(ОКТМО_Р1) И ЗначениеЗаполнено(КБК_Р1)) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкзСумНалПУ = СкопироватьУзел(УзелРодитель, СумНалПУ);
		Для каждого Эл Из ЭкзСумНалПУ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				Если Эл.Код = "НалПУ" Тогда
					СуммаНалога = СтрокаМнЧРаздела1.Данные["П000010003003"] - СтрокаМнЧРаздела1.Данные["П000010004003"];
					ВывестиПоказательВXML(Эл, СуммаНалога);
				Иначе
					ВывестиПоказательВXML(Эл, СтрокаМнЧРаздела1.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Раздел 2.
		//
		РасОбДеятРФ = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "РасОбДеятРФ");
		РасОб = ПолучитьПодчиненныйЭлемент(РасОбДеятРФ, "РасОб");
		
		Для каждого СтраницаРаздела Из ДеревоДанныхРаздел2.Строки Цикл
			
			ОКТМО_Р2 = СтраницаРаздела.Данные["П000020001001"];
			КБК_Р2   = СтраницаРаздела.Данные["П000020001100"];
			
			Если НЕ (ОКТМО_Р1 = ОКТМО_Р2 И КБК_Р1 = КБК_Р2) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭкзРасОб = СкопироватьУзел(РасОбДеятРФ, РасОб);
			Для каждого Эл Из ЭкзРасОб.Строки Цикл
				Если Эл.Код = "ВидИмущ" Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела.Данные[Эл.Ключ]);
				ИначеЕсли Эл.Код = "ДанРасСтПер" Тогда
					ЗаполнитьДаннымиУзел(СтраницаРаздела.Данные, Эл);
				ИначеЕсли Эл.Код = "РасчНал" Тогда
					Для каждого Эл_ Из Эл.Строки Цикл
						Если Эл_.Код = "КодНалЛьг" Тогда
							КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000020016003_КодЛьготы"]);
							Основание = СокрЛП(СтраницаРаздела.Данные["П000020016003_Основание"]);
							Если КодЛьготы = "2012000" Тогда
								ВывестиПоказательВXML(Эл_, КодЛьготы + "/" + Основание);
							Иначе
								ВывестиПоказательВXML(Эл_, КодЛьготы);
							КонецЕсли;
						ИначеЕсли Эл_.Код = "ДолСт" Тогда
							Числитель   = СтраницаРаздела.Данные["П000020018003_Числ"];
							Знаменатель = СтраницаРаздела.Данные["П000020018003_Знам"];
							Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
								ВывестиПоказательВXML(Эл_, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
							КонецЕсли;
						ИначеЕсли Эл_.Код = "КодЛгПНС" Тогда
							КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000020020003_КодЛьготы"]);
							Основание = СокрЛП(СтраницаРаздела.Данные["П000020020003_Основание"]);
							Если КодЛьготы = "2012400" Тогда
								ВывестиПоказательВXML(Эл_, КодЛьготы + "/" + Основание);
							Иначе
								ВывестиПоказательВXML(Эл_, КодЛьготы);
							КонецЕсли;
						ИначеЕсли Эл_.Код = "Кжд" Тогда
							Кжд = СтрЗаменить(СтраницаРаздела.Данные["П000020021503"], ",", ".");
							ВывестиПоказательВXML(Эл_, Кжд);
						ИначеЕсли Эл_.Код = "КодЛгУмен" Тогда
							КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000020024003_КодЛьготы"]);
							Основание = СокрЛП(СтраницаРаздела.Данные["П000020024003_Основание"]);
							Если КодЛьготы = "2012500" Тогда
								ВывестиПоказательВXML(Эл_, КодЛьготы + "/" + Основание);
							Иначе
								ВывестиПоказательВXML(Эл_, КодЛьготы);
							КонецЕсли;
						Иначе
							ВывестиПоказательВXML(Эл_, СтраницаРаздела.Данные[Эл_.Ключ]);
						Конецесли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Раздел 2.1.
		//
		ОбъектОблНал = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "ОбъектОблНал");
		ИнфОбъект = ПолучитьПодчиненныйЭлемент(ОбъектОблНал, "ИнфОбъект");
		
		Для каждого СтраницаРаздела Из ДеревоДанныхРаздел21.Строки Цикл
			
			ОКТМО_Р21 = СтраницаРаздела.Данные["П000210001000"];
			КБК_Р21   = СтраницаРаздела.Данные["П000210001100"];
			
			Если НЕ (ОКТМО_Р1 = ОКТМО_Р21 И КБК_Р1 = КБК_Р21) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭкзИнфОбъект = СкопироватьУзел(ОбъектОблНал, ИнфОбъект);
			
			Если СокрЛП(СтраницаРаздела.Данные["П000210001001"]) = "3" Тогда
				
				ЗаполнитьДаннымиУзел(СтраницаРаздела.Данные, ЭкзИнфОбъект);
				
				АдрОбъектРФ = ПолучитьПодчиненныйЭлемент(ЭкзИнфОбъект, "АдрОбъектРФ");
				
				Здание = ПолучитьПодчиненныйЭлемент(АдрОбъектРФ, "Здание");
				
				ДанныеМногострочнойЧастиРаздела21
				= СтраницаРаздела.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы21];
				
				Для каждого СтрокаМнЧРаздела21 Из ДанныеМногострочнойЧастиРаздела21.Строки Цикл
					ЗаполнитьДаннымиУзел(СтрокаМнЧРаздела21.Данные, СкопироватьУзел(АдрОбъектРФ, Здание));
				КонецЦикла;
				
			Иначе
				
				Для каждого Эл Из ЭкзИнфОбъект.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтраницаРаздела.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Раздел 3.
		//
		РасОБНедИО = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "РасОБНедИО");
		РасОб = ПолучитьПодчиненныйЭлемент(РасОБНедИО, "РасОб");
		
		Для каждого СтраницаРаздела Из ДеревоДанныхРаздел3.Строки Цикл
			
			ОКТМО_Р3 = СтраницаРаздела.Данные["П000030001001"];
			КБК_Р3   = СтраницаРаздела.Данные["П000030001100"];
			
			Если НЕ (ОКТМО_Р1 = ОКТМО_Р3 И КБК_Р1 = КБК_Р3) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭкзРасОб = СкопироватьУзел(РасОБНедИО, РасОб);
			Для каждого Эл Из ЭкзРасОб.Строки Цикл
				Если Эл.Код = "ДоляПравСоб" Тогда
					Числитель   = СтраницаРаздела.Данные["П000030003003_Числ"];
					Знаменатель = СтраницаРаздела.Данные["П000030003003_Знам"];
					Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
						ВывестиПоказательВXML(Эл, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
					КонецЕсли;
				ИначеЕсли Эл.Код = "Доля_6.378.2" Тогда
					Числитель   = СтраницаРаздела.Данные["П000030003503_Числ"];
					Знаменатель = СтраницаРаздела.Данные["П000030003503_Знам"];
					Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
						ВывестиПоказательВXML(Эл, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
					КонецЕсли;
				ИначеЕсли Эл.Код = "КодНалЛьг" Тогда
					КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000030004003_КодЛьготы"]);
					Основание = СокрЛП(СтраницаРаздела.Данные["П000030004003_Основание"]);
					Если КодЛьготы = "2012000" Тогда
						ВывестиПоказательВXML(Эл, КодЛьготы + "/" + Основание);
					Иначе
						ВывестиПоказательВXML(Эл, КодЛьготы);
					КонецЕсли;
				ИначеЕсли Эл.Код = "ДолСт" Тогда
					Числитель   = СтраницаРаздела.Данные["П000030005003_Числ"];
					Знаменатель = СтраницаРаздела.Данные["П000030005003_Знам"];
					Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
						ВывестиПоказательВXML(Эл, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
					КонецЕсли;
				ИначеЕсли Эл.Код = "КодЛгПНС" Тогда
					КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000030007003_КодЛьготы"]);
					Основание = СокрЛП(СтраницаРаздела.Данные["П000030007003_Основание"]);
					Если КодЛьготы = "2012400" Тогда
						ВывестиПоказательВXML(Эл, КодЛьготы + "/" + Основание);
					Иначе
						ВывестиПоказательВXML(Эл, КодЛьготы);
					КонецЕсли;
				ИначеЕсли Эл.Код = "КодЛгУмен" Тогда
					КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000030012003_КодЛьготы"]);
					Основание = СокрЛП(СтраницаРаздела.Данные["П000030012003_Основание"]);
					Если КодЛьготы = "2012500" Тогда
						ВывестиПоказательВXML(Эл, КодЛьготы + "/" + Основание);
					Иначе
						ВывестиПоказательВXML(Эл, КодЛьготы);
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Эл, СтраницаРаздела.Данные[Эл.Ключ]);
				Конецесли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП)
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ДекларацияПоНалогуНаИмущество");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки505");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	мПараметры.Вставить("РучнойВводАдреса", Истина);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ФлажокРучнойВводАдреса", СтруктураРеквизитовФормы.ФлажокРучнойВводАдреса);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	УстановитьФорматВыводаНаСервере(ИмяРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	ИменаМногострочныхПоказателей   = Новый Массив;
	ИменаНемногострочныхПоказателей = Новый Массив;
	
	Если ИмяРаздела = "Раздел1" Тогда
		ИменаМногострочныхПоказателей.Добавить("П000010003003");
		ИменаМногострочныхПоказателей.Добавить("П000010004003");
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		ИменаНемногострочныхПоказателей.Добавить("П000020002003");
		ИменаНемногострочныхПоказателей.Добавить("П000020003003");
		ИменаНемногострочныхПоказателей.Добавить("П000020004003");
		ИменаНемногострочныхПоказателей.Добавить("П000020005003");
		ИменаНемногострочныхПоказателей.Добавить("П000020006003");
		ИменаНемногострочныхПоказателей.Добавить("П000020007003");
		ИменаНемногострочныхПоказателей.Добавить("П000020008003");
		ИменаНемногострочныхПоказателей.Добавить("П000020009003");
		ИменаНемногострочныхПоказателей.Добавить("П000020010003");
		ИменаНемногострочныхПоказателей.Добавить("П000020011003");
		ИменаНемногострочныхПоказателей.Добавить("П000020012003");
		ИменаНемногострочныхПоказателей.Добавить("П000020013003");
		ИменаНемногострочныхПоказателей.Добавить("П000020014003");
		
		ИменаНемногострочныхПоказателей.Добавить("П000020002004");
		ИменаНемногострочныхПоказателей.Добавить("П000020003004");
		ИменаНемногострочныхПоказателей.Добавить("П000020004004");
		ИменаНемногострочныхПоказателей.Добавить("П000020005004");
		ИменаНемногострочныхПоказателей.Добавить("П000020006004");
		ИменаНемногострочныхПоказателей.Добавить("П000020007004");
		ИменаНемногострочныхПоказателей.Добавить("П000020008004");
		ИменаНемногострочныхПоказателей.Добавить("П000020009004");
		ИменаНемногострочныхПоказателей.Добавить("П000020010004");
		ИменаНемногострочныхПоказателей.Добавить("П000020011004");
		ИменаНемногострочныхПоказателей.Добавить("П000020012004");
		ИменаНемногострочныхПоказателей.Добавить("П000020013004");
		ИменаНемногострочныхПоказателей.Добавить("П000020014004");
		
		ИменаНемногострочныхПоказателей.Добавить("П000020015003");
		ИменаНемногострочныхПоказателей.Добавить("П000020017003");
		ИменаНемногострочныхПоказателей.Добавить("П000020019003");
		ИменаНемногострочныхПоказателей.Добавить("П000020022003");
		ИменаНемногострочныхПоказателей.Добавить("П000020023003");
		ИменаНемногострочныхПоказателей.Добавить("П000020025003");
		ИменаНемногострочныхПоказателей.Добавить("П000020026003");
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		ИменаНемногострочныхПоказателей.Добавить("П000210005003");
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		ИменаНемногострочныхПоказателей.Добавить("П000030002003");
		ИменаНемногострочныхПоказателей.Добавить("П000030002503");
		ИменаНемногострочныхПоказателей.Добавить("П000030006003");
		ИменаНемногострочныхПоказателей.Добавить("П000030010003");
		ИменаНемногострочныхПоказателей.Добавить("П000030011003");
		ИменаНемногострочныхПоказателей.Добавить("П000030013003");
	КонецЕсли;
	
	Для каждого ИмяПоказателя Из ИменаНемногострочныхПоказателей Цикл
		ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
		ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя];
		ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
		Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
			ЧислоЕЗнак = Новый ОписаниеТипов("Число",
			Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
			ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
		КонецЕсли;
		ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
		ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
	КонецЦикла;
	
	Для каждого ИмяПоказателя Из ИменаМногострочныхПоказателей Цикл
		НСтр = 1;
		Пока ТабличныйДокумент.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=")) <> Неопределено Цикл
			ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
			ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=")];
			ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
			Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
				ЧислоЕЗнак = Новый ОписаниеТипов("Число",
				Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
				ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
			КонецЕсли;
			ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
			ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
			НСтр = НСтр + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[
			ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
			Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		ЗаполнитьПериодОтчета(ЭтаФорма);
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
		
		СтрокМнЧ1НаЛисте = 6;
		
		// Определение количества листов.
		КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
		ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
		ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
		КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
		
		// Подготовка многострочных данных для заполнения листов.
		МассивДанныхМнЧ1ДляПечати = Новый Массив;
		ИмяП000010001003 = "П000010001003";
		ИмяП000010002003 = "П000010002003";
		ИмяП000010003003 = "П000010003003";
		ИмяП000010004003 = "П000010004003";
		
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			
			Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
			ДанныеМнЧ1ДляПечати = Новый Структура;
			Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
				_ИндСтрокиМнЧ = СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
				ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
				
				НовИмяП000010001003 = ИмяП000010001003 + _ИндСтрокиМнЧ;
				НовИмяП000010002003 = ИмяП000010002003 + _ИндСтрокиМнЧ;
				НовИмяП000010003003 = ИмяП000010003003 + _ИндСтрокиМнЧ;
				НовИмяП000010004003 = ИмяП000010004003 + _ИндСтрокиМнЧ;
				
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010001003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010002003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010003003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010004003, 0);
				
				Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010001003,
					ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000010001003]);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010002003,
					ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000010002003]);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010003003,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
					ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000010003003]));
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010004003,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
					ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000010004003]));
				КонецЕсли;
			КонецЦикла;
			МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
			
		КонецЦикла;
		
		// Вывод листов.
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки"
				+ СтруктураРеквизитовФормы.мИдГруппы1 + СтрокаСИндексомПоказателя(Ном);
				ВставитьДопСтроку(СтруктураРеквизитовФормы.мИдГруппы1, ИмяОбластиПреемника);
			КонецЦикла;
			
			ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" ИЛИ ИмяТекРаздела = "Раздел3" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для каждого Пок Из Ветка.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			Если ИмяТекРаздела = "Раздел2" Тогда
				// Особая обработка Кжд.
				Обл = ТабличныйДокумент.Области.Найти("П000020021503");
				Если Обл <> Неопределено Тогда
					Обл.Значение = СокрЛП(Обл.Значение);
					Обл.Значение = СтрЗаменить(Обл.Значение, ",", ".");
					Обл.Значение = ?(НЕ ЗначениеЗаполнено(Обл.Значение), "-.-" , Обл.Значение);
					Обл.Значение = ?(Обл.Значение = "0", "0.0" , Обл.Значение);
				КонецЕсли;
			КонецЕсли;
			
			УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
			
			СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел21" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		СтрокМнЧНаЛисте = 3;
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы21];
			
			// Определение количества листов.
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол  = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧДляПечати = Новый Массив;
			ИмяП00021М103013 = "П00021М103013";
			ИмяП00021М103014 = "П00021М103014";
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтрокиМнЧ = СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
					
					НовИмяП00021М103013 = ИмяП00021М103013 + _ИндСтрокиМнЧ;
					НовИмяП00021М103014 = ИмяП00021М103014 + _ИндСтрокиМнЧ;
					
					ДанныеМнЧДляПечати.Вставить(НовИмяП00021М103013, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00021М103014, "");
					
					Если КолСтрокМнЧ >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М103013,
						ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00021М103013]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М103014,
						ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00021М103014]);
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки"
					+ СтруктураРеквизитовФормы.мИдГруппы21 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(СтруктураРеквизитовФормы.мИдГруппы21, ИмяОбластиПреемника);
				КонецЦикла;
				
				Если НомЛиста = 1 Тогда
					Для каждого Пок Из Ветка.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Если Обл.Имя = "П000210004003" Тогда
								// Особая обработка кода ОКОФ.
								ОКОФ = СокрЛП(Ветка.Данные["П000210004003"]);
								ОКОФ = СтрЗаменить(ОКОФ, ".", "");
								ОКОФ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКОФ, 12, "-", 1);
								Обл.Значение = ОКОФ;
							Иначе
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2019Кв1_";
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	МакетМЧБ = Неопределено;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 9 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	// Особая обработка ИНН.
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Показатель Из Показатели Цикл
		
		Если СтрНачинаетсяС(Показатель.Имя,"П000010001003")
			ИЛИ Показатель.Имя = "П000020001001"
			ИЛИ Показатель.Имя = "П000210001000"
			ИЛИ Показатель.Имя = "П000030001001" Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
				СокрЛП(Показатель.Значение), 11, "-", 1);
		КонецЕсли;
		
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(10);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = Обл.Значение;
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаданиеВыполнено = ЗаполнитьАвтоНаСервере();
	
	Если ЗаданиеВыполнено Тогда
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ПараметрыОбработчикаОжидания = Новый Структура;
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура("ИдентификаторЗадания", СтруктураРеквизитовФормы.ИдентификаторЗадания), ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("КодНалоговогоОргана",          СтруктураДанныхТитульный.НалоговыйОрган);
	ПараметрыОтчета.Вставить("КПП",                          СтруктураДанныхТитульный.КПП);
	ПараметрыОтчета.Вставить("ДатаПодписи",                  ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	// Помещение данных в контейнер.
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	ЗаданиеВыполнено = Ложь;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыЗаполнения = Новый Массив;
	ПараметрыЗаполнения.Добавить(ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаполнения.Добавить(ИмяФормыОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаполнения.Добавить(ПараметрыОтчета);
	ПараметрыЗаполнения.Добавить(Контейнер);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет",
	ПараметрыЗаполнения, , НаименованиеЗадания);
	
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	СтруктураРеквизитовФормы.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		
		ЗаданиеВыполнено = Истина;
		
		ЗагрузитьПодготовленныеДанные();
		
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ПроверитьВыполнениеЗадания() Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Если Элементы.Расшифровать.Видимость Тогда
				Элементы.Расшифровать.Доступность = Истина;
				Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеЗадания()
	
	Если ДлительныеОперации.ЗаданиеВыполнено(СтруктураРеквизитовФормы.ИдентификаторЗадания) Тогда 
		ЗагрузитьПодготовленныеДанные();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные() Экспорт
	
	Контейнер = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Получение данных из контейнера.
	СтруктураДанныхТитульный = Контейнер["Титульный"];
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			
			Если Раздел.Ключ = "Раздел2" Тогда
				ДеревоРаздела2 = Контейнер[Раздел.Ключ];
				Для Каждого СтраницаРаздела2 Из ДеревоРаздела2.Строки Цикл
					ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные;
					ДанныеСтраницыРаздела2.П000020001001 = СокрЛП(ДанныеСтраницыРаздела2.П000020001001);
					Если СокрЛП(ДанныеСтраницыРаздела2["П000020016003_КодЛьготы"]) = "2012000" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела2["П000020016003_Основание"]) Тогда
							ДанныеСтраницыРаздела2.П000020016003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела2["П000020020003_КодЛьготы"]) = "2012400" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела2["П000020020003_Основание"]) Тогда
							ДанныеСтраницыРаздела2.П000020020003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела2["П000020024003_КодЛьготы"]) = "2012500" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела2["П000020024003_Основание"]) Тогда
							ДанныеСтраницыРаздела2.П000020024003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Раздел.Ключ = "Раздел21" Тогда
				ДеревоРаздела21 = Контейнер[Раздел.Ключ];
				Для Каждого СтраницаРаздела21 Из ДеревоРаздела21.Строки Цикл
					ДанныеСтраницыРаздела21 = СтраницаРаздела21.Данные;
					ДанныеСтраницыРаздела21.П000210001000 = СокрЛП(ДанныеСтраницыРаздела21.П000210001000);
				КонецЦикла;
			ИначеЕсли Раздел.Ключ = "Раздел3" Тогда
				ДеревоРаздела3 = Контейнер[Раздел.Ключ];
				Для Каждого СтраницаРаздела3 Из ДеревоРаздела3.Строки Цикл
					ДанныеСтраницыРаздела3 = СтраницаРаздела3.Данные;
					ДанныеСтраницыРаздела3.П000030001001 = СокрЛП(ДанныеСтраницыРаздела3.П000030001001);
					Если СокрЛП(ДанныеСтраницыРаздела3["П000030004003_КодЛьготы"]) = "2012000" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела3["П000030004003_Основание"]) Тогда
							ДанныеСтраницыРаздела3.П000030004003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела3["П000030007003_КодЛьготы"]) = "2012400" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела3["П000030007003_Основание"]) Тогда
							ДанныеСтраницыРаздела3.П000030007003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела3["П000030012003_КодЛьготы"]) = "2012500" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела3["П000030012003_Основание"]) Тогда
							ДанныеСтраницыРаздела3.П000030012003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ,
			ПоместитьВоВременноеХранилище(Контейнер[Раздел.Ключ], УникальныйИдентификатор));
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере();
	
	СформироватьРаздел1();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	НомерТекущейСтраницы = 0;
	Если мСтруктураМногоуровневыхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела) Тогда
		СтруктураМногоуровневогоРаздела
		= мСтруктураМногоуровневыхРазделов[СтруктураРеквизитовФормы.НаимТекущегоРаздела];
		Если СтруктураМногоуровневогоРаздела.Свойство("Многостраничность") Тогда
			НомерТекущейСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",              СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("НомерТекущейСтраницы",                НомерТекущейСтраницы);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
	ИмяОтчета(ЭтаФорма.ИмяФормы),
	ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"			, Истина);
	СтруктураРезультата.Вставить("ДопСведенияВЗаголовокРасшифровки"	, Ложь);
	СтруктураРезультата.Вставить("ДопСведенияВСтрокуРасшифровки"	, Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	Документирование				= Ложь;
	
	мДанныеОтчета.Вставить("ДанныеКС"	, Новый Структура);
	мДанныеОтчета.ДанныеКС.Вставить("ВТ", Новый МенеджерВременныхТаблиц);
	СформироватьСтруктурыДанныхКС();
	ПолучитьСписочныеЗначения();
	
	Раздел1Заполнен = РазделЗаполнен(Сохраненныеданныеотчета.ДанныеМногоуровневыхРазделов.Раздел1.Строки, Ложь);
	Раздел2Заполнен = РазделЗаполнен(Сохраненныеданныеотчета.ДанныеМногоуровневыхРазделов.Раздел2.Строки, Ложь);
	Раздел3Заполнен = РазделЗаполнен(Сохраненныеданныеотчета.ДанныеМногоуровневыхРазделов.Раздел3.Строки, Ложь);
	Раздел21Заполнен= РазделЗаполнен(Сохраненныеданныеотчета.ДанныеМногоуровневыхРазделов.Раздел21.Строки, Ложь);
		
	Если Раздел1Заполнен Тогда
		ПроверитьКС_1_01(СтруктураРезультата);
		ПроверитьКС_1_02(СтруктураРезультата);
		ПроверитьКС_1_03(СтруктураРезультата);
		ПроверитьКС_1_04(СтруктураРезультата);
	КонецЕсли;
		
	Если Раздел2Заполнен Тогда
		ПроверитьКС_1_05(СтруктураРезультата);
		ПроверитьКС_1_06(СтруктураРезультата);
		ПроверитьКС_1_07(СтруктураРезультата);
		ПроверитьКС_1_08(СтруктураРезультата);
		ПроверитьКС_1_09(СтруктураРезультата);
		ПроверитьКС_1_10(СтруктураРезультата);
		ПроверитьКС_1_11(СтруктураРезультата);
		ПроверитьКС_1_12(СтруктураРезультата);
		ПроверитьКС_1_13(СтруктураРезультата);
		ПроверитьКС_1_14(СтруктураРезультата);
		ПроверитьКС_1_15(СтруктураРезультата);
		ПроверитьКС_1_16(СтруктураРезультата);
		ПроверитьКС_1_17(СтруктураРезультата);
		ПроверитьКС_1_18(СтруктураРезультата);
		ПроверитьКС_1_19(СтруктураРезультата);
		ПроверитьКС_1_20(СтруктураРезультата);
	КонецЕсли;
		
	Если Раздел3Заполнен Тогда
		ПроверитьКС_1_21(СтруктураРезультата);
		ПроверитьКС_1_22(СтруктураРезультата);
		ПроверитьКС_1_23(СтруктураРезультата);
		ПроверитьКС_1_24(СтруктураРезультата);
		ПроверитьКС_1_25(СтруктураРезультата);
		ПроверитьКС_1_26(СтруктураРезультата);
		ПроверитьКС_1_27(СтруктураРезультата);
		ПроверитьКС_1_28(СтруктураРезультата);
		ПроверитьКС_1_29(СтруктураРезультата);
		ПроверитьКС_1_30(СтруктураРезультата);
		ПроверитьКС_1_31(СтруктураРезультата);
		ПроверитьКС_1_32(СтруктураРезультата);
	КонецЕсли;
		
	Если Раздел1Заполнен Тогда
		ПроверитьКС_2_01_доп(СтруктураРезультата);
	КонецЕсли;
		
	Если Раздел2Заполнен Тогда
		ПроверитьКС_2_02_доп(СтруктураРезультата);
		ПроверитьКС_2_03_доп(СтруктураРезультата);
		ПроверитьКС_2_04_доп(СтруктураРезультата);
		ПроверитьКС_2_05_доп(СтруктураРезультата);
		ПроверитьКС_2_06_доп(СтруктураРезультата);
		ПроверитьКС_2_07_доп(СтруктураРезультата);
		ПроверитьКС_2_08_доп(СтруктураРезультата);
	КонецЕсли;
		
	Если Раздел21Заполнен Тогда
		ПроверитьКС_2_09_доп(СтруктураРезультата);
		ПроверитьКС_2_10_доп(СтруктураРезультата);
		ПроверитьКС_2_11_доп(СтруктураРезультата);
		ПроверитьКС_2_12_доп(СтруктураРезультата);
		ПроверитьКС_2_13_доп(СтруктураРезультата);
	КонецЕсли;
	
	Если Раздел3Заполнен Тогда
		ПроверитьКС_2_14_доп(СтруктураРезультата);
		ПроверитьКС_2_15_доп(СтруктураРезультата);
		ПроверитьКС_2_16_доп(СтруктураРезультата);
		ПроверитьКС_2_17_доп(СтруктураРезультата);
		ПроверитьКС_2_18_доп(СтруктураРезультата);
		ПроверитьКС_2_19_доп(СтруктураРезультата);
	КонецЕсли;
	
	мДанныеОтчета = Неопределено;
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	АдресФормул			= ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы	, Новый УникальныйИдентификатор);
	АдресПоказателей	= ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей"	, АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "Декларация по налогу на имущество организаций");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2019Кв1");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();
	
	// Раздел 1
	ПроверитьКС_1_01(СтруктураРезультата);
	ПроверитьКС_1_02(СтруктураРезультата);
	ПроверитьКС_1_03(СтруктураРезультата);
	ПроверитьКС_1_04(СтруктураРезультата);
	
	// Раздел 2
	ПроверитьКС_1_05(СтруктураРезультата);
	ПроверитьКС_1_06(СтруктураРезультата);
	ПроверитьКС_1_07(СтруктураРезультата);
	ПроверитьКС_1_08(СтруктураРезультата);
	ПроверитьКС_1_09(СтруктураРезультата);
	ПроверитьКС_1_10(СтруктураРезультата);
	ПроверитьКС_1_11(СтруктураРезультата);
	ПроверитьКС_1_12(СтруктураРезультата);
	ПроверитьКС_1_13(СтруктураРезультата);
	ПроверитьКС_1_14(СтруктураРезультата);
	ПроверитьКС_1_15(СтруктураРезультата);
	ПроверитьКС_1_16(СтруктураРезультата);
	ПроверитьКС_1_17(СтруктураРезультата);
	ПроверитьКС_1_18(СтруктураРезультата);
	ПроверитьКС_1_19(СтруктураРезультата);
	ПроверитьКС_1_20(СтруктураРезультата);
	
	// Раздел 3
	ПроверитьКС_1_21(СтруктураРезультата);
	ПроверитьКС_1_22(СтруктураРезультата);
	ПроверитьКС_1_23(СтруктураРезультата);
	ПроверитьКС_1_24(СтруктураРезультата);
	ПроверитьКС_1_25(СтруктураРезультата);
	ПроверитьКС_1_26(СтруктураРезультата);
	ПроверитьКС_1_27(СтруктураРезультата);
	ПроверитьКС_1_28(СтруктураРезультата);
	ПроверитьКС_1_29(СтруктураРезультата);
	ПроверитьКС_1_30(СтруктураРезультата);
	ПроверитьКС_1_31(СтруктураРезультата);
	ПроверитьКС_1_32(СтруктураРезультата);
		
	// Раздел 1
	ПроверитьКС_2_01_доп(СтруктураРезультата);
	
	// Раздел 2
	ПроверитьКС_2_02_доп(СтруктураРезультата);
	ПроверитьКС_2_03_доп(СтруктураРезультата);
	ПроверитьКС_2_04_доп(СтруктураРезультата);
	ПроверитьКС_2_05_доп(СтруктураРезультата);
	ПроверитьКС_2_06_доп(СтруктураРезультата);
	ПроверитьКС_2_07_доп(СтруктураРезультата);
	ПроверитьКС_2_08_доп(СтруктураРезультата);
	
	// Раздел 2.1
	ПроверитьКС_2_09_доп(СтруктураРезультата);
	ПроверитьКС_2_10_доп(СтруктураРезультата);
	ПроверитьКС_2_11_доп(СтруктураРезультата);
	ПроверитьКС_2_12_доп(СтруктураРезультата);
	ПроверитьКС_2_13_доп(СтруктураРезультата);

	// Раздел 3
	ПроверитьКС_2_14_доп(СтруктураРезультата);
	ПроверитьКС_2_15_доп(СтруктураРезультата);
	ПроверитьКС_2_16_доп(СтруктураРезультата);
	ПроверитьКС_2_17_доп(СтруктураРезультата);
	ПроверитьКС_2_18_доп(СтруктураРезультата);
	ПроверитьКС_2_19_доп(СтруктураРезультата);
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_ПроверкиРаздела1

&НаСервере
Процедура ПроверитьКС_1_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 382 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, подлежащая уплате в бюджет (стр.030 Раздела 1) = стр.220 Раздела 2 - (стр.230 + стр.250 '") +
		НСтр("ru='Раздела 2) + стр.100 Раздела 3 - (стр.110 + стр.130 Раздела 3) по соответствующим КБК и ОКТМО, если ре'") +
		НСтр("ru='зультат вычисления > 0, стр.040 Раздела 1 = 0 и отсутствует Раздел 2 с кодом вида имущества 4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога, подлежащая уплате в бюджет'"));
	Заголовки.Вставить("Условие"		, 
		НСтр("ru='При отсутствии листов Раздела 2 с кодом вида имущества 4 по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='ОКТМО %1, КБК %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) Итог [%2] = (%3) + (%4) Итог [%5], ОКТМО %6, КБК %7'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена сумма налога, подлежащая уплате в бюджет'"));
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена сумма налога, подлежащая уплате в бюджет'"));
	Настройки.Вставить("НомерКС", 1);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.2)'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 382 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, подлежащая уплате в бюджет (стр.030 Раздела 1) = [стр.220 Раздела 2 - (стр.230 + стр.250'") +
		НСтр("ru=' Раздела 2)] всех Разделов 2 с кодом вида имущества ≠ 4 -  MIN [(стр.220 - стр.250 Раздела 2) или стр.'") +
		НСтр("ru='260 Раздела2)] всех Разделов 2 с кодом вида имущества = 4 + стр.100 Раздела 3 - (стр.110 + стр.130 Раз'") +
		НСтр("ru='дела 3) по соответствующим КБК и ОКТМО, если результат вычисления > 0, стр.040 Раздела 1 = 0 и присутс'") +
		НСтр("ru='твует Раздел 2 с кодом вида имущества 4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога, подлежащая уплате в бюджет'"));
	Заголовки.Вставить("Условие"		, 
		НСтр("ru='При наличии листов Раздела 2 с кодом вида имущества 4 по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='ОКТМО %1, КБК %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) Итог [%2] = (%3) + (%4) Итог [%5], ОКТМО %6, КБК %7'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена сумма налога, подлежащая уплате в бюджет'"));
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена сумма налога, подлежащая уплате в бюджет'"));
	Настройки.Вставить("НомерКС", 2);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 382 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, начисленная к уменьшению (стр.040 Раздела 1) = стр.220 Раздела 2 - (стр.230 + стр.250 Ра'") +
		НСтр("ru='здела 2) + стр.100 Раздела 3 - (стр.110 + стр.130 Раздела 3) по соответствующим КБК и ОКТМО, если резу'") +
		НСтр("ru='льтат вычисления < 0, стр.030 Раздела 1 = 0 и отсутствует Раздел 2 с кодом вида имущества 4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога, исчисленная к уменьшению'"));
	Заголовки.Вставить("Условие"		, 
		НСтр("ru='При отсутствии листов Раздела 2 с кодом вида имущества 4 по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='ОКТМО %1, КБК %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) Итог [%2] = (%3) + (%4) Итог [%5], ОКТМО %6, КБК %7'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена сумма налога, исчисленная к уменьшению'"));
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена сумма налога, исчисленная к уменьшению'"));
	Настройки.Вставить("НомерКС", 3);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 382 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, начисленная к уменьшению (стр.040 Раздела 1) = [стр.220 Раздела 2 - (стр.230 + стр.250'") +
		НСтр("ru=' Раздела 2)] всех Разделов 2 с кодом вида имущества ≠ 4 -  MIN [(стр.220 - стр.250 Раздела 2) или стр.'") +
		НСтр("ru='260 Раздела2)] всех Разделов 2 с кодом вида имущества = 4 + стр.100 Раздела 3 - (стр.110 + стр.130 Раз'") +
		НСтр("ru='дела 3) по соответствующим КБК и ОКТМО, если результат вычисления < 0, стр.030 Раздела 1 = 0 и присутс'") +
		НСтр("ru='твует Раздел 2 с кодом вида имущества 4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога, исчисленная к уменьшению'"));
	Заголовки.Вставить("Условие"		, 
		НСтр("ru='При наличии листов Раздела 2 с кодом вида имущества 4 по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='ОКТМО %1, КБК %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) Итог [%2] = (%3) + (%4) Итог [%5], ОКТМО %6, КБК %7'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена сумма налога, исчисленная к уменьшению'"));
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена сумма налога, исчисленная к уменьшению'"));
	Настройки.Вставить("НомерКС", 4);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_04_код(Настройки)
	
	ЭтоКСВид1 = Настройки.НомерКС = 1 ИЛИ Настройки.НомерКС = 3;
	ЭтоКСВид2 = Настройки.НомерКС = 1 ИЛИ Настройки.НомерКС = 2;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Раздел2.Р02С011 + ВТ_Раздел2.Р02С010 КАК Ключ,
	|	ВТ_Раздел2.Р02С001 КАК Р02С001
	|ПОМЕСТИТЬ ВТ_ИмуществоЗаПределами
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|ГДЕ
	|	ВТ_Раздел2.Р02С001 = ""04""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел1.Р01С020 + ВТ_Раздел1.Р01С010 КАК Ключ,
	|	ВТ_Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел1.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел1.Р01С010 КАК Р01С010,
	|	ВТ_Раздел1.Р01С020 КАК Р01С020,
	|	ВТ_Раздел1.Р01С030 КАК Р01С030,
	|	-ВТ_Раздел1.Р01С040 КАК Р01С040,
	|	ЕСТЬNULL(ВТ_ИмуществоЗаПределами.Р02С001, ""01"") КАК ИмуществоЗаПределами
	|ИЗ
	|	ВТ_Раздел1 КАК ВТ_Раздел1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИмуществоЗаПределами КАК ВТ_ИмуществоЗаПределами
	|		ПО (ВТ_Раздел1.Р01С020 + ВТ_Раздел1.Р01С010 = ВТ_ИмуществоЗаПределами.Ключ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(НомерСтраницы),
	|	МИНИМУМ(НомерСтроки),
	|	МИНИМУМ(Р01С010),
	|	МИНИМУМ(Р01С020),
	|	СУММА(Р01С030),
	|	СУММА(Р01С040),
	|	МАКСИМУМ(ИмуществоЗаПределами)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел2.Р02С011 + ВТ_Раздел2.Р02С010 КАК Ключ,
	|	ВТ_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2.Р02С001 КАК КодИмущества,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_Раздел2.Р02С001 = ""04""
	|			ТОГДА ВТ_Раздел2.Р02С220
	|		ИНАЧЕ -ВТ_Раздел2.Р02С220 КОНЕЦ КАК Р02С220,
	|	-ВТ_Раздел2.Р02С230 КАК Р02С230,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_Раздел2.Р02С001 = ""04""
	|			ТОГДА -ВТ_Раздел2.Р02С250
	|		ИНАЧЕ ВТ_Раздел2.Р02С250 КОНЕЦ КАК Р02С250,
	|	-ВТ_Раздел2.Р02С260 КАК Р02С260,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_Раздел2.Р02С001 = ""04""
	|			ТОГДА ВТ_Раздел2.Р02С220 - ВТ_Раздел2.Р02С230 - ВТ_Раздел2.Р02С250
	|		ИНАЧЕ -ВЫБОР
	|				КОГДА ВТ_Раздел2.Р02С220 - ВТ_Раздел2.Р02С250 >= ВТ_Раздел2.Р02С260
	|					ТОГДА ВТ_Раздел2.Р02С260
	|				ИНАЧЕ ВТ_Раздел2.Р02С220 - ВТ_Раздел2.Р02С250
	|			КОНЕЦ
	|	КОНЕЦ КАК РасчетнаяСумма
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(НомерСтраницы),
	|	СУММА(РасчетнаяСумма)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел3.Р03С011 + ВТ_Раздел3.Р03С010 КАК Ключ,
	|	ВТ_Раздел3.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел3.Р03С015 КАК Р03С015,
	|	ВТ_Раздел3.Р03С100 КАК Р03С100,
	|	-ВТ_Раздел3.Р03С110 КАК Р03С110,
	|	-ВТ_Раздел3.Р03С130 КАК Р03С130,
	|	ВТ_Раздел3.Р03С100 - ВТ_Раздел3.Р03С110 - ВТ_Раздел3.Р03С130 КАК РасчетнаяСумма
	|ИЗ
	|	ВТ_Раздел3 КАК ВТ_Раздел3
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(НомерСтраницы),
	|	СУММА(РасчетнаяСумма)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИмуществоЗаПределами";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаР1 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР3 = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаР1.Следующий() Цикл
	
		Если ВыборкаР1.ИмуществоЗаПределами = "01" И НЕ ЭтоКСВид1 ИЛИ ВыборкаР1.ИмуществоЗаПределами = "04" И ЭтоКСВид1 Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("ОКТМО, КБК", ВыборкаР1.Р01С010, ВыборкаР1.Р01С020));
		ЗарегистрироватьФормулу(Настройки);
		СуммаР1Стр = "";
		СуммаР2Стр = "";
		СуммаР3Стр = "";
		СуммаР2 = 0;
		СуммаР3 = 0;
		Счетчик = 0;
			
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПоказательР1 = ?(ЭтоКСВид2, "Р01С030", "Р01С040");
			Показатели = ЗаполнитьПоказатели(ПоказательР1, Выборка, Выборка.НомерСтроки, Истина);
			Дополнение = "Страница " + Выборка.НомерСтраницы + ", строка " + Выборка.НомерСтроки;
			ДобавитьИнфоКПредставлениюПоказателя(Показатели[ПоказательР1], Дополнение);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Выборка.НомерСтраницы);
			Если Счетчик <= 5 И ЗначениеЗаполнено(Выборка[ПоказательР1]) Тогда
				СуммаР1Стр = СуммаР1Стр + ?(Счетчик = 5, "<...>", Выборка[ПоказательР1]) + " + ";
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыборкаР2.НайтиСледующий(ВыборкаР1.Ключ, "Ключ") Тогда
			Счетчик = 0;
			СуммаР2 = ВыборкаР2.РасчетнаяСумма;
			Выборка = ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если НЕ Выборка.КодИмущества = "04" Тогда
					Показатели = ЗаполнитьПоказатели("Р02С220, Р02С230, Р02С250", Выборка,, Истина);
					Дополнение = "Страница " + Выборка.НомерСтраницы;
					ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р02С220, Дополнение);
					ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р02С230, Дополнение);
					ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р02С250, Дополнение);
				ИначеЕсли Выборка.КодИмущества = "04" И Выборка.Р02С220 + Выборка.Р02С250 >= Выборка.Р02С260 Тогда
					Показатели = ЗаполнитьПоказатели("Р02С220, Р02С250", Выборка,, Истина);
					Дополнение = "Страница " + Выборка.НомерСтраницы;
					ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р02С220, Дополнение);
					ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р02С250, Дополнение);
				ИначеЕсли Выборка.КодИмущества = "04" И Выборка.Р02С220 + Выборка.Р02С250 < Выборка.Р02С260 Тогда
					Показатели = ЗаполнитьПоказатели("Р02С260", Выборка,, Истина);
					Дополнение = "Страница " + Выборка.НомерСтраницы;
					ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р02С260, Дополнение);
				КонецЕсли;
				РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
				Если Счетчик <= 6 Тогда
					СуммаР2Стр = СуммаР2Стр + ?(Счетчик = 6, "<...>", Выборка.РасчетнаяСумма) + " + ";
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		Если ВыборкаР3.НайтиСледующий(ВыборкаР1.Ключ, "Ключ") Тогда
			Счетчик = 0;
			СуммаР3 = ВыборкаР3.РасчетнаяСумма;
			Выборка = ВыборкаР3.Выбрать();
			Пока Выборка.Следующий() Цикл
				Показатели = ЗаполнитьПоказатели("Р03С100, Р03С110, Р03С130", Выборка,, Истина);
				Дополнение = "Страница " + Выборка.НомерСтраницы + ", кадастровый номер " + Выборка.Р03С015;
				ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р03С100, Дополнение);
				ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р03С110, Дополнение);
				ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р03С130, Дополнение);
				РасшифроватьПоказатели(Показатели, Настройки, "Раздел3", Выборка.НомерСтраницы);
				Если Счетчик <= 6 Тогда
					СуммаР3Стр = СуммаР3Стр + ?(Счетчик = 6, "<...>", Выборка.РасчетнаяСумма) + " + ";
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		Настройки.ЭтоОшибка		= ?(ПоказательР1 = "Р01С030", НЕ ВыборкаР1[ПоказательР1] = Макс(СуммаР2 + СуммаР3, 0), 
			НЕ ВыборкаР1[ПоказательР1] = Мин(СуммаР2 + СуммаР3, 0));
		Настройки.ОписаниеОшибки = ?(ВыборкаР1[ПоказательР1] > СуммаР2 + СуммаР3, Настройки.ОписаниеОшибок[0], 
			Настройки.ОписаниеОшибок[1]);
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасшифровкаВСтр(СуммаР1Стр), ВыборкаР1[ПоказательР1], РасшифровкаВСтр(СуммаР2Стр), РасшифровкаВСтр(СуммаР3Стр), 
			СуммаР2 + СуммаР3, ВыборкаР1.Р01С010, ВыборкаР1.Р01С020);
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
		ВыборкаР3.Сбросить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела2

&НаСервере
Процедура ПроверитьКС_1_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 4 ст. 376 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Среднегодовая стоимость недвижимого имущества за налоговый период (стр.150 Раздела 2) = (гр.3 стр.020 '") +
		НСтр("ru='+ гр.3 стр.030 + гр.3 стр.040 + гр.3 стр.050 + гр.3 стр.060 + гр.3 стр.070 + гр.3 стр.080 + гр.3 стр.0'") +
		НСтр("ru='90 + гр.3 стр.100 + гр.3 стр.110 + гр.3 стр.120 + гр.3 стр.130 + гр.3 стр.140 Раздела 2) / 13'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2) / 13 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Завышена/занижена среднегодовая стоимость имущества за налоговый период'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа", "3");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 4 ст. 376 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Среднегодовая стоимость необлагаемого налогом недвижимого имущества за налоговый период (стр.170 Разде'") +
		НСтр("ru='ла 2) = (гр.4 стр.020 + гр.4 стр.030 + гр.4 стр.040 + гр.4 стр.050 + гр.4 стр.060 + гр.4 стр.070 + гр.'") +
		НСтр("ru='4 стр.080 + гр.4 стр.090 + гр.4 стр.100 + гр.4 стр.110 + гр.4 стр.120 + гр.4 стр.130 + гр.4 стр.140 Ра'") +
		НСтр("ru='здела 2) / 13'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Завышена/занижена среднегодовая стоимость необлагаемого налогом имущества за налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2) / 13 Итог [%3]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа", "4");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_06_код(Настройки)
	
	Если Настройки.Графа = "3" Тогда
		Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена среднегодовая стоимость имущества за налоговый период'"));
		Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена среднегодовая стоимость имущества за налоговый период'"));
		СредняяСтоимость = "Р02С150";
	Иначе
		Настройки.ОписаниеОшибок.Добавить(
			НСтр("ru='Завышена среднегодовая стоимость необлагаемого налогом имущества за налоговый период'"));
		Настройки.ОписаниеОшибок.Добавить(
			НСтр("ru='Занижена среднегодовая стоимость необлагаемого налогом имущества за налоговый период'"));
		СредняяСтоимость = "Р02С170";
	КонецЕсли;
	Настройки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("Графа", Настройки.Графа);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел20.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел20.Месяц КАК Месяц,
	|	ВТ_Раздел20.МесяцСтр КАК МесяцСтр,
	|	ВТ_Раздел20.Показатель + ВТ_Раздел20.Графа КАК Показатель,
	|	ВТ_Раздел20.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВТ_Раздел2.Р02С150, 0) КАК Р02С150,
	|	ЕСТЬNULL(ВТ_Раздел2.Р02С170, 0) КАК Р02С170
	|ИЗ
	|	ВТ_Раздел20 КАК ВТ_Раздел20
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел2 КАК ВТ_Раздел2
	|		ПО ВТ_Раздел20.НомерСтраницы = ВТ_Раздел2.НомерСтраницы
	|ГДЕ
	|	ВТ_Раздел20.Графа = &Графа
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(НомерСтраницы),
	|	СУММА(Сумма),
	|	МИНИМУМ(Р02С150),
	|	МИНИМУМ(Р02С170)
	|ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	ВыборкаГр = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГр.Следующий() Цикл
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", ВыборкаГр.НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
	
		Показатели = ЗаполнитьПоказатели(СредняяСтоимость, ВыборкаГр,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", ВыборкаГр.НомерСтраницы);
			
		Выборка = ВыборкаГр.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураДанных = Новый Структура(Выборка.Показатель, Выборка.Сумма);
			Показатели = ЗаполнитьПоказатели(Выборка.Показатель, СтруктураДанных,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
		КонецЦикла;
		
		РасчетнаяСумма = Окр(ВыборкаГр.Сумма / 13, 4);
		РасчетнаяСуммаОкр = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
		Настройки.ЭтоОшибка		= НЕ ВыборкаГр[СредняяСтоимость] = РасчетнаяСуммаОкр;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			ВыборкаГр[СредняяСтоимость], ВыборкаГр.Сумма, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.7а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.7а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 4 ст. 376 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Среднегодовая стоимость необлагаемого налогом недвижимого имущества за налоговый период (стр.170 Разде'") +
		НСтр("ru='ла 2) = 0, если значение стр.160 Раздела 2 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"	, НСтр("ru='Возможно неправомерное применение льготы по налогу'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0, если стр. 160 не заполнена (%2)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 7.1);
	
	Если НЕ Документирование Тогда
		ПроверитьКС_1_18_код(Настройки);
		СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.7б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.7б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 4 ст. 376 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Среднегодовая стоимость необлагаемого налогом недвижимого имущества за налоговый период (стр.170 Разде'") +
		НСтр("ru='ла 2) ≠ 0, если значение стр.160 Раздела 2 ≠ 0'"));
	Заголовки.Вставить("ОписаниеОшибки"	, НСтр("ru='Возможно неправомерное применение льготы по налогу'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 ≠ 0, если стр. 160 заполнена (%2)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 7.2);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 1 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Налоговая база (стр.190 Раздела 2) = (стр.150 - стр.170 Раздела 2) х стр.180 Раздела 2, если код вида '") +
		НСтр("ru='имущества (стр.001 Раздела 2) = 02'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена налоговая база'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии листов Раздела 2 с кодом вида имущества 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 - %3) х %4 Итог [%5]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 8);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_09_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 1 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Налоговая база (стр.190 Раздела 2) = стр.150 Раздела 2 - стр.170 Раздела 2, если код вида имущества (с'") +
		НСтр("ru='тр.001 Раздела 2) = 01, 03, 04, 05, 07, 08, 09, 10'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена налоговая база'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='При наличии листов Раздела 2 с кодом вида имущества 01, 03, 04, 05, 07, 08, 09, 10'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%5]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 9);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_09_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_09_код(Настройки)
	
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена налоговая база'"));
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена налоговая база'"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2.Р02С001 КАК Р02С001,
	|	ВТ_Раздел2.Р02С150 КАК Р02С150,
	|	ВТ_Раздел2.Р02С170 КАК Р02С170,
	|	ВТ_Раздел2.Р02С180 КАК Р02С180,
	|	ВТ_Раздел2.Р02С181 КАК Р02С181,
	|	ВТ_Раздел2.Р02С190 КАК Р02С190
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|ГДЕ
	|	ВТ_Раздел2.Р02С001 В (""02"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Запрос.Текст	= ?(Настройки.НомерКС = 8, Запрос.Текст, СтрЗаменить(Запрос.Текст, "Р02С001 В", "Р02С001 НЕ В"));
	Исключения		= ?(Настройки.НомерКС = 8, "", "Р02С180, Р02С181");
	Результат		= Запрос.Выполнить();
	Выборка			= Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		
		Показатели = ЗаполнитьПоказатели("Р02С001, Р02С190, Р02С150, Р02С170, Р02С180, Р02С181", 
			Выборка,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы,, Исключения);
		Разность = Макс(Выборка.Р02С150 - Выборка.Р02С170, 0);
		Стр180 = ?(Выборка.Р02С181		= 0, 0, Выборка.Р02С180 / Выборка.Р02С181);
		Стр180 = ?(Настройки.НомерКС	= 8, Стр180, 1);
		РасчетнаяСумма		= Окр(Разность * Стр180, 4);
		РасчетнаяСуммаОкр	= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
		Настройки.ЭтоОшибка	= НЕ Выборка.Р02С190 = РасчетнаяСуммаОкр;
		Настройки.ОписаниеОшибки = ?(Выборка.Р02С190 > РасчетнаяСуммаОкр, Настройки.ОписаниеОшибок[0], 
			Настройки.ОписаниеОшибок[1]);
		Стр180Стр = ПредставлениеДроби(Показатели.Р02С180, Показатели.Р02С181, Истина);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р02С190.ЗначениеСтр, Показатели.Р02С150.ЗначениеСтр, Показатели.Р02С170.ЗначениеСтр, 
			Стр180Стр, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 1 ст. 382 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога за налоговый период (стр.220 Раздела 2) = стр.190 Раздела 2 х стр.210 Раздела 2 х стр.215'") +
		НСтр("ru=' Раздела 2 / 100, если код вида имущества (стр.001 Раздела 2) = 09'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии листов Раздела 2 с кодом вида имущества 9'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 х %4 / 100 Итог [%5]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 10);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 1 ст. 382 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога за налоговый период (стр.220 Раздела 2) = стр.190 Раздела 2 х стр.210 Раздела 2 / 100, ес'") +
		НСтр("ru='ли код вида имущества (стр.001 Раздела 2) ≠ 09'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии листов Раздела 2 с кодом вида имущества кроме 9'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 / 100 Итог [%5]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 11);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_11_код(Настройки)
	
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена сумма налога'"));
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена сумма налога'"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2.Р02С001 КАК Р02С001,
	|	ВТ_Раздел2.Р02С190 КАК Р02С190,
	|	ВТ_Раздел2.Р02С210 КАК Р02С210,
	|	ВТ_Раздел2.Р02С215 КАК Р02С215,
	|	ВТ_Раздел2.Р02С220 КАК Р02С220
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|ГДЕ
	|	ВТ_Раздел2.Р02С001 В (""09"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Запрос.Текст	= ?(Настройки.НомерКС = 10, Запрос.Текст, СтрЗаменить(Запрос.Текст, "Р02С001 В", "Р02С001 НЕ В"));
	Исключения		= ?(Настройки.НомерКС = 10, "", "Р02С215");
	Результат		= Запрос.Выполнить();
	Выборка			= Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		
		Показатели = ЗаполнитьПоказатели("Р02С001, Р02С220, Р02С190, Р02С210, Р02С215", 
			Выборка,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы,, Исключения);
		Стр215 = ?(Выборка.Р02С215		= "", 1, Число(Выборка.Р02С215));
		Стр215 = ?(Настройки.НомерКС	= 10, Стр215, 1);
		РасчетнаяСумма		= Окр(Выборка.Р02С190 * Выборка.Р02С210 * Стр215 / 100, 4);
		РасчетнаяСуммаОкр	= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
		Настройки.ЭтоОшибка	= НЕ Выборка.Р02С220 = РасчетнаяСуммаОкр;
		Настройки.ОписаниеОшибки = ?(Выборка.Р02С220 > РасчетнаяСуммаОкр, Настройки.ОписаниеОшибок[0], 
			Настройки.ОписаниеОшибок[1]);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р02С220.ЗначениеСтр, Показатели.Р02С190.ЗначениеСтр, Выборка.Р02С210, Стр215, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 382 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма авансовых платежей, исчисленная за отчетные периоды (стр.230 Раздела 2) = стр.180 Раздела 2 нало'") +
		НСтр("ru='говых расчетов по авансовым платежам за 1 квартал, полугодие и 9 месяцев текущего налогового периода п'") +
		НСтр("ru='о соответствующим ОКТМО, КБК и кодам видов имущества, если расчеты по авансовым платежам существуют'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Завышена/занижена сумма налога за счет занижения/завышения сумм авансовых платежей'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='При наличии отчетов по авансам за отчетные периоды налогового периода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код вида имущества %1, ОКТМО %2, КБК %3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) Итог [%2] = (%3) Итог [%4]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена сумма налога за счет завышения сумм авансовых платежей'"));
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена сумма налога за счет занижения сумм авансовых платежей'"));
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_ПРП.КВИ + ВТ_ПРП.КБК + ВТ_ПРП.ОКТМО КАК Ключ,
	|	ВТ_ПРП.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_ПРП.КВИ КАК КВИ,
	|	ВТ_ПРП.КБК КАК КБК,
	|	ВТ_ПРП.ОКТМО КАК ОКТМО,
	|	ВТ_ПРП.Р02С230 КАК Р02С230
	|ИЗ
	|	ВТ_ПРП КАК ВТ_ПРП
	|ГДЕ
	|	ВТ_ПРП.Месяц = 12
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(НомерСтраницы),
	|	МИНИМУМ(КВИ),
	|	МИНИМУМ(КБК),
	|	МИНИМУМ(ОКТМО),
	|	СУММА(Р02С230)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПРП.КВИ + ВТ_ПРП.КБК + ВТ_ПРП.ОКТМО КАК Ключ,
	|	ВТ_ПРП.Ссылка КАК Ссылка,
	|	ВТ_ПРП.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_ПРП.Вид КАК Вид,
	|	ВТ_ПРП.Месяц КАК Месяц,
	|	ВТ_ПРП.Р02С180 КАК Р02С189
	|ИЗ
	|	ВТ_ПРП КАК ВТ_ПРП
	|ГДЕ
	|	ВТ_ПРП.Месяц < 12
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	НомерСтраницы
	|ИТОГИ
	|	СУММА(Р02С189)
	|ПО
	|	Ключ";
	
	Результат		= Запрос.ВыполнитьПакет();
	
	Если Результат[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаГодовая	= Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаАвансы	= Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГодовая.Следующий() Цикл
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("КВИ, ОКТМО, КБК", ВыборкаГодовая.КВИ, 
			ВыборкаГодовая.ОКТМО, ВыборкаГодовая.КБК));
		ЗарегистрироватьФормулу(Настройки);
		СуммаП1Стр = "";
		СуммаП2Стр = "";
		СуммаП2 = 0;
		Счетчик = 0;
		
		Выборка = ВыборкаГодовая.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели("Р02С230", Выборка,, Истина);
			Дополнение = "Страница " + Выборка.НомерСтраницы + ", код вида имущества " + Выборка.КВИ + ", ОКТМО " 
				+ Выборка.ОКТМО + ", КБК " + Выборка.КБК;
			ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р02С230, Дополнение);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			Если Счетчик <= 5 И ЗначениеЗаполнено(Выборка.Р02С230) Тогда
				СуммаП1Стр = СуммаП1Стр + ?(Счетчик = 5, "<...>", Выборка.Р02С230) + " + ";
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыборкаАвансы.НайтиСледующий(ВыборкаГодовая.Ключ, "Ключ") Тогда
			Счетчик = 0;
			СуммаП2 = ВыборкаАвансы.Р02С189;
			Выборка = ВыборкаАвансы.Выбрать();
			Пока Выборка.Следующий() Цикл
				Показатели = ЗаполнитьПоказатели("Р02С189", Выборка,, Истина);
				Дополнение = "Страница " + Выборка.НомерСтраницы + ", отчет за " + Выборка.Месяц + " мес., корректировка " 
					+ Выборка.Вид;
				ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р02С189, Дополнение);
				РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы,,, Выборка.Ссылка);
				Если Счетчик <= 10 И ЗначениеЗаполнено(Выборка.Р02С189) Тогда
					СуммаП2Стр = СуммаП2Стр + ?(Счетчик = 10, "<...>", Показатели.Р02С189.ЗначениеСтр) + " + ";
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		Настройки.ЭтоОшибка		= НЕ ВыборкаГодовая.Р02С230 = СуммаП2;
		Настройки.ОписаниеОшибки = ?(ВыборкаГодовая.Р02С230 > СуммаП2, Настройки.ОписаниеОшибок[0], 
			Настройки.ОписаниеОшибок[1]);
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасшифровкаВСтр(СуммаП1Стр), ВыборкаГодовая.Р02С230, РасшифровкаВСтр(СуммаП2Стр), СуммаП2);
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаАвансы.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 372 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма льготы, уменьшающая сумму налога (стр.250 Раздела 2), ≠ 0, если значение стр.240 Раздела 2 равно'") +
		НСтр("ru=' 2012500'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно завышена сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 ≠ 0 когда %2 = 2012500'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, "Раздел2");
	Настройки.Вставить("ПоказательКода"		, "Р02С240");
	Настройки.Вставить("ПоказательСуммы"	, "Р02С250");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_14(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 372 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Возможно неправомерное применение льготы, если стр.160 Раздела 2 ≠ 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно неправомерное применение льготы по налогу'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Выводится в информационных целях, не предусматривает выдачи ошибки'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 14);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_15(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 372 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Возможно неправомерное применение льготы, если стр.170 Раздела 2 ≠ 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно неправомерное применение льготы по налогу'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Выводится в информационных целях, не предусматривает выдачи ошибки'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 15);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_16(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 372 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Возможно неправомерное применение льготы, если стр.200 Раздела 2 ≠ 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно неправомерное применение льготы по налогу'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Выводится в информационных целях, не предусматривает выдачи ошибки'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 16);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_17(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 372 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Возможно неправомерное применение льготы, если стр.240 Раздела 2 ≠ 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно неправомерное применение льготы по налогу'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Выводится в информационных целях, не предусматривает выдачи ошибки'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 17);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_18(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 372 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Возможно неправомерное применение льготы, если стр.250 Раздела 2 ≠ 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно неправомерное применение льготы по налогу'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Выводится в информационных целях, не предусматривает выдачи ошибки'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 18);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_18_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2.Р02С160 КАК Р02С160,
	|	ВТ_Раздел2.Р02С170 КАК Р02С170,
	|	ВТ_Раздел2.Р02С200 КАК Р02С200,
	|	ВТ_Раздел2.Р02С240 КАК Р02С240,
	|	ВТ_Раздел2.Р02С250 КАК Р02С250
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		
		Если Настройки.НомерКС = 7.1 ИЛИ Настройки.НомерКС = 7.2 Тогда
			Показатели = ЗаполнитьПоказатели("Р02С160, Р02С170", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			Если Настройки.НомерКС = 7.1 Тогда
				Настройки.ЭтоОшибка	= НЕ ЗначениеЗаполнено(Выборка.Р02С160) И ЗначениеЗаполнено(Выборка.Р02С170);
			Иначе
				Настройки.ЭтоОшибка	= ЗначениеЗаполнено(Выборка.Р02С160) И НЕ ЗначениеЗаполнено(Выборка.Р02С170);
			КонецЕсли;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Выборка.Р02С170, ?(ЗначениеЗаполнено(Выборка.Р02С160), Выборка.Р02С160, "0"));
				
		ИначеЕсли Настройки.НомерКС = 14 Тогда
			Показатели = ЗаполнитьПоказатели("Р02С160", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка	= Ложь;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				?(ЗначениеЗаполнено(Выборка.Р02С160), Выборка.Р02С160, "0"));
				
		ИначеЕсли Настройки.НомерКС = 15 Тогда
			Показатели = ЗаполнитьПоказатели("Р02С170", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка	= Ложь;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Выборка.Р02С170);
				
		ИначеЕсли Настройки.НомерКС = 16 Тогда
			Показатели = ЗаполнитьПоказатели("Р02С200", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка	= Ложь;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				?(ЗначениеЗаполнено(Выборка.Р02С200), Выборка.Р02С200, "0"));
				
		ИначеЕсли Настройки.НомерКС = 17 Тогда
			Показатели = ЗаполнитьПоказатели("Р02С240", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка	= Ложь;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				?(ЗначениеЗаполнено(Выборка.Р02С240), Выборка.Р02С240, "0"));
				
		ИначеЕсли Настройки.НомерКС = 18 Тогда
			Показатели = ЗаполнитьПоказатели("Р02С250", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка	= Ложь;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Выборка.Р02С250);
		КонецЕсли;
	
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_19(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 1 ст. 374 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма стр. 050 Раздела 2.1 должна быть равна гр.3 стр.140 Раздела 2 с учетом погрешности 0,49 коп., ум'") +
		НСтр("ru='ноженной на количество листов Раздела 2.1'"));
	Заголовки.Вставить("ОписаниеОшибки"	, НСтр("ru='Возможно неправильное указание информации в Разделе 2.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 - %2 Итог [%3] <= 0,49 х %4 Итог [%5]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("НомерМесяца"	, ОтчетныйМесяц + 1);
	Запрос.УстановитьПараметр("Графа"		, "3");
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел20.НомерСтраницы	КАК НомерСтраницы,
	|	ВТ_Раздел20.Показатель + ВТ_Раздел20.Графа КАК Показатель,
	|	ВТ_Раздел20.Сумма			КАК Сумма
	|ИЗ
	|	ВТ_Раздел20 КАК ВТ_Раздел20
	|ГДЕ
	|	ВТ_Раздел20.Месяц	= &НомерМесяца
	|	И ВТ_Раздел20.Графа	= &Графа
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел21.НомерСтраницы	КАК НомерСтраницы,
	|	ВТ_Раздел21.Р21С050			КАК Р21С050
	|ИЗ
	|	ВТ_Раздел21 КАК ВТ_Раздел21
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	СУММА(Р21С050)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаГр1 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаГр2 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗарегистрироватьФормулу(Настройки);
	Р20Сум = 0;
	Р21Сум = 0;
	КоличествоР21 = 0;
	
	Пока ВыборкаГр2.Следующий() Цикл
		Р21Сум = ВыборкаГр2.Р21С050;
		Выборка = ВыборкаГр2.Выбрать();
		КоличествоР21 = Выборка.Количество();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели("Р21С050", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Выборка.НомерСтраницы);
		КонецЦикла;
	КонецЦикла;
	
	Пока ВыборкаГр1.Следующий() Цикл
		Р20Сум = ВыборкаГр1.Сумма;
		Выборка = ВыборкаГр1.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураДанных = Новый Структура(Выборка.Показатель, Выборка.Сумма);
			Показатели = ЗаполнитьПоказатели(Выборка.Показатель, СтруктураДанных,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
		КонецЦикла;
	КонецЦикла;
	
	РасчетнаяСумма1			= Р21Сум - Р20Сум;
	РасчетнаяСумма1			= ?(РасчетнаяСумма1 < 0, -РасчетнаяСумма1, РасчетнаяСумма1);
	РасчетнаяСумма2			= Окр(0.49 * КоличествоР21);
	Настройки.ЭтоОшибка		= НЕ РасчетнаяСумма1 <= РасчетнаяСумма2;
	Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Р21Сум, Р20Сум, РасчетнаяСумма1, КоличествоР21, РасчетнаяСумма2);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_20(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2.1'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2.1 (КС 1.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 1 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Минимум один показатель по стр.050 Раздела 2.1 должен быть больше 0, если Раздел 3 не заполнен'"));
	Заголовки.Вставить("ОписаниеОшибки"	, НСтр("ru='Возможно неверно указана средняя стоимость объекта недвижимого "
		+ "имущества'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 ≠ 0, если Раздел 3 не заполнен'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Раздел3Заполнен = РазделЗаполнен(Сохраненныеданныеотчета.ДанныеМногоуровневыхРазделов.Раздел3.Строки, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел21.НомерСтраницы	КАК НомерСтраницы,
	|	ВТ_Раздел21.Р21С050			КАК Р21С050
	|ИЗ
	|	ВТ_Раздел21 КАК ВТ_Раздел21
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	СУММА(Р21С050)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.Выполнить();
	ВыборкаГр = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗарегистрироватьФормулу(Настройки);
	Р21Сум = 0;
	
	Пока ВыборкаГр.Следующий() Цикл
		Р21Сум = ВыборкаГр.Р21С050;
		Выборка = ВыборкаГр.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели("Р21С050", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Выборка.НомерСтраницы);
		КонецЦикла;
	КонецЦикла;
	
	Настройки.ЭтоОшибка		= НЕ Раздел3Заполнен И Р21Сум = 0;
	Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Р21Сум);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела3

&НаСервере
Процедура ПроверитьКС_1_21(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Налоговая база (стр.060 Раздела 3) = (стр.020 - стр.025 Раздела 3) х стр.030 Раздела 3 х стр.050 Разде'") +
		НСтр("ru='ла 3, если стр.050 Раздела 3 заполнена'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена налоговая база'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения в стр. 050 Раздела 3'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 - %3) х %4 х %5 Итог [%6]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 20);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_22_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_22(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Налоговая база (стр.060 Раздела 3) = (стр.020 - стр.025 Раздела 3) х стр.030 Раздела 3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена налоговая база'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При отсутствии значения в стр. 050 Раздела 3'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='При отсутствии значения в стр. 030 Раздела 3 оно принимается равным 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 - %3) х %4 Итог [%6]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 21);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_22_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_22_код(Настройки)
	
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена налоговая база'"));
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена налоговая база'"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел3.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел3.Р03С020 КАК Р03С020,
	|	ВТ_Раздел3.Р03С025 КАК Р03С025,
	|	ВТ_Раздел3.Р03С030 КАК Р03С030,
	|	ВТ_Раздел3.Р03С031 КАК Р03С031,
	|	ВТ_Раздел3.Р03С050 КАК Р03С050,
	|	ВТ_Раздел3.Р03С051 КАК Р03С051,
	|	ВТ_Раздел3.Р03С060 КАК Р03С060
	|ИЗ
	|	ВТ_Раздел3 КАК ВТ_Раздел3
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Настройки.НомерКС = 21 Тогда
		Исключения = "Р03С050, Р03С051";
	Иначе
		Исключения = "";
	КонецЕсли; 
	
	Пока Выборка.Следующий() Цикл
		Показатели = ЗаполнитьПоказатели(
			"Р03С060, Р03С020, Р03С025, Р03С030, Р03С031, Р03С050, Р03С051", Выборка,, Истина);
		УсловиеВыполнено = ЗначениеЗаполнено(Выборка.Р03С050) И ЗначениеЗаполнено(Выборка.Р03С051);
		Если Настройки.НомерКС = 20 И НЕ УсловиеВыполнено ИЛИ Настройки.НомерКС = 21 И УсловиеВыполнено Тогда
			Продолжить;
		КонецЕсли;
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел3", Выборка.НомерСтраницы,, Исключения);
		Разность = Макс(Выборка.Р03С020 - Выборка.Р03С025, 0);
		Стр030 = ?(Выборка.Р03С031 = 0, 1, Выборка.Р03С030 / Выборка.Р03С031);
		Стр050 = ?(Выборка.Р03С051 = 0, 1, Выборка.Р03С050 / Выборка.Р03С051);
		РасчетнаяСумма = Окр(Разность * Стр030 * Стр050, 4);
		РасчетнаяСуммаОкр = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
		Настройки.ЭтоОшибка = НЕ Выборка.Р03С060 = РасчетнаяСуммаОкр;
		Настройки.ОписаниеОшибки = ?(Выборка.Р03С060 > РасчетнаяСуммаОкр, Настройки.ОписаниеОшибок[0], 
			Настройки.ОписаниеОшибок[1]);
		Стр030Стр = ПредставлениеДроби(Показатели.Р03С030, Показатели.Р03С031);
		Стр050Стр = ПредставлениеДроби(Показатели.Р03С050, Показатели.Р03С051);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р03С060.ЗначениеСтр, Показатели.Р03С020.ЗначениеСтр, Показатели.Р03С025.ЗначениеСтр, Стр030Стр, 
			Стр050Стр, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_23(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Коэффициент Ки (стр.095 Раздела 3) должен быть меньше 1, если коэффициент Кв (стр.090 Раздела 3) больш'") +
		НСтр("ru='е 0 и меньше 1 и стр.095 Раздела 3 больше 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Неправильно исчислен коэффициент Ки'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Если коэффициент Кв не равен 0 и 1 и коэффициент Ки не равен 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 < 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел3.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел3.Р03С090 КАК Р03С090,
	|	ВТ_Раздел3.Р03С095 КАК Р03С095
	|ИЗ
	|	ВТ_Раздел3 КАК ВТ_Раздел3
	|ГДЕ
	|	НЕ ВТ_Раздел3.Р03С090 = 0
	|	И НЕ ВТ_Раздел3.Р03С090 = 1
	|	И НЕ ВТ_Раздел3.Р03С095 = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		Показатели = ЗаполнитьПоказатели("Р03С090, Р03С095", Выборка,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел3", Выборка.НомерСтраницы);
		Настройки.ЭтоОшибка = НЕ Выборка.Р03С095 < 1;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р03С095.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_24(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога (стр.100 Раздела 3) = стр.060 Раздела 3 х стр.080 Раздела 3 х стр.090 Раздела 3 / 100, ес'") +
		НСтр("ru='ли стр.090 Раздела 3 не равна 0 или 1, и стр.095 Раздела 3 равна 0 или 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Если коэффициент Кв не равен 0 или 1 и коэффициент Ки равен 0 или 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 х %4 / 100 Итог [%6]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 24);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_27_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_25(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога (стр.100 Раздела 3) = стр.060 Раздела 3 х стр.080 Раздела 3 х стр.090 Раздела 3 х стр.095'") +
		НСтр("ru=' Раздела 3 / 100, если стр.090 Раздела 3 не равна 0 или 1, и стр.095 Раздела 3 не равна 0 или 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Если коэффициент Кв не равен 0 или 1 и коэффициент Ки не равен 0 или 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 х %4 х %5 / 100 Итог [%6]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 25);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_27_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_26(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога (стр.100 Раздела 3) = стр.060 Раздела 3 х стр.080 Раздела 3 х стр.095 Раздела 3 / 100, ес'") +
		НСтр("ru='ли стр.090 Раздела 3 равна 0 или 1, и стр.095 Раздела 3 не равна 0 или 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Если коэффициент Кв равен 0 или 1 и коэффициент Ки не равен 0 или 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 х %5 / 100 Итог [%6]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 26);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_27_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_27(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога (стр.100 Раздела 3) = стр.060 Раздела 3 х стр.080 Раздела 3 / 100, если  стр.090 Раздела '") +
		НСтр("ru='3 равна 0 или 1, и стр.095 Раздела 3 равна 0 или 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Завышена/занижена сумма налога'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Если коэффициент Кв равен 0 или 1 и коэффициент Ки равен 0 или 1'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Если коэффициенты Кв и/или Ки равны 0, из значения принимается равным 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 / 100 Итог [%6]'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("НомерКС", 27);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_27_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_27_код(Настройки)
	
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Завышена сумма налога'"));
	Настройки.ОписаниеОшибок.Добавить(НСтр("ru='Занижена сумма налога'"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел3.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел3.Р03С060 КАК Р03С060,
	|	ВТ_Раздел3.Р03С080 КАК Р03С080,
	|	ВТ_Раздел3.Р03С090 КАК Р03С090,
	|	ВТ_Раздел3.Р03С095 КАК Р03С095,
	|	ВТ_Раздел3.Р03С100 КАК Р03С100
	|ИЗ
	|	ВТ_Раздел3 КАК ВТ_Раздел3
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Исключения = "";
	Если Настройки.НомерКС = 24 Тогда
		Исключения = "Р03С095";
	ИначеЕсли Настройки.НомерКС = 26 Тогда
		Исключения = "Р03С090";
	ИначеЕсли Настройки.НомерКС = 27 Тогда
		Исключения = "Р03С090, Р03С095";
	КонецЕсли; 
	
	Пока Выборка.Следующий() Цикл
		Показатели = ЗаполнитьПоказатели(
			"Р03С100, Р03С060, Р03С080, Р03С090, Р03С095", Выборка,, Истина);
			
			Если Настройки.НомерКС = 24 И НЕ (Выборка.Р03С090 <> 0 И Выборка.Р03С090 <> 1 
			И (Выборка.Р03С095 = 0 ИЛИ Выборка.Р03С095 = 1)) Тогда
				Продолжить;
			ИначеЕсли Настройки.НомерКС = 25 И НЕ (Выборка.Р03С090 <> 0 И Выборка.Р03С090 <> 1 
			И Выборка.Р03С095 <> 0 И Выборка.Р03С095 <> 1) Тогда
				Продолжить;
			ИначеЕсли Настройки.НомерКС = 26 И НЕ ((Выборка.Р03С090 = 0 ИЛИ Выборка.Р03С090 = 1) 
			И Выборка.Р03С095 <> 0 И Выборка.Р03С095 <> 1) Тогда
				Продолжить;
			ИначеЕсли Настройки.НомерКС = 27 И НЕ ((Выборка.Р03С090 = 0 ИЛИ Выборка.Р03С090 = 1) 
			И (Выборка.Р03С095 = 0 ИЛИ Выборка.Р03С095 = 1)) Тогда
				Продолжить;
			КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел3", Выборка.НомерСтраницы,, Исключения);
		Стр090 = ?(Выборка.Р03С090 = 0, 1, Выборка.Р03С090);
		Стр095 = ?(Выборка.Р03С095 = 0, 1, Выборка.Р03С095);
		РасчетнаяСумма = Окр(Выборка.Р03С060 * Выборка.Р03С080 * Стр090 * Стр095 / 100, 4);
		РасчетнаяСуммаОкр = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
		Настройки.ЭтоОшибка = НЕ Выборка.Р03С100 = РасчетнаяСуммаОкр;
		Настройки.ОписаниеОшибки = ?(Выборка.Р03С100 > РасчетнаяСуммаОкр, Настройки.ОписаниеОшибок[0], 
			Настройки.ОписаниеОшибок[1]);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р03С100.ЗначениеСтр, Показатели.Р03С060.ЗначениеСтр, Показатели.Р03С080.ЗначениеСтр, 
			Стр090, Стр095, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_28(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 372 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма льготы, уменьшающая сумму налога (стр.130 Раздела 3), ≠ 0, если значение стр.120 Раздела 3 равно'") +
		НСтр("ru=' 2012500'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно завышена сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 ≠ 0 когда %2 = 2012500'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, "Раздел3");
	Настройки.Вставить("ПоказательКода"		, "Р03С120");
	Настройки.Вставить("ПоказательСуммы"	, "Р03С130");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_28_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2.Р02С240 КАК Р02С240,
	|	ВТ_Раздел2.Р02С250 КАК Р02С250
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Раздел2", Настройки.Раздел);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Р02С240", Настройки.ПоказательКода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Р02С250", Настройки.ПоказательСуммы);
	СтрокаПоказателей = Настройки.ПоказательКода + ", " + Настройки.ПоказательСуммы;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		Показатели = ЗаполнитьПоказатели(СтрокаПоказателей, Выборка,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, Настройки.Раздел, Выборка.НомерСтраницы);
		Настройки.ЭтоОшибка = Выборка[Настройки.ПоказательКода] = "2012500" 
			И НЕ ЗначениеЗаполнено(Выборка[Настройки.ПоказательСуммы]);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Выборка[Настройки.ПоказательСуммы], ?(ЗначениеЗаполнено(Выборка[Настройки.ПоказательКода]), 
			Выборка[Настройки.ПоказательКода], "0"));
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_29(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 2 ст. 375 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кадастрового номера (стр.015 Раздела 3) не должно содержать символы %1 и буквы %2, если значе'") +
		НСтр("ru='ние заполнено'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Кадастровый номер содержит недопустимые символы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Указанное значение: (%1)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСимволов = ". , ; "" / ! @ # $ % ^ & * () _ + | \ - ' ] [ } { ` ~ N ? < >";
	СтрокаБукв = "О, З";
	Настройки.ОписаниеКС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ОписаниеКС, СтрокаСимволов, 
		СтрокаБукв);
	СтрокаСимволов = СтрЗаменить(СтрокаСимволов + СтрокаБукв, " ", "");
	
	Раздел3	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел3.Строки;
	КолвоСтрок	= Раздел3.Количество();
	Для СчетчикСтраниц	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели("Р03С015", Раздел3[СчетчикСтраниц - 1].Данные);
		
		Если НЕ ЗначениеЗаполнено(Показатели.Р03С015.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", СчетчикСтраниц));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел3", СчетчикСтраниц);
		
		ДлинаЗапрещенных = СтрДлина(СтрокаСимволов);
		Для Счетчик = 1 По ДлинаЗапрещенных Цикл
			Если НЕ СтрНайти(Показатели.Р03С015.Значение, Сред(СтрокаСимволов, Счетчик, 1)) = 0 Тогда
				Настройки.ЭтоОшибка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р03С015.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		Настройки.ЭтоОшибка = Ложь;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_30(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 381 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если заполнена вторая часть стр.040 Раздела 3, то первые 7 знаков стр.040 Раздела 3 = %1'"));
	Заголовки.Вставить("ОписаниеОшибки"	, НСтр("ru='Неправильно указан код налоговой льготы'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения во второй части стр. 040 Раздела3'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Указанное значение: (%1)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ЦелевойПоказатель"	, "Р03С040");
	Настройки.Вставить("БазовыйПоказатель"	, "Р03С041");
	Настройки.Вставить("ЦелевоеЗначение"	, "2012000");
	Настройки.Вставить("СтрокаПоказателей"	, "Р03С040, Р03С041");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_32_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_31(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 381 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если заполнена стр.070 Раздела 3, то первые 7 знаков стр.070 Раздела 3 = %1'"));
	Заголовки.Вставить("ОписаниеОшибки"	, НСтр("ru='Неправильно указан код налоговой льготы'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Указанное значение: (%1)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ЦелевойПоказатель"	, "Р03С070");
	Настройки.Вставить("БазовыйПоказатель"	, "Р03С070");
	Настройки.Вставить("ЦелевоеЗначение"	, "2012400");
	Настройки.Вставить("СтрокаПоказателей"	, "Р03С070");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_32_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_32(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 381 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если заполнена стр.120 Раздела 3, то первые 7 знаков стр.120 Раздела 3 = %1'"));
	Заголовки.Вставить("ОписаниеОшибки"	, НСтр("ru='Неправильно указан код налоговой льготы'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Указанное значение: (%1)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ЦелевойПоказатель"	, "Р03С120");
	Настройки.Вставить("БазовыйПоказатель"	, "Р03С120");
	Настройки.Вставить("ЦелевоеЗначение"	, "2012500");
	Настройки.Вставить("СтрокаПоказателей"	, "Р03С120");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКС_1_32_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_32_код(Настройки)
	
	Настройки.ОписаниеКС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ОписаниеКС, 
		Настройки.ЦелевоеЗначение);
	
	Раздел3	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел3.Строки;
	КолвоСтрок	= Раздел3.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели(Настройки.СтрокаПоказателей, Раздел3[Счетчик - 1].Данные);
		
		Если НЕ ЗначениеЗаполнено(Показатели[Настройки.БазовыйПоказатель].Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Счетчик));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел3", Счетчик);
		Настройки.ЭтоОшибка = НЕ Показатели[Настройки.ЦелевойПоказатель].Значение = Настройки.ЦелевоеЗначение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели[Настройки.ЦелевойПоказатель].Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиСписочныхЗначений

&НаСервере
Процедура ПроверитьКС_2_01_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.1.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.1.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение КБК (стр.020 Раздела 1) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение КБК (стр.020 Раздела 1) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("РасшифровкаСписка"	, "");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Раздел1	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел1.Строки;
	КолвоСтрок	= Раздел1.Количество();
	
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Раздел1_МнЧ	= Раздел1[Счетчик - 1].ДанныеМногострочныхЧастей.П0000100.Строки;
		КолвоСтрок2	= Раздел1_МнЧ.Количество();
		
		Для Счетчик2 = 1 По КолвоСтрок2 Цикл
			Показатели = ЗаполнитьПоказатели("Р01С020", Раздел1_МнЧ[Счетчик2 - 1].Данные, Счетчик2);
			
			Если НЕ ЭлементЗаполнен(Раздел1_МнЧ[Счетчик2 - 1], Ложь) Тогда
				Продолжить;
			КонецЕсли;
			
			Настройки.ЭтоОшибка	= ПроверитьСписочноеЗначение(Настройки, Показатели.Р01С020);
			Если Настройки.ЭтоОшибка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗарегистрироватьФормулу(Настройки);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Счетчик);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_02_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.2.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.2.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода вида имущества (стр.001 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода вида имущества (стр.001 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р02С001'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел2'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Истина);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_03_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.3.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.3.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение КБК (стр.011 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение КБК (стр.011 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р02С011'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел2'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_04_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.4.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.4.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода налоговой льготы (стр.160 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода налоговой льготы (стр.160 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р02С160'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел2'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_05_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.5.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.5.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода налоговой льготы в виде понижения налоговой ставки (стр.200 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Значение кода налоговой льготы в виде понижения налоговой ставки (стр.200 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р02С200'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел2'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_06_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.6.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.6.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение Кжд (стр.215 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение Кжд (стр.215 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р02С215'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел2'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_07_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.7.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.7.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода налоговой льготы в виде уменьшения суммы налога (стр.240 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Значение кода налоговой льготы в виде уменьшения суммы налога (стр.240 Раздела 2) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р02С240'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел2'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_08_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.8.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.8.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п. 1 ст. 382 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, уплаченная за пределами РФ (стр.260 Раздела 2) = 0, если код вида имущества (стр.001 Раз'") +
		НСтр("ru='дела 2) ≠ 04'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Неправильно отражена сумма налога, уплаченная за пределами РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0, если %2 ≠ 04'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2.Р02С001 КАК Р02С001,
	|	ВТ_Раздел2.Р02С260 КАК Р02С260
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Результат		= Запрос.Выполнить();
	Выборка			= Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		
		Показатели = ЗаполнитьПоказатели("Р02С001, Р02С260", Выборка,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
		Настройки.ЭтоОшибка	= НЕ Выборка.Р02С001 = "04" И НЕ Выборка.Р02С260 = 0;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р02С260.ЗначениеСтр, Показатели.Р02С001.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_09_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.9.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2.1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2.1 (КС 2.9.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода бюджетной классификации (стр.011 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода бюджетной классификации (стр.011 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р21С002'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел21'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_10_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.10.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2.1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2.1 (КС 2.10.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода номера объекта (стр.010 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода номера объекта (стр.010 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р21С010'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел21'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_11_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.11.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2.1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2.1 (КС 2.11.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода субъекта РФ (стр.030 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода субъекта РФ (стр.030 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р21С031'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел21'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_12_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.12.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2.1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2.1 (КС 2.12.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода муниципального образования (стр.030 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода муниципального образования (стр.030 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р21С032'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел21'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_13_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.13.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2.1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2.1 (КС 2.13.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода поселения, территории (стр.030 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода поселения, территории (стр.030 Раздела 2.1) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р21С034'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел21'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_14_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.14.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 2.14.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода вида имущества (стр.001 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода вида имущества (стр.001 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р03С001'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел3'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_15_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.15.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 2.15.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение КБК (стр.011 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение КБК (стр.011 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р03С011'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел3'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_16_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.16.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 2.16.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода вида сведений (стр.014 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода вида сведений (стр.014 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р03С014'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел3'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_17_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.17.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 2.17.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Значение кода налоговой льготы (стр.040 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Значение кода налоговой льготы (стр.040 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р03С040'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел3'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_18_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.18.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 2.18.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода налоговой льготы в виде понижения налоговой ставки (стр.070 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Значение кода налоговой льготы в виде понижения налоговой ставки (стр.070 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р03С070'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел3'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_19_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.19.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='При наличии значения'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Нерегламентное, проверка списочных значений'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 2.19.доп)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода налоговой льготы в виде уменьшения суммы налога (стр.120 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Значение кода налоговой льготы в виде уменьшения суммы налога (стр.120 Раздела 3) '") 
		+ НСтр("ru='должно соответствовать одному из следующих значений: '"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, НСтр("ru='Р03С120'"));
	Настройки.Вставить("Раздел"				, НСтр("ru='Раздел3'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПроверятьПустые"	, Ложь);
	
	ПроверитьКС_2_19_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_19_код(Настройки)
	
	Раздел	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов[Настройки.Раздел].Строки;
	КолвоСтрок	= Раздел.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели(Настройки.Показатель, Раздел[Счетчик - 1].Данные);
	
		Если НЕ ЗначениеЗаполнено(Показатели[Настройки.Показатель].Значение) И НЕ Настройки.ПроверятьПустые Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.ЭтоОшибка	= ПроверитьСписочноеЗначение(Настройки, Показатели[Настройки.Показатель]);
		Если Настройки.ЭтоОшибка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Счетчик));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, Настройки.Раздел, Счетчик);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСписочноеЗначение(Настройки, Показатель, КоличествоЗначений = 20, Направление = "")
	
	Направление		= ?(ЗначениеЗаполнено(Направление), НаправлениеСортировки.Убыв, НаправлениеСортировки.Возр);
	ИмяПоказателя = СтрЗаменить(Показатель.Имя, "%1", "");
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "%2", "");
	Список			= мДанныеОтчета.ДанныеКС.СоответствиеСписков.Получить(ИмяПоказателя);
	ЭтоОшибка		= Неопределено;
	
	Если НЕ Список = Неопределено Тогда
			
		Если НЕ ЗначениеЗаполнено(Настройки.РасшифровкаСписка) Тогда
			
			МассивРасшифровки = Новый Массив;
			Для каждого ЭлементСписка Из Список Цикл
				Если ЗначениеЗаполнено(ЭлементСписка.Ключ) Тогда
					МассивРасшифровки.Добавить(ЭлементСписка.Ключ);
				КонецЕсли;
			КонецЦикла;
			Сортировка = Новый СписокЗначений;
			Сортировка.ЗагрузитьЗначения(МассивРасшифровки);
			Сортировка.СортироватьПоЗначению(Направление);
	
			КоличествоСтрок = Сортировка.Количество();
			Если КоличествоСтрок > КоличествоЗначений Тогда
				Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
					Сортировка.Удалить(КоличествоСтрок - ОбратныйИндекс);
					Если КоличествоСтрок - ОбратныйИндекс = КоличествоЗначений Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
			
			Если КоличествоСтрок > КоличествоЗначений Тогда
				Сортировка.Добавить("<...>");
			КонецЕсли;
			Настройки.РасшифровкаСписка = СтрСоединить(Сортировка.ВыгрузитьЗначения(), ", ");
		КонецЕсли;
		
		ЭтоОшибка = Список.Получить(Показатель.Значение) = Неопределено;
		
		Настройки.Вставить("ОписаниеОшибки"	, Настройки.ОписаниеОшибки + Настройки.РасшифровкаСписка);
		
		Если НЕ ЗначениеЗаполнено(Настройки.ШаблонРасшифровки) Тогда
		Настройки.Вставить("ШаблонРасшифровки"	
			, НСтр("ru='Указанное значение (""%1"") %2соответствует списку допустимых значений'"));
		КонецЕсли;
		
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатель.ЗначениеСтр, ?(ЭтоОшибка, "не ", ""));
	КонецЕсли;
	
	Возврат ЭтоОшибка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КС_ФормированиеКонтекста

&НаСервере
Процедура ПолучитьСписочныеЗначения()
	
	МассивПроверяемых = Новый Массив;
	МассивПроверяемых.Добавить("П000010002003"			); // кбк
	МассивПроверяемых.Добавить("П000020000101"			); // код вида имущества
	МассивПроверяемых.Добавить("П000020001100"			); // кбк
	МассивПроверяемых.Добавить("П000020016003_КодЛьготы"); // код льготы
	МассивПроверяемых.Добавить("П000020020003_КодЛьготы"); // код льготы
	МассивПроверяемых.Добавить("П000020021503"			); // кжд
	МассивПроверяемых.Добавить("П000020024003_КодЛьготы"); // код льготы
	МассивПроверяемых.Добавить("П000210001100"			); // кбк
	МассивПроверяемых.Добавить("П000210001001"			); // код номера объекта
	МассивПроверяемых.Добавить("П000210003001"			); // код субъекта
	МассивПроверяемых.Добавить("П000210003002"			); // код муниципального образования
	МассивПроверяемых.Добавить("П000210003004"			); // код поселения
	МассивПроверяемых.Добавить("П000030000101"			); // код вида имущества
	МассивПроверяемых.Добавить("П000030001100"			); // кбк
	МассивПроверяемых.Добавить("П000030001401"			); // код вида сведений
	МассивПроверяемых.Добавить("П000030004003_КодЛьготы"); // код льготы
	МассивПроверяемых.Добавить("П000030007003_КодЛьготы"); // код льготы
	МассивПроверяемых.Добавить("П000030012003_КодЛьготы"); // код льготы
	
	УчитыватьНезаполненные = Ложь;
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПроверяемых.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаЗначения.Код) И НЕ УчитыватьНезаполненные Тогда
					Продолжить;
				КонецЕсли;
				СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	мДанныеОтчета.ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПРП(ТаблицаПРП)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ГодОтчета"	, Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КПП"			, СтруктураДанныхТитульный.КПП);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.Ссылка КАК Ссылка,
	|	ДокументРО.Вид КАК Вид,
	|	ДокументРО.ВыбраннаяФорма КАК Форма,
	|	МЕСЯЦ(ДокументРО.ДатаОкончания) КАК Месяц
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчетАвансыИмущество""
	|	И ДокументРО.Организация = &Организация
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И ДокументРО.КПП = &КПП
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Вид УБЫВ
	|ИТОГИ ПО
	|	Месяц";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаГр = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГр.Следующий() Цикл
		Выборка = ВыборкаГр.Выбрать();
		Выборка.Следующий();
		
		фДанныеОтчета = Выборка.Ссылка.ДанныеОтчета.Получить();
		Раздел2	= фДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел2.Строки;
		КолвоСтрок	= Раздел2.Количество();
		Для Счетчик	= 1 По КолвоСтрок Цикл
			НоваяСтрока = ТаблицаПРП.Добавить();
			НоваяСтрока.Ссылка	= Выборка.Ссылка;
			НоваяСтрока.НомерСтраницы = Счетчик;
			НоваяСтрока.Вид		= Выборка.Вид;
			НоваяСтрока.Месяц	= Выборка.Месяц;
			НоваяСтрока.КВИ		= Раздел2[Счетчик - 1].Данные.П000020000101;
			НоваяСтрока.КБК		= Раздел2[Счетчик - 1].Данные.П000020001100;
			НоваяСтрока.ОКТМО	= Раздел2[Счетчик - 1].Данные.П000020001001;
			НоваяСтрока.Р02С180	= Раздел2[Счетчик - 1].Данные.П000020018003;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктурыДанныхКС()
	
	К05		= Новый КвалификаторыСтроки(5);
	К10		= Новый КвалификаторыСтроки(10);
	К20		= Новый КвалификаторыСтроки(20);
	К100	= Новый КвалификаторыСтроки(100);
	
	Т_Раздел1 = Новый ТаблицаЗначений;
	Т_Раздел1.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел1.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	Т_Раздел1.Колонки.Добавить("Р01С010"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел1.Колонки.Добавить("Р01С020"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел1.Колонки.Добавить("Р01С030"			, Новый ОписаниеТипов("Число"));
	Т_Раздел1.Колонки.Добавить("Р01С040"			, Новый ОписаниеТипов("Число"));
	
	Т_Раздел2 = Новый ТаблицаЗначений;
	Т_Раздел2.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С001"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2.Колонки.Добавить("Р02С010"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел2.Колонки.Добавить("Р02С011"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел2.Колонки.Добавить("Р02С150"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С160"			, Новый ОписаниеТипов("Строка",,К10));
	Т_Раздел2.Колонки.Добавить("Р02С161"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел2.Колонки.Добавить("Р02С170"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С180"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С181"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С190"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С200"			, Новый ОписаниеТипов("Строка",,К10));
	Т_Раздел2.Колонки.Добавить("Р02С201"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел2.Колонки.Добавить("Р02С210"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С215"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2.Колонки.Добавить("Р02С220"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С230"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С240"			, Новый ОписаниеТипов("Строка",,К10));
	Т_Раздел2.Колонки.Добавить("Р02С241"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел2.Колонки.Добавить("Р02С250"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С260"			, Новый ОписаниеТипов("Число"));
	
	Т_Раздел20 = Новый ТаблицаЗначений;
	Т_Раздел20.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел20.Колонки.Добавить("Месяц"				, Новый ОписаниеТипов("Число"));
	Т_Раздел20.Колонки.Добавить("МесяцСтр"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел20.Колонки.Добавить("Показатель"		, Новый ОписаниеТипов("Строка",,К10));
	Т_Раздел20.Колонки.Добавить("Графа"				, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел20.Колонки.Добавить("Сумма"				, Новый ОписаниеТипов("Число"));
	
	Т_Раздел21 = Новый ТаблицаЗначений;
	Т_Раздел21.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел21.Колонки.Добавить("Р21С050"			, Новый ОписаниеТипов("Число"));
	
	Т_Раздел3 = Новый ТаблицаЗначений;
	Т_Раздел3.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С001"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел3.Колонки.Добавить("Р03С010"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел3.Колонки.Добавить("Р03С011"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел3.Колонки.Добавить("Р03С014"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел3.Колонки.Добавить("Р03С015"			, Новый ОписаниеТипов("Строка",,К100));
	Т_Раздел3.Колонки.Добавить("Р03С020"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С025"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С030"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С031"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С035"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С036"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С040"			, Новый ОписаниеТипов("Строка",,К10));
	Т_Раздел3.Колонки.Добавить("Р03С041"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел3.Колонки.Добавить("Р03С050"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С051"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С060"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С070"			, Новый ОписаниеТипов("Строка",,К10));
	Т_Раздел3.Колонки.Добавить("Р03С071"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел3.Колонки.Добавить("Р03С080"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С090"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С095"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С100"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С110"			, Новый ОписаниеТипов("Число"));
	Т_Раздел3.Колонки.Добавить("Р03С120"			, Новый ОписаниеТипов("Строка",,К10));
	Т_Раздел3.Колонки.Добавить("Р03С121"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел3.Колонки.Добавить("Р03С130"			, Новый ОписаниеТипов("Число"));
	
	Т_ПРП = Новый ТаблицаЗначений;
	Т_ПРП.Колонки.Добавить("Ссылка"					, Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	Т_ПРП.Колонки.Добавить("НомерСтраницы"			, Новый ОписаниеТипов("Число"));
	Т_ПРП.Колонки.Добавить("Вид"					, Новый ОписаниеТипов("Число"));
	Т_ПРП.Колонки.Добавить("Месяц"					, Новый ОписаниеТипов("Число"));
	Т_ПРП.Колонки.Добавить("КВИ"					, Новый ОписаниеТипов("Строка",,К05));
	Т_ПРП.Колонки.Добавить("КБК"					, Новый ОписаниеТипов("Строка",,К20));
	Т_ПРП.Колонки.Добавить("ОКТМО"					, Новый ОписаниеТипов("Строка",,К20));
	Т_ПРП.Колонки.Добавить("Р02С180"				, Новый ОписаниеТипов("Число"));
	Т_ПРП.Колонки.Добавить("Р02С230"				, Новый ОписаниеТипов("Число"));
		
	Раздел1		= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел1.Строки;
	КолвоСтрок	= Раздел1.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Раздел1_МнЧ	= Раздел1[Счетчик - 1].ДанныеМногострочныхЧастей.П0000100;
		КолвоСтрок2	= Раздел1_МнЧ.Строки.Количество();
		Для Счетчик2 = 1 По КолвоСтрок2 Цикл
			Показатели = ЗаполнитьПоказатели("Р01С010, Р01С020, Р01С030, Р01С040", Раздел1_МнЧ.Строки[Счетчик2 - 1].Данные, 
				Счетчик2);
			НоваяСтрока	= Т_Раздел1.Добавить();
 			НоваяСтрока.НомерСтраницы = Счетчик;
			НоваяСтрока.НомерСтроки	= Счетчик2;
			Для каждого Показатель Из Показатели Цикл
				НоваяСтрока[Показатель.Ключ] = Показатель.Значение.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Раздел2		= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел2.Строки;
	КолвоСтрок	= Раздел2.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели("Р02С001, Р02С010, Р02С011, Р02С150, Р02С160, Р02С161, Р02С170, Р02С180, " +
			"Р02С181, Р02С190, Р02С200, Р02С201, Р02С210, Р02С215, Р02С220, Р02С230, Р02С240, Р02С241, " +
			"Р02С250, Р02С260", Раздел2[Счетчик - 1].Данные);
		НоваяСтрока	= Т_Раздел2.Добавить();
		НоваяСтрока.НомерСтраницы = Счетчик;
		Для каждого Показатель Из Показатели Цикл
			НоваяСтрока[Показатель.Ключ] = Показатель.Значение.Значение;
		КонецЦикла;
		
		НоваяСтрока = Т_ПРП.Добавить();
		НоваяСтрока.НомерСтраницы = Счетчик;
		НоваяСтрока.Месяц	= 12;
		НоваяСтрока.КВИ		= Показатели.Р02С001.Значение;
		НоваяСтрока.КБК		= Показатели.Р02С011.Значение;
		НоваяСтрока.ОКТМО	= Показатели.Р02С010.Значение;
		НоваяСтрока.Р02С230	= Показатели.Р02С230.Значение;
		
		Показатели	= ЗаполнитьПоказатели("Р02С023, Р02С024, Р02С033, Р02С034, Р02С043, Р02С044, Р02С053, Р02С054, " +
			"Р02С063, Р02С064, Р02С073, Р02С074, Р02С083, Р02С084, Р02С093, Р02С094, Р02С103, Р02С104, Р02С113, " +
			"Р02С114, Р02С123, Р02С124, Р02С133, Р02С134, Р02С143, Р02С144", Раздел2[Счетчик - 1].Данные);
		Для каждого Показатель Из Показатели Цикл
			НоваяСтрока	= Т_Раздел20.Добавить();
			НоваяСтрока.НомерСтраницы = Счетчик;
			НоваяСтрока.Показатель = Лев(Показатель.Ключ, 6);
			НоваяСтрока.Графа = Сред(Показатель.Ключ, 7, 1);
			НоваяСтрока.Месяц = Число(Сред(Показатель.Ключ, 5, 2)) - 1;
			НоваяСтрока.МесяцСтр = "" + НоваяСтрока.Месяц;
			НоваяСтрока.Сумма = Показатель.Значение.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Раздел21	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел21.Строки;
	КолвоСтрок	= Раздел21.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели("Р21С050", Раздел21[Счетчик - 1].Данные);
		НоваяСтрока	= Т_Раздел21.Добавить();
		НоваяСтрока.НомерСтраницы = Счетчик;
		Для каждого Показатель Из Показатели Цикл
			НоваяСтрока[Показатель.Ключ] = Показатель.Значение.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Раздел3	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел3.Строки;
	КолвоСтрок	= Раздел3.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели("Р03С001, Р03С010, Р03С011, Р03С014, Р03С015, Р03С020, Р03С025, " +
			"Р03С030, Р03С031, Р03С035, Р03С036, Р03С040, Р03С041, Р03С050, Р03С051, Р03С060, Р03С070, Р03С071, " +
			"Р03С080, Р03С090, Р03С095, Р03С100, Р03С110, Р03С120, Р03С121, Р03С130", 
			Раздел3[Счетчик - 1].Данные);
		НоваяСтрока	= Т_Раздел3.Добавить();
		НоваяСтрока.НомерСтраницы = Счетчик;
		Для каждого Показатель Из Показатели Цикл
			НоваяСтрока[Показатель.Ключ] = Показатель.Значение.Значение;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьДанныеПРП(Т_ПРП);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("Т_Раздел1"		, Т_Раздел1);
	Запрос.УстановитьПараметр("Т_Раздел2"		, Т_Раздел2);
	Запрос.УстановитьПараметр("Т_Раздел3"		, Т_Раздел3);
	Запрос.УстановитьПараметр("Т_Раздел20"		, Т_Раздел20);
	Запрос.УстановитьПараметр("Т_Раздел21"		, Т_Раздел21);
	Запрос.УстановитьПараметр("Т_ПРП"			, Т_ПРП);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Т_Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел1.НомерСтроки КАК НомерСтроки,
	|	Т_Раздел1.Р01С010 КАК Р01С010,
	|	Т_Раздел1.Р01С020 КАК Р01С020,
	|	Т_Раздел1.Р01С030 КАК Р01С030,
	|	Т_Раздел1.Р01С040 КАК Р01С040
	|ПОМЕСТИТЬ ВТ_Раздел1
	|ИЗ
	|	&Т_Раздел1 КАК Т_Раздел1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел2.Р02С001 КАК Р02С001,
	|	Т_Раздел2.Р02С010 КАК Р02С010,
	|	Т_Раздел2.Р02С011 КАК Р02С011,
	|	Т_Раздел2.Р02С150 КАК Р02С150,
	|	Т_Раздел2.Р02С160 КАК Р02С160,
	|	Т_Раздел2.Р02С161 КАК Р02С161,
	|	Т_Раздел2.Р02С170 КАК Р02С170,
	|	Т_Раздел2.Р02С180 КАК Р02С180,
	|	Т_Раздел2.Р02С181 КАК Р02С181,
	|	Т_Раздел2.Р02С190 КАК Р02С190,
	|	Т_Раздел2.Р02С200 КАК Р02С200,
	|	Т_Раздел2.Р02С201 КАК Р02С201,
	|	Т_Раздел2.Р02С210 КАК Р02С210,
	|	Т_Раздел2.Р02С215 КАК Р02С215,
	|	Т_Раздел2.Р02С220 КАК Р02С220,
	|	Т_Раздел2.Р02С230 КАК Р02С230,
	|	Т_Раздел2.Р02С240 КАК Р02С240,
	|	Т_Раздел2.Р02С241 КАК Р02С241,
	|	Т_Раздел2.Р02С250 КАК Р02С250,
	|	Т_Раздел2.Р02С260 КАК Р02С260
	|ПОМЕСТИТЬ ВТ_Раздел2
	|ИЗ
	|	&Т_Раздел2 КАК Т_Раздел2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел20.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел20.Месяц КАК Месяц,
	|	Т_Раздел20.МесяцСтр КАК МесяцСтр,
	|	Т_Раздел20.Показатель КАК Показатель,
	|	Т_Раздел20.Графа КАК Графа,
	|	Т_Раздел20.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Раздел20
	|ИЗ
	|	&Т_Раздел20 КАК Т_Раздел20
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел21.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел21.Р21С050 КАК Р21С050
	|ПОМЕСТИТЬ ВТ_Раздел21
	|ИЗ
	|	&Т_Раздел21 КАК Т_Раздел21
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел3.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел3.Р03С001 КАК Р03С001,
	|	Т_Раздел3.Р03С010 КАК Р03С010,
	|	Т_Раздел3.Р03С011 КАК Р03С011,
	|	Т_Раздел3.Р03С014 КАК Р03С014,
	|	Т_Раздел3.Р03С015 КАК Р03С015,
	|	Т_Раздел3.Р03С020 КАК Р03С020,
	|	Т_Раздел3.Р03С025 КАК Р03С025,
	|	Т_Раздел3.Р03С030 КАК Р03С030,
	|	Т_Раздел3.Р03С031 КАК Р03С031,
	|	Т_Раздел3.Р03С035 КАК Р03С035,
	|	Т_Раздел3.Р03С036 КАК Р03С036,
	|	Т_Раздел3.Р03С040 КАК Р03С040,
	|	Т_Раздел3.Р03С041 КАК Р03С041,
	|	Т_Раздел3.Р03С050 КАК Р03С050,
	|	Т_Раздел3.Р03С051 КАК Р03С051,
	|	Т_Раздел3.Р03С060 КАК Р03С060,
	|	Т_Раздел3.Р03С070 КАК Р03С070,
	|	Т_Раздел3.Р03С071 КАК Р03С071,
	|	Т_Раздел3.Р03С080 КАК Р03С080,
	|	Т_Раздел3.Р03С090 КАК Р03С090,
	|	Т_Раздел3.Р03С095 КАК Р03С095,
	|	Т_Раздел3.Р03С100 КАК Р03С100,
	|	Т_Раздел3.Р03С110 КАК Р03С110,
	|	Т_Раздел3.Р03С120 КАК Р03С120,
	|	Т_Раздел3.Р03С121 КАК Р03С121,
	|	Т_Раздел3.Р03С130 КАК Р03С130
	|ПОМЕСТИТЬ ВТ_Раздел3
	|ИЗ
	|	&Т_Раздел3 КАК Т_Раздел3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_ПРП.Ссылка КАК Ссылка,
	|	Т_ПРП.НомерСтраницы КАК НомерСтраницы,
	|	Т_ПРП.Вид КАК Вид,
	|	Т_ПРП.Месяц КАК Месяц,
	|	Т_ПРП.КВИ КАК КВИ,
	|	Т_ПРП.КБК КАК КБК,
	|	Т_ПРП.ОКТМО КАК ОКТМО,
	|	Т_ПРП.Р02С230 КАК Р02С230,
	|	Т_ПРП.Р02С180 КАК Р02С180
	|ПОМЕСТИТЬ ВТ_ПРП
	|ИЗ
	|	&Т_ПРП КАК Т_ПРП";
	
	Запрос.Выполнить();
	
	СтруктураРазделов = Новый Структура;
	СтруктураРазделов.Вставить("П00001", "Раздела 1");
	СтруктураРазделов.Вставить("П00002", "Раздела 2");
	СтруктураРазделов.Вставить("П00021", "Раздела 2.1");
	СтруктураРазделов.Вставить("П00003", "Раздела 3");
	
	МассивИсключений = Новый Массив;
	
	мДанныеОтчета.ДанныеКС.Вставить("СтруктураРазделов"			, СтруктураРазделов);
	мДанныеОтчета.ДанныеКС.Вставить("МассивИсключений"			, МассивИсключений);
	
КонецФункции

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	// Раздел 1
	
	Если УсловныйКодПоказателя = "Р01С010" Тогда
		Результат.Вставить("Имя", "П000010001003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р01С020" Тогда
		Результат.Вставить("Имя", "П000010002003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р01С030" Тогда
		Результат.Вставить("Имя", "П000010003003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма налога, подлежащая уплате в бюджет (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р01С040" Тогда
		Результат.Вставить("Имя", "П000010004003%1%2");
		Результат.Вставить("Представление", НСтр("ru='Сумма налога, исчисленная к уменьшению (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	// Раздел 2
	
	ИначеЕсли УсловныйКодПоказателя = "Р02С001" Тогда
		Результат.Вставить("Имя", "П000020000101");
		Результат.Вставить("Представление", Нстр("ru='Код вида имущества'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С010" Тогда
		Результат.Вставить("Имя", "П000020001001");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С011" Тогда
		Результат.Вставить("Имя", "П000020001100");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С023" Тогда
		Результат.Вставить("Имя", "П000020002003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.01'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С024" Тогда
		Результат.Вставить("Имя", "П000020002004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.01'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С033" Тогда
		Результат.Вставить("Имя", "П000020003003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.02'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С034" Тогда
		Результат.Вставить("Имя", "П000020003004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.02'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С043" Тогда
		Результат.Вставить("Имя", "П000020004003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.03'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С044" Тогда
		Результат.Вставить("Имя", "П000020004004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.03'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С053" Тогда
		Результат.Вставить("Имя", "П000020005003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.04'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С054" Тогда
		Результат.Вставить("Имя", "П000020005004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.04'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С063" Тогда
		Результат.Вставить("Имя", "П000020006003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.05'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С064" Тогда
		Результат.Вставить("Имя", "П000020006004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.05'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С073" Тогда
		Результат.Вставить("Имя", "П000020007003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.06'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С074" Тогда
		Результат.Вставить("Имя", "П000020007004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.06'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С083" Тогда
		Результат.Вставить("Имя", "П000020008003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.07'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С084" Тогда
		Результат.Вставить("Имя", "П000020008004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.07'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С093" Тогда
		Результат.Вставить("Имя", "П000020009003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.08'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С094" Тогда
		Результат.Вставить("Имя", "П000020009004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.08'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С103" Тогда
		Результат.Вставить("Имя", "П000020010003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.09'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С104" Тогда
		Результат.Вставить("Имя", "П000020010004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.09'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С113" Тогда
		Результат.Вставить("Имя", "П000020011003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.10'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С114" Тогда
		Результат.Вставить("Имя", "П000020011004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.10'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С123" Тогда
		Результат.Вставить("Имя", "П000020012003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.11'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С124" Тогда
		Результат.Вставить("Имя", "П000020012004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.11'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С133" Тогда
		Результат.Вставить("Имя", "П000020013003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 01.12'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С134" Тогда
		Результат.Вставить("Имя", "П000020013004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.12'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С143" Тогда
		Результат.Вставить("Имя", "П000020014003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств по состоянию на 31.12'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С144" Тогда
		Результат.Вставить("Имя", "П000020014004");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость льготируемого имущества по состоянию на 31.12'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С150" Тогда
		Результат.Вставить("Имя", "П000020015003");
		Результат.Вставить("Представление", 
			Нстр("ru='Среднегодовая стоимость недвижимого имущества за налоговый период (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С160" Тогда
		Результат.Вставить("Имя", "П000020016003_КодЛьготы");
		Результат.Вставить("Представление", Нстр("ru='Код налоговой льготы'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С161" Тогда
		Результат.Вставить("Имя", "П000020016003_Основание");
		Результат.Вставить("Представление", Нстр("ru='Основание налоговой льготы'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С170" Тогда
		Результат.Вставить("Имя", "П000020017003");
		Результат.Вставить("Представление", 
			Нстр("ru='Среднегодовая стоимость необлагаемого налогом недвижимого имущества за налоговый период (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С180" Тогда
		Результат.Вставить("Имя", "П000020018003_Числ");
		Результат.Вставить("Представление", 
			Нстр("ru='Доля балансовой стоимости объекта недвижимого имущества на территории субъекта РФ (числитель)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С181" Тогда
		Результат.Вставить("Имя", "П000020018003_Знам");
		Результат.Вставить("Представление", 
			Нстр("ru='Доля балансовой стоимости объекта недвижимого имущества на территории субъекта РФ (знаменатель)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С189" Тогда
		Результат.Вставить("Имя", "П000020018003");
		Результат.Вставить("Представление", 
			Нстр("ru='Сумма авансового платежа за предыдущие отчетные периоды (в рублях)'")); // РО ИмуществоАвансы
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С190" Тогда
		Результат.Вставить("Имя", "П000020019003");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С200" Тогда
		Результат.Вставить("Имя", "П000020020003_КодЛьготы");
		Результат.Вставить("Представление", Нстр("ru='Код налоговой льготы в виде понижения налоговой ставки'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С201" Тогда
		Результат.Вставить("Имя", "П000020020003_Основание");
		Результат.Вставить("Представление", Нстр("ru='Основание налоговой льготы в виде понижения налоговой ставки'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С210" Тогда
		Результат.Вставить("Имя", "П000020021003");
		Результат.Вставить("Представление", Нстр("ru='Налоговая ставка (%)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С215" Тогда
		Результат.Вставить("Имя", "П000020021503");
		Результат.Вставить("Представление", Нстр("ru='Кжд'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С220" Тогда
		Результат.Вставить("Имя", "П000020022003");
		Результат.Вставить("Представление", Нстр("ru='Сумма налога за налоговый период (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С230" Тогда
		Результат.Вставить("Имя", "П000020023003");
		Результат.Вставить("Представление", Нстр("ru='Сумма авансовых платежей за отчетные периоды (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С240" Тогда
		Результат.Вставить("Имя", "П000020024003_КодЛьготы");
		Результат.Вставить("Представление", Нстр("ru='Код налоговой льготы в виде уменьшения суммы налога'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);	
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С241" Тогда
		Результат.Вставить("Имя", "П000020024003_Основание");
		Результат.Вставить("Представление", Нстр("ru='Основание налоговой льготы в виде уменьшения суммы налога'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);	
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С250" Тогда
		Результат.Вставить("Имя", "П000020025003");
		Результат.Вставить("Представление", Нстр("ru='Сумма налоговой льготы, уменьшающей сумму налога (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р02С260" Тогда
		Результат.Вставить("Имя", "П000020026003");
		Результат.Вставить("Представление", Нстр("ru='Сумма налога, уплаченная за пределами РФ (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	// Раздел 2.1
		
	ИначеЕсли УсловныйКодПоказателя = "Р21С002" Тогда
		Результат.Вставить("Имя", "П000210001100");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);	
		
	ИначеЕсли УсловныйКодПоказателя = "Р21С010" Тогда
		Результат.Вставить("Имя", "П000210001001");
		Результат.Вставить("Представление", Нстр("ru='Код номера объекта'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);	
		
	ИначеЕсли УсловныйКодПоказателя = "Р21С031" Тогда
		Результат.Вставить("Имя", "П000210003001");
		Результат.Вставить("Представление", Нстр("ru='Код субъекта РФ'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);	
		
	ИначеЕсли УсловныйКодПоказателя = "Р21С032" Тогда
		Результат.Вставить("Имя", "П000210003002");
		Результат.Вставить("Представление", Нстр("ru='Код муниципального образования'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);	
		
	ИначеЕсли УсловныйКодПоказателя = "Р21С034" Тогда
		Результат.Вставить("Имя", "П000210003004");
		Результат.Вставить("Представление", Нстр("ru='Код поселения (территории)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);	
		
	ИначеЕсли УсловныйКодПоказателя = "Р21С050" Тогда
		Результат.Вставить("Имя", "П000210005003");
		Результат.Вставить("Представление", Нстр("ru='Остаточная стоимость основных средств'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);	
		
	// Раздел 3
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С001" Тогда
		Результат.Вставить("Имя", "П000030000101");
		Результат.Вставить("Представление", Нстр("ru='Код вида имущества'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р03С010" Тогда
		Результат.Вставить("Имя", "П000030001001");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р03С011" Тогда
		Результат.Вставить("Имя", "П000030001100");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С014" Тогда
		Результат.Вставить("Имя", "П000030001401");
		Результат.Вставить("Представление", Нстр("ru='Код вида сведений'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С015" Тогда
		Результат.Вставить("Имя", "П000030001501");
		Результат.Вставить("Представление", Нстр("ru='Кадастровый номер'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С020" Тогда
		Результат.Вставить("Имя", "П000030002003");
		Результат.Вставить("Представление", Нстр("ru='Кадастровая стоимость (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С025" Тогда
		Результат.Вставить("Имя", "П000030002503");
		Результат.Вставить("Представление", Нстр("ru='Кадастровая стоимость необлагаемая налогом (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С030" Тогда
		Результат.Вставить("Имя", "П000030003003_Числ");
		Результат.Вставить("Представление", Нстр("ru='Доля в праве общей собственности (числитель)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С031" Тогда
		Результат.Вставить("Имя", "П000030003003_Знам");
		Результат.Вставить("Представление", Нстр("ru='Доля в праве общей собственности (знаменатель)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С035" Тогда
		Результат.Вставить("Имя", "П000030003503_Числ");
		Результат.Вставить("Представление", Нстр("ru='Доля кадастровой стоимости здания (числитель)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С036" Тогда
		Результат.Вставить("Имя", "П000030003603_Знам");
		Результат.Вставить("Представление", Нстр("ru='Доля кадастровой стоимости здания (знаменатель)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С040" Тогда
		Результат.Вставить("Имя", "П000030004003_КодЛьготы");
		Результат.Вставить("Представление", Нстр("ru='Код налоговой льготы'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С041" Тогда
		Результат.Вставить("Имя", "П000030004003_Основание");
		Результат.Вставить("Представление", Нстр("ru='Основание налоговой льготы'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С050" Тогда
		Результат.Вставить("Имя", "П000030005003_Числ");
		Результат.Вставить("Представление", Нстр("ru='Доля кадастровой стоимости на территории субъекта РФ (числитель)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С051" Тогда
		Результат.Вставить("Имя", "П000030005003_Знам");
		Результат.Вставить("Представление", Нстр("ru='Доля кадастровой стоимости на территории субъекта РФ (знаменатель)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С060" Тогда
		Результат.Вставить("Имя", "П000030006003");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С070" Тогда
		Результат.Вставить("Имя", "П000030007003_КодЛьготы");
		Результат.Вставить("Представление", Нстр("ru='Код налоговой льготы в виде понижения налоговой ставки'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С071" Тогда
		Результат.Вставить("Имя", "П000030007003_Основание");
		Результат.Вставить("Представление", Нстр("ru='Основание налоговой льготы в виде понижения налоговой ставки'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С080" Тогда
		Результат.Вставить("Имя", "П000030008003");
		Результат.Вставить("Представление", Нстр("ru='Налоговая ставка (%)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С090" Тогда
		Результат.Вставить("Имя", "П000030009003");
		Результат.Вставить("Представление", Нстр("ru='Коэффициент Кв'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С095" Тогда
		Результат.Вставить("Имя", "П000030009503");
		Результат.Вставить("Представление", Нстр("ru='Коэффициент Ки'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С100" Тогда
		Результат.Вставить("Имя", "П000030010003");
		Результат.Вставить("Представление", Нстр("ru='Сумма налога за налоговый период (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С110" Тогда
		Результат.Вставить("Имя", "П000030011003");
		Результат.Вставить("Представление", Нстр("ru='Сумма авансовых платежей за отчетные периоды (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С120" Тогда
		Результат.Вставить("Имя", "П000030012003_КодЛьготы");
		Результат.Вставить("Представление", Нстр("ru='Код налоговой льготы в виде уменьшения суммы налога'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С121" Тогда
		Результат.Вставить("Имя", "П000030012003_Основание");
		Результат.Вставить("Представление", Нстр("ru='Основание налоговой льготы в виде уменьшения суммы налога'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р03С130" Тогда
		Результат.Вставить("Имя", "П000030013003");
		Результат.Вставить("Представление", Нстр("ru='Сумма налоговой льготы, уменьшающей сумму налога (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	КонецЕсли;
	
	Если Результат.Представление = "" Тогда
		Результат.Вставить("Представление", ПредставлениеПоказателя(Результат.Имя));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура РасшифроватьПоказатели(Знач СтруктураПоказателей, 
	Знач Настройки,
	Знач НазваниеСтраницы,
	Знач НомерСтраницы,
	Знач ВключаяПоказатели	= Неопределено,
	Знач ИсключаяПоказатели	= Неопределено,
	Знач Отчет = Неопределено)
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		
		Если ПропуститьЭлемент(ЭлементКоллекции.Ключ, ВключаяПоказатели, ИсключаяПоказатели) Тогда
			Продолжить;
		КонецЕсли;
		
		ВнестиПоказательВРасшифровку(ЭлементКоллекции.Значение, НазваниеСтраницы, СтрокаЧГ0(НомерСтраницы), Отчет);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ОписаниеКС = СформироватьОписаниеКС(Настройки, "ДопСведенияВЗаголовокРасшифровки");
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, 
		ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= Формат(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок, "ЧГ=0");
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, НСтр("ru=''"));
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель, ИмяКолонки = "")
	
	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяКолонки];
	ИначеЕсли ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		Если ЗначениеПоказателя = Неопределено Тогда
			ЗначениеПоказателя = 0;
		Иначе
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки, ИмяКолонки = "")
	
	НомерСтрокиСтр = "" + НомерСтроки;
	ИмяПоказателя = СтрЗаменить(Показатель.Имя, "%1", "");
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "%2", "");
		
	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяКолонки];
	ИначеЕсли ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИнфоКПредставлениюПоказателя(Показатель, СтрокаИнфо)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	Если СтрЗаканчиваетсяНа(ПредставлениеПоказателя, ")") Тогда
		ПозицияОткрСкобки = СтрНайти(ПредставлениеПоказателя, "(", НаправлениеПоиска.СКонца);
		Если ПозицияОткрСкобки > 0 Тогда
			ПредставлениеПоказателя = Лев(ПредставлениеПоказателя, ПозицияОткрСкобки);
			Показатель.Представление = ПредставлениеПоказателя + СтрокаИнфо + ")";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Показатель.Представление = ПредставлениеПоказателя + " (" + СтрокаИнфо + ")";
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, 
	ИмяСтраницы, НомерСтраницы = Неопределено, СсылкаНаДокумент = Неопределено)
	
	ПредставлениеПоказателя = ПредставлениеПоказателя(Показатель);
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтрЗаменить(Показатель.Имя, "%1", "_");
		ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "%2", Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		?(СсылкаНаДокумент = Неопределено, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, СсылкаНаДокумент),
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
		Настройки.Вставить("ПредставлениеПоказателя", "");
		Настройки.Вставить("РасшифровкаСписка"		, "");
		
		Если Документирование Тогда
			
			Настройки.Вставить("НомерКС");
			Настройки.Вставить("Раздел");
			Настройки.Вставить("Условие");
			Настройки.Вставить("Комментарий");
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		СтрокаОписания.ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) 
			+ Настройки.ОписаниеКС;
		Возврат Настройки;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
				
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоказатели(Знач СтрокаПоказателей, Источник, НомерСтроки = 0, ПоКолонке = Ложь)

	МассивНазваний			= СтрРазделить(СтрокаПоказателей, ", ", Ложь);
	СтруктураПоказателей	= Новый Структура;
	
	Для каждого ЭлементМассива Из МассивНазваний Цикл
		Показатель = ПоказательПоСтроке(ЭлементМассива);
		СтруктураПоказателей.Вставить(ЭлементМассива, Показатель);
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			ВставитьЗначениеМногострочногоПоказателя(Источник, ЭлементКоллекции.Значение, НомерСтроки, 
				?(ПоКолонке, ЭлементКоллекции.Ключ, ""));
		Иначе
			ВставитьЗначениеПоказателя(Источник, ЭлементКоллекции.Значение, ?(ПоКолонке, ЭлементКоллекции.Ключ, ""));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПоказателей;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат(Знач Настройки, Знач СтруктураРезультата);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
		"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПропуститьЭлемент(НазваниеПоказателя, СтрокаВключая, СтрокаИсключая)
	
	Если СтрокаВключая = Неопределено И СтрокаИсключая = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Обработать	= Не СтрокаВключая = Неопределено И Не СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0
		Или Не СтрокаИсключая = Неопределено И СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0;
	Исключить	= Не СтрокаИсключая = Неопределено И Не СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0
		Или Не СтрокаВключая = Неопределено И СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0;
	
	Если Исключить Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Обработать Тогда
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		
		Если Не Настройки.ДопСведенияПараметры = Неопределено И
			Не Настройки.ДопСведенияПараметры.Количество() = 0 Тогда
			
			МассивПараметров = Новый Массив;
			Для каждого ЭлементКоллекции Из Настройки.ДопСведенияПараметры Цикл
				МассивПараметров.Добавить(ЭлементКоллекции.Значение);
			КонецЦикла;
			
			КоличествоПараметров = МассивПараметров.Количество();
			
			Если КоличествоПараметров = 1 Тогда
				Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений, "%1", МассивПараметров[0]);
			ИначеЕсли КоличествоПараметров = 2 Тогда
				Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений, "%1", МассивПараметров[0]);
				Настройки.ДопСведения = СтрЗаменить(Настройки.ДопСведения, "%2", МассивПараметров[1]);
			ИначеЕсли КоличествоПараметров = 3 Тогда
				Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений, "%1", МассивПараметров[0]);
				Настройки.ДопСведения = СтрЗаменить(Настройки.ДопСведения, "%2", МассивПараметров[1]);
				Настройки.ДопСведения = СтрЗаменить(Настройки.ДопСведения, "%3", МассивПараметров[2]);
			ИначеЕсли КоличествоПараметров = 4 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3]);
			ИначеЕсли КоличествоПараметров = 5 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4]);
			Иначе
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4], МассивПараметров[5]);
			КонецЕсли;
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(ВнешняяКоллекция, Знач Результат)
	
	Для каждого ВнешнийЭлемент Из ВнешняяКоллекция Цикл
		Результат = ЭлементЗаполнен(ВнешнийЭлемент, Результат);
		Если Результат Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭлементЗаполнен(ВнешнийЭлемент, Знач Результат)
	
	Для Каждого Показатель Из ВнешнийЭлемент.Данные Цикл
		Если НЕ мДанныеОтчета.ДанныеКС.МассивИсключений.Найти(Показатель.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат Или ЗначениеЗаполнено(Показатель.Значение);
		Если Результат Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВнешнийЭлемент.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
		Для каждого МнЧасть Из ВнешнийЭлемент.ДанныеМногострочныхЧастей Цикл
			Результат = Результат Или РазделЗаполнен(МнЧасть.Значение.Строки, Результат);
			Если Результат Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ВнешнийЭлемент.Строки.Количество() = 0 Тогда
		Для каждого ВнутреннийЭлемент Из ВнешнийЭлемент.Строки Цикл
			Результат = Результат Или РазделЗаполнен(ВнутреннийЭлемент.Строки, Результат);
			Если Результат Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПредставлениеПоказателя(Показатель, ПолноеПредставление = Истина)
	
	Перем ИмяПодраздела, ИмяРаздела;
	
	МассивПредставлений = Новый Массив;
	
	Если ЗначениеЗаполнено(Показатель.Имя) Тогда
		Если Сред(Показатель.Имя, 6, 1) = "2" И Сред(Показатель.Имя, 9, 2) >= "02" И Сред(Показатель.Имя, 9, 2) <= "14" Тогда
			МассивПредставлений.Добавить("Графа " + Сред(Показатель.Имя, 13, 1));
		КонецЕсли;
		
		Если НЕ Сред(Показатель.Имя, 9, 3) = "000" Тогда
			МассивПредставлений.Добавить("Строка " + Сред(Показатель.Имя, 9, 3));
		КонецЕсли;
		
		Если мДанныеОтчета.ДанныеКС.СтруктураРазделов.Свойство(Лев(Показатель.Имя, 6), ИмяРаздела) Тогда
			МассивПредставлений.Добавить(ИмяРаздела);
		КонецЕсли;
	КонецЕсли;
	
	ТехническоеПредставление = СтрСоединить(МассивПредставлений, " ");
	МассивПредставлений.Очистить();
	
	Если ЗначениеЗаполнено(ТехническоеПредставление) Тогда
		МассивПредставлений.Добавить(ТехническоеПредставление);
	КонецЕсли;
	
	Если ПолноеПредставление Тогда
		МассивПредставлений.Добавить(Показатель.Представление);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПредставлений, ". ");
	
КонецФункции

&НаСервере
Функция РасшифровкаВСтр(СтрокаДляРасшифровки)
	Если ТипЗнч(СтрокаДляРасшифровки) = Тип("Строка") Тогда
		Если СтрокаДляРасшифровки= "" Тогда
			Возврат "0";
		КонецЕсли;
		
		Если Прав(СтрокаДляРасшифровки, 3) = " + " Тогда
			СтрокаДляРасшифровки = Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " - " Тогда
			СтрокаДляРасшифровки = Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " и " Тогда
			СтрокаДляРасшифровки = Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		КонецЕсли;
		
		Если Лев(СтрокаДляРасшифровки, 3) = " + " Тогда
			СтрокаДляРасшифровки = Прав(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Лев(СтрокаДляРасшифровки, 3) = " - " Тогда
			СтрокаДляРасшифровки = Прав(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Лев(СтрокаДляРасшифровки, 3) = " и " Тогда
			СтрокаДляРасшифровки = Прав(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		КонецЕсли;
		
		Возврат СтрокаДляРасшифровки;
	ИначеЕсли ТипЗнч(СтрокаДляРасшифровки) = Тип("Число") Тогда
		Возврат СтрокаЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтрокаДляРасшифровки));
	Иначе
		Возврат СтрокаДляРасшифровки;
	КонецЕсли;
КонецФункции

&НаСервере
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция ПредставлениеДроби(ПоказательЧислителя, ПоказательЗнаменателя, ВернутьНоль = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ПоказательЗнаменателя.Значение) И ВернутьНоль Тогда
		Возврат "0";
	ИначеЕсли НЕ ЗначениеЗаполнено(ПоказательЗнаменателя.Значение) Тогда
		Возврат "1/1";
	Иначе
		Возврат ПоказательЧислителя.ЗначениеСтр + "/" + ПоказательЗнаменателя.ЗначениеСтр;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.РегистрацияВНалОргане) Тогда
			
			ТабличныйДокумент.Области["КПП"].Значение
			= СокрЛП(СтруктураРеквизитовФормы.РегистрацияВНалОргане.КПП);
			
			ТабличныйДокумент.Области["НалоговыйОрган"].Значение
			= СокрЛП(СтруктураРеквизитовФормы.РегистрацияВНалОргане.Код);
			
		Иначе
			
			ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
			
			КодНО = СведенияОбОрганизации.КодНО;
			Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
				КодНО = " " + КодНО;
			КонецЦикла;
			ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
			
		КонецЕсли;
		
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = ТабличныйДокумент.Области.НаимОрг.Значение;
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "ПоМесту" ИЛИ КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыйРаздел(ИмяРаздела)
	
	УдалитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, ТекВетка);
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела,
	ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел2"
		ИЛИ Ячейка.Раздел = "Раздел21"
		ИЛИ Ячейка.Раздел = "Раздел3" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						НаимСтраницы = "Стр. ";
						Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
							НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
						КонецЕсли;
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
								НаимСтраницы = "Стр. ";
								Если СтруктураПодчРаздела.Свойство("НаимСтраницы") Тогда
									НаимСтраницы = СтруктураПодчРаздела["НаимСтраницы"];
								КонецЕсли;
								ЭлементПодчРаздел.КолонкаРазделыОтчета              = НаимСтраницы;
								ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
								ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = ИндПодчРаздела + 1;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ПараметрыОбработчикаОжидания = Новый Структура;
		ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
		ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура(
		"ИдентификаторЗадания", СтруктураРеквизитовФормы.ИдентификаторЗадания), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
КонецФункции