
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ ОТЧЕТА

#Область ПечатьОтчета

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ПараметрыОтчета.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Укажите организацию.");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ЛицевойСчет.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Укажите лицевой счет.");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.НачалоПериода > ПараметрыОтчета.КонецПериода Тогда 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Начало периода не может быть позже окончания периода.");
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Отчеты.КВП_ЛицевойСчет.ПолучитьМакет("Ведомость");
	
	// Инициализация вспомогательных переменных.
	СчетчикСтрок = 0;
	
	ТаблицаСтрокТаблицы = Новый ТаблицаЗначений();
	ТаблицаСтрокТаблицы.Колонки.Добавить("Строка");
	ТаблицаСтрокТаблицы.Колонки.Добавить("Уровень");
	ТаблицаСтрокТаблицы.Колонки.Добавить("НомерСтроки");
	
	мТаблицаПроживающих = Новый ТаблицаЗначений();
	мТаблицаПроживающих.Колонки.Добавить("Период", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	мТаблицаПроживающих.Колонки.Добавить("Колво",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	
	СписокЛицевыхСчетов = ПолучитьСписокЛицевыхСчетов(ПараметрыОтчета);
	
	// Получение данных.
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("ОбщаяПлощадь",  Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	Запрос.УстановитьПараметр("ЛицевойСчет",   СписокЛицевыхСчетов);
	
	ДеревоРезультатаСЛицевымиСчетами = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Льготы. Получаем льготы по списку лицевых счетов.
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ ВрЛьготы
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаНач,
	|			Проживающий.Владелец В (&ЛицевойСчет)
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготы.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготы.Проживающий,
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_НазначенныеЛьготы.Проживающий.Владелец В(&ЛицевойСчет)
	|	И КВП_НазначенныеЛьготы.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Льготы.ЛьготнаяКатегория,
	|	Льготы.ЛицевойСчет,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	ВрЛьготы КАК Льготы
	|
	|СГРУППИРОВАТЬ ПО
	|	Льготы.ЛьготнаяКатегория,
	|	Льготы.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон",     КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("ЛицевойСчет", СписокЛицевыхСчетов);
	ВыборкаПоЛьготам = Запрос.Выполнить().Выбрать();
	
	// Проживающие. Получаем проживающих по списку лицевых счетов.
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающих.ДатаИзменения КАК Период,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОПроживающих.Проживает
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК Изменение,
	|	УПЖКХ_СведенияОПроживающих.Жилец КАК Проживающий,
	|	УПЖКХ_СведенияОПроживающих.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих КАК УПЖКХ_СведенияОПроживающих
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающих.ЛицевойСчет В(&ЛицевойСчет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проживающий,
	|	Период";
	Запрос.УстановитьПараметр("ЛицевойСчет", СписокЛицевыхСчетов);
	ТаблицаПроживающих = Запрос.Выполнить().Выгрузить();
	
	// Основные области.
	ОбластьЗаголовка     = Макет.ПолучитьОбласть("Заголовок");
	ШапкаФиксированная   = Макет.ПолучитьОбласть("Шапка|ФиксированнаяЧасть");
	ШапкаУслуга          = Макет.ПолучитьОбласть("Шапка|ИзменяемаяЧасть");
	СтрокаПодвала        = Макет.ПолучитьОбласть("Подвал");
	КолонкаИтог          = Макет.ПолучитьОбласть("Шапка|КолонкаИтог");
	
	ШапкаИтогоНачисления = Макет.ПолучитьОбласть("Шапка|ИтогоНачисления");
	ШапкаОплатыИтого     = Макет.ПолучитьОбласть("Шапка|ИтогоОплаты");
	ШапкаУслугаОплат     = Макет.ПолучитьОбласть("Шапка|ИзменяемаяЧастьОплат");
	КолонкаИтогОплат     = Макет.ПолучитьОбласть("Шапка|КолонкаИтогОплат");
	
	ДанныеОЛьготах  = "";
	СтруктураПоиска = Новый Структура("ЛицевойСчет");
	СтруктураПоиска.ЛицевойСчет = СписокЛицевыхСчетов;
	Пока ВыборкаПоЛьготам.НайтиСледующий(СтруктураПоиска) Цикл
		ДанныеОЛьготах  = ДанныеОЛьготах
						+ ", "
						+ ВыборкаПоЛьготам.ЛьготнаяКатегория
						+ ?(ВыборкаПоЛьготам.Количество = 1, "", " (" 
						+ ВыборкаПоЛьготам.Количество
						+ ")");
	КонецЦикла;
	ОбластьМакетаЛьготы = Макет.ПолучитьОбласть("Льготы");
	Если Не ПустаяСтрока(ДанныеОЛьготах) Тогда
		ДанныеОЛьготах = Сред(ДанныеОЛьготах, СтрДлина(", ") + 1);
		ОбластьМакетаЛьготы.Параметры.Льготы = ДанныеОЛьготах;
	КонецЕсли;
	
	КоличествоЗаписей = ДеревоРезультатаСЛицевымиСчетами.Строки.Количество();
	Если КоличествоЗаписей = 0 Тогда
		
		ОбработатьВыводВТаблицуПоЛицевомуСчету(ПараметрыОтчета,
											   ОбластьЗаголовка, 
											   ТабличныйДокумент);
		Если Не ПустаяСтрока(ДанныеОЛьготах) Тогда
			ТабличныйДокумент.Вывести(ОбластьМакетаЛьготы);
		КонецЕсли;
			
		ТабличныйДокумент.Вывести(ШапкаФиксированная);
		ТабличныйДокумент.Присоединить(ШапкаИтогоНачисления, 2);
		ТабличныйДокумент.Присоединить(КолонкаИтог, 1);
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал|ФиксированнаяЧасть");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал|ИтогоНачисления");
		ТабличныйДокумент.Присоединить(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал|КолонкаИтог");
		ТабличныйДокумент.Присоединить(ОбластьМакета);
	
	Иначе
		
		// Основной цикл по лицевым счетам.
		Для Каждого ДеревоРезультатаСЛицевымиСчетами ИЗ ДеревоРезультатаСЛицевымиСчетами.Строки Цикл
			
			ТаблицаВсехУслуг = ПолучитьТаблицуУслуг(ДеревоРезультатаСЛицевымиСчетами);
			
			// Основные области.
			ОбластьЗаголовка     = Макет.ПолучитьОбласть("Заголовок");
			ШапкаФиксированная   = Макет.ПолучитьОбласть("Шапка|ФиксированнаяЧасть");
			ШапкаУслуга          = Макет.ПолучитьОбласть("Шапка|ИзменяемаяЧасть");
			СтрокаПодвала        = Макет.ПолучитьОбласть("Подвал");
			КолонкаИтог          = Макет.ПолучитьОбласть("Шапка|КолонкаИтог");
			
			ШапкаИтогоНачисления = Макет.ПолучитьОбласть("Шапка|ИтогоНачисления");
			ШапкаОплатыИтого     = Макет.ПолучитьОбласть("Шапка|ИтогоОплаты");
			ШапкаУслугаОплат     = Макет.ПолучитьОбласть("Шапка|ИзменяемаяЧастьОплат");
			КолонкаИтогОплат     = Макет.ПолучитьОбласть("Шапка|КолонкаИтогОплат");
			
			// Начинаем заполнение.
			
			ИтогиПоУслугам      = ПолучитьСоответствиеПоУслугам(ТаблицаВсехУслуг);
			ИтогиЛьготПоУслугам = ПолучитьСоответствиеПоУслугам(ТаблицаВсехУслуг);
			ИтогиОплатПоУслугам = ПолучитьСоответствиеПоУслугам(ТаблицаВсехУслуг);
			
			// Выводим общую информацию по лицевому счету (Заголовок).
			ОбработатьВыводВТаблицуПоЛицевомуСчету(ПараметрыОтчета, 
												   ОбластьЗаголовка, 
												   ТабличныйДокумент);
			
			ДанныеОЛьготах = "";
			
			СтруктураПоиска = Новый Структура("ЛицевойСчет");
			СтруктураПоиска.ЛицевойСчет = ДеревоРезультатаСЛицевымиСчетами.ЛицевойСчет;
			// Заполняем льготы по конкретному лицевому счету.
			Пока ВыборкаПоЛьготам.НайтиСледующий(СтруктураПоиска) Цикл
				ДанныеОЛьготах 	= ДанныеОЛьготах 
								+ ", " 
								+ ВыборкаПоЛьготам.ЛьготнаяКатегория 
								+ ?(ВыборкаПоЛьготам.Количество = 1, "", " (" 
								+ ВыборкаПоЛьготам.Количество 
								+ ")");
			КонецЦикла;
			Если Не ПустаяСтрока(ДанныеОЛьготах) Тогда
				ДанныеОЛьготах = Сред(ДанныеОЛьготах, СтрДлина(", ") + 1);
				ОбластьМакета = Макет.ПолучитьОбласть("Льготы");
				ОбластьМакета.Параметры.Льготы = ДанныеОЛьготах;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			// Заполняем проживающих по конкретному лицевому счету.
			ТаблицаИзменений = ТаблицаПроживающих.Скопировать(СтруктураПоиска);
			
			// Обработаем таблицу.
			МаксИндекс = ТаблицаИзменений.Количество() - 1;
			Для Сч = 1 По МаксИндекс Цикл
				Строка1 = ТаблицаИзменений.Получить(МаксИндекс - Сч);
				Строка2 = ТаблицаИзменений.Получить(МаксИндекс - Сч + 1);
				Если Строка1.Проживающий = Строка2.Проживающий И Строка1.Изменение = Строка2.Изменение Тогда
					ТаблицаИзменений.Удалить(Строка2);
				КонецЕсли;
			КонецЦикла;
			ПредПроживающий = Неопределено;
			Для Каждого СтрокаТаблицы Из ТаблицаИзменений Цикл
				Если Не ПредПроживающий = СтрокаТаблицы.Проживающий Тогда
					ПредПроживающий = СтрокаТаблицы.Проживающий;
					Если СтрокаТаблицы.Изменение < 0 Тогда
						СтрокаТаблицы.Изменение = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТаблицаИзменений.Свернуть("Период", "Изменение");
			
			мТаблицаПроживающих.Очистить();
			ТекКолво = 0;
			Для Каждого СтрокаТаблицы Из ТаблицаИзменений Цикл
				ТекКолво    = ТекКолво + СтрокаТаблицы.Изменение;
				НоваяСтрока = мТаблицаПроживающих.Добавить();
				НоваяСтрока.Период = СтрокаТаблицы.Период;
				НоваяСтрока.Колво  = ТекКолво;
			КонецЦикла;
			
			// Шапка.
			ТабличныйДокумент.Вывести(ШапкаФиксированная);
			ТабличныйДокумент.Присоединить(ШапкаИтогоНачисления, 2);
			ТабличныйДокумент.НачатьАвтогруппировкуКолонок();
			
			НомерСтроки      = ТабличныйДокумент.ВысотаТаблицы - 1;
			ПерваяКолонка    = ШапкаФиксированная.ШиринаТаблицы + 1;
			ПоследняяКолонка = ПерваяКолонка;
			
			// Добавление в макет услуг с присоединением колонок.
			Для Каждого Строка ИЗ ТаблицаВсехУслуг Цикл
				ШапкаУслуга.Параметры.Услуга = Строка.Услуга;
				ТабличныйДокумент.Присоединить(ШапкаУслуга, 2);
				ПоследняяКолонка = ПоследняяКолонка + ШапкаУслуга.ШиринаТаблицы;
			КонецЦикла;
			
			ТабличныйДокумент.Присоединить(КолонкаИтог, 1);
			ТабличныйДокумент.ЗакончитьАвтогруппировкуКолонок();
			
			ТабличныйДокумент.Область(НомерСтроки, ПерваяКолонка, НомерСтроки, ПоследняяКолонка).Объединить();
			
			ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ВысотаТаблицы;
			ТабличныйДокумент.ФиксацияСлева  = 3;
			
			// {{ Оплата
			ТабличныйДокумент.Присоединить(ШапкаОплатыИтого, 2);
			ТабличныйДокумент.НачатьАвтогруппировкуКолонок();
			ПерваяКолонка = ПоследняяКолонка + КолонкаИтог.ШиринаТаблицы + ШапкаИтогоНачисления.ШиринаТаблицы;
			тмПерваяКолонкаУслугОплат = ПерваяКолонка;
			ПоследняяКолонка = ПерваяКолонка;
			НомерУслуги = 0;
			
			// Добавление новых колонок с услугой и запись в них нужных услуг.
			Для Каждого Строка ИЗ ТаблицаВсехУслуг Цикл
				ШапкаУслугаОплат.Параметры.Услуга = Строка.Услуга;
				ТабличныйДокумент.Присоединить(ШапкаУслугаОплат, 2);
				ПоследняяКолонка = ПоследняяКолонка + ШапкаУслугаОплат.ШиринаТаблицы;
				ТабличныйДокумент.Область("C" + (ПерваяКолонка + НомерУслуги)).Видимость = Истина;
				НомерУслуги = НомерУслуги + 1;
			КонецЦикла;
			
			ТабличныйДокумент.Область(НомерСтроки, ПерваяКолонка, НомерСтроки, ПоследняяКолонка).Объединить();
			
			ТабличныйДокумент.Присоединить(КолонкаИтогОплат, 1);
			ТабличныйДокумент.ЗакончитьАвтогруппировкуКолонок();
			
			// Оплата }}
			
			// задолженность
			СлужебныеПараметры = Новый Структура();
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ЛицевойСчет",   ДеревоРезультатаСЛицевымиСчетами.ЛицевойСчет);
			Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОстатков.Период КАК Период,
			|	ЕСТЬNULL(ТаблицаОстатков.СуммаНачисленияНачальныйОстаток, 0) КАК СуммаЗадолженности,
			|	ЕСТЬNULL(ТаблицаОстатков.СуммаНачисленияКонечныйОстаток, 0) КАК СуммаНаКонецМесяца
			|ПОМЕСТИТЬ СуммаНаНачалоИКонец
			|ИЗ
			|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
			|			НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ),
			|			КОНЕЦПЕРИОДА(&Период, МЕСЯЦ),
			|			Месяц,
			|			,
			|			Организация = &Организация
			|				И ЛицевойСчет = &ЛицевойСчет) КАК ТаблицаОстатков
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток КАК СуммаНачисленияНачальныйОстаток,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток КАК СуммаНачисленияКонечныйОстаток,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления КАК ВидНачисления,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период КАК Период,
			|	ВЫБОР
			|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
			|			ТОГДА ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияРасход, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ОплаченоПени,
			|	ВЫБОР
			|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
			|			ТОГДА ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НачисленоПени
			|ПОМЕСТИТЬ ПоВидамНачисления
			|ИЗ
			|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
			|			НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ),
			|			КОНЕЦПЕРИОДА(&Период, МЕСЯЦ),
			|			Месяц,
			|			,
			|			Организация = &Организация
			|				И ЛицевойСчет = &ЛицевойСчет) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СуммаНаНачалоИКонец.Период КАК Период,
			|	СуммаНаНачалоИКонец.СуммаЗадолженности КАК СуммаЗадолженностиНаНачало,
			|	СуммаНаНачалоИКонец.СуммаНаКонецМесяца КАК СуммаЗадолженностиНаКонец,
			|	СУММА(ВЫБОР
			|			КОГДА ПоВидамНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
			|					ИЛИ ПоВидамНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
			|				ТОГДА ЕСТЬNULL(ПоВидамНачисления.СуммаНачисленияНачальныйОстаток, 0)
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК НачальныйОстатокНачисление,
			|	СУММА(ВЫБОР
			|			КОГДА ПоВидамНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
			|					ИЛИ ПоВидамНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
			|				ТОГДА ЕСТЬNULL(ПоВидамНачисления.СуммаНачисленияКонечныйОстаток, 0)
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК КонечныйОстатокНачисление,
			|	СУММА(ВЫБОР
			|			КОГДА ПоВидамНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
			|				ТОГДА ЕСТЬNULL(ПоВидамНачисления.СуммаНачисленияНачальныйОстаток, 0)
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК НачальныйОстатокПени,
			|	СУММА(ВЫБОР
			|			КОГДА ПоВидамНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
			|				ТОГДА ЕСТЬNULL(ПоВидамНачисления.СуммаНачисленияКонечныйОстаток, 0)
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК КонечныйОстатокПени,
			|	СУММА(ЕСТЬNULL(ПоВидамНачисления.ОплаченоПени, 0)) КАК ОплаченоПени,
			|	СУММА(ЕСТЬNULL(ПоВидамНачисления.НачисленоПени, 0)) КАК НачисленоПени
			|ИЗ
			|	ПоВидамНачисления КАК ПоВидамНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СуммаНаНачалоИКонец КАК СуммаНаНачалоИКонец
			|		ПО (СуммаНаНачалоИКонец.Период = ПоВидамНачисления.Период)
			|
			|СГРУППИРОВАТЬ ПО
			|	СуммаНаНачалоИКонец.Период,
			|	СуммаНаНачалоИКонец.СуммаЗадолженности,
			|	СуммаНаНачалоИКонец.СуммаНаКонецМесяца
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			
			СлужебныеПараметры.Вставить("ЗапросРасчетаЗадолженности", Запрос);
			
			ИтогСуммаОплаты     = 0;
			ИтогСуммаОплатыПени = 0;
			ИтогНачисленоПени   = 0;
			ИтогСуммаКОплате    = 0;
			ИтогСуммаЛьготы     = 0;
			ИтогСуммаПерерасчет = 0;
			Если ДеревоРезультатаСЛицевымиСчетами.Строки.Количество() > 0 Тогда
				
				СтрокаИтога = ДеревоРезультатаСЛицевымиСчетами;
				ИтогСуммаОплаты     = СтрокаИтога.СуммаОплаты;
				ИтогСуммаОплатыПени = СтрокаИтога.СуммаОплатыПени;
				ИтогНачисленоПени   = СтрокаИтога.СуммаПени;
				ИтогСуммаКОплате    = СтрокаИтога.СуммаНачисления;
				ИтогСуммаЛьготы     = СтрокаИтога.СуммаЛьготы;
				ИтогСуммаПерерасчет = СтрокаИтога.СуммаПерерасчет;
				
				// Строки.
				СтрТаблицы   = 0;
				Счетчик      = 1;
				ОбщийИтог    = 0;
				СчетчикСтрок = 1;
				ТаблицаСтрокТаблицы.Очистить();
				ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
				ВывестиДанныеСтроки(СтрокаИтога,
									Счетчик,
									ИтогиПоУслугам,
									ИтогиЛьготПоУслугам,
									ИтогиОплатПоУслугам,
									СчетчикСтрок,
									ТаблицаСтрокТаблицы,
									ТаблицаВсехУслуг,
									мТаблицаПроживающих,
									СлужебныеПараметры);
				ТаблицаСтрокТаблицы.Сортировать("НомерСтроки");
				Для Каждого ТекСтрока Из ТаблицаСтрокТаблицы Цикл
					ТабличныйДокумент.Вывести(ТекСтрока.Строка, ТекСтрока.Уровень);
				КонецЦикла;
				ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
				
			КонецЕсли;
			
			// Подвал.
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал|ФиксированнаяЧасть");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал|ИтогоНачисления");
			ОбластьМакета.Параметры.СуммаКОплате = ИтогСуммаКОплате;
			ОбластьМакета.Параметры.СуммаЛьготы  = ИтогСуммаЛьготы;
			ОбластьМакета.Параметры.СуммаВсего   = ИтогСуммаКОплате - ИтогСуммаЛьготы;
			ТабличныйДокумент.Присоединить(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал|ИзменяемаяЧасть");
			Для Каждого СтрокаПоУслуге Из ТаблицаВсехУслуг Цикл
				ПоУслуге       = ИтогиПоУслугам.Получить(СтрокаПоУслуге.Услуга);
				ПоУслугеЛьготы = ИтогиЛьготПоУслугам.Получить(СтрокаПоУслуге.Услуга);
				ОбластьМакета.Параметры.ПоУслуге       = ПоУслуге;
				ОбластьМакета.Параметры.ПоУслугеЛьготы = ПоУслугеЛьготы;
				ОбластьМакета.Параметры.ПоУслугеВсего  = ПоУслуге - ПоУслугеЛьготы;
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			КонецЦикла;
			
			ТекЗадолженность = Запрос.Выполнить().Выгрузить();
			СтрТаблицы = ТекЗадолженность[0];
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал|КолонкаИтог");
			ОбластьМакета.Параметры.СуммаПерерасчет   = ИтогСуммаПерерасчет;
			ОбластьМакета.Параметры.ИтогоНачислено    = ИтогСуммаКОплате - ИтогСуммаЛьготы + ИтогСуммаПерерасчет;
			ОбластьМакета.Параметры.ИтогНачисленоПени = ИтогНачисленоПени;
			ТабличныйДокумент.Присоединить(ОбластьМакета);
			
			// {{ Оплата
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал|ИтогоОплаты");
			ОбластьМакета.Параметры.ИтогоОплачено = ИтогСуммаОплаты;
			ТабличныйДокумент.Присоединить(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал|ИзменяемаяЧастьОплат");
			НомерУслуги = 0;
			Для Каждого СтрокаПоУслуге Из ТаблицаВсехУслуг Цикл
				Оплата = ИтогиОплатПоУслугам.Получить(СтрокаПоУслуге.Услуга);
				ОбластьМакета.Параметры.ПоУслуге = Оплата;
				
				Если Оплата = 0 Тогда
					Область = ТабличныйДокумент.Область("C" + (тмПерваяКолонкаУслугОплат + НомерУслуги + 1));
					ТабличныйДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
				Иначе
					ТабличныйДокумент.Присоединить(ОбластьМакета);
					НомерУслуги = НомерУслуги + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			ПодвалИтогОплат = Макет.ПолучитьОбласть("Подвал|КолонкаИтогОплат");
			ПодвалИтогОплат.Параметры.ОплаченоПени = ИтогСуммаОплатыПени;
			
			// Заполнение конечного остатка начисления.
			Если ЗначениеЗаполнено(СтрТаблицы.КонечныйОстатокНачисление) Тогда
				СуммаЗадолженностиНаКонецБезПени = СтрТаблицы.КонечныйОстатокНачисление;
			ИначеЕсли СтрТаблицы.КонечныйОстатокНачисление = 0 И ЗначениеЗаполнено(СтрТаблицы.КонечныйОстатокПени) Тогда
				СуммаЗадолженностиНаКонецБезПени = СтрТаблицы.СуммаЗадолженностиНаКонец - СтрТаблицы.КонечныйОстатокПени;
			Иначе 
				СуммаЗадолженностиНаКонецБезПени = 0;
			КонецЕсли;
			
			// Заполнение конечного остатка пени.
			Если ЗначениеЗаполнено(СтрТаблицы.КонечныйОстатокПени) Тогда
				СуммаЗадолженностиНаКонец = СтрТаблицы.КонечныйОстатокПени;
			ИначеЕсли СтрТаблицы.КонечныйОстатокПени = 0 И ЗначениеЗаполнено(СтрТаблицы.КонечныйОстатокНачисление) Тогда
				СуммаЗадолженностиНаКонец = СтрТаблицы.СуммаЗадолженностиНаКонец - СтрТаблицы.КонечныйОстатокНачисление;
			Иначе
				СуммаЗадолженностиНаКонец = 0;
			КонецЕсли;
			
			ПодвалИтогОплат.Параметры.СуммаЗадолженностиНаКонецБезПени = СуммаЗадолженностиНаКонецБезПени;
			ПодвалИтогОплат.Параметры.СуммаЗадолженностиНаКонец        = СуммаЗадолженностиНаКонец;
			ТабличныйДокумент.Присоединить(ПодвалИтогОплат);
			
			// Оплата }}
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Первую колонку не печатаем.
	ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(1, 2,
	                                  ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа.
	ТабличныйДокумент.ИмяПараметровПечати = "ЛицевойСчетКВП";
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры // СформироватьОтчет()

// Возвращает текст запроса в зависимости от выбранного типа объектов.
Функция ПолучитьТекстЗапроса()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Период КАК Период,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.Организация КАК Организация,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПени,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЛьготы,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплатыПени,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
	|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПерерасчет
	|ПОМЕСТИТЬ втНачисленияИОплаты
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&ЛицевойСчет)) КАК УПЖКХ_НачисленияОбороты
	|{ГДЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.*,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец.* КАК Здание,
	|	УПЖКХ_НачисленияОбороты.Услуга.*}
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Период,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК Площадь
	|ПОМЕСТИТЬ втОбщиеПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&КонецПериода, ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияИОплаты.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисленияИОплаты.Период КАК Период,
	|	втНачисленияИОплаты.Услуга.ВидУслуги КАК Услуга,
	|	втНачисленияИОплаты.СуммаНачисления КАК СуммаНачисления,
	|	втНачисленияИОплаты.СуммаПени КАК СуммаПени,
	|	втНачисленияИОплаты.СуммаПерерасчет КАК СуммаПерерасчет,
	|	втНачисленияИОплаты.СуммаОплаты КАК СуммаОплаты,
	|	втНачисленияИОплаты.СуммаОплатыПени КАК СуммаОплатыПени,
	|	втНачисленияИОплаты.СуммаЛьготы КАК СуммаЛьготы,
	|	ЕСТЬNULL(втОбщиеПлощадиПомещений.Площадь, 0) КАК ОбщаяПлощадь,
	|	втНачисленияИОплаты.Организация КАК Организация
	|ИЗ
	|	втНачисленияИОплаты КАК втНачисленияИОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбщиеПлощадиПомещений КАК втОбщиеПлощадиПомещений
	|		ПО втНачисленияИОплаты.ЛицевойСчет.Адрес = втОбщиеПлощадиПомещений.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Период
	|ИТОГИ
	|	СУММА(СуммаНачисления),
	|	СУММА(СуммаПени),
	|	СУММА(СуммаПерерасчет),
	|	СУММА(СуммаОплаты),
	|	СУММА(СуммаОплатыПени),
	|	СУММА(СуммаЛьготы),
	|	СУММА(ОбщаяПлощадь)
	|ПО
	|	ЛицевойСчет,
	|	Период,
	|	Услуга";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА

#Область ВспомогательныеПроцедурыИФункции

// Получает список лицевых счетов в зависимости от выбранного в поле "ЛицевойСчет" значения.
Функция ПолучитьСписокЛицевыхСчетов(ПараметрыОтчета);
	
	СписокЛицевыхСчетов = Новый СписокЗначений;
	
	Если ПараметрыОтчета.ЛицевойСчет.ЭтоГруппа Тогда
		
		// Выбрана группа лицевых счетов.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка В ИЕРАРХИИ(&ГруппаЛицевыхСчетов)
		|	И КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ГруппаЛицевыхСчетов", ПараметрыОтчета.ЛицевойСчет);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СписокЛицевыхСчетов.Добавить(Выборка.ЛицевойСчет);
			
		КонецЦикла;
		
	Иначе
		// Выбран элемент.
		СписокЛицевыхСчетов.Добавить(ПараметрыОтчета.ЛицевойСчет);
	КонецЕсли;
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции // ПолучитьСписокЛицевыхСчетов()

// Выводит строку таблицы.
Процедура ВывестиДанныеСтроки(СтрокаДанных,
							  Счетчик,
							  ИтогиПоУслугам,
							  ИтогиЛьготПоУслугам,
							  ИтогиОплатПоУслугам,
							  СчетчикСтрок,
							  ТаблицаСтрокТаблицы,
							  ТаблицаВсехУслуг,
							  мТаблицаПроживающих,
							  СлужебныеПараметры = Неопределено)
	
	Если НЕ СлужебныеПараметры = Неопределено 
		И СлужебныеПараметры.Свойство("ЗапросРасчетаЗадолженности") Тогда
		Запрос = СлужебныеПараметры.ЗапросРасчетаЗадолженности;
	КонецЕсли;
	
	Макет = ПолучитьМакет("Ведомость");
	
	ТекУровень = СтрокаДанных.Уровень();
	Для Каждого СтрокаЛС Из СтрокаДанных.Строки Цикл
		
		ТекДокумент = Новый ТабличныйДокумент();
		
		Сдвиг = "";
		Для Сч = 1 По ТекУровень Цикл
			Сдвиг = Сдвиг + "  ";
		КонецЦикла;
		
		КолвоЧеловек = 0;
		Для Каждого СтрокаПрож Из мТаблицаПроживающих Цикл
			Если СтрокаПрож.Период <= КонецМесяца(СтрокаЛС.Период) Тогда
				КолвоЧеловек = СтрокаПрож.Колво;
			КонецЕсли;
		КонецЦикла;
		
		НомерТекСтроки = СчетчикСтрок;
		СтрокаФиксированная = Макет.ПолучитьОбласть("СтрокаТаблицы|ФиксированнаяЧасть");
		СтрокаФиксированная.Параметры.ППНомер      = НомерТекСтроки;
		СтрокаФиксированная.Параметры.Период       = СтрокаЛС.Период;
		СтрокаФиксированная.Параметры.КолвоЧеловек = КолвоЧеловек;
		
		Запрос.УстановитьПараметр("Период", СтрокаЛС.Период);
		ТекЗадолженность = Запрос.Выполнить().Выгрузить();
		
		СтрТаблицы = ТекЗадолженность[0];
		
		// Заполнение начального остатка начисления.
		Если ЗначениеЗаполнено(СтрТаблицы.НачальныйОстатокНачисление) Тогда
			СуммаЗадолженностиНаНачалоБезПени = СтрТаблицы.НачальныйОстатокНачисление;
		ИначеЕсли СтрТаблицы.НачальныйОстатокНачисление = 0 И ЗначениеЗаполнено(СтрТаблицы.НачальныйОстатокПени) Тогда
			СуммаЗадолженностиНаНачалоБезПени = СтрТаблицы.СуммаЗадолженностиНаНачало - СтрТаблицы.НачальныйОстатокПени;
		Иначе 
			СуммаЗадолженностиНаНачалоБезПени = 0;
		КонецЕсли;
		// Заполнение начального остатка пени.
		Если ЗначениеЗаполнено(СтрТаблицы.НачальныйОстатокПени) Тогда
			СуммаЗадолженностиНаНачало = СтрТаблицы.НачальныйОстатокПени;
		ИначеЕсли СтрТаблицы.НачальныйОстатокПени = 0 И ЗначениеЗаполнено(СтрТаблицы.НачальныйОстатокНачисление) Тогда
			СуммаЗадолженностиНаНачало = СтрТаблицы.СуммаЗадолженностиНаНачало - СтрТаблицы.НачальныйОстатокНачисление;
		Иначе 
			СуммаЗадолженностиНаНачало = 0;
		КонецЕсли;
		
		// Заполнение конечного остатка начисления.
		Если ЗначениеЗаполнено(СтрТаблицы.КонечныйОстатокНачисление) Тогда
			СуммаЗадолженностиНаКонецБезПени = СтрТаблицы.КонечныйОстатокНачисление;
		ИначеЕсли СтрТаблицы.КонечныйОстатокНачисление = 0 И ЗначениеЗаполнено(СтрТаблицы.КонечныйОстатокПени) Тогда
			СуммаЗадолженностиНаКонецБезПени = СтрТаблицы.СуммаЗадолженностиНаКонец - СтрТаблицы.КонечныйОстатокПени;
		Иначе 
			СуммаЗадолженностиНаКонецБезПени = 0;
		КонецЕсли;
		// Заполнение конечного остатка пени.
		Если ЗначениеЗаполнено(СтрТаблицы.КонечныйОстатокПени) Тогда
			СуммаЗадолженностиНаКонец = СтрТаблицы.КонечныйОстатокПени;
		ИначеЕсли СтрТаблицы.КонечныйОстатокПени = 0 И ЗначениеЗаполнено(СтрТаблицы.КонечныйОстатокНачисление) Тогда
			СуммаЗадолженностиНаКонец = СтрТаблицы.СуммаЗадолженностиНаКонец - СтрТаблицы.КонечныйОстатокНачисление;
		Иначе
			СуммаЗадолженностиНаКонец = 0;
		КонецЕсли;
		
		СтрокаФиксированная.Параметры.СуммаЗадолженностиНаНачалоБезПени = СуммаЗадолженностиНаНачалоБезПени;
		СтрокаФиксированная.Параметры.СуммаЗадолженностиНаНачало        = СуммаЗадолженностиНаНачало;
		
		//Получение и заполнение области "СтрокаТаблицы|КолонкаИтогОплат".
		ПоследняяОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаИтогОплат");
		ПоследняяОбластьМакета.Параметры.ОплаченоПени                     = СтрТаблицы.ОплаченоПени;
		ПоследняяОбластьМакета.Параметры.СуммаЗадолженностиНаКонецБезПени = СуммаЗадолженностиНаКонецБезПени;
		ПоследняяОбластьМакета.Параметры.СуммаЗадолженностиНаКонец        = СуммаЗадолженностиНаКонец;
		
		ВыводВозможен = Истина;
		
		Если ВыводВозможен Тогда
			ТекДокумент.Вывести(СтрокаФиксированная, ТекУровень);
			Счетчик      = Счетчик + 1;
			СчетчикСтрок = СчетчикСтрок + 1;
			КолонкаИтогСтр = Макет.ПолучитьОбласть("СтрокаТаблицы|ИтогоНачисления");
			КолонкаИтогСтр.Параметры.СуммаКОплате = СтрокаЛС.СуммаНачисления;
			КолонкаИтогСтр.Параметры.СуммаЛьготы  = СтрокаЛС.СуммаЛьготы;
			ТекДокумент.Присоединить(КолонкаИтогСтр);
		КонецЕсли;
		
		Для Каждого ТекущаяСтрокаУслуги Из ТаблицаВсехУслуг Цикл
			Начисление = 0;
			Льгота     = 0;
			
			СтрокаПоУслуге = СтрокаЛС.Строки.Найти(ТекущаяСтрокаУслуги.Услуга, "Услуга");
			Если НЕ СтрокаПоУслуге = Неопределено Тогда
				Начисление = ?(СтрокаПоУслуге.СуммаНачисления = Null, 0, СтрокаПоУслуге.СуммаНачисления);
				Льгота     = ?(СтрокаПоУслуге.СуммаЛьготы = Null, 0, СтрокаПоУслуге.СуммаЛьготы);
				ИтогиПоУслугам.Вставить(ТекущаяСтрокаУслуги.Услуга, ИтогиПоУслугам.Получить(ТекущаяСтрокаУслуги.Услуга) + Начисление);
				ИтогиЛьготПоУслугам.Вставить(ТекущаяСтрокаУслуги.Услуга, 
											 ИтогиЛьготПоУслугам.Получить(ТекущаяСтрокаУслуги.Услуга) + Льгота);
			КонецЕсли;
			
			Если ВыводВозможен Тогда
				СтрокаУслуга = Макет.ПолучитьОбласть("СтрокаТаблицы|ИзменяемаяЧасть");
				СтрокаУслуга.Параметры.ПоУслуге       = Начисление;
				СтрокаУслуга.Параметры.ПоУслугеЛьготы = Льгота;
				ТекДокумент.Присоединить(СтрокаУслуга);
			КонецЕсли;
		КонецЦикла;
		
		// Расчет значения колонки "Итого начислено (с учетом перерасчета)".
		ИтогоНачислено = СтрокаЛС.СуммаНачисления - СтрокаЛС.СуммаЛьготы + СтрокаЛС.СуммаПерерасчет;
		
		Если ВыводВозможен Тогда
			КолонкаИтогСтр = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаИтог");
			КолонкаИтогСтр.Параметры.СуммаПерерасчет = СтрокаЛС.СуммаПерерасчет;
			КолонкаИтогСтр.Параметры.ИтогоНачислено  = ИтогоНачислено;
			КолонкаИтогСтр.Параметры.НачисленоПени   = СтрТаблицы.НачисленоПени;
			ТекДокумент.Присоединить(КолонкаИтогСтр);
			КолонкаИтогСтр = Макет.ПолучитьОбласть("СтрокаТаблицы|ИтогоОплаты");
			КолонкаИтогСтр.Параметры.ИтогоОплачено   = СтрокаЛС.СуммаОплаты;
			ТекДокумент.Присоединить(КолонкаИтогСтр);
		КонецЕсли;
		
		// {{ Оплата
		Для Каждого ТекущаяСтрокаУслуги Из ТаблицаВсехУслуг Цикл
			Оплата = 0;
			СтрокаПоУслуге = СтрокаЛС.Строки.Найти(ТекущаяСтрокаУслуги.Услуга, "Услуга");
			Если НЕ СтрокаПоУслуге = Неопределено Тогда
				Оплата = ?(СтрокаПоУслуге.СуммаОплаты = Null, 0, СтрокаПоУслуге.СуммаОплаты);
				ИтогиОплатПоУслугам.Вставить(ТекущаяСтрокаУслуги.Услуга,
				ИтогиОплатПоУслугам.Получить(ТекущаяСтрокаУслуги.Услуга) + Оплата);
			КонецЕсли;
			
			Если ВыводВозможен Тогда
				СтрокаУслуга = Макет.ПолучитьОбласть("СтрокаТаблицы|ИзменяемаяЧастьОплат");
				СтрокаУслуга.Параметры.ПоУслуге = Оплата;
				ТекДокумент.Присоединить(СтрокаУслуга);
			КонецЕсли;
		КонецЦикла;
		
		//Должно быть заполнение трех колонок: "Оплачено пени", "Задолженность на конец периода (без учета пени)", "Задолженность по пени на конец периода".
		Если ВыводВозможен Тогда
			КолонкаИтогСтр = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаИтогОплат");
			КолонкаИтогСтр.Параметры.ОплаченоПени                     = СтрТаблицы.ОплаченоПени;
			КолонкаИтогСтр.Параметры.СуммаЗадолженностиНаКонецБезПени = СуммаЗадолженностиНаКонецБезПени;
			КолонкаИтогСтр.Параметры.СуммаЗадолженностиНаКонец        = СуммаЗадолженностиНаКонец;
			ТекДокумент.Присоединить(КолонкаИтогСтр);
		КонецЕсли;
		// Оплата }}
		
		Если ВыводВозможен Тогда
			НоваяСтрока             = ТаблицаСтрокТаблицы.Добавить();
			НоваяСтрока.Строка      = ТекДокумент;
			НоваяСтрока.Уровень     = ТекУровень;
			НоваяСтрока.НомерСтроки = НомерТекСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиДанныеСтроки()

// Вывод в таблицу общих данных по лицевому счёту
Процедура ОбработатьВыводВТаблицуПоЛицевомуСчету(ПараметрыОтчета, ОбластьЗаголовка, ТабличныйДокумент)
	
	// Заголовок.
	Квартира = ПараметрыОтчета.ЛицевойСчет.Адрес;
	ОбщПлощ   = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Квартира,
										Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь, 
										ПараметрыОтчета.ЛицевойСчет, 
										ПараметрыОтчета.КонецПериода);
	ЖилПлощ   = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Квартира, 
										Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь,
										ПараметрыОтчета.ЛицевойСчет, 
										ПараметрыОтчета.КонецПериода);
	АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Квартира.Владелец);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",      КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Помещение", Квартира);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСобственности = Неопределено;
	Если Выборка.Следующий() Тогда
		ТипСобственности = Выборка.ВидСобственности;
	КонецЕсли;
	
	Владелец = ПолучитьВладельцаОбъекта(ПараметрыОтчета.ЛицевойСчет, КонецДня(ПараметрыОтчета.КонецПериода), ПараметрыОтчета.Организация);
	
	ОбластьЗаголовка.Параметры.ФИО          = Владелец;
	ОбластьЗаголовка.Параметры.ЛицевойСчет  = ПараметрыОтчета.ЛицевойСчет.Наименование;
	ОбластьЗаголовка.Параметры.Адрес        = ПолучитьАдресПомещения(АдресДома, Квартира);
	ОбластьЗаголовка.Параметры.ОписаниеПлощади = "Общая площадь: " + ОбщПлощ + ", Жилая площадь: " + ЖилПлощ;
	Если Не ТипСобственности = Неопределено Тогда
		ОбластьЗаголовка.Параметры.Приватизация = "Квартира" 
												+ ?(ТипСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная, "", " не")
												+ " приватизирована";
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовка);
	
КонецПроцедуры // ОбработатьВыводВТаблицуПоЛицевомуСчету()

// Формирует соответствие с услугами в качестве ключей и нулями в качестве значений.
Функция ПолучитьСоответствиеПоУслугам(ТаблицаВсехУслуг)
	
	Соотв = Новый Соответствие();
	
	Для Каждого Строка ИЗ ТаблицаВсехУслуг Цикл
		Соотв.Вставить(Строка.Услуга, 0);
	КонецЦикла;
	
	Соотв.Вставить("ОбщаяПлощадь", 0);
	Соотв.Вставить("КолвоЧеловек", 0);
	
	Возврат Соотв;
	
КонецФункции // ПолучитьСоответствиеПоУслугам()

// Получаем таблицу всех используемых услуг.
Функция ПолучитьТаблицуУслуг(ДеревоРезультатаСЛицевымиСчетами)
	
	ТаблицаВсехУслуг = Новый ТаблицаЗначений();
	ТаблицаВсехУслуг.Колонки.Добавить("Услуга");
	
	ДобавитьУслугиИзДерева(ДеревоРезультатаСЛицевымиСчетами, ТаблицаВсехУслуг);
	
	ТаблицаВсехУслуг.Свернуть("Услуга");
	
	МаксИнд = ТаблицаВсехУслуг.Количество() - 1;
	Для ТекИнд = 0 По МаксИнд Цикл
		ТекСтрока = ТаблицаВсехУслуг.Получить(МаксИнд - ТекИнд);
		Если ТекСтрока.Услуга = Null Тогда
			ТаблицаВсехУслуг.Удалить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаВсехУслуг.Сортировать("Услуга");
	
	Возврат ТаблицаВсехУслуг;
	
КонецФункции // ПолучитьТаблицуУслуг()

// Добавляет из строк дерева услуги в таблицу всех услуг.
Процедура ДобавитьУслугиИзДерева(ДеревоРезультатаСЛицевымиСчетами, ТаблицаВсехУслуг)
	
	Для Каждого СтрокаЛС Из ДеревоРезультатаСЛицевымиСчетами.Строки Цикл
		НоваяСтрока = ТаблицаВсехУслуг.Добавить();
		НоваяСтрока.Услуга = СтрокаЛС.Услуга;
		ДобавитьУслугиИзДерева(СтрокаЛС, ТаблицаВсехУслуг);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьУслугиИзДерева()

#КонецОбласти

#КонецЕсли