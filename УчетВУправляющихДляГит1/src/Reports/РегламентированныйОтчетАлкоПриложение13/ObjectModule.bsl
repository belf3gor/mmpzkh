#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета

// Структура реквизитов формы отчета.
Перем СтруктураРеквизитовФормы;

// Массивы кодов из макета Списки.
Перем СписокКодовДеятельности, СписокКодовПродукции;
// Структура адреса из схемы xsd, если отличается от стандартной.
Перем ОписаниеСтруктурыАдресаИзОтчета;
// Признак режима отладки.
Перем РежимОтладки;
// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок;
Перем МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений;
// Дата начала и конца отчета.
Перем ДатаНачалаОтчета, ДатаКонцаОтчета;
// Границы дат по xsd.
Перем НижняяГраницаДатыПоXSD, ВерхняяГраницаДатыПоXSD;

// Данные обособленных подразделений разделов.
Перем ДанныеОП;
// Данные обособленных подразделений разделов при печати.
Перем ДанныеОП_Декларация;

// Справочники.
Перем СправочникиОтчета;
// Счетчик, который присваивается как ИД получателя.
Перем СчетчикИДПолучателей;

// Документ.РегламентированныйОтчет к которому привязан отчет.
Перем ДокументСсылкаАлкоОтчет;

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров;

// Объект метаданных отчета.
Перем ОбъектЭтогоОтчета;

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные, 
	  НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки, ИмяФормыОбъекта;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыДекларация;

// Вспомогательные таблицы значений, отражающие состав ресурсов регистров сведений
// по группам.
Перем ТабП0000100003;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений; 

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Вспомогательные переменные.
Перем ВсегоСтрокПоДекларации, НужноОбработатьСтрок, ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;

// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке.
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;
#КонецОбласти


#Область ПрограммныйИнтерфейс


#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов записи и 
// вычисляет значения реквизитов при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись, 
				ВышеБРО_1_1_11_0 = Неопределено, ЕстьСтранаРегистрации = Неопределено) Экспорт
	
	Если ВышеБРО_1_1_11_0 = Неопределено Тогда
	    ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы(
													"РегламентированнаяОтчетность", "1.1.11.0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Документ) И ВышеБРО_1_1_11_0 Тогда	
		Запись.Организация = Запись.Документ.Организация;	
	КонецЕсли; 
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил13Декларация" Тогда
		
		// Поставщик
		Запись.П000010000305 = СокрЛП(Запись.П000010000305);
		Наименование = Запись.П000010000305;
		
		Запись.П0000100003051 = СокрЛП(Запись.П0000100003051);
		НаименованиеОП = Запись.П0000100003051;
				
		Запись.П000010000306 = СтрЗаменить(Запись.П000010000306, " ", "");
		ИНН = Запись.П000010000306;
		
		Запись.П000010000307 = СтрЗаменить(Запись.П000010000307, " ", "");
		КПП = Запись.П000010000307;
		
		Если НЕ ЗначениеЗаполнено(Запись.Получатель) Тогда		
			Запись.Получатель = ОпределитьПолучателя(ИНН, КПП, Наименование);
			Запись.П000010000305 = Наименование;
			Запись.П000010000307 = КПП;
		КонецЕсли;
		
		НаименованиеВсеВместе = Наименование + " " + НаименованиеОП;
				
		ХешИдПолучателя = РегламентированнаяОтчетностьАЛКО.ПолучитьХешИдОрганизацииСтрокойПригоднойДляКлючаСтруктуры(
																					НаименованиеВсеВместе, ИНН, КПП);
		Запись.ХешИдПолучателя = ХешИдПолучателя;
		
		Если НЕ Запись.РезидентУстановленПользователем Тогда
			
			Если ЕстьСтранаРегистрации = Неопределено Тогда
			
				МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
				ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
			
			КонецЕсли;
			
			СтранаРегистрации = ?(ЗначениеЗаполнено(Запись.Получатель) И ЕстьСтранаРегистрации, 
									Запись.Получатель.СтранаРегистрации, "");
			РегламентированнаяОтчетностьАЛКО.ОпределитьПринадлежностьЕАЭСиРФ(ИНН, КПП, Наименование, СтранаРегистрации, 
												Запись.РезидентРФ, Запись.РезидентЕАЭС);	
		
		КонецЕсли; 
		
	КонецЕсли;
			
КонецПроцедуры

Функция ОпределитьПолучателя(ИНН, КПП, ПолноеНаименование) Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКО.ОпределитьКонтрагентаАЛКО(ИНН, КПП, ПолноеНаименование);
	
КонецФункции

#КонецОбласти


#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура Расчет(ИдГруппы, Запись) Экспорт
	// Расчета в приложении 13 нет.
	// Заглушка, оставлена для совместимости.
	Возврат;	
КонецПроцедуры
	
#КонецОбласти 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область Служебные

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка,
		ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета = Ложь, СтруктураОшибки,
		МаксимальноеКоличествоОшибок = Неопределено, ТекущееКоличествоОшибок = Неопределено)
		
	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(
		ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета, СтруктураОшибки, РежимОтладки,
		МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, ИндексСтраницы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
		 
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеИзСервисРегистровГруппы(
						СервисРегистровГруппы, ИндексСтраницы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоГруппеИзСервисРегистровГруппы(
						СервисРегистровГруппы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ИзвлечьСтруктуруXML()

	Возврат РегламентированнаяОтчетностьАЛКО.ИзвлечьСтруктуруXMLАЛКО(ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);

КонецФункции
#КонецОбласти 


#Область ОбработкаПриЗаполнении

Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0 = Неопределено) Экспорт
	
	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0);

КонецПроцедуры

#КонецОбласти



#Область ПроверитьВыгрузку 

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
	
	СтруктураПараметров.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураПараметров.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураПараметров.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
	Результат = РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный(
								ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
								СтатусПроверки, ПараметрыВыгрузки, СтруктураПараметров, РежимОтладки);
								
	СтруктураПараметров.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураПараметров.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураПараметров.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
	Возврат Результат;
		
КонецФункции

Процедура ПроверитьЗаполнениеДекларации(СтатусПроверки)
	
	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	ПоказательОП = "ОбособленноеПодразделение";
	
	// Раздел Декларация может не заполняться.
	// Необходимость проверки определяется переменной ЕстьАктивныеСтрокиВТаблице.
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
		
	ДанныеРаздела = ТаблицаСтраницыДекларация;
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	
	ДанныеОП_Декларация = ДанныеОП["Декларация"];
		
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
			
		П000000000002 = 0; П000000000004 = 0; П000000000003 = 0;
		ДанныеЛиста.Свойство("П000010000301", П000000000002); // площадь
		ДанныеЛиста.Свойство("П000010000303", П000000000004); // объем
		ДанныеЛиста.Свойство("П000010000302", П000000000003); // урожайность
		
		// Все значения должны быть больше или равно нуля.
		П000000000002 = ?(П000000000002 = Неопределено, 0, П000000000002);
		П000000000004 = ?(П000000000004 = Неопределено, 0, П000000000004);
		П000000000003 = ?(П000000000003 = Неопределено, 0, П000000000003);
		
		// Объем сбора не может быть меньше суммы отгруженного объема получателям.
		СуммаОтгруженногоОбъема = 0;
		ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("П000010000304", СуммаОтгруженногоОбъема);
		СуммаОтгруженногоОбъема = ?(СуммаОтгруженногоОбъема = Неопределено, 0, СуммаОтгруженногоОбъема);
					
						
		СтруктураСведенийПроверки = Новый Структура;
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", ЛистРаздела);

		// Раздел Декларация не обязателен к заполнению, 
		// но если есть заполненные строки при незаполненном ОП - нужно выдать ошибку.
		КолАктивныхСтрокНаСтранице = ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, НомерЛиста
			- 1, Истина);
			
		ЕстьАктивныеСтрокиВТаблице = (КолАктивныхСтрокНаСтранице > 0);
		ЗаполненыДанныеВиноградника = (П000000000002 + П000000000004 + П000000000003 > 0);
		ПроверятьНаПустоту = ЕстьАктивныеСтрокиВТаблице ИЛИ ЗаполненыДанныеВиноградника;

		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", ПроверятьНаПустоту);

		СтруктураСведенийПроверки.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
		
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
		СведенияОбОП = Неопределено;

		РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП(
					ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, 
					СтруктураСведенийПроверки, СведенияОбОП, РежимОтладки);

		СтруктураСведенийПроверки.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
		
		СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, Неопределено, Неопределено, РежимОтладки);

		ИндексСтраницыРегистраДекларация = СервисРегистров[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		
		ИдОП = "";
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура")
				И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда

			Если ЗначениеЗаполнено(СведенияОбОП.КПП)
					или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда

				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);

				Если ДанныеОП_Декларация.Получить(ИдОП) = Неопределено Тогда

				// Контроля на уникальность ОП в "виноградных" декларациях нет - на одном ОП
				// может быть несколько виноградников, которые заполняются на разных листах декларации.

					ДанныеОП_Декларация.Вставить(ИдОП, Новый Соответствие);
					
					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);

					ДанныеОП_Декларация[ИдОП].Вставить("ОП", КопияСведенияОбОП);
					
					ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", 0);
					ДанныеОП_Декларация[ИдОП].Вставить("СведОрг", Новый Соответствие);
					
				КонецЕсли;
				
				ДанныеОП_Декларация[ИдОП]["СведОрг"].Вставить("Х"+ НомерЛистаСтроковый, Новый Соответствие);									
				ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП]["СведОрг"]["Х"+ НомерЛистаСтроковый];
				
				ДанныеПоЛисту.Вставить("ИндексСтраницыРегистраДекларация", ИндексСтраницыРегистраДекларация);
									
				ДанныеПоЛисту.Вставить("П000000000002", П000000000002);
				ДанныеПоЛисту.Вставить("П000000000003", П000000000003);
				ДанныеПоЛисту.Вставить("П000000000004", П000000000004);
				
				ДанныеПоЛисту.Вставить("ДанныеДвижений", Новый Соответствие);
																
				// Объем сбора не может быть меньше суммы отгруженного объема получателям.
				Если П000000000004 < СуммаОтгруженногоОбъема Тогда
				
					ТекстОписанияОшибки = СтрокаГде 
						+  " суммарный объем отгруженного получателям винограда больше указанного объема сбора винограда!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", "П000010000303");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ОтгруженоБольшеУказанногоОбъема");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
										МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
                    				
				КонецЕсли;
								
				Если (П000000000004 > 0) и (П000000000002 = 0) Тогда
					
					ТекстОписанияОшибки = СтрокаГде + " не указана площадь виноградника!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", "П000010000301");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеУказанаПлощадь");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
										МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
                    				
				КонецЕсли;
					
				
				
			КонецЕсли;

		КонецЕсли;

		Если ЕстьАктивныеСтрокиВТаблице Тогда

		// Проверка заполнения таблиц декларации.
			ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппы, НомерЛиста, ИдОП);

		КонецЕсли;

		Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда

			НетОшибокПроверки = Ложь;
			ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;

		КонецЕсли;

		Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
			ОбработаноСтрок = НужноОбработатьСтрок;			
			Возврат;
		КонецЕсли;

	КонецЦикла;
					
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппы,
		НомерЛиста, ИдОП = "")
	
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;

	ИмяТаблицы = Неопределено;

	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);

	СтранаРоссия = Неопределено;
	Если ЕстьСтранаРегистрации Тогда
		СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;

	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));

	// Опеределим регистр сведений.
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);

	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);

	ДанныеДвиженийПоОП 	= Неопределено;
	ДанныеПоЛисту		= Неопределено;
	
	ДанныеПолучателей = СправочникиОтчета["Получатели"];
	
	Если ЕстьИдОП Тогда
		ДанныеОП_Декларация = ДанныеОП["Декларация"]; 
		ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП]["СведОрг"]["Х"+ НомерЛистаСтроковый];
		ДанныеДвиженийПоОП = ДанныеПоЛисту["ДанныеДвижений"];
		ДанныеПоЛисту.Вставить("ИДДокИндСтраницыДекларация", ИДДокИндСтраницы);
	КонецЕсли;
	
	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяНаименованияПолучателя  = ИдГруппы + "05";
	ИмяНаименованияОППолучателя  = ИдГруппы + "051";
	ИмяИННПолучателя = ИдГруппы + "06";
	ИмяКПППолучателя = ИдГруппы + "07";
	ИмяОтгружено	 = ИдГруппы + "04";
	
	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	
	КоличествоКолонокВРазделе = 7;
	НачальныйИндекс = 4;
	
	КоличествоПервых = 1000;
	
	ИмяРеквизитаКонтрагента = "Получатель";
	
	// Для получения в запросе сразу страны регистрации контрагента.
	СписокПолейКонтрагентов = Новый Массив;
	СписокПолейКонтрагентов.Добавить(ИмяРеквизитаКонтрагента);
	
	Пока Истина Цикл
	 
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", КоличествоПервых);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		СтруктураНастроек.Вставить("ЕстьСтранаРегистрации", ЕстьСтранаРегистрации);
		СтруктураНастроек.Вставить("СписокПолейКонтрагентов", СписокПолейКонтрагентов);

		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппы, ИндексСтраницы, СтруктураРеквизитовФормы, , ИДДокИндСтраницы, Ложь, СтруктураНастроек);

		Если РезЗапросаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли; 
		
		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл
			
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);

			СтрокаЗаполнена = РегламентированнаяОтчетностьАЛКО.СтрокаДекларацииЗаполнена(СтрокаДекларации, ИдГруппы, КоличествоКолонокВРазделе, НачальныйИндекс);

			СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

			Если НЕ СтрокаЗаполнена Тогда

				ТекстОписанияОшибки = СтрокаГде + " не заполнено ни одно поле!";

				ИмяПоказателя = ИмяНаименованияПолучателя + "_" + НомерСтрокиСтроковый;

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Продолжить;
				
			КонецЕсли;

			ОбработаноСтрок = ОбработаноСтрок + 1;
			КолСтрокДекларация = КолСтрокДекларация + 1;
			
			ТекСуммаОтгруженногоОбъема = Число(СтрокаДекларации[ИмяОтгружено]);
		
			ИмяПоказателя = ИмяОтгружено + "_" + НомерСтрокиСтроковый;
			Если ТекСуммаОтгруженногоОбъема <= 0 Тогда
			
				ТекстОписанияОшибки = СтрокаГде + " не указан, или указан отрицательный, объем отгруженного винограда!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУказанОбъемПродукции");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
			
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль Наименования-ИНН-КПП.
			ИмяПоказателяНаименования = ИмяНаименованияПолучателя + "_"
				+ НомерСтрокиСтроковый;
			Наименование = СокрЛП(СтрокаДекларации[ИмяНаименованияПолучателя]);
			// Наименование обособленного подразделения получателя.			
			НаименованиеОП = СокрЛП(СтрокаДекларации[ИмяНаименованияОППолучателя]);
			Если ЗначениеЗаполнено(НаименованиеОП) И ЗначениеЗаполнено(Наименование) Тогда			
				Наименование = Наименование + " /ОП " + НаименованиеОП;			
			КонецЕсли;

			ИмяПоказателяИНН = ИмяИННПолучателя + "_" + НомерСтрокиСтроковый;
			ИНН = СокрЛП(СтрокаДекларации[ИмяИННПолучателя]);

			ИмяПоказателяКПП = ИмяКПППолучателя + "_" + НомерСтрокиСтроковый;
			КПП = СокрЛП(СтрокаДекларации[ИмяКПППолучателя]);
			
			ТолькоЕАЭС = Ложь;
			ТолькоРФ = Ложь;
			
			РезидентЕАЭС = Неопределено;
			
			Если СтрокаДекларации.РезидентУстановленПользователем ИЛИ СтрокаДекларации.РезидентРФ Тогда
			// Если на автомате установлен в истину - то это точно российский.
				РоссийскийРезидент = СтрокаДекларации.РезидентРФ;
				
			Иначе
				
				СтранаРегистрации = ?(ЕстьСтранаРегистрации, 
									СтрокаДекларации["СтранаРегистрации" + ИмяРеквизитаКонтрагента], "");
									
				РоссийскийРезидент = Ложь;
				РезидентЕАЭС = Ложь;
									
				РегламентированнаяОтчетностьАЛКО.ОпределитьПринадлежностьЕАЭСиРФ(ИНН, КПП, Наименование, 
											СтранаРегистрации, РоссийскийРезидент, РезидентЕАЭС, РежимОтладки);
				
			КонецЕсли; 
			

			РодПадежЧейИННКПП = "получателя";
			// Допускается для иностранцев не заполнять. Но для конкретного случая - выставим.
			МожетБытьПустойИНН = НЕ (СтрокаДекларации.РезидентРФ 
									ИЛИ СтрокаДекларации.РезидентЕАЭС 
									ИЛИ ((НЕ РоссийскийРезидент = Неопределено) И РоссийскийРезидент)
									ИЛИ ((НЕ РезидентЕАЭС = Неопределено) И РезидентЕАЭС));
			МожетБытьПустойКПП = Истина;
			КонтрольОП = Ложь;
			РоссийскийТолькоЮЛ = Неопределено;
			РоссийскийТолькоФЛ = Неопределено;
			
			ТолькоЕАЭС = Ложь;
			ТолькоРФ = Ложь;
			МинДлинаИННпоXSD = 1;
			МаксДлинаИННпоXSD = 100;
			
			КПП56СимволыМогутБытьБуквами = Ложь;
			ИННLiteТип = Ложь;
			КППLiteТип = Истина;

			СтруктураСведенийИННКПП = Новый Структура;

			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);

			СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", ИмяТаблицы);

			СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("КонтрольОП", КонтрольОП);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", ИмяПоказателяНаименования);
			СтруктураСведенийИННКПП.Вставить("Наименование", Наименование);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", ИНН);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", КПП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", РодПадежЧейИННКПП);

			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", МожетБытьПустойИНН);
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", МожетБытьПустойКПП);

			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", РоссийскийТолькоЮЛ);
			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", РоссийскийТолькоФЛ);
			СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", КПП56СимволыМогутБытьБуквами);
			СтруктураСведенийИННКПП.Вставить("ИННLiteТип", ИННLiteТип);
			СтруктураСведенийИННКПП.Вставить("КППLiteТип", КППLiteТип);
			
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			КодСтраны = ?(ЗначениеЗаполнено(СтранаРегистрации), СтранаРегистрации.Код, "");
			СтруктураСведенийИННКПП.Вставить("КодСтраны", КодСтраны);
			СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			СтруктураСведенийИННКПП.Вставить("ТолькоРФ", ТолькоРФ); 
			СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", МаксДлинаИННпоXSD);
			СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", МинДлинаИННпоXSD);
			
			РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийРезидент, РежимОтладки);

			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			//
			////////////////////////////////////////////////////////////////////////////////							
								
			// Заполняем Таблицу Получателей раздела декларация.
			Если ЕстьИдОП Тогда
							    
				ИдПолучателя 			= "Х" + СтрокаДекларации.ХешИдПолучателя;
				 
				// Вначале заполняем справочник Производителей.
				Если ДанныеПолучателей.Получить(ИдПолучателя) = Неопределено Тогда
					
					СчетчикИДПолучателей = СчетчикИДПолучателей + 1;
					ДанныеПолучателей.Вставить(ИдПолучателя, Новый Соответствие);
					ДанныеПолучателей[ИдПолучателя].Вставить("ИдПолуч", 		СчетчикИДПолучателей);
					ДанныеПолучателей[ИдПолучателя].Вставить("П000000000006", 	Наименование);
					ДанныеПолучателей[ИдПолучателя].Вставить("Резидент", 		РоссийскийРезидент);
					ДанныеПолучателей[ИдПолучателя].Вставить("П000000000007", 	ИНН);
					ДанныеПолучателей[ИдПолучателя].Вставить("П000000000008", 	КПП);
					
				КонецЕсли;
				
				
				Если ДанныеДвиженийПоОП.Получить(ИдПолучателя) = Неопределено Тогда
					
					ДанныеДвиженийПоОП.Вставить(ИдПолучателя, Новый Соответствие);
					ДанныеДвиженийПоОП[ИдПолучателя].Вставить("НомерСтрокиДекларация", НомерСтроки);
					ДанныеДвиженийПоОП[ИдПолучателя].Вставить("ИдПолуч", ДанныеПолучателей[ИдПолучателя]["ИдПолуч"]);
					ДанныеДвиженийПоОП[ИдПолучателя].Вставить("П000000000005", СтрокаДекларации[ИмяОтгружено]);
					
				Иначе
					
					// Проверка на дублирование.
				    СтрокаПовтора = ДанныеДвиженийПоОП[ИдПолучателя]["НомерСтрокиДекларация"];
					СтрокаПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(СтрокаПовтора);
					
					АдресДубликата = ИмяНаименованияПолучателя + "_" + НомерСтрокиСтроковый;
					
					ТекстОписанияОшибки = СтрокаГде + " повторяются реквизиты получателя в строках " 
									+ СтрокаПовтораСтроковый + " и " + НомерСтрокиСтроковый + "!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", АдресДубликата);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторПолучателя");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
			 
				КонецЕсли;
								    
			КонецЕсли;
			
			Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда
				НетОшибокПроверки = Ложь;
				ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли;

			Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		// Информируем о ходе выполнения.
		Если (НужноОбработатьСтрок > 0) И (ОбработаноСтрок % ШагИнформирования = 0) Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;
							
	КонецЦикла; 
	
	// Суммируем строки по одному ОП.
	Если ЕстьИдОП Тогда
		ТекКолСтрокДекларация = ДанныеОП_Декларация[ИдОП].Получить("КолСтрокПоДекларации");
		ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", ТекКолСтрокДекларация + КолСтрокДекларация);
	КонецЕсли;
		
КонецПроцедуры

Функция ОтчетЗаполненКорректно()
	
	СтатусПроверки = Истина;

	ПроверитьЗаполнениеТитульный(СтатусПроверки);
	
	Если ТекущееКоличествоОшибок < МаксимальноеКоличествоОшибок Тогда

	// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

		ПроверитьЗаполнениеДекларации(СтатусПроверки);

	КонецЕсли;

	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;

	Возврат СтатусПроверки;
		
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, 
						ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);
	
КонецФункции 

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);
	
КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, 
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);
		
КонецФункции

Процедура ЗаполнитьСправочникиДекларации(УзелСправочники)
					
	ПрототипУзла_Получатели = ПолучитьПодчиненныйЭлемент(УзелСправочники, "Получатели");
	
	ДанныеПолучателей = СправочникиОтчета["Получатели"]; 
	
	Для Каждого ЭлементДанныеПолучателей Из ДанныеПолучателей Цикл
		
		СтрокаПолучателя = ЭлементДанныеПолучателей.Значение;
		
		Узел_Получатели = НовыйУзелИзПрототипа(ПрототипУзла_Получатели);
				
		УстановитьЗначениеЭлемента(Узел_Получатели, "ИдПолуч", СтрокаПолучателя["ИдПолуч"]);
		УстановитьЗначениеЭлемента(Узел_Получатели, "П000000000006", СтрокаПолучателя["П000000000006"]);
		
		Резидент = СтрокаПолучателя["Резидент"];
		
		Узел_Резидент = ПолучитьПодчиненныйЭлемент(Узел_Получатели, "Резидент");
		Узел_Иностр = ПолучитьПодчиненныйЭлемент(Узел_Получатели, "Иностр");
		
		Если Резидент Тогда
		
			УказанКПП = НЕ ПустаяСтрока(СтрокаПолучателя["П000000000008"]);
			
			Узел_ЮЛ = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "ЮЛ");
			Узел_ФЛ = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "ФЛ");
			
			Если УказанКПП Тогда
				
				УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000007", СтрокаПолучателя["П000000000007"]);
				УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000008", СтрокаПолучателя["П000000000008"]);
				
				РегламентированнаяОтчетность.УдалитьУзел(Узел_ФЛ);
			Иначе
				
				УстановитьЗначениеЭлемента(Узел_ФЛ, "П000000000007", СтрокаПолучателя["П000000000007"]);
				
				РегламентированнаяОтчетность.УдалитьУзел(Узел_ЮЛ);
			КонецЕсли;	
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Иностр);
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаПолучателя["П000000000007"]) Тогда
				УстановитьЗначениеЭлемента(Узел_Иностр, "Номер", СтрокаПолучателя["П000000000007"]);			
			КонецЕсли; 
						
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Резидент);
			
		КонецЕсли; 
				
	КонецЦикла;
	
	ДанныеПолучателей.Очистить();
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Получатели);
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел, ПараметрыВыгрузки)
		
	Узел_Документ = УзелРодитель;
	
	ДанныеОП_Декларация = ДанныеОП["Декларация"];
	
	Узел_Справочники = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Справочники");
	ЗаполнитьСправочникиДекларации(Узел_Справочники);
	
	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
	
	Узел_ОтветЛицо   = ПолучитьПодчиненныйЭлемент(Узел_Организация, "ОтветЛицо");
	Узел_ОтветЛицоГражданин	 = ПолучитьПодчиненныйЭлемент(Узел_ОтветЛицо, "Гражданин");
	Узел_ОтветЛицоОрганизация = ПолучитьПодчиненныйЭлемент(Узел_ОтветЛицо, "Организация");
	
	Если ПараметрыВыгрузки.Свойство("ГражданинФамилия") Тогда
	    // Это подсобное личное хозяйство.
		РегламентированнаяОтчетность.УдалитьУзел(Узел_ОтветЛицоОрганизация);
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(Узел_ОтветЛицоГражданин);	
	КонецЕсли; 
			
	ПрототипУзла_Сведения = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Сведения");
		
	Для Каждого ЭлементОП Из ДанныеОП_Декларация Цикл
		
		Узел_Сведения = НовыйУзелИзПрототипа(ПрототипУзла_Сведения);
		
		ИдОП		= ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;
		
		СведенияОбОП = СтруктураОП["ОП"];
				
		// заполняем сведения по ОП
		НазваниеОрганизации = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;
		
		УстановитьЗначениеЭлемента(Узел_Сведения, "Наим", НазваниеОрганизации);
		УстановитьЗначениеЭлемента(Узел_Сведения, "КППЮЛ", КПП);
		
		ДанныеСведений = СтруктураОП["СведОрг"];
		
		НаличиеСведений = Ложь;
		Для каждого Виноградник Из ДанныеСведений Цикл
			
			СведенияПоВинограднику = Виноградник.Значение;
			ДанныеДвижений = СведенияПоВинограднику["ДанныеДвижений"];
			
			ЕстьСведенияПоВинограднику = ( (СведенияПоВинограднику["П000000000002"] 
										+ СведенияПоВинограднику["П000000000003"] 
										+ СведенияПоВинограднику["П000000000004"] 
										+ ДанныеДвижений.Количество()) > 0 );
										
		    Если ЕстьСведенияПоВинограднику Тогда
			    НаличиеСведений = Истина;							
			КонецЕсли;
			
			СведенияПоВинограднику.Вставить("НаличиеСведений", ЕстьСведенияПоВинограднику);
			
		КонецЦикла;
		
		УстановитьЗначениеЭлемента(Узел_Сведения, "НаличиеСведений", ?(НаличиеСведений, "true", "false"));
		
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_Сведения, "АдрОрг");
		
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  СведенияОбОП.КодСтраны);
				
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      СведенияОбОП.Квартира);
		
		ПрототипУзла_СведОрг = ПолучитьПодчиненныйЭлемент(Узел_Сведения, "СведОрг");
		
		Если НаличиеСведений Тогда
		
			ПN = 0;
			
			Для каждого Виноградник Из ДанныеСведений Цикл
				
				СведенияПоВинограднику = Виноградник.Значение;
				
				Если НЕ СведенияПоВинограднику["НаличиеСведений"] Тогда
				    Продолжить;					
				КонецЕсли;
				
				ДанныеДвижений = СведенияПоВинограднику["ДанныеДвижений"];
				
				ПN = ПN + 1;
				
				Узел_СведОрг = НовыйУзелИзПрототипа(ПрототипУзла_СведОрг);
				
				УстановитьЗначениеЭлемента(Узел_СведОрг, "ПN",      		ПN);
				УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000002", 	СведенияПоВинограднику["П000000000002"]);
				УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000003", 	СведенияПоВинограднику["П000000000003"]);
				УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000004", 	СведенияПоВинограднику["П000000000004"]);
				
				Узел_Отгружено = ПолучитьПодчиненныйЭлемент(Узел_СведОрг, "Отгружено");
				ПрототипУзла_Позиции = ПолучитьПодчиненныйЭлемент(Узел_Отгружено, "Позиции");
				
				Для каждого Движение Из ДанныеДвижений Цикл
					
					Узел_Позиции = НовыйУзелИзПрототипа(ПрототипУзла_Позиции);
					СведенияДвижения = Движение.Значение;
					
				    УстановитьЗначениеЭлемента(Узел_Позиции, "П000000000005", СведенияДвижения["П000000000005"]);
					УстановитьЗначениеЭлемента(Узел_Позиции, "ИдПолуч", СведенияДвижения["ИдПолуч"]);
									
					ОбработаноСтрок = ОбработаноСтрок + 1;
				
				КонецЦикла; 
				
				РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Позиции);
				
			КонецЦикла;
					
		КонецЕсли;
		
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведОрг);
		
	КонецЦикла;
	
	// Для пустой декларации надо выгрузить хотя бы один узел ОбъемОборота.
	// В качестве ОП - сама организация.
	Если ДанныеОП_Декларация.Количество() = 0 Тогда
		
		Узел_Сведения = НовыйУзелИзПрототипа(ПрототипУзла_Сведения);
		
		// заполняем сведения по ОП
		НазваниеОрганизации = ПараметрыВыгрузки.НаимЮЛ;
		КПП = "";
		ПараметрыВыгрузки.Свойство("КППЮЛ", КПП);
				
		УстановитьЗначениеЭлемента(Узел_Сведения, "Наим", НазваниеОрганизации);
		Если ЗначениеЗаполнено(КПП) Тогда
			УстановитьЗначениеЭлемента(Узел_Сведения, "КППЮЛ", КПП);
		КонецЕсли;
				
		УстановитьЗначениеЭлемента(Узел_Сведения, "НаличиеСведений", "false");
		
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_Сведения, "АдрОрг");
		
		АдресОрганизации = ПараметрыВыгрузки.АдресОрганизации;
		
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  АдресОрганизации.КодСтраны);
				
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     АдресОрганизации.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  АдресОрганизации.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      АдресОрганизации.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      АдресОрганизации.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", АдресОрганизации.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      АдресОрганизации.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        АдресОрганизации.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     АдресОрганизации.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     АдресОрганизации.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      АдресОрганизации.Квартира);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Сведения);
			
	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;
	
	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда
		
	    // выгружено не то количество, что есть по данным заполнения отчета
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено по разделу Декларация!
							|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
							|Вашей информационной базы в виде файла .dt";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
									МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
								
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел,
		НомерСтроки = Неопределено)

	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если ПараметрыВыгрузки.Свойство("ИмяКлючевогоУзлаСодержательнойЧасти")
					И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда

				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда

					НайденКлюч = Истина;
					КлючВыгрузки = Строка(Стр.Ключ);
					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
					СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

					Пока ПозицияТочки > 0 Цикл

						ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
						КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

						Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
							СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
						Иначе
							НайденКлюч = Ложь;
							Прервать;
						КонецЕсли;

						ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

					КонецЦикла;

					Если НайденКлюч Тогда
						
						ЗначениеПараметра = Неопределено;
                    	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
						
						Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
							ВывестиПоказательВXML(Стр, ЗначениеПараметра);
						Иначе	
							Стр.Значение = "";
						КонецЕсли; 
                    	
					Иначе
						Стр.Значение = "";
					КонецЕсли;

				Иначе
					Стр.Значение = "";
				КонецЕсли;

			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда

				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);

				НайденКлюч = Истина;
				КлючВыгрузки = Строка(Ключ);
				ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
				СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

				Пока ПозицияТочки > 0 Цикл

					ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
					КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

					Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
						СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
					Иначе
						НайденКлюч = Ложь;
						Прервать;
					КонецЕсли;

					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

				КонецЦикла;

				Если НайденКлюч Тогда
						
					ЗначениеПараметра = Неопределено;
                	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
					
					Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПараметра);
					Иначе	
						Стр.Значение = "";
					КонецЕсли; 
                	
				Иначе
					Стр.Значение = "";
				КонецЕсли;

			Иначе
				ВывестиПоказательВXML(Стр, Стр.ЗначениеПоУмолчанию);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанными()

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт
	
	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();

	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();

	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы = ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки = ПараметрыДокумента.ПараметрыВыгрузки;		
	
	// Таблица результата
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	
	ТаблицаСтраницыДекларация = ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	ТабП0000100003 = ПараметрыФормы.ТабП0000100003;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;
	
	ОбработаноСтрок = 0;
	ШагИнформирования = 200;
	НетОшибокПроверки = Истина;

	ДатаНачалаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаКонцаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	НижняяГраницаДатыПоXSD = Неопределено;
	ВерхняяГраницаДатыПоXSD = Неопределено;
	
	МаксимальноеКоличествоОшибок = 1000;
	ТекущееКоличествоОшибок = 0;
	МаксимальноеКоличествоПредупреждений = 1000; 
	ТекущееКоличествоПредупреждений = 0;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ВсегоСтрокПоДекларации = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	
	ДанныеОП = Новый Соответствие;
	ДанныеОП.Вставить("Декларация", Новый Соответствие);
	
	СправочникиОтчета = Новый Соответствие;
	СправочникиОтчета.Вставить("Получатели", Новый Соответствие);
				
	СчетчикИДПолучателей = 0;
		
	// один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%
	НужноОбработатьСтрок = 2*ВсегоСтрокПоДекларации;
	// при выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%
	// при проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	
	// ОписаниеСтруктурыАдресаИзОтчета	- Структура.
	//		Поля структуры соответствуют структуре, получаемой при вызове
	//		функции ПолучитьПустуюСтруктуруАдреса(). 
	//		Может не содержать поля УникальныйНомерФИАС, ДополнительныеКоды, АдресXML, КодСтраны
	//		Страна, КодРегиона, Регион, ТипДома, ТипКорпуса, ТипКвартиры, ПредставлениеАдреса.
	//		При наличии перечисленных полей - они будут удалены!
	//		
	//		Значениями всех полей структуры является структура вида:
	//			* ПредставлениеПоля - осмысленное название поля адреса.
	//			* МинДлина - минимальная длина строки поля адреса, к которому относится структура.
	//			* МаксДлина- максимальная длина строки поля адреса, к которому относится структура.
	//			* ТолькоЦифры - Булево. Признак что в поле адреса должны быть только цифры.
	//
	// Эта структура используется в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() для контроля типа и длины полей.
	// Если не указана - в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() используется структура по умолчанию,
	// на момент написания кода структура по умолчанию соответствует описанию адреса во всех схемах XSD ФСРАР.
	//
	// Если в будущем описание адреса для конкретных отчетов изменится - нужно заполнять структуру ОписаниеСтруктурыАдресаИзОтчета
	// для этого отчета. Если описание изменится для всех отчетов - нужно менять описание структуры в
	// РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес().
	ОписаниеСтруктурыАдресаИзОтчета = Неопределено;
	
	Если НЕ ОтчетЗаполненКорректно() Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ЗаполнитьДанными();
	
	Если ТекущееКоличествоОшибок > 0 Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
	// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

		КонецЕсли;

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), 
				?(ЭтоВыгрузка, 93, 100), 100, , РежимОтладки);

	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);

	Возврат Результат;
	
КонецФункции

Функция СписокРазделовОшибок() Экспорт
	
	СписокРазделов = Новый Массив;
	СписокРазделов.Добавить("Титульный");
	// Раздела "Лицензии" нет.
	СписокРазделов.Добавить("Декларация");
	
	Возврат СписокРазделов;

КонецФункции
#КонецОбласти


#Область Выгрузка

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;

	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);

	Если ТекущееКоличествоОшибок > 0 Тогда
	// Есть сообщения о ошибках.
		Возврат Результат;
	КонецЕсли;

	// Проверка прошла успешно.
	// Пишем XML в файл.
	ИмяФайлаXML = Неопределено;

	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();

	РегламентированнаяОтчетностьАЛКО.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);

	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

	КонецЕсли;

	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);

	Возврат Результат;
		
КонецФункции
#КонецОбласти 


#Область Печать

Функция ПечататьРаздел(СтрокаРаздела)
		
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента)  Экспорт
	
	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	
	ВидПечати					= ПараметрыДокумента.ВидПечати;
	
	ТаблицаСтраницыДекларация 	= ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	ТабП0000100003 				= ПараметрыФормы.ТабП0000100003;
	СтруктураСервисРегистров 	= ПараметрыФормы.СтруктураСервисРегистров;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	
	ДатаНачалаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаКонцаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	
	ВсегоСтрокПоДекларации = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	
	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = ВсегоСтрокПоДекларации*4;
	
	ОбработаноСтрок = 0;
	
	Если ВидПечати = "ПечатьФайлZIP" Тогда
		
	    ТипЭкспорта = СтруктураРеквизитовФормы.ТипЭкспорта;
		
		Если ТипЭкспорта = ТипФайлаТабличногоДокумента.PDF Тогда
		    ПроцентБезКонвертацииАрхивации = 14;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.XLSX Тогда
			ПроцентБезКонвертацииАрхивации = 55;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.MXL Тогда
			// Только сжать.
			ПроцентБезКонвертацииАрхивации = 95;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.HTML Тогда
			ПроцентБезКонвертацииАрхивации = 20;
		КонецЕсли; 
		
	Иначе
		ПроцентБезКонвертацииАрхивации = 100;
	КонецЕсли; 
		
	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц  = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки		 = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные	 = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи				 = ПараметрыФормы.ДатаПодписи;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта",    ИмяФормыОбъекта);

		
		Если ИмяСтраницыПанели = "Титульный" Тогда
			
			ВывестиНаПечатьТитульный(СтруктураПараметров);	
			
		ИначеЕсли ИмяСтраницыПанели = "Декларация" Тогда
			
			ВывестиНаПечатьДекларация(СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
		?(ВидПечати = "ПечатьФайлZIP" , "Конвертация в выбранный формат и архивация.", ""), 
		НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			5);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 			НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", 	ДокументСсылкаАлкоОтчет);
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьТитульный(	
		СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, ОбъектЭтогоОтчета);
		
КонецПроцедуры

Функция ЗаполнитьПоВсейОрганизацииДекларация(П000010000301, П000010000302, П000010000303)

	ТаблицаСтраниц = ТаблицаСтраницыДекларация;
		
	П000010000301 = 0; П000010000302 = 0; П000010000303 = 0;	
	Для Каждого Лист Из ТаблицаСтраниц Цикл
		
		ТекП000010000301 = Неопределено;
		ТекП000010000303 = Неопределено;
		
		Лист.Данные[0].Значение.Свойство("П000010000301", ТекП000010000301);
		Лист.Данные[0].Значение.Свойство("П000010000303", ТекП000010000303);
		
		// Площадь.
		ТекП000010000301 = ?(ТекП000010000301 = Неопределено, 0, ТекП000010000301);
		// Собранный объем.
		ТекП000010000303 = ?(ТекП000010000303 = Неопределено, 0, ТекП000010000303);
		
		П000010000301 = П000010000301 + ТекП000010000301;
		П000010000303 = П000010000303 + ТекП000010000303;
		
	КонецЦикла;
	
	// Расчет урожайности.
	Если П000010000301 > 0 Тогда	
		П000010000302 = П000010000303 / П000010000301;		
	Иначе
		П000010000302 = 0;
	КонецЕсли;
	
	// Надо отформатировать.
	П000010000301 = Формат(П000010000301, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");	
	П000010000302 = Формат(П000010000302, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");
	П000010000303 = Формат(П000010000303, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");
	
	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;
		
	ТекстЗапросаДекларация = "
	|ВЫБРАТЬ
	|АлкоПрил13Декларация.П000010000305 КАК П000010000305,
	|АлкоПрил13Декларация.П0000100003051 КАК П0000100003051,
	|АлкоПрил13Декларация.П000010000306 КАК П000010000306,
	|АлкоПрил13Декларация.П000010000307 КАК П000010000307,
	|
	|СУММА(АлкоПрил13Декларация.П000010000304) КАК П000010000304
	|
	|ИЗ
	|	
	|(ВЫБРАТЬ
	|РегистрСведенийАлкоПрил13Декларация.*
	|
	|ИЗ
	|РегистрСведений.СведенияРеглОтчетАлкоПрил13Декларация КАК РегистрСведенийАлкоПрил13Декларация
	|
	|ГДЕ (РегистрСведенийАлкоПрил13Декларация.ИДДокИндСтраницы В (&МассивИДДокИндСтраницы)) 
	|И (РегистрСведенийАлкоПрил13Декларация.Активно = Истина)) КАК АлкоПрил13Декларация
	|	
    |СГРУППИРОВАТЬ ПО 
	|АлкоПрил13Декларация.П000010000305, 
	|АлкоПрил13Декларация.П0000100003051, 
	|АлкоПрил13Декларация.П000010000306, 
	|АлкоПрил13Декларация.П000010000307
	|
	|УПОРЯДОЧИТЬ ПО
	|АлкоПрил13Декларация.П000010000305 ВОЗР, 
	|АлкоПрил13Декларация.П0000100003051 ВОЗР, 
	|АлкоПрил13Декларация.П000010000306 ВОЗР, 
	|АлкоПрил13Декларация.П000010000307 ВОЗР
	|";
	
	ЗапросДекларация = Новый Запрос;
	ЗапросДекларация.Текст = ТекстЗапросаДекларация;
	
	СервисРегистровДекларация = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил13Декларация"];
	МассивИндексовСтраниц = СервисРегистровДекларация.ВыгрузитьКолонку("ИндексСтраницыРегистра");
	
	МассивИДДокИндСтраницы = Новый Массив;
	
	Для каждого ИндексСтраницыРегистра Из МассивИндексовСтраниц Цикл
	
		ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокОтчета, ИндексСтраницыРегистра);
		МассивИДДокИндСтраницы.Добавить(ИДДокИндСтраницы);
	
	КонецЦикла;
	
	ЗапросДекларация.Параметры.Вставить("МассивИДДокИндСтраницы", МассивИДДокИндСтраницы);
	
	Результат = ЗапросДекларация.Выполнить().Выгрузить();
		
	Возврат Результат;
	
КонецФункции

Функция СтруктураСобратьДанныеПоОП()
	
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
	
	// Инициация структуры ОП.				
	ДанныеОП_Декларация = Новый Структура;
		
	ДанныеРаздела = ТаблицаСтраницыДекларация;
	
	ИНН 		= СтруктураДанныхТитульный.ИНН1;
	КПП 		= СтруктураДанныхТитульный.КПП1;
	ЭтоПБОЮЛ 	= СтруктураДанныхТитульный.ЭтоПБОЮЛ;
		
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		СведенияОбОП = Неопределено;
		ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП);
		
		ДанныеОП   =  РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(
					СведенияОбОП, ЭтоПБОЮЛ, ИНН);
		
		Если ДанныеОП = "Заполнить" Тогда
		    ДанныеОП = "";		
		КонецЕсли;
		
		П000010000301 = 0; П000010000303 = 0; П000010000302 = 0;
		ДанныеЛиста.Свойство("П000010000301", П000010000301); // площадь
		ДанныеЛиста.Свойство("П000010000303", П000010000303); // объем
		ДанныеЛиста.Свойство("П000010000302", П000010000302); // урожайность
		
		// Все значения должны быть больше или равно нуля.
		П000010000301 = ?(П000010000301 = Неопределено, 0, П000010000301);
		П000010000303 = ?(П000010000303 = Неопределено, 0, П000010000303);
		П000010000302 = ?(П000010000302 = Неопределено, 0, П000010000302);
			
		ИдОП = ИдентификаторОП(СведенияОбОП);
		
		// Собираем данные по одному и тому же ОП в одну структуру.
		Если НЕ ДанныеОП_Декларация.Свойство(ИдОП) Тогда
		
			ДанныеОП_Декларация.Вставить(ИдОП, Новый Структура);
			КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);
		    ДанныеОП_Декларация[ИдОП].Вставить("ОП", КопияСведенияОбОП);
			ДанныеОП_Декларация[ИдОП].Вставить("Представление", ДанныеОП);
			ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", 0);
			ДанныеОП_Декларация[ИдОП].Вставить("СведОрг", Новый Структура);
			
		КонецЕсли; 
				
		ДанныеОП_Декларация[ИдОП].СведОрг.Вставить("Х"+ НомерЛистаСтроковый, Новый Структура);
						
		ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП].СведОрг["Х"+ НомерЛистаСтроковый];
				
		ДанныеПоЛисту.Вставить("П000010000301", П000010000301);
		ДанныеПоЛисту.Вставить("П000010000302", П000010000302);
		ДанныеПоЛисту.Вставить("П000010000303", П000010000303);
		
		ДанныеПоЛисту.Вставить("ДанныеДвижений", Новый Структура);	
		
		// Заполняем структуру данных движений только при наличии объема сбора.		
		ЗаполнитьДвижения(ИдГруппы, НомерЛиста, ИдОП);
									
	КонецЦикла;
	
	Возврат ДанныеОП_Декларация;
	
КонецФункции

Процедура ЗаполнитьДвижения(ИдГруппы, НомерЛиста, ИдОП)

	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
	
	// Опеределим регистр сведений
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП 	= Неопределено;
	ДанныеПоЛисту		= Неопределено;
		
	ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП].СведОрг["Х"+ НомерЛистаСтроковый];
	ДанныеДвиженийПоОП = ДанныеПоЛисту.ДанныеДвижений;
	ДанныеПоЛисту.Вставить("ИДДокИндСтраницыДекларация", ИДДокИндСтраницы);
	НомерДвижения = 0;
		
	ТекстЗапросаДанныхСтрок = "
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РегистрСведенийАлкоПрил13Декларация.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистраСведений + " КАК РегистрСведенийАлкоПрил13Декларация
	|ГДЕ
	|	РегистрСведенийАлкоПрил13Декларация.ИДДокИндСтраницы = &ИДДокИндСтраницы
	|   И РегистрСведенийАлкоПрил13Декларация.Активно = Истина
	|	И РегистрСведенийАлкоПрил13Декларация.ИндексСтроки > &ТекущийИндексСтроки";
	
	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапросаДанныхСтрок;
	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяНаименованияПолучателя  		= ПрефиксИмени + "05";
	ИмяНаименованияОППолучателя  	= ПрефиксИмени + "051";
	ИмяИННПолучателя = ПрефиксИмени + "06";
	ИмяКПППолучателя = ПрефиксИмени + "07";
	ИмяОтгружено	 = ПрефиксИмени + "04";
	
	Пока Истина Цикл
	
		ЗапросДанныхСтрок.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
		ЗапросДанныхСтрок.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
						
		РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();
		
		Если РезЗапросаДанных.Пустой() Тогда		
			Прервать;			
		Иначе			
			СтрокаДекларации = РезЗапросаДанных.Выбрать();		
		КонецЕсли; 
				
		Пока СтрокаДекларации.Следующий() Цикл
					
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);
			
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "051"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"]);
			Если НЕ СтрокаЗаполнена Тогда						  
				Продолжить;
			КонецЕсли;
			
			НомерДвижения = НомерДвижения + 1;
			КолСтрокДекларация = КолСтрокДекларация + 1;
									
			// Наименование обособленного подразделения получателя.			
			НаименованиеПолучателя = СокрЛП(СтрокаДекларации[ИмяНаименованияПолучателя]);
			НаименованиеОППолучателя = СокрЛП(СтрокаДекларации[ИмяНаименованияОППолучателя]);
			Если ЗначениеЗаполнено(НаименованиеОППолучателя) Тогда			
				НаименованиеПолучателя = НаименованиеПолучателя + " /ОП " + НаименованиеОППолучателя;			
			КонецЕсли;
			
			ИННПолучателя = СокрЛП(СтрокаДекларации[ИмяИННПолучателя]);							
			КПППолучателя = СокрЛП(СтрокаДекларации[ИмяКПППолучателя]);
			Отгружено	  = Число(СтрокаДекларации[ИмяОтгружено]);
					
			ДанныеДвиженийПоОП.Вставить("Х"+НомерДвижения, Новый Структура);
			
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяНаименованияПолучателя, НаименованиеПолучателя);
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяИННПолучателя, 	ИННПолучателя);
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяКПППолучателя, 	КПППолучателя);
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяОтгружено, 		Отгружено);
			
		КонецЦикла;
					
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура ВывестиНаПечатьДекларация(СтруктураПараметровСтраницы)
		
	ИмяПечатнойФормыРаздела = РегламентированнаяОтчетностьАЛКО.ИмяДействующегоМакета(ИмяФормыОбъекта, 
								"ПечатнаяФормаОтчета", ДатаКонцаОтчета, "Декларация", ОбъектЭтогоОтчета);
	МакетПечати = РегламентированнаяОтчетностьАЛКО.ПолучитьМакетИзОбъектаАЛКО(ИмяПечатнойФормыРаздела, 
								ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
	ПечатнаяФорма.ОтображатьСетку     	= Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
	ПечатнаяФорма.Автомасштаб         	= Истина;
	ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.ПолеСверху			= 5;
	ПечатнаяФорма.ПолеСнизу				= 5;
	ПечатнаяФорма.ПолеСлева				= 20;
	ПечатнаяФорма.ПолеСправа			= 10;
		
	
	ВысотаСтраницыВСтроках 					= 66;
	ОсталосьСтрок = ВысотаСтраницыВСтроках;
	
	Высота_ЗаголовокЛистаВСтроках 			= 9;
	Высота_ПустаяСтрокаВСтроках 			= 1;
	Высота_ЗаголовокТаблицыВСтроках 		= 8;
	Высота_ЗаголовокПоОрганизацииВСтроках 	= 2;
	Высота_СтрокаОПВСтроках 				= 2;
	Высота_ПодвалВСтроках 					= 23;
	
	ПомещаетсяВСтрокуПереносимую1 			= 38;
	
	ИмяПоляПереносимойСтроки1				= "П000010000305";
	
	Область_ЗаголовокЛиста = МакетПечати.ПолучитьОбласть("ЗаголовокЛиста");
	ПечатнаяФорма.Вывести(Область_ЗаголовокЛиста);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокЛистаВСтроках;
	
	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
	ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;
		
	Область_ЗаголовокТаблицы = МакетПечати.ПолучитьОбласть("ЗаголовокТаблицы");
	ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
	
	Область_ЗаголовокПоОрганизации = МакетПечати.ПолучитьОбласть("ЗаголовокПоОрганизации");
	ПечатнаяФорма.Вывести(Область_ЗаголовокПоОрганизации);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокПоОрганизацииВСтроках;
	
	П000010000301 = 0; П000010000302 = 0; П000010000303 = 0;
	ДанныеПоОрганизации = ЗаполнитьПоВсейОрганизацииДекларация(П000010000301, П000010000302, П000010000303);
	
	ОбработаноСтрок = ОбработаноСтрок + ДанныеПоОрганизации.Количество();
	
	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
			"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
		
	КонецЕсли;
		
	НомерСтроки = 1;
	Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
				
		Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
		Для Каждого Колонка Из ДанныеПоОрганизации.Колонки Цикл
			ИмяКолонкиМакета = Колонка.Имя;
			
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Если ИмяКолонкиМакета = "П000010000305" Тогда
				    Если ЗначениеЗаполнено(СтрокаДанных["П0000100003051"]) Тогда
					    СтрокаДанных["П000010000305"] = СтрокаДанных["П000010000305"] + " ОП " + СтрокаДанных["П0000100003051"];					
					КонецЕсли; 					
				КонецЕсли; 
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонкиМакета];
			КонецЕсли;
		КонецЦикла;
		
		// В первой строке сводные данные по площади и объему с урожайностью.
		Если НомерСтроки = 1 Тогда
		    Область_Строка.Области.П000010000301.Значение = П000010000301;
			Область_Строка.Области.П000010000302.Значение = П000010000302;
		    Область_Строка.Области.П000010000303.Значение = П000010000303;
		КонецЕсли;
		
		Область_Строка.Области.П000010000300.Значение = НомерСтроки;
		
		ПечатнаяФорма.Вывести(Область_Строка);
		
		СтрокаПереносимая1 = Область_Строка.Области[ИмяПоляПереносимойСтроки1].Значение;
		КолСтрокВСтрокеПереносимой1 = Цел(СтрДлина(СтрокаПереносимая1)/ПомещаетсяВСтрокуПереносимую1)
									+ ?(СтрДлина(СтрокаПереносимая1)%ПомещаетсяВСтрокуПереносимую1 > 0, 1, 0);
		КолСтрокВСтрокеПереносимой1 = ?(КолСтрокВСтрокеПереносимой1 = 0, 1, КолСтрокВСтрокеПереносимой1);
				
		ОсталосьСтрок = ОсталосьСтрок - КолСтрокВСтрокеПереносимой1;
						
		Если ОсталосьСтрок < 3 Тогда
		    // переходим на новый лист
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
			
			ПечатнаяФорма = Новый ТабличныйДокумент();
			ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
			ПечатнаяФорма.ОтображатьСетку     	= Ложь;
			ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
			ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
			ПечатнаяФорма.Автомасштаб         	= Истина;
			ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Портрет;
			ПечатнаяФорма.ПолеСверху			= 5;
			ПечатнаяФорма.ПолеСнизу				= 5;
			ПечатнаяФорма.ПолеСлева				= 20;
			ПечатнаяФорма.ПолеСправа			= 10;
	
			ОсталосьСтрок = ВысотаСтраницыВСтроках;
			// выводим заголовок таблицы
			ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
			ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
					
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
		Если (НужноОбработатьСтрок > 0) и (ОбработаноСтрок % 1000 = 0) Тогда
		
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
			
		КонецЕсли;
				
	КонецЦикла;
	
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
			"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
		
	КонецЕсли;
		
	// Для пустой декларации надо вывести просто пустую форму.
	Если НомерСтроки = 1 Тогда
		
	    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
		Область_Строка.Области["П000010000300"].Значение = НомерСтроки;
		
		Область_Строка.Области.П000010000301.Значение = П000010000301;
		Область_Строка.Области.П000010000302.Значение = П000010000302;
		Область_Строка.Области.П000010000303.Значение = П000010000303;
		
		ПечатнаяФорма.Вывести(Область_Строка);
	    
		ОсталосьСтрок = ОсталосьСтрок - 1;
					
	КонецЕсли;
	
	////////////////////////////////
	// Печать по ОП.
	////////////////////////////////
	
	Высота_СтрокаОПВСтроках = 4;
	
	// Нужно собрать информацию по ОП с разных листов.
	ДанныеОП_Декларация = СтруктураСобратьДанныеПоОП();
	
	ВсегоЛистов = ДанныеОП_Декларация.Количество();
	ТекЛист = 0;
	Для Каждого Лист Из ДанныеОП_Декларация Цикл
		
		ТекЛист = ТекЛист + 1;
		
		Если ОсталосьСтрок < (Высота_ПустаяСтрокаВСтроках + Высота_СтрокаОПВСтроках + 5) Тогда
		    // переходим на новый лист, если места меньше чем на заголовок ОП и строку
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
			
			ПечатнаяФорма = Новый ТабличныйДокумент();
			ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
			ПечатнаяФорма.ОтображатьСетку     	= Ложь;
			ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
			ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
			ПечатнаяФорма.Автомасштаб         	= Истина;
			ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Портрет;
			ПечатнаяФорма.ПолеСверху			= 5;
			ПечатнаяФорма.ПолеСнизу				= 5;
			ПечатнаяФорма.ПолеСлева				= 20;
			ПечатнаяФорма.ПолеСправа			= 10;

			ОсталосьСтрок = ВысотаСтраницыВСтроках;
			// выводим заголовок таблицы
			ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
			ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
						
		КонецЕсли;
		
		Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
		ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
		ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;
		
		Область_СтрокаОП = МакетПечати.ПолучитьОбласть("СтрокаОП");
		СтрокаОбособленноеПодразделение = Лист.Значение.Представление;
				
		Область_СтрокаОП.Области.ОП.Значение = СтрокаОбособленноеПодразделение;
		ПечатнаяФорма.Вывести(Область_СтрокаОП);
		
		КолСтрокДанных = 0;
		Для каждого ПодЛист Из Лист.Значение.СведОрг Цикл
		
			ДанныеПоЛисту = ПодЛист.Значение;
			
			ДанныеДвижений = ДанныеПоЛисту.ДанныеДвижений;
			КолСтрокПоПодлисту = ДанныеДвижений.Количество();
			// Минимум одна строка - первая.
			КолСтрокДанных = КолСтрокДанных + ?(КолСтрокПоПодлисту > 0, КолСтрокПоПодлисту, 1);
					
		КонецЦикла;
				
		ОбработаноСтрок = ОбработаноСтрок + КолСтрокДанных;
	
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
			
		КонецЕсли;
						
		ОсталосьСтрок = ОсталосьСтрок - Высота_СтрокаОПВСтроках;
		
		ТекНомерСтрокиДанных = 1;
		
		Для каждого ПодЛист Из Лист.Значение.СведОрг Цикл
		
			ДанныеПоЛисту = ПодЛист.Значение;
			
			П000010000301 = ДанныеПоЛисту.П000010000301;
			П000010000302 = ДанныеПоЛисту.П000010000302;
			П000010000303 = ДанныеПоЛисту.П000010000303;
			
			ДанныеДвижений = ДанныеПоЛисту.ДанныеДвижений;
			
			ТекНомерПоПодлисту = 0;
			Для Каждого СтрокаДанных Из ДанныеДвижений Цикл
				
				ТекНомерПоПодлисту = ТекНомерПоПодлисту + 1;
				
				Если ОсталосьСтрок < 3 Тогда
				    // переходим на новый лист
					СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
				
					ПечатнаяФорма = Новый ТабличныйДокумент();
					ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
					ПечатнаяФорма.ОтображатьСетку     	= Ложь;
					ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
					ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
					ПечатнаяФорма.Автомасштаб         	= Истина;
					ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Портрет;
					ПечатнаяФорма.ПолеСверху			= 5;
					ПечатнаяФорма.ПолеСнизу				= 5;
					ПечатнаяФорма.ПолеСлева				= 20;
					ПечатнаяФорма.ПолеСправа			= 10;

					ОсталосьСтрок = ВысотаСтраницыВСтроках;
					// выводим заголовок таблицы
					ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
					ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
					
				КонецЕсли;
				
				Если ТекЛист = ВсегоЛистов Тогда
				    // последний лист
					ОсталосьВывести = КолСтрокДанных - ТекНомерСтрокиДанных;
					Если (ОсталосьСтрок < (3 + Высота_ПодвалВСтроках)) 
						и (ОсталосьВывести < 5)  и (ТекНомерСтрокиДанных <> 1) Тогда
						
						// переходим на новый лист, чтобы подвал напечатался нормально
						СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
				
						ПечатнаяФорма = Новый ТабличныйДокумент();
						ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
						ПечатнаяФорма.ОтображатьСетку     	= Ложь;
						ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
						ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
						ПечатнаяФорма.Автомасштаб         	= Истина;
						ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Портрет;
						ПечатнаяФорма.ПолеСверху			= 5;
						ПечатнаяФорма.ПолеСнизу				= 5;
						ПечатнаяФорма.ПолеСлева				= 20;
						ПечатнаяФорма.ПолеСправа			= 10;

						ОсталосьСтрок = ВысотаСтраницыВСтроках;
						// выводим заголовок таблицы
						ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
						ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
						
					КонецЕсли; 
								
				КонецЕсли;
										
				Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
				
				Для Каждого Элемент Из СтрокаДанных.Значение Цикл
					ИмяКолонкиМакета = Элемент.Ключ;
				
					Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда						 
						Область_Строка.Области[ИмяКолонкиМакета].Значение = Элемент.Значение;
					КонецЕсли;
				КонецЦикла;
				
				// В первой строке сводные данные по площади и объему с урожайностью.
				Если ТекНомерПоПодлисту = 1 Тогда
				    Область_Строка.Области.П000010000301.Значение = П000010000301;
					Область_Строка.Области.П000010000302.Значение = П000010000302;
				    Область_Строка.Области.П000010000303.Значение = П000010000303;
				КонецЕсли;
				
				Область_Строка.Области.П000010000300.Значение = ТекНомерСтрокиДанных;
				
				ПечатнаяФорма.Вывести(Область_Строка);
				
				СтрокаПереносимая1 = Область_Строка.Области[ИмяПоляПереносимойСтроки1].Значение;
				КолСтрокВСтрокеПереносимой1 = Цел(СтрДлина(СтрокаПереносимая1)/ПомещаетсяВСтрокуПереносимую1)
											+ ?(СтрДлина(СтрокаПереносимая1)%ПомещаетсяВСтрокуПереносимую1 > 0, 1, 0);
				КолСтрокВСтрокеПереносимой1 = ?(КолСтрокВСтрокеПереносимой1 = 0, 1, КолСтрокВСтрокеПереносимой1);
						
				ОсталосьСтрок = ОсталосьСтрок - КолСтрокВСтрокеПереносимой1;
				
				ТекНомерСтрокиДанных = ТекНомерСтрокиДанных + 1;
								
				ОбработаноСтрок = ОбработаноСтрок + 1;
			
				Если (НужноОбработатьСтрок > 0) и (ОбработаноСтрок % 1000 = 0) Тогда
				
					РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
						"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
					
				КонецЕсли;
			    				
			КонецЦикла;
			
			Если НужноОбработатьСтрок > 0 Тогда
				
				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
					"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
					
			КонецЕсли;
			
			Если ТекНомерПоПодлисту = 0 Тогда
				
				Сумма = П000010000301 + П000010000302 + П000010000303;
						
				// Если что то заполнено - выведем.
			    Если Сумма > 0 Тогда
				    					
				    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
					Область_Строка.Области["П000010000300"].Значение = ТекНомерСтрокиДанных;
					
				    Область_Строка.Области.П000010000301.Значение = П000010000301;
					Область_Строка.Области.П000010000302.Значение = П000010000302;
					Область_Строка.Области.П000010000303.Значение = П000010000303;
					
					ПечатнаяФорма.Вывести(Область_Строка);
					
					ОсталосьСтрок = ОсталосьСтрок - 1;
					
					ТекНомерСтрокиДанных = ТекНомерСтрокиДанных + 1;
				
		 		КонецЕсли; 
							
			КонецЕсли;
			
		КонецЦикла;
			
		Если ТекНомерСтрокиДанных = 1 Тогда
			
			// Нет строк.
			Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
			Область_Строка.Области["П000010000300"].Значение = ТекНомерСтрокиДанных;
				
			ПечатнаяФорма.Вывести(Область_Строка);
					
			ОсталосьСтрок = ОсталосьСтрок - 1;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Область_Подвал = МакетПечати.ПолучитьОбласть("Подвал");
	
	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		
		ОргФиоИП = СтруктураДанныхТитульный.ОргДиректор;
		Если СтруктураДанныхТитульный.ЭтоЛичноеХозяйство Тогда
		    Область_Подвал.Области.ГражданинФИО.Значение = ОргФиоИП;
		Иначе
			Область_Подвал.Области.ОргФиоИП.Значение = ОргФиоИП;	
		КонецЕсли; 
		
	Иначе
		
		Область_Подвал.Области.ОргДиректор.Значение = СтруктураДанныхТитульный.ОргДиректор;
		Область_Подвал.Области.ОргБухгалтер.Значение = СтруктураДанныхТитульный.ОргБухгалтер;
		
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(Область_Подвал);
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
	
КонецПроцедуры

#КонецОбласти 


#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

#Область ПрограммныйИнтерфейсВнешнийОтчет

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2016Кв2";
	НоваяФорма.ОписаниеОтчета     = "Приложение N 13 к Правилам представления деклараций об объеме производства, оборота и (или) использования этилового спирта, алкогольной и спиртосодержащей продукции, об использовании производственных мощностей, об объеме собранного винограда и использованного для производства винодельческой продукции винограда (Утверждено ПП РФ от 13.05.2016 г. № 411).";
	НоваяФорма.РедакцияФормы	  = "от 13.05.2016 г. № 411.";
	НоваяФорма.ДатаНачалоДействия = '20150101';
	НоваяФорма.ДатаКонецДействия  = '20151231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2016Кв4";
	НоваяФорма.ОписаниеОтчета     = "Приложение N 13 к Правилам представления деклараций об объеме производства, оборота и (или) использования этилового спирта, алкогольной и спиртосодержащей продукции, об использовании производственных мощностей, об объеме собранного винограда и использованного для производства винодельческой продукции винограда (Утверждено ПП РФ от 13.05.2016 г. № 411).";
	НоваяФорма.РедакцияФормы	  = "от 27.10.2016 г. № 472.";
	НоваяФорма.ДатаНачалоДействия = '20160101';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ФормыИФорматы = Новый ДеревоЗначений;
	ФормыИФорматы.Колонки.Добавить("Код");
	ФормыИФорматы.Колонки.Добавить("ДатаПриказа");
	ФормыИФорматы.Колонки.Добавить("НомерПриказа");
	ФормыИФорматы.Колонки.Добавить("ДатаНачалаДействия");
	ФормыИФорматы.Колонки.Добавить("ДатаОкончанияДействия");
	ФормыИФорматы.Колонки.Добавить("ИмяОбъекта");
	ФормыИФорматы.Колонки.Добавить("Описание");
		
	Форма20161305 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "1152031", '2016-05-13', "411", "ФормаОтчета2016Кв2");
	
	Форма20162710 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "1152031", '2016-10-27', "473", "ФормаОтчета2016Кв4");
	ОпределитьФорматВДеревеФормИФорматов(Форма20162710, "4.32", , , '2016-01-01');
		
	Возврат ФормыИФорматы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВнешнийОтчет

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

#КонецОбласти

 мВерсияОтчета = "БПКОРП 3.0.42.54.4";
 
#КонецОбласти 


#КонецОбласти

#КонецЕсли






 