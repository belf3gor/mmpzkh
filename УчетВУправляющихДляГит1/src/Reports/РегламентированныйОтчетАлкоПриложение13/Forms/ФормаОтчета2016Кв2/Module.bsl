
&НаСервере	  
Перем мОбъектОтчета;

// Переменные используются для передачи данных из ПроверитьПоказатели()
// чтобы не дублировать формирование информации при выгрузке.
&НаСервере
Перем ПараметрыВыгрузки, ДеревоВыгрузки;

&НаСервере
Перем ДанныеОПТЗ_Р1; // Данные обособленных подразделений Раздела 1.
&НаСервере
Перем ДанныеПроизводителейРаздел_Р1; // Данные производителей Раздела 1.


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
	    Возврат;
	КонецЕсли;

	ИмяОбъектаФормы = ИмяОбъектаФормы();
	 
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2016Кв2";
	                                     	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	
	СтруктураРеквизитовФормы.мИдГруппы11 = "П0000100001"; 
	СтруктураРеквизитовФормы.мИдГруппы12 = "П0000100003"; 
	 
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы11 = 1;
	КолИсхСтрокИдГруппы12 = 1;
		
	КолКолонокИдГруппы11 = 8;
	КолКолонокИдГруппы12 = 8;
		
	СтруктураДанныхТитульный = Новый Структура;
	                        	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, СтруктураРеквизитовФормы.мИдГруппы11);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, СтруктураРеквизитовФормы.мИдГруппы12);
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, КолИсхСтрокИдГруппы11);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, КолИсхСтрокИдГруппы12);
		
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, КолКолонокИдГруппы11);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, КолКолонокИдГруппы12);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11,    Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12,    Новый СписокЗначений);
	
	ИнициализацияМногостраничныхРазделов();
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураМногостраничныхРазделов.Вставить("Декларация",   "ТаблицаСтраницыДекларация");
	
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, "МногострочнаяЧасть2");
		
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "13/05/2016"; // Первый вариант
	
	СтруктураРеквизитовФормы.КНД = "";
	СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки = "";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ТабличныйДокумент.Вывести(ПолучитьМакетФормыОтчета(ИмяРаздела));
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВидДеят");
	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы11");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы12");
	
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мСтараяВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
		
	СтруктураРеквизитовФормы.Вставить("ЭтоПБОЮЛ");	
		
	СтруктураРеквизитовФормы.Вставить("мТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчетаДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КодНО");
	СтруктураРеквизитовФормы.Вставить("КППТек");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ФИОИсп");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("Руководитель");
	СтруктураРеквизитовФормы.Вставить("Бухгалтер");
	СтруктураРеквизитовФормы.Вставить("Исполнитель");
	СтруктураРеквизитовФормы.Вставить("ТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мСоответствияМнгЧ");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
																                                  
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыДекларация.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	Если СтрПерваяСтраница.Данные.Количество() > 0 Тогда
		СтрПерваяСтраница.Данные[0].Значение = Новый Структура;
	Иначе
		СтрПерваяСтраница.Данные.Добавить(Новый Структура);
	КонецЕсли;
	СтрПерваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
	СтрПерваяСтраница.Данные[0].Пометка = Ложь;
	
	СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
				
	Если СтрПерваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
		СтрПерваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
	Иначе
		СтрПерваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
	СтрПерваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
	СтрПерваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
	
	ИмяТекРаздела = "Декларация";
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ПолучитьМакетФормыОтчета(ИмяТекРаздела));
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, ИмяТекРаздела);
	
	Если СтрПерваяСтраница.ДанныеДопСтрок.Количество() > 0 Тогда
		СтрПерваяСтраница.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
	Иначе
		СтрПерваяСтраница.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	Если НЕ БезОткрытияФормы Тогда
	    ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
		СтруктураРеквизитовФормы.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
		// в противном случае уже сохранено и будет восстановлено из сохраненных данных	
	КонецЕсли;
	
	ИнициализироватьДополнительныеДанные();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСтараяВерсияФормы = СтруктураРеквизитовФормы.мВерсияФормы;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	СтруктураРеквизитовФормы.мВидДеят = "";
			
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // Документ скопирован.
			ВосстановитьСохраненныеДанные();
		Иначе // Это новый документ. Установим реквизиты формы по умолчанию.
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		
		ЗаполнитьДатуВЯчейкахНаСервере();
		
		Модифицированность = Истина;
		
	Иначе
		
		Если НЕ БезОткрытияФормы Тогда
			НачальныеОперацииСМногострочнымиБлоками();
		КонецЕсли;
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			// Из-за смены формата выгрузки изменились коды видов деятельности
			ДатаКопируемогоОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
			ДатаЭтогоОтчета = СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета;
			
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;

	ПоказатьПериод();
		
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗаполнитьСведенияОбОрганизации();
		
	КонецЕсли;
		
	ТабличныйДокумент.Области.НомКорр.Значение     = ?(НомерКорректировки = 0, "0", Формат(НомерКорректировки, "ЧЦ=2; ЧВН="));
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСРАР");
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	СтруктураРеквизитовФормы.мВерсияФормата = "431";
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДополнительныеДанные()
	
	Если ТипЗнч(ДополнительныеДанные) <> Тип("Структура") Тогда
		ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	Если НЕ ДополнительныеДанные.Свойство("Титульный")
	 ИЛИ ТипЗнч(ДополнительныеДанные.Титульный) <> Тип("Структура") Тогда
		ДополнительныеДанные.Вставить("Титульный", Новый Структура);
	КонецЕсли;
	
	АдресОрганизации = ПолучитьПустуюСтруктуруСведенийОбОП();
	АдресОрганизации.Вставить("Адрес");
	АдресОрганизации.Удалить("Наименование");
	АдресОрганизации.Удалить("КПП");
		
	Если ДополнительныеДанные.Титульный.Свойство("АдресОрганизации") Тогда
		ЗаполнитьЗначенияСвойств(АдресОрганизации, ДополнительныеДанные.Титульный.АдресОрганизации);
	Иначе
		ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресОрганизации.АдресXML) Тогда
	    // сохраенно в старом варианте отчета
		ЗаполнитьСведенияОбОрганизации(, Истина);
		//Возврат;
	КонецЕсли;
		
	// В данных сохраненных старой версией КодРегиона мог представляться одним символом
	// что приводит к ошибке выгрузки.
	Если НЕ ЗначениеЗаполнено(АдресОрганизации.КодРегиона) Тогда
	    АдресОрганизации.КодРегиона = "00";		
	КонецЕсли;
	Если СтрДлина(АдресОрганизации.КодРегиона) = 1 Тогда
	    АдресОрганизации.КодРегиона = "0" + АдресОрганизации.КодРегиона;
	КонецЕсли;
	
	ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);
	
		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСтруктуруДополнительныхДанных()
	
	ИнициализироватьДополнительныеДанные();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	                                                                
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	//Декларация.
	
	// Многострочная часть 1
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000102", "П000010000101;П000010000103");
	
	// Многострочная часть 2
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000302", "П000010000301;П000010000303");
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
		
	МакетСоставаПоказателей = ПолучитьМакетИзОбъекта(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента     = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу   = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме     = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности     = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя      = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения.
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
	ФормироватьСтруктуруСтраницОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь; // Не инициализировать элементы  управления корректировкой автозаполняемых значений
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы11;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПолейДекларация(Форма, ИмяРаздела)
	
	Если ИмяРаздела = "Декларация" Тогда
	 
		СтраницыРаздела = Неопределено;
		Форма.мСтруктураМногостраничныхРазделов.Свойство("Декларация", СтраницыРаздела);
		СтраницыРаздела = Форма[СтраницыРаздела];
		АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
	        ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
		Иначе
			Возврат;
		КонецЕсли;
		
		РазрешитьВвод = (ИндексСтраницы = 0);
			
		Если НЕ РазрешитьВвод Тогда
					
			НомерСтроки = 1;
			Постфикс = Формат(НомерСтроки, "ЧГ=0");
			Пока Форма.ТабличныйДокумент.Области.Найти("П000010000101_" + Постфикс) <> Неопределено Цикл
				
				УстановитьЦветФонаЯчейки(Форма, "П000010000101_" + Постфикс, 5, "Декларация");
				УстановитьЦветФонаЯчейки(Форма, "П000010000102_" + Постфикс, 5, "Декларация");
				УстановитьЦветФонаЯчейки(Форма, "П000010000103_" + Постфикс, 5, "Декларация");
				УстановитьЦветФонаЯчейки(Форма, "П000010000104_" + Постфикс, 5, "Декларация");
				УстановитьЦветФонаЯчейки(Форма, "П000010000105_" + Постфикс, 5, "Декларация");
				УстановитьЦветФонаЯчейки(Форма, "П000010000106_" + Постфикс, 5, "Декларация");
				УстановитьЦветФонаЯчейки(Форма, "П000010000107_" + Постфикс, 5, "Декларация");
							
				НомерСтроки = НомерСтроки + 1;
				Постфикс = Формат(НомерСтроки, "ЧГ=0");
				
			КонецЦикла;
						
		КонецЕсли;
	Иначе
		// Титульный
		
		Если НЕ Форма.ЭтоПБОЮЛ Тогда
			
		    Форма.ТабличныйДокумент.Области.АдресМестаДеятОрг.ЦветФона = Форма.ЦветЗаполняетсяОднозначноВручную;
			Форма.ТабличныйДокумент.Области.АдресМестаДеятОрг.Защита = Ложь;
			
			Форма.ТабличныйДокумент.Области.АдресМестаДеятИП.ЦветФона = Форма.ЦветЗаполняетсяАвтоматически;
			Форма.ТабличныйДокумент.Области.АдресМестаДеятИП.Защита = Истина;
			
			Форма.ТабличныйДокумент.Области.ЭтоЛичноеХозяйство.ЦветФона = Форма.ЦветЗаполняетсяАвтоматически;
			Форма.ТабличныйДокумент.Области.ЭтоЛичноеХозяйство.Защита = Истина;
			
		Иначе
			
			Форма.ТабличныйДокумент.Области.АдресМестаДеятОрг.ЦветФона = Форма.ЦветЗаполняетсяАвтоматически;
			Форма.ТабличныйДокумент.Области.АдресМестаДеятОрг.Защита = Истина;
			
			Форма.ТабличныйДокумент.Области.АдресМестаДеятИП.ЦветФона = Форма.ЦветЗаполняетсяОднозначноВручную;
			Форма.ТабличныйДокумент.Области.АдресМестаДеятИП.Защита = Ложь;
			
			Форма.ТабличныйДокумент.Области.ЭтоЛичноеХозяйство.ЦветФона = Форма.ЦветЗаполняетсяОднозначноВручную;
			Форма.ТабличныйДокумент.Области.ЭтоЛичноеХозяйство.Защита = Ложь;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПронумероватьТаблицыДекларация(Форма)
	
	Если Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПерваяСтраница = Форма[Форма.мСтруктураМногостраничныхРазделов.Декларация][0].АктивнаяСтраница;
	
	Если ЭтоПерваяСтраница Тогда
		ПроставитьНомераВТаблицеДекларация(Форма, "П0000100001");
	КонецЕсли;
	
	ПроставитьНомераВТаблицеДекларация(Форма, "П0000100003");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьНомераВТаблицеДекларация(Форма, ПрефиксИмениТаблицы)
	
	ИмяГрафыНомераПП = ПрефиксИмениТаблицы + "00";
	
	НомерСтроки = 1;
	Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
	Пока Форма.ТабличныйДокумент.Области.Найти(ИмяГрафыНомераПП + Постфикс) <> Неопределено Цикл
		Форма.ТабличныйДокумент.Области[ИмяГрафыНомераПП + Постфикс].Значение = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()

	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
    
	Если (СтруктураРеквизитовФормы.мДокументВосстановлен) И (СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;
    
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	ТабличныйДокумент.Области.ОтчетныйГод.Значение = НомерГода;
	    
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = "Декларация";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПустуюСтруктуруСведенийОбОП()

	СтруктураСведенияОбОП = Новый Структура;
	
    СтруктураСведенияОбОП.Вставить("Наименование", "");
		
	СтруктураСведенияОбОП.Вставить("КПП",          "");
	
	СтруктураСведенияОбОП.Вставить("КодСтраны",       "643");
	СтруктураСведенияОбОП.Вставить("Страна",       	  "РОССИЯ");
	СтруктураСведенияОбОП.Вставить("Индекс",          "");
	СтруктураСведенияОбОП.Вставить("КодРегиона",      "00");
	СтруктураСведенияОбОП.Вставить("Регион",		  "");
	СтруктураСведенияОбОП.Вставить("Район",           "");
	СтруктураСведенияОбОП.Вставить("Город",           "");
	СтруктураСведенияОбОП.Вставить("НаселенныйПункт", "");
	СтруктураСведенияОбОП.Вставить("Улица",           "");
	СтруктураСведенияОбОП.Вставить("Дом",             "");
	СтруктураСведенияОбОП.Вставить("Корпус",          "");
	СтруктураСведенияОбОП.Вставить("Литера",          "");
	СтруктураСведенияОбОП.Вставить("Квартира",        "");
		
	СтруктураСведенияОбОП.Вставить("ПредставлениеАдреса", "");
	СтруктураСведенияОбОП.Вставить("АдресXML", "");
	
	Возврат СтруктураСведенияОбОП;

КонецФункции

// Адрес - 	строка стандартного представления адреса УправлениеКонтактнойИнформацией
//			строка XDTO XML 
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруАдресаОтчетаИзСтандартногоПредставленияИлиXML(Адрес)

	АдресВФорматеОтчета = ПолучитьПустуюСтруктуруСведенийОбОП();
	АдресВФорматеОтчета.Удалить("Наименование");
	АдресВФорматеОтчета.Удалить("КПП");
	АдресВФорматеОтчета.Вставить("АдресXML", 			"");
	АдресВФорматеОтчета.Вставить("ПредставлениеАдреса", "");
	АдресВФорматеОтчета.Вставить("Адрес", "");
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес) Тогда
	    АдресXML = Адрес;
		Адрес =  УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресXML);
	Иначе
		// если адрес пуст - возвращаем пустую структуру
		Если ПустаяСтрока(СтрЗаменить(Адрес, ",","")) Тогда
		    Возврат АдресВФорматеОтчета;		
		КонецЕсли;
		
		Если СтрНайти(Адрес, "Страна=") > 0 Тогда
		    // старый формат хранения полей адреса
			АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Адрес,, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресXML, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Иначе
			Адрес = СтрЗаменить(Адрес, ".", "");		
	    	АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		КонецЕсли; 
				
	КонецЕсли; 	

	СтруктураАдресаСМассивами = РаботаСАдресами.СведенияОбАдресе(АдресXML);
		
	СтрокаДома = "";
	Если СтруктураАдресаСМассивами.Свойство("Здание") Тогда
	
		Если СтруктураАдресаСМассивами.Здание.Количество() > 0 Тогда
			СтрокаДома = СтрокаДома + СтруктураАдресаСМассивами.Здание.ТипЗдания 
									+ " " + СтруктураАдресаСМассивами.Здание.Номер;
		КонецЕсли;	
	
	КонецЕсли; 
	
	СтруктураАдресаСМассивами.Вставить("Дом", СтрокаДома);
		
	СтрокаКорпуса = "";
	СтрокаЛитера  = "";
	Если СтруктураАдресаСМассивами.Свойство("Корпуса") Тогда
		
		МассивКорпусов = СтруктураАдресаСМассивами.Корпуса;
		КолвоЭлементовКорпусов = 0;
		
		Для Каждого ЭлМассива Из МассивКорпусов Цикл
			
			Если СокрЛП(ЭлМассива.ТипКорпуса) <> "Литера"  Тогда
				
			    КолвоЭлементовКорпусов = КолвоЭлементовКорпусов + 1;
				ТекКорпус = ЭлМассива.ТипКорпуса + " " + ЭлМассива.Номер;				
				СтрокаКорпуса = СтрокаКорпуса + ?(СтрокаКорпуса = "", "", ", ") + ТекКорпус;	
				
			Иначе
				СтрокаЛитера  = "" + ЭлМассива.Номер;
			КонецЕсли;		 
		    	
		КонецЦикла;
		
		
		Если (КолвоЭлементовКорпусов = 1) и (СтрНайти(СтрокаКорпуса, "Корпус") > 0) Тогда
		    СтрокаКорпуса = СокрЛП(СтрЗаменить(СтрокаКорпуса, "Корпус", ""));		
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураАдресаСМассивами.Вставить("Корпус", СтрокаКорпуса);
	СтруктураАдресаСМассивами.Вставить("Литера", СтрокаЛитера);

	СтрокаКвартира = "";
	КолвоЭлементовПомещений = 0;
	
	Если СтруктураАдресаСМассивами.Свойство("Помещения") Тогда
		
		МассивПомещений = СтруктураАдресаСМассивами.Помещения;
		
		Для Каждого ЭлМассива Из МассивПомещений Цикл
			
			КолвоЭлементовПомещений = КолвоЭлементовПомещений + 1;
			ТекПомещение = ЭлМассива.ТипПомещения + " " + ЭлМассива.Номер;			
			СтрокаКвартира = СтрокаКвартира + ?(СтрокаКвартира = "", "", ", ") + ТекПомещение; 
		    	
		КонецЦикла;
		
		Если (КолвоЭлементовПомещений = 1) и (СтрНайти(СтрокаКвартира, "Квартира") > 0) Тогда
		    СтрокаКвартира = СокрЛП(СтрЗаменить(СтрокаКвартира, "Квартира", ""));		
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураАдресаСМассивами.Вставить("Квартира", СтрокаКвартира);
				
	ЗаполнитьЗначенияСвойств(АдресВФорматеОтчета, СтруктураАдресаСМассивами);
	
	АдресВФорматеОтчета.Вставить("АдресXML", 			АдресXML);
	АдресВФорматеОтчета.Вставить("ПредставлениеАдреса", Адрес);
	АдресВФорматеОтчета.Вставить("Адрес", Адрес);
	
	Если НЕ ЗначениеЗаполнено(АдресВФорматеОтчета.КодРегиона) Тогда
	    АдресВФорматеОтчета.КодРегиона = "00";		
	КонецЕсли;
	Если СтрДлина(АдресВФорматеОтчета.КодРегиона) = 1 Тогда
	    АдресВФорматеОтчета.КодРегиона = "0" + АдресВФорматеОтчета.КодРегиона;
	КонецЕсли;
	
	// Добавим сокращения
	Если НЕ АдресВФорматеОтчета.Район = Неопределено Тогда
		
		Если СтруктураАдресаСМассивами.Свойство("РайонСокращение") Тогда
		
			АдресВФорматеОтчета.Район = ?(СтруктураАдресаСМассивами.РайонСокращение = Неопределено,
											АдресВФорматеОтчета.Район,
											АдресВФорматеОтчета.Район + " " +СтруктураАдресаСМассивами.РайонСокращение);	
		
		КонецЕсли; 
			
	КонецЕсли; 
	
	Если НЕ АдресВФорматеОтчета.Город = Неопределено Тогда
		
		Если СтруктураАдресаСМассивами.Свойство("ГородСокращение") Тогда
			
			АдресВФорматеОтчета.Город = ?(СтруктураАдресаСМассивами.ГородСокращение = Неопределено,
										"г " + АдресВФорматеОтчета.Город,
										СтруктураАдресаСМассивами.ГородСокращение + " " +АдресВФорматеОтчета.Город);
		КонецЕсли;
									
	КонецЕсли;
									
	Если НЕ АдресВФорматеОтчета.НаселенныйПункт = Неопределено Тогда
		
		Если СтруктураАдресаСМассивами.Свойство("НаселенныйПунктСокращение") Тогда
			
			АдресВФорматеОтчета.НаселенныйПункт = ?(СтруктураАдресаСМассивами.НаселенныйПунктСокращение = Неопределено,
										АдресВФорматеОтчета.НаселенныйПункт,
										АдресВФорматеОтчета.НаселенныйПункт + " " + СтруктураАдресаСМассивами.НаселенныйПунктСокращение);
		КонецЕсли;								
		
	КонецЕсли;
	
	Если НЕ АдресВФорматеОтчета.Улица = Неопределено Тогда
		
		Если СтруктураАдресаСМассивами.Свойство("УлицаСокращение") Тогда
			
			АдресВФорматеОтчета.Улица = ?(СтруктураАдресаСМассивами.УлицаСокращение = Неопределено,
										АдресВФорматеОтчета.Улица + " ул",
										АдресВФорматеОтчета.Улица + " " + СтруктураАдресаСМассивами.УлицаСокращение);
		КонецЕсли;
										
	КонецЕсли;
	
	Возврат АдресВФорматеОтчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь, ТолькоАдрес = Ложь)

	РабочаяОрганизация = СтруктураРеквизитовФормы.Организация;
	Если (РабочаяОрганизация = Неопределено) Или (РабочаяОрганизация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ");
	Сведения.Добавить("", "НаимЮЛПол");
	Сведения.Добавить("", "НаимЮЛСокр"); 
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "АдресЭлектроннойПочтыОрганизации");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ПолныйАдрЮР");
	Сведения.Добавить("", "АдрЮР");
	Сведения.Добавить("", "АдрПрописки");

	Результат = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(РабочаяОрганизация, ДатаПодписи, Сведения);
	
	АдресОрганизации = Неопределено;
	
	// сначала пробуем юр. адрес, даже если ИП
	МассивОбъектов = Новый Массив;
	ОбъектОрганизации = РабочаяОрганизация;
	МассивОбъектов.Добавить(ОбъектОрганизации);
	
	ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов);
		
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;	
										  
	Если ТаблицаКонтактнойИнформации.Количество() > 1 Тогда
											  
		СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации.Найти(ВидКонтактнойИнформации);
		Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
			СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
		КонецЕсли;
		
	ИначеЕсли ТаблицаКонтактнойИнформации.Количество() = 1 Тогда
		СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
	Иначе
		СтрокаТаблицаКонтактнойИнформации = Неопределено;
	КонецЕсли;
	
	Если СтрокаТаблицаКонтактнойИнформации = Неопределено и ЭтоПБОЮЛ Тогда
	    // пробуем адрес прописки
		МассивОбъектов = Новый Массив;
		ОбъектОрганизации = РабочаяОрганизация.ИндивидуальныйПредприниматель;
		МассивОбъектов.Добавить(ОбъектОрганизации);
		
		ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов);
			
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;	
											  
		Если ТаблицаКонтактнойИнформации.Количество() > 1 Тогда
												  
			СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации.Найти(ВидКонтактнойИнформации);
			Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
				СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
			КонецЕсли;
			
		ИначеЕсли ТаблицаКонтактнойИнформации.Количество() = 1 Тогда
			СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
		Иначе
			СтрокаТаблицаКонтактнойИнформации = Неопределено;
		КонецЕсли;
		
	КонецЕсли;	
	
		
	Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда	
		Если Не ЗначениеЗаполнено(СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей) Тогда
		    СтрокаТаблицаКонтактнойИнформации = Неопределено;		
		КонецЕсли;
	КонецЕсли; 
	
	Если СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда		
		ПредставлениеАдреса = Результат.ПолныйАдрЮР;
	    АдресОрганизации = ПолучитьСтруктуруАдресаОтчетаИзСтандартногоПредставленияИлиXML(ПредставлениеАдреса);		
	Иначе		
		СтрокаXML = СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей;
		АдресОрганизации = ПолучитьСтруктуруАдресаОтчетаИзСтандартногоПредставленияИлиXML(СтрокаXML);		
	КонецЕсли; 
	
	// стандартное представление Адреса
	ЮридическийАдрес = Результат.ПолныйАдрЮР;
				
	Если Не АдресОрганизации = Неопределено Тогда				
		ЗаполнитьПоляАдресаОрганизации(АдресОрганизации);
		ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);		
	КонецЕсли;
	
	Модифицированность = Истина;
		
	// заполнение реквизитов титульного листа
	
	ИНН = СокрЛП(Результат.ИННЮЛ);
	КПП = ?(ЭтоПБОЮЛ, "", СокрЛП(Результат.КППЮЛ));
	
	СтруктураРеквизитовФормы.мИННЮЛ = ИНН;
	СтруктураДанныхТитульный.Вставить("ИНН1", ИНН);
	
	СтруктураРеквизитовФормы.мКППЮЛ = КПП;
	СтруктураДанныхТитульный.Вставить("КПП1", КПП);
	
	СтруктураРеквизитовФормы.ТелОрганизации = Результат.ТелОрганизации;
	СтруктураДанныхТитульный.Вставить("ТелОрганизации", Результат.ТелОрганизации);	
		
	СтруктураДанныхТитульный.Вставить("ЭлектроннаяПочта", Результат.АдресЭлектроннойПочтыОрганизации);
		
	Если Результат <> Неопределено Тогда
		
		СтруктураРеквизитовФормы.Руководитель   = Результат.ФИОРук;
		СтруктураРеквизитовФормы.Бухгалтер      = Результат.ФИОБух;
		
		Если НЕ ЭтоПБОЮЛ Тогда
		
			СтруктураДанныхТитульный.Вставить("ОргДиректор", Результат.ФИОРук);
			СтруктураДанныхТитульный.Вставить("ОргБухгалтер", Результат.ФИОБух);
			СтруктураДанныхТитульный.Вставить("ОргФиоИП", "");
			
		Иначе
			
			СтруктураДанныхТитульный.Вставить("ОргФиоИП", Результат.ФИОРук);
		    СтруктураДанныхТитульный.Вставить("ОргДиректор", "");
			СтруктураДанныхТитульный.Вставить("ОргБухгалтер", "");
			
		КонецЕсли; 
		
		
		СтруктураДанныхТитульный.Вставить("ОргНазв", СокрЛП(Результат.НаимЮЛПол));
		СтруктураДанныхТитульный.Вставить("ОргНазвСокращ", СокрЛП(Результат.НаимЮЛСокр));
				
	КонецЕсли;
	
	СтруктураДанныхТитульный.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	Если ТолькоАдрес Тогда
	    Возврат;	
	КонецЕсли;
	
	ЗаполнитьТитульный();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТитульный()
	
	Элементы.ГруппаПанельОтправки.Видимость = Истина;
	
	ОрганизацияОтчета 		= СтруктураРеквизитовФормы.Организация;
	
	НужноВыставитьПБОЮЛ = Ложь;
	Если НЕ СтруктураДанныхТитульный.Свойство("ЭтоПБОЮЛ") Тогда
	    НужноВыставитьПБОЮЛ = Истина;
	ИначеЕсли СтруктураДанныхТитульный.ЭтоПБОЮЛ = Неопределено Тогда
		НужноВыставитьПБОЮЛ = Истина;
	КонецЕсли;
	
	Если НужноВыставитьПБОЮЛ Тогда	    
		СтруктураДанныхТитульный.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);	
	КонецЕсли;	
	
	Для Каждого ЭлСтруктуры Из СтруктураДанныхТитульный Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
		
	ОрганизацияИНН = "";
	Если СтруктураДанныхТитульный.Свойство("ИНН1") Тогда
	    ОрганизацияИНН = СтруктураДанныхТитульный.ИНН1;	
	КонецЕсли;	
	ТабличныйДокумент.Области.ИНН1.Значение = ОрганизацияИНН; 
	
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	// Отображение на титульном листе отчетного периода.
	ТабличныйДокумент.Области.ОтчетныйГод.Значение = НомерГода;
	СтруктураДанныхТитульный.Вставить("ОтчетныйГод", НомерГода);
	
	Если НЕ СтруктураДанныхТитульный.Свойство("ЭтоЛичноеХозяйство") Тогда
	    СтруктураДанныхТитульный.Вставить("ЭтоЛичноеХозяйство", "");	
	КонецЕсли;
	
	Если ЭтоПБОЮЛ Тогда
		
	    ТабличныйДокумент.Области.АдресФактОрг.Значение = "";
		СтруктураДанныхТитульный.Вставить("АдресФактОрг", "");
		
		ТабличныйДокумент.Области.АдресМестаДеятОрг.Значение = "";
		СтруктураДанныхТитульный.Вставить("АдресМестаДеятОрг", "");
		
		ТабличныйДокумент.Области.АдресМестаЖительстваИП.Значение = ДополнительныеДанные.Титульный.АдресОрганизации.Адрес;
		СтруктураДанныхТитульный.Вставить("АдресМестаЖительстваИП", ТабличныйДокумент.Области.АдресМестаЖительстваИП.Значение);
		
		АдресМестаДеятельностиИП = "";
		СтруктураДанныхТитульный.Свойство("АдресМестаДеятИП", АдресМестаДеятельностиИП);
		ТабличныйДокумент.Области.АдресМестаДеятИП.Значение = АдресМестаДеятельностиИП;
		
		ЭтоЛичноеХозяйство = "";
		СтруктураДанныхТитульный.Свойство("ЭтоЛичноеХозяйство", ЭтоЛичноеХозяйство);
		ТабличныйДокумент.Области.ЭтоЛичноеХозяйство.Значение = ЭтоЛичноеХозяйство;
		
	Иначе
		
		ТабличныйДокумент.Области.АдресФактОрг.Значение = ДополнительныеДанные.Титульный.АдресОрганизации.Адрес;
		СтруктураДанныхТитульный.Вставить("АдресФактОрг", ТабличныйДокумент.Области.АдресФактОрг.Значение);
		
		АдресМестаДеятельностиОрг = "";
		СтруктураДанныхТитульный.Свойство("АдресМестаДеятОрг", АдресМестаДеятельностиОрг);
		ТабличныйДокумент.Области.АдресМестаДеятОрг.Значение = АдресМестаДеятельностиОрг;
				
		ТабличныйДокумент.Области.АдресМестаЖительстваИП.Значение = "";
		СтруктураДанныхТитульный.Вставить("АдресМестаЖительстваИП", "");
		
		ТабличныйДокумент.Области.АдресМестаДеятИП.Значение = "";
		СтруктураДанныхТитульный.Вставить("АдресМестаДеятИП", "");
		
		ТабличныйДокумент.Области.ЭтоЛичноеХозяйство.Значение = "";
		СтруктураДанныхТитульный.Вставить("ЭтоЛичноеХозяйство", "");
		
	КонецЕсли;
	
	// Руководители
	Если НЕ ЭтоПБОЮЛ Тогда
		
		ОрганизацияРуководитель = "";
		СтруктураДанныхТитульный.Свойство("ОргДиректор", ОрганизацияРуководитель);
		ТабличныйДокумент.Области.ОргДиректор.Значение = ОрганизацияРуководитель;
		
		ОрганизацияГлавБух = "";
		СтруктураДанныхТитульный.Свойство("ОргБухгалтер", ОрганизацияГлавБух);
		ТабличныйДокумент.Области.ОргБухгалтер.Значение = ОрганизацияГлавБух;
		
		СтруктураДанныхТитульный.Вставить("ОргФиоИП", "");
		ТабличныйДокумент.Области.ОргФиоИП.Значение = "";
		
	Иначе
		
		СтруктураДанныхТитульный.Вставить("ОргДиректор", "");
		ТабличныйДокумент.Области.ОргДиректор.Значение = "";
		
		СтруктураДанныхТитульный.Вставить("ОргБухгалтер", "");
		ТабличныйДокумент.Области.ОргБухгалтер.Значение = "";
		
		ОрганизацияРуководитель = "";
		СтруктураДанныхТитульный.Свойство("ОргФиоИП", ОрганизацияРуководитель);
		ТабличныйДокумент.Области.ОргФиоИП.Значение = ОрганизацияРуководитель;
		
	КонецЕсли;
	
	// ДатаПодписи
	ДатаПодписиСтруктураДанных = Неопределено;
	СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписиСтруктураДанных);	 
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписиСтруктураДанных;
	
	УстановитьДоступностьПолейДекларация(ЭтаФорма, "Титульный");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляАдресаОрганизации(Адрес)
	// Заглушка.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	РазделОтчета = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Элементы.Обновить.Доступность = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный";
	
	Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, РазделОтчета);
				
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Истина;
		
		Если РазделОтчета Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
			КонецЕсли;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Декларация" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость = Ложь;
	КонецЕсли;
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	ИмяТекущейОбласти = "R1C1";
	ЭтаФорма.Элементы["ТабличныйДокумент"].ТекущаяОбласть = ТекТабличноеПоле.Область(ИмяТекущейОбласти);
	ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы["ТабличныйДокумент"];
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, РазделОтчета = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, РазделОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Декларация" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина).
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ОпределитьПредставлениеДопСтраниц(НаимРаздела);

			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
							
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
						
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы)
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "Декларация" Тогда

		// Так как Таблица 1 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы11);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы12);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы11, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы1 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы11].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы1);
		Если ТаблицаДопСтрокГруппы1.Количество() = 0 Тогда
		    ТаблицаДопСтрокГруппы1.Добавить();		
		КонецЕсли; 
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы11, ТаблицаДопСтрокГруппы1);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы12, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы2 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы12].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы2);
		Если ТаблицаДопСтрокГруппы2.Количество() = 0 Тогда
		    ТаблицаДопСтрокГруппы2.Добавить();		
		КонецЕсли;
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы12, ТаблицаДопСтрокГруппы2);

		
	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, РазделОтчета = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ПолучитьМакетФормыОтчета(ИмяТекРаздела));
		
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Декларация" Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или РазделОтчета Тогда
			Для Каждого Область Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
					Область.Текст = "";
					Область.Гиперссылка = Ложь;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НомерСтраницыРазделаОтчета <> 1 Тогда
			
			ПерваяОбластьДобавитьСтроку = ТабличныйДокумент.Области["ДобавитьСтроку1"];			
			ПерваяОбластьДобавитьСтроку.Очистить(Истина, Ложь, Истина);
			
		КонецЕсли;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		СтрОбособленноеПодразделение = СформироватьОбособленноеПодразделение(СтрСледующаяСтраница.ДополнительныеДанные[0].Значение.СведенияОбОП, ЭтоПБОЮЛ, ОрганизацияИНН);
		СтрСледующаяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);
		ОбособленноеПодразделениеРаздела =  СтрОбособленноеПодразделение;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;

		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТабличныйДокумент.Области.ОбособленноеПодразделение.Значение = ОбособленноеПодразделениеРаздела;
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Обычные разделы.
	//
	Иначе
		
		ЗаполнитьТитульный();
				
	КонецЕсли;
	
	
	Если НЕ ИмяТекРаздела = "Титульный" Тогда
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	Иначе
		ПоказатьПериод();
	КонецЕсли;
		
	УстановитьДоступностьПолейДекларация(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	НомерСтрокиВТаблице = -1;
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НомерСтрокиВТаблице = 0 Тогда
	    // табличных данных нет, выставим номер строки у пустой единственной строки
		ТекТабличноеПоле.Области[ИмяГруппы + "00_1"].Значение = 1;	
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ВставитьОбластьВТабличныйДокументНаСервере(ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];

	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
		
		НомИсходнойСтроки = Формат(НомНовойСтроки - 1, "ЧГ=");
		НомНовойСтрокиСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		НомерГрафы = 1;
		
		КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// определяем имя первой ячейки последней из исходных строк
		ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + НомИсходнойСтроки;
		
		// область первой ячейки последней из исходных строк
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
		
		// номера строк исходной области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
		
		// номера строк вставляемой области
		НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
		НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		                            		
		// переопределяем имена вставленной области
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			// переопределяем имена вставленной области
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяОбластиЯчейки    = КолонкаТаблицыИмя + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = КолонкаТаблицыИмя + "_" + НомНовойСтрокиСтр;
				
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				
				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				
				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					
					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ИмяОбласти = СтруктураРеквизитовФормы.мСоответствияМнгЧ[ИмяГруппы];
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(ИмяОбласти);
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области[ИмяОбласти].Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ИмяОбласти].Верх, , ТекТабличноеПоле.Области[ИмяОбласти].Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = ИмяОбласти;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		НСтрСуфф = Формат(НСтр, "ЧГ=");
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСуфф;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда				
					ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);				
				КонецЕсли; 
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено, ИмяОбласти = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп, ИмяОбласти);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено, ИмяОбласти = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп, ИмяОбласти);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп, ИмяОбласти = Неопределено)
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		
		ИмяГруппы = ?(СтрЧислоВхождений(ИмяОбласти, "Т1") > 0
					ИЛИ СтрЧислоВхождений(ИмяОбласти, "П0000100001") > 0, ИдГрупп.мИдГруппы11, ИдГрупп.мИдГруппы12);
	
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Каждого ТекущаяОбласть Из Форма[ИмяТабличногоПоля].Области Цикл
		
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
						
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПолеИмя)

    ВыбТабличноеПоле = ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если ВыбТабличноеПолеИмя <> "Титульный"
		   И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Область.СодержитЗначение
		   И Область.Защита
		   И СтрНайти(Область.Имя, "НомСтр") = 0 
	       И Область.Имя <> "ОргДиректор" 
		   И Область.Имя <> "ОргБухгалтер" 
		   И Область.Имя <> "ОргФиоИП" Тогда
		   
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
		
	ОчиститьСлужебныеДанныеРаздела(ВыбТабличноеПолеИмя);
	
	УстановитьДоступностьПолейДекларация(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСлужебныеДанныеРаздела(ИмяСтраницыПанели)
	
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда

		СтраницыРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, СтраницыРаздела);
		СтраницыРаздела = ЭтаФорма[СтраницыРаздела];
		
		АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() = 0 Тогда
			Возврат;
		Иначе
			АктивнаяСтраница = АктивнаяСтраница[0];
		КонецЕсли;
		
		Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
								
		АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
		// очищаем данныеОбОП на форме
		ОбособленноеПодразделениеРаздела = "";
				
		АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
		
	Иначе 
		
		ДополнительныеДанные[ИмяСтраницыПанели] = Неопределено;
		ЭтаФорма["СтруктураДанных" + ИмяСтраницыПанели].Очистить();
		ВосстановитьСтруктуруДополнительныхДанных();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСтруктуру(ОчищаемаяСтруктура)
	
	Если ТипЗнч(ОчищаемаяСтруктура) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ОчищаемаяСтруктура Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
			ОчиститьСтруктуру(ОчищаемаяСтруктура[ЭлементСтруктуры.Ключ]);
		Иначе
			ОчищаемаяСтруктура[ЭлементСтруктуры.Ключ] = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(ЭлементСтруктуры.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок) Экспорт
	
	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
	
	ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
	
	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
	
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		// Имеются дополнительные строки.
		// Удаляем их.
		
		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
			
			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
			
			ИмяПервойКолонки = ИмяГруппыДопСтрок + "00_";
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + Формат(НСтр, "ЧГ=0");
			
			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			
			РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			
			// удаляем из структуры многострочного раздела соответствующую строку
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
			
			НСтр = НСтр - 1;
						
		КонецЦикла;	
		
		Если ВыбТабличноеПоле.Области.Найти("МногострочнаяЧасть") = Неопределено Тогда
			
			ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти - 1, , НомерНижнЯчейкиОбласти - 1).Имя = "МногострочнаяЧасть";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", Знач ОбластьИмя = "") Экспорт

	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
			
			//Многострочная часть 1
			
			НомПоз = СтрНайти(ОбластьИмя, "_");
			ДлинаСтроки = СтрДлина(ОбластьИмя);
			
			Если НомПоз > 0 Тогда
				ПостфиксСтроки = "_" + Прав(ОбластьИмя, ДлинаСтроки - НомПоз);
				ОбластьИмя = Лев(ОбластьИмя, НомПоз - 1);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы11, СтруктураГруппы);
				СтруктураГруппы = Форма[СтруктураГруппы];
				
				КоличествоСтрок = СтруктураГруппы.Количество();
				Для Инд = 1 По КоличествоСтрок Цикл
					
					ПостфиксСтроки = "_" + Формат(Инд, "ЧГ=0");
			
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000102, ОбластьИмя) > 0 Тогда   

						Графа02 = Форма.ТабличныйДокумент.Области["П0000100001" + "01" + ПостфиксСтроки].Значение;
						Графа04 = Форма.ТабличныйДокумент.Области["П0000100001" + "03" + ПостфиксСтроки].Значение;
												
						ЗначениеГрафы03 = ?(Графа02 > 0, Графа04/Графа02, 0);
						
						Форма.ТабличныйДокумент.Области["П0000100001" + "02" + ПостфиксСтроки].Значение = ЗначениеГрафы03;
					
					КонецЕсли;
										
				КонецЦикла;
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000102, ОбластьИмя) > 0 Тогда   

					Графа02 = Форма.ТабличныйДокумент.Области["П0000100001" + "01" + ПостфиксСтроки].Значение;
					Графа04 = Форма.ТабличныйДокумент.Области["П0000100001" + "03" + ПостфиксСтроки].Значение;
											
					ЗначениеГрафы03 = ?(Графа02 > 0, Графа04/Графа02, 0);
					
					Форма.ТабличныйДокумент.Области["П0000100001" + "02" + ПостфиксСтроки].Значение = ЗначениеГрафы03;
				
				КонецЕсли;
					
			КонецЕсли;
						
			//Многострочная часть 2
			
			НомПоз = СтрНайти(ОбластьИмя, "_");
			ДлинаСтроки = СтрДлина(ОбластьИмя);
			
			Если НомПоз > 0 Тогда
				ПостфиксСтроки = "_" + Прав(ОбластьИмя, ДлинаСтроки - НомПоз);
				ОбластьИмя = Лев(ОбластьИмя, НомПоз - 1);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
			
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы12, СтруктураГруппы);
				СтруктураГруппы = Форма[СтруктураГруппы];
				
				КоличествоСтрок = СтруктураГруппы.Количество();
				Для Инд = 1 По КоличествоСтрок Цикл
					
					ПостфиксСтроки = "_" + Формат(Инд, "ЧГ=0");

					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000302, ОбластьИмя) > 0 Тогда   

						Графа02 = Форма.ТабличныйДокумент.Области["П0000100003" + "01" + ПостфиксСтроки].Значение;
						Графа04 = Форма.ТабличныйДокумент.Области["П0000100003" + "03" + ПостфиксСтроки].Значение;
												
						ЗначениеГрафы03 = ?(Графа02 > 0, Графа04/Графа02, 0);
						
						Форма.ТабличныйДокумент.Области["П0000100003" + "02" + ПостфиксСтроки].Значение = ЗначениеГрафы03;
					
					КонецЕсли;
				 				
				КонецЦикла;
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000302, ОбластьИмя) > 0 Тогда   

					Графа02 = Форма.ТабличныйДокумент.Области["П0000100003" + "01" + ПостфиксСтроки].Значение;
					Графа04 = Форма.ТабличныйДокумент.Области["П0000100003" + "03" + ПостфиксСтроки].Значение;
											
					ЗначениеГрафы03 = ?(Графа02 > 0, Графа04/Графа02, 0);
					
					Форма.ТабличныйДокумент.Области["П0000100003" + "02" + ПостфиксСтроки].Значение = ЗначениеГрафы03;
				
				КонецЕсли;
								
			КонецЕсли;
						
		КонецЕсли;
					
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		
		РасчетВСтруктуре(Форма);
		Расчет(Форма, "Декларация");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма);
	
	// Расчет осуществляется по структуре многостраничных разделов.
	
	ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов["Декларация"]];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение.П0000100003;
		
		Если ТаблицаБлока <> Неопределено Тогда
			
			Для Каждого ТекСтрока из ТаблицаБлока Цикл
				
				ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
				
				ПостфиксСтроки = "_" + Формат(ИндексТекСтроки, "ЧГ=0");
				
				Графа02 = ТекСтрока["П0000100003" + "01"];
				Графа03 = ТекСтрока["П0000100003" + "02"];
				Графа04 = ТекСтрока["П0000100003" + "03"];
				
				ЗначениеГрафы03 = ?(Графа02 > 0, Графа04/Графа02, 0);
				ТекСтрока["П0000100003" + "02"] = ЗначениеГрафы03;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение.П0000100001;
		
		Если ТаблицаБлока <> Неопределено Тогда
			
			Для Каждого ТекСтрока из ТаблицаБлока Цикл
				
				ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
				
				ПостфиксСтроки = "_" + Формат(ИндексТекСтроки, "ЧГ=0");
				
				Графа02 = ТекСтрока["П0000100001" + "01"];
				Графа03 = ТекСтрока["П0000100001" + "02"];
				Графа04 = ТекСтрока["П0000100001" + "03"];
				
				ЗначениеГрафы03 = ?(Графа02 > 0, Графа04/Графа02, 0);
				ТекСтрока["П0000100001" + "02"] = ЗначениеГрафы03;
				
			КонецЦикла;
			
		КонецЕсли;
		
		//Для инициализации обмена с сервером
		Страница.Данные[0].Пометка = Ложь;
		Страница.ДанныеДопСтрок[0].Пометка = Ложь;
		
	КонецЦикла;
		
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда, ИмяОбласти = "")
	
	ИмяОбласти = ЭтаФорма["ТабличныйДокумент"].ТекущаяОбласть.Имя;
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИмяОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим, ИмяОбласти = Неопределено)
	
	ВставитьДополнительнуюСтроку( КолонкаРазделыОтчетаСокрНаим, ИмяОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку( ТекущаяСтраница, ИмяОбласти = Неопределено)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы, которая содержит многострочный раздел.
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница, ИмяОбласти);
		
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтраница = "Декларация" И ИмяГруппы = "П0000100001" Тогда
		
		СтраницыРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ТекущаяСтраница, СтраницыРаздела);
		СтраницыРаздела = ЭтаФорма[СтраницыРаздела];
		АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ИндексСтраницы <> 0 Тогда			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "00_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "00" Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "00" Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "00_" + КолСтрокСтр1;

	Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		ПронумероватьТаблицыДекларация(ЭтаФорма);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда, ИмяОбласти = "")
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяОбласти     = ТекТабличноеПоле.ТекущаяОбласть.Имя;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяОбласти);
	
	Если ИмяГруппы = Неопределено
	 ИЛИ ((ИмяГруппы = "П0000100001" ИЛИ ИмяГруппы = "П0000200001")
	   И Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета > 1) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект, Новый Структура("ИмяГруппы", ИмяГруппы));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяГруппы = ДополнительныеПараметры.ИмяГруппы;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИмяГруппы);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИмяГруппы);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница, ИмяГруппы)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница, ИмяГруппы)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница, ИмяГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомУдаляемойСтрокиСтр = Формат(НомУдаляемойСтроки, "ЧГ=");
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// Удаление дополнительных данных.
	СтраницыРаздела = Неопределено;
	РазделМногостраничный = Форма.мСтруктураМногостраничныхРазделов.Свойство(ТекущаяСтраница, СтраницыРаздела);
	АктивнаяСтраница = Неопределено;
	ДопДанные = Ложь;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Если РазделМногостраничный Тогда
		СтраницыРаздела = Форма[СтраницыРаздела];
		АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			Если АктивнаяСтраница.ДополнительныеДанные.Количество() > 0 Тогда 
				Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
					ДопДанные = Истина;
					Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
						Если НомерГрафы = 1 Тогда
							КолонкаТаблицыИмя = "УдалитьСтроку" + СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
							ИмяДополнительныхДанных = КолонкаТаблицыИмя + "_" + НомУдаляемойСтрокиСтр;
							Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяДополнительныхДанных) Тогда
								АктивнаяСтраница.ДополнительныеДанные[0].Значение.Удалить(ИмяДополнительныхДанных);
								АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
							КонецЕсли;
						КонецЕсли;
						КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
						ИмяДополнительныхДанных = КолонкаТаблицыИмя + "_" + НомУдаляемойСтрокиСтр;
						Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяДополнительныхДанных) Тогда
							АктивнаяСтраница.ДополнительныеДанные[0].Значение.Удалить(ИмяДополнительныхДанных);
							АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			Если НомерГрафы = 1 Тогда
				КолонкаТаблицыИмя = "УдалитьСтроку" + СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				ИмяДополнительныхДанных = КолонкаТаблицыИмя + "_" + НомУдаляемойСтрокиСтр;
				Если Форма.ДополнительныеДанные[ТекущаяСтраница].Свойство(ИмяДополнительныхДанных) Тогда
					Форма.ДополнительныеДанные[ТекущаяСтраница].Удалить(ИмяДополнительныхДанных);
				КонецЕсли;
			КонецЕсли;
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			ИмяДополнительныхДанных = КолонкаТаблицыИмя + "_" + НомУдаляемойСтрокиСтр;
			Если Форма.ДополнительныеДанные[ТекущаяСтраница].Свойство(ИмяДополнительныхДанных) Тогда
				Форма.ДополнительныеДанные[ТекущаяСтраница].Удалить(ИмяДополнительныхДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "00_" + НомУдаляемойСтрокиСтр;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				НСтрСуфф = Формат(НСтр, "ЧГ=");
				НПредСуфф = Формат(НСтр - 1, "ЧГ=");
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					Если НомерГрафы = 1 Тогда
						
						КолонкаИмя = "УдалитьСтроку" + СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСуфф;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НПредСуфф;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						// Изменение имени ячейки в дополнительных сведениях многострочной части.
						Если РазделМногостраничный Тогда
							Если ДопДанные Тогда
								Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяСдвинутойЯчейки) Тогда
									АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(НовоеИмяСдвинутойЯчейки, АктивнаяСтраница.ДополнительныеДанные[0].Значение[ИмяСдвинутойЯчейки]);
									АктивнаяСтраница.ДополнительныеДанные[0].Значение.Удалить(ИмяСдвинутойЯчейки);
									АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Если Форма.ДополнительныеДанные[ТекущаяСтраница].Свойство(ИмяСдвинутойЯчейки) Тогда
								Форма.ДополнительныеДанные[ТекущаяСтраница].Вставить(НовоеИмяСдвинутойЯчейки, Форма.ДополнительныеДанные[ТекущаяСтраница][ИмяСдвинутойЯчейки]);
								Форма.ДополнительныеДанные[ТекущаяСтраница].Удалить(ИмяСдвинутойЯчейки);
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки      = КолонкаИмя + "_" + НСтрСуфф;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НПредСуфф;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						// Изменение имени ячейки в дополнительных сведениях многострочной части.
						Если РазделМногостраничный Тогда
							Если ДопДанные Тогда 
								Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяСдвинутойЯчейки) Тогда
									АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(НовоеИмяСдвинутойЯчейки, АктивнаяСтраница.ДополнительныеДанные[0].Значение[ИмяСдвинутойЯчейки]);
									АктивнаяСтраница.ДополнительныеДанные[0].Значение.Удалить(ИмяСдвинутойЯчейки);
									АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Если Форма.ДополнительныеДанные[ТекущаяСтраница].Свойство(ИмяСдвинутойЯчейки) Тогда
								Форма.ДополнительныеДанные[ТекущаяСтраница].Вставить(НовоеИмяСдвинутойЯчейки, Форма.ДополнительныеДанные[ТекущаяСтраница][ИмяСдвинутойЯчейки]);
								Форма.ДополнительныеДанные[ТекущаяСтраница].Удалить(ИмяСдвинутойЯчейки);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		
		ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы);
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "00_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		ПронумероватьТаблицыДекларация(Форма);	
	КонецЕсли;
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из Форма.ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из Форма.ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
					
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели);
				
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];

	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);

		// очищаем редактируемые ячейки удаляемой страницы
		ОчиститьТабличноеПоле(ИмяТекущейСтраницыПанели);

		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			//
			Если ИмяТекущейСтраницыПанели = "Декларация" Тогда

				// Предварительно проверим, содержит ли страница многострочные части
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок[0].Значение;

				Если ДанныеДопСтрокРаздела <> Неопределено Тогда
					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;
											
						ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
						КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);

						// Заменяем таблицу значений с данными текущей страницы.
						КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
						// Выводим в табличный документ строки многострочной группы
						ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;

			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл

				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Попытка
					ЭтаФорма[ИмяТекТабличногоПоля].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			КонецЦикла;

			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;

		Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьДоступностьПолейДекларация(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	// Сначала сохраним данные текущей страницы.
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТекТабличногоПоля);

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, ИмяТекущейСтраницыПанели);	
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
	КонецЕсли;
	
	ОпределитьПредставлениеДопСтраниц(ИмяТекущейСтраницыПанели);
	
	Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
		СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
	Иначе
		СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		
		Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
			СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
		Иначе
			СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
		КонецЕсли;
				
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	Если СтрНоваяСтраница.Данные.Количество() > 0 Тогда
		СтрНоваяСтраница.Данные[0].Значение = Новый Структура;
	Иначе
		СтрНоваяСтраница.Данные.Добавить(Новый Структура);
	КонецЕсли;
	СтрНоваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
	СтрНоваяСтраница.Данные[0].Пометка = Ложь;
	
	СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
				
	Если СтрНоваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
		СтрНоваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
	Иначе
		СтрНоваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
	СтрНоваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
	СтрНоваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
	
	УстановитьДоступностьПолейДекларация(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПредставлениеДопСтраниц(ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);
	
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = ЭтаФорма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим ее представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = "Лист N " + Строка(НомерСтраницы);
					Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
						СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
					Иначе
						СтрокаТаблицы.Представление = "Новая страница";
					КонецЕсли;

				КонецЕсли; // ТолькоАктивная

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		ЭтаФорма.НомерКорректировки                = 0;
		ТабличныйДокумент.Области.НомКорр.Значение = 0;
		СтруктураРеквизитовФормы.ВидДокумента      = 0;
		
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	Если ИмяСтраницы = "Декларация" Тогда
	 
		СтраницыРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство("Декларация", СтраницыРаздела);
		СтраницыРаздела = ЭтаФорма[СтраницыРаздела];
		АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
	        ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
			НомерСтраницы = ИндексСтраницы + 1;
	
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяСтраницы, НомерСтраницы);
			
		КонецЕсли;
		
	КонецЕсли;
		
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	Если ИмяСтраницы = "Декларация" Тогда
	 
		СтраницыРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство("Декларация", СтраницыРаздела);
		СтраницыРаздела = ЭтаФорма[СтраницыРаздела];
		АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
	        ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
			НомерСтраницы = ИндексСтраницы + 1;
	
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяСтраницы, НомерСтраницы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
		
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя,ПеременныеМодуля) Экспорт
		
	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Возврат ИзмененияПроизошли;	
		
КонецФункции

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(Истина);

	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;

	ЗаполнитьДатуВЯчейкахНаСервере();

	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	Модифицированность = Истина;
	
Конецпроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
				
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт

	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		
		ЭтаФорма[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
		
	КонецЦикла;
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
		ЭтаФорма["Хранилище" + мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделов();
		
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	СохрНаимТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолучитьМакетФормыОтчета(Раздел.ИмяСтраницы));
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = Раздел.ИмяСтраницы;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолучитьМакетФормыОтчета(Раздел.ИмяСтраницы));
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = Раздел.ИмяСтраницы;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		КонецЕсли;
		
		Если Раздел.ИмяСтраницы = "Декларация" Тогда
			Для Каждого Страница Из ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]] Цикл
		   		Если Страница.ДополнительныеДанные.Количество() = 0 Тогда
					Страница.ДополнительныеДанные.Очистить();
					Страница.ДополнительныеДанные.Добавить(Новый Структура);
					Страница.ДополнительныеДанные[0].Пометка = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = СохрНаимТекущегоРаздела;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
	ИмяОбласти = Область.Имя;
	ЭтоКППМестаДеятельности = (СтрНайти(ИмяОбласти, "П000000000201") = 1);
	
	Если ЭтоКППМестаДеятельности Тогда
		
		КППМестаДеятельности = Область.Значение;
		Если КППМестаДеятельности = ""
			ИЛИ (СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КППМестаДеятельности) И СтрДлина(КППМестаДеятельности) = 9) Тогда
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='КПП должен состоять из 9 цифр.'");
			Сообщение.Сообщить();
			Область.Значение = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяОбласти = "НомКорр" Тогда
		
		НомерКорректировки = Область.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяОбласти = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
		ДатаПодписиПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Элемент.ТекущаяОбласть.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ИмяОбласти = Область.Имя;
	
	Если СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтраницу") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтроку") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("", ИмяОбласти);
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("", ИмяОбласти);
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ИмяОбласти = "ОбособленноеПодразделение") Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиСведенияОбОП();
	КонецЕсли;
	
	Если (ИмяОбласти = "ЭтоЛичноеХозяйство") Тогда
		СтандартнаяОбработка = Ложь;
		ЭтоЛичноеХозяйствоТекЗначение = ТабличныйДокумент.Области.ЭтоЛичноеХозяйство.Значение;
		Если ЭтоЛичноеХозяйствоТекЗначение = "V" Тогда
		    ТабличныйДокумент.Области.ЭтоЛичноеХозяйство.Значение = "";
		Иначе	
		    ТабличныйДокумент.Области.ЭтоЛичноеХозяйство.Значение = "V";
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрВводаПоля.Количество() = 0 Тогда
		
		ПараметрВводаПоля = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ПараметрВводаПоля = ПараметрВводаПоля[0];
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		ИмяПоказателя = ?(РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяОбласти) > 0, ИмяОбласти, ПараметрВводаПоля.Показатель);
		ВвестиПоказатель(Элемент, Область, ИмяПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСведенияОбОП()
		
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	СтраницыРаздела = Неопределено;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, СтраницыРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	СтраницыРаздела = ЭтаФорма[СтраницыРаздела];
	
	АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если АктивнаяСтраница.Количество() = 0 Тогда
		Возврат;
	Иначе
		АктивнаяСтраница = АктивнаяСтраница[0];
	КонецЕсли;
	
	Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
		АктивнаяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
		
	СведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
		
	СохраненныеСведения = Неопределено;
	ИмяЭлементаСтруктуры = "СведенияОбОП";
	
	Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненныеСведения) Тогда
    	ЗаполнитьЗначенияСвойств(СведенияОбОП, СохраненныеСведения);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СведенияОбОП", СведенияОбОП);
	ПараметрыФормы.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	Если ЭтоПБОЮЛ Тогда
	    ПараметрыФормы.Вставить("Заголовок", "Реквизиты виноградника");	
	КонецЕсли; 
		
	ИмяФормыВводРеквизитовОП = "ОбщаяФорма.ВводРеквизитовОПАлко";
	ФормаВводаРеквизитов = ПолучитьФорму(ИмяФормыВводРеквизитовОП, ПараметрыФормы, ЭтаФорма);
	
	ДополнительныеПараметры = Новый Структура("АктивнаяСтраница, ИмяЭлементаСтруктуры, СведенияОбОП", АктивнаяСтраница, ИмяЭлементаСтруктуры, СведенияОбОП);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиСведенияОбОПЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаВводаРеквизитов.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВводаРеквизитов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВводаРеквизитов.Открыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьОбособленноеПодразделение(СведенияОбОП, ЭтоПБОЮЛ, ОрганизацияИНН)

   ВыводитьРеквизиты = (НЕ ПустаяСтрока(СведенияОбОП.Наименование) 
	                //ИЛИ НЕ ПустаяСтрока(СведенияОбОП.ИНН) 
	                ИЛИ НЕ (ЭтоПБОЮЛ  или ПустаяСтрока(СведенияОбОП.КПП))
	                ИЛИ НЕ ПустаяСтрока( СтрЗаменить(СведенияОбОП.ПредставлениеАдреса, ",", "") ) );
	
	Если ВыводитьРеквизиты Тогда
		НаименованиеОП = "";
		Если НЕ ПустаяСтрока(СведенияОбОП.Наименование) Тогда
			НаименованиеОП = СведенияОбОП.Наименование;
		КонецЕсли;
				
		Если НЕ (ЭтоПБОЮЛ  или ПустаяСтрока(ОрганизацияИНН)) Тогда
			НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "ИНН " + ОрганизацияИНН;
		КонецЕсли;
		
		Если НЕ (ЭтоПБОЮЛ  или ПустаяСтрока(СведенияОбОП.КПП)) Тогда		
			НаименованиеОП = НаименованиеОП + 
						?(ПустаяСтрока(НаименованиеОП), "", ", ") + "КПП " + СведенияОбОП.КПП;					
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока( СтрЗаменить(СведенияОбОП.ПредставлениеАдреса, ",", "") ) Тогда
			НаименованиеОП = НаименованиеОП + 
						?(ПустаяСтрока(НаименованиеОП), "", Символы.ПС) + СведенияОбОП.ПредставлениеАдреса;
		КонецЕсли;
	Иначе		
		НаименованиеОП = "";
	КонецЕсли;

	Возврат НаименованиеОП;

КонецФункции  

&НаКлиенте
Процедура ВвестиСведенияОбОПЗавершение(РезультатВвода, ДополнительныеПараметры) Экспорт
	
	БылоСтрОбособленноеПодразделение = ОбособленноеПодразделениеРаздела;
	
	АктивнаяСтраница = ДополнительныеПараметры.АктивнаяСтраница;
	ИмяЭлементаСтруктуры = ДополнительныеПараметры.ИмяЭлементаСтруктуры;
	СведенияОбОП = ДополнительныеПараметры.СведенияОбОП;
	
	Если РезультатВвода <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СведенияОбОП, РезультатВвода);
		
		АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(ИмяЭлементаСтруктуры, СведенияОбОП);
		
		СтрОбособленноеПодразделение = СформироватьОбособленноеПодразделение(СведенияОбОП, ЭтоПБОЮЛ, ОрганизацияИНН);
		
		АктивнаяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);
				
		ОбособленноеПодразделениеРаздела = СтрОбособленноеПодразделение;
		Модифицированность = (БылоСтрОбособленноеПодразделение <> ОбособленноеПодразделениеРаздела) 
							 или Модифицированность;

		
		ТабличныйДокумент.Области.ОбособленноеПодразделение.Значение = ОбособленноеПодразделениеРаздела;
				
	КонецЕсли;
	
	АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
	АктивнаяСтраница.Данные[0].Пометка = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	// Показатели спаренные по списку выбора.
	Если СтрНайти(КодПоказателя, "П000010000101") = 1 ИЛИ СтрНайти(КодПоказателя, "П000010000301") = 1 Тогда
		КолонкаПоиска = "Название";
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		
		УстановитьЗначениеИРассчитатьНаКлиенте(КолонкаПоиска, Область, РезультатВыбора);
		
	Иначе
		
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
		
		Модифицированность = Истина;
	
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеИРассчитатьНаКлиенте(КолонкаПоиска, Область, РезультатВыбора)
	
	Область.Значение = РезультатВыбора[КолонкаПоиска];
	Если Область.Значение = "Пустое значение" Тогда
		Область.Значение = "";
	КонецЕсли;
	ЗаполнитьСвязанныеПоказатели(Область.Имя, РезультатВыбора);
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвязанныеПоказатели(ИмяОбласти, РезультатВыбора)
	
	Если СтрНайти(ИмяОбласти, "П000010000101") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000102" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ТабличныйДокумент.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = РезультатВыбора.Код;
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ТабличныйДокумент.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяОбласти, "П000010000102") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000101" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ТабличныйДокумент.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = ?(ПустаяСтрока(РезультатВыбора.Код), "", РезультатВыбора.Название);
		
	ИначеЕсли СтрНайти(ИмяОбласти, "П000010000301") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000302" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ТабличныйДокумент.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = РезультатВыбора.Код;
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ТабличныйДокумент.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяОбласти, "П000010000302") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000301" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ТабличныйДокумент.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = ?(ПустаяСтрока(РезультатВыбора.Код), "", РезультатВыбора.Название);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	КодИФНС = "";
	КПП = "";
                           
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
			
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
		
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		
		Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
			НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		Иначе
			НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		КонецЕсли;
		
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, НаименованиеТекущегоРаздела);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
		
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, НаименованиеТекущегоРаздела);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Процедура ОчиститьХранилищеОтПробелов(ИдГруппы)
	
	Хранилище = ЭтаФорма["Хранилище" + ИдГруппы];
	Шаблон    = ЭтаФорма[ИдГруппы].Выгрузить().СкопироватьКолонки();
	
	Для Каждого СтраницаХранилища Из Хранилище Цикл
	
		ТаблЗнач = СтраницаХранилища.Таблица;
		КолонкиТаблЗнач = Шаблон.Колонки;
		
		Для Каждого СтрокаТаб Из ТаблЗнач Цикл
		    Для Каждого Колонка Из КолонкиТаблЗнач Цикл
			
				ИмяКолонки = Колонка.Имя;
				Если ТипЗнч(СтрокаТаб[ИмяКолонки]) = Тип("Строка") Тогда
				
					СтрокаТаб[ИмяКолонки] = СокрЛП(СтрокаТаб[ИмяКолонки]);
				
				КонецЕсли; 
			
			КонецЦикла;		
		КонецЦикла; 
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьХранилищаОтПробелов()

	ОчиститьХранилищеОтПробелов(СтруктураРеквизитовФормы.мИдГруппы12);
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[ИмяОбъектаФормы].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[ИмяОбъектаФормы].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант 								  = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// Очистка хранилищ от пробелов в строковых значениях
	ОчиститьХранилищаОтПробелов();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив;
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
		
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.ДополнительныеДанные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
			
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
                        	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
    	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			
	СписокСохранения.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	СписокСохранения.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
    			
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	    
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
		
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СписокСохранения.Свойство("ЭтоПБОЮЛ") Тогда
		Если СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			
		    ЭтоПБОЮЛ = СписокСохранения.ЭтоПБОЮЛ;
			СтруктураРеквизитовФормы.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
			// в противном случае ЭтоПБОЮЛ будет определено в Инициализация()
			
		КонецЕсли;	
	КонецЕсли; 
	 
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если мСтруктураВариантыЗаполнения.Количество() = 0 Тогда
			// восстановим из Эталона, ТаблицаВариантыЗаполнения уже заполнена в ЗаполнитьНачальныеНастройки()
			Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполненияЭталон Цикл
			    мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);			
			КонецЦикла;		
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.ДополнительныеДанные.Очистить();
							СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].ДополнительныеДанные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
                                								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
									
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ДополнительныеДанные", ДополнительныеДанные);
	ВосстановитьСтруктуруДополнительныхДанных();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
    Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ЗаполнитьТитульный();
	ИмяТекРаздела = "Титульный";
			
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность   = Ложь;

	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
		
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
		
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетныйГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетныйГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетныйГод = СокрЛП(СтруктураДанныхТитульный.ОтчетныйГод) + ПоказателиТаблПоле["ОтчетныйГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетныйГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомКорр1" Тогда
			СтруктураДанныхТитульный.Вставить("НомКорр");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.НомКорр = СокрЛП(СтруктураДанныхТитульный.НомКорр) + ПоказателиТаблПоле["НомКорр" + Ном];
				СтруктураДанныхТитульный.Удалить("НомКорр" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПочтовыйИндекс1" Тогда
			СтруктураДанныхТитульный.Вставить("ПочтовыйИндекс");
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.ПочтовыйИндекс = СокрЛП(СтруктураДанныхТитульный.ПочтовыйИндекс) + ПоказателиТаблПоле["ПочтовыйИндекс" + Ном];
				СтруктураДанныхТитульный.Удалить("ПочтовыйИндекс" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодРегиона1" Тогда
			СтруктураДанныхТитульный.Вставить("КодРегиона");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.КодРегиона = СокрЛП(СтруктураДанныхТитульный.КодРегиона) + ПоказателиТаблПоле["КодРегиона" + Ном];
				СтруктураДанныхТитульный.Удалить("КодРегиона" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЦикла;
		
	СтруктураРеквизитовФормы.Руководитель   = ПоказателиТаблПоле.ОргДиректор;
	СтруктураРеквизитовФормы.Бухгалтер      = ПоказателиТаблПоле.ОргБухгалтер;
	СтруктураРеквизитовФормы.ТелОрганизации = ПоказателиТаблПоле.ТелОрганизации;
	
	ЗаполнитьДатуВЯчейкахНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("Выгрузка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);	
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
		
		УстановитьДоступностьПолейДекларация(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
		
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ДеревоДляЗагрузки = Неопределено;
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, Новый Структура, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ТекстПредупреждения = НСтр("ru = 'Выгрузка, проверка выгрузки, проверка в интернете, отправка в электронном виде редакции формы, утвержденной ПП РФ №411 от 13.05.2016, будет реализована в будущих версиях программы.'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(Текст) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(Текст)
	
	// заглушка
	Возврат Ложь;
		
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	// заглушка
	Возврат Ложь;
		
КонецФункции

&НаСервере
Функция ДополнительныеДанныеПоАдресу(Данные, Адрес)
	
	Перем ЗначениеДанных;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПозицияРазделителя = СтрНайти(Адрес, ".");
		Если ПозицияРазделителя = 0 Тогда
			АдресВерхнегоУровня = СокрЛП(Адрес);
			Данные.Свойство(АдресВерхнегоУровня, ЗначениеДанных);
		Иначе
			АдресВерхнегоУровня = СокрЛП(Лев(Адрес, ПозицияРазделителя - 1));
			ДанныеВерхнегоУровня = Неопределено;
			Если Данные.Свойство(АдресВерхнегоУровня, ДанныеВерхнегоУровня) Тогда
				АдресСледующегоУровня = СокрЛП(Сред(Адрес, ПозицияРазделителя + 1));
				ЗначениеДанных = ДополнительныеДанныеПоАдресу(ДанныеВерхнегоУровня, АдресСледующегоУровня);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеДанных;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ТекстПредупреждения = НСтр("ru = 'Выгрузка, проверка выгрузки, проверка в интернете, отправка в электронном виде редакции формы, утвержденной ПП РФ №411 от 13.05.2016, будет реализована в будущих версиях программы.'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
	Возврат;
		
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	УстановитьДоступностьПолейДекларация(ЭтаФорма, "Декларация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьСразуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкВыполнение", ЭтотОбъект, ДополнительныеПараметры);

		
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкВыполнение(Отказ, ДополнительныеПараметры) Экспорт
	
	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
        	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СтруктураПараметров = Новый Структура;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		СохрТЗМногострочнойГруппы11 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы11].Выгрузить();
		СохрТЗМногострочнойГруппы12 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы12].Выгрузить();
	
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
		
	ВывестиМакетВТаблДокНаСервере("Титульный", 1);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	СоставленаНа = 0;
	ТитульныйПечатается = Ложь;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если ИмяСтраницыПанели = "Титульный" Тогда
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			ТитульныйПечатается = Истина;
		ИначеЕсли ИмяСтраницыПанели = "Декларация" Тогда
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДекларация(СтруктураПараметров, СоставленаНа);		
		КонецЕсли;
		
	КонецЦикла;
	
		
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы11].Загрузить(СохрТЗМногострочнойГруппы11);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы12].Загрузить(СохрТЗМногострочнойГруппы12);
	
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	Если ТитульныйПечатается Тогда
		
	    // добавляем к общему числу сам титульный
		СоставленаНа = СоставленаНа + 1;
		
		// получаем титульный, он всегда первый в списке
		ТаблДок = СтруктураРеквизитовФормы.мПечатныеФормы.Получить(0).Значение;
		
		ЦифрВОбщемКоличествеЛистов = 0;
		Для ОбратныйИндекс = 1 По 9 Цикл
			Индекс = 10 - ОбратныйИндекс;
			Если ТаблДок.Области.Найти("СоставленаНа" + Индекс) <> Неопределено Тогда
				ЦифрВОбщемКоличествеЛистов = Индекс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВсегоЛистов = Формат(СоставленаНа, "ЧЦ=" + ЦифрВОбщемКоличествеЛистов + "; ЧН=0; ЧВН=; ЧГ=");
		Для Инд = 1 По ЦифрВОбщемКоличествеЛистов Цикл
			ТекИнд = ЦифрВОбщемКоличествеЛистов - Инд + 1;
			Попытка
				ТаблДок.Области["СоставленаНа" + ТекИнд].Значение = Сред(ВсегоЛистов, ТекИнд, 1);
			Исключение
			КонецПопытки;
		КонецЦикла;
	
	КонецЕсли;
	
	// отключили стандартный подсчет листов
	НомераЛистов = Новый СписокЗначений;
		
	НомерЛиста = 1;
	
	Для Каждого Эл Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл
				
		НомЛиста = НомераЛистов.НайтиПоЗначению(Эл.Представление);
		
		Если НомЛиста = Неопределено Тогда
			
			НомЛиста = НомераЛистов.Добавить(Эл.Представление, "1");
			
			НЛиста = 1;
			
		Иначе
			
			НЛиста = Число(НомЛиста.Представление) + 1;
			
			НомЛиста.Представление = Строка(Число(НомЛиста.Представление) + 1);
									
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПоместитьВоВременноеХранилище(Эл.Значение, УникальныйИдентификатор));
		Значение.Добавить(УникальныйИдентификатор);
		Значение.Добавить(Заголовок);
		
		Если НЛиста = 1 Тогда
			
			СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление);
		
		ИначеЕсли НЛиста = 2 Тогда
			
			ЭлементСписка = СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Получить(СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Количество() - 1);
			
			ЭлементСписка.Представление = ЭлементСписка.Представление + ". Лист 1";
			
			СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление + ". Лист " + НЛиста);
		
		Иначе
		
			СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление + ". Лист " + НЛиста);
			
		КонецЕсли;	
				
		НомерЛиста = НомерЛиста + 1;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	УдалитьСлужебныеСимоволыИзПечатнойФормы(СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура УстановитьГраницуОбласти(Обл, Граница)
	Обл.ГраницаСлева = Граница;
	Обл.ГраницаСправа = Граница;
	Обл.ГраницаСверху = Граница;
	Обл.ГраницаСнизу = Граница;
КонецПроцедуры

&НаСервере
Процедура УдалитьСлужебныеСимоволыИзПечатнойФормы(СписокПечатаемыхЛистов)
	ПустаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Для Каждого Лист Из СписокПечатаемыхЛистов Цикл 
		ТабДок = ПолучитьИзВременногоХранилища(Лист.Значение[0]);
		Для Каждого Обл Из ТабДок.Области Цикл 
			Если СтрНайти(Обл.Имя, "УдалитьСтроку") = 1 И Не Обл.СодержитЗначение Тогда 
				Обл.Текст = "";
			КонецЕсли;
			Если СтрНайти(Обл.Имя, "ДобавитьСтроку") = 1 И Не Обл.СодержитЗначение Тогда 
				Обл.Текст = "";
				УстановитьГраницуОбласти(Обл, ПустаяЛиния);
				Попытка
					Если Обл.Верх = Обл.Низ И Обл.Лево = Обл.Право Тогда 
						УстановитьГраницуОбласти(ТабДок.Область(Обл.Верх, Обл.Лево+1,Обл.Верх, Обл.Лево+1), ПустаяЛиния);
					КонецЕсли;
				Исключение
				КонецПопытки;
		КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
			
	МакетПечатнойФормы = ПолучитьМакетПечатнойФормы(Парам1.ИмяСтраницы);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 10;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 20;
		
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
		
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля);

	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДекларация(СтруктураПараметровСтраницы, СоставленаНа)
	
	МакетПечати = ПолучитьМакетПечатнойФормы("Декларация");
	СоставленаНа = СоставленаНа + 1;
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
	ПечатнаяФорма.ОтображатьСетку     	= Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
	ПечатнаяФорма.Автомасштаб         	= Истина;
	ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.ПолеСверху			= 5;
	ПечатнаяФорма.ПолеСнизу				= 5;
	ПечатнаяФорма.ПолеСлева				= 20;
	ПечатнаяФорма.ПолеСправа			= 10;
		
	
	ВысотаСтраницыВСтроках 					= 66;
	ОсталосьСтрок = ВысотаСтраницыВСтроках;
	
	Высота_ЗаголовокЛистаВСтроках 			= 9;
	Высота_ПустаяСтрокаВСтроках 			= 1;
	Высота_ЗаголовокТаблицыВСтроках 		= 8;
	Высота_ЗаголовокПоОрганизацииВСтроках 	= 2;
	Высота_СтрокаОПВСтроках 				= 2;
	Высота_ПодвалВСтроках 					= 23;
	
	ПомещаетсяВСтрокуПереносимую1 			= 38;
	
	ИмяПоляПереносимойСтроки1				= "П000010000305";
	
	Область_ЗаголовокЛиста = МакетПечати.ПолучитьОбласть("ЗаголовокЛиста");
	ПечатнаяФорма.Вывести(Область_ЗаголовокЛиста);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокЛистаВСтроках;
	
	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
	ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;
		
	Область_ЗаголовокТаблицы = МакетПечати.ПолучитьОбласть("ЗаголовокТаблицы");
	ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
	
	Область_ЗаголовокПоОрганизации = МакетПечати.ПолучитьОбласть("ЗаголовокПоОрганизации");
	ПечатнаяФорма.Вывести(Область_ЗаголовокПоОрганизации);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокПоОрганизацииВСтроках;
		
	ДанныеПоОрганизации = ЭтаФорма[мСтруктураМногостраничныхРазделов.Декларация][0].ДанныеДопСтрок[0].Значение.П0000100001.Выгрузить();
	Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
		Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
		Для Каждого Колонка Из ДанныеПоОрганизации.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000100001", "П0000100003");
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(Область_Строка);
		
		СтрокаПереносимая1 = Область_Строка.Области[ИмяПоляПереносимойСтроки1].Значение;
		КолСтрокВСтрокеПереносимой1 = Цел(СтрДлина(СтрокаПереносимая1)/ПомещаетсяВСтрокуПереносимую1)
									+ ?(СтрДлина(СтрокаПереносимая1)%ПомещаетсяВСтрокуПереносимую1 > 0, 1, 0);
		КолСтрокВСтрокеПереносимой1 = ?(КолСтрокВСтрокеПереносимой1 = 0, 1, КолСтрокВСтрокеПереносимой1);
				
		ОсталосьСтрок = ОсталосьСтрок - КолСтрокВСтрокеПереносимой1;
						
		Если ОсталосьСтрок < 3 Тогда
		    // переходим на новый лист
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
			ОсталосьСтрок = ВысотаСтраницыВСтроках;
			// выводим заголовок таблицы
			ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
			ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
			СоставленаНа = СоставленаНа + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Высота_СтрокаОПВСтроках = 4;
	
	ВсегоЛистов = ЭтаФорма[мСтруктураМногостраничныхРазделов.Декларация].Количество();
	ТекЛист = 0;
	Для Каждого Лист Из ЭтаФорма[мСтруктураМногостраничныхРазделов.Декларация] Цикл
		
		ТекЛист = ТекЛист + 1;
		
		Если ОсталосьСтрок < (Высота_ПустаяСтрокаВСтроках + Высота_СтрокаОПВСтроках + 5) Тогда
		    // переходим на новый лист, если места меньше чем на заголовок ОП и строку
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
			ОсталосьСтрок = ВысотаСтраницыВСтроках;
			// выводим заголовок таблицы
			ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
			ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
			СоставленаНа = СоставленаНа + 1;
			
		КонецЕсли;
		
		Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
		ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
		ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;
		
		ДанныеЛиста = Лист.Данные[0].Значение;
		ДанныеПоПодразделению = Лист.ДанныеДопСтрок[0].Значение.П0000100003.Выгрузить();
		Область_СтрокаОП = МакетПечати.ПолучитьОбласть("СтрокаОП");
		
		Область_СтрокаОП.Области.ОП.Значение = ДанныеЛиста.ОбособленноеПодразделение;
		ПечатнаяФорма.Вывести(Область_СтрокаОП);
		
		ОсталосьСтрок = ОсталосьСтрок - Высота_СтрокаОПВСтроках;
		
		КолСтрокДанных = ДанныеПоПодразделению.Количество();
		
		ТекНомерСтрокиДанных = 0;
		
		Для Каждого СтрокаДанных Из ДанныеПоПодразделению Цикл
			
			Если ОсталосьСтрок < 3 Тогда
			    // переходим на новый лист
				ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				ОсталосьСтрок = ВысотаСтраницыВСтроках;
				// выводим заголовок таблицы
				ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
				ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
				СоставленаНа = СоставленаНа + 1;
				
			КонецЕсли;
			
			Если ТекЛист = ВсегоЛистов Тогда
			    // последний лист
				ОсталосьВывести = КолСтрокДанных - ТекНомерСтрокиДанных;
				Если ОсталосьСтрок < (3 + Высота_ПодвалВСтроках) 
					и (ОсталосьВывести < 5) Тогда
					
					// переходим на новый лист, чтобы подвал напечатался нормально
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					ОсталосьСтрок = ВысотаСтраницыВСтроках;
					// выводим заголовок таблицы
					ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
					ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
					СоставленаНа = СоставленаНа + 1;
					
				КонецЕсли; 
							
			КонецЕсли;
			
			ТекНомерСтрокиДанных = ТекНомерСтрокиДанных + 1;
			
			Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
			Для Каждого Колонка Из ДанныеПоПодразделению.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИмяКолонкиМакета = ИмяКолонки;
				Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
					Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
				КонецЕсли;
			КонецЦикла;
			ПечатнаяФорма.Вывести(Область_Строка);
			
			СтрокаПереносимая1 = Область_Строка.Области[ИмяПоляПереносимойСтроки1].Значение;
			КолСтрокВСтрокеПереносимой1 = Цел(СтрДлина(СтрокаПереносимая1)/ПомещаетсяВСтрокуПереносимую1)
										+ ?(СтрДлина(СтрокаПереносимая1)%ПомещаетсяВСтрокуПереносимую1 > 0, 1, 0);
			КолСтрокВСтрокеПереносимой1 = ?(КолСтрокВСтрокеПереносимой1 = 0, 1, КолСтрокВСтрокеПереносимой1);
					
			ОсталосьСтрок = ОсталосьСтрок - КолСтрокВСтрокеПереносимой1;
						
		КонецЦикла;
		
	КонецЦикла;
	
	Область_Подвал = МакетПечати.ПолучитьОбласть("Подвал");
	
	Область_Подвал.Области.ОргДиректор.Значение = СтруктураДанныхТитульный.ОргДиректор;
	Область_Подвал.Области.ОргБухгалтер.Значение = СтруктураДанныхТитульный.ОргБухгалтер;
	ОргФиоИП = СтруктураДанныхТитульный.ОргФиоИП;
	Если СтруктураДанныхТитульный.ЭтоЛичноеХозяйство = "V" Тогда
	    Область_Подвал.Области.ГражданинФИО.Значение = ОргФиоИП;
	Иначе
		Область_Подвал.Области.ОргФиоИП.Значение = ОргФиоИП;	
	КонецЕсли; 
	
	ПечатнаяФорма.Вывести(Область_Подвал);
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписиРук = Новый Массив(8);
	МассивДатаПодписиБух = Новый Массив(8);
	МассивДатаПодписиИП  = Новый Массив(8);	
				
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = "00" + СтрИНН;
		КонецЕсли;
				
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		СтрДатаПодписи = ?(СтрДатаПодписи = "01010001", "        ", СтрДатаПодписи);
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргДиректор.Значение) Тогда
				МассивДатаПодписиРук[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргБухгалтер.Значение) Тогда
				МассивДатаПодписиБух[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргФиоИП.Значение) Тогда
				МассивДатаПодписиИП[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук", 	МассивДатаПодписиРук);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух", 	МассивДатаПодписиБух);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиИП", 	МассивДатаПодписиИП);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ИНН") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КПП") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ОтчетныйГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "Прил") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ПочтовыйИндекс") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "КодРегиона") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомКорр") > 0 Тогда
					
					НомерКорр = Формат(Область.Значение, "ЧЦ=2; ЧН=00; ЧВН=");
					
					Если НомерКорр = "00" Тогда
						НомерКорр = СтрЗаменить(НомерКорр, 0, " ");
					КонецЕсли;
					
					Для Ном = 1 По СтрДлина(НомерКорр) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(НомерКорр, Ном, 1);
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ВидДокументаПервичный") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ВидДокументаКорректирующий") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ЭтоЛичноеХозяйство") > 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЭтоКоррДокумент = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, Ложь, Истина);
				
				МакетПечатнойФормы.Области.ВидДокументаПервичный.Значение = ?(ЭтоКоррДокумент, "", "V");
				МакетПечатнойФормы.Области.ВидДокументаКорректирующий.Значение = ?(ЭтоКоррДокумент, "V", "");
			
			КонецЕсли;
			
			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		Если Реквизит.Ключ = "ДатаПодписиРук" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиРук";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиБух" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиБух";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиИП" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиИП";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;	
		Иначе
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
		КонецЕсли;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Цикл
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				НомСтр = Формат(Ном, "ЧГ=");
				Если ЗначениеЗаполнено(Реквизит.Значение[Ном - 1]) Тогда
					МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + НомСтр].Значение = Реквизит.Значение[Ном - 1];
				КонецЕсли;
			КонецЦикла;
			
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
				
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
			
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы11
	 ИЛИ ИдГруппы = ИдГрупп.мИдГруппы12 Тогда
		
		ТекТабличноеПоле = "Декларация";
			
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ОставитьВТаблицеТребуемыйКодПродукции(ТаблицаИсточник, ТаблицаПриемник, Поле, Условие, КолонкаИНН) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		Если (СтрокаТаблицыИсточника[Поле] = Условие) Тогда
			СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакет(Команда)
	
	ТекстПредупреждения = НСтр("ru = 'Выгрузка, проверка выгрузки, проверка в интернете, отправка в электронном виде редакции формы, утвержденной ПП РФ №411 от 13.05.2016, будет реализована в будущих версиях программы.'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ИмяОбъектаФормы()
	
  	ФормаИмяФормы = Строка(ИмяФормы);
  	ПозКонцаИмениОтчета = СтрНайти(ФормаИмяФормы, ".Форма.", НаправлениеПоиска.СКонца,,1);

  	ИмяОбъектаФормыСНачала = Лев(ФормаИмяФормы, ПозКонцаИмениОтчета - 1);

  	ПозНачалаИмениОтчета = СтрНайти(ИмяОбъектаФормыСНачала , ".");

  	Результат = Сред(ИмяОбъектаФормыСНачала , ПозНачалаИмениОтчета + 1);

  	Возврат Результат ;

КонецФункции

&НаСервере
Функция ОбъектОтчета()

  	Если мОбъектОтчета = Неопределено Тогда

    	Если СтрНайти(Строка(ИмяФормы), "Внешний") > 0 Тогда
      		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(Строка(ИмяФормы));
    	Иначе
      		мОбъектОтчета = Отчеты[ИмяОбъектаФормы];
    	КонецЕсли; 

  	КонецЕсли;

  	Возврат мОбъектОтчета;

КонецФункции

&НаСервере
Функция ПолучитьМакетИзОбъекта(ИмяМакета) 
   	Возврат ОбъектОтчета().ПолучитьМакет(Строка(ИмяМакета)); 
КонецФункции

&НаСервере
Функция ПолучитьМакетПечатнойФормы(ИмяРаздела)

	ИмяПечатнойФормыРаздела = "Печатная" + Сред(Строка(ИмяФормы), СтрНайти(Строка(ИмяФормы), "ФормаОтчета")) 
                                                        + "_" + Строка(ИмяРаздела);

	Возврат ПолучитьМакетИзОбъекта(ИмяПечатнойФормыРаздела);

КонецФункции

&НаСервере
Функция ПолучитьМакетФормыОтчета(ИмяРаздела)
	
	ИмяФормыРаздела = Сред(Строка(ИмяФормы), СтрНайти(Строка(ИмяФормы), "ФормаОтчета")) + "_" + Строка(ИмяРаздела);
														
	Возврат ПолучитьМакетИзОбъекта(ИмяФормыРаздела);
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ОТЧЕТА В ФСРАР

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ТекстПредупреждения = НСтр("ru = 'Выгрузка, проверка выгрузки, проверка в интернете, отправка в электронном виде редакции формы, утвержденной ПП РФ №411 от 13.05.2016, будет реализована в будущих версиях программы.'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Возврат;
		
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ТекстПредупреждения = НСтр("ru = 'Выгрузка, проверка выгрузки, проверка в интернете, отправка в электронном виде редакции формы, утвержденной ПП РФ №411 от 13.05.2016, будет реализована в будущих версиях программы.'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	ПерваяСтраница = Истина;
	
	Если ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначокТ1") <> Неопределено Тогда
		ДобавитьСтрокуЗначокТ1Верх = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначокТ1").Верх;
		ПерваяСтраница = ТабличныйДокумент.Область("R" + Формат(ДобавитьСтрокуЗначокТ1Верх, "ЧГ=0")).ВысотаСтроки <> 1;
	КонецЕсли;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100001") > 0 И ПерваяСтраница
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100003") > 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			Иначе
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	// заглушка
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	// заглушка
	Возврат;
КонецПроцедуры
