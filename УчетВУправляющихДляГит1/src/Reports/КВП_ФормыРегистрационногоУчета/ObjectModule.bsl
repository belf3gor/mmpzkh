
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ ПЕРЕМЕННЫХ МОДУЛЯ

Перем мСписокФормОтчета Экспорт;                    // Хранит список доступных форм отчета и их названия.
Перем мРазмерыФорм Экспорт;                         // Хранит размеры доступных форм отчета.
Перем мКоличествоСтраницВФормах Экспорт;            // Хранит количество страниц доступных форм отчета.

Перем мНачалоОбластиКолонка;                        // Хранит Колонку начала области.
Перем мНачалоОбластиСтрока;                         // Хранит Колонку начала области.
Перем мНачалоОбластиКолонка2;                       // Хранит Колонку начала области второй страницы.
Перем мНачалоОбластиСтрока2;                        // Хранит Колонку начала области второй страницы.

Перем мНастройкиУчетнойПолитикиТСЖ Экспорт;         // Хранит настройки учетной политики ЖКХ.
Перем мУпрощенныйВариантУчетаСобственников Экспорт; // Хранит значение константы "Упрощенный вариант учета собственников".

Перем ЛицевойСчет Экспорт;                          // Хранит ссылку на лицевой счет. // Хранит настройки учетной политики ЖКХ.

#Область ОбщиеПроцедурыИФункции

// Получает месяц строкой из даты
//
Функция ПолучитьМесяц(_Дата)
	
	// Получим строку с датой заданного формата и обрежем день и год.
	// Использование Формат(_Дата, "ДФ=MMMM") не подойдет, так как вернет месяц в
	// именительном падеже.
	тДата = Формат(_Дата, "ДФ=dd.MMMM.yyyy");
	МГ = Сред(тДата,Найти(тДата, ".") + 1);
	
	Возврат Лев(МГ, Найти(МГ, ".") - 1);
	
КонецФункции // ПолучитьМесяц(_Дата)

// Формирует и выводит отчет.
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - элемент управления, в который будет осуществлен вывод.
//
Процедура ОбновитьОтчет(ДокументРезультат) Экспорт
	
	ДокументРезультат.Очистить();
	
	Для Каждого Строка Из ТаблицаДляПечати Цикл
		
		Если (Строка.НомерФормы = "ППВУ" ИЛИ Строка.НомерФормы = "Ф17") И Дата = '00010101' Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо заполнить дату формирования отчета!");
			Возврат;
		КонецЕсли;
		Если Строка.НомерФормы = "Ф3_МСК" И Дата > ДатаОкончанияПериода Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата окончания периода не может быть меньше даты начала периода!");
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	тФорм = СформироватьТаблицуФорм();
	
	Если НЕ (ЗначениеЗаполнено(тФорм) И ТипЗнч(тФорм) = Тип("ТаблицаЗначений")) Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать отчет!");
		
		Возврат;
		
	КонецЕсли;
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	РаспределитьФормыВсе(ДокументРезультат, тФорм);
	
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку = Ложь;
	
	ДокументРезультат.РазмерКолонтитулаСверху = 0;
	ДокументРезультат.РазмерКолонтитулаСнизу  = 0;
	
	// Настройка печати.
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ФормыРегистрационногоУчета_" + тФорм[0].НомерФормы;
	
КонецПроцедуры // ОбновитьОтчет()

// Формирует строку с типом регистрации и датой регистрации.
//
Функция СформироватьДанныеОТипеРегистрации(Проживающий)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
	|			ТОГДА ""Временно""
	|		ИНАЧЕ ""Постоянно""
	|	КОНЕЦ КАК ТипРегистрации,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&Дата, 
	|																	Жилец = &Проживающий И ЛицевойСчет = &ЛицевойСчет И ДатаИзменения <= &Дата)
	|		КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован";
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
	Запрос.УстановитьПараметр("Проживающий", Проживающий);
	Запрос.УстановитьПараметр("ЛицевойСчет", Проживающий.Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаТипРегистрации = "";
	Если Выборка.Следующий() Тогда
		СтрокаТипРегистрации = Выборка.ТипРегистрации + " с " + Формат(Выборка.ДатаИзменения, "ДЛФ=Д");
	КонецЕсли;
	
	Возврат СтрокаТипРегистрации;
	
КонецФункции

// Дополняет структуру параметров данными о дате регистрации.
Процедура ДополнитьДаннымиОДатеРегистрации(_Проживающий, Дата, СведенияПоПроживающему)
	
	// получение периода регистрации по месту пребывания
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", _Проживающий);
	Запрос.УстановитьПараметр("Дата",   НачалоДня(Дата));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения) КАК Период,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Объект
	|ПОМЕСТИТЬ втРегистрация
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			Жилец = &Объект
	|				И ДатаИзменения <= &Дата
	|				И Зарегистрирован) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец КАК Объект,
	|	МАКСИМУМ(УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения) КАК Период
	|ПОМЕСТИТЬ втСнятиеСРегистрации
	|ИЗ
	|	втРегистрация КАК втРегистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|		ПО втРегистрация.Объект = УПЖКХ_СведенияОЗарегистрированных.Жилец
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения >= втРегистрация.Период
	|	И УПЖКХ_СведенияОЗарегистрированных.Жилец = &Объект
	|	И НЕ УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРегистрация.Период КАК ДатаРегистрации,
	|	втСнятиеСРегистрации.Период КАК ДатаСнятияСРегистрации
	|ИЗ
	|	втРегистрация КАК втРегистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСнятиеСРегистрации КАК втСнятиеСРегистрации
	|		ПО втРегистрация.Объект = втСнятиеСРегистрации.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ДатаРегистрации) Тогда
			
			ДатаРегистрации = Формат(Выборка.ДатаРегистрации, "ДФ=dd|MMMM|yyyy");
			
			СведенияПоПроживающему.Вставить("ДатаПостановкиРегистрации", Формат(Выборка.ДатаРегистрации, "ДЛФ=ДД"));
			СведенияПоПроживающему.Вставить("НачалоРегДень",             Лев(ДатаРегистрации, 2));
			СведенияПоПроживающему.Вставить("НачалоРегМесяц",            Сред(ДатаРегистрации, 4, СтрДлина(ДатаРегистрации)-5-3));
			СведенияПоПроживающему.Вставить("НачалоРегГод",              Прав(ДатаРегистрации, 2));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаСнятияСРегистрации) Тогда
			
			ДатаВыбытия = Формат(УПЖКХ_УчетЖильцов.ПолучитьДатуВыбытия(Выборка.ДатаСнятияСРегистрации), "ДФ=dd|MMMM|yyyy");
			
			СведенияПоПроживающему.Вставить("ДатаСнятияСРегистрации", Формат(УПЖКХ_УчетЖильцов.ПолучитьДатуВыбытия(Выборка.ДатаСнятияСРегистрации), "ДЛФ=ДД"));
			СведенияПоПроживающему.Вставить("ОкончаниеРегДень",       Лев(ДатаВыбытия, 2));
			СведенияПоПроживающему.Вставить("ОкончаниеРегМесяц",      Сред(ДатаВыбытия, 4, СтрДлина(ДатаВыбытия)-5-3));
			СведенияПоПроживающему.Вставить("ОкончаниеРегГод",        Прав(ДатаВыбытия, 2));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает данные об изменениях ФИО. Данные об изменении ФИО получаются 
// только при совпадении даты формирования отчета и даты изменения ФИО.
//
// Для формы №2 получает предыдущие ФИО и записывает их в СведенияПоПроживающему
// с префиксом "Пред".
//
// Для формы №7 текущие ФИО записываются в СведенияПоПроживающему с префиксом "Нов", 
// а без префикса записываются предыдущие ФИО. Такой подход обеспечивает заполнение 
// п.14 новыми ФИО в день их ввода. Пункты 1-3 при этом заполняются старыми ФИО.
//
Процедура ПолучитьДанныеОбИзмененияхФИО(СведенияПоПроживающему, ФизЛицо, НомФормы = "")
	
	Если Не НачалоДня(СведенияПоПроживающему.ДатаВступленияПоследнегоИмени) = НачалоДня(Дата) Тогда
		// данные о предыдущих ФИО не нужны
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Период,
	|	ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПериодов.Период КАК Период,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|		ПО ФИОФизЛицСрезПоследних.ФизическоеЛицо = ТаблицаПериодов.ФизическоеЛицо
	|ГДЕ
	|	ФИОФизЛицСрезПоследних.Период < ТаблицаПериодов.Период
	|	И ФИОФизЛицСрезПоследних.ФизическоеЛицо = &ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Дата",    Дата);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НомФормы = "Ф7" Тогда
			СведенияПоПроживающему.Вставить("НовФамилия",  СведенияПоПроживающему.Фамилия);
			СведенияПоПроживающему.Вставить("НовИмя",      СведенияПоПроживающему.Имя);
			СведенияПоПроживающему.Вставить("НовОтчество", СведенияПоПроживающему.Отчество);
			
			СведенияПоПроживающему.Вставить("Фамилия",     Выборка.Фамилия);
			СведенияПоПроживающему.Вставить("Имя",         Выборка.Имя);
			СведенияПоПроживающему.Вставить("Отчество",    Выборка.Отчество);
		Иначе
			СведенияПоПроживающему.Вставить("ПредФамилия",  Выборка.Фамилия);
			СведенияПоПроживающему.Вставить("ПредИмя",      Выборка.Имя);
			СведенияПоПроживающему.Вставить("ПредОтчество", Выборка.Отчество);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Разбивает страховой номер ПФР проживающего на цифры.
//
Процедура РазбитьСтраховойНомерПФРНаЦифры(СведенияПоПроживающему)
	
	СНИЛС = "";
	
	СведенияПоПроживающему.Свойство("СтраховойНомерПФР", СНИЛС);
	Если СНИЛС = "" Тогда
		Для Сч = 1 ПО 11 Цикл
			СведенияПоПроживающему.Вставить("ССНИЛС" + Сч, "");
		КонецЦикла;
	Иначе
		СНИЛС = СтрЗаменить(СНИЛС, " ", "");
		СНИЛС = СтрЗаменить(СНИЛС, "-", "");
		
		ВсегоЗнаков = СтрДлина(СНИЛС);
		Для Сч = 1 По ВсегоЗнаков Цикл
			ТекЗнак = Сред(СНИЛС, Сч, 1);
			СведенияПоПроживающему.Вставить("СНИЛС" + Сч, ТекЗнак);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СборСведенийДляЗаполненияБланков

// Собирает данные по проживающему для занесения в форму отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьОбщиеСведенияПоПроживающему(_Проживающий, _Дата)
	
	СведенияПоПроживающему = ПолучитьОбщиеДанныеПоПроживающему(_Проживающий, _Дата);
	
	РазбитьСтраховойНомерПФРНаЦифры(СведенияПоПроживающему);
	
	ПолМуж = "";
	ПолЖен = "";
	Если СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		ПолМуж = "Х";
	ИначеЕсли СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		ПолЖен = "Х";
	КонецЕсли;
	
	СведенияПоПроживающему.Вставить("ПолМуж", ПолМуж);
	СведенияПоПроживающему.Вставить("ПолЖен", ПолЖен);
	
	// Сведения об организации.
	СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(Организация, Дата);
	
	СведенияПоПроживающему.Вставить("СокрНаименованиеОрганизации", Организация.Наименование);
	СведенияПоПроживающему.Вставить("НаименованиеОрганизации",     Организация.НаименованиеПолное);
	СведенияПоПроживающему.Вставить("РеквизитыОрганизации",
									УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,ИНН,КПП,"));
	
	// Сведения об ответственном лице.
	УчетнаяПолитикаЖКХ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(_Дата, Организация);
	
	Если ТипЗнч(УчетнаяПолитикаЖКХ) = Тип("Структура") Тогда
		
		Ответственный = УчетнаяПолитикаЖКХ.ОтветственноеЛицоПаспортногоСтола;
		
		Тип = ТипЗнч(Ответственный);
		
		Если Тип = Тип("ПеречислениеСсылка.ОтветственныеЛицаОрганизаций") Тогда
			
			Отв = РегистрыСведений.ОтветственныеЛицаОрганизаций.ПолучитьПоследнее(
					_Дата, новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Организация, Ответственный));
			
			ФизЛицо   = УПЖКХ_ТиповыеМетодыВызовСервера.ДанныеФизЛица(Организация, Отв.ФизическоеЛицо, _Дата);
			Должность = Отв.Должность;

		ИначеЕсли Тип = Тип("СправочникСсылка.Сотрудники") Тогда	
			
			ФизЛицо   = УПЖКХ_ТиповыеМетодыВызовСервера.ДанныеФизЛица(Организация, Ответственный.ФизическоеЛицо, _Дата);
			Должность = ФизЛицо.Должность;
			
		Иначе
			
			ФизЛицо   = Новый Структура("Представление", "");
			Должность = "";
			
		КонецЕсли;
			
		Ответственный = ФизЛицо.Представление;
		
		СведенияПоПроживающему.Вставить("ДолжностьОтветственного" , Должность);
		СведенияПоПроживающему.Вставить("Ответственный" ,           Ответственный);
		
	КонецЕсли;
	
	// Сведения о виде документа.
	СокрВидДок = СтрЗаменить(СведенияПоПроживающему.ВидДокумента.Наименование, "Российской Федерации", "РФ");
	
	СведенияПоПроживающему.Вставить("СокрВидДок", СокрВидДок);
	
	// Сведения о ФИО и д.р. заявителя.
	ФизЛицо = УПЖКХ_ТиповыеМетодыВызовСервера.ДанныеФизЛица(Организация, _Проживающий.ФизЛицо, _Дата);
	
	ПолФизЛица = Неопределено;
	Если _Проживающий.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		ПолФизЛица = 1;
	ИначеЕсли _Проживающий.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		ПолФизЛица = 2;
	КонецЕсли;
	
	// Получение фамилии, имени, отчества для п.1-3
	СведенияПоПроживающему.Вставить("ДатаВступленияПоследнегоИмени", ФизЛицо.ДатаВступленияПоследнегоИмени);
	СведенияПоПроживающему.Вставить("Фамилия",  ФизЛицо.Фамилия);
	СведенияПоПроживающему.Вставить("Имя",      ФизЛицо.Имя);
	СведенияПоПроживающему.Вставить("Отчество", ФизЛицо.Отчество);
	
	СведенияОЗаявителе = ?(ЗначениеЗаполнено(ФизЛицо.Фамилия), ФизЛицо.Фамилия, "")
	                   + ?(ЗначениеЗаполнено(ФизЛицо.Имя), " " + ФизЛицо.Имя, "")
	                   + ?(ЗначениеЗаполнено(ФизЛицо.Отчество), " " + ФизЛицо.Отчество, "");
	
	СведенияОЗаявителе_1 = "";
	СведенияОЗаявителе_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияОЗаявителе, 70, СведенияОЗаявителе_1, СведенияОЗаявителе_2);
	
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе",   СведенияОЗаявителе);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_1", СведенияОЗаявителе_1);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_2", СведенияОЗаявителе_2);
	
	СведенияОЗаявителе_ТворПадеж = СклонениеПредставленийОбъектов.ПросклонятьФИО(СведенияОЗаявителе, 5, ,ПолФизЛица);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_ТворПадеж", СведенияОЗаявителе_ТворПадеж);
	
	СведенияОЗаявителе_ДатПадеж = СклонениеПредставленийОбъектов.ПросклонятьФИО(СведенияОЗаявителе, 3, ,ПолФизЛица);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_ДатПадеж", СведенияОЗаявителе_ДатПадеж);
	
	СведенияОЗаявителе_ДатПадеж_1 = "";
	СведенияОЗаявителе_ДатПадеж_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияОЗаявителе_ДатПадеж, 70, СведенияОЗаявителе_ДатПадеж_1, СведенияОЗаявителе_ДатПадеж_2);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_ДатПадеж_1", СведенияОЗаявителе_ДатПадеж_1);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_ДатПадеж_2", СведенияОЗаявителе_ДатПадеж_2);
	
	СведенияОЗаявителеДП = _Проживающий.Наименование;
	
	// Сведения о заявителе - дательный падеж.
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеДП", СведенияОЗаявителе);
	
	СведенияОЗаявителеГодРождения             = СведенияОЗаявителе;
	СведенияОЗаявителеДПГодРождения           = СведенияОЗаявителеДП;
	СведенияОЗаявителеДатаРождения            = СведенияОЗаявителе;
	
	СведенияОЗаявителе_ДатПадеж_ДПГодРождения = СведенияОЗаявителеДП;
	ОбщегоНазначения.Просклонять(СведенияОЗаявителе, 3, СведенияОЗаявителе_ДатПадеж_ДПГодРождения, ПолФизЛица);
	
	СведенияОЗаявителе_ДатПадеж_ДатаРождения  = СведенияОЗаявителе;
	ОбщегоНазначения.Просклонять(СведенияОЗаявителе, 3, СведенияОЗаявителе_ДатПадеж_ДатаРождения, ПолФизЛица);
	
	СведенияОЗаявителе_РодПадеж = СклонениеПредставленийОбъектов.ПросклонятьФИО(СведенияОЗаявителе, 2, ,ПолФизЛица);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_РодПадеж", СведенияОЗаявителе_РодПадеж);
	
	СведенияОЗаявителе_РодПадеж_ДатаРождения = СведенияОЗаявителе_РодПадеж;
	
	Если ЗначениеЗаполнено(_Проживающий.ФизЛицо.ДатаРождения) Тогда
		
		СведенияОЗаявителеГодРождения  = 
			СведенияОЗаявителеГодРождения + ", " + Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДФ=yyyy") + " г.р.";
		СведенияОЗаявителеДПГодРождения = 
			СведенияОЗаявителеДПГодРождения + ", " + Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДФ=yyyy") + " г.р.";
		СведенияОЗаявителе_ДатПадеж_ДПГодРождения = 
			СведенияОЗаявителе_ДатПадеж_ДПГодРождения + ", " + Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДФ=yyyy") + " г.р.";
		СведенияОЗаявителеДатаРождения = 
			СведенияОЗаявителе + ", " + Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДЛФ=DD") + "р.";
		СведенияОЗаявителе_ДатПадеж_ДатаРождения = 
			СведенияОЗаявителе_ДатПадеж_ДатаРождения + ", " + Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДЛФ=DD") + "р.";
		СведенияОЗаявителе_РодПадеж_ДатаРождения  = 
			СведенияОЗаявителе_РодПадеж_ДатаРождения + ", " + Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДЛФ=DD") + "р.";
		
	КонецЕсли;
	
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеГодРождения",             СведенияОЗаявителеГодРождения);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеДПГодРождения",           СведенияОЗаявителеДПГодРождения);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеДатаРождения",            СведенияОЗаявителеДатаРождения);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_РодПадеж_ДатаРождения",  СведенияОЗаявителе_РодПадеж_ДатаРождения);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_ДатПадеж_ДПГодРождения", СведенияОЗаявителе_ДатПадеж_ДПГодРождения);
	
	ДатаРождения       = Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДФ=dd.MM.yyyy");
	
	ДеньРождения       = Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДФ=dd");
	МесяцРождения      = ПолучитьМесяц(_Проживающий.ФизЛицо.ДатаРождения);
	ГодРождения        = Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДФ=yyyy");
	
	МесяцРожденияЧисло = Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДФ=MM");
	
	// Раскладываем дату рождения 
	СведенияПоПроживающему.Вставить("ДатаРождения",       ДатаРождения);
	СведенияПоПроживающему.Вставить("ДатаРожденияДень",   ДеньРождения);
	СведенияПоПроживающему.Вставить("ДатаРожденияМесяц",  МесяцРождения);
	СведенияПоПроживающему.Вставить("ДатаРожденияГод",    ГодРождения);
	СведенияПоПроживающему.Вставить("ДатаРожденияГод21",  Лев(ГодРождения,2));
	СведенияПоПроживающему.Вставить("ДатаРожденияГод22",  Прав(ГодРождения,2));
	СведенияПоПроживающему.Вставить("МесяцРожденияЧисло", МесяцРожденияЧисло);
	
	// Получение места рождения.
	МестоРожденияФизЛица   = _Проживающий.ФизЛицо.МестоРождения;
	МестоРожденияСтрокой   = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(МестоРожденияФизЛица);
	МестоРожденияСтруктура = ПерсонифицированныйУчетКлиентСервер.РазложитьМестоРождения(МестоРожденияФизЛица, Ложь);
	
	ПредставлениеРожд_1 = "";
	ПредставлениеРожд_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияПоПроживающему.МестоРождения, 70, ПредставлениеРожд_1, ПредставлениеРожд_2);
	
	СведенияПоПроживающему.Вставить("ПредставлениеРожд_1", ПредставлениеРожд_1);
	СведенияПоПроживающему.Вставить("ПредставлениеРожд_2", ПредставлениеРожд_2);
	
	СведенияОЗаявителеМестоРожд   = СведенияОЗаявителе + ?(МестоРожденияСтрокой="","","; " + МестоРожденияСтрокой);
	СведенияОЗаявителеМестоРожд_1 = "";
	СведенияОЗаявителеМестоРожд_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияОЗаявителеМестоРожд, 80,
							  СведенияОЗаявителеМестоРожд_1, СведенияОЗаявителеМестоРожд_2);
	
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеГодМестоРожд",
										СведенияОЗаявителеГодРождения + ?(МестоРожденияСтрокой="","","; " + МестоРожденияСтрокой));
	
	СведенияОЗаявителеДатаРожденияМестоРожд = 
					СведенияОЗаявителеДатаРождения + ?(МестоРожденияСтрокой = "", "", "; " + МестоРожденияСтрокой);
	СведенияОЗаявителеДатаРожденияМестоРожд_1 = "";
	СведенияОЗаявителеДатаРожденияМестоРожд_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияОЗаявителеДатаРожденияМестоРожд, 80,
								СведенияОЗаявителеДатаРожденияМестоРожд_1, СведенияОЗаявителеДатаРожденияМестоРожд_2);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеДатаРожденияМестоРожд",   СведенияОЗаявителеДатаРожденияМестоРожд);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеДатаРожденияМестоРожд_1",
									СведенияОЗаявителеДатаРожденияМестоРожд_1);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеДатаРожденияМестоРожд_2",
									СведенияОЗаявителеДатаРожденияМестоРожд_2);
	
	СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд = 
					СведенияОЗаявителе_ДатПадеж_ДатаРождения + ?(МестоРожденияСтрокой = "", "", "; " + МестоРожденияСтрокой);
	СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд_1 = "";
	СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд, 80,
								СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд_1, СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд_2);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд",   СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд_1",
									СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд_1);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд_2",
									СведенияОЗаявителе_ДатПадеж_ДатаРожденияМестоРожд_2);
	
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеМестоРожд",   СведенияОЗаявителеМестоРожд);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеМестоРожд_1", СведенияОЗаявителеМестоРожд_1);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеМестоРожд_2", СведенияОЗаявителеМестоРожд_2);
	
	ТекДата = Формат(_Дата, "ДФ=dd|MMMM|yyyy");
	
	СведенияПоПроживающему.Вставить("ТекДень",  Формат(_Дата, "ДФ=dd"));
	СведенияПоПроживающему.Вставить("ТекМесяц", ПолучитьМесяц(_Дата));
	СведенияПоПроживающему.Вставить("ТекГод",   Формат(_Дата, "ДФ=yy"));
	СведенияПоПроживающему.Вставить("ТекГод4",  Формат(_Дата, "ДФ=yyyy"));
	
	// откуда прибыл
	МестоПрибытия = ПолучитьСокрАдрес(_Проживающий, Перечисления.КВП_ВидыАдресов.Прибытие, "Приб", _Дата);
	
	// место регистрации
	МестоРегистрации = 
		ПолучитьСокрАдрес(_Проживающий.Владелец.Адрес.Владелец, Перечисления.КВП_ВидыАдресов.Здание, "Рег");
	МестоРегистрации.Вставить("КвартираРег", "" + _Проживающий.Владелец.Адрес.Код + _Проживающий.Владелец.Адрес.Суффикс);
	ПредставлениеРег = МестоРегистрации.ПредставлениеРег;
	
	Если НЕ _Проживающий.Владелец.Адрес.ВидПомещения.ТипПомещения = Перечисления.КВП_ТипыПомещений.Дом Тогда
	
		ПредставлениеРег = ?(ПредставлениеРег = "", "" ,ПредставлениеРег + ", кв." + МестоРегистрации.КвартираРег);
		
	КонецЕсли;
	
	МестоРегистрации.Вставить("ПредставлениеРег", ПредставлениеРег);
	ПредставлениеРег_1 = "";
	ПредставлениеРег_2 = "";
	РазделитьТекстНаДвеСтроки(МестоРегистрации.ПредставлениеРег, 80, ПредставлениеРег_1, ПредставлениеРег_2);
	СведенияПоПроживающему.Вставить("ПредставлениеРег_1", ПредставлениеРег_1);
	СведенияПоПроживающему.Вставить("ПредставлениеРег_2", ПредставлениеРег_2);
	
	// получение документа, удостоверяющего личность
	ПаспортныеДанные = ПолучитьПаспортныеДанныеПроживающего(_Проживающий, _Дата);
	
	// получение сведений о гражданстве.
	Гражданство = "";
	СведОГражданстве = РегистрыСведений.ГражданствоФизическихЛиц.СрезПоследних(_Дата,
																				Новый Структура("ФизическоеЛицо", _Проживающий.ФизЛицо));
	Если СведОГражданстве.Количество() > 0 Тогда
		
		Гражданство = СведОГражданстве[0].Страна;
		
	КонецЕсли;
	
	// формирование списка детей.
	СписокДетей = ПолучитьСписокДетейПроживающего(_Проживающий, _Дата);
	
	СведенияПоПроживающему.Вставить("МестоРождения", МестоРожденияСтрокой);
	
	Для Каждого Параметр Из МестоРожденияСтруктура Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ+"Рожд", Параметр.Значение);
		
	КонецЦикла;
	
	Для Каждого Параметр Из МестоПрибытия Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Для Каждого Параметр Из МестоРегистрации Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Для Каждого Параметр Из ПаспортныеДанные Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	// Формирование данных о воинском учете.
	ДанныеВоинскогоУчета = УПЖКХ_УчетЖильцов.ПолучитьДанныеВоинскогоУчетаФизическогоЛица(_Проживающий.ФизЛицо, _Дата);
	
	Если Не ДанныеВоинскогоУчета = Неопределено Тогда
		Для Каждого Параметр Из ДанныеВоинскогоУчета Цикл
			СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	СведенияПоПроживающему.Вставить("СписокДетей", СписокДетей);
	СведенияПоПроживающему.Вставить("Гражданство", Гражданство);
	
	// Раскладываем дату периода регистрации
	
	сПериодРег = СведенияПоПроживающему.ПериодРег;
	ПериодРег  = 
		?(ЗначениеЗаполнено(Прав(сПериодРег, 4)), Дата(Прав(сПериодРег, 4), Сред(сПериодРег, 4, 2), Лев(сПериодРег, 2)), "");
	
	СведенияПоПроживающему.Вставить("ПериодРегДень",  Формат(ПериодРег, "ДФ=dd"));
	СведенияПоПроживающему.Вставить("ПериодРегМесяц", ПолучитьМесяц(ПериодРег));
	СведенияПоПроживающему.Вставить("ПериодРегГод",   Формат(ПериодРег, "ДФ=yy"));
	
	// Раскладываем дату периода прибытия
	сПериодПриб = СведенияПоПроживающему.ПериодПриб;
	ПериодПриб  = ?(ЗначениеЗаполнено(Прав(сПериодПриб, 4)), Дата(Прав(сПериодПриб, 4), Сред(сПериодПриб, 4, 2), Лев(сПериодПриб, 2)), "");
	
	СведенияПоПроживающему.Вставить("ПериодПрибДень",  Формат(ПериодПриб, "ДФ=dd"));
	СведенияПоПроживающему.Вставить("ПериодПрибМесяц", ПолучитьМесяц(ПериодПриб));
	СведенияПоПроживающему.Вставить("ПериодПрибГод",   Формат(ПериодПриб, "ДФ=yy"));
	
	// Раскладываем дату выдачи документа
	СведенияПоПроживающему.Вставить("ДатаВыдачиДень",  Лев(СведенияПоПроживающему.ДатаВыдачиДокументаДатой, 2));
	СведенияПоПроживающему.Вставить("ДатаВыдачиМесяц", ПолучитьМесяц(?(Не СведенияПоПроживающему.ДатаВыдачиДокументаДатой = "", СведенияПоПроживающему.ДатаВыдачиДокументаДатой, Дата('00010101'))));
	СведенияПоПроживающему.Вставить("ДатаВыдачиГод",   СтрЗаменить(?(СведенияПоПроживающему.ДатаВыдачиДокументаДатой = "", СведенияПоПроживающему.ДатаВыдачиДокументаДатой, Год(СведенияПоПроживающему.ДатаВыдачиДокументаДатой)),Символы.НПП,""));
	
	ВыданДокумент_1 = "";
	ВыданДокумент_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияПоПроживающему.ВыданДокумент, 40, ВыданДокумент_1, ВыданДокумент_2);
	
	СведенияПоПроживающему.Вставить("ВыданДокумент_1", ВыданДокумент_1);
	СведенияПоПроживающему.Вставить("ВыданДокумент_2", ВыданДокумент_2);
	
	СведенияПоПроживающему.Вставить("ОВД", _Проживающий.Владелец.Адрес.Владелец.ОВД);
	ОВД_1 = "";
	ОВД_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияПоПроживающему.ОВД, 40, ОВД_1, ОВД_2);
	СведенияПоПроживающему.Вставить("ОВД_1", ОВД_1);
	СведенияПоПроживающему.Вставить("ОВД_2", ОВД_2);
	
	// получение органа регистрационного учета
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	СведенияПоПроживающему.Вставить("ОрганУчета", мНастройкиУчетнойПолитикиТСЖ.ОрганРегистрационногоУчета);
	ОрганУчета_1 = "";
	ОрганУчета_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияПоПроживающему.ОрганУчета, 30, ОрганУчета_1, ОрганУчета_2);
	СведенияПоПроживающему.Вставить("ОрганУчета_1", ОрганУчета_1);
	СведенияПоПроживающему.Вставить("ОрганУчета_2", ОрганУчета_2);
	
	// Ответственное лицо паспортного стола и его должность.
	Паспортист           = "";
	ДолжностьПаспортиста = "Оператор паспортного стола";
	
	Если ТипЗнч(мНастройкиУчетнойПолитикиТСЖ.ОтветственноеЛицоПаспортногоСтола) = Тип("ПеречислениеСсылка.ОтветственныеЛицаОрганизаций") Тогда
		
		Если ЗначениеЗаполнено(мНастройкиУчетнойПолитикиТСЖ.ОтветственноеЛицоПаспортногоСтола) Тогда
			
			ЗапросРуководители = Новый Запрос;
			ЗапросРуководители.Текст = 
			"ВЫБРАТЬ
			|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование КАК НаименованиеФизЛица,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
			|			&Дата,
			|			ОтветственноеЛицо = &ОтветственноеЛицо
			|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
			
			ЗапросРуководители.УстановитьПараметр("Дата",              Дата);
			ЗапросРуководители.УстановитьПараметр("Организация",       Организация);
			ЗапросРуководители.УстановитьПараметр("ОтветственноеЛицо",
						Перечисления.ОтветственныеЛицаОрганизаций[
							Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления[
								Перечисления.ОтветственныеЛицаОрганизаций.Индекс(
									мНастройкиУчетнойПолитикиТСЖ.ОтветственноеЛицоПаспортногоСтола)].Имя]);
			
			Руководители = ЗапросРуководители.Выполнить().Выгрузить();
			
			Если Руководители.Количество() > 0 Тогда
				Руководители         = Руководители.Получить(0);
				ДолжностьПаспортиста = СокрЛП(Руководители.Должность);
				Паспортист           = УПЖКХ_ТиповыеМетодыСервер.ФамилияИнициалыФизЛица(СокрЛП(Руководители.НаименованиеФизЛица));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(мНастройкиУчетнойПолитикиТСЖ.ОтветственноеЛицоПаспортногоСтола) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Если ЗначениеЗаполнено(мНастройкиУчетнойПолитикиТСЖ.ОтветственноеЛицоПаспортногоСтола) Тогда
			
			ОтветственноеЛицоПаспортногоСтола = УПЖКХ_ТиповыеМетодыВызовСервера.ДанныеФизЛица(Организация, мНастройкиУчетнойПолитикиТСЖ.ОтветственноеЛицоПаспортногоСтола.ФизическоеЛицо, _Дата);
			
			Если ЗначениеЗаполнено(ОтветственноеЛицоПаспортногоСтола.Должность) Тогда
				ДолжностьПаспортиста = ОтветственноеЛицоПаспортногоСтола.Должность;
			КонецЕсли;
			
			Паспортист = УПЖКХ_ТиповыеМетодыСервер.ФамилияИнициалыФизЛица(мНастройкиУчетнойПолитикиТСЖ.ОтветственноеЛицоПаспортногоСтола.ФизическоеЛицо.Наименование);
			
		КонецЕсли;
		
	Иначе
		
		// Роль паспартиста отводим текущему пользователю (если ему соответствует какое-либо физ.лицо).
		ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
		Если Не ТекПользователь.Пустая() И Не ТекПользователь.ФизическоеЛицо.Пустая() Тогда
			Паспортист = УПЖКХ_ТиповыеМетодыСервер.ФамилияИнициалыФизЛица(ТекПользователь.ФизическоеЛицо.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияПоПроживающему.Вставить("ДолжностьПаспортиста", ДолжностьПаспортиста);
	СведенияПоПроживающему.Вставить("Паспортист",           Паспортист);
	
	СписокСокращений = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСписокСокращений();
	СведенияПоПроживающему.УлицаРег = УПЖКХ_ОбщегоНазначенияСервер.УдалитьСокращение(СведенияПоПроживающему.УлицаРег, СписокСокращений);
	
	// Добавляем телефон жильца.
	ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(_Проживающий);
	СведенияПоПроживающему.Вставить("Телефон", ?(ТаблицаТелефоновЖильцов.Количество() = 0, "", ТаблицаТелефоновЖильцов[0].СписокТелефонов));
	
	// Для форм "Ф6", "Ф6р", "Ф6с" формируем параметр с местом проживания и телефоном жильца.
	МестоРождения_Телефон = "";
	Если Не ПустаяСтрока(СведенияПоПроживающему.МестоРождения) И Не ПустаяСтрока(СведенияПоПроживающему.Телефон) Тогда
		МестоРождения_Телефон = СведенияПоПроживающему.МестоРождения + ", "+ СведенияПоПроживающему.Телефон;
	ИначеЕсли Не ПустаяСтрока(СведенияПоПроживающему.МестоРождения) Тогда
		МестоРождения_Телефон = СведенияПоПроживающему.МестоРождения;
	ИначеЕсли Не ПустаяСтрока(СведенияПоПроживающему.Телефон) Тогда
		МестоРождения_Телефон = СведенияПоПроживающему.Телефон;
	КонецЕсли;
	СведенияПоПроживающему.Вставить("МестоРождения_Телефон", МестоРождения_Телефон);
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьОбщиеСведенияПоПроживающему()

// Собирает данные по проживающему для занесения в форму №1 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф1(_Проживающий, Собственник, _ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	Если Не ПустаяСтрока(СведенияПоПроживающему.ГородРег) Тогда

		НаселенныйПункт = СведенияПоПроживающему.ГородРег;
		НаселенныйПункт = НаселенныйПункт + ?(ПустаяСтрока(СведенияПоПроживающему.НаселенныйПунктРег),
												"", ", "+ СведенияПоПроживающему.НаселенныйПунктРег);
		
	КонецЕсли;
	
	НаселенныйПункт = ?(ПустаяСтрока(НаселенныйПункт), СведенияПоПроживающему.РегионРег, НаселенныйПункт);
	
	СведенияПоПроживающему.Вставить("НаселенныйПунктРег", НаселенныйПункт);
	
	Если ЗначениеЗаполнено(_ДопПараметрыПечати) И ТипЗнч(_ДопПараметрыПечати) = Тип("Структура") Тогда
		
		ДатаНачалаРегистрации = Формат(_ДопПараметрыПечати.ДатаНачалаРегистрации, "ДФ=dd|MMMM|yyyy");
		
		СведенияПоПроживающему.Вставить("НачалоРегДень",   Лев(ДатаНачалаРегистрации, 2));
		СведенияПоПроживающему.Вставить("НачалоРегМесяц",  Сред(ДатаНачалаРегистрации, 4, СтрДлина(ДатаНачалаРегистрации)-5-3));
		СведенияПоПроживающему.Вставить("НачалоРегГод",    Прав(ДатаНачалаРегистрации, 2));
		
		ДатаОкончанияРегистрации = Формат(_ДопПараметрыПечати.ДатаОкончанияРегистрации, "ДФ=dd|MMMM|yyyy");
		
		СведенияПоПроживающему.Вставить("ОкончаниеРегДень",  Лев(ДатаОкончанияРегистрации, 2));
		СведенияПоПроживающему.Вставить("ОкончаниеРегМесяц", Сред(ДатаОкончанияРегистрации, 4, СтрДлина(ДатаОкончанияРегистрации)-5-3));
		СведенияПоПроживающему.Вставить("ОкончаниеРегГод",   Прав(ДатаОкончанияРегистрации, 2));
		
	КонецЕсли;
	
	Если Не Собственник = Неопределено И Не Собственник.Пустая() Тогда
		
		СведенияПоВладельцу = СобратьОбщиеСведенияПоПроживающему(Собственник, Дата);
		СведенияПоПроживающему.Вставить("СведенияОВладельце",      СведенияПоВладельцу.СведенияОЗаявителе);
		СведенияПоПроживающему.Вставить("ВладелецСокрВидДок",      СведенияПоВладельцу.СокрВидДок);
		СведенияПоПроживающему.Вставить("ВладелецСерияДокумента",  СведенияПоВладельцу.СерияДокумента);
		СведенияПоПроживающему.Вставить("ВладелецНомерДокумента",  СведенияПоВладельцу.НомерДокумента);
		СведенияПоПроживающему.Вставить("ВладелецВыданДокумент",   СведенияПоВладельцу.ВыданДокумент);
		СведенияПоПроживающему.Вставить("ВладелецКодДокумента",    СведенияПоВладельцу.КодДокумента);
		СведенияПоПроживающему.Вставить("ВладелецДатаВыдачиДень",  СведенияПоВладельцу.ДатаВыдачиДень);
		СведенияПоПроживающему.Вставить("ВладелецДатаВыдачиМесяц", СведенияПоВладельцу.ДатаВыдачиМесяц);
		СведенияПоПроживающему.Вставить("ВладелецДатаВыдачиГод",   СведенияПоВладельцу.ДатаВыдачиГод);
		
		СведенияОСобственнике = СобратьСведенияОСобственнике(Собственник, СведенияПоВладельцу.СведенияОЗаявителе_ТворПадеж);
		
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ТворПадеж_1", СведенияОСобственнике.СведенияОВладельце_ТворПадеж_1);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ТворПадеж_2", СведенияОСобственнике.СведенияОВладельце_ТворПадеж_2);
		
	КонецЕсли;
	
	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_Ф1()

// Собирает данные по прибывающему для занесения в форму №2 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф2(_Проживающий,_ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	// получение места прибытия
	МестоПрибытия = ПолучитьСокрАдрес(_Проживающий, Перечисления.КВП_ВидыАдресов.Прибытие, "Приб", Дата);
	МестоПрибытияТГ = Новый Структура();
	
	Если МестоПрибытия.СтранаПриб   = СведенияПоПроживающему.СтранаРег
	   И МестоПрибытия.РегионПриб   = СведенияПоПроживающему.РегионРег
	   И МестоПрибытия.РайонПриб    = СведенияПоПроживающему.РайонРег
	   И МестоПрибытия.ГородПриб    = СведенияПоПроживающему.ГородРег
	   И МестоПрибытия.НаселенныйПунктПриб = СведенияПоПроживающему.НаселенныйПунктРег Тогда

		
		СведенияПоПроживающему.Удалить("ПериодПриб");
		СведенияПоПроживающему.Удалить("СтранаПриб");
		СведенияПоПроживающему.Удалить("РегионПриб");
		СведенияПоПроживающему.Удалить("РайонПриб");
		СведенияПоПроживающему.Удалить("ГородПриб");
		СведенияПоПроживающему.Удалить("НаселенныйПунктПриб");
		СведенияПоПроживающему.Удалить("АдмОкругПриб");
		СведенияПоПроживающему.Удалить("УлицаПриб");
		СведенияПоПроживающему.Удалить("ДомПриб");
		СведенияПоПроживающему.Удалить("КорпусПриб");
		СведенияПоПроживающему.Удалить("НомерДомаПриб");
		СведенияПоПроживающему.Удалить("КвартираПриб");
		СведенияПоПроживающему.Удалить("ИндексПриб");
		СведенияПоПроживающему.Удалить("ОВДПриб");
		СведенияПоПроживающему.Удалить("ПредставлениеПриб");
		СведенияПоПроживающему.Удалить("КомментарийПриб");
		СведенияПоПроживающему.Удалить("СтроительныйПриб");

		МестоПрибытияТГ.Вставить("УлицаПрибТГ",    МестоПрибытия.УлицаПриб);
		МестоПрибытияТГ.Вставить("ДомПрибТГ",      МестоПрибытия.ДомПриб);
		МестоПрибытияТГ.Вставить("КорпусПрибТГ",   МестоПрибытия.КорпусПриб);
		МестоПрибытияТГ.Вставить("КвартираПрибТГ", МестоПрибытия.КвартираПриб);
		
		МестоПрибытия.Очистить();
		
	КонецЕсли;
	
	Для Каждого Параметр Из МестоПрибытия Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Для Каждого Параметр Из МестоПрибытияТГ Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	// добавление доп. параметров
	
	// получение периода регистрации по месту пребывания
	Выборка = ПолучитьПериодыРегистрации_Ф2(_Проживающий);
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ДатаРегистрации) Тогда
			
			ДатаРегистрации = Формат(Выборка.ДатаРегистрации, "ДФ=dd|MMMM|yyyy");
			
			СведенияПоПроживающему.Вставить("ДатаПостановкиРегистрации", Формат(Выборка.ДатаРегистрации, "ДЛФ=ДД"));
			СведенияПоПроживающему.Вставить("НачалоРегДень",             Лев(ДатаРегистрации, 2));
			СведенияПоПроживающему.Вставить("НачалоРегМесяц",            Сред(ДатаРегистрации, 4, СтрДлина(ДатаРегистрации)-5-3));
			СведенияПоПроживающему.Вставить("НачалоРегГод",              Прав(ДатаРегистрации, 2));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаСнятияСРегистрации) Тогда
			
			ДатаВыбытия = Формат(УПЖКХ_УчетЖильцов.ПолучитьДатуВыбытия(Выборка.ДатаСнятияСРегистрации), "ДФ=dd|MMMM|yyyy");
			
			СведенияПоПроживающему.Вставить("ДатаСнятияСРегистрации", Формат(УПЖКХ_УчетЖильцов.ПолучитьДатуВыбытия(Выборка.ДатаСнятияСРегистрации), "ДЛФ=ДД"));
			СведенияПоПроживающему.Вставить("ОкончаниеРегДень",       Лев(ДатаВыбытия, 2));
			СведенияПоПроживающему.Вставить("ОкончаниеРегМесяц",      Сред(ДатаВыбытия, 4, СтрДлина(ДатаВыбытия)-5-3));
			СведенияПоПроживающему.Вставить("ОкончаниеРегГод",        Прав(ДатаВыбытия, 2));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// получение данных об изменении ФИО
	ПолучитьДанныеОбИзмененияхФИО(СведенияПоПроживающему, _Проживающий.ФизЛицо);
	
	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_Ф2()

// Собирает данные по проживающему для занесения в форму №3 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф3(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	Если ЗначениеЗаполнено(_ДопПараметрыПечати) И ТипЗнч(_ДопПараметрыПечати) = Тип("Структура") Тогда
		
		СведенияПоПроживающему.Вставить("НомерСвидетельства", _ДопПараметрыПечати.НомерСвидетельства);
		
	КонецЕсли;
	
	// получение периода регистрации по месту пребывания
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", _Проживающий);
	Запрос.УстановитьПараметр("Дата",   НачалоДня(Дата));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК Период,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Объект
	|ПОМЕСТИТЬ втРегистрация
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			Жилец = &Объект
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец КАК Объект,
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения КАК Период
	|ПОМЕСТИТЬ втСнятиеСРегистрации
	|ИЗ
	|	втРегистрация КАК втРегистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|		ПО втРегистрация.Объект = УПЖКХ_СведенияОЗарегистрированных.Жилец
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения >= &Дата
	|	И УПЖКХ_СведенияОЗарегистрированных.Жилец = &Объект
	|	И (НЕ УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРегистрация.Период КАК ДатаРегистрации,
	|	втСнятиеСРегистрации.Период КАК ДатаСнятияСРегистрации
	|ИЗ
	|	втРегистрация КАК втРегистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСнятиеСРегистрации КАК втСнятиеСРегистрации
	|		ПО втРегистрация.Объект = втСнятиеСРегистрации.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ДатаРегистрации) Тогда
			
			ДатаРегистрации = Формат(Выборка.ДатаРегистрации, "ДФ=dd|MMMM|yyyy");
			
			СведенияПоПроживающему.Вставить("НачалоРегДень",  Лев(ДатаРегистрации, 2));
			СведенияПоПроживающему.Вставить("НачалоРегМесяц", Сред(ДатаРегистрации, 4, СтрДлина(ДатаРегистрации)-5-3));
			СведенияПоПроживающему.Вставить("НачалоРегГод",   Прав(ДатаРегистрации, 2));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаСнятияСРегистрации) Тогда
			
			ДатаВыбытия = Формат(УПЖКХ_УчетЖильцов.ПолучитьДатуВыбытия(Выборка.ДатаСнятияСРегистрации), "ДФ=dd|MMMM|yyyy");
			
			СведенияПоПроживающему.Вставить("ОкончаниеРегДень",  Лев(ДатаВыбытия, 2));
			СведенияПоПроживающему.Вставить("ОкончаниеРегМесяц", Сред(ДатаВыбытия, 4, СтрДлина(ДатаВыбытия)-5-3));
			СведенияПоПроживающему.Вставить("ОкончаниеРегГод",   Прав(ДатаВыбытия, 2));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_Ф3()

// Собирает данные по проживающему для занесения в форму Ф3_МСК отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф3_МСК(_Проживающий,_ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	СведенияПоПроживающему.Вставить("ДеньПо",  Формат(ДатаОкончанияПериода, "ДФ=dd"));
	СведенияПоПроживающему.Вставить("МесяцПо", ПолучитьМесяц(ДатаОкончанияПериода));
	СведенияПоПроживающему.Вставить("ГодПо",   Формат(ДатаОкончанияПериода, "ДФ=yy"));
	
	// формирование списка зарегистрированных по месту жительства в связи с рождением
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Наименование,
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	УПЖКХ_Жильцы.Владелец,
	|	УПЖКХ_Жильцы.Ссылка
	|ПОМЕСТИТЬ врТаблицаЖильцов
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Владелец = &ЛицевойСчет
	|	И УПЖКХ_Жильцы.ФизЛицо.ДатаРождения > &ДатаНачалаПериода
	|;
	|/////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Наименование КАК ФИО,
	|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	УПЖКХ_Жильцы.ФизЛицо.МестоРождения КАК МестоРождения,
	|	УПЖКХ_Жильцы.ФизЛицо.Пол КАК Пол,
	|	ГражданствоФизическихЛицСрезПоследних.Страна КАК Гражданство
	|ИЗ
	|	врТаблицаЖильцов КАК УПЖКХ_Жильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				,
	|				Жилец В (ВЫБРАТЬ врТаблица.Ссылка ИЗ врТаблицаЖильцов КАК врТаблица)
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &ДатаОкончанияПериода) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО (УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец = УПЖКХ_Жильцы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета.СрезПервых(
	|				,
	|				Объект = &Помещение
	|				И ЛицевойСчет = &ЛицевойСчет) КАК КВП_ЛицевыеСчетаСрезПервых
	|		ПО КВП_ЛицевыеСчетаСрезПервых.ЛицевойСчет = УПЖКХ_Жильцы.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(
	|				&ДатаОкончанияПериода,
	|				ФизическоеЛицо В (ВЫБРАТЬ врТаблица.ФизЛицо ИЗ врТаблицаЖильцов КАК врТаблица))
	|			КАК ГражданствоФизическихЛицСрезПоследних
	|		ПО УПЖКХ_Жильцы.ФизЛицо = ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|	И УПЖКХ_Жильцы.ДатаРождения > КВП_ЛицевыеСчетаСрезПервых.Период
	|УПОРЯДОЧИТЬ ПО 
	|	ФИО";
	
	Запрос.УстановитьПараметр("ДатаНачалаПериода",    Дата);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("ЛицевойСчет",         _Проживающий.Владелец);
	Запрос.УстановитьПараметр("Помещение",           _Проживающий.Владелец.Адрес);
	
	СписокЗарегистрированныхРожденных = Запрос.Выполнить().Выгрузить();
	СписокЗарегистрированныхРожденных.Колонки.Добавить("ДатаРожденияСтрока");
	СписокЗарегистрированныхРожденных.Колонки.Добавить("ПредставлениеРег");
	
	Для Каждого ТекПроживающий Из СписокЗарегистрированныхРожденных Цикл
		ТекПроживающий.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ТекПроживающий.МестоРождения);
		ТекПроживающий.ДатаРожденияСтрока = Формат(ТекПроживающий.ДатаРождения, "ДФ=dd.MM.yyyy");
		ТекПроживающий.ПредставлениеРег = СведенияПоПроживающему.ПредставлениеРег;
	КонецЦикла;
	
	СведенияПоПроживающему.Вставить("СписокЗарегистрированныхРожденных", СписокЗарегистрированныхРожденных);
	
	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_Ф3_МСК()

// Собирает данные по проживающему для занесения в форму №5 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф5(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_Ф5()

// Собирает данные по проживающему для занесения в форму №6 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф6(_Проживающий, Собственник = Неопределено, _ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	АдресПрибытия_1_1 = "";
	АдресПрибытия_1_2 = "";
	АдресПрибытия_2_1 = "";
	АдресПрибытия_2_2 = "";
	АдресПрибытия_3_1 = "";
	АдресПрибытия_3_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияПоПроживающему.ПредставлениеПриб, 90,  АдресПрибытия_1_1, АдресПрибытия_1_2);
	РазделитьТекстНаДвеСтроки(СведенияПоПроживающему.ПредставлениеПриб, 20, АдресПрибытия_2_1, АдресПрибытия_2_2);
	РазделитьТекстНаДвеСтроки(СведенияПоПроживающему.ПредставлениеПриб, 60, АдресПрибытия_3_1, АдресПрибытия_3_2);
	
	АдресРегистрации_1 = "";
	АдресРегистрации_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияПоПроживающему.ПредставлениеРег, 30, АдресРегистрации_1, АдресРегистрации_2);
	
	СведенияПоПроживающему.Вставить("АдресПрибытия_1",    СведенияПоПроживающему.ПредставлениеПриб);
	СведенияПоПроживающему.Вставить("АдресПрибытия_1_1",  АдресПрибытия_1_1);
	СведенияПоПроживающему.Вставить("АдресПрибытия_1_2",  АдресПрибытия_1_2);
	СведенияПоПроживающему.Вставить("АдресПрибытия_2_1",  АдресПрибытия_2_1);
	СведенияПоПроживающему.Вставить("АдресПрибытия_2_2",  АдресПрибытия_2_2);
	СведенияПоПроживающему.Вставить("АдресПрибытия_3_1",  АдресПрибытия_3_1);
	СведенияПоПроживающему.Вставить("АдресПрибытия_3_2",  АдресПрибытия_3_2);
	СведенияПоПроживающему.Вставить("АдресРегистрации_1", АдресРегистрации_1);
	СведенияПоПроживающему.Вставить("АдресРегистрации_2", АдресРегистрации_2);
	
	Если Не ПустаяСтрока(СведенияПоПроживающему.ГородРег) Тогда

		НаселенныйПункт = СведенияПоПроживающему.ГородРег;
		НаселенныйПункт = НаселенныйПункт + ?(ПустаяСтрока(СведенияПоПроживающему.НаселенныйПунктРег), "", ", "
						  + СведенияПоПроживающему.НаселенныйПунктРег);
		СведенияПоПроживающему.Вставить("НаселенныйПунктРег", НаселенныйПункт);
		
	КонецЕсли;
	
	Если Не Собственник = Неопределено И Не Собственник.Пустая() Тогда
		
		СведенияПоВладельцу = СобратьОбщиеСведенияПоПроживающему(Собственник, Дата);
		
		СведенияПоПроживающему.Вставить("СведенияОВладельце",                 СведенияПоВладельцу.СведенияОЗаявителе);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_1",               СведенияПоВладельцу.СведенияОЗаявителе_1);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_2",               СведенияПоВладельцу.СведенияОЗаявителе_2);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_СокрВидДок",      СведенияПоВладельцу.СокрВидДок);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_СерияДокумента",  СведенияПоВладельцу.СерияДокумента);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_НомерДокумента",  СведенияПоВладельцу.НомерДокумента);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ВыданДокумент",   СведенияПоВладельцу.ВыданДокумент);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_КодДокумента",    СведенияПоВладельцу.КодДокумента);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ДатаВыдачиДень",  СведенияПоВладельцу.ДатаВыдачиДень);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ДатаВыдачиМесяц", СведенияПоВладельцу.ДатаВыдачиМесяц);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ДатаВыдачиГод",   ?(СведенияПоВладельцу.ДатаВыдачиДокументаДатой = "", СведенияПоВладельцу.ДатаВыдачиДокументаДатой, Год(СведенияПоВладельцу.ДатаВыдачиДокументаДатой)));
		
		СведенияОСобственнике = СобратьСведенияОСобственнике(Собственник, СведенияПоВладельцу.СведенияОЗаявителе_ТворПадеж);
		
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ТворПадеж",       СведенияОСобственнике.СведенияОВладельце_ТворПадеж);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ТворПадеж_1",     СведенияОСобственнике.СведенияОВладельце_ТворПадеж_1);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ТворПадеж_2",     СведенияОСобственнике.СведенияОВладельце_ТворПадеж_2);
		СведенияПоПроживающему.Вставить("ДокументРегистрацииСобственности",   СведенияОСобственнике.ДокументРегистрацииСобственности);
		СведенияПоПроживающему.Вставить("ДокументРегистрацииСобственности_1", СведенияОСобственнике.ДокументРегистрацииСобственности_1);
		СведенияПоПроживающему.Вставить("ДокументРегистрацииСобственности_2", СведенияОСобственнике.ДокументРегистрацииСобственности_2);
		
	КонецЕсли;
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_Ф6()

// Собирает данные по проживающему для занесения в форму №6_Р отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф6_Р(_Проживающий, Собственник, _ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьСведенияПоПроживающему_Ф6(_Проживающий, Собственник, Дата);

	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_Ф6_Р()

// Собирает данные по проживающему для занесения в форму №6_С отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф6_С(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьСведенияПоПроживающему_Ф6(_Проживающий, ,Дата);

	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_Ф6_С()

// Собирает данные по убывающему для занесения в форму №7 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф7(_Проживающий,_ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	// получение места прибытия
	МестоПрибытия = 
		ПолучитьАдрес(_Проживающий, Перечисления.КВП_ВидыАдресов.Прибытие, "Приб", , , Дата);
	
	// получение места выбытия
	МестоВыбытия = 
		ПолучитьАдрес(_Проживающий, Перечисления.КВП_ВидыАдресов.Выбытие, "Выб", , , Дата);
	
	МестоВыбытияТГ = Новый Структура();

	Если МестоВыбытия.СтранаВыб   = СведенияПоПроживающему.СтранаРег
	   И МестоВыбытия.РегионВыб   = СведенияПоПроживающему.РегионРег
	   И МестоВыбытия.РайонВыб    = СведенияПоПроживающему.РайонРег
	   И МестоВыбытия.ГородВыб    = СведенияПоПроживающему.ГородРег
	   И МестоВыбытия.НаселенныйПунктВыб = СведенияПоПроживающему.НаселенныйПунктРег Тогда
		
		СведенияПоПроживающему.Удалить("ПериодВыб");
		СведенияПоПроживающему.Удалить("СтранаВыб");
		СведенияПоПроживающему.Удалить("РегионВыб");
		СведенияПоПроживающему.Удалить("РайонВыб");
		СведенияПоПроживающему.Удалить("ГородВыб");
		СведенияПоПроживающему.Удалить("НаселенныйПунктВыб");
		СведенияПоПроживающему.Удалить("АдмОкругВыб");
		СведенияПоПроживающему.Удалить("УлицаВыб");
		СведенияПоПроживающему.Удалить("ДомВыб");
		СведенияПоПроживающему.Удалить("КорпусВыб");
		СведенияПоПроживающему.Удалить("НомерДомаВыб");
		СведенияПоПроживающему.Удалить("КвартираВыб");
		СведенияПоПроживающему.Удалить("ИндексВыб");
		СведенияПоПроживающему.Удалить("ОВДВыб");
		СведенияПоПроживающему.Удалить("ПредставлениеВыб");
		СведенияПоПроживающему.Удалить("КомментарийВыб");
		СведенияПоПроживающему.Удалить("СтроительныйВыб");
		
		МестоВыбытияТГ.Вставить("УлицаВыбТГ",    МестоВыбытия.УлицаВыб);
		МестоВыбытияТГ.Вставить("ДомВыбТГ",      МестоВыбытия.ДомВыб);
		МестоВыбытияТГ.Вставить("КорпусВыбТГ",   МестоВыбытия.КорпусВыб);
		МестоВыбытияТГ.Вставить("КвартираВыбТГ", МестоВыбытия.КвартираВыб);
		
		МестоВыбытия.Очистить();
		
	КонецЕсли;

	Для Каждого Параметр Из МестоПрибытия Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Для Каждого Параметр Из МестоВыбытия Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Для Каждого Параметр Из МестоВыбытияТГ Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ДополнитьДаннымиОДатеРегистрации(_Проживающий, Дата, СведенияПоПроживающему);
	
	ПолучитьДанныеОбИзмененияхФИО(СведенияПоПроживающему, _Проживающий.ФизЛицо, "Ф7");

	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_Ф7()

 // Собирает данные по проживающему для занесения в форму №8 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф8(_Проживающий,_ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	Если ЗначениеЗаполнено(_ДопПараметрыПечати) И ТипЗнч(_ДопПараметрыПечати) = Тип("Структура") Тогда
		
		СведенияПоПроживающему.Вставить("НомерСвидетельства", _ДопПараметрыПечати.НомерСвидетельства);
		
	КонецЕсли;
	
	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_Ф8()

// Собирает данные по проживающему для занесения в форму №9 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф9(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	// получение списка документов
	СписокДокументов = ПолучитьСписокДокументовПроживающего(_Проживающий, Дата);
	
	СписокДокументов.Колонки.Добавить("СокрВидДок");
	СписокДокументов.Колонки.Добавить("ДокументКемВыданДата");
	
	Для Каждого Строка Из СписокДокументов Цикл
		
		Строка.СокрВидДок = СтрЗаменить(Строка.ДокументВид.Наименование,"гражданина Российской Федерации","РФ");
		
		Если Не ПустаяСтрока(Строка.СокрВидДок) Тогда
			
			Шаблон = "%1, код подраделения %2, дата выдачи %3";
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(?(ПустаяСтрока(Строка.ДокументКемВыдан),         """                                        """, Строка.ДокументКемВыдан));
			МассивПараметров.Добавить(?(ПустаяСтрока(Строка.ДокументКодПодразделения), "   -   ", Строка.ДокументКодПодразделения));
			
			Если ТипЗнч(Строка.ДокументДатаВыдачи) = Тип("Дата") Тогда
				
				МассивПараметров.Добавить(Формат(Строка.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy"));
				
			Иначе
				
				МассивПараметров.Добавить(?(ПустаяСтрока(Строка.ДокументДатаВыдачи), "  .  .    ", Лев(Строка.ДокументДатаВыдачи, 10)));
				
			КонецЕсли;
			
			Строка.ДокументКемВыданДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(Шаблон, МассивПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СведенияПоПроживающему.Вставить("СписокДокументов", СписокДокументов);
	СведенияПоПроживающему.Вставить("СписокОтметокРУ");
	
	Если Не ПустаяСтрока(СведенияПоПроживающему.ГородРег) Тогда
	
		НаселенныйПункт = СведенияПоПроживающему.ГородРег;
		НаселенныйПункт = НаселенныйПункт
					+ ?(ПустаяСтрока(СведенияПоПроживающему.НаселенныйПунктРег), "", ", "+ СведенияПоПроживающему.НаселенныйПунктРег);
		СведенияПоПроживающему.Вставить("НаселенныйПунктРег", НаселенныйПункт);
		
	КонецЕсли;
	
	ВоинскийУчет = УПЖКХ_УчетЖильцов.ПолучитьПредставлениеДанныхВоинскогоУчетаФизическогоЛица(_Проживающий.ФизЛицо, "");
	Если Лев(ВоинскийУчет,Найти(ВоинскийУчет,",")-1) = Строка(Перечисления.УПЖКХ_ОтношениеКВоинскойОбязанности.Военнообязанный) Тогда
		СведенияПоПроживающему.Вставить("ВоинскийУчет", ВоинскийУчет);
	КонецЕсли;
	
	// Сбор сведений о регистрации/снятие с регистрации.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Регистрация.ДатаИзменения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Регистрация.ДатаИзменения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА СнятиеРУ.ДатаИзменения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СнятиеРУ.ДатаИзменения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаСнятиеРУ
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ДатаИзменения <= &Дата
	|				И Жилец = &Поживающий
	|				И Зарегистрирован) КАК Регистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				,
	|				ДатаИзменения <= &Дата
	|					И НЕ Зарегистрирован) КАК СнятиеРУ
	|		ПО Регистрация.Жилец = СнятиеРУ.Жилец";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Поживающий", _Проживающий);
	СведенияОРегистрации = Запрос.Выполнить().Выгрузить();
	
	СведенияПоПроживающему.Вставить("СведенияОРегистрации", СведенияОРегистрации);
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_Ф9()

// Собирает данные по проживающему для занесения в форму №10 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф10(_Проживающий,_ДопПараметрыПечати, ТолькоЗарегистрированные = Ложь)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	Если Не ПустаяСтрока(СведенияПоПроживающему.ГородРег) Тогда
		
		НаселенныйПункт = СведенияПоПроживающему.ГородРег;
		НаселенныйПункт = НаселенныйПункт
					+ ?(ПустаяСтрока(СведенияПоПроживающему.НаселенныйПунктРег), "", ", "+ СведенияПоПроживающему.НаселенныйПунктРег);
		СведенияПоПроживающему.Вставить("НаселенныйПунктРег", НаселенныйПункт);
		
	КонецЕсли;
	
	// нахождение проживающего, на которого оформлена квартира
	Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(_Проживающий.Владелец, Дата);
	
	ЖилПлощадь = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(_Проживающий.Владелец.Адрес,
																		Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь, , Дата);
	
	// формирование списка проживающих в данной квартире
	Запрос = Новый Запрос();
	Запрос.Текст =          
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК СвязанноеФизЛицо,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства КАК СтепеньРодства,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства.БлизкоеРодство КАК БлизкоеРодство
	|ПОМЕСТИТЬ Родственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Дата, ) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|		ПО УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_СведенияОЖильцахСрезПоследних.Объект КАК Объект,
	|	ВЫБОР
	|		КОГДА КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(Родственники.БлизкоеРодство, ЛОЖЬ)
	|	КОНЕЦ КАК БлизкоеРодство,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован КАК Зарегистрирован,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|			ТОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения
	|	КОНЕЦ КАК ДатаСнятияРУ,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация.ДатаИзменения КАК ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ &УпрощенныйВариантУчетаСобственников
	|						ТОГДА ВЫБОР
	|								КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|									ТОГДА &ЧастныйСобственник
	|								ИНАЧЕ &МуниципальныйСобственник
	|							КОНЕЦ
	|					ИНАЧЕ &ПрочийСобственник
	|				КОНЕЦ
	|		ИНАЧЕ Родственники.СтепеньРодства
	|	КОНЕЦ КАК СтепеньРодства,
	|	ВЫБОР
	|		КОГДА КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтветственныйСобственникНаниматель,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация.ВременнаяРегистрация
	|			ТОГДА ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихОкончаниеРегистрации.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОкончанияВременнойРегистрации
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	(ВЫБРАТЬ
	|		УПЖКХ_Жильцы.Ссылка КАК Объект,
	|		УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|	ИЗ
	|		Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|	ГДЕ
	|		&Условие) КАК КВП_СведенияОЖильцахСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПО (УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет.Адрес)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Родственники КАК Родственники
	|		ПО КВП_СведенияОЖильцахСрезПоследних.Объект.ФизЛицо = Родственники.СвязанноеФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&Дата, ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|			И КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				&Дата,
	|				ДатаИзменения <= &Дата
	|					И Зарегистрирован) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация
	|		ПО КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация.ЛицевойСчет
	|			И КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				&Дата,
	|				ДатаИзменения > &Дата
	|					И НЕ Зарегистрирован) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихОкончаниеРегистрации
	|		ПО КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихОкончаниеРегистрации.ЛицевойСчет
	|			И КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихОкончаниеРегистрации.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|			И КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИтоговаяТаблица.Объект.Наименование КАК ФИО,
	|	ИтоговаяТаблица.Объект.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	ИтоговаяТаблица.Объект.ФизЛицо.МестоРождения КАК МестоРождения,
	|	ИтоговаяТаблица.ДатаСнятияРУ КАК ДатаСнятияРУ,
	|	ИтоговаяТаблица.ДатаРегистрации КАК ДатаРегистрации,
	|	ИтоговаяТаблица.СтепеньРодства КАК СтепеньРодства,
	|	ИтоговаяТаблица.ОтветственныйСобственникНаниматель КАК ОтветственныйСобственникНаниматель,
	|	ИтоговаяТаблица.ВидСобственности КАК ВидСобственности,
	|	ИтоговаяТаблица.Объект КАК Объект,
	|	ИтоговаяТаблица.Объект.ФизЛицо КАК ФизЛицо,
	|	ИтоговаяТаблица.ДатаОкончанияВременнойРегистрации КАК ДатаОкончанияВременнойРегистрации
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	&ТекстУсловия";
	
	УсловиеЗапроса = "";
	// Устанавливаем вывод родственников. Если в настройка отчета установлено, что будет выводиться по
	// "Жильцам л/с", то поиск будет производиться по лицевому счету. Если установлено, что
	// по "Близким родственникам", то поиск будет производиться по адресу лицевого счета.
	Если ВыводРодственников Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "УПЖКХ_Жильцы.Владелец.Адрес = &Помещение");
		УсловиеЗапроса = "ИтоговаяТаблица.БлизкоеРодство";
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "УПЖКХ_Жильцы.Владелец = &ЛицевойСчет");
	КонецЕсли;
	
	// Устанавливаем условие, чтобы были только зарегистрированные.
	Если ТолькоЗарегистрированные Тогда
		УсловиеЗапроса = ?(ЗначениеЗаполнено(УсловиеЗапроса),
							УсловиеЗапроса + " И ИтоговаяТаблица.Зарегистрирован", "ИтоговаяТаблица.Зарегистрирован");
	КонецЕсли;
	
	УсловиеЗапроса = ?(ЗначениеЗаполнено(УсловиеЗапроса), УсловиеЗапроса, "ИСТИНА");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", УсловиеЗапроса);
	
	Запрос.УстановитьПараметр("Дата",                                КонецДня(Дата));
	Запрос.УстановитьПараметр("ЛицевойСчет",                        _Проживающий.Владелец);
	Запрос.УстановитьПараметр("Помещение",                          _Проживающий.Владелец.Адрес);
	Запрос.УстановитьПараметр("УпрощенныйВариантУчетаСобственников", ИспользуетсяУпрощенныйВариантУчетаСобственников());
	
	мСтруктураПредставленияОтветственногоСобственника = ПолучитьСтруктуруПредставленияОтветственногоСобственника();
	
	Запрос.УстановитьПараметр("ЧастныйСобственник",       мСтруктураПредставленияОтветственногоСобственника.ЧастныйСобственник);
	Запрос.УстановитьПараметр("МуниципальныйСобственник", мСтруктураПредставленияОтветственногоСобственника.МуниципальныйСобственник);
	Запрос.УстановитьПараметр("ПрочийСобственник",        мСтруктураПредставленияОтветственногоСобственника.ПрочийСобственник);
	
	СписокПроживающих = Запрос.Выполнить().Выгрузить();
	
	СписокПроживающих.Колонки.Добавить("Номер");
	
	НомерСтр = 1;
	
	СведенияПоПроживающему.Вставить("Телефон",    _Проживающий.Владелец.Телефон);
	СведенияПоПроживающему.Вставить("ЖилПлощадь", ЖилПлощадь);
	СведенияПоПроживающему.Вставить("Владелец",   Владелец);
	
	Для Каждого ТекПроживающий Из СписокПроживающих Цикл
		ТекПроживающий.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ТекПроживающий.МестоРождения);
		ТекПроживающий.Номер = НомерСтр;
		НомерСтр = НомерСтр + 1;
	КонецЦикла;
	
	СведенияПоПроживающему.Вставить("СписокПроживающих", СписокПроживающих);
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_Ф10()

// Собирает данные по проживающему для занесения в форму №11 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф11(_Проживающий,_ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	// формирование названия населенного пункта - пригорода
	НаселенныйПунктРег = СведенияПоПроживающему.НаселенныйПунктРег;
	
	Если Не ПустаяСтрока(СведенияПоПроживающему.ГородРег) Тогда
		
		НаселенныйПунктРег = СведенияПоПроживающему.ГородРег;
		НаселенныйПунктРег = НаселенныйПунктРег + ?(ПустаяСтрока(СведенияПоПроживающему.НаселенныйПунктРег),
													"", ", "+ СведенияПоПроживающему.НаселенныйПунктРег);
		
	КонецЕсли;

	// формирование списка владельцев жилого помещения
	ЗапросВладельцы = Новый Запрос;
	
	ЗапросВладельцы.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник) КАК КоличествоСобственников
	|ПОМЕСТИТЬ втКоличествоСобственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаКон, Помещение = &Помещение) 
	|		КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК Номер,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = 
	|				ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ВЫБОР
	|					КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = 
	|							ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая)
	|						ТОГДА ВЫБОР
	|								КОГДА НЕ ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель, 0) = 0
	|									ТОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель 
	|											/ УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = 
	|									ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная)
	|								ТОГДА ВЫБОР
	|										КОГДА НЕ ЕСТЬNULL(втКоличествоСобственников.КоличествоСобственников, 0) = 0
	|											ТОГДА 1 / втКоличествоСобственников.КоличествоСобственников
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДоляСобственности,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь * ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = 
	|				ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ВЫБОР
	|					КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = 
	|							ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая)
	|						ТОГДА ВЫБОР
	|								КОГДА НЕ ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель, 0) = 0
	|									ТОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель 
	|											/ УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = 
	|									ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная)
	|								ТОГДА ВЫБОР
	|										КОГДА НЕ ЕСТЬNULL(втКоличествоСобственников.КоличествоСобственников, 0) = 0
	|											ТОГДА 1 / втКоличествоСобственников.КоличествоСобственников
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РазмерСобственности,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник.Наименование КАК ФИО,
	|	втКоличествоСобственников.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Период КАК ПериодДокументСобственности,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента КАК ВидДокументаСобственности,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента КАК НомерДокументаСобственности,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента КАК ДатаДокументаСобственности
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&ДатаКон, Помещение = &Помещение) 
	|		КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаКон, Помещение = &Помещение) 
	|			КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ПО УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&ДатаКон, 
	|																			ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) 
	|			КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоСобственников КАК втКоличествоСобственников
	|		ПО УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = втКоличествоСобственников.Помещение
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|	И УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует";
	
	ЗапросВладельцы.УстановитьПараметр("ДатаКон",   Дата);
	ЗапросВладельцы.УстановитьПараметр("Помещение", _Проживающий.Владелец.Адрес);

	
	СписокВладельцев = ЗапросВладельцы.Выполнить().Выгрузить();
	
	СписокВладельцев.Колонки.Добавить("СведенияДокументПравоНаЖилПомещение");
	СписокВладельцев.Колонки.Добавить("ДоляИРазмерСобственности");
	
	НомерСтр = 1;
	
	Для Каждого ТекВладелец Из СписокВладельцев Цикл
		
		ТекВладелец.Номер = НомерСтр;
		СведенияДокумент = "";
		
		Если ТекВладелец.ВидДокументаСобственности<>"" Тогда
			СведенияДокумент = "док. " + ТекВладелец.ВидДокументаСобственности + Символы.ПС;
		КонецЕсли;
		Если ТекВладелец.ДатаДокументаСобственности<>Дата(1,1,1) Тогда
			СведенияДокумент = СведенияДокумент + "от " + Формат(ТекВладелец.ДатаДокументаСобственности,"ДФ=dd.MM.yyyy") + Символы.ПС;
		КонецЕсли;
		Если ТекВладелец.НомерДокументаСобственности<>"" Тогда
			СведенияДокумент = СведенияДокумент + "№ " + ТекВладелец.НомерДокументаСобственности;
		КонецЕсли;
		
		ТекВладелец.СведенияДокументПравоНаЖилПомещение = СведенияДокумент;
		ТекВладелец.ДоляИРазмерСобственности = "" + Окр(ТекВладелец.ДоляСобственности, 2) + " ("
											 + Окр(ТекВладелец.РазмерСобственности, 2) + ")";
		НомерСтр = НомерСтр + 1;
		
	КонецЦикла;
	
	ЗарегистрированныеЖильцы = СобратьСведенияПоПроживающему_Ф10(_Проживающий, _ДопПараметрыПечати, Истина);
	
	// формирование списка зарегистрированных граждан жилого помещения
	ЗапросЗарегистрированные = Новый Запрос();
	ЗапросЗарегистрированные.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЖильцов.Объект,
	|	ТаблицаЖильцов.ФИО,
	|	ТаблицаЖильцов.ДатаРождения,
	|	ТаблицаЖильцов.МестоРождения,
	|	ТаблицаЖильцов.ФизЛицо
	|ПОМЕСТИТЬ врТаблицаЖильцов
	|ИЗ
	|	&ТаблицаЖильцов КАК ТаблицаЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК Номер,
	|	врТаблицаЖильцов.ФИО,
	|	врТаблицаЖильцов.ДатаРождения,
	|	врТаблицаЖильцов.МестоРождения,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК ДокументНомер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДокументДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК ДокументКемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК ДокументКодПодразделения,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|			ТОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения
	|	КОНЕЦ КАК ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|			ТОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения
	|	КОНЕЦ КАК ДатаСнятиеРУ
	|ИЗ
	|	врТаблицаЖильцов КАК врТаблицаЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, ) КАК ДокументыФизическихЛицСрезПоследних
	|		ПО врТаблицаЖильцов.ФизЛицо = ДокументыФизическихЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&Дата, ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО врТаблицаЖильцов.Объект = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец";
	ЗапросЗарегистрированные.УстановитьПараметр("ТаблицаЖильцов", ЗарегистрированныеЖильцы.СписокПроживающих);
	ЗапросЗарегистрированные.УстановитьПараметр("Дата",           Дата);
	
	СписокЗарегистрированных = ЗапросЗарегистрированные.Выполнить().Выгрузить();
	СписокЗарегистрированных.Колонки.Добавить("СведенияОПроживающем");
	СписокЗарегистрированных.Колонки.Добавить("Документ");
	СписокЗарегистрированных.Колонки.Добавить("ВоинскийУчет");
	
	НомерСтр = 1;
	
	Для Каждого ТекПроживающий Из СписокЗарегистрированных Цикл
		
		ТекПроживающий.Номер = НомерСтр;
		// Место рождения уже в виде представления, так как используются данные,
		// подготовленные в функции получения сведений для Ф10.
		МестоРождения = ТекПроживающий.МестоРождения;
		
		ТекПроживающий.СведенияОПроживающем = "" + ТекПроживающий.ФИО
											+ ?(ПустаяСтрока(МестоРождения), "", ", " + МестоРождения);
		ТекПроживающий.Документ = "" + ТекПроживающий.ДокументВид + ", " + ТекПроживающий.ДокументСерия + " "
								+ ТекПроживающий.ДокументНомер + ", выд. " + Формат(ТекПроживающий.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")
								+ " " + ТекПроживающий.ДокументКемВыдан + ?(ТекПроживающий.ДокументКодПодразделения="",""," №"
								+ ТекПроживающий.ДокументКодПодразделения);
		НомерСтр = НомерСтр + 1;
		
		ТекПроживающий.ВоинскийУчет = УПЖКХ_УчетЖильцов.ПолучитьПредставлениеДанныхВоинскогоУчетаФизическогоЛица(ТекПроживающий.ФизЛицо, "");
	КонецЦикла;

	СведенияПоПроживающему.Вставить("НаселенныйПунктРег",       НаселенныйПунктРег);
	СведенияПоПроживающему.Вставить("СписокВладельцев",         СписокВладельцев);
	СведенияПоПроживающему.Вставить("СписокЗарегистрированных", СписокЗарегистрированных);

	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_Ф11()

// Собирает данные по проживающему для занесения в форму №12 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф12(_Проживающий,_ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	СведенияПоПроживающему.Вставить("МесяцРожд1",      Сред(СведенияПоПроживающему.МесяцРожденияЧисло, 1, 1));
	СведенияПоПроживающему.Вставить("МесяцРожд2",      Сред(СведенияПоПроживающему.МесяцРожденияЧисло, 2, 1));
	СведенияПоПроживающему.Вставить("ГодРожд1",        Сред(СведенияПоПроживающему.ДатаРожденияГод, 1, 1));
	СведенияПоПроживающему.Вставить("ГодРожд2",        Сред(СведенияПоПроживающему.ДатаРожденияГод, 2, 1));
	СведенияПоПроживающему.Вставить("ГодРожд3",        Сред(СведенияПоПроживающему.ДатаРожденияГод, 3, 1));
	СведенияПоПроживающему.Вставить("ГодРожд4",        Сред(СведенияПоПроживающему.ДатаРожденияГод, 4, 1));
	
	МестоВыбытия = ПолучитьСокрАдрес(_Проживающий, Перечисления.КВП_ВидыАдресов.Выбытие, "Выб", Дата);
	
	Для Каждого Параметр Из МестоВыбытия Цикл
		
		СведенияПоПроживающему.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;

	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_Ф12()

// Собирает данные по проживающему для занесения в форму №12_П отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф12_П(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьСведенияПоПроживающему_Ф12(_Проживающий, Дата);

	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_Ф12_П()

// Собирает данные по проживающему для занесения в форму №12_В отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф12_В(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьСведенияПоПроживающему_Ф12(_Проживающий, Дата);

	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_Ф12_В()

// Собирает данные по проживающему для занесения в форму №14 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф14(_Проживающий,_ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	// получение места рождения
	СведенияОЗаявителе_РодПадеж = СведенияПоПроживающему.СведенияОЗаявителе_РодПадеж;
	
	МестоРожденияСтрокой = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(_Проживающий.ФизЛицо.МестоРождения);
	
	СведенияОЗаявителеМестоРожд   = СведенияОЗаявителе_РодПадеж + ", " + СведенияПоПроживающему.ДатаРожденияГод + " г.р."
								  + ?(МестоРожденияСтрокой="","",", " + МестоРожденияСтрокой);
	СведенияОЗаявителе_РодПадеж_МестоРожд_1 = "";
	СведенияОЗаявителе_РодПадеж_МестоРожд_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияОЗаявителеМестоРожд, 55,
								СведенияОЗаявителе_РодПадеж_МестоРожд_1, СведенияОЗаявителе_РодПадеж_МестоРожд_2);
	
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_РодПадеж_ГодМестоРожд_1", СведенияОЗаявителе_РодПадеж_МестоРожд_1);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителе_РодПадеж_ГодМестоРожд_2", СведенияОЗаявителе_РодПадеж_МестоРожд_2);
	
	ПредставлениеРег   = СведенияПоПроживающему.ПредставлениеРег;
	
	ПредставлениеРег_1 = "";
	ПредставлениеРег_2 = "";
	РазделитьТекстНаДвеСтроки(ПредставлениеРег, 55, ПредставлениеРег_1, ПредставлениеРег_2);
	
	СведенияПоПроживающему.Вставить("ПредставлениеРег_1", ПредставлениеРег_1);
	СведенияПоПроживающему.Вставить("ПредставлениеРег_2", ПредставлениеРег_2);
	
	Возврат СведенияПоПроживающему;

КонецФункции // СобратьОбщиеСведенияПоПроживающему_Ф14()

// Собирает данные по проживающему для занесения в форму №15 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф15(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	ТекОтветственный = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(_Проживающий.Владелец, Дата);
	Если НЕ ТекОтветственный = Неопределено И ТипЗнч(ТекОтветственный) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		СведенияПоВладельцу = СобратьОбщиеСведенияПоПроживающему(ТекОтветственный, Дата);
		Адрес = "" + ТекОтветственный.Владелец.Адрес.Владелец + ", "
					+ ТекОтветственный.Владелец.Адрес;
		Адрес_1 = "";
		Адрес_2 = "";
		РазделитьТекстНаДвеСтроки(Адрес, 30, Адрес_1, Адрес_2);
		СведенияПоПроживающему.Вставить("ФИО_Владелец", СведенияПоВладельцу.ФИО);
		СведенияПоПроживающему.Вставить("АдреСобственника",   Адрес);
		СведенияПоПроживающему.Вставить("АдреСобственника_1", Адрес_1);
		СведенияПоПроживающему.Вставить("АдреСобственника_2", Адрес_2);
	КонецЕсли;
	
	// получение периода регистрации по месту пребывания
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", _Проживающий);
	Запрос.УстановитьПараметр("Дата",   НачалоДня(Дата));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК Период,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Объект
	|ПОМЕСТИТЬ втРегистрация
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			Жилец = &Объект
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец КАК Объект,
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения КАК Период
	|ПОМЕСТИТЬ втСнятиеСРегистрации
	|ИЗ
	|	втРегистрация КАК втРегистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|		ПО втРегистрация.Объект = УПЖКХ_СведенияОЗарегистрированных.Жилец
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения >= &Дата
	|	И УПЖКХ_СведенияОЗарегистрированных.Жилец = &Объект
	|	И (НЕ УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРегистрация.Период КАК ДатаРегистрации,
	|	втСнятиеСРегистрации.Период КАК ДатаСнятияСРегистрации
	|ИЗ
	|	втРегистрация КАК втРегистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСнятиеСРегистрации КАК втСнятиеСРегистрации
	|		ПО втРегистрация.Объект = втСнятиеСРегистрации.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ДатаРегистрации) Тогда
			
			ДатаРегистрации = Формат(Выборка.ДатаРегистрации, "ДФ=dd|MMMM|yyyy");
			
			СведенияПоПроживающему.Вставить("НачалоРегДень",  Лев(ДатаРегистрации, 2));
			СведенияПоПроживающему.Вставить("НачалоРегМесяц", Сред(ДатаРегистрации, 4, СтрДлина(ДатаРегистрации)-5-3));
			СведенияПоПроживающему.Вставить("НачалоРегГод",   Прав(ДатаРегистрации, 2));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаСнятияСРегистрации) Тогда
			
			ДатаВыбытия = Формат(УПЖКХ_УчетЖильцов.ПолучитьДатуВыбытия(Выборка.ДатаСнятияСРегистрации), "ДФ=dd|MMMM|yyyy");
			
			СведенияПоПроживающему.Вставить("ОкончаниеРегДень",  Лев(ДатаВыбытия, 2));
			СведенияПоПроживающему.Вставить("ОкончаниеРегМесяц", Сред(ДатаВыбытия, 4, СтрДлина(ДатаВыбытия)-5-3));
			СведенияПоПроживающему.Вставить("ОкончаниеРегГод",   Прав(ДатаВыбытия, 2));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// получение места рождения
	СведенияОЗаявителе = _Проживающий.Наименование;
	
	МестоРожденияСтрокой = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(_Проживающий.ФизЛицо.МестоРождения);
	
	СведенияОЗаявителеМестоРожд   = СведенияОЗаявителе +", "+СведенияПоПроживающему.ДатаРожденияГод+" г.р."+?(МестоРожденияСтрокой="","",", " + МестоРожденияСтрокой);
	СведенияОЗаявителеМестоРожд_1 = "";
	СведенияОЗаявителеМестоРожд_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияОЗаявителеМестоРожд, 75, СведенияОЗаявителеМестоРожд_1, СведенияОЗаявителеМестоРожд_2);
	
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеГодМестоРожд_1", СведенияОЗаявителеМестоРожд_1);
	СведенияПоПроживающему.Вставить("СведенияОЗаявителеГодМестоРожд_2", СведенияОЗаявителеМестоРожд_2);
	
	ПредставлениеРег   = СведенияПоПроживающему.ПредставлениеРег;
	
	ПредставлениеРег_1 = "";
	ПредставлениеРег_2 = "";
	РазделитьТекстНаДвеСтроки(ПредставлениеРег, 75, ПредставлениеРег_1, ПредставлениеРег_2);
	
	СведенияПоПроживающему.Вставить("ПредставлениеРег_1", ПредставлениеРег_1);
	СведенияПоПроживающему.Вставить("ПредставлениеРег_2", ПредставлениеРег_2);
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьОбщиеСведенияПоПроживающему_Ф15()

// Собирает данные по проживающему для занесения в форму №16 отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф16(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьСведенияПоПроживающему_Ф10(_Проживающий,_ДопПараметрыПечати, Истина); //Данные как в 10 форме
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьОбщиеСведенияПоПроживающему_Ф16()

// Собирает данные по проживающему для занесения в форму №17 ("Выписка из домовой книги") отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф17(_Проживающий,_ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	// формирование списка проживающих в данной квартире
	Запрос = Новый Запрос();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКИПрибытие = Новый Массив;
	МассивВидовКИПрибытие.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресПрибытияЖильца);
	
	МассивВидовКИВыбытие = Новый Массив;
	МассивВидовКИВыбытие.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца);
	
	УсловиеЗапроса = "ИСТИНА";
	
	Если ВыводитьТолькоАктуальныхЖильцов Тогда
		УсловиеЗапроса = "(врТаблицаЖильцов.Проживает
						 |ИЛИ врТаблицаЖильцов.Зарегистрирован
						 |ИЛИ врТаблицаЖильцов.Собственник)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("ЛицевойСчет", _Проживающий.Владелец);
	Запрос.УстановитьПараметр("Помещение",   _Проживающий.Владелец.Адрес);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Наименование КАК ФИО,
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец,
	|	УПЖКХ_Жильцы.Ссылка,
	|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	УПЖКХ_Жильцы.ФизЛицо.МестоРождения КАК МестоРождения,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Наименование КАК НомерКвартиры
	|ПОМЕСТИТЬ врТаблицаВсеЖильцыЛС
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Владелец = &ЛицевойСчет";
	Запрос.Выполнить();
	
	Если ВыводитьИсториюПоЖильцам Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированных.Жилец КАК Жилец,
		|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения КАК ДатаРегистрации
		|ПОМЕСТИТЬ втДатыРегистрации
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированных.Жилец В
		|			(ВЫБРАТЬ
		|				врТаблица.Ссылка
		|			ИЗ
		|				врТаблицаВсеЖильцыЛС КАК врТаблица)
		|	И УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения <= &Дата
		|	И УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированных.Жилец КАК Жилец,
		|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения КАК ДатаСнятияСРегистрации
		|ПОМЕСТИТЬ втДатыСнятияСРегистрации
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированных.Жилец В
		|			(ВЫБРАТЬ
		|				врТаблица.Ссылка
		|			ИЗ
		|				врТаблицаВсеЖильцыЛС КАК врТаблица)
		|	И УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения <= &Дата
		|	И НЕ УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДатыРегистрации.Жилец,
		|	втДатыРегистрации.ДатаРегистрации,
		|	ЕСТЬNULL(втДатыСнятияСРегистрации.ДатаСнятияСРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСнятияСРегистрации
		|ПОМЕСТИТЬ втЗарегистрированныеБезГруппировок
		|ИЗ
		|	втДатыРегистрации КАК втДатыРегистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыСнятияСРегистрации КАК втДатыСнятияСРегистрации
		|		ПО втДатыРегистрации.Жилец = втДатыСнятияСРегистрации.Жилец
		|			И втДатыРегистрации.ДатаРегистрации <= втДатыСнятияСРегистрации.ДатаСнятияСРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗарегистрированныеБезГруппировок.Жилец,
		|	втЗарегистрированныеБезГруппировок.ДатаРегистрации,
		|	МИНИМУМ(втЗарегистрированныеБезГруппировок.ДатаСнятияСРегистрации) КАК ДатаСнятияСРегистрации
		|ПОМЕСТИТЬ втЗарегистрированные
		|ИЗ
		|	втЗарегистрированныеБезГруппировок КАК втЗарегистрированныеБезГруппировок
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗарегистрированныеБезГруппировок.Жилец,
		|	втЗарегистрированныеБезГруппировок.ДатаРегистрации";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаРегистрации
		|ПОМЕСТИТЬ втДатыРегистрации
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			,
		|			Жилец В
		|					(ВЫБРАТЬ
		|						врТаблица.Ссылка
		|					ИЗ
		|						врТаблицаВсеЖильцыЛС КАК врТаблица)
		|				И Зарегистрирован
		|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаСнятияСРегистрации
		|ПОМЕСТИТЬ втДатыСнятияСРегистрации
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			,
		|			Жилец В
		|					(ВЫБРАТЬ
		|						врТаблица.Ссылка
		|					ИЗ
		|						врТаблицаВсеЖильцыЛС КАК врТаблица)
		|				И НЕ Зарегистрирован
		|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДатыРегистрации.Жилец,
		|	втДатыРегистрации.ДатаРегистрации,
		|	ЕСТЬNULL(втДатыСнятияСРегистрации.ДатаСнятияСРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСнятияСРегистрации
		|ПОМЕСТИТЬ втЗарегистрированные
		|ИЗ
		|	втДатыРегистрации КАК втДатыРегистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыСнятияСРегистрации КАК втДатыСнятияСРегистрации
		|		ПО втДатыРегистрации.Жилец = втДатыСнятияСРегистрации.Жилец
		|			И втДатыРегистрации.ДатаРегистрации <= втДатыСнятияСРегистрации.ДатаСнятияСРегистрации";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ЗапросПоЖильцам = Новый Запрос;
	ЗапросПоЖильцам.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЖильцам.Текст = 
	"ВЫБРАТЬ
	|	врТаблицаВсеЖильцыЛС.Ссылка КАК Объект
	|ИЗ
	|	врТаблицаВсеЖильцыЛС КАК врТаблицаВсеЖильцыЛС
	|
	|СГРУППИРОВАТЬ ПО
	|	врТаблицаВсеЖильцыЛС.Ссылка";
	
	МассивОбъектов = ЗапросПоЖильцам.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Информацию о выбытии помещаем во временную таблицу "втВыбытие".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКИВыбытие, МассивОбъектов);
	
	ЗапросВыбытие = Новый Запрос;
	ЗапросВыбытие.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВыбытие.Текст =
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Жилец,
	|	втКонтактнаяИнформация.Период КАК ДатаВыбытия,
	|	втКонтактнаяИнформация.Представление КАК Выбытие
	|ПОМЕСТИТЬ втДатыВыбытия
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втКонтактнаяИнформация";
	
	ЗапросВыбытие.Выполнить();
	
	Запрос.МенеджерВременныхТаблиц = ЗапросВыбытие.МенеджерВременныхТаблиц;
	
	// Информация о прибытии будет во временной таблице "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКИПрибытие, МассивОбъектов);
	
	ЗапросПрибытие = Новый Запрос;
	ЗапросПрибытие.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПрибытие.Текст =
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Жилец,
	|	втКонтактнаяИнформация.Период КАК ДатаПрибытия,
	|	втКонтактнаяИнформация.Представление КАК Прибытие,
	|	втКонтактнаяИнформация.Комментарий КАК ЦельПрибытия
	|ПОМЕСТИТЬ втДатыПрибытия
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втКонтактнаяИнформация";
	
	ЗапросПрибытие.Выполнить();
	
	Запрос.МенеджерВременныхТаблиц = ЗапросПрибытие.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втЗарегистрированные.Жилец,
	|	втЗарегистрированные.ДатаРегистрации,
	|	втЗарегистрированные.ДатаСнятияСРегистрации,
	|	МАКСИМУМ(ЕСТЬNULL(втДатыПрибытия.ДатаПрибытия, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаПрибытия,
	|	МАКСИМУМ(ЕСТЬNULL(втДатыВыбытия.ДатаВыбытия, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаВыбытия
	|ПОМЕСТИТЬ втЗарегистрированныеСПрибытиемВыбытием
	|ИЗ
	|	втЗарегистрированные КАК втЗарегистрированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыПрибытия КАК втДатыПрибытия
	|		ПО втЗарегистрированные.Жилец = втДатыПрибытия.Жилец
	|			И втЗарегистрированные.ДатаРегистрации >= втДатыПрибытия.ДатаПрибытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыВыбытия КАК втДатыВыбытия
	|		ПО втЗарегистрированные.Жилец = втДатыВыбытия.Жилец
	|			И (ВЫБОР
	|				КОГДА втЗарегистрированные.ДатаСнятияСРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ втЗарегистрированные.ДатаСнятияСРегистрации <= втДатыВыбытия.ДатаВыбытия
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗарегистрированные.Жилец,
	|	втЗарегистрированные.ДатаРегистрации,
	|	втЗарегистрированные.ДатаСнятияСРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрированныеСПрибытиемВыбытием.Жилец,
	|	втЗарегистрированныеСПрибытиемВыбытием.ДатаРегистрации,
	|	втЗарегистрированныеСПрибытиемВыбытием.ДатаСнятияСРегистрации,
	|	ЕСТЬNULL(втДатыПрибытия.ДатаПрибытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрибытия,
	|	ЕСТЬNULL(втДатыПрибытия.Прибытие, """") КАК Прибытие,
	|	ЕСТЬNULL(втДатыПрибытия.ЦельПрибытия, """") КАК ЦельПрибытия,
	|	ЕСТЬNULL(втДатыВыбытия.ДатаВыбытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыбытия,
	|	ЕСТЬNULL(втДатыВыбытия.Выбытие, """") КАК Выбытие
	|ПОМЕСТИТЬ втЗарегистрированныеИтог
	|ИЗ
	|	втЗарегистрированныеСПрибытиемВыбытием КАК втЗарегистрированныеСПрибытиемВыбытием
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыВыбытия КАК втДатыВыбытия
	|		ПО втЗарегистрированныеСПрибытиемВыбытием.ДатаВыбытия = втДатыВыбытия.ДатаВыбытия
	|			И втЗарегистрированныеСПрибытиемВыбытием.Жилец = втДатыВыбытия.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыПрибытия КАК втДатыПрибытия
	|		ПО втЗарегистрированныеСПрибытиемВыбытием.ДатаПрибытия = втДатыПрибытия.ДатаПрибытия
	|			И втЗарегистрированныеСПрибытиемВыбытием.Жилец = втДатыПрибытия.Жилец";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|ПОМЕСТИТЬ втПроживающие
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			,
	|			Жилец В
	|					(ВЫБРАТЬ
	|						врТаблица.Ссылка
	|					ИЗ
	|						врТаблицаВсеЖильцыЛС КАК врТаблица)
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|ПОМЕСТИТЬ втСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Собственник В
	|					(ВЫБРАТЬ
	|						врТаблица.ФизЛицо
	|					ИЗ
	|						врТаблицаВсеЖильцыЛС КАК врТаблица)
	|				И Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаВсеЖильцыЛС.Ссылка КАК Проживающий,
	|	врТаблицаВсеЖильцыЛС.ФИО КАК ФИО,
	|	врТаблицаВсеЖильцыЛС.ФизЛицо КАК ФизЛицо,
	|	врТаблицаВсеЖильцыЛС.ДатаРождения КАК ДатаРождения,
	|	врТаблицаВсеЖильцыЛС.МестоРождения КАК МестоРождения,
	|	врТаблицаВсеЖильцыЛС.НомерКвартиры КАК НомерКвартиры,
	|	ЕСТЬNULL(втПроживающие.Проживает, ЛОЖЬ) КАК Проживает,
	|	ЕСТЬNULL(втСобственники.Действует, ЛОЖЬ) КАК Собственник,
	|	ЕСТЬNULL(втЗарегистрированныеИтог.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
	|	ЕСТЬNULL(втЗарегистрированныеИтог.ДатаПрибытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрибытия,
	|	ЕСТЬNULL(втЗарегистрированныеИтог.ДатаВыбытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыбытияФактическая,
	|	ЕСТЬNULL(втЗарегистрированныеИтог.ДатаСнятияСРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыбытия,
	|	ЕСТЬNULL(втЗарегистрированныеИтог.Прибытие, """") КАК Прибытие,
	|	ЕСТЬNULL(втЗарегистрированныеИтог.ЦельПрибытия, """") КАК ЦельПрибытия,
	|	ЕСТЬNULL(втЗарегистрированныеИтог.Выбытие, """") КАК Выбытие,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА втЗарегистрированныеИтог.ДатаСнятияСРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ) КАК Зарегистрирован
	|ПОМЕСТИТЬ врТаблицаЖильцов
	|ИЗ
	|	врТаблицаВсеЖильцыЛС КАК врТаблицаВсеЖильцыЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроживающие КАК втПроживающие
	|		ПО врТаблицаВсеЖильцыЛС.Ссылка = втПроживающие.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственники КАК втСобственники
	|		ПО врТаблицаВсеЖильцыЛС.ФизЛицо = втСобственники.Собственник
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗарегистрированныеИтог КАК втЗарегистрированныеИтог
	|		ПО врТаблицаВсеЖильцыЛС.Ссылка = втЗарегистрированныеИтог.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Период,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения
	|ПОМЕСТИТЬ втАктуальныеДокументыФизЛиц
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			&Дата,
	|			Физлицо В
	|					(ВЫБРАТЬ
	|						врТаблицаЖильцов.ФизЛицо
	|					ИЗ
	|						врТаблицаЖильцов КАК врТаблицаЖильцов)
	|				И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАктуальныеДокументыФизЛиц.Физлицо,
	|	МАКСИМУМ(втАктуальныеДокументыФизЛиц.Период) КАК Период
	|ПОМЕСТИТЬ втПериодПоследнегоАктуальногоДокумента
	|ИЗ
	|	втАктуальныеДокументыФизЛиц КАК втАктуальныеДокументыФизЛиц
	|
	|СГРУППИРОВАТЬ ПО
	|	втАктуальныеДокументыФизЛиц.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАктуальныеДокументыФизЛиц.Физлицо,
	|	втАктуальныеДокументыФизЛиц.ВидДокумента,
	|	втАктуальныеДокументыФизЛиц.Серия,
	|	втАктуальныеДокументыФизЛиц.Номер,
	|	втАктуальныеДокументыФизЛиц.ДатаВыдачи,
	|	втАктуальныеДокументыФизЛиц.КемВыдан,
	|	втАктуальныеДокументыФизЛиц.КодПодразделения
	|ПОМЕСТИТЬ втДокументыФизЛиц
	|ИЗ
	|	втАктуальныеДокументыФизЛиц КАК втАктуальныеДокументыФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПериодПоследнегоАктуальногоДокумента КАК втПериодПоследнегоАктуальногоДокумента
	|		ПО втАктуальныеДокументыФизЛиц.Физлицо = втПериодПоследнегоАктуальногоДокумента.Физлицо
	|			И втАктуальныеДокументыФизЛиц.Период = втПериодПоследнегоАктуальногоДокумента.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ГражданствоФизическихЛицСрезПоследних.Страна КАК Гражданство
	|ПОМЕСТИТЬ втГражданствоФизЛиц
	|ИЗ
	|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(
	|			&Дата,
	|			ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					врТаблицаЖильцов.Физлицо
	|				ИЗ
	|					врТаблицаЖильцов КАК врТаблицаЖильцов)) КАК ГражданствоФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЖильцов.ФИО,
	|	врТаблицаЖильцов.ДатаРегистрации,
	|	врТаблицаЖильцов.ДатаПрибытия,
	|	врТаблицаЖильцов.ДатаВыбытияФактическая,
	|	врТаблицаЖильцов.ДатаВыбытия,
	|	врТаблицаЖильцов.ФизЛицо,
	|	врТаблицаЖильцов.ДатаРождения,
	|	врТаблицаЖильцов.МестоРождения,
	|	врТаблицаЖильцов.НомерКвартиры,
	|	врТаблицаЖильцов.Прибытие,
	|	врТаблицаЖильцов.ЦельПрибытия,
	|	врТаблицаЖильцов.Выбытие,
	|	врТаблицаЖильцов.Проживает,
	|	врТаблицаЖильцов.Собственник,
	|	врТаблицаЖильцов.Зарегистрирован,
	|	ЕСТЬNULL(втДокументыФизЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)) КАК ВидДокумента,
	|	ЕСТЬNULL(втДокументыФизЛиц.Серия, """") КАК Серия,
	|	ЕСТЬNULL(втДокументыФизЛиц.Номер, """") КАК Номер,
	|	ЕСТЬNULL(втДокументыФизЛиц.ДатаВыдачи, """") КАК ДатаВыдачи,
	|	ЕСТЬNULL(втДокументыФизЛиц.КемВыдан, """") КАК КемВыдан,
	|	ЕСТЬNULL(втДокументыФизЛиц.КодПодразделения, """") КАК КодПодразделения,
	|	ЕСТЬNULL(втГражданствоФизЛиц.Гражданство, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК Гражданство
	|ИЗ
	|	врТаблицаЖильцов КАК врТаблицаЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДокументыФизЛиц КАК втДокументыФизЛиц
	|		ПО врТаблицаЖильцов.ФизЛицо = втДокументыФизЛиц.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГражданствоФизЛиц КАК втГражданствоФизЛиц
	|		ПО врТаблицаЖильцов.ФизЛицо = втГражданствоФизЛиц.ФизическоеЛицо
	|ГДЕ
	|	&УсловиеАктуальностиЖильцов
	|
	|УПОРЯДОЧИТЬ ПО
	|	врТаблицаЖильцов.ФИО,
	|	врТаблицаЖильцов.ДатаРегистрации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеАктуальностиЖильцов", УсловиеЗапроса);
	
	СписокПроживающих = Запрос.Выполнить().Выгрузить();
	СписокПроживающих.Колонки.Добавить("Документ");
	СписокПроживающих.Колонки.Добавить("ВоинскийУчет");
	
	Для Каждого ТекПроживающий Из СписокПроживающих Цикл
		ТекПроживающий.Документ = "" + ТекПроживающий.ВидДокумента + ", " + ТекПроживающий.Серия + " "
		                        + ТекПроживающий.Номер + ", выд. " + Формат(ТекПроживающий.ДатаВыдачи, "ДФ=dd.MM.yyyy")
		                        + " " + ТекПроживающий.КемВыдан + ?(ТекПроживающий.КодПодразделения="",""," №" + ТекПроживающий.КодПодразделения);
		
		// Если есть дата прибытия/выбытия, то выводим соответственно их + адрес прибытия выбытия. В противном случае выводим дату регистрации/снятия с регистрации.
		ТекПроживающий.Прибытие = ?(ТекПроживающий.ДатаПрибытия <> '00010101',
									Формат(ТекПроживающий.ДатаПрибытия, "ДФ=dd.MM.yyyy,"),
									?(ТекПроживающий.ДатаРегистрации <> '00010101', Формат(ТекПроживающий.ДатаРегистрации, "ДФ=dd.MM.yyyy"), ""))
									+ ?(ПустаяСтрока(СокрЛП(Строка(ТекПроживающий.Прибытие))), "", " " + СокрЛП(Строка(ТекПроживающий.Прибытие)));
		
		ТекПроживающий.Выбытие  = ?(ТекПроживающий.ДатаВыбытияФактическая <> '00010101',
									Формат(ТекПроживающий.ДатаВыбытияФактическая, "ДФ=dd.MM.yyyy,"), 
									?(ТекПроживающий.ДатаВыбытия <> '00010101', Формат(ТекПроживающий.ДатаВыбытия, "ДФ=dd.MM.yyyy"), ""))
									+ ?(ПустаяСтрока(СокрЛП(Строка(ТекПроживающий.Выбытие))), "", " " + СокрЛП(Строка(ТекПроживающий.Выбытие)));
		
		// добавляем представление данных о воинском учете
		ТекПроживающий.ВоинскийУчет = УПЖКХ_УчетЖильцов.ПолучитьПредставлениеДанныхВоинскогоУчетаФизическогоЛица(ТекПроживающий.ФизЛицо, "");
		ТекПроживающий.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ТекПроживающий.МестоРождения);
	КонецЦикла;
	
	СведенияПоПроживающему.Вставить("СписокПроживающих", СписокПроживающих);
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьОбщиеСведенияПоПроживающему_Ф17()

// Собирает данные по помещению для занесения в форму №7 отчета (СПБ).
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф7_СПБ(Проживающий, ДопПараметрыПечати)
	
	ХарактеристикаПомещения = СобратьОбщиеСведенияПоПроживающему(Проживающий, Дата);
	
	ПолФизЛица = ?(Проживающий.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский, 2, 1);
	
	Проживающий_ДатПадеж = СклонениеПредставленийОбъектов.ПросклонятьФИО(Проживающий.Наименование, 3, ,ПолФизЛица);
	
	ХарактеристикаПомещения.Вставить("Проживающий_ДатПадеж", Проживающий_ДатПадеж);
	
	Помещение = Проживающий.Владелец.Адрес;
	Здание    = Помещение.Владелец;
	
	// Определим этажность подъезда.
	КолЭтажейВПодъезде = Помещение.Подъезд.Этажность;
	Если КолЭтажейВПодъезде = 0 Тогда
		КолЭтажейВПодъезде = Здание.Этажей;
	КонецЕсли;
	
	МестоРегистрации = ПолучитьАдрес(Здание, Перечисления.КВП_ВидыАдресов.Здание, "Рег");
	АдресРег = МестоРегистрации.ПредставлениеРег;
	Если Помещение.ВидПомещения.ТипПомещения <> Перечисления.КВП_ТипыПомещений.Дом Тогда
		АдресРег = АдресРег + ", кв." + Помещение.Код + Помещение.Суффикс;
	КонецЕсли;
	
	ХарактеристикаПомещения.Вставить("Организация",        Организация);
	ХарактеристикаПомещения.Вставить("АдресРег",           АдресРег);
	ХарактеристикаПомещения.Вставить("ГодПостройки",       Здание.ГодПостройки);
	ХарактеристикаПомещения.Вставить("ГодКапРемонта",      Здание.ГодКапРемонта);
	ХарактеристикаПомещения.Вставить("МатериалСтен",       Здание.МатериалСтен.Наименование);
	ХарактеристикаПомещения.Вставить("ВысотаПомещений",    Здание.ВысотаПомещений);
	ХарактеристикаПомещения.Вставить("КолЭтажей",          Здание.Этажей);
	ХарактеристикаПомещения.Вставить("КолЭтажейВПодъезде", КолЭтажейВПодъезде);
	ХарактеристикаПомещения.Вставить("Этаж",               Помещение.Этаж);
	ХарактеристикаПомещения.Вставить("КоличествоКомнат",   Помещение.КоличествоКомнат);
	
	СоотвПлощадей = Новый Соответствие;
	СоотвПлощадей.Вставить(Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь,       "ОбщаяПлощадь");
	СоотвПлощадей.Вставить(Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь,       "ЖилаяПлощадь");
	СоотвПлощадей.Вставить(Справочники.УПЖКХ_ВидыПлощадей.Кухня,              "ПлощадьКухни");
	СоотвПлощадей.Вставить(Справочники.УПЖКХ_ВидыПлощадей.Лоджия,             "ПлощадьЛоджии");
	СоотвПлощадей.Вставить(Справочники.УПЖКХ_ВидыПлощадей.ПлощадьМОПБезКухни, "ПлощадьМОПБезКухни");
	
	СпТиповПлощадей = Новый СписокЗначений;
	
	Для Каждого ТекСоответствие Из СоотвПлощадей Цикл
		
		СпТиповПлощадей.Добавить(ТекСоответствие.Ключ);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади КАК ТипПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&Дата,
	|			Объект = &Помещение
	|				И ВидПлощади В (&СпТиповПлощадей)) КАК КВП_ПлощадьПомещенияСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",            КонецДня(Дата));
	Запрос.УстановитьПараметр("Помещение",       Помещение);
	Запрос.УстановитьПараметр("СпТиповПлощадей", СпТиповПлощадей);
	
	ВыборкаПлощадей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПлощадей.Следующий() Цикл
		
		ХарактеристикаПомещения.Вставить(СоотвПлощадей.Получить(ВыборкаПлощадей.ТипПлощади), ВыборкаПлощадей.Площадь);
		
	КонецЦикла;
	
	СоотвБлагоустройств = Новый Соответствие;
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Отопление,            "Отопление");
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Лифт,                 "Лифт");
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Мусоропровод,         "Мусоропровод");
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Ванная,               "Ванная");
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.ГорячееВодоснабжение, "ГорячееВодоснабжение");
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Плита,                "Плита");
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.КоличествоКухонь,     "КоличествоКухонь");
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.РасположениеКухни,    "РасположениеКухни");
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.ОсвещениеКухни,       "ОсвещениеКухни");
	
	СпБлагоустройств = Новый СписокЗначений;
	
	Для Каждого ТекСоответствие Из СоотвБлагоустройств Цикл
		
		СпБлагоустройств.Добавить(ТекСоответствие.Ключ);
		
	КонецЦикла;
	
	ТаблицаБлагоустройств = КВП_ПрочиеПроцедурыИФункции.ПолучитьБлагоустройстваОбъекта(Здание, Помещение, СпБлагоустройств);
	
	Для Каждого ТекСтрока Из ТаблицаБлагоустройств Цикл
		
		ХарактеристикаПомещения.Вставить(СоотвБлагоустройств.Получить(ТекСтрока.ВидБлагоустройства), ТекСтрока.Значение);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель 
	|				/ УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель
	|	КОНЕЦ КАК ДоляСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Дата, Помещение = &Помещение) 
	|		КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних 
	|			КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПО УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение = УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
	Запрос.УстановитьПараметр("ЛицевойСчет", Проживающий.Владелец);
	Запрос.УстановитьПараметр("Помещение",   Проживающий.Владелец.Адрес);
	
	ТаблицаСобственников = Запрос.Выполнить().Выгрузить();
	ТаблицаСобственников.Колонки.Добавить("ЖилаяПлощадь");
	ТаблицаСобственников.Колонки.Добавить("Принадлежность");
	
	ЖилаяПлощадь = 0;
	Если НЕ ХарактеристикаПомещения.Свойство("ЖилаяПлощадь", ЖилаяПлощадь) Тогда
		ЖилаяПлощадь = 0;
	КонецЕсли;
	
	Для Каждого ТекСобственник Из ТаблицаСобственников Цикл
		ТекСобственник.ЖилаяПлощадь   = Формат(ЖилаяПлощадь * ?(ТекСобственник.ДоляСобственности = 0, 1, ТекСобственник.ДоляСобственности), "ЧЦ=10; ЧДЦ=3");
		ТекСобственник.Принадлежность = Строка(ТекСобственник.ПодвидЧастнойСобственности) + " собств.";
	КонецЦикла;
	
	СтрокаСобственника = ТаблицаСобственников.Найти(Проживающий, "Собственник");
	Если СтрокаСобственника = Неопределено Тогда
		ЖилаяПлСУчетомДоли = ЖилаяПлощадь;
	Иначе
		ЖилаяПлСУчетомДоли = СтрокаСобственника.ЖилаяПлощадь;
	КонецЕсли;
	
	// Формирование количества проживающих и количества зарегистрированных по нескольким лицевым счетам в квартире.
	Запрос = Новый Запрос;
	ДополнитьЗапросКоличествомЖильцов(Запрос, КонецДня(Дата), Проживающий.Владелец);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сумма(1) КАК КолЛицСчетов,
	|	Сумма(врТаблицаКоличеств.КоличествоПроживающих) КАК КоличествоПроживающих,
	|	Сумма(врТаблицаКоличеств.КоличествоЗарегистрированных) КАК КоличествоЗарегистрированных
	|ИЗ
	|	врТаблицаКоличеств КАК врТаблицаКоличеств
	|ГДЕ
	|	врТаблицаКоличеств.ЛицевойСчет.Адрес = &Помещение";
	
	Запрос.УстановитьПараметр("Дата",      КонецДня(Дата));
	Запрос.УстановитьПараметр("Помещение", Проживающий.Владелец.Адрес);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КолПроживающих        = Выборка.КоличествоПроживающих;
		КолЗарегистрированных = Выборка.КоличествоЗарегистрированных;
		КолЛицСчетов          = Выборка.КолЛицСчетов;
	Иначе
		КолПроживающих        = 0;
		КолЗарегистрированных = 0;
		КолЛицСчетов          = 0;
	КонецЕсли;
	
	ХарактеристикаПомещения.Вставить("КолЛицСчетов",         КолЛицСчетов);	
	ХарактеристикаПомещения.Вставить("Проживает",            КолПроживающих);
	ХарактеристикаПомещения.Вставить("Зарегистрировано",     КолЗарегистрированных);
	ХарактеристикаПомещения.Вставить("ЖилаяПлСУчетомДоли",   ЖилаяПлСУчетомДоли);
	ХарактеристикаПомещения.Вставить("ТаблицаСобственников", ТаблицаСобственников);
	ХарактеристикаПомещения.Вставить("КолСобственников",     ТаблицаСобственников.Количество());
	
	ХарактеристикаПомещения.Вставить("Телефон", Проживающий.Владелец.Телефон);
	
	КонтактнаяИнформация = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКонтактнуюИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	ХарактеристикаПомещения.Вставить("КонтактнаяИнформация", ?(ПустаяСтрока(КонтактнаяИнформация), "", "тел. ") + КонтактнаяИнформация);
	
	// Формирование таблицы комнат в квартире.
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК ПлощадьКомнаты,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Родитель,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Планировка КАК ПланировкаБД,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Вход КАК ВходВКомнату,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.ЕстьБалкон КАК ЕстьБалкон,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.ЕстьЛоджия КАК ЕстьЛоджия,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.ПлощадьБалкона КАК ПлощадьБалкона,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.ПлощадьЛоджии КАК ПлощадьЛоджии
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Дата, Объект.Родитель = &Квартира) 
	|		КАК КВП_ПлощадьПомещенияСрезПоследних
	|ГДЕ
	|	(КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ТипПомещения = &ТипПомещенияКабинет
	|			ИЛИ КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ТипПомещения = &ТипПомещенияКомната)";
	
	Запрос.УстановитьПараметр("Дата",                КонецДня(Дата));
	Запрос.УстановитьПараметр("Квартира",            Помещение);
	Запрос.УстановитьПараметр("ТипПомещенияКабинет", Перечисления.КВП_ТипыПомещений.Кабинет);
	Запрос.УстановитьПараметр("ТипПомещенияКомната", Перечисления.КВП_ТипыПомещений.Комната);
	
	ТаблицаКомнат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКомнат.Колонки.Добавить("ВидЛоджии");
	ТаблицаКомнат.Колонки.Добавить("НомерСтроки");
	ТаблицаКомнат.Колонки.Добавить("Планировка");
	
	Номер              = 1;
	ОбщаяПлощадьКомнат = 0;
	
	Для Каждого ТекСтрока Из ТаблицаКомнат Цикл
		
		ОбщаяПлощадьКомнат = ОбщаяПлощадьКомнат + ТекСтрока.ПлощадьКомнаты;
		
		ТекСтрока.НомерСтроки = Номер;
		ТекСтрока.Планировка = Лев(Строка(ТекСтрока.ПланировкаБД), 4) + ".";
		
		Если ТекСтрока.ЕстьБалкон = Истина Тогда
			ТекСтрока.ВидЛоджии = "Балкон";
			ТекСтрока.ПлощадьЛоджии = ТекСтрока.ПлощадьБалкона;
		ИначеЕсли ТекСтрока.ЕстьЛоджия = Истина	Тогда
			ТекСтрока.ВидЛоджии = "Лоджия";
			ТекСтрока.ПлощадьЛоджии = ТекСтрока.ПлощадьЛоджии;
		КонецЕсли;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	ХарактеристикаПомещения.Вставить("ТаблицаКомнат",      ТаблицаКомнат);
	ХарактеристикаПомещения.Вставить("ОбщаяПлощадьКомнат", ОбщаяПлощадьКомнат);
	
	Бухгалтер = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(Организация, Дата);
	
	ХарактеристикаПомещения.Вставить("Бухгалтер",    Бухгалтер.ГлавныйБухгалтерПредставление);
	ХарактеристикаПомещения.Вставить("Председатель", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация)["ПредседательТСЖ"]);
	ХарактеристикаПомещения.Вставить("ДатаВыдачи",   Формат(Дата, "ДЛФ=Д"));
	
	Возврат ХарактеристикаПомещения;

КонецФункции // СобратьСведенияПоПроживающему_Ф7_СПБ()

// Собирает данные по проживающему для занесения в форму №9 отчета (СПБ).
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф9_СПБ(_Проживающий,_ДопПараметрыПечати)

	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	Помещение = _Проживающий.Владелец.Адрес;
	Здание = Помещение.Владелец;

	ДатаРожд  = Формат(_Проживающий.ФизЛицо.ДатаРождения, "ДФ=dd/MM/yyyy");

	МестоРегистрации = ПолучитьАдрес(Здание, Перечисления.КВП_ВидыАдресов.Здание, "Рег");
	АдресРег = МестоРегистрации.ПредставлениеРег;
	
	Если НЕ Помещение.ВидПомещения.ТипПомещения = Перечисления.КВП_ТипыПомещений.Дом Тогда
		
		АдресРег = АдресРег + ", кв." + Помещение.Код + Помещение.Суффикс;
		
	КонецЕсли;
	
	СведенияПоПроживающему.Вставить("АдресРег", АдресРег);
	
	СведенияПоПроживающему.Вставить("СведенияОПроживающем", ВРег(_Проживающий.Наименование));
	СведенияПоПроживающему.Вставить("СведенияОПроживающем_ДатПадеж", ВРег(СведенияПоПроживающему.СведенияОЗаявителе_ДатПадеж) + "   " + ДатаРожд + " г.р.");
	СведенияПоПроживающему.Вставить("Проживающий_ДатПадеж", ВРег(СведенияПоПроживающему.СведенияОЗаявителе_ДатПадеж));
	СведенияПоПроживающему.Вставить("Проживающий", ВРег(_Проживающий.Наименование) + "   " + ДатаРожд + " г.р.");
	
	ВидСобственности           = "";
	ДокументПраваСобственности = "";
	
	ДанныеОСобственности = ПолучитьДанныеПоСобственникуПомещения_Ф9_СПБ(_Проживающий.ФизЛицо, Помещение);
	Если ДанныеОСобственности.Количество() > 0 Тогда
		ВидСобственности = ДанныеОСобственности[0].ВидСобственности;
		ДокументПраваСобственности = ДокументПраваСобственности + ДанныеОСобственности[0].ВидДокумента;
		НомерДокумента = ДанныеОСобственности[0].НомерДокумента;
		ДеньДокПраваСобств = День(ДанныеОСобственности[0].ДатаДокумента);
		МесяцГодДокПраваСобств = Формат(ДанныеОСобственности[0].ДатаДокумента, "ДЛФ=ДД");
	КонецЕсли; 
	
	СведенияПоПроживающему.Вставить("ДокументПраваСобственности", ДокументПраваСобственности);
	СведенияПоПроживающему.Вставить("НомерДокумента", НомерДокумента);
	СведенияПоПроживающему.Вставить("ДеньДокПраваСобств", ДеньДокПраваСобств);
	СведенияПоПроживающему.Вставить("МесяцГодДокПраваСобств", Сред(МесяцГодДокПраваСобств, 3));
	СведенияПоПроживающему.Вставить("ВидСобственности", ВРег(ВидСобственности));
	СведенияПоПроживающему.Вставить("КоличествоКомнат", _Проживающий.Владелец.Адрес.КоличествоКомнат);
		
	ЖилаяПлощадь = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(_Проживающий.Владелец.Адрес,
																		Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь, _Проживающий.Владелец, Дата, Ложь);
	
	СведенияПоПроживающему.Вставить("ЖилаяПлощадь", ЖилаяПлощадь);
	
	ОбщаяПлощадь = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(_Проживающий.Владелец.Адрес,
																		Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь, _Проживающий.Владелец, Дата, Ложь);
	СведенияПоПроживающему.Вставить("ОбщаяПлощадь", ОбщаяПлощадь);
	
	СведенияПоПроживающему.Вставить("СведенияОКвартире", "Жилая площадь состоит из "
									+ Строка(_Проживающий.Владелец.Адрес.КоличествоКомнат) + " комн.(" + Строка(ЖилаяПлощадь) + " кв.м) в "
									+ Строка(_Проживающий.Владелец.Адрес.КоличествоКомнат) + " комн. квартире (общ.пл "
									+ Строка(ОбщаяПлощадь) + " кв.м)");
	
	///////////////////////////////////////////////////////////////////////////////
	// Формирование таблицы проживающих.
	Запрос = Новый Запрос;
	
	Если ВыводРодственников Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Жильцы.Ссылка,
		|	УПЖКХ_Жильцы.Наименование,
		|	УПЖКХ_Жильцы.ФизЛицо
		|ПОМЕСТИТЬ врТаблицаЖильцов
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|ГДЕ
		|	УПЖКХ_Жильцы.Владелец.Адрес = &Помещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.Жилец КАК Проживающий,
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.ДатаИзменения КАК ДатаРегистрации,
		|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует КАК Собственник,
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.Зарегистрирован КАК Зарегистрирован,
		|	ВЫБОР
		|		КОГДА УПЖКХ_СведенияОЗарегистрированныхНаДату.ВременнаяРегистрация
		|			ТОГДА ""ВРЕМЕННО""
		|		ИНАЧЕ ""ПОСТОЯННО""
		|	КОНЕЦ КАК ВидРегистрации
		|ПОМЕСТИТЬ врТаблЖильцов
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхНаДату
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Дата, Помещение = &Помещение) 
		|			КАК УПЖКХ_СобственникиПомещенийСрезПоследних
		|		ПО УПЖКХ_СведенияОЗарегистрированныхНаДату.Жилец.ФизЛицо = УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.Зарегистрирован
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
		|	УПЖКХ_Жильцы.Наименование КАК ФИО,
		|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	врТаблЖильцов.ДатаРегистрации,
		|	врТаблЖильцов.Собственник,
		|	врТаблЖильцов.Зарегистрирован,
		|	врТаблЖильцов.ВидРегистрации,
		|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства
		|ИЗ
		|	врТаблицаЖильцов КАК УПЖКХ_Жильцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблЖильцов КАК врТаблЖильцов
		|		ПО УПЖКХ_Жильцы.Ссылка = врТаблЖильцов.Проживающий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Дата, 
		|																						ФизическоеЛицоОсновное = &Проживающий) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
		|		ПО УПЖКХ_Жильцы.ФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное
		|ГДЕ
		|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства.БлизкоеРодство";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.Жилец КАК Проживающий,
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.Жилец.Наименование КАК ФИО,
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.Жилец.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.ДатаИзменения КАК ДатаРегистрации,
		|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует КАК Собственник,
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.Зарегистрирован КАК Зарегистрирован,
		|	ВЫБОР
		|		КОГДА УПЖКХ_СведенияОЗарегистрированныхНаДату.ВременнаяРегистрация
		|			ТОГДА ""ВРЕМЕННО""
		|		ИНАЧЕ ""ПОСТОЯННО""
		|	КОНЕЦ КАК ВидРегистрации,
		|	врТаблицаСвязей.СтепеньРодства КАК СтепеньРодства
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхНаДату
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Дата, Помещение = &Помещение) 
		|			КАК УПЖКХ_СобственникиПомещенийСрезПоследних
		|		ПО УПЖКХ_СведенияОЗарегистрированныхНаДату.Жилец.ФизЛицо = УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Дата, 
		|																					ФизическоеЛицоОсновное = &Проживающий) КАК врТаблицаСвязей
		|		ПО УПЖКХ_СведенияОЗарегистрированныхНаДату.Жилец.ФизЛицо = врТаблицаСвязей.ФизическоеЛицоСвязанное
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.Зарегистрирован";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
	Запрос.УстановитьПараметр("Проживающий", _Проживающий.ФизЛицо);
	Запрос.УстановитьПараметр("ЛицевойСчет", _Проживающий.Владелец);
	Запрос.УстановитьПараметр("Помещение",   _Проживающий.Владелец.Адрес);
	
	СписокПроживающих = Запрос.Выполнить().Выгрузить();
	СписокПроживающих.Колонки.Добавить("НомерПроживающего");
	
	// Формирование таблицы проживающих.
	///////////////////////////////////////////////////////////////////////////////
	Если НЕ ВыводРодственников Тогда
		РегистрацияПроживающего = СписокПроживающих.НайтиСтроки(Новый Структура("Проживающий", _Проживающий));
		Если РегистрацияПроживающего.Количество() > 0 Тогда
			СведенияПоПроживающему.Вставить("СтатусРегистрацииПроживающего",
											РегистрацияПроживающего.Получить(0).ВидРегистрации + " с "
											+ Строка(Формат(РегистрацияПроживающего.Получить(0).ДатаРегистрации, "ДЛФ=Д")));
		Иначе
			СведенияПоПроживающему.Вставить("СтатусРегистрацииПроживающего", "");
		КонецЕсли;
		
		ТаблицаЗарегистрированных = СписокПроживающих.Скопировать();
		ТекПроживающий = ТаблицаЗарегистрированных.Найти(_Проживающий, "Проживающий");
		Если СписокПроживающих.Количество() = 1 И РегистрацияПроживающего.Количество() > 0 Тогда
			СведенияПоПроживающему.Вставить("ЕдинственныйЗарегистрированный", Истина);
		Иначе
			СведенияПоПроживающему.Вставить("ЕдинственныйЗарегистрированный", Ложь);
		КонецЕсли;
		
		Если НЕ ТекПроживающий = Неопределено Тогда
			ТаблицаЗарегистрированных.Удалить(ТекПроживающий);
		КонецЕсли;
		
		СписокЗарегистрированных = ТаблицаЗарегистрированных.НайтиСтроки(Новый Структура("Зарегистрирован", Истина));
		СведенияПоПроживающему.Вставить("СписокЗарегистрированных", СписокЗарегистрированных);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОЗарегистрированныхНаДату.ДатаИзменения КАК ДатаРегистрации,
		|	ВЫБОР
		|		КОГДА УПЖКХ_СведенияОЗарегистрированныхНаДату.ВременнаяРегистрация
		|			ТОГДА ""ВРЕМЕННО""
		|		ИНАЧЕ ""ПОСТОЯННО""
		|	КОНЕЦ КАК ВидРегистрации
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И ДатаИзменения <= &Дата
		|				И Жилец = &Проживающий) КАК УПЖКХ_СведенияОЗарегистрированныхНаДату";
		
		Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
		Запрос.УстановитьПараметр("Проживающий", _Проживающий);
		Запрос.УстановитьПараметр("ЛицевойСчет", _Проживающий.Владелец);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			СведенияПоПроживающему.Вставить("СтатусРегистрацииПроживающего", Результат.Получить(0).ВидРегистрации + " с "
			                                + Строка(Формат(Результат.Получить(0).ДатаРегистрации, "ДЛФ=Д")));
		Иначе
			СведенияПоПроживающему.Вставить("СтатусРегистрацииПроживающего", "");
		КонецЕсли;
		
		СведенияПоПроживающему.Вставить("СписокЗарегистрированных", СписокПроживающих);
		СведенияПоПроживающему.Вставить("ЕдинственныйЗарегистрированный", Ложь);
	КонецЕсли;
	
	СтрокиСобственников = СписокПроживающих.НайтиСтроки(Новый Структура("Собственник", Истина));
	Собственники = "";
	
	Для Каждого ТекСтрока Из СтрокиСобственников Цикл
		
		Собственники = Собственники + ТекСтрока.ФИО + ", ";
		
	КонецЦикла;
	
	Собственники = Лев(Собственники, СтрДлина(Собственники) - 2);
	
	СведенияПоПроживающему.Вставить("Собственники", Собственники);
	
	СведенияПоПроживающему.Вставить("ДатаВыдачи", Формат(Дата, "ДФ=dd.MM.yyyy"));
	
	КонтактнаяИнформация = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКонтактнуюИнформацияОбъекта(Организация,
																							Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	Бухгалтер = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(Организация, Дата,);
	СведенияПоПроживающему.Вставить("Бухгалтер", Бухгалтер.ГлавныйБухгалтерПредставление);
	СведенияПоПроживающему.Вставить("Председатель",
									УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация)["ПредседательТСЖ"]);
	СведенияПоПроживающему.Вставить("КонтактнаяИнформация",
									?(ПустаяСтрока(КонтактнаяИнформация), "", "тел. ") + КонтактнаяИнформация);
	СведенияПоПроживающему.Вставить("Организация", Организация);
	
	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_Ф9_СПБ()

// Собирает данные по проживающему для занесения в форму С_Р отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_С_Р(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	СведенияПоПроживающему.Вставить("ГдеПаспорт", "");
	
	СведенияПоПроживающему.Вставить("СтатусРегистрацииПроживающего", СформироватьДанныеОТипеРегистрации(_Проживающий));
	
	ДополнитьДаннымиОДатеРегистрации(_Проживающий, Дата, СведенияПоПроживающему);
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_С_Р()

// Собирает данные по проживающему для занесения в форму С_Р отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_С_ЗП(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	СведенияПоПроживающему.Вставить("ГдеПаспорт", "в том, что его(ее) паспорт находится в ОУФМС для замены.");
	
	СведенияПоПроживающему.Вставить("СтатусРегистрацииПроживающего", СформироватьДанныеОТипеРегистрации(_Проживающий));
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_С_ЗП()

// Собирает данные по проживающему для занесения в форму С_Р отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_С_ПР(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	СведенияПоПроживающему.Вставить("ГдеПаспорт", "и ее паспорт находится в ОУФМС для оформления регистрации.");
	
	СведенияПоПроживающему.Вставить("СтатусРегистрацииПроживающего", СформироватьДанныеОТипеРегистрации(_Проживающий));
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_С_ПР()

// Собирает данные по проживающему для занесения в форму З_С отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_З_С(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	ФизЛицо = УПЖКХ_ТиповыеМетодыВызовСервера.ДанныеФизЛица(Организация, _ДопПараметрыПечати.Заявитель, Дата);
	
	СведенияПоПроживающему.Вставить("СведенияОСобственникеДатаРождения",
									Физлицо.Фамилия + " " + Физлицо.Имя + " " + Физлицо.Отчество + ", "
									+ Формат(_ДопПараметрыПечати.Заявитель.ДатаРождения, "ДЛФ=DD") + "р.");
	
	ДокументРегистрацииСобственности = "";
	
	ДанныеОСобственности = ПолучитьДанныеПоСобственникуПомещения(_ДопПараметрыПечати.Заявитель, _Проживающий.Владелец.Адрес);
	
	Если ДанныеОСобственности.Количество() > 0 Тогда
		ДокументРегистрацииСобственностиНомер = ДанныеОСобственности[0].НомерДокумента;
		ДокументРегистрацииСобственностиДата  = ДанныеОСобственности[0].ДатаДокумента;
		ДокументРегистрацииСобственностиВид   = ДанныеОСобственности[0].ВидДокумента;
		
		ДокументРегистрацииСобственности = ПолучитьПредставлениеДокументаСобственности(ДокументРегистрацииСобственностиНомер, ДокументРегистрацииСобственностиДата, ДокументРегистрацииСобственностиВид);
	КонецЕсли;
	
	СведенияПоПроживающему.Вставить("ДокументРегистрацииСобственности", ДокументРегистрацииСобственности);
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_З_С()

// Собирает данные по проживающему для занесения в форму С_Р отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_РФЛ1(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	ВыданДокумент_1 = "";
	ВыданДокумент_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияПоПроживающему.ВыданДокумент, 20, ВыданДокумент_1, ВыданДокумент_2);
	
	СведенияПоПроживающему.ВыданДокумент_1 = ВыданДокумент_1;
	СведенияПоПроживающему.ВыданДокумент_2 = ВыданДокумент_2;
	
	//Организация_1 = "";
	//Организация_2 = "";
	//РазделитьТекстНаДвеСтроки(Организация.НаименованиеПолное, 30, Организация_1, Организация_2);
	//
	//СведенияПоПроживающему.Вставить("Организация_1", Организация_1);
	//СведенияПоПроживающему.Вставить("Организация_2", Организация_2);
	
	// Реквизиты ОВД.
	ОВДЗдания = СведенияПоПроживающему.ОВД;
	
	ОрганУчета_1 = "";
	ОрганУчета_2 = "";
	РазделитьТекстНаДвеСтроки(ОВДЗдания, 30, ОрганУчета_1, ОрганУчета_2);
	
	СведенияПоПроживающему.Вставить("ОрганУчета_1", ОрганУчета_1);
	СведенияПоПроживающему.Вставить("ОрганУчета_2", ОрганУчета_2);
	
	Отбор = Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресОВД);
	СтрокиАдреса = ОВДЗдания.КонтактнаяИнформация.НайтиСтроки(Отбор);
	
	Если СтрокиАдреса.Количество() > 0 Тогда
		Адрес = СтрокиАдреса[0].Представление;
	Иначе
		АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(_Проживающий.Владелец.Адрес.Владелец);
		Адрес = ПолучитьАдресПомещения(АдресДома, _Проживающий.Владелец.Адрес);
	КонецЕсли;
	
	СведенияПоПроживающему.Вставить("РеквизитыОВД", Адрес);
	
	Для Сч = 1 По 13 Цикл
		
		Выполнить("СведенияПоПроживающему.Вставить(""ОГРН_" + Сч + """, Сред(ОВДЗдания.ОГРН," + Сч + ", 1));");
		
	КонецЦикла;
	
	Для Сч = 1 По 4 Цикл
		
		Выполнить("СведенияПоПроживающему.Вставить(""КодИМНС_" + Сч + """, Сред(Организация.КодНалоговогоОргана," + Сч + ", 1));");
		
	КонецЦикла;
	
	Для Сч = 1 По 10 Цикл
		
		Выполнить("СведенияПоПроживающему.Вставить(""ИНН_" + Сч + """, Сред(ОВДЗдания.ИНН," + Сч + ", 1));");
		
	КонецЦикла;
	
	Для Сч = 1 По 9 Цикл
		
		Выполнить("СведенияПоПроживающему.Вставить(""КПП_" + Сч + """, Сред(ОВДЗдания.КПП," + Сч + ", 1));");
		
	КонецЦикла;
	
	СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(Организация,Дата);
	СведенияПоПроживающему.РеквизитыОрганизации = 
		УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
	
	ИМНС_1 = "";
	ИМНС_2 = "";
	ИМНС_3 = "";
	
	РазделитьТекстНаДвеСтроки(Организация.НаименованиеНалоговогоОргана, 25, ИМНС_1, ИМНС_2);
	РазделитьТекстНаДвеСтроки(ИМНС_2, 35, ИМНС_2, ИМНС_3);
	
	СведенияПоПроживающему.Вставить("ИМНС_1", ИМНС_1);
	СведенияПоПроживающему.Вставить("ИМНС_2", ИМНС_2);
	СведенияПоПроживающему.Вставить("ИМНС_3", ИМНС_3);
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьСведенияПоПроживающему_С_ПР()

// Собирает данные по проживающему для занесения в форму №1П отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф1П(_Проживающий,_ДопПараметрыПечати)
	
	// Получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	Возврат СведенияПоПроживающему;

КонецФункции // СобратьОбщиеСведенияПоПроживающему_Ф1П()

// Собирает данные по проживающему для занесения в форму №1ПР отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_Ф1ПР(_Проживающий, Собственник, _ДопПараметрыПечати)

	// Получение общих сведений.
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);

	Если Не ПустаяСтрока(СведенияПоПроживающему.ГородРег) Тогда

		НаселенныйПункт = СведенияПоПроживающему.ГородРег;
		НаселенныйПункт = НаселенныйПункт + ?(ПустаяСтрока(СведенияПоПроживающему.НаселенныйПунктРег), "", ", "+ СведенияПоПроживающему.НаселенныйПунктРег);
		
	КонецЕсли;
	
	НаселенныйПункт = ?(ПустаяСтрока(НаселенныйПункт), СведенияПоПроживающему.РегионРег, НаселенныйПункт);
	
	СведенияПоПроживающему.Вставить("НаселенныйПунктРег", НаселенныйПункт);
	
	Если ЗначениеЗаполнено(_ДопПараметрыПечати) И ТипЗнч(_ДопПараметрыПечати) = Тип("Структура") Тогда
		
		ДатаНачалаРегистрации = Формат(_ДопПараметрыПечати.ДатаНачалаРегистрации, "ДФ=dd|MMMM|yyyy");
		
		СведенияПоПроживающему.Вставить("НачалоРегДень",   Лев(ДатаНачалаРегистрации, 2));
		СведенияПоПроживающему.Вставить("НачалоРегМесяц",  Сред(ДатаНачалаРегистрации, 4, СтрДлина(ДатаНачалаРегистрации)-5-3));
		СведенияПоПроживающему.Вставить("НачалоРегРегГод", Прав(ДатаНачалаРегистрации, 2));
		
		ДатаОкончанияРегистрации = Формат(_ДопПараметрыПечати.ДатаОкончанияРегистрации, "ДФ=dd|MMMM|yyyy");
		
		СведенияПоПроживающему.Вставить("ОкончаниеРегДень",  Лев(ДатаОкончанияРегистрации, 2));
		СведенияПоПроживающему.Вставить("ОкончаниеРегМесяц", Сред(ДатаОкончанияРегистрации, 4, СтрДлина(ДатаОкончанияРегистрации)-5-3));
		СведенияПоПроживающему.Вставить("ОкончаниеРегГод",   Прав(ДатаОкончанияРегистрации, 2));
		
	КонецЕсли;
	
	Если Не Собственник = Неопределено И Не Собственник.Пустая() Тогда
		
		СведенияПоВладельцу = СобратьОбщиеСведенияПоПроживающему(Собственник, Дата);
		СведенияПоПроживающему.Вставить("СведенияОВладельце",      СведенияПоВладельцу.СведенияОЗаявителе);
		СведенияПоПроживающему.Вставить("ВладелецСокрВидДок",      СведенияПоВладельцу.СокрВидДок);
		СведенияПоПроживающему.Вставить("ВладелецСерияДокумента",  СведенияПоВладельцу.СерияДокумента);
		СведенияПоПроживающему.Вставить("ВладелецНомерДокумента",  СведенияПоВладельцу.НомерДокумента);
		СведенияПоПроживающему.Вставить("ВладелецВыданДокумент",   СведенияПоВладельцу.ВыданДокумент);
		СведенияПоПроживающему.Вставить("ВладелецКодДокумента",    СведенияПоВладельцу.КодДокумента);
		СведенияПоПроживающему.Вставить("ВладелецДатаВыдачиДень",  СведенияПоВладельцу.ДатаВыдачиДень);
		СведенияПоПроживающему.Вставить("ВладелецДатаВыдачиМесяц", СведенияПоВладельцу.ДатаВыдачиМесяц);
		СведенияПоПроживающему.Вставить("ВладелецДатаВыдачиГод",   СведенияПоВладельцу.ДатаВыдачиГод);
		СведенияПоПроживающему.Вставить("ВладелецТелефон",         СведенияПоВладельцу.Телефон);
		
		СведенияОСобственнике = СобратьСведенияОСобственнике(Собственник, СведенияПоВладельцу.СведенияОЗаявителе_ТворПадеж);
		
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ТворПадеж_1", СведенияОСобственнике.СведенияОВладельце_ТворПадеж_1);
		СведенияПоПроживающему.Вставить("СведенияОВладельце_ТворПадеж_2", СведенияОСобственнике.СведенияОВладельце_ТворПадеж_2);
		СведенияПоПроживающему.Вставить("СведенияДокумент_1",             СведенияОСобственнике.ДокументРегистрацииСобственности_1);
		СведенияПоПроживающему.Вставить("СведенияДокумент_2",             СведенияОСобственнике.ДокументРегистрацииСобственности_2);
		
		СведенияПоПроживающему.Вставить("НаселенныйПунктФакт", СведенияПоПроживающему.НаселенныйПунктРег);
		СведенияПоПроживающему.Вставить("УлицаФакт",           СведенияПоПроживающему.УлицаРег);
		СведенияПоПроживающему.Вставить("ДомФакт",             СведенияПоПроживающему.ДомРег);
		СведенияПоПроживающему.Вставить("КорпусФакт",          СведенияПоПроживающему.КорпусРег);
		СведенияПоПроживающему.Вставить("КвартираФакт",        СведенияПоПроживающему.КвартираРег);
		
	КонецЕсли;
	
	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_Ф1ПР()

// Собирает данные по проживающему для занесения в форму С_С отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_С_С(_Проживающий,_ДопПараметрыПечати)
	
	// получение общих сведений
	СведенияПоПроживающему = СобратьСведенияПоПроживающему_Ф10(_Проживающий,_ДопПараметрыПечати, Истина); //Данные как в 10 форме
	
	Возврат СведенияПоПроживающему;
	
КонецФункции // СобратьОбщиеСведенияПоПроживающему_С_С()

// Собирает данные по проживающему для занесения в форму ППВУ отчета.
//
// Возвращаемое значение:
//  Структура – собранные данные, Ключ - название параметра, Значение - его значение.
//
Функция СобратьСведенияПоПроживающему_ППВУ(_Проживающий,_ДопПараметрыПечати)

	// получение общих сведений
	СведенияПоПроживающему = СобратьОбщиеСведенияПоПроживающему(_Проживающий, Дата);
	
	// формирование списка подлежащих первоначальной постановке на воинский учет
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТелефоновЖильцов.Жилец КАК Жилец,
	|	ТаблицаТелефоновЖильцов.СписокТелефонов КАК Телефон
	|ПОМЕСТИТЬ втТелефоныЖильцов
	|ИЗ
	|	&ТаблицаТелефоновЖильцов КАК ТаблицаТелефоновЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Наименование КАК Наименование,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец КАК Владелец,
	|	УПЖКХ_Жильцы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(втТелефоныЖильцов.Телефон, """") КАК Телефон
	|ПОМЕСТИТЬ врТаблицаВсеЖильцыЛС
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТелефоныЖильцов КАК втТелефоныЖильцов
	|		ПО УПЖКХ_Жильцы.Ссылка = втТелефоныЖильцов.Жилец
	|ГДЕ
	|	УПЖКХ_Жильцы.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|	И &ОтборПоЛицевомуСчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаВсеЖильцыЛС.Ссылка КАК Проживающий,
	|	ГОД(&Дата) - ГОД(врТаблицаВсеЖильцыЛС.ФизЛицо.ДатаРождения) КАК Возраст,
	|	ВоинскийУчетСрезПоследних.ОтношениеКВоинскомуУчету КАК ОтношениеКВоинскомуУчету,
	|	ПРЕДСТАВЛЕНИЕ(врТаблицаВсеЖильцыЛС.Ссылка.Владелец.Адрес.Владелец) КАК ПредставлениеРег,
	|	ПРЕДСТАВЛЕНИЕ(врТаблицаВсеЖильцыЛС.Ссылка.Владелец.Адрес.Код) КАК НомерКвартирыРег,
	|	врТаблицаВсеЖильцыЛС.Телефон КАК Телефон,
	|	ГражданствоФизическихЛицСрезПоследних.Страна КАК Гражданство,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК КодПодразделения
	|ПОМЕСТИТЬ врТаблицаЖильцов
	|ИЗ
	|	врТаблицаВсеЖильцыЛС КАК врТаблицаВсеЖильцыЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ВоинскийУчет.СрезПоследних(
	|				&Дата,
	|				ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						врТаблица.ФизЛицо
	|					ИЗ
	|						врТаблицаВсеЖильцыЛС КАК врТаблица)) КАК ВоинскийУчетСрезПоследних
	|		ПО (ВоинскийУчетСрезПоследних.ФизическоеЛицо = врТаблицаВсеЖильцыЛС.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(
	|				&Дата,
	|				ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						врТаблица.ФизЛицо
	|					ИЗ
	|						врТаблицаВсеЖильцыЛС КАК врТаблица)) КАК ГражданствоФизическихЛицСрезПоследних
	|		ПО (ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо = врТаблицаВсеЖильцыЛС.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|				&Дата,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							врТаблица.ФизЛицо
	|						ИЗ
	|							врТаблицаВсеЖильцыЛС КАК врТаблица)
	|					И ВидДокумента.Наименование ПОДОБНО ""Паспорт%"") КАК ДокументыФизическихЛицСрезПоследних
	|		ПО (ДокументыФизическихЛицСрезПоследних.Физлицо = врТаблицаВсеЖильцыЛС.ФизЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Номер,
	|	врТаблицаЖильцов.Возраст КАК Возраст,
	|	ВЫБОР
	|		КОГДА врТаблицаЖильцов.Возраст = 17
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозрастППВУ,
	|	ВЫБОР
	|		КОГДА НЕ врТаблицаЖильцов.Возраст = 17
	|			ТОГДА ГОД(врТаблицаЖильцов.Проживающий.ФизЛицо.ДатаРождения)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ГодРождения,
	|	врТаблицаЖильцов.Проживающий.Наименование КАК ФИО,
	|	врТаблицаЖильцов.ОтношениеКВоинскомуУчету КАК ОтношениеКВоинскомуУчету,
	|	врТаблицаЖильцов.Гражданство КАК Гражданство,
	|	врТаблицаЖильцов.ВидДокумента КАК ВидДокумента,
	|	врТаблицаЖильцов.Серия КАК Серия,
	|	врТаблицаЖильцов.Номер КАК Номер1,
	|	врТаблицаЖильцов.ДатаВыдачи КАК ДатаВыдачи,
	|	врТаблицаЖильцов.КемВыдан КАК КемВыдан,
	|	врТаблицаЖильцов.КодПодразделения КАК КодПодразделения,
	|	врТаблицаЖильцов.Проживающий.Владелец.Адрес.ВидПомещения КАК ТипПомещения,
	|	врТаблицаЖильцов.ПредставлениеРег КАК ПредставлениеРег,
	|	врТаблицаЖильцов.НомерКвартирыРег КАК НомерКвартирыРег,
	|	врТаблицаЖильцов.Проживающий.Владелец.Адрес.Суффикс КАК СуффиксКвартирыРег,
	|	врТаблицаЖильцов.Телефон КАК Телефон
	|ИЗ
	|	врТаблицаЖильцов КАК врТаблицаЖильцов
	|ГДЕ
	|	(врТаблицаЖильцов.Возраст = 17
	|			ИЛИ врТаблицаЖильцов.Возраст > 17
	|				И врТаблицаЖильцов.ОтношениеКВоинскомуУчету = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ОтношениеКВоинскомуУчету.НеСостоит))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозрастППВУ УБЫВ,
	|	ФИО";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ЛицевойСчетЖильца    = _Проживающий.Владелец;
	ОтборПоЛицевомуСчету = "ИСТИНА";
	
	Если ЛицевойСчетЖильца.Пустая() Тогда
		ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов();
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоЛицевомуСчету", "УПЖКХ_Жильцы.Владелец = &ЛицевойСчет");
		ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(ЛицевойСчетЖильца);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоЛицевомуСчету", ОтборПоЛицевомуСчету);
	Запрос.УстановитьПараметр("ТаблицаТелефоновЖильцов", ТаблицаТелефоновЖильцов);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчетЖильца);
	
	СписокППВУ = Запрос.Выполнить().Выгрузить();
	СписокППВУ.Колонки.Добавить("ФИОГодРождения");
	СписокППВУ.Колонки.Добавить("Документ");
	СписокППВУ.Колонки.Добавить("ГражданствоПаспорт");
	СписокППВУ.Колонки.Добавить("ПредставлениеРегТелефон");
	
	ПредПроживающий = Неопределено;
	
	Для Каждого ТекПроживающий Из СписокППВУ Цикл
		
		Если НЕ ПустаяСтрока(ТекПроживающий.ГодРождения) Тогда
			ТекПроживающий.ФИОГодРождения = ТекПроживающий.ФИО + Символы.ПС + ТекПроживающий.ГодРождения;
		Иначе
			ТекПроживающий.ФИОГодРождения = ТекПроживающий.ФИО;
		КонецЕсли;
		
		// Номер паспорта хранится в поле "Номер1", т.к. поле "Номер" предназначено для хранения порядкового номера выводимого призывника.
		
		ТекПроживающий.Документ = "" + ТекПроживающий.ВидДокумента + ", " + ТекПроживающий.Серия + " "
								+ ТекПроживающий.Номер1 + ", выд. " + Формат(ТекПроживающий.ДатаВыдачи, "ДФ=dd.MM.yyyy")
								+ " " + ТекПроживающий.КемВыдан
								+ ?(ТекПроживающий.КодПодразделения="",""," №" + ТекПроживающий.КодПодразделения);
		
		Если ЗначениеЗаполнено(ТекПроживающий.Гражданство) Тогда
			ТекПроживающий.ГражданствоПаспорт = Строка(ТекПроживающий.Гражданство)
											  + "," + Символы.ПС + Строка(ТекПроживающий.Документ);
		Иначе
			ТекПроживающий.ГражданствоПаспорт = ТекПроживающий.Документ;
		КонецЕсли;
		
		// добавляем номер квартиры к представлению адреса, если дом многоквартирный
		Если НЕ ТекПроживающий.ТипПомещения = Перечисления.КВП_ТипыПомещений.Дом Тогда
			ТекПроживающий.ПредставлениеРег = ?(ТекПроживающий.ПредставлениеРег = "",
													"",
													ТекПроживающий.ПредставлениеРег + ", кв."
												  + ТекПроживающий.НомерКвартирыРег + ТекПроживающий.СуффиксКвартирыРег);
		КонецЕсли;
		
		Если НЕ ТекПроживающий.Телефон = "" Тогда
			ТекПроживающий.ПредставлениеРегТелефон = ТекПроживающий.ПредставлениеРег + "," + Символы.ПС + "тел.: " + ТекПроживающий.Телефон;
		Иначе
			ТекПроживающий.ПредставлениеРегТелефон = ТекПроживающий.ПредставлениеРег;
		КонецЕсли;
		
		ПредПроживающий = ТекПроживающий;
		
	КонецЦикла;
	
	СведенияПоПроживающему.Вставить("СписокППВУ", СписокППВУ);
	
	// ГодРожденияППВУ - год рождения проживающего, которому в год формирования отчета исполняется 17 лет.
	СведенияПоПроживающему.Вставить("ГодРожденияППВУ", Формат(Дата, "ДФ=yyyy") - 17);
	
	Возврат СведенияПоПроживающему;

КонецФункции // СобратьСведенияПоПроживающему_ППВУ()

// Собирает данные о собственнике помещения.
Функция СобратьСведенияОСобственнике(Собственник, ФИОСобственника_ТворПадеж)
	
	СведенияОСобственнике = Новый Структура;
	
	ДоляСобственности                   = "собственником ";
	ПредставлениеДокументаСобственности = "";
	
	ДанныеПоСобственнику = ПолучитьДанныеПоСобственникуПомещения(Собственник.ФизЛицо, Собственник.Владелец.Адрес, Дата);
	
	Если Не ДанныеПоСобственнику = 0 Тогда
		
		ПредставлениеДокументаСобственности = ПолучитьПредставлениеДокументаСобственности(ДанныеПоСобственнику[0].НомерДокумента, ДанныеПоСобственнику[0].ДатаДокумента, ДанныеПоСобственнику[0].ВидДокумента);
		
		Если Не ДанныеПоСобственнику[0].ДоляСобственникаЧислитель = ДанныеПоСобственнику[0].ДоляСобственникаЗнаменатель Тогда
			
			ПредставлениеДоли = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ДанныеПоСобственнику[0].ДоляСобственникаЧислитель, ДанныеПоСобственнику[0].ДоляСобственникаЗнаменатель);
			
			ДоляСобственности = ДоляСобственности + "(доля " + ПредставлениеДоли + ") ";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияОВладельце_ТворПадеж = ДоляСобственности + ФИОСобственника_ТворПадеж;
	СведенияОСобственнике.Вставить("СведенияОВладельце_ТворПадеж", СведенияОВладельце_ТворПадеж);
	
	СведенияОВладельце_ТворПадеж_1 = "";
	СведенияОВладельце_ТворПадеж_2 = "";
	РазделитьТекстНаДвеСтроки(СведенияОВладельце_ТворПадеж, 54, СведенияОВладельце_ТворПадеж_1, СведенияОВладельце_ТворПадеж_2);
	СведенияОСобственнике.Вставить("СведенияОВладельце_ТворПадеж_1", СведенияОВладельце_ТворПадеж_1);
	СведенияОСобственнике.Вставить("СведенияОВладельце_ТворПадеж_2", СведенияОВладельце_ТворПадеж_2);
	
	СведенияОСобственнике.Вставить("ДокументРегистрацииСобственности", ПредставлениеДокументаСобственности);
	
	ДокументРегистрацииСобственности_1 = "";
	ДокументРегистрацииСобственности_2 = "";
	РазделитьТекстНаДвеСтроки(ПредставлениеДокументаСобственности, 70, ДокументРегистрацииСобственности_1, ДокументРегистрацииСобственности_2);
	СведенияОСобственнике.Вставить("ДокументРегистрацииСобственности_1", ДокументРегистрацииСобственности_1);
	СведенияОСобственнике.Вставить("ДокументРегистрацииСобственности_2", ДокументРегистрацииСобственности_2);
	
	Возврат СведенияОСобственнике;
	
КонецФункции

#КонецОбласти

#Область ВыводПолученныхСведенийВДокумент

// Присоединяет к ТДПриемник Отчет.
// ТДПриемник     - табличный документ, в кот. устанавливается новый формат.
// Отчет          - табличный документ, на основании кот. будет установлен новый формат.
// ВтораяСтраница - нужна вторая сторона формы.
// Высота         - копировать высоту строк с формы в ДокументРезультат.
//
Процедура ПрисоединитьОтчет(ТДПриемник, Отчет, ВтораяСтраница = Ложь, Высота = Ложь)
	
	// с какой стороной работаем
	Если ВтораяСтраница И Не ВыводитьОборотнуюСторонуСправа Тогда
		
		НачалоНовойОбластиКолонка = мНачалоОбластиКолонка2;
		НачалоНовойОбластиСтрока  = мНачалоОбластиСтрока2;
		
		мНачалоОбластиКолонка2 = НачалоНовойОбластиКолонка+Отчет.ШиринаТаблицы;
		
	Иначе
		
		НачалоНовойОбластиКолонка = мНачалоОбластиКолонка;
		НачалоНовойОбластиСтрока  = мНачалоОбластиСтрока;
		
		мНачалоОбластиКолонка = НачалоНовойОбластиКолонка+Отчет.ШиринаТаблицы;
		
	КонецЕсли;
	
	
	ОбластьПрямоугольная = Отчет.Область(1, 1, Отчет.ВысотаТаблицы, Отчет.ШиринаТаблицы);
	
	ТДПриемник.ВставитьОбласть(ОбластьПрямоугольная,ТДПриемник.Область(НачалоНовойОбластиСтрока,НачалоНовойОбластиКолонка,
		НачалоНовойОбластиСтрока+Отчет.ВысотаТаблицы-1, НачалоНовойОбластиКолонка+Отчет.ШиринаТаблицы-1), , Истина);
	
	// назначим ширину колонок у новой области формата строк
	Для Счетчик = 0 По Отчет.ШиринаТаблицы-1 Цикл
		
		ТДПриемник.Область(1, Счетчик+НачалоНовойОбластиКолонка).ШиринаКолонки = Отчет.Область(1, Счетчик).ШиринаКолонки;
		
	КонецЦикла;
	
	// назначим высоту строк у новой области формата строк
	Если Высота Тогда
		
		Для Счетчик = 0 По Отчет.ВысотаТаблицы-1 Цикл
			
		ТДПриемник.Область(Счетчик,1).ВысотаСтроки = Отчет.Область(Счетчик,1).ВысотаСтроки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПрисоединитьОтчет()

// Добавляет в ТДПриемник Отчет.
// ТДПриемник - табличный документ, в кот. устанавливается новый формат.
// Отчет      - табличный документ, на основании кот. будет установлен новый формат.
//
Процедура ДобавитьОтчет(ТДПриемник, Отчет, Растягивать = Ложь, ВтораяСтраница = Ложь, НовыйФормат = Истина)

	Если Растягивать Тогда
		
		ДобавитьДвойнойОтчет(ТДПриемник,Отчет, ВтораяСтраница);
		
		Возврат;
		
	КонецЕсли;
		
	Если ВтораяСтраница Тогда
		
		мНачалоОбластиКолонка2 = 1+Отчет.ШиринаТаблицы;
		мНачалоОбластиСтрока2  = ТДПриемник.ВысотаТаблицы + 1;
		
	Иначе
		
		мНачалоОбластиКолонка = 1+Отчет.ШиринаТаблицы;
		мНачалоОбластиСтрока  = ТДПриемник.ВысотаТаблицы + 1;
		
	КонецЕсли;
	
	НачалоНовогоФорматаСтрок = ТДПриемник.ВысотаТаблицы + 1;
	
	ОбластьПрямоугольная = Отчет.Область(1, , Отчет.ВысотаТаблицы, );
	
	Если НовыйФормат Тогда
		
		ТДПриемник.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + Отчет.ВысотаТаблицы,).СоздатьФорматСтрок();
		
	КонецЕсли;
	
	ТДПриемник.ВставитьОбласть(ОбластьПрямоугольная, ТДПриемник.Область(НачалоНовогоФорматаСтрок, 1), , Истина);
	
	
	// назначим ширину колонок у новой области формата строк
	Для Счетчик = 1 По Отчет.ШиринаТаблицы Цикл
		
		До = ТДПриемник.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки;
		После = Отчет.Область(1, Счетчик).ШиринаКолонки;
		
		ТДПриемник.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = Отчет.Область(1, Счетчик).ШиринаКолонки;
		
	КонецЦикла;
	
	Для Счетчик = 1 По Отчет.ШиринаТаблицы Цикл
		
		ТДПриемник.Область(НачалоНовогоФорматаСтрок
							+ Отчет.ВысотаТаблицы, Счетчик).ШиринаКолонки = Отчет.Область(1, Счетчик).ШиринаКолонки;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьОтчет()

// Добавляет в ТДПриемник Отчет удвоенной ширины.
// ТДПриемник - табличный документ, в кот. устанавливается новый формат.
// Отчет      - табличный документ, на основании кот. будет установлен новый формат.
//
Процедура ДобавитьДвойнойОтчет(ТДПриемник, Отчет, ВтораяСтраница = Ложь)

	Если ВтораяСтраница Тогда
		мНачалоОбластиСтрока2  = ТДПриемник.ВысотаТаблицы + 1;
	Иначе
		мНачалоОбластиСтрока  = ТДПриемник.ВысотаТаблицы + 1;
	КонецЕсли;
	
	НачалоНовогоФорматаСтрок = ТДПриемник.ВысотаТаблицы + 1;
	
	Для Икс = 1 по Отчет.ШиринаТаблицы Цикл
		Для Игрек = 1 по Отчет.ВысотаТаблицы Цикл
			ТекОбласть = Отчет.Область(Игрек, Икс, Игрек, Икс);
			
			Если НЕ ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст ИЛИ ЗначениеЗаполнено(ТекОбласть.Текст) Тогда
				ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт,, ТекОбласть.Шрифт.Размер * 1.9,,,,);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбластьПрямоугольная = Отчет.Область(1, , Отчет.ВысотаТаблицы, );
	
	ТДПриемник.ВставитьОбласть(ОбластьПрямоугольная, ТДПриемник.Область(НачалоНовогоФорматаСтрок, 1), , Истина);
	ТДПриемник.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + Отчет.ВысотаТаблицы, ).СоздатьФорматСтрок();
	
	// назначим ширину колонок у новой области формата строк
	Для Счетчик = 1 По Отчет.ШиринаТаблицы Цикл
		ТДПриемник.Область(НачалоНовогоФорматаСтрок, Счетчик, НачалоНовогоФорматаСтрок + Отчет.ВысотаТаблицы,
							Счетчик).ШиринаКолонки = Отчет.Область(1, Счетчик).ШиринаКолонки * 2;
	КонецЦикла;
	
	Для Счетчик = 0 По Отчет.ВысотаТаблицы-1 Цикл
		ТДПриемник.Область(Счетчик+НачалоНовогоФорматаСтрок,1).ВысотаСтроки = Отчет.Область(Счетчик,1).ВысотаСтроки * 2;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьДвойнойОтчет()

// Заполняет табличный документ по форме №1 по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф1(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_1");

	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф1()

// Заполняет табличный документ по форме №2 по данным указанным в структуре параметров.
// ДокументРезультат      - табличный документ.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф2(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_2");

	Если ВтораяСтраница Тогда
		
		ОбластьСтраница = Макет.ПолучитьОбласть("Страница2|ОбластьПечати");
		
	Иначе
	
		ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	КонецЕсли;

	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
		Если НЕ ВтораяСтраница Тогда
			
			Если СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				
				Если НЕ ОбластьСтраница.Области.Найти("ПолМуж") = Неопределено Тогда
					ОбластьСтраница.Область("ПолМуж").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				КонецЕсли;
				
			ИначеЕсли СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				
				Если НЕ ОбластьСтраница.Области.Найти("ПолЖен") = Неопределено Тогда
					ОбластьСтраница.Область("ПолЖен").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				КонецЕсли;
				
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф2()

// Заполняет табличный документ по форме №3 по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф3(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_3");

	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф3()

// Заполняет указанный табличный документ по форме Ф3_МСК по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф3_МСК(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_3_МСК");
	
	ОбластьСтраница1   = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
	ОбластьСтраница1_1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
	ОбластьСтраница1_2 = Макет.ПолучитьОбласть("Страница1_2|ОбластьПечати");
	
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1);
	
	Если СведенияПоПроживающему = Неопределено Тогда
		СписокЗарегистрированныхРожденных = Новый ТаблицаЗначений;
		КоличествоСтрок = 6;
	Иначе
		СписокЗарегистрированныхРожденных = СведенияПоПроживающему.СписокЗарегистрированныхРожденных;
		КоличествоСтрок = Макс(6, СписокЗарегистрированныхРожденных.Количество());
	КонецЕсли;
	
	СведенияОЗарегистрирРожденных = Новый Структура("ФИО,ДатаРожденияСтрока,МестоРождения,Пол,Гражданство,ПредставлениеРег");
	
	КоличествоПроживающих = 0;
	
	Для НомерПроживающего = 1 По КоличествоСтрок Цикл
		
		Если СписокЗарегистрированныхРожденных.Количество() >= НомерПроживающего Тогда
			
			ТекПроживающий = СписокЗарегистрированныхРожденных[НомерПроживающего - 1];
			
			Если НЕ СведенияПоПроживающему = неопределено Тогда
				
				ОбластьСтраница1_1.Параметры.Заполнить(ТекПроживающий);
				
			КонецЕсли;
			
		Иначе
			ОбластьСтраница1_1.Параметры.Заполнить(СведенияОЗарегистрирРожденных);
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСтраница1_1);
		
	КонецЦикла;
	
	Если НЕ СведенияПоПроживающему = Неопределено Тогда 
		ОбластьСтраница1_2.Параметры.Заполнить(СведенияПоПроживающему);
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1_2);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф3_МСК()

// Заполняет табличный документ по форме №5 по данным указанным в структуре параметров.
// ДокументРезультат      - табличный документ.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф5(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_5");

	Если ВтораяСтраница Тогда
		
		ОбластьСтраница = Макет.ПолучитьОбласть("Страница2|ОбластьПечати");
		
	Иначе
	
		ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	КонецЕсли;
	
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
		Если НЕ ВтораяСтраница Тогда
			
			Если СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				
				Если НЕ ОбластьСтраница.Области.Найти("ПолМуж") = Неопределено Тогда
					ОбластьСтраница.Область("ПолМуж").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				КонецЕсли;
				
			ИначеЕсли СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				
				Если НЕ ОбластьСтраница.Области.Найти("ПолЖен") = Неопределено Тогда
					ОбластьСтраница.Область("ПолЖен").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				КонецЕсли;
				
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф5()

// Заполняет табличный документ по форме №6 по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф6(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_6");
	
	ОбластьСтраница = Макет.ПолучитьОбласть("Страница3|ОбластьПечати");
	
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф6()

// Заполняет табличный документ по форме №6_Р по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф6_Р(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_6");

	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф6_Р()

// Заполняет табличный документ по форме №6_С по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф6_С(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_6");

	ОбластьСтраница = Макет.ПолучитьОбласть("Страница2|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф6_С()

// Заполняет табличный документ по форме №7 по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф7(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_7");

	Если ВтораяСтраница Тогда
		
		ОбластьСтраница = Макет.ПолучитьОбласть("Страница2|ОбластьПечати");
		
	Иначе	
	
		ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	КонецЕсли;
		
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
		Если НЕ ВтораяСтраница Тогда
			
			Если СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				
				Если НЕ ОбластьСтраница.Области.Найти("ПолМуж") = Неопределено Тогда
					ОбластьСтраница.Область("ПолМуж").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				КонецЕсли;
				
			ИначеЕсли СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				
				Если НЕ ОбластьСтраница.Области.Найти("ПолЖен") = Неопределено Тогда
					ОбластьСтраница.Область("ПолЖен").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				КонецЕсли;
				
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф7()

// Заполняет табличный документ по форме №8 по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф8(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_8");

	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф8()

// Заполняет указанный табличный документ по форме №9 по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф9(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_9");
	
	Если ВтораяСтраница Тогда
	
		ОбластьСтраница2         = Макет.ПолучитьОбласть("Страница2|ОбластьПечати");
		ОбластьСтраница2_1       = Макет.ПолучитьОбласть("Страница2_1|ОбластьПечати");
		
		Если НЕ СведенияПоПроживающему = неопределено Тогда
			
			ОбластьСтраница2.Параметры.Заполнить(СведенияПоПроживающему);
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСтраница2);
		
		// Вторая часть второй страницы.
		
		КоличествоСтрок   = 5;
		
		Если СведенияПоПроживающему = Неопределено Тогда
			ОтметкиРегистрации = Новый ТаблицаЗначений;
			КоличествоОтметок = 0;
		Иначе
			ОтметкиРегистрации = СведенияПоПроживающему.СведенияОРегистрации;
			КоличествоОтметок  = ОтметкиРегистрации.Количество();
		КонецЕсли;
		
		Для НомерСтр = 1 По КоличествоСтрок Цикл
			
			СведенияОРегистрации = Новый Структура("ДатаРегистрации,ДатаСнятиеРУ");
			
			Если НомерСтр <= КоличествоОтметок Тогда
				ТекущиеОтметки = ОтметкиРегистрации[НомерСтр-1];
				Если НЕ СведенияПоПроживающему = Неопределено Тогда
					СведенияОРегистрации.ДатаРегистрации = Формат(ТекущиеОтметки.ДатаРегистрации,"ДФ=dd.MM.yyyy");
					СведенияОРегистрации.ДатаСнятиеРУ    = Формат(ТекущиеОтметки.ДатаСнятиеРУ,   "ДФ=dd.MM.yyyy");
				КонецЕсли;
			КонецЕсли;
			ОбластьСтраница2_1.Параметры.Заполнить(СведенияОРегистрации);
			ДокументРезультат.Вывести(ОбластьСтраница2_1);
		КонецЦикла;
		
	Иначе
	
		ДанныеПоДокументу = Новый Структура("СокрВидДок, ДокументСерия, ДокументНомер, ДокументКемВыданДата");
		
		ОбластьСтраница1         = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		ОбластьСтраница1_1       = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
		ОбластьСтраница1_2       = Макет.ПолучитьОбласть("Страница1_2|ОбластьПечати");
		
		// Первая часть первой страницы.
		Если НЕ СведенияПоПроживающему = неопределено Тогда
			
			ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСтраница1);
		
		// Список документов, удостоверяющих личность.
		Если СведенияПоПроживающему = Неопределено Тогда
			СписокДокументов = Неопределено;
		Иначе
			СписокДокументов = СведенияПоПроживающему.СписокДокументов;
		КонецЕсли;
		
		КоличествоДокументов = 0;
		КоличествоСтрок      = 4;
		
		Если Не СписокДокументов = Неопределено Тогда
			
			Для Каждого СтрокаДокумент Из СписокДокументов Цикл
				
				Если НЕ СведенияПоПроживающему = неопределено Тогда
					
					ОбластьСтраница1_1.Параметры.Заполнить(СтрокаДокумент);
					
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьСтраница1_1);
				
				КоличествоДокументов = КоличествоДокументов+1;
				
				Если КоличествоДокументов = КоличествоСтрок Тогда
					
					Прервать;
					
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЕсли;
		
		Если КоличествоДокументов < КоличествоСтрок Тогда
			
			Для НомерДок = КоличествоДокументов + 1 По КоличествоСтрок Цикл
				
				ОбластьСтраница1_1.Параметры.Заполнить(ДанныеПоДокументу);
				
				ДокументРезультат.Вывести(ОбластьСтраница1_1);
				
			КонецЦикла;
			
		КонецЕсли;

		// Вторая часть первой страницы, разделитель и начало второй страницы.
		Если НЕ СведенияПоПроживающему = неопределено Тогда
			
			ОбластьСтраница1_2.Параметры.Заполнить(СведенияПоПроживающему);
			
		КонецЕсли;
	
		ДокументРезультат.Вывести(ОбластьСтраница1_2);
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокумент_Ф9()

// Заполняет указанный табличный документ по форме №10 по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф10(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь, НомерФормы = "10")

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_" + НомерФормы);
	
	СтрокНаПервойСтр = 2;
	
	ОбластьСтраница1_1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
	
	врСтруктураДопПараметров = Новый Структура("Номер");
	
	Если ВтораяСтраница Тогда
		
		ОбластьСтраница1   = Макет.ПолучитьОбласть("Шапка|ОбластьПечати");
		
		КоличествоДокументов = 0;
		КоличествоСтрок      = 7;
		
		ДокументРезультат.Вывести(ОбластьСтраница1);
		
		ЕстьПроживающие = 
			(НЕ СведенияПоПроживающему = Неопределено И Не СведенияПоПроживающему.СписокПроживающих = Неопределено);
		
		Если ЕстьПроживающие Тогда
			// переопределим ограничение, если реальное количество жильцов больше
			КоличествоСтрок   = Макс(КоличествоСтрок, СведенияПоПроживающему.СписокПроживающих.Количество() - СтрокНаПервойСтр);
		КонецЕсли;
		
		Для НомерСтроки = СтрокНаПервойСтр + 1 По СтрокНаПервойСтр + КоличествоСтрок Цикл
			Если ЕстьПроживающие И СведенияПоПроживающему.СписокПроживающих.Количество() >= НомерСтроки Тогда
				ОбластьСтраница1_1.Параметры.Заполнить(СведенияПоПроживающему.СписокПроживающих.Получить(НомерСтроки - 1));
			Иначе
				ОбластьСтраница1_1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
				врСтруктураДопПараметров.Номер = НомерСтроки;
				ОбластьСтраница1_1.Параметры.Заполнить(врСтруктураДопПараметров);
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьСтраница1_1);
		КонецЦикла;
		
	Иначе
		
		ОбластьСтраница1 = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
		КоличествоДокументов = 0;
		КоличествоСтрок      = СтрокНаПервойСтр;
		
		Если НЕ СведенияПоПроживающему = Неопределено Тогда
			
			ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
			
			ДокументРезультат.Вывести(ОбластьСтраница1);
			
			СписокПроживающих = СведенияПоПроживающему.СписокПроживающих;
			
			Если Не СписокПроживающих = Неопределено Тогда
				
				Номер = 1;
				
				Для Каждого СтрокаПроживающих Из СписокПроживающих Цикл
					
					СтрокаПроживающих.Номер = Номер;
					ОбластьСтраница1_1.Параметры.Заполнить(СтрокаПроживающих);
					
					Номер = Номер + 1;
					
					ДокументРезультат.Вывести(ОбластьСтраница1_1);
					
					КоличествоДокументов = КоличествоДокументов + 1;
					
					Если КоличествоДокументов = КоличествоСтрок Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			ДокументРезультат.Вывести(ОбластьСтраница1);
			
		КонецЕсли;
		
		Если КоличествоДокументов < КоличествоСтрок Тогда
			
			ОбластьСтраница1_1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
			
			Для НомерДок = КоличествоДокументов + 1 По КоличествоСтрок Цикл
				врСтруктураДопПараметров.Номер = НомерДок;
				ОбластьСтраница1_1.Параметры.Заполнить(врСтруктураДопПараметров);
				ДокументРезультат.Вывести(ОбластьСтраница1_1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокумент_Ф10()

// Заполняет указанный табличный документ по форме №11 по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф11(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_11");

	Если ВтораяСтраница Тогда
		
		ОбластьСтраница2   = Макет.ПолучитьОбласть("Страница2");
		ОбластьСтраница2_1 = Макет.ПолучитьОбласть("Страница2_1");
		ОбластьСтраница2_2 = Макет.ПолучитьОбласть("Страница2_2");
		ОбластьСтраница2_3 = Макет.ПолучитьОбласть("Страница2_3");

		ДокументРезультат.Вывести(ОбластьСтраница2);
		
		// Список владельцев помещения
		Если СведенияПоПроживающему = Неопределено Тогда
			СписокВладельцев = Новый ТаблицаЗначений;
			КоличествоСтрок = 5;
		Иначе
			СписокВладельцев = СведенияПоПроживающему.СписокВладельцев;
			КоличествоСтрок  = Макс(5, СписокВладельцев.Количество());
		КонецЕсли;
		
				СведенияОВладельце   = Новый Структура("Номер, ФИО, СведенияДокументПравоНаЖилПомещение, ДоляИРазмерСобственности");
		СведенияОЗарегистрир = Новый Структура("Номер, СведенияОПроживающем, ДатаРождения, ВоинскийУчет, Документ, ДатаРегистрации, ДатаСнятиеРУ");
			
		Для НомерВладельца = 1 По КоличествоСтрок Цикл
			
			Если СписокВладельцев.Количество() >= НомерВладельца Тогда
				ТекВладелец = СписокВладельцев[НомерВладельца - 1];
				Если НЕ СведенияПоПроживающему = Неопределено Тогда
					ОбластьСтраница2_1.Параметры.Заполнить(ТекВладелец);
				Иначе
					ОбластьСтраница2_1.Параметры.Заполнить(СведенияОВладельце);
				КонецЕсли;
			Иначе
				ОбластьСтраница2_1.Параметры.Заполнить(СведенияОВладельце);
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьСтраница2_1);
			
		КонецЦикла;
		
		// вторая часть второй страницы
		ДокументРезультат.Вывести(ОбластьСтраница2_2);

		// список зарегистрированных граждан
		Если СведенияПоПроживающему = Неопределено Тогда
			СписокЗарегистрированных = Новый ТаблицаЗначений;
			КоличествоСтрок = 6;
		Иначе
			СписокЗарегистрированных = СведенияПоПроживающему.СписокЗарегистрированных;
			КоличествоСтрок  = Макс(6, СписокЗарегистрированных.Количество());
		КонецЕсли;
		
		Для НомерЗарегистрир = 1 По КоличествоСтрок Цикл
			
			Если СписокЗарегистрированных.Количество() >= НомерЗарегистрир Тогда
				
				ТекЗарегистрир = СписокЗарегистрированных[НомерЗарегистрир - 1];
				
				Если НЕ СведенияПоПроживающему = Неопределено Тогда
					
					ОбластьСтраница2_3.Параметры.Заполнить(ТекЗарегистрир);
					// Представление дат строкой для вывода на форму.
					ДатаРегистрацииСтрокой = Формат(ТекЗарегистрир.ДатаРегистрации,"ДФ=dd.MM.yyyy");
					ДатаСнятиеРУСтрокой    = Формат(ТекЗарегистрир.ДатаСнятиеРУ,   "ДФ=dd.MM.yyyy");
					
					врСтруктураПараметров = Новый Структура("ДатаРегистрации,ДатаСнятиеРУ");
					
					Если Не ДатаРегистрацииСтрокой = "" Тогда
						врСтруктураПараметров.ДатаРегистрации = "регистрация: " + Формат(ТекЗарегистрир.ДатаРегистрации,"ДФ=dd.MM.yyyy");
					Иначе
						врСтруктураПараметров.ДатаРегистрации = "";
					КонецЕсли;
					Если Не ДатаСнятиеРУСтрокой = "" Тогда
						врСтруктураПараметров.ДатаСнятиеРУ = " снятие с регистрации: " + Формат(ТекЗарегистрир.ДатаРегистрации,"ДФ=dd.MM.yyyy");
					Иначе
						врСтруктураПараметров.ДатаСнятиеРУ = "";
					КонецЕсли;
					
					ОбластьСтраница2_3.Параметры.Заполнить(врСтруктураПараметров);
					
				Иначе
					
					ОбластьСтраница2_3.Параметры.Заполнить(СведенияОЗарегистрир);
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСтраница2_3.Параметры.Заполнить(СведенияОЗарегистрир);
				
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьСтраница2_3);
			
		КонецЦикла;

	Иначе
		
		// первая страница
		ОбластьСтраница1   = Макет.ПолучитьОбласть("Страница1");
		
		Если НЕ СведенияПоПроживающему = неопределено Тогда
			
			ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСтраница1);
	
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьДокумент_Ф11()

// Заполняет указанный табличный документ по форме №12 по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф12(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь, НомерФормы)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_12");
	
	Если ВтораяСтраница Тогда
		
		ОбластьСтраница2 = Макет.ПолучитьОбласть("Страница2");
		
		Если НЕ СведенияПоПроживающему = неопределено Тогда
			
			ОбластьСтраница2.Параметры.Заполнить(СведенияПоПроживающему);
		
		КонецЕсли;
			
		ДокументРезультат.Вывести(ОбластьСтраница2);
		
	Иначе
		
		ГраницаСплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		// подчеркивание нужной ячейки с полом человека
		Если НЕ СведенияПоПроживающему = Неопределено 
			И СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			
			Если НЕ Макет.Области.Найти("ПолМужской1") = Неопределено Тогда
				Макет.Область("ПолМужской1").ГраницаСнизу = ГраницаСплошная;
			КонецЕсли;
			Если НЕ Макет.Области.Найти("ПолМужской2") = Неопределено Тогда
				Макет.Область("ПолМужской2").ГраницаСнизу = ГраницаСплошная;
			КонецЕсли;
			
		ИначеЕсли НЕ СведенияПоПроживающему = Неопределено 
				И СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			
			Если НЕ Макет.Области.Найти("ПолЖенский1") = Неопределено Тогда
				Макет.Область("ПолЖенский1").ГраницаСнизу = ГраницаСплошная;
			КонецЕсли;
			Если НЕ Макет.Области.Найти("ПолЖенский2") = Неопределено Тогда
				Макет.Область("ПолЖенский2").ГраницаСнизу = ГраницаСплошная;
			КонецЕсли;
			
		КонецЕсли;
	
		Если НомерФормы = "П" Тогда
			
			ОбластьСтраница1 = Макет.ПолучитьОбласть("Страница1");
			
		Иначе	
			
			ОбластьСтраница1 = Макет.ПолучитьОбласть("Страница3");
			
		КонецЕсли;
			
		Если НЕ СведенияПоПроживающему = неопределено Тогда
			
			ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСтраница1);
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокумент_Ф12()

// Заполняет указанный табличный документ по форме №12_П по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф12_П(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	ЗаполнитьДокумент_Ф12(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница, "П");
	
КонецПроцедуры // ЗаполнитьДокумент_Ф12_П()

// Заполняет указанный табличный документ по форме №12_В по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф12_В(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	ЗаполнитьДокумент_Ф12(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница, "В");
	
КонецПроцедуры // ЗаполнитьДокумент_Ф12_В()

// Заполняет указанный табличный документ по форме №14 по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф14(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_14");

	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф14()

// Заполняет указанный табличный документ по форме №15 по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф15(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_15");
	
	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф15()

// Заполняет указанный табличный документ по форме №16 по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф16(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_16");

	ОбластьЗаголовок     = Макет.ПолучитьОбласть("Заголовок|ОбластьПечати");
	ОбластьСообщение     = Макет.ПолучитьОбласть("СообщениеНетЗарегистрированных|ОбластьПечати");
	ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьПечати");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы|ОбластьПечати");
	ОбластьПодвал        = Макет.ПолучитьОбласть("Подвал|ОбластьПечати");
	
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		ОбластьЗаголовок.Параметры.Заполнить(СведенияПоПроживающему);
		ОбластьЗаголовок.Параметры.ФИОПроживающего_ДатПадеж = СведенияПоПроживающему.СведенияОЗаявителе_ДатПадеж;
		
	Иначе
		
		СведенияОбОрганизации          = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(Организация,Дата);
		СведенияОбОрганизацииДляВывода = Новый Структура("НаименованиеОрганизации, РеквизитыОрганизации");
		
		СведенияОбОрганизацииДляВывода.НаименованиеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		СведенияОбОрганизацииДляВывода.РеквизитыОрганизации    = "" + СведенияОбОрганизации.ЮридическийАдрес
																+ ", ИНН "
																+ СведенияОбОрганизации.ИНН;
		Если ЗначениеЗаполнено(ЛицевойСчет) Тогда
			ОбластьЗаголовок.Параметры.ПредставлениеРег = ЛицевойСчет.Адрес.Владелец.Наименование
														+ ", "
														+ НРег(ЛицевойСчет.Адрес.Наименование);
		КонецЕсли;
		ОбластьЗаголовок.Параметры.Заполнить(СведенияОбОрганизацииДляВывода);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	Если СведенияПоПроживающему = Неопределено И ЗначениеЗаполнено(ЛицевойСчет) Тогда
		
		ТолькоЗарегистрированные = Истина;
		
		// формирование списка проживающих в данной квартире
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК СвязанноеФизЛицо,
		|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства КАК СтепеньРодства,
		|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства.БлизкоеРодство КАК БлизкоеРодство
		|ПОМЕСТИТЬ Родственники
		|ИЗ
		|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Дата, ) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
		|		ПО УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_СведенияОЖильцахСрезПоследних.Объект КАК Объект,
		|	ВЫБОР
		|		КОГДА КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЕСТЬNULL(Родственники.БлизкоеРодство, ЛОЖЬ)
		|	КОНЕЦ КАК БлизкоеРодство,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован КАК Зарегистрирован,
		|	ВЫБОР
		|		КОГДА НЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|			ТОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения
		|	КОНЕЦ КАК ДатаСнятияРУ,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация.ДатаИзменения КАК ДатаРегистрации,
		|	ВЫБОР
		|		КОГДА КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ &УпрощенныйВариантУчетаСобственников
		|						ТОГДА ВЫБОР
		|								КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
		|									ТОГДА &ЧастныйСобственник
		|								ИНАЧЕ &МуниципальныйСобственник
		|							КОНЕЦ
		|					ИНАЧЕ &ПрочийСобственник
		|				КОНЕЦ
		|		ИНАЧЕ Родственники.СтепеньРодства
		|	КОНЕЦ КАК СтепеньРодства,
		|	ВЫБОР
		|		КОГДА КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтветственныйСобственникНаниматель,
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
		|	ВЫБОР
		|		КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация.ВременнаяРегистрация
		|			ТОГДА ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихОкончаниеРегистрации.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1))
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаОкончанияВременнойРегистрации
		|ПОМЕСТИТЬ ИтоговаяТаблица
		|ИЗ
		|	(ВЫБРАТЬ
		|		УПЖКХ_Жильцы.Ссылка КАК Объект,
		|		УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
		|	ИЗ
		|		Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|	ГДЕ
		|		&Условие) КАК КВП_СведенияОЖильцахСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
		|		ПО (УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет.Адрес)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Родственники КАК Родственники
		|		ПО КВП_СведенияОЖильцахСрезПоследних.Объект.ФизЛицо = Родственники.СвязанноеФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&Дата, ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|		ПО КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
		|			И КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|				&Дата,
		|				ДатаИзменения <= &Дата
		|					И Зарегистрирован) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация
		|		ПО КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация.ЛицевойСчет
		|			И КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихРегистрация.Жилец
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|				&Дата,
		|				ДатаИзменения > &Дата
		|					И НЕ Зарегистрирован) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихОкончаниеРегистрации
		|		ПО КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихОкончаниеРегистрации.ЛицевойСчет
		|			И КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_СведенияОЗарегистрированныхСрезПоследнихОкончаниеРегистрации.Жилец
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
		|		ПО КВП_СведенияОЖильцахСрезПоследних.Объект = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
		|			И КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИтоговаяТаблица.Объект.Наименование КАК ФИО,
		|	ИтоговаяТаблица.Объект.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	ИтоговаяТаблица.Объект.ФизЛицо.МестоРождения КАК МестоРождения,
		|	ИтоговаяТаблица.ДатаСнятияРУ КАК ДатаСнятияРУ,
		|	ИтоговаяТаблица.ДатаРегистрации КАК ДатаРегистрации,
		|	ИтоговаяТаблица.СтепеньРодства КАК СтепеньРодства,
		|	ИтоговаяТаблица.ОтветственныйСобственникНаниматель КАК ОтветственныйСобственникНаниматель,
		|	ИтоговаяТаблица.ВидСобственности КАК ВидСобственности,
		|	ИтоговаяТаблица.Объект КАК Объект,
		|	ИтоговаяТаблица.Объект.ФизЛицо КАК ФизЛицо,
		|	ИтоговаяТаблица.ДатаОкончанияВременнойРегистрации КАК ДатаОкончанияВременнойРегистрации
		|ИЗ
		|	ИтоговаяТаблица КАК ИтоговаяТаблица
		|ГДЕ
		|	&ТекстУсловия";
		
		УсловиеЗапроса = "";
		// Устанавливаем вывод родственников. Если в настройка отчета установлено, что будет выводиться по
		// "Жильцам л/с", то поиск будет производиться по лицевому счету. Если установлено, что
		// по "Близким родственникам", то поиск будет производиться по адресу лицевого счета.
		Если ВыводРодственников Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "УПЖКХ_Жильцы.Владелец.Адрес = &Помещение");
			УсловиеЗапроса = "ИтоговаяТаблица.БлизкоеРодство";
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "УПЖКХ_Жильцы.Владелец = &ЛицевойСчет");
		КонецЕсли;
		
		// Устанавливаем условие, чтобы были только зарегистрированные.
		Если ТолькоЗарегистрированные Тогда
			УсловиеЗапроса = ?(ЗначениеЗаполнено(УсловиеЗапроса), УсловиеЗапроса + " И ИтоговаяТаблица.Зарегистрирован", "ИтоговаяТаблица.Зарегистрирован");
		КонецЕсли;
		
		УсловиеЗапроса = ?(ЗначениеЗаполнено(УсловиеЗапроса), УсловиеЗапроса, "ИСТИНА");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", УсловиеЗапроса);
		
		Запрос.УстановитьПараметр("Дата",                                КонецДня(Дата));
		Запрос.УстановитьПараметр("ЛицевойСчет",                         ЛицевойСчет);
		Запрос.УстановитьПараметр("Помещение",                           ЛицевойСчет.Адрес);
		Запрос.УстановитьПараметр("УпрощенныйВариантУчетаСобственников", ИспользуетсяУпрощенныйВариантУчетаСобственников());
		
		мСтруктураПредставленияОтветственногоСобственника = ПолучитьСтруктуруПредставленияОтветственногоСобственника();
		
		Запрос.УстановитьПараметр("ЧастныйСобственник",       мСтруктураПредставленияОтветственногоСобственника.ЧастныйСобственник);
		Запрос.УстановитьПараметр("МуниципальныйСобственник", мСтруктураПредставленияОтветственногоСобственника.МуниципальныйСобственник);
		Запрос.УстановитьПараметр("ПрочийСобственник",        мСтруктураПредставленияОтветственногоСобственника.ПрочийСобственник);
		
		ТаблицаПроживающих = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если СведенияПоПроживающему = Неопределено
	   И ПолучитьКоличествоЗарегистрированных(ЛицевойСчет, Дата) <= 0 Тогда
	   
		СписокПроживающих = Новый ТаблицаЗначений;
		ОбластьСообщение.Параметры.ДатаОтчета = Формат(Дата,"ДФ = dd.MM.yyyy");
		ДокументРезультат.Вывести(ОбластьСообщение);
	Иначе
		СписокПроживающих = ?(Не СведенияПоПроживающему = Неопределено, СведенияПоПроживающему.СписокПроживающих,
																		ТаблицаПроживающих);
		КоличествоСтрок = СписокПроживающих.Количество();
		
		Если КоличествоСтрок <= 0 Тогда
			ОбластьСообщение.Параметры.ДатаОтчета = Формат(Дата,"ДФ = dd.MM.yyyy");
			ДокументРезультат.Вывести(ОбластьСообщение);
		Иначе
			ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
			Для НомерПроживающего = 1 По КоличествоСтрок Цикл
				
				Если СписокПроживающих.Количество() >= НомерПроживающего Тогда
					
					ТекПроживающий = СписокПроживающих[НомерПроживающего - 1];
					
					ОбластьСтрокаТаблицы.Параметры.Заполнить(ТекПроживающий);
					
					Если Не ТекПроживающий.ДатаОкончанияВременнойРегистрации = Дата('00010101') Тогда
						ОбластьСтрокаТаблицы.Параметры.ДатаРегистрации = "с " + Формат(ТекПроживающий.ДатаРегистрации,"ДФ = dd.MM.yyyy") + " по " + Формат(ТекПроживающий.ДатаОкончанияВременнойРегистрации,"ДФ = dd.MM.yyyy");
					КонецЕсли;
					
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьСтрокаТаблицы);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Руководители = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(Организация, КонецДня(Дата));
	
	мСтруктураПодвала = Новый Структура;
	мСтруктураПодвала.Вставить("Директор",     Руководители.РуководительДолжность);
	мСтруктураПодвала.Вставить("ФИОДиректора", Руководители.РуководительПредставление);
	ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, мСтруктураПодвала);
	
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, СведенияПоПроживающему);
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьПодвал);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф16()

// Заполняет указанный табличный документ по форме №17 по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф17(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_17");
	
	ОбластьСтраница1   = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
	ОбластьСтраница1_1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
	ОбластьСтраница1_2 = Макет.ПолучитьОбласть("Страница1_2|ОбластьПечати");
	
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1);
	
	Если СведенияПоПроживающему = Неопределено Тогда
		СписокПроживающих = Новый ТаблицаЗначений;
		КоличествоСтрок = 6;
	Иначе
		СписокПроживающих = СведенияПоПроживающему.СписокПроживающих;
		КоличествоСтрок = СписокПроживающих.Количество();
	КонецЕсли;
	
	КоличествоПроживающих = 0;
	
	Для НомерПроживающего = 1 По КоличествоСтрок Цикл
		
		Если СписокПроживающих.Количество() >= НомерПроживающего Тогда
			
			ТекПроживающий = СписокПроживающих[НомерПроживающего - 1];
			
			Если НЕ СведенияПоПроживающему = Неопределено Тогда
				
				врСтруктураПараметров = Новый Структура("НомерКвартиры");
				врСтруктураПараметров.НомерКвартиры = СокрЛП(СтрЗаменить(ТекПроживающий.НомерКвартиры,"Кв.",""));
				
				ОбластьСтраница1_1.Параметры.Заполнить(ТекПроживающий);
				ОбластьСтраница1_1.Параметры.Заполнить(врСтруктураПараметров);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСтраница1_1);
		
	КонецЦикла;
	
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		СведенияПоПроживающему.Вставить("РабочаяДата", Дата);
		ОбластьСтраница1_2.Параметры.Заполнить(СведенияПоПроживающему);
	КонецЕсли;
	
	Руководители = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(Организация, КонецДня(Дата));
	
	мСтруктураПодвала = Новый Структура;
	мСтруктураПодвала.Вставить("Директор",     Руководители.РуководительДолжность);
	мСтруктураПодвала.Вставить("ФИОДиректора", Руководители.РуководительПредставление);
	ЗаполнитьЗначенияСвойств(ОбластьСтраница1_2.Параметры, мСтруктураПодвала);
	
	ДокументРезультат.Вывести(ОбластьСтраница1_2);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф17()

// Заполняет указанный табличный документ по форме №7 (СПБ) по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф7_СПБ(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_7_СПБ");
	
	ОбластьСтраница1   = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
	ОбластьСтраница11  = Макет.ПолучитьОбласть("Страница11|ОбластьПечати");
	ОбластьСтраница12  = Макет.ПолучитьОбласть("Страница12|ОбластьПечати");
	ОбластьСтраница1_1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
	ОбластьСтраница1_2 = Макет.ПолучитьОбласть("Страница1_2|ОбластьПечати");
	
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	ДокументРезультат.Вывести(ОбластьСтраница1);
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ТаблицаКомнат = СведенияПоПроживающему.ТаблицаКомнат;
		Для Каждого ТекСтрока Из ТаблицаКомнат Цикл
			ОбластьСтраница11.Параметры.Заполнить(ТекСтрока);
			ДокументРезультат.Вывести(ОбластьСтраница11);
		КонецЦикла;
		ОбластьСтраница12.Параметры.Заполнить(СведенияПоПроживающему);
	Иначе
		
		сПарам = новый Структура("Собственник, ЖилаяПлощадь");
		
		Для сч = 1 по 4 Цикл
			
			ОбластьСтраница11.Параметры.Заполнить(сПарам);
			
			ДокументРезультат.Вывести(ОбластьСтраница11);
			
		КонецЦикла;
		
	КонецЕсли;
	ДокументРезультат.Вывести(ОбластьСтраница12);
	
	// СВЕДЕНИЯ О ПРОЖИВАЮЩИХ
	
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		ОбластьСтраница1_1.Параметры.Заполнить(СведенияПоПроживающему);
		ТаблицаСобственников = СведенияПоПроживающему.ТаблицаСобственников;
	
		Для Каждого ТекСтрока Из ТаблицаСобственников Цикл
			
			ОбластьСтраница1_1.Параметры.Заполнить(ТекСтрока);
			
			ДокументРезультат.Вывести(ОбластьСтраница1_1);
			
		КонецЦикла;
		
	Иначе
		
		сПарам = новый Структура("Собственник, ЖилаяПлощадь");
		
		Для сч = 1 по 4 Цикл
			
			ОбластьСтраница1_1.Параметры.Заполнить(сПарам);
			
			ДокументРезультат.Вывести(ОбластьСтраница1_1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ПОДВАЛ
	
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница1_2.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1_2);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф7_СПБ()

// Заполняет указанный табличный документ по форме №9 (СПБ) по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_Ф9_СПБ(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_9_СПБ");

	ОбластьСтраница1   = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
	ОбластьСтраница1_1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
	ОбластьСтраница1_2 = Макет.ПолучитьОбласть("Страница1_2|ОбластьПечати");
	ОбластьСтраница1_3 = Макет.ПолучитьОбласть("Страница1_3|ОбластьПечати");
	
	СписокЗарегистрированныхКоличество = 0;
	
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		СведенияПоПроживающему.Вставить("СтрокаРегистрации", "зарегистрированному(ой)");
		
		СписокЗарегистрированных = СведенияПоПроживающему.СписокЗарегистрированных;
		
		СписокЗарегистрированныхКоличество = СписокЗарегистрированных.Количество();
		
		ЕдинственныйЗарегистрированный = СведенияПоПроживающему.ЕдинственныйЗарегистрированный;
		
	КонецЕсли;
	
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		Если ЕдинственныйЗарегистрированный Тогда
			ИнфОРегистрации = "Совместно с ним (ней) никто не зарегистрирован.";
		ИначеЕсли СписокЗарегистрированныхКоличество > 0 Тогда
			ИнфОРегистрации = "Совместно с ним (ней) зарегистрированы:";
		Иначе
			ИнфОРегистрации = "По данному адресу никто не зарегистрирован.";
		КонецЕсли;
		
		СведенияПоПроживающему.Вставить("ИнфОРегистрации", ИнфОРегистрации);
		
		Если ПустаяСтрока(СведенияПоПроживающему.СтатусРегистрацииПроживающего) Тогда
			СведенияПоПроживающему.Вставить("СтрокаРегистрации", "не зарегистрированному(ой)");
		КонецЕсли;
		
		ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1);
		
	// СПИСОК ЗАРЕГИСТРИРОВАННЫХ.
	
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		Если СписокЗарегистрированныхКоличество > 0 Тогда
			
			ДокументРезультат.Вывести(ОбластьСтраница1_1);
			Номер = 1;
			
			Для Каждого ТекСтрока Из СписокЗарегистрированных Цикл
				
				ТекСтрока.НомерПроживающего = Номер;
				ОбластьСтраница1_2.Параметры.Заполнить(ТекСтрока);
				
				ДокументРезультат.Вывести(ОбластьСтраница1_2);
				Номер = Номер + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ДокументРезультат.Вывести(ОбластьСтраница1_1);
		
		сПарам = новый Структура("ФИО, СтепеньРодства, ДатаРождения, ДатаРегистрации");
		
		Для сч = 1 по 4 Цикл
			
			ОбластьСтраница1_2.Параметры.Заполнить(сПарам);
			
			ДокументРезультат.Вывести(ОбластьСтраница1_2);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		ОбластьСтраница1_3.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1_3);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф9_СПБ()

// Заполняет табличный документ по форме С_Р по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_С_Р(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_Справка");

	ОбластьСтраница1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
	ОбластьСтраница2 = Макет.ПолучитьОбласть("Страница1_2|ОбластьПечати");
	ОбластьСтраница3 = Макет.ПолучитьОбласть("Страница1_3|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		Если ПустаяСтрока(СведенияПоПроживающему.СтатусРегистрацииПроживающего) Тогда
			СведенияПоПроживающему.Вставить("СтрокаРегистрации", "не зарегистрированному(ой)");
			СведенияПоПроживающему.Вставить("СведенияОРегистрации",
									"в том, что он (она) не зарегистрирован(а) по месту жительства по адресу:");
		Иначе
			СведенияПоПроживающему.Вставить("СтрокаРегистрации", "зарегистрированному(ой)");
			СведенияПоПроживающему.Вставить("СведенияОРегистрации",
									"в том, что он (она) зарегистрирован(а) по месту жительства по адресу:");
		КонецЕсли;
		
		ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
		ОбластьСтраница2.Параметры.Заполнить(СведенияПоПроживающему);
		ОбластьСтраница3.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1);
	Если ВыводитьДатуРегистрации Тогда
		ДокументРезультат.Вывести(ОбластьСтраница2);
	КонецЕсли;
	ДокументРезультат.Вывести(ОбластьСтраница3);
	
КонецПроцедуры // ЗаполнитьДокумент_С_Р()

// Заполняет табличный документ по форме С_ЗП по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_С_ЗП(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_Справка");

	ОбластьСтраница1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
	ОбластьСтраница2 = Макет.ПолучитьОбласть("Страница1_2|ОбластьПечати");
	ОбластьСтраница3 = Макет.ПолучитьОбласть("Страница1_3|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		Если ПустаяСтрока(СведенияПоПроживающему.СтатусРегистрацииПроживающего) Тогда
			СведенияПоПроживающему.Вставить("СтрокаРегистрации", "не зарегистрированному(ой)");
			СведенияПоПроживающему.Вставить("СведенияОРегистрации", "не зарегистрированному(ой) по месту жительства по адресу:");
		Иначе
			СведенияПоПроживающему.Вставить("СтрокаРегистрации", "зарегистрированному(ой)");
			СведенияПоПроживающему.Вставить("СведенияОРегистрации", "зарегистрированному(ой) по месту жительства по адресу:");
		КонецЕсли;
		
		ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
		ОбластьСтраница2.Параметры.Заполнить(СведенияПоПроживающему);
		ОбластьСтраница3.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1);
	Если ВыводитьДатуРегистрации Тогда
		ДокументРезультат.Вывести(ОбластьСтраница2);
	КонецЕсли;
	ДокументРезультат.Вывести(ОбластьСтраница3);
	
КонецПроцедуры // ЗаполнитьДокумент_С_ЗП()

// Заполняет табличный документ по форме С_ПР по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_С_ПР(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_Справка");

	ОбластьСтраница1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
	ОбластьСтраница2 = Макет.ПолучитьОбласть("Страница1_2|ОбластьПечати");
	ОбластьСтраница3 = Макет.ПолучитьОбласть("Страница1_3|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = Неопределено Тогда
		
		СведенияПоПроживающему.Вставить("СведенияОРегистрации",
									"в том, что он (она) будет зарегистрирована по месту жительства по адресу:  ");
		
		Если ПустаяСтрока(СведенияПоПроживающему.СтатусРегистрацииПроживающего) Тогда
			СведенияПоПроживающему.Вставить("СтрокаРегистрации", "не зарегистрированному(ой)");
		Иначе
			СведенияПоПроживающему.Вставить("СтрокаРегистрации", "зарегистрированному(ой)");
		КонецЕсли;
		
		ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
		ОбластьСтраница2.Параметры.Заполнить(СведенияПоПроживающему);
		ОбластьСтраница3.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1);
	Если ВыводитьДатуРегистрации Тогда
		ДокументРезультат.Вывести(ОбластьСтраница2);
	КонецЕсли;
	ДокументРезультат.Вывести(ОбластьСтраница3);
	
КонецПроцедуры // ЗаполнитьДокумент_С_ПР()

// Заполняет табличный документ по форме З_С по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_З_С(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_ЗаявлениеСобственниковНаРегистрацию");

	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_З_С()

// Заполняет табличный документ по форме РФЛ1 по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_РФЛ1(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_РФЛ1");
	
	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
	
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		Если СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			СведенияПоПроживающему.Вставить("ПолЖ", "V");
			СведенияПоПроживающему.Вставить("ПолМ", "");
		ИначеЕсли СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			СведенияПоПроживающему.Вставить("ПолЖ", "");
			СведенияПоПроживающему.Вставить("ПолМ", "V");
		КонецЕсли;
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_РФЛ1()

// Заполняет табличный документ по форме Ф1П по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф1П(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_1П");

	Если ВтораяСтраница Тогда
		
		ОбластьСтраница = Макет.ПолучитьОбласть("Страница2|ОбластьПечати");
		
	Иначе	
	
		ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	КонецЕсли;

	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		Если НЕ ВтораяСтраница Тогда
			
			Если СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				
				СведенияПоПроживающему.Вставить("ПолМуж", "Х");
				
			ИначеЕсли СведенияПоПроживающему.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				
				СведенияПоПроживающему.Вставить("ПолЖен", "Х");
				
			КонецЕсли;
		
		КонецЕсли;
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф1П()

// Заполняет табличный документ по форме №1ПР по данным указанным в структуре параметров.
// СведенияПоПроживающему - сведения о проживающем.
//
Процедура ЗаполнитьДокумент_Ф1ПР(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_1ПР");

	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
		
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница);
	
КонецПроцедуры // ЗаполнитьДокумент_Ф1ПР()

// Заполняет указанный табличный документ по форме ППВУ по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_ППВУ(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Форма_ППВУ");
	
	ОбластьСтраница1   = Макет.ПолучитьОбласть("Страница1|ОбластьПечати");
	ОбластьСтраница1_1 = Макет.ПолучитьОбласть("Страница1_1|ОбластьПечати");
	ОбластьСтраница1_2 = Макет.ПолучитьОбласть("Страница1_2|ОбластьПечати");
	ОбластьСтраница1_3 = Макет.ПолучитьОбласть("Страница1_3|ОбластьПечати");
	
	Если НЕ СведенияПоПроживающему = неопределено Тогда
		
		ОбластьСтраница1.Параметры.Заполнить(СведенияПоПроживающему);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтраница1);
	
	Если СведенияПоПроживающему = Неопределено Тогда
		СписокППВУ = Новый ТаблицаЗначений;
		КоличествоСтрок = 6;
	Иначе
		СписокППВУ = СведенияПоПроживающему.СписокППВУ;
		КоличествоСтрок = СписокППВУ.Количество();
	КонецЕсли;
	
	КоличествоПроживающих = 0;
	
	ПредПроживающий = Неопределено;
	ТекПроживающий = Неопределено;
	ПорядковыйНомер = 1;
	
	Для НомерПроживающего = 1 По КоличествоСтрок Цикл
		
		Если СписокППВУ.Количество() >= НомерПроживающего Тогда
			
			ТекПроживающий = СписокППВУ[НомерПроживающего - 1];
			
			врСтруктураПараметров = Новый Структура("ЗаголовокСписка");
			
			Если ТекПроживающий.ВозрастППВУ И ПредПроживающий = Неопределено Тогда
				
				врСтруктураПараметров.ЗаголовокСписка = "Проживающие " + СведенияПоПроживающему.ГодРожденияППВУ 
													  + " года рождения, подлежащие первоначальной постановке на воинский учет";
				
				ОбластьСтраница1_1.Параметры.Заполнить(врСтруктураПараметров);
				ДокументРезультат.Вывести(ОбластьСтраница1_1);
				
			ИначеЕсли НЕ ТекПроживающий.ВозрастППВУ И (ПредПроживающий = Неопределено ИЛИ ПредПроживающий.ВозрастППВУ) Тогда
				
				врСтруктураПараметров.ЗаголовокСписка = "Проживающие старше 17 лет, не состоящие, но обязанные состоять на воинском учете";
				ПорядковыйНомер = 1;
				
				ОбластьСтраница1_1.Параметры.Заполнить(врСтруктураПараметров);
				ДокументРезультат.Вывести(ОбластьСтраница1_1);
				
			КонецЕсли;
				
			ТекПроживающий.Номер = ПорядковыйНомер;
			ОбластьСтраница1_2.Параметры.Заполнить(ТекПроживающий);
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСтраница1_2);
		
		ПредПроживающий = ТекПроживающий;
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
	КонецЦикла;
	
	ОбластьСтраница1_3.Параметры.Заполнить(СведенияПоПроживающему);
	
	ДокументРезультат.Вывести(ОбластьСтраница1_3);
	
КонецПроцедуры // ЗаполнитьДокумент_ППВУ()

// Заполняет указанный табличный документ по форме С_С по данным
// в указанной структуре параметров.
Процедура ЗаполнитьДокумент_С_С(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница = Ложь)
	
	ЗаполнитьДокумент_Ф10(ДокументРезультат, СведенияПоПроживающему, ВтораяСтраница, "С_С");
	
КонецПроцедуры // ЗаполнитьДокумент_С_С()

// Формирует таблицу форм для распределения по бумаге
Функция СформироватьТаблицуФорм()
	
	тформ = новый ТаблицаЗначений;
	
	тФорм.Колонки.Добавить("СведенияПоПроживающему");
	тФорм.Колонки.Добавить("НомерФормы");
	тФорм.Колонки.Добавить("Формат");
	
	// Данные из таблицы отчета.
	ЕстьОшибки = Ложь;
	
	Для каждого Строка из ТаблицаДляПечати Цикл
		
		Если Строка.НомерФормы = "З_С" Тогда
			
			Если Строка.Проживающий.Пустая() Тогда
			
				СведенияПоПроживающему = неопределено;
				
				СтрокатФорм = тФорм.Добавить();
				
				СтрокатФорм.СведенияПоПроживающему = СведенияПоПроживающему;
				СтрокатФорм.НомерФормы             = Строка.НомерФормы;
				СтрокатФорм.Формат                 = мРазмерыФорм[Строка.НомерФормы];
				
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	УПЖКХ_СобственникиПомещений.Собственник
					|ИЗ
					|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаДок, Помещение = &Помещение)
					|		КАК УПЖКХ_СобственникиПомещений
					|ГДЕ
					|	УПЖКХ_СобственникиПомещений.Действует";
				
				Запрос.УстановитьПараметр("ДатаДок",    Дата);
				Запрос.УстановитьПараметр("Помещение",  Строка.Проживающий.Владелец.Адрес);
				
				тСобственников = Запрос.Выполнить().Выгрузить();
				
				Если тСобственников.Количество()=0 Тогда
					
					СведенияПоПроживающему = неопределено;
					
					СтрокатФорм = тФорм.Добавить();
					
					СтрокатФорм.СведенияПоПроживающему = СведенияПоПроживающему;
					СтрокатФорм.НомерФормы             = Строка.НомерФормы;
					СтрокатФорм.Формат                 = мРазмерыФорм[Строка.НомерФормы];
					
				КонецЕсли;
					
				Для каждого Собственник из тСобственников Цикл
					
					Попытка
						
						ДопПараметрыПечати = Новый Структура;
						ДопПараметрыПечати.Вставить("Заявитель", Собственник.Собственник);
						
						Выполнить("СведенияПоПроживающему = СобратьСведенияПоПроживающему_З_С(Строка.Проживающий, ДопПараметрыПечати)");
						
					Исключение
						
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не могу получить данные по "+Строка.Проживающий);
						
						Возврат Ложь;
						
					КонецПопытки;
					
					СтрокатФорм = тФорм.Добавить();
					
					СтрокатФорм.СведенияПоПроживающему = СведенияПоПроживающему;
					СтрокатФорм.НомерФормы             = Строка.НомерФормы;
					СтрокатФорм.Формат                 = мРазмерыФорм[Строка.НомерФормы];
				
				КонецЦикла;
				
			КонецЕсли;
			
			Продолжить;
			
		Иначе
			
			Если Строка.Проживающий.Пустая() И НЕ Строка.НомерФормы = "ППВУ" Тогда
				
				СведенияПоПроживающему = Неопределено;
				
			Иначе
				
				Если Строка.Проживающий.Пустая() Тогда
					
					СведенияПоПроживающему = Неопределено;
					
				КонецЕсли;
				
				Попытка
					
					ДопПараметрыПечати = ЗначениеИзСтрокиВнутр(Строка.ДопПараметрыПечати);
				
				Исключение
					
					ДопПараметрыПечати = Неопределено;
					
				КонецПопытки;
				
				ПараметрыФункции = "(Строка.Проживающий, ДопПараметрыПечати)";
				
				Если Строка.НомерФормы = "Ф6"
					 Или Строка.НомерФормы = "Ф6_Р"
					 Или Строка.НомерФормы = "Ф1"
					 Или Строка.НомерФормы = "Ф1ПР"Тогда
					
					ПараметрыФункции = "(Строка.Проживающий, Строка.Собственник, ДопПараметрыПечати)";
					
				КонецЕсли;
				
				Попытка
					
					Выполнить("СведенияПоПроживающему = СобратьСведенияПоПроживающему_"
							 + Строка.НомерФормы + ПараметрыФункции);
					
				Исключение
					мСообщениеОбОшибке = "Не могу получить данные по ";
					
					Если Не Строка.Проживающий.Пустая() Тогда
						мСообщениеОбОшибке = мСообщениеОбОшибке + Строка.Проживающий;
					Иначе
						мСообщениеОбОшибке = мСообщениеОбОшибке + "проживающим";
					КонецЕсли;
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(мСообщениеОбОшибке);
					
					Возврат Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
			СтрокатФорм = тФорм.Добавить();
			
			СтрокатФорм.СведенияПоПроживающему = СведенияПоПроживающему;
			СтрокатФорм.НомерФормы             = Строка.НомерФормы;
			СтрокатФорм.Формат                 = мРазмерыФорм[Строка.НомерФормы];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если тФорм.Количество()=0 Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ЕстьОшибки = Истина Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"При заполнении отчета произошли ошибки, отчет может быть не полон");
		
	КонецЕсли;
		
	Возврат тФорм;
	
КонецФункции //СформироватьТаблицуФорм()

// Выводит формы документов в соответствии с параметрами.
//
// Параметры:
//  ДокументРезультат - итоговый табличный документ.
//  ДокументСтрока    - Строка таблицы форм.
//  Растягивать       - Выводить форму в итоговый документ двойной ширины и высоты.
//  Присоединить      - Присоединить выводимую форму.
//  ВтораяСтраница    - нужна вторая сторона формы.
//  Высота            - копировать высоту строк с формы в ДокументРезультат.
//
Процедура ВывестиДокумент(ДокументРезультат, ДокументСтрока, Растягивать = Ложь, Присоединить = Ложь,
							ВтораяСтраница = Ложь, Высота = Ложь)
	
	ТабДок = новый ТабличныйДокумент;
	
	Выполнить("ЗаполнитьДокумент_" + ДокументСтрока.НомерФормы
				+ "(ТабДок,ДокументСтрока.СведенияПоПроживающему, ВтораяСтраница)");
	
	Если Присоединить Тогда
		
		ПрисоединитьОтчет(ДокументРезультат, ТабДок, ВтораяСтраница, Высота);
		
	Иначе
		
		ДобавитьОтчет(ДокументРезультат, ТабДок, Растягивать, ВтораяСтраница);
	КонецЕсли;
		
КонецПроцедуры

// Выводит формы документов в соответствии с параметрами.
//
// Параметры:
//  ДокументРезультат - итоговый табличный документ.
//  мСтрок            - массив строк таблицы форм.
//  гНаСтранице       - количество форм не странице по горизонтали.
//  Растягивать       - Выводить форму в итоговый документ двойной ширины и высоты.
//
Процедура РаспределитьФормы(ДокументРезультат,мСтрок, гНаСтранице, вНаСтранице, Растягивать = Ложь);
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФормыРегистрационногоУчета.ПФ_MXL_Служебный");
	
	ПустаяСтраница    		 = Макет.ПолучитьОбласть("Компенсатор"); //макет пустой страницы
	РазделительСтраниц		 = Макет.ПолучитьОбласть("Разделитель"); // горизонтальный разделитель страниц с разметкой
	РазделительСтраницПустой = Макет.ПолучитьОбласть("РазделительПустой"); // горизонтальный разделитель страниц без разметки
	РазделительВертикальный  = Макет.ПолучитьОбласть("РазделительВертикальный"); // вертикальный разделитель страниц с разметкой
	
	Сч = 0; //Счетчик форм в из массива
	
	нСтроки = 0; // номер формы на странице по горизонтали
	
	НужнаОборотнаяСторона = Ложь; // необходимость формирования страницы с оборотными сторонами форм
	
	ВтораяСторона = Новый ТабличныйДокумент; // документ на котором формируются оборотные стороны
	
	Пока Сч < мСтрок.Количество() Цикл
		
		// первый документ
		ПервыйДок = мСтрок[Сч];
		
		ВывестиДокумент(ДокументРезультат, ПервыйДок, Растягивать);
		
		нСтроки = нСтроки + 1;
		
		Если гНаСтранице > 1 Тогда
			
			Если вНаСтранице > 1 Тогда
			
				// выводим разделитель форм по горизонтали (с линиями или без)
				Если НЕ нСтроки = вНаСтранице Тогда
					
					ПрисоединитьОтчет(ДокументРезультат,РазделительСтраниц);
					
				Иначе
					
					ПрисоединитьОтчет(ДокументРезультат,РазделительСтраницПустой);
					
				КонецЕсли;
				
			Иначе
				
				ПрисоединитьОтчет(ДокументРезультат,РазделительСтраниц);
				
			КонецЕсли;
			
			Если НЕ ВыводитьОборотнуюСторонуСправа Тогда
			// Если флаг "Выводить оборотную сторону справа" не установлен
				
			
			Сч = Сч + 1;
			
				// второй документ
				Если Сч > мСтрок.Количество()-1 Тогда
					
					// второго нет формируем оборотную сторону первого
					Если мКоличествоСтраницВФормах[ПервыйДок.НомерФормы] = 2 Тогда
						// для двустраничных документов
						
						НужнаОборотнаяСторона = Истина;
						
						ДобавитьОтчет(ВтораяСторона, ПустаяСтраница, Растягивать, Истина, Ложь);
						ПрисоединитьОтчет(ВтораяСторона,РазделительСтраниц, Истина);
						ВывестиДокумент(ВтораяСторона, ПервыйДок, Растягивать, Истина, Истина, Истина);
						
					Иначе
						// для одностраничных документов
						РазделительДок = новый ТабличныйДокумент;
						
						РазделительДок.Вывести(ПустаяСтраница);
						
						ДобавитьОтчет(ДокументРезультат, РазделительДок, Истина);
						
					КонецЕсли;
					
				Иначе
					
					// выводим второй документ
					ВторойДок = мСтрок[Сч];
					
					// Здесь заполняется правая сторона страницы вторым документом, если он есть
					ВывестиДокумент(ДокументРезультат, ВторойДок, Растягивать, Истина);
					
					Если мКоличествоСтраницВФормах[ПервыйДок.НомерФормы] = 2 ИЛИ мКоличествоСтраницВФормах[ВторойДок.НомерФормы] = 2 Тогда
						
						// если нужно формируем оборотные стороны первого и второго документа
						НужнаОборотнаяСторона = Истина;
						
						Если мКоличествоСтраницВФормах[ВторойДок.НомерФормы] = 1 Тогда
							
							ДобавитьОтчет(ВтораяСторона,ПустаяСтраница, Растягивать, Истина);
							
						Иначе
						
							ВывестиДокумент(ВтораяСторона, ВторойДок, Растягивать, , Истина);
						
						КонецЕсли;
						
						Если НЕ нСтроки = вНаСтранице ИЛИ вНаСтранице = 1 Тогда 
							
							ПрисоединитьОтчет(ВтораяСторона,РазделительСтраниц, Истина);
							
						Иначе
							
							ПрисоединитьОтчет(ВтораяСторона,РазделительСтраницПустой, Истина);
							
						КонецЕсли;
						
						Если мКоличествоСтраницВФормах[ПервыйДок.НомерФормы] = 2 Тогда
							
							ВывестиДокумент(ВтораяСторона, ПервыйДок, Растягивать, Истина, Истина);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// 2 формы по вертикали
				Если вНаСтранице > 1 Тогда
					
					Если нСтроки = вНаСтранице Тогда 
						
						// конец страницы
						
						// первая сторона
						РазделительДок = новый ТабличныйДокумент;
						
						РазделительДок.Вывести(ПустаяСтраница);
						РазделительДок.Присоединить(РазделительСтраниц);
						
						ДобавитьОтчет(ДокументРезультат, РазделительДок, Растягивать);
						
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						
						Если НужнаОборотнаяСторона Тогда
							
							// вторая сторона
							ДобавитьОтчет(ВтораяСторона,ПустаяСтраница, Растягивать, Истина);
							
							ПрисоединитьОтчет(ВтораяСторона,РазделительСтраниц, Истина);
							
							ДобавитьОтчет(ДокументРезультат, ВтораяСторона);
								
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								
							НужнаОборотнаяСторона = Ложь;
							
							ВтораяСторона.Очистить();
							
						КонецЕсли;
						
						нСтроки = 0;
						
					Иначе
						
						РазделительДок = новый ТабличныйДокумент;
						
						РазделительДок.Вывести(РазделительВертикальный);
						РазделительДок.Присоединить(РазделительСтраниц);
						РазделительДок.Присоединить(РазделительВертикальный);
						
						ДобавитьОтчет(ДокументРезультат, РазделительДок, Растягивать);
						
						ДобавитьОтчет(ВтораяСторона, РазделительДок, Растягивать, Истина);
						
						Если Сч > мСтрок.Количество()-1 Тогда
							
							// формы кончились присоединяем оборотную сторону
							Если НужнаОборотнаяСторона Тогда
								
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								
								ДобавитьОтчет(ДокументРезультат, ВтораяСторона);
								
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								
								НужнаОборотнаяСторона = Ложь;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Если гНаСтранице > 1 Тогда 
						
						РазделительДок = новый ТабличныйДокумент;
						
						РазделительДок.Вывести(ПустаяСтраница);
						РазделительДок.Присоединить(РазделительСтраниц);
						
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						
						// вторая сторона
						Если НужнаОборотнаяСторона Тогда
							
							ПрисоединитьОтчет(ВтораяСторона,РазделительСтраниц, Истина);
							
							ДобавитьОтчет(ДокументРезультат, ВтораяСторона);
								
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								
							НужнаОборотнаяСторона = Ложь;
							
							ВтораяСторона.Очистить();
							
						КонецЕсли;
						
					КонецЕсли;
					
					нСтроки = 0;
					
				КонецЕсли;
				
			Иначе
				
				// Если флаг Выводить оборотную сторону справа установлен
				
				Если мКоличествоСтраницВФормах[ПервыйДок.НомерФормы] = 1 Тогда
					
					РазделительДок = новый ТабличныйДокумент;
					
					РазделительДок.Вывести(ПустаяСтраница);
					
					ДобавитьОтчет(ДокументРезультат, РазделительДок, Истина);
					
				Иначе
					
					ВывестиДокумент(ДокументРезультат, ПервыйДок, Растягивать, Истина, Истина);
					
				КонецЕсли;
				
				// 2 формы по вертикали
				Если вНаСтранице > 1 Тогда
					
					Если нСтроки = вНаСтранице Тогда 
						
						// конец страницы
						
						// первая сторона
						
						РазделительДок = новый ТабличныйДокумент;
						
						РазделительДок.Вывести(ПустаяСтраница);
						РазделительДок.Присоединить(РазделительСтраниц);
						
						ДобавитьОтчет(ДокументРезультат, РазделительДок, Растягивать);
						
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						
						нСтроки = 0;
						
					Иначе
						
						РазделительДок = новый ТабличныйДокумент;
						
						РазделительДок.Вывести(РазделительВертикальный);
						РазделительДок.Присоединить(РазделительСтраниц);
						РазделительДок.Присоединить(РазделительВертикальный);
						
						ДобавитьОтчет(ДокументРезультат, РазделительДок, Растягивать);
						
					КонецЕсли;
					
				Иначе
					
					Если гНаСтранице > 1 Тогда 
						
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						
					КонецЕсли;
					
					нСтроки = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
			
		Иначе // 1 форма по горизонтали
			
			Если вНаСтранице > 1 Тогда 
				
				Если нСтроки = вНаСтранице Тогда 
					
					// конец страницы
					
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
					// вторая сторона
					Если НужнаОборотнаяСторона Тогда

						ВывестиДокумент(ВтораяСторона, ПервыйДок, Растягивать, Ложь, Истина);
						
						ДобавитьОтчет(ДокументРезультат, ВтораяСторона);
							
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							
						НужнаОборотнаяСторона = Ложь;
						
						ВтораяСторона.Очистить();
						
					КонецЕсли;
					
					нСтроки = 0;
					
				Иначе
					
					Если мКоличествоСтраницВФормах[ПервыйДок.НомерФормы] = 2 Тогда
					
						НужнаОборотнаяСторона = Истина;
						
						ВывестиДокумент(ВтораяСторона, ПервыйДок, Растягивать, Ложь, Истина);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе	// 1 форма по вертикали
					
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				
				Если мКоличествоСтраницВФормах[ПервыйДок.НомерФормы] = 2 Тогда
					
					Если РазмерБумаги = Перечисления.КВП_РазмерБумаги.А5 И ПервыйДок.Формат = Перечисления.КВП_РазмерБумаги.А5 Тогда
						
						// для форм формата А5 на листе бумаги размером А5
						РазделительДок = новый ТабличныйДокумент;
						
						РазделительДок.Вывести(ПустаяСтраница);
						
						ДобавитьОтчет(ДокументРезультат, РазделительДок, Ложь);
					КонецЕсли;
						
					ВывестиДокумент(ДокументРезультат, ПервыйДок, Растягивать, , Истина);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	// Забыли вторую сторону
	
	Если НужнаОборотнаяСторона Тогда

		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		
		ДобавитьОтчет(ДокументРезультат, ВтораяСторона);
			
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
	КонецЕсли;
	
КонецПроцедуры

// Распределяет формы документов по бумаге.
//
// Параметры:
//  ДокументРезультат - итоговый табличный документ.
//  тФорм             - таблица данных форм.
//
Процедура РаспределитьФормыВсе(ДокументРезультат, тФорм);
	
	тФорм.Сортировать("Формат, НомерФормы");
	
	// Для случая, когда печатаются несколько форм сразу:
	// - если есть формы размера А4, то нужно установить РазмерБумаги в значение А4;
	мСтрок = тФорм.НайтиСтроки(новый Структура("Формат", Перечисления.КВП_РазмерБумаги.А4));
	Если НЕ мСтрок.Количество()=0 Тогда
		РазмерБумаги = Перечисления.КВП_РазмерБумаги.А4;
	КонецЕсли;
	
	// - если только что формировали отчет формата А6 с РазмеромБумаги = А6,
	// а затем выбрали форму формата А5, то устанавливаем РазмерБумаги в значение А4.
	мСтрок = тФорм.НайтиСтроки(новый Структура("Формат", Перечисления.КВП_РазмерБумаги.А5));
	Если НЕ мСтрок.Количество()=0 И РазмерБумаги = Перечисления.КВП_РазмерБумаги.А6 Тогда
		РазмерБумаги = Перечисления.КВП_РазмерБумаги.А4;
	КонецЕсли;
	
	// Сначала самые маленькие А6.
	мСтрок = тФорм.НайтиСтроки(новый Структура("Формат", Перечисления.КВП_РазмерБумаги.А6));
	
	БылиДок = Ложь;
	РастягиватьДок = Ложь;
	
	Если НЕ мСтрок.Количество() = 0 Тогда
		
		БылиДок = Истина;
		
		Если РазмерБумаги = Перечисления.КВП_РазмерБумаги.А4 Тогда
			
			РастягиватьДок = Истина;
			
			РаспределитьФормы(ДокументРезультат, мСтрок, 2, 2);
			
		ИначеЕсли РазмерБумаги = Перечисления.КВП_РазмерБумаги.А5 Тогда
			
			РастягиватьДок = Истина;
			
			РаспределитьФормы(ДокументРезультат, мСтрок, 2, 1);
			
		Иначе	
			
			РаспределитьФормы(ДокументРезультат, мСтрок, 1, 1);
			
		КонецЕсли;
	
	КонецЕсли;
	
	// А5.
	мСтрок = тФорм.НайтиСтроки(новый Структура("Формат", Перечисления.КВП_РазмерБумаги.А5));
	
	Если НЕ мСтрок.Количество() = 0 Тогда
		
		Если БылиДок Тогда
			
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		Если РазмерБумаги = Перечисления.КВП_РазмерБумаги.А4 Тогда
			
			РаспределитьФормы(ДокументРезультат, мСтрок, 1, 2, РастягиватьДок);
			
		Иначе
			
			Если Не БылиДок Тогда
				
				РастягиватьДок = Истина;
				
			КонецЕсли;
			
			РаспределитьФормы(ДокументРезультат, мСтрок, 1, 1, РастягиватьДок);
			
		КонецЕсли;
		
		БылиДок = Истина;
	
	КонецЕсли;
	
	// А4.
	мСтрок = тФорм.НайтиСтроки(новый Структура("Формат", Перечисления.КВП_РазмерБумаги.А4));
	
	Если НЕ мСтрок.Количество() = 0 Тогда
		
		Если БылиДок Тогда
			
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		РаспределитьФормы(ДокументРезультат, мСтрок, 1, 1, РастягиватьДок);
			
	КонецЕсли;
	
КонецПроцедуры // РаспределитьФормыВсе()

// Функция возвращает выборку записей из результата запроса по получению
// периодов регистрации проживающего.
//
// Параметры
//  ПроживающийДляВыборки - ссылка на элемент справочника "Жильцы".
//
// Возвращаемое значение:
//  выборка из результата запроса.
//
Функция ПолучитьПериодыРегистрации_Ф2(ПроживающийДляВыборки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ПроживающийДляВыборки);
	Запрос.УстановитьПараметр("Дата",   НачалоДня(Дата));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения) КАК Период,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Объект
	|ПОМЕСТИТЬ втРегистрация
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&Дата,
	|			Жилец = &Объект
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец КАК Объект,
	|	МИНИМУМ(УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения) КАК Период
	|ПОМЕСТИТЬ втСнятиеСРегистрации
	|ИЗ
	|	втРегистрация КАК втРегистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|		ПО втРегистрация.Объект = УПЖКХ_СведенияОЗарегистрированных.Жилец
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения > втРегистрация.Период
	|	И УПЖКХ_СведенияОЗарегистрированных.Жилец = &Объект
	|	И НЕ УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРегистрация.Период КАК ДатаРегистрации,
	|	втСнятиеСРегистрации.Период КАК ДатаСнятияСРегистрации
	|ИЗ
	|	втРегистрация КАК втРегистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСнятиеСРегистрации КАК втСнятиеСРегистрации
	|		ПО втРегистрация.Объект = втСнятиеСРегистрации.Объект";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьПериодыРегистрации_Ф2()

// Получает данные по собственникам помещения.
//
Функция ПолучитьДанныеПоСобственникуПомещения_Ф9_СПБ(Знач СписокСобственников, Помещение, Дата = Неопределено)
	
	Если НЕ ТипЗнч(СписокСобственников) = Тип("СписокЗначений") Тогда
		СпСобственников = Новый СписокЗначений;
		СпСобственников.Добавить(СписокСобственников);
	Иначе
		СпСобственников = СписокСобственников;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность КАК ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента КАК НомерДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента КАК ДатаДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ втСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Собственник В (&Собственник)
	|				И Помещение = &Помещение
	|				И Действует) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Помещение
	|ПОМЕСТИТЬ втСобственность
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&Дата,
	|			Помещение = &Помещение
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						втСобственники.Регистратор
	|					ИЗ
	|						втСобственники КАК втСобственники)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	втСобственность.ВидСобственности КАК ВидСобственности,
	|	втСобственность.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	втСобственники.ОснованиеПолученияВСобственность КАК ОснованиеПолученияВСобственность,
	|	втСобственники.ВидДокумента КАК ВидДокумента,
	|	втСобственники.НомерДокумента КАК НомерДокумента,
	|	втСобственники.ДатаДокумента КАК ДатаДокумента,
	|	втСобственники.Регистратор КАК ДокументИзмененияСобственности
	|ПОМЕСТИТЬ втДанныеСобственности
	|ИЗ
	|	втСобственники КАК втСобственники
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственность КАК втСобственность
	|		ПО втСобственники.Помещение = втСобственность.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность КАК ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента КАК НомерДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента КАК ДатаДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ втСобственникиБезОтбораПоСобственнику
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Помещение = &Помещение
	|				И Действует) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Помещение
	|ПОМЕСТИТЬ втСобственностьБезОтбораПоСобственнику
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&Дата,
	|			Помещение = &Помещение
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						втСобственникиБезОтбораПоСобственнику.Регистратор
	|					ИЗ
	|						втСобственникиБезОтбораПоСобственнику КАК втСобственникиБезОтбораПоСобственнику)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	втСобственностьБезОтбораПоСобственнику.ВидСобственности КАК ВидСобственности,
	|	втСобственностьБезОтбораПоСобственнику.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	втСобственникиБезОтбораПоСобственнику.ОснованиеПолученияВСобственность КАК ОснованиеПолученияВСобственность,
	|	втСобственникиБезОтбораПоСобственнику.ВидДокумента КАК ВидДокумента,
	|	втСобственникиБезОтбораПоСобственнику.НомерДокумента КАК НомерДокумента,
	|	втСобственникиБезОтбораПоСобственнику.ДатаДокумента КАК ДатаДокумента,
	|	втСобственникиБезОтбораПоСобственнику.Регистратор КАК ДокументИзмененияСобственности
	|ПОМЕСТИТЬ втДанныеСобственностиБезОтбораПоСобственнику
	|ИЗ
	|	втСобственникиБезОтбораПоСобственнику КАК втСобственникиБезОтбораПоСобственнику
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственностьБезОтбораПоСобственнику КАК втСобственностьБезОтбораПоСобственнику
	|		ПО втСобственникиБезОтбораПоСобственнику.Помещение = втСобственностьБезОтбораПоСобственнику.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСобственности.Приоритет КАК Приоритет,
	|	втДанныеСобственности.ВидСобственности КАК ВидСобственности,
	|	втДанныеСобственности.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	втДанныеСобственности.ОснованиеПолученияВСобственность КАК ОснованиеПолученияВСобственность,
	|	втДанныеСобственности.ВидДокумента КАК ВидДокумента,
	|	втДанныеСобственности.НомерДокумента КАК НомерДокумента,
	|	втДанныеСобственности.ДатаДокумента КАК ДатаДокумента,
	|	втДанныеСобственности.ДокументИзмененияСобственности КАК ДокументИзмененияСобственности
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	втДанныеСобственности КАК втДанныеСобственности
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДанныеСобственностиБезОтбораПоСобственнику.Приоритет,
	|	втДанныеСобственностиБезОтбораПоСобственнику.ВидСобственности,
	|	втДанныеСобственностиБезОтбораПоСобственнику.ПодвидЧастнойСобственности,
	|	втДанныеСобственностиБезОтбораПоСобственнику.ОснованиеПолученияВСобственность,
	|	втДанныеСобственностиБезОтбораПоСобственнику.ВидДокумента,
	|	втДанныеСобственностиБезОтбораПоСобственнику.НомерДокумента,
	|	втДанныеСобственностиБезОтбораПоСобственнику.ДатаДокумента,
	|	втДанныеСобственностиБезОтбораПоСобственнику.ДокументИзмененияСобственности
	|ИЗ
	|	втДанныеСобственностиБезОтбораПоСобственнику КАК втДанныеСобственностиБезОтбораПоСобственнику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.Приоритет КАК Приоритет,
	|	втИтоговыеДанные.ВидСобственности КАК ВидСобственности,
	|	втИтоговыеДанные.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	втИтоговыеДанные.ОснованиеПолученияВСобственность КАК ОснованиеПолученияВСобственность,
	|	втИтоговыеДанные.ВидДокумента КАК ВидДокумента,
	|	втИтоговыеДанные.НомерДокумента КАК НомерДокумента,
	|	втИтоговыеДанные.ДатаДокумента КАК ДатаДокумента,
	|	втИтоговыеДанные.ДокументИзмененияСобственности КАК ДокументИзмененияСобственности
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Если Дата = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Дата", "");
	Иначе
		Запрос.УстановитьПараметр("Дата", Дата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Помещение",   Помещение);
	Запрос.УстановитьПараметр("Собственник", СпСобственников);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеПоСобственникуПомещения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ МОДУЛЯ

#Область ИнициализацияПеременныхМодуля

мУпрощенныйВариантУчетаСобственников = ИспользуетсяУпрощенныйВариантУчетаСобственников();

мСписокФормОтчета = Отчеты.КВП_ФормыРегистрационногоУчета.ПолучитьСписокФормОтчета();

// Размер печатных форм
мРазмерыФорм = Новый Соответствие;

мРазмерыФорм.Вставить("Ф1",    Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф1П",   Перечисления.КВП_РазмерБумаги.А5);
мРазмерыФорм.Вставить("Ф1ПР",  Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф2",    Перечисления.КВП_РазмерБумаги.А6); //стандарт
мРазмерыФорм.Вставить("Ф3",    Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф5",    Перечисления.КВП_РазмерБумаги.А6); //стандарт
мРазмерыФорм.Вставить("Ф6",    Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф6_Р",  Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф6_С",  Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф7",    Перечисления.КВП_РазмерБумаги.А6); //стандарт
мРазмерыФорм.Вставить("Ф8",    Перечисления.КВП_РазмерБумаги.А6);
мРазмерыФорм.Вставить("Ф9",    Перечисления.КВП_РазмерБумаги.А5); //стандарт
мРазмерыФорм.Вставить("Ф10",   Перечисления.КВП_РазмерБумаги.А5); //стандарт
мРазмерыФорм.Вставить("Ф11",   Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф12_П", Перечисления.КВП_РазмерБумаги.А4); //стандарт
мРазмерыФорм.Вставить("Ф12_В", Перечисления.КВП_РазмерБумаги.А4); //стандарт
мРазмерыФорм.Вставить("Ф14",   Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф15",   Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф16",   Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф17",   Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф7_СПБ",Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф9_СПБ",Перечисления.КВП_РазмерБумаги.А4);

мРазмерыФорм.Вставить("С_С",   Перечисления.КВП_РазмерБумаги.А5);
мРазмерыФорм.Вставить("С_Р",   Перечисления.КВП_РазмерБумаги.А5);
мРазмерыФорм.Вставить("С_ЗП",  Перечисления.КВП_РазмерБумаги.А5);
мРазмерыФорм.Вставить("С_ПР",  Перечисления.КВП_РазмерБумаги.А5);
мРазмерыФорм.Вставить("З_С",   Перечисления.КВП_РазмерБумаги.А5);
мРазмерыФорм.Вставить("РФЛ1",  Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("ППВУ",  Перечисления.КВП_РазмерБумаги.А4);
мРазмерыФорм.Вставить("Ф3_МСК",Перечисления.КВП_РазмерБумаги.А4);

// Количество страниц в печатных формах.
мКоличествоСтраницВФормах = новый Соответствие;

мКоличествоСтраницВФормах.Вставить("Ф1",    1);
мКоличествоСтраницВФормах.Вставить("Ф1ПР",  1);
мКоличествоСтраницВФормах.Вставить("Ф1П",   2);
мКоличествоСтраницВФормах.Вставить("Ф2",    2);
мКоличествоСтраницВФормах.Вставить("Ф3",    1);
мКоличествоСтраницВФормах.Вставить("Ф5",    2);
мКоличествоСтраницВФормах.Вставить("Ф6",    1);
мКоличествоСтраницВФормах.Вставить("Ф6_Р",  1);
мКоличествоСтраницВФормах.Вставить("Ф6_С",  1);
мКоличествоСтраницВФормах.Вставить("Ф7",    2);
мКоличествоСтраницВФормах.Вставить("Ф8",    1);
мКоличествоСтраницВФормах.Вставить("Ф9",    2);
мКоличествоСтраницВФормах.Вставить("Ф10",   2);
мКоличествоСтраницВФормах.Вставить("Ф11",   2);
мКоличествоСтраницВФормах.Вставить("Ф12_П", 2);
мКоличествоСтраницВФормах.Вставить("Ф12_В", 2);
мКоличествоСтраницВФормах.Вставить("Ф14",   1);
мКоличествоСтраницВФормах.Вставить("Ф15",   1);
мКоличествоСтраницВФормах.Вставить("Ф16",   1);
мКоличествоСтраницВФормах.Вставить("Ф17",   1);
мКоличествоСтраницВФормах.Вставить("Ф7_СПБ",1);
мКоличествоСтраницВФормах.Вставить("Ф9_СПБ",1);

мКоличествоСтраницВФормах.Вставить("С_С",   2);
мКоличествоСтраницВФормах.Вставить("С_Р",   1);
мКоличествоСтраницВФормах.Вставить("С_ЗП",  1);
мКоличествоСтраницВФормах.Вставить("С_ПР",  1);
мКоличествоСтраницВФормах.Вставить("З_С",   1);
мКоличествоСтраницВФормах.Вставить("РФЛ1",  1);
мКоличествоСтраницВФормах.Вставить("ППВУ",  1);
мКоличествоСтраницВФормах.Вставить("Ф3_МСК",1);

мНачалоОбластиКолонка  = 1;
мНачалоОбластиСтрока   = 1;
мНачалоОбластиКолонка2 = 1;
мНачалоОбластиСтрока2  = 1;

#КонецОбласти

#КонецЕсли
