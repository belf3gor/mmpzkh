
#Область СлужебныеПроцедурыИФункции

// Функция возвращает структуру параметров для устанавки доступности настроек отчета.
//
&НаСервереБезКонтекста
Функция ПроверкаНомераФормыУчетаНаСервере(Знач ТаблицаДляПечати)
	
	тФорм = ТаблицаДляПечати.Выгрузить();
	
	тФорм.Свернуть("НомерФормы");
	
	тФорм.Колонки.Добавить("Формат");
	
	Доступность = Ложь;
	ФлагНаличияФормы = Ложь;
	ФлагНаличияФормыДата = Ложь;
	ФлагВыводаАктуальныхЖильцов = Ложь;
	РазмерБумаги = Перечисления.КВП_РазмерБумаги.ПустаяСсылка();
	
	// Размер печатных форм
	мРазмерыФорм = новый Соответствие;

	мРазмерыФорм.Вставить("Ф1",    Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф1П",   Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф2",    Перечисления.КВП_РазмерБумаги.А6); //стандарт
	мРазмерыФорм.Вставить("Ф3",    Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф5",    Перечисления.КВП_РазмерБумаги.А6); //стандарт
	мРазмерыФорм.Вставить("Ф6",    Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф6_Р",  Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф6_С",  Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф7",    Перечисления.КВП_РазмерБумаги.А6); //стандарт
	мРазмерыФорм.Вставить("Ф8",    Перечисления.КВП_РазмерБумаги.А6);
	мРазмерыФорм.Вставить("Ф9",    Перечисления.КВП_РазмерБумаги.А5); //стандарт
	мРазмерыФорм.Вставить("Ф10",   Перечисления.КВП_РазмерБумаги.А5); //стандарт
	мРазмерыФорм.Вставить("Ф11",   Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф12_П", Перечисления.КВП_РазмерБумаги.А4); //стандарт
	мРазмерыФорм.Вставить("Ф12_В", Перечисления.КВП_РазмерБумаги.А4); //стандарт
	мРазмерыФорм.Вставить("Ф14",   Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф15",   Перечисления.КВП_РазмерБумаги.А5);
	мРазмерыФорм.Вставить("Ф16",   Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф17",   Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф7_СПБ",Перечисления.КВП_РазмерБумаги.А4);
	мРазмерыФорм.Вставить("Ф9_СПБ",Перечисления.КВП_РазмерБумаги.А4);

	мРазмерыФорм.Вставить("С_Р",   Перечисления.КВП_РазмерБумаги.А5);
	мРазмерыФорм.Вставить("С_ЗП",  Перечисления.КВП_РазмерБумаги.А5);
	мРазмерыФорм.Вставить("С_ПР",  Перечисления.КВП_РазмерБумаги.А5);
	мРазмерыФорм.Вставить("З_С",   Перечисления.КВП_РазмерБумаги.А5);
	мРазмерыФорм.Вставить("РФЛ1",  Перечисления.КВП_РазмерБумаги.А4);
	
	Для каждого Строка из тФорм Цикл
		
		Строка.Формат = мРазмерыФорм[Строка.НомерФормы];
		Если Строка.НомерФормы = "Ф10" ИЛИ Строка.НомерФормы = "Ф9_СПБ" ИЛИ Строка.НомерФормы = "Ф11" 
		 ИЛИ Строка.НомерФормы = "Ф15" ИЛИ Строка.НомерФормы = "Ф16" Тогда
			ФлагНаличияФормы = Истина;
		КонецЕсли;
		
		Если Строка.НомерФормы = "С_Р" ИЛИ Строка.НомерФормы = "С_ПР" ИЛИ Строка.НомерФормы = "С_ЗП" Тогда
			ФлагНаличияФормыДата = Истина;
		КонецЕсли;
		
		Если Строка.НомерФормы = "Ф17" Тогда
			ФлагВыводаАктуальныхЖильцов = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	тФорм.Свернуть("Формат");
	
	мСтрок = тФорм.НайтиСтроки(новый Структура("Формат",Перечисления.КВП_РазмерБумаги.А4));
	
	Если НЕ мСтрок.Количество()=0 Тогда
		
		РазмерБумаги = Перечисления.КВП_РазмерБумаги.А4;
		
	Иначе
		
		мСтрок = тФорм.НайтиСтроки(новый Структура("Формат",Перечисления.КВП_РазмерБумаги.А5));
		
		Если НЕ мСтрок.Количество()=0 Тогда
			
			Доступность = Истина;
			
			МассивРазмерБумаги = Новый Массив;
			МассивРазмерБумаги.Добавить(Перечисления.КВП_РазмерБумаги.А4);
			МассивРазмерБумаги.Добавить(Перечисления.КВП_РазмерБумаги.А5);
			
		Иначе
			
			Доступность = Истина;
			
			МассивРазмерБумаги = Новый Массив;
			МассивРазмерБумаги.Добавить(Перечисления.КВП_РазмерБумаги.А4);
			МассивРазмерБумаги.Добавить(Перечисления.КВП_РазмерБумаги.А5);
			МассивРазмерБумаги.Добавить(Перечисления.КВП_РазмерБумаги.А6);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Новый Структура("ФлагНаличияФормы,ФлагНаличияФормыДата,РазмерБумаги,Доступность,МассивРазмерБумаги,ФлагВыводаАктуальныхЖильцов",
							ФлагНаличияФормы,ФлагНаличияФормыДата,РазмерБумаги,Доступность,МассивРазмерБумаги,ФлагВыводаАктуальныхЖильцов);
	
КонецФункции

// Процедура проверяет номер формы и устанавливает доступность настроек.
//
&НаКлиенте
Процедура ПроверкаНомераФормыУчета()
	
	СформироватьЗаголовокФормы();
	УстановитьВидимость();
	
	НастройкиСтруктура = ПроверкаНомераФормыУчетаНаСервере(Отчет.ТаблицаДляПечати);
	
	Элементы.ВыводРодственников.Доступность = НастройкиСтруктура.ФлагНаличияФормы;
	Элементы.ВыводитьДатуРегистрации.Доступность = НастройкиСтруктура.ФлагНаличияФормыДата;
	Элементы.ВыводитьТолькоАктуальныхЖильцов.Доступность = НастройкиСтруктура.ФлагВыводаАктуальныхЖильцов;
	Элементы.ВыводитьИсториюПоЖильцам.Доступность = НастройкиСтруктура.ФлагВыводаАктуальныхЖильцов;
	Элементы.РазмерБумаги.Доступность = НастройкиСтруктура.Доступность;
	
	Если НастройкиСтруктура.Доступность Тогда
		Элементы.РазмерБумаги.СписокВыбора.ЗагрузитьЗначения(НастройкиСтруктура.МассивРазмерБумаги);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаНомераФормыУчета()

// Обновляет заголовок формы в соответствии с выбранным номером формы.
//
&НаКлиенте
Процедура СформироватьЗаголовокФормы()
	
	Если Отчет.ТаблицаДляПечати.Количество() > 1 Тогда
		
		ЭтаФорма.Заголовок = "Формы регистрационного учета";
		
	Иначе
		
		Если Отчет.ТаблицаДляПечати.Количество() > 0 Тогда
			
			НомерФормы = Отчет.ТаблицаДляПечати.Получить(0).НомерФормы;
			
			ТекОтчет = Элементы.НомерФормы.СписокВыбора.НайтиПоЗначению(НомерФормы);
			
			Если ТекОтчет = Неопределено Тогда
				
				ЭтаФорма.Заголовок = "Формы регистрационного учета";
				
			Иначе
				
				ЭтаФорма.Заголовок = ТекОтчет.Представление;
				
			КонецЕсли;
			
		Иначе
			
			ЭтаФорма.Заголовок = "Формы регистрационного учета";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьЗаголовокФормы()

// Добавляет на форму надпись задолженность в соответствии с выбранными лицевым счетом и организацией.
//
&НаСервере
Процедура Подключаемый_ДобавитьНадписьЗадолженностьНаСервере()
	
	Структура = Новый Структура;
	Структура.Вставить("ЛицевойСчет", ЛицевойСчет);
	Структура.Вставить("Организация", Отчет.Организация);
	Структура.Вставить("Дата",        ТекущаяДата());
	
	УПЖКХ_ПодключаемыеЭлементыФормСервер.ДобавитьНадписьЗадолженность(ЭтаФорма, Элементы.ГруппаСобственник, Структура);

Конецпроцедуры

// Обработчик события "ОбработкаНавигационнойСсылки" надписи задолженность.
//
&НаКлиенте
Процедура Подключаемый_ЗадолженностьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("ЛицевойСчет",             ЛицевойСчет);
	СтруктураОткрытия.Вставить("Организация",             Отчет.Организация);
	СтруктураОткрытия.Вставить("НачалоПериода",           ДобавитьМесяц(ТекущаяДата(), -3));
	СтруктураОткрытия.Вставить("КонецПериода",            ТекущаяДата());
	СтруктураОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	
	УПЖКХ_ПодключаемыеЭлементыФормКлиент.ЗадолженностьОбработкаНавигационнойСсылки(СтруктураОткрытия);
	
КонецПроцедуры

// Устанавливает параметры выбора для полей формы.
&НаКлиенте
Процедура УстановитьПараметрыВыбораДляПоляСобственник(_ЛицевойСчет, ВызовИзТЧ)
	
	МассивПараметров = Новый Массив();
	
	МассивСобственников = ПолучитьМассивСобственников();
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ФизЛицо",  МассивСобственников));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", _ЛицевойСчет));
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Если ВызовИзТЧ Тогда
		Элементы.ТаблицаДляПечатиСобственник.ПараметрыВыбора = НовыеПараметрыВыбора;
	Иначе
		Элементы.Собственник.ПараметрыВыбора = НовыеПараметрыВыбора;
	КонецЕсли;
	
КонецПроцедуры

// Определяет по номеру формы регистрационного учета нужно ли использовать поле "Собственник".
&НаКлиенте
Функция ИспользоватьПолеСобственник()
	
	Если Отчет.НомерФормы = "Ф6"
		 Или Отчет.НомерФормы = "Ф6_Р"
		 Или Отчет.НомерФормы = "Ф1"
		 Или Отчет.НомерФормы = "Ф1ПР" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает массив собственников по лицевому счету.
&НаСервере
Функция ПолучитьМассивСобственников()
	
	ТаблицаСобственников = ПолучитьДанныеОСобственностиПомещения(ЛицевойСчет.Адрес, Отчет.Дата);
	
	Возврат ТаблицаСобственников.ВыгрузитьКолонку("Собственник");
	
КонецФункции

&НаСервере
// Определяет наименование макета текущей регистрационной формы.
Функция ОпределитьНаименованиеТекущегоМакетаФормРегистрационногоУчета(НомерФормы)
	
	НаименованиеМакета = "ПФ_MXL_Форма_1";
	
	Макет_НомерФормы = ПолучитьСоответствиеМакетаИНомераФормы();
	
	Макет = Макет_НомерФормы.Получить(НомерФормы);
	
	Если Макет <> Неопределено Тогда
		НаименованиеМакета = Макет;
	КонецЕсли;
	
	Возврат НаименованиеМакета;
	
КонецФункции

&НаСервере
// Формирует соответствие макета и номера формы.
Функция ПолучитьСоответствиеМакетаИНомераФормы()
	
	Макет_НомерФормы = Новый Соответствие;
	
	Макет_НомерФормы.Вставить("Ф1",     "ПФ_MXL_Форма_1");
	Макет_НомерФормы.Вставить("Ф1ПР",   "ПФ_MXL_Форма_1ПР");
	Макет_НомерФормы.Вставить("Ф1П",    "ПФ_MXL_Форма_1П");
	Макет_НомерФормы.Вставить("Ф2",     "ПФ_MXL_Форма_2");
	Макет_НомерФормы.Вставить("Ф3",     "ПФ_MXL_Форма_3");
	Макет_НомерФормы.Вставить("Ф5",     "ПФ_MXL_Форма_5");
	Макет_НомерФормы.Вставить("Ф6",     "ПФ_MXL_Форма_6");
	Макет_НомерФормы.Вставить("Ф6р",    "ПФ_MXL_Форма_6");
	Макет_НомерФормы.Вставить("Ф6с",    "ПФ_MXL_Форма_6");
	Макет_НомерФормы.Вставить("Ф7",     "ПФ_MXL_Форма_7");
	Макет_НомерФормы.Вставить("Ф8",     "ПФ_MXL_Форма_8");
	Макет_НомерФормы.Вставить("Ф9",     "ПФ_MXL_Форма_9");
	Макет_НомерФормы.Вставить("Ф10",    "ПФ_MXL_Форма_10");
	Макет_НомерФормы.Вставить("Ф11",    "ПФ_MXL_Форма_11");
	Макет_НомерФормы.Вставить("Ф12П",   "ПФ_MXL_Форма_12");
	Макет_НомерФормы.Вставить("Ф12В",   "ПФ_MXL_Форма_12");
	Макет_НомерФормы.Вставить("Ф14",    "ПФ_MXL_Форма_14");
	Макет_НомерФормы.Вставить("Ф15",    "ПФ_MXL_Форма_15");
	Макет_НомерФормы.Вставить("Ф16",    "ПФ_MXL_Форма_16");
	Макет_НомерФормы.Вставить("Ф17",    "ПФ_MXL_Форма_17");
	Макет_НомерФормы.Вставить("Ф7_СПБ", "ПФ_MXL_Форма_7_СПБ");
	Макет_НомерФормы.Вставить("Ф9_СПБ", "ПФ_MXL_Форма_9_СПБ");
	Макет_НомерФормы.Вставить("С_С",    "ПФ_MXL_Форма_С_С");
	Макет_НомерФормы.Вставить("С_Р",    "ПФ_MXL_Форма_Справка");
	Макет_НомерФормы.Вставить("С_ЗП",   "ПФ_MXL_Форма_Справка");
	Макет_НомерФормы.Вставить("С_ПР",   "ПФ_MXL_Форма_Справка");
	Макет_НомерФормы.Вставить("З_С",    "ПФ_MXL_Форма_ЗаявлениеСобственниковНаРегистрацию");
	Макет_НомерФормы.Вставить("РФЛ1",   "ПФ_MXL_Форма_РФЛ1");
	Макет_НомерФормы.Вставить("ППВУ",   "ПФ_MXL_Форма_ППВУ");
	Макет_НомерФормы.Вставить("Ф3_МСК", "ПФ_MXL_Форма_3_МСК");
	
	Возврат Макет_НомерФормы;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Проживающий",             Проживающий);
	Параметры.Свойство("ЛицевойСчет",             ЛицевойСчет);
	Параметры.Свойство("СформироватьПриОткрытии", СформироватьПриОткрытии);
	
	Если Параметры.Свойство("НомерФормы") Тогда
		СтрокаТЧ = Отчет.ТаблицаДляПечати.Добавить();
		СтрокаТЧ.НомерФормы = Параметры.НомерФормы;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.Настройки, Элементы.ГруппаНастройки.Видимость);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаОсновнаяКоманднаяПанель);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

// Обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаТаблицаДляПечати.Видимость = Ложь;
	
	//Проживающий = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	
	Отчет.НомерФормы = "Ф1";
	
	Отчет.Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	СтруктураОбщихПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтчета_КВП_ФормыРегистрационногоУчета");
	
	Если ТипЗнч(СтруктураОбщихПараметров) = Тип("Структура") Тогда
		
		Если Проживающий.Пустая() Тогда
			СтруктураОбщихПараметров.Свойство("Проживающий", Проживающий);
			СтруктураОбщихПараметров.Свойство("Собственник", Собственник);
		КонецЕсли;
		
		СтруктураОбщихПараметров.Свойство("ВыводРодственников",      Отчет.ВыводРодственников);
		СтруктураОбщихПараметров.Свойство("ВыводитьДатуРегистрации", Отчет.ВыводитьДатуРегистрации);
		
		СтруктураОбщихПараметров.Свойство("Форма", Отчет.НомерФормы);
		
		СтруктураОбщихПараметров.Свойство("Организация", Отчет.Организация);
		
		Если Отчет.Организация.Пустая() Тогда
			
			Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
			
		КонецЕсли;
		
		СтруктураОбщихПараметров.Свойство("РазмерБумаги", Отчет.РазмерБумаги);
		
	КонецЕсли;
	
	Если Отчет.ТаблицаДляПечати.Количество() = 0 Тогда
		
		СтрокаТЧ = Отчет.ТаблицаДляПечати.Добавить();
		
	Иначе
		
		СтрокаТЧ = Отчет.ТаблицаДляПечати[0];
		
		Если НЕ СтрокаТЧ.НомерФормы = "" Тогда
			
			Отчет.НомерФормы  = СтрокаТЧ.НомерФормы;
		
		КонецЕсли;
		
		Если НЕ СтрокаТЧ.Проживающий = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка") Тогда
			
			Проживающий = СтрокаТЧ.Проживающий;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отчет.НомерФормы = "" Тогда
		Отчет.НомерФормы = "Ф1";
		СтрокаТЧ.НомерФормы = "Ф1";
	Иначе
		СтрокаТЧ.НомерФормы  = Отчет.НомерФормы;
	КонецЕсли;
	
	СтрокаТЧ.Проживающий = Проживающий;
	СтрокаТЧ.Собственник = Собственник;
	
	ПроверкаНомераФормыУчета();
	
	Если НЕ СтрокаТЧ.Проживающий.Пустая() Тогда
		ЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Проживающий, "Владелец");
		СтрокаТЧ.ЛицевойСчет = ЛицевойСчет;
	КонецЕсли;
	
	Если СформироватьПриОткрытии Тогда
		СформироватьОтчет(Команды.СформироватьОтчет);
	КонецЕсли;
	
	УстановитьВидимостьКнопкиСравнитьМакетСТиповым();
	
	Подключаемый_ДобавитьНадписьЗадолженностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураОбщихПараметров = Новый Структура;
	
	СтруктураОбщихПараметров.Вставить("Организация",  Отчет.Организация);
	СтруктураОбщихПараметров.Вставить("РазмерБумаги", Отчет.РазмерБумаги);
	СтруктураОбщихПараметров.Вставить("ВыводРодственников",      Отчет.ВыводРодственников);
	СтруктураОбщихПараметров.Вставить("ВыводитьДатуРегистрации", Отчет.ВыводитьДатуРегистрации);
	
	Попытка
		
		СтруктураОбщихПараметров.Вставить("Проживающий",  Отчет.ТаблицаДляПечати[0].Проживающий);
		СтруктураОбщихПараметров.Вставить("ЛицевойСчет",  Отчет.ТаблицаДляПечати[0].ЛицевойСчет);
		СтруктураОбщихПараметров.Вставить("Собственник",  Отчет.ТаблицаДляПечати[0].Собственник);
		СтруктураОбщихПараметров.Вставить("Форма",        Отчет.ТаблицаДляПечати[0].НомерФормы);
		
	Исключение
		
	КонецПопытки;
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыОтчета_КВП_ФормыРегистрационногоУчета",,
																	СтруктураОбщихПараметров);
	
КонецПроцедуры

// Обработчик события "ОбработкаВыбора" формы.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Структура = Новый Структура();
	Структура.Вставить("Проживающий", ВыбранноеЗначение);
	Структура.Вставить("НомерФормы", ФормаДляПодбора);
	РезультатПоиска = Отчет.ТаблицаДляПечати.НайтиСтроки(Структура);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		
		СтрокаТЧ = Отчет.ТаблицаДляПечати.Добавить();
		
		СтрокаТЧ.Проживающий = ВыбранноеЗначение;
		СтрокаТЧ.ЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
		СтрокаТЧ.НомерФормы  = ФормаДляПодбора;
		
		ПроверкаНомераФормыУчета();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Обработчик события "ПриИзменении" поля ввода номера формы.
//
&НаКлиенте
Процедура НомерФормыПриИзменении(Элемент)
	
	Отчет.ТаблицаДляПечати[0].НомерФормы = Отчет.НомерФормы;
	
	Если Не ИспользоватьПолеСобственник() Тогда
		Собственник = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	КонецЕсли;
	
	ПроверкаНомераФормыУчета();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
	УстановитьВидимостьКнопкиСравнитьМакетСТиповым();
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" поля ввода проживающего.
//
&НаКлиенте
Процедура ПроживающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЛицевойСчет.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Справочник.УПЖКХ_Жильцы.Форма.ФормаВыбора", Новый Структура("ЛицевойСчет", ЛицевойСчет), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода проживающего.
//
&НаКлиенте
Процедура ПроживающийПриИзменении(Элемент)
	
	ЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Проживающий, "Владелец");
	
	// Собственником по лицевому счету может быть жилец только с этого лицевого счета,
	// поэтому при изменении лицевого счета очистим поле "Собственник".
	Если ИспользоватьПолеСобственник()
		 И Не УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Собственник, "Владелец") = ЛицевойСчет Тогда
		
		Собственник                           = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
		Отчет.ТаблицаДляПечати[0].Собственник = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
		
	КонецЕсли;
	
	Отчет.ТаблицаДляПечати[0].ЛицевойСчет = ЛицевойСчет;
	Отчет.ТаблицаДляПечати[0].Проживающий = Проживающий;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода собственника помещения.
//
&НаКлиенте
Процедура СобственникПриИзменении(Элемент)
	
	Отчет.ТаблицаДляПечати[0].Собственник = Собственник;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" поля ввода собственника помещения.
//
&НаКлиенте
Процедура СобственникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораДляПоляСобственник(ЛицевойСчет, Ложь);
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода лицевого счета.
//
&НаКлиенте
Процедура ЛицевойСчетПриИзменении(Элемент)
	
	Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Проживающий, "Владелец") <> ЛицевойСчет Тогда
		Проживающий = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
		Отчет.ТаблицаДляПечати[0].Проживающий = Проживающий;
	КонецЕсли;
	
	// Собственником по лицевому счету может быть жилец только с этого лицевого счета,
	// поэтому при изменении лицевого счета очистим поле "Собственник".
	Если ИспользоватьПолеСобственник()
		 И Не УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Собственник, "Владелец") = ЛицевойСчет Тогда
		
		Собственник                           = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
		Отчет.ТаблицаДляПечати[0].Собственник = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
		
	КонецЕсли;
	
	Отчет.ТаблицаДляПечати[0].ЛицевойСчет = ЛицевойСчет;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
	Подключаемый_ДобавитьНадписьЗадолженностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода даты начала периода.
//
Процедура ДатаПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода даты окончания периода.
//
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
	Подключаемый_ДобавитьНадписьЗадолженностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода размера бумаги.
//
Процедура РазмерБумагиПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "Вывод родственников".
//
Процедура ВыводРодственниковПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля флажка "Выводить оборотную сторону справа".
//
Процедура ВыводитьОборотнуюСторонуСправаПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля флажка "Выводить дату регистрации".
//
Процедура ВыводитьДатуРегистрацииПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля флажка "Выводить только актуальных жильцов".
//
Процедура ВыводитьТолькоАктуальныхЖильцовПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля флажка "Выводить историю по жильцам".
//
Процедура ВыводитьИсториюПоЖильцамПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" табличной части "Таблица для печати".
//
Процедура ТаблицаДляПечатиПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

&НаКлиенте
// Процедура - обработчик команды "СравнитьМакетСТиповым".
//
Процедура СравнитьМакетСТиповым(Команда)
	
	УПЖКХ_РаботаСДиалогамиКлиент.СравнитьТиповойМакетСПользовательским("Отчет.КВП_ФормыРегистрационногоУчета", ОпределитьНаименованиеТекущегоМакетаФормРегистрационногоУчета(Отчет.НомерФормы));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандныхПанелейФормы

// Обработчик нажатия кнопки "Сформировать" командной панели.
//
&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаСервере();
	
	// Настройки печати.
	Если НЕ Результат.ПолеСлева = Результат.ПолеСправа Тогда
		ТекстВопроса = "Для правильного вывода отчета на печать необходима одинаковая ширина полей слева и справа. Исправить?";
		ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьОтветПользователя", ЭтотОбъект);
		ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает ответ пользователя
Процедура ОбработатьОтветПользователя(РезультатОтвета, ДопПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Поле = Мин(Результат.ПолеСлева, Результат.ПолеСправа);
		
		Результат.ПолеСлева  = Поле;
		Результат.ПолеСправа = Поле;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователя()

// Процедура формирует отчет на сервере.
//
&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	ОтчетОбъект.ОбновитьОтчет(Результат);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

// Обработчик нажатия кнопки "Несколько форм" командной панели.
//
&НаКлиенте
Процедура НесколькоФорм(Команда)
	
	Элементы.НесколькоФорм.Пометка = Не Элементы.НесколькоФорм.Пометка;
	
	Если Элементы.НесколькоФорм.Пометка Тогда
		Элементы.ЛицевойСчет.Видимость = Ложь;
		Элементы.Проживающий.Видимость = Ложь;
		Элементы.НомерФормы.Видимость = Ложь;
		Элементы.ГруппаТаблицаДляПечати.Видимость = Истина;
		Элементы.ГруппаПанельНастроек.ТекущаяСтраница = Элементы.ГруппаТаблицаДляПечати;
		Элементы.Собственник.Видимость = Ложь;
	Иначе // одна форма
		Элементы.ЛицевойСчет.Видимость = Истина;
		Элементы.Проживающий.Видимость = Истина;
		Элементы.НомерФормы.Видимость = Истина;
		Элементы.ГруппаТаблицаДляПечати.Видимость = Ложь;
		
		Попытка
		
			Проживающий = Отчет.ТаблицаДляПечати[0].Проживающий;
			
			ЛицевойСчет = Отчет.ТаблицаДляПечати[0].ЛицевойСчет;
			
			Собственник = Отчет.ТаблицаДляПечати[0].Собственник;
			
			Отчет.НомерФормы = Отчет.ТаблицаДляПечати[0].НомерФормы;
			
			Отчет.ТаблицаДляПечати.Очистить();
			
			СтрокаТЧ = Отчет.ТаблицаДляПечати.Добавить();
			
			СтрокаТЧ.Проживающий = Проживающий;
			СтрокаТЧ.ЛицевойСчет = ЛицевойСчет;
			СтрокаТЧ.НомерФормы  = Отчет.НомерФормы;
			СтрокаТЧ.Собственник = Собственник;
			
		Исключение
			
		КонецПопытки;
		
		ПроверкаНомераФормыУчета();
		
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

// Обработчик нажатия кнопки "Настройки" командной панели.
//
&НаКлиенте
Процедура Настройки(Команда)
	
	Элементы.ГруппаНастройки.Видимость = Не Элементы.ГруппаНастройки.Видимость;
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.Настройки,
																			Элементы.ГруппаНастройки.Видимость);
	
КонецПроцедуры

// Обработчик нажатия кнопки "Подбор" командной панели таблицы "ТаблицаДляПечати".
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВыбораФормы", ЭтаФорма);
	СписокВыбораФорм = Элементы.НомерФормы.СписокВыбора;
	СписокВыбораФорм.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите форму", СписокВыбораФорм[0]);
	
КонецПроцедуры // Подбор()

// Обработчик события "ПриИзменении" поля ввода проживающего в таблице для печати.
//
&НаКлиенте
Процедура ТаблицаДляПечатиПроживающийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДляПечати.ТекущиеДанные;
	
	ТекущиеДанные.ЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Проживающий,
																						"Владелец");
	
	// Собственником по лицевому счету может быть жилец только с этого лицевого счета,
	// поэтому при изменении лицевого счета очистим поле "Собственник".
	Если ИспользоватьПолеСобственник()
		 И Не УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Собственник, "Владелец") = ТекущиеДанные.ЛицевойСчет Тогда
		
		ТекущиеДанные.Собственник = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода л/с в таблице для печати.
//
&НаКлиенте
Процедура ТаблицаДляПечатиЛицевойСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДляПечати.ТекущиеДанные;
	
	Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Проживающий,
																"Владелец") <> ТекущиеДанные.ЛицевойСчет Тогда
		ТекущиеДанные.Проживающий = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	КонецЕсли;
	
	// Собственником по лицевому счету может быть жилец только с этого лицевого счета,
	// поэтому при изменении лицевого счета очистим поле "Собственник".
	Если ИспользоватьПолеСобственник()
		 И Не УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Собственник, "Владелец") = ТекущиеДанные.ЛицевойСчет Тогда
		
		ТекущиеДанные.Собственник = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" поля ввода проживающего в таблице для печати.
//
&НаКлиенте
Процедура ТаблицаДляПечатиПроживающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДляПечати.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ЛицевойСчет.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Справочник.УПЖКХ_Жильцы.Форма.ФормаВыбора",
						Новый Структура("ЛицевойСчет", ТекущиеДанные.ЛицевойСчет), Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" поля ввода собственника помещения в таблице для печати.
//
&НаКлиенте
Процедура ТаблицаДляПечатиСобственникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДляПечати.ТекущиеДанные;
	
	УстановитьПараметрыВыбораДляПоляСобственник(ТекущиеДанные.ЛицевойСчет, Истина);
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода номера формы в таблице для печати.
//
&НаКлиенте
Процедура ТаблицаДляПечатиНомерФормыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДляПечати.ТекущиеДанные;
	
	Если Не ИспользоватьПолеСобственник() Тогда
		ТекущиеДанные.Собственник = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	КонецЕсли;
	
	ПроверкаНомераФормыУчета();
	
КонецПроцедуры

// Процедура возникает при сохранении настроек на сервере.
//
&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

// Процедура возникает при загрузке настроек на сервере.
//
&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	НайденныйМассив = Отчет.ТаблицаДляПечати.НайтиСтроки(Новый Структура("НомерФормы", "Ф3_МСК"));
	
	Если НайденныйМассив.Количество() = 0 И Не Отчет.НомерФормы = "Ф3_МСК" Тогда
		
		Элементы.ДатаОкончанияПериода.Видимость = Ложь;
		Элементы.ДекорацияТире.Видимость        = Ложь;
		Элементы.Дата.Заголовок = "Дата отчета";
		
		//Элементы.НадписьПериодС.Видимость  = Ложь;
		//Элементы.ПериодС.Видимость         = Ложь;
		//Элементы.НадписьПериодПо.Видимость = Ложь;
		//Элементы.ПериодПо.Видимость        = Ложь;
		//Элементы.НадписьПериодС.Видимость  = Ложь;
	Иначе
		Элементы.ДатаОкончанияПериода.Видимость = Истина;
		Элементы.ДекорацияТире.Видимость        = Истина;
		Элементы.Дата.Заголовок = "Период отчета";
	КонецЕсли;
	
	Отчет.ДатаОкончанияПериода = ТекущаяДата();
	
	Элементы.Собственник.Видимость = (Не Элементы.НесколькоФорм.Пометка И ИспользоватьПолеСобственник());
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
// Показываем кнопку сравнения пользовательского макета с типовым, если таковой используется.
Процедура УстановитьВидимостьКнопкиСравнитьМакетСТиповым()
	
	Макет  = ОпределитьНаименованиеТекущегоМакетаФормРегистрационногоУчета(Отчет.НомерФормы);
	
	Элементы.СравнитьМакетСТиповым.Видимость = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати("Отчет.КВП_ФормыРегистрационногоУчета", Макет);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора формы.
//
Процедура ОбработатьРезультатВыбораФормы(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДляПодбора = ВыбранныйЭлемент.Значение;
	
	ОткрытьФорму("Справочник.УПЖКХ_Жильцы.Форма.СпециальнаяФормаВыбора",
					Новый Структура("РежимВыбора,ЗакрыватьПриВыборе", Истина, Ложь), ЭтаФорма);
	
КонецПроцедуры // ОбработатьРезультатВыбораФормы()

#КонецОбласти


