
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

#Область ПеременныеКонтрольныхСоотношений

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/08/2018";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_1", Новый Цвет(192, 192, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР21М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР22М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР23М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР25М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М2");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекущееЗначениеКоэффициентаТ");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Ложь;
	ОтчетСкопированГодИзменился = Ложь;
	ОтчетСкопированСПериодаЗаСенОктНояДекНаИнойПериод = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.мСохраненныйДок.Организация)
				<> РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
				ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Истина;
			КонецЕсли;
			Если Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)
				<> Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
				ОтчетСкопированГодИзменился = Истина;
			КонецЕсли;
			Если Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) >= 9
				И Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 9 Тогда
				ОтчетСкопированСПериодаЗаСенОктНояДекНаИнойПериод = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если ЗаполнитьЗначенияПоУмолчанию ИЛИ ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ Тогда
		
		УстановитьКодПоМестуПоУмолчанию();
		
		// Установка в разделе 1 значения кода по ОКТМО.
		//
		ОргОКТМО = "";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
		Если СведенияОбОрганизации.Свойство("ОКТМО") Тогда
			ОргОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
		КонецЕсли;
		
		Дерево1 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
		Дерево1.Строки[0].Данные.Вставить("П000010001003", ОргОКТМО);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]
		= ПоместитьВоВременноеХранилище(Дерево1, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ОтчетСкопированСПериодаЗаСенОктНояДекНаИнойПериод ИЛИ ОтчетСкопированГодИзменился Тогда
		
		Дерево2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		
		Для каждого Ветка2 Из Дерево2.Строки Цикл
			Если ОтчетСкопированСПериодаЗаСенОктНояДекНаИнойПериод Тогда
				Ветка2.Данные.Вставить("П000020001003", 0);
				Ветка2.Данные.Вставить("П000020002003", 0);
				Ветка2.Данные.Вставить("П000020003003", 0);
			КонецЕсли;
			Если ОтчетСкопированГодИзменился Тогда
				Для каждого Ветка21 Из Ветка2.Строки[0].Строки Цикл
					Ветка21.Данные.Вставить("П0000200040А3", НалоговаяСтавкаВидаПодакцизногоТовара(
					СокрЛП(Ветка21.Данные["П000020004003"]), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		РасчетНаСервере("Раздел21");
		СформироватьРаздел1();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение) Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "120";
		
	Иначе
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "214";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "КППЮЛ");
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Если ЗначениеЗаполнено(КПП) Тогда
			Если Сред(КПП, 5, 2) = "50" И СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик Тогда
				
				ТабличныйДокумент.Области.ПоМесту.Значение = "213";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР1М1  = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппыР21М1 = "П00021М1";
	СтруктураРеквизитовФормы.мИдГруппыР22М1 = "П00022М1";
	СтруктураРеквизитовФормы.мИдГруппыР23М1 = "П00023М1";
	СтруктураРеквизитовФормы.мИдГруппыР25М1 = "П00025М1";
	СтруктураРеквизитовФормы.мИдГруппыП2М1  = "П00102М1";
	СтруктураРеквизитовФормы.мИдГруппыП2М2  = "П00102М2";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М102003");
	ИменаГраф.Добавить("П00001М103003");
	ИменаГраф.Добавить("П00001М104003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппыР1М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00021М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00021М100001");
	ИменаГраф.Добавить("П00021М100002");
	ИменаГраф.Добавить("П00021М100003");
	ИменаГраф.Добавить("П00021М100004");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппыР21М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00022М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00022М100001");
	ИменаГраф.Добавить("П00022М100002");
	ИменаГраф.Добавить("П00022М100003");
	ИменаГраф.Добавить("П00022М100004");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппыР22М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00023М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00023М100001");
	ИменаГраф.Добавить("П00023М100002");
	ИменаГраф.Добавить("П00023М100003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппыР23М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00025М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00025М100001");
	ИменаГраф.Добавить("П00025М100002");
	ИменаГраф.Добавить("П00025М100003");
	ИменаГраф.Добавить("П00025М100004");
	ИменаГраф.Добавить("П00025М100005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппыР25М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00102М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М100001");
	ИменаГраф.Добавить("П00102М100002");
	ИменаГраф.Добавить("П00102М100003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппыП2М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00102М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М207003");
	ИменаГраф.Добавить("П00102М207004");
	ИменаГраф.Добавить("П00102М207005");
	ИменаГраф.Добавить("П00102М207006");
	ИменаГраф.Добавить("П00102М207007");
	ИменаГраф.Добавить("П00102М208003");
	ИменаГраф.Добавить("П00102М208004");
	ИменаГраф.Добавить("П00102М208005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппыП2М2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел21");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР21М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР22М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР23М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР25М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел21", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Приложение11");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Приложение1");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение11", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Многостраничность");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение2", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			// Особая обработка значения показателя раздела 2.4 "Код показателя".
			Если ИмяПодчРаздела = "Раздел21" Тогда
				ПодчВетка.Данные.Вставить("П000240000001", "40001");
			КонецЕсли;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыйРаздел(ИмяРаздела)
	
	УдалитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, ТекВетка);
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела,
	ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение1";
	СтрокаУровня1.Представление      = "Приложение 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение2";
	СтрокаУровня1.Представление      = "Приложение 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2018Кв3");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора[?(СтруктураРеквизитовФормы.ИП,
	"МестаПредставленияИП", "МестаПредставленияЮЛ")]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М102003", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	//Раздел 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00021М100001", 5, ,
	"Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Р21"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00022М100001", 5, ,
	"Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Р22"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00023М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Р23"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Р24"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000011", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00025М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Р25"]);
	
	//Приложение 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001010001003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров_П1"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001010002003", 5, ,
	"Выбор кода операции (показателя)", КоллекцияСписковВыбора["КодыОпераций_П1"]);
	
	//Приложение 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020000103", 1, ,
	"Выбор признака документа", КоллекцияСписковВыбора["ПризнакиДокумента"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М100001", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М207003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М208003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	
	КодПериода = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодПериода = КодПериода + 70;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = Формат(КодПериода, "ЧЦ=2;ЧВН=");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение
	= Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = 
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда
		СобратьДанные();
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00025М100005")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001010002504")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М207007") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокГодов = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПервоеЧисло", Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		СтруктураПараметров.Вставить("ПоследнееЧисло", 1900);
		СтруктураПараметров.Вставить("ТипСтрока", Истина);
		
		СписокГодов.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		СписокГодов.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(Оп, СписокГодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокГодов.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00025М100004")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П001010002503")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М207006") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокМесяцев = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПервоеЧисло", 1);
		СтруктураПараметров.Вставить("ПоследнееЧисло", 12);
		СтруктураПараметров.Вставить("ДлинаСЛидирующимиНулями", 2);
		
		СписокМесяцев.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		Для каждого Эл Из СписокМесяцев Цикл
			Если Эл.Значение = "01" Тогда
				Эл.Представление = НСтр("ru='01 - январь'");
			ИначеЕсли Эл.Значение = "02" Тогда
				Эл.Представление = НСтр("ru='02 - февраль'");
			ИначеЕсли Эл.Значение = "03" Тогда
				Эл.Представление = НСтр("ru='03 - март'");
			ИначеЕсли Эл.Значение = "04" Тогда
				Эл.Представление = НСтр("ru='04 - апрель'");
			ИначеЕсли Эл.Значение = "05" Тогда
				Эл.Представление = НСтр("ru='05 - май'");
			ИначеЕсли Эл.Значение = "06" Тогда
				Эл.Представление = НСтр("ru='06 - июнь'");
			ИначеЕсли Эл.Значение = "07" Тогда
				Эл.Представление = НСтр("ru='07 - июль'");
			ИначеЕсли Эл.Значение = "08" Тогда
				Эл.Представление = НСтр("ru='08 - август'");
			ИначеЕсли Эл.Значение = "09" Тогда
				Эл.Представление = НСтр("ru='09 - сентябрь'");
			ИначеЕсли Эл.Значение = "10" Тогда
				Эл.Представление = НСтр("ru='10 - октябрь'");
			ИначеЕсли Эл.Значение = "11" Тогда
				Эл.Представление = НСтр("ru='11 - ноябрь'");
			ИначеЕсли Эл.Значение = "12" Тогда
				Эл.Представление = НСтр("ru='12 - декабрь'");
			КонецЕсли;
		КонецЦикла;
		
		СписокМесяцев.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(Оп, СписокМесяцев, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокМесяцев.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000010001003" Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М102003")
		ИЛИ ИмяПоказателя = "П000240000011" Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код бюджетной классификации должен состоять из 20 цифр. Значение очищено.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020004003" Тогда
		
		КодВидаПТ = СокрЛП(ТабличныйДокумент.Область("П000020004003").Значение);
		
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("КодВидаПТ", КодВидаПТ);
		СтруктПарам.Вставить("НомерСтраницы",
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= ПредставлениеСтраницыРаздела21(СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета
			= ПредставлениеСтраницыРаздела21(СтруктПарам);
		КонецЕсли;
		
		ТабличныйДокумент.Область("П0000200040А3").Значение
		= НалоговаяСтавкаВидаПодакцизногоТовара(КодВидаПТ, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П001010001003" ИЛИ ИмяПоказателя = "П001010002003" Тогда
		
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("КодВидаПТ", ТабличныйДокумент.Область("П001010001003").Значение);
		СтруктПарам.Вставить("КодОперации", ТабличныйДокумент.Область("П001010002003").Значение);
		СтруктПарам.Вставить("НомерСтраницы",
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= ПредставлениеСтраницыПриложения1(СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета
			= ПредставлениеСтраницыПриложения1(СтруктПарам);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П001010015003" ИЛИ ИмяПоказателя = "П001010015103" Тогда
		Если ТабличныйДокумент.Области.Найти("П001010015003").Значение <> 0
			И ТабличныйДокумент.Области.Найти("П001010015103").Значение <> 0 Тогда
			Если ИмяПоказателя = "П001010015003" Тогда
				ОчищаемаяОбл = ТабличныйДокумент.Области.Найти("П001010015103");
				Парам = "151";
			Иначе
				ОчищаемаяОбл = ТабличныйДокумент.Области.Найти("П001010015003");
				Парам = "150";
			КонецЕсли;
			ОчищаемаяОбл.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр(
			"ru='Не допускается одновременное заполнение строк 150 и 151. Значение в строке %1 очищено.'"), Парам);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
	// Особая обработка значения показателя раздела 2 "Значение коэффициента Т".
	Если ИмяРаздела = "Раздел2" И ИмяОбласти = "П000020003003" И НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		РасчетНаСервере("Раздел21");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НалоговаяСтавкаВидаПодакцизногоТовара(КодВидаПодакцизногоТовара, ДатаДействия)
	
	СтавкаВидаПТ = 0;
	
	ГодДействия = Год(ДатаДействия);
	
	Если ГодДействия = 2018 И ДатаДействия >= '20180701' Тогда
		
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "411", 2772, СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "430", 188,  СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "440", 2671, СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "470", 44,   СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "471", 11,   СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "472", 5280, СтавкаВидаПТ);
		
	ИначеЕсли ГодДействия = 2019 Тогда
		
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "411", 3050, СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "430", 207,  СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "440", 2938, СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "470", 48,   СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "471", 12,   СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "472", 5808, СтавкаВидаПТ);
		
	ИначеЕсли ГодДействия = 2020 Тогда
		
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "411", 3172, СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "430", 215,  СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "440", 3055, СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "470", 50,   СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "471", 13,   СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "472", 6040, СтавкаВидаПТ);
		
	ИначеЕсли ГодДействия = 2021 Тогда
		
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "411", 3299, СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "430", 224,  СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "440", 3177, СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "470", 52,   СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "471", 14,   СтавкаВидаПТ);
		СтавкаВидаПТ = ?(КодВидаПодакцизногоТовара = "472", 6282, СтавкаВидаПТ);
		
	КонецЕсли;
	
	Возврат СтавкаВидаПТ;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныйПараметр) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныйПараметр.Значение Тогда
			ДополнительныйПараметр.Значение = ВыбЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивЧиселЗаданныйИнтервалом(СтруктураПараметров)
	
	МассивЧисел = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ПервоеЧисло    = Неопределено;
		ПоследнееЧисло = Неопределено;
		
		Если СтруктураПараметров.Свойство("ПервоеЧисло", ПервоеЧисло)
			И СтруктураПараметров.Свойство("ПоследнееЧисло", ПоследнееЧисло) Тогда
			
			Если ПервоеЧисло <= ПоследнееЧисло Тогда
				ПоУбыванию = Ложь;
			Иначе
				ПоУбыванию = Истина;
				ПромежуточноеЗначение = ПервоеЧисло;
				ПервоеЧисло = ПоследнееЧисло;
				ПоследнееЧисло = ПромежуточноеЗначение;
			КонецЕсли;
			
			ТипСтрока = Ложь;
			СтруктураПараметров.Свойство("ТипСтрока", ТипСтрока);
			ТипСтрока = ТипСтрока = Истина;
			
			ДлинаСЛидирующимиНулями = Неопределено;
			СтруктураПараметров.Свойство("ДлинаСЛидирующимиНулями", ДлинаСЛидирующимиНулями);
			Если ТипЗнч(ДлинаСЛидирующимиНулями) <> Тип("Число")
				ИЛИ ДлинаСЛидирующимиНулями = 0 Тогда
				ДлинаСЛидирующимиНулями = Неопределено;
			КонецЕсли;
			
			Для ТекущееЧисло = ПервоеЧисло По ПоследнееЧисло Цикл
				
				Если ДлинаСЛидирующимиНулями <> Неопределено Тогда
					СтрокаФормата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ЧЦ=%1;ЧГ=;ЧВН=", ДлинаСЛидирующимиНулями);
					ТекущееЗначение = Формат(ТекущееЧисло, СтрокаФормата);
				ИначеЕсли ТипСтрока Тогда
					ТекущееЗначение = Формат(ТекущееЧисло, "ЧГ=");
				Иначе
					ТекущееЗначение = ТекущееЧисло;
				КонецЕсли;
				
				Если ПоУбыванию Тогда
					МассивЧисел.Вставить(0, ТекущееЗначение);
				Иначе
					МассивЧисел.Добавить(ТекущееЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЧисел;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = Форма.ТабличныйДокумент.Области.НаимОрг;
		ОблКодФормыРеорг = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОблКодИННРеорг   = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(Форма.ТабличныйДокумент.Области.ПоМесту.Значение);
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			
			ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
			
			Если ЗначениеЗаполнено(ЗначКодФормыРеорг)
				И ЗначКодФормыРеорг <> "0" Тогда
				
				Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
					Форма.ТабличныйДокумент.Области.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				КонецЕсли;
				
				РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение
				= Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			КонецЕсли;
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение11"
		ИЛИ ИмяРаздела = "Приложение2" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		ОблР2Стр010 = Форма.ТабличныйДокумент.Области.Найти("П000020001003");
		ОблР2Стр020 = Форма.ТабличныйДокумент.Области.Найти("П000020002003");
		ОблР2Стр030 = Форма.ТабличныйДокумент.Области.Найти("П000020003003");
		
		Если Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 9 Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблР2Стр010);
			РазрешитьВводДанныхВОбласть(Форма, ОблР2Стр020);
			РазрешитьВводДанныхВОбласть(Форма, ОблР2Стр030);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблР2Стр010);
			ЗапретитьВводДанныхВОбласть(Форма, ОблР2Стр020);
			ЗапретитьВводДанныхВОбласть(Форма, ОблР2Стр030);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		КодВидаПТ = СокрЛП(Форма.ТабличныйДокумент.Области["П000020004003"].Значение);
		
		КодыВидаПТ_ДоступностьСтавкиВидаПТ = Новый Массив;
		КодыВидаПТ_ДоступностьСтавкиВидаПТ.Добавить("411");
		КодыВидаПТ_ДоступностьСтавкиВидаПТ.Добавить("430");
		КодыВидаПТ_ДоступностьСтавкиВидаПТ.Добавить("440");
		КодыВидаПТ_ДоступностьСтавкиВидаПТ.Добавить("470");
		КодыВидаПТ_ДоступностьСтавкиВидаПТ.Добавить("471");
		КодыВидаПТ_ДоступностьСтавкиВидаПТ.Добавить("472");
		
		Обл = Форма.ТабличныйДокумент.Области.Найти("П0000200040А3");
		СекцияОбл = Форма.ТабличныйДокумент.Области.Найти("Секция_П0000200040А3");
		Если Обл <> Неопределено И СекцияОбл <> Неопределено Тогда
			Если КодыВидаПТ_ДоступностьСтавкиВидаПТ.Найти(КодВидаПТ) <> Неопределено Тогда
				РазрешитьВводДанныхВОбласть(Форма, Обл);
				СекцияОбл.Видимость = Истина;
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, Обл);
				СекцияОбл.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		КодыВидаПТ_НедоступностьР21Гр3Р22Гр3 = Новый Массив;
		КодыВидаПТ_НедоступностьР21Гр3Р22Гр3.Добавить("411");
		КодыВидаПТ_НедоступностьР21Гр3Р22Гр3.Добавить("430");
		КодыВидаПТ_НедоступностьР21Гр3Р22Гр3.Добавить("470");
		КодыВидаПТ_НедоступностьР21Гр3Р22Гр3.Добавить("471");
		КодыВидаПТ_НедоступностьР21Гр3Р22Гр3.Добавить("472");
		
		УстановитьНедоступностьР21Гр3Р22Гр3 = КодыВидаПТ_НедоступностьР21Гр3Р22Гр3.Найти(КодВидаПТ) <> Неопределено;
		
		// Особая обработка в графе 3 подраздела 2.1.
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = Форма.ТабличныйДокумент.Области.Найти("П00021М100003_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Если УстановитьНедоступностьР21Гр3Р22Гр3 Тогда
				ЗапретитьВводДанныхВОбласть(Форма, Обл);
			ИначеЕсли КодВидаПТ = "440" Тогда
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
			Иначе
				РазрешитьВводДанныхВОбласть(Форма, Обл);
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00021М100003_" + ИндексСтр);
		КонецЦикла;
		
		// Особая обработка в графе 3 подраздела 2.2.
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = Форма.ТабличныйДокумент.Области.Найти("П00022М100003_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Если УстановитьНедоступностьР21Гр3Р22Гр3 Тогда
				ЗапретитьВводДанныхВОбласть(Форма, Обл);
			ИначеЕсли КодВидаПТ = "440" Тогда
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
			Иначе
				РазрешитьВводДанныхВОбласть(Форма, Обл);
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00022М100003_" + ИндексСтр);
		КонецЦикла;
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		
		КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области["П001010002003"].Значение);
		
		КодыОпераций_ДоступностьП1Стр025 = Новый Массив;
		КодыОпераций_ДоступностьП1Стр025.Добавить("50001");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50002");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50003");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50004");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50005");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50006");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50007");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50008");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50009");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50010");
		КодыОпераций_ДоступностьП1Стр025.Добавить("50011");
		
		Обл1 = Форма.ТабличныйДокумент.Области.Найти("П001010002503");
		Обл2 = Форма.ТабличныйДокумент.Области.Найти("П001010002504");
		Если Обл1 <> Неопределено И Обл2 <> Неопределено Тогда
			Если КодыОпераций_ДоступностьП1Стр025.Найти(КодОперации) <> Неопределено Тогда
				РазрешитьВводДанныхВОбласть(Форма, Обл1);
				РазрешитьВводДанныхВОбласть(Форма, Обл2);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, Обл1);
				ЗапретитьВводДанныхВОбласть(Форма, Обл2);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		// Особая обработка значения показателя раздела 2 "Значение коэффициента Т".
		Если ИмяТекРаздела = "Раздел21" Тогда
			СтруктураРеквизитовФормы.ТекущееЗначениеКоэффициентаТ = ТекВетка.Родитель.Родитель.Данные["П000020003003"];
		КонецЕсли;
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Приложение1" ИЛИ ИмяРаздела = "Приложение2" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	ИначеЕсли ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Приложение11" Тогда
		ДобавитьСтраницуУровня1(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
		Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня1(ИмяРаздела)
	
	ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИмяГлавногоРаздела"];
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
		Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	// Особая обработка значения показателя раздела 2.4 "Код показателя".
	Если ИмяРаздела = "Раздел21" Тогда
		ТабличныйДокумент.Область("П000240000001").Значение = "40001";
	КонецЕсли;
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] = НомерНовВетки;
	
	Если ИмяРаздела = "Раздел21" Тогда
		Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				ТекСтраницаРаздела1 = ИскомыйРаздел;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				Для каждого НайденнаяСтраница1 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница1.КолонкаНомерСтраницыРазделаОтчета
						= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
						ТекСтраницаРаздела1 = НайденнаяСтраница1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого НайденнаяСтраница11 Из ТекСтраницаРаздела1.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница11.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница11.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Приложение1" ИЛИ ИмяРаздела = "Приложение2" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
	ИначеЕсли ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Приложение11" Тогда
		УдалитьСтраницуУровня1(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня1(ИмяРаздела)
	
	ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИмяГлавногоРаздела"];
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Если ИмяРаздела = "Раздел21" Тогда
		Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				ТекСтраницаРаздела1 = ИскомыйРаздел;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				Для каждого НайденнаяСтраница1 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница1.КолонкаНомерСтраницыРазделаОтчета
						= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
						ТекСтраницаРаздела1 = НайденнаяСтраница1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого НайденнаяСтраница11 Из ТекСтраницаРаздела1.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница11.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница11.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока, Индекс, ИндексСтр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел21" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				КодВидаПТ = СокрЛП(Форма.ТабличныйДокумент.Область("П000020004003").Значение);
				
				СтавкаВидаПТ = Форма.ТабличныйДокумент.Область("П0000200040А3").Значение;
				
				КодыВидаПТ_440_450_460 = Новый Массив;
				КодыВидаПТ_440_450_460.Добавить("440");
				КодыВидаПТ_440_450_460.Добавить("450");
				КодыВидаПТ_440_450_460.Добавить("460");
				
				МесяцВДиапазонеСентябрь_Декабрь = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 9;
				
				// Расчет подразделе 2.1.
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Пока Форма.ТабличныйДокумент.Области.Найти("П00021М100002_" + ИндексСтр) <> Неопределено Цикл
					
					Р21Гр2 = Форма.ТабличныйДокумент.Область("П00021М100002_" + ИндексСтр).Значение;
					
					Если КодВидаПТ = "440" Тогда
						// Расчет в графе 3.
						Форма.ТабличныйДокумент.Область("П00021М100003_" + ИндексСтр).Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Р21Гр2 * СтавкаВидаПТ);
					Иначе
						// Расчет не предусмотрен.
					КонецЕсли;
					
					// Расчет в графе 4.
					Если КодыВидаПТ_440_450_460.Найти(КодВидаПТ) <> Неопределено Тогда
						Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Область("П00021М100003_" + ИндексСтр).Значение);
						Если МесяцВДиапазонеСентябрь_Декабрь Тогда
							Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.СтруктураРеквизитовФормы.ТекущееЗначениеКоэффициентаТ * Сумма);
						КонецЕсли;
						Форма.ТабличныйДокумент.Область("П00021М100004_" + ИндексСтр).Значение = Сумма;
					Иначе
						Форма.ТабличныйДокумент.Область("П00021М100004_" + ИндексСтр).Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Р21Гр2 * СтавкаВидаПТ);
					КонецЕсли;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				// Расчет подразделе 2.2.
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Пока Форма.ТабличныйДокумент.Области.Найти("П00022М100002_" + ИндексСтр) <> Неопределено Цикл
					
					Р22Гр2 = Форма.ТабличныйДокумент.Область("П00022М100002_" + ИндексСтр).Значение;
					
					Если КодВидаПТ = "440" Тогда
						// Расчет в графе 3.
						Форма.ТабличныйДокумент.Область("П00022М100003_" + ИндексСтр).Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Р22Гр2 * СтавкаВидаПТ);
					Иначе
						// Расчет не предусмотрен.
					КонецЕсли;
					
					// Расчет в графе 4.
					Если КодыВидаПТ_440_450_460.Найти(КодВидаПТ) <> Неопределено Тогда
						Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Область("П00022М100003_" + ИндексСтр).Значение);
						Если МесяцВДиапазонеСентябрь_Декабрь Тогда
							Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.СтруктураРеквизитовФормы.ТекущееЗначениеКоэффициентаТ * Сумма);
						КонецЕсли;
						Форма.ТабличныйДокумент.Область("П00022М100004_" + ИндексСтр).Значение = Сумма;
					Иначе
						Форма.ТабличныйДокумент.Область("П00022М100004_" + ИндексСтр).Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Р22Гр2 * СтавкаВидаПТ);
					КонецЕсли;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				// Расчет подразделе 2.4.
				КодыОперацийДляСуммирования = Новый Массив;
				КодыОперацийДляСуммирования.Добавить("20003");
				КодыОперацийДляСуммирования.Добавить("20004");
				КодыОперацийДляСуммирования.Добавить("20005");
				КодыОперацийДляСуммирования.Добавить("20007");
				КодыОперацийДляСуммирования.Добавить("20009");
				КодыОперацийДляСуммирования.Добавить("20011");
				КодыОперацийДляСуммирования.Добавить("20013");
				КодыОперацийДляСуммирования.Добавить("20015");
				
				Сумма = 0;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00021М100004_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл.Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00021М100004_" + ИндексСтр);
				КонецЦикла;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00022М100004_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.Найти("П00022М100001_" + ИндексСтр).Значение);
					Если КодыОперацийДляСуммирования.Найти(КодОперации) <> Неопределено Тогда
						Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл.Значение);
					КонецЕсли;
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00022М100004_" + ИндексСтр);
				КонецЦикла;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00023М100003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Сумма = Сумма - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл.Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00023М100003_" + ИндексСтр);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области["П000240000001"].Значение = ?(Сумма >= 0, "40001", "40002");
				Форма.ТабличныйДокумент.Области["П000240000002"].Значение = ?(Сумма >= 0, Сумма, - Сумма);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение11" Тогда
	
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П001010008003, ОбластьИмя) > 0 Тогда
					
					Форма.ТабличныйДокумент.Области["П001010008003"].Значение
					= Окр(Форма.ТабличныйДокумент.Области["П001010006003"].Значение
					* Форма.ТабличныйДокумент.Области["П001010007003"].Значение / 1000, 3);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П001010011003, ОбластьИмя) > 0 Тогда
					
					Форма.ТабличныйДокумент.Области["П001010011003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П001010006003"].Значение
					* Форма.ТабличныйДокумент.Области["П001010010003"].Значение);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П001010013003, ОбластьИмя) > 0 Тогда
					
					Форма.ТабличныйДокумент.Области["П001010013003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П001010009003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П001010012003"].Значение);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П001010015003, ОбластьИмя) > 0
					ИЛИ СтрЧислоВхождений(СтруктЗависимыхЯчеек.П001010015103, ОбластьИмя) > 0 Тогда
					
					Стр130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П001010013003"].Значение);
					
					Стр140 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П001010014003"].Значение);
					
					Форма.ТабличныйДокумент.Области["П001010015003"].Значение = ?(Стр130 >= Стр140, Стр130, 0);
					Форма.ТабличныйДокумент.Области["П001010015103"].Значение = ?(Стр140 > Стр130, Стр140, 0);
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
	
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П001020006003, ОбластьИмяБезИнд) > 0 Тогда
					
					Сумма = 0;
					РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00102М100003_" + ИндексСтр);
					Пока Обл <> Неопределено Цикл
						Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл.Значение);
						РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
						Обл = Форма.ТабличныйДокумент.Области.Найти("П00102М100003_" + ИндексСтр);
					КонецЦикла;
					Форма.ТабличныйДокумент.Области["П001020006003"].Значение = Сумма;
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П001020006503, ОбластьИмяБезИнд) > 0 Тогда
					
					Сумма = 0;
					РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00102М207005_" + ИндексСтр);
					Пока Обл <> Неопределено Цикл
						Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл.Значение);
						Обл1 = Форма.ТабличныйДокумент.Области.Найти("П00102М208005_" + ИндексСтр);
						Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл1.Значение);
						РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
						Обл = Форма.ТабличныйДокумент.Области.Найти("П00102М207005_" + ИндексСтр);
					КонецЦикла;
					Форма.ТабличныйДокумент.Области["П001020006503"].Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П001020006003"].Значение) - Сумма, 0);
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Раздел21" Тогда
		
		КодыВидаПТ_440_450_460 = Новый Массив;
		КодыВидаПТ_440_450_460.Добавить("440");
		КодыВидаПТ_440_450_460.Добавить("450");
		КодыВидаПТ_440_450_460.Добавить("460");
		
		МесяцВДиапазонеСентябрь_Декабрь = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 9;
		
		КодыОперацийДляСуммирования = Новый Массив;
		КодыОперацийДляСуммирования.Добавить("20003");
		КодыОперацийДляСуммирования.Добавить("20004");
		КодыОперацийДляСуммирования.Добавить("20005");
		КодыОперацийДляСуммирования.Добавить("20007");
		КодыОперацийДляСуммирования.Добавить("20009");
		КодыОперацийДляСуммирования.Добавить("20011");
		КодыОперацийДляСуммирования.Добавить("20013");
		КодыОперацийДляСуммирования.Добавить("20015");
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ИмяГруппыМнЧР21М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР21М1;
		СтруктураГруппыМнЧР21М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР21М1];
		ИменаГрафМнЧР21М1 = СтруктураГруппыМнЧР21М1["ИменаГраф"];
		
		ИмяГруппыМнЧР22М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР22М1;
		СтруктураГруппыМнЧР22М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР22М1];
		ИменаГрафМнЧР22М1 = СтруктураГруппыМнЧР22М1["ИменаГраф"];
		
		ИмяГруппыМнЧР23М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР23М1;
		СтруктураГруппыМнЧР23М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР23М1];
		ИменаГрафМнЧР23М1 = СтруктураГруппыМнЧР23М1["ИменаГраф"];
		
		ИмяГруппыМнЧР25М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР25М1;
		СтруктураГруппыМнЧР25М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР25М1];
		ИменаГрафМнЧР25М1 = СтруктураГруппыМнЧР25М1["ИменаГраф"];
		
		АктивнаяВеткаР21 = Неопределено;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			АктивнаяВеткаР21 = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
			
		КонецЕсли;
		
		Для каждого ВеткаР2 Из ДеревоДанных.Строки Цикл
			
			// Особая обработка значения показателя раздела 2 "Значение коэффициента Т".
			АктивнаяВеткаР2 = Неопределено;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
				АктивнаяВеткаР2 = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
			КонецЕсли;
			Если ВеткаР2 = АктивнаяВеткаР2 Тогда
				ВеткаР2.Данные.Вставить("П000020003003", Форма.ТабличныйДокумент.Области["П000020003003"].Значение);
			КонецЕсли;
			
			Для каждого ВеткаР21 Из ВеткаР2.Строки[0].Строки Цикл
				
				ДеревоМнЧР21М1 = ВеткаР21.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР21М1];
				ДеревоМнЧР22М1 = ВеткаР21.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР22М1];
				ДеревоМнЧР23М1 = ВеткаР21.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР23М1];
				ДеревоМнЧР25М1 = ВеткаР21.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР25М1];
				
				Если ВеткаР21 = АктивнаяВеткаР21 Тогда
					Для каждого Пок Из ВеткаР21.Данные Цикл
						ВеткаР21.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
					КонецЦикла;
					Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
						ИндСтроки = Формат(ДеревоМнЧР21М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧР21М1 Цикл
							СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
					Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
						ИндСтроки = Формат(ДеревоМнЧР22М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧР22М1 Цикл
							СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
					Для каждого СтрокаМнЧ Из ДеревоМнЧР23М1.Строки Цикл
						ИндСтроки = Формат(ДеревоМнЧР23М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧР23М1 Цикл
							СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				КодВидаПТ = СокрЛП(ВеткаР21.Данные["П000020004003"]);
				
				СтавкаВидаПТ = ВеткаР21.Данные["П0000200040А3"];
				
				// Расчет подразделе 2.1.
				Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
					
					Р21Гр2 = СтрокаМнЧ.Данные["П00021М100002"];
					
					Если КодВидаПТ = "440" Тогда
						// Расчет в графе 3.
						СтрокаМнЧ.Данные.Вставить("П00021М100003",
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Р21Гр2 * СтавкаВидаПТ));
					Иначе
						// Расчет не предусмотрен.
					КонецЕсли;
					
					// Расчет в графе 4.
					Если КодыВидаПТ_440_450_460.Найти(КодВидаПТ) <> Неопределено Тогда
						Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, СтрокаМнЧ.Данные["П00021М100003"]);
						Если МесяцВДиапазонеСентябрь_Декабрь Тогда
							Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, ВеткаР2.Данные["П000020003003"] * Сумма);
						КонецЕсли;
						СтрокаМнЧ.Данные.Вставить("П00021М100004", Сумма);
					Иначе
						СтрокаМнЧ.Данные.Вставить("П00021М100004",
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Р21Гр2 * СтавкаВидаПТ));
					КонецЕсли;
					
				КонецЦикла;
				
				// Расчет подразделе 2.2.
				Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
					
					Р22Гр2 = СтрокаМнЧ.Данные["П00022М100002"];
					
					Если КодВидаПТ = "440" Тогда
						// Расчет в графе 3.
						СтрокаМнЧ.Данные.Вставить("П00022М100003",
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Р22Гр2 * СтавкаВидаПТ));
					Иначе
						// Расчет не предусмотрен.
					КонецЕсли;
					
					// Расчет в графе 4.
					Если КодыВидаПТ_440_450_460.Найти(КодВидаПТ) <> Неопределено Тогда
						Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, СтрокаМнЧ.Данные["П00022М100003"]);
						Если МесяцВДиапазонеСентябрь_Декабрь Тогда
							Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, ВеткаР2.Данные["П000020003003"] * Сумма);
						КонецЕсли;
						СтрокаМнЧ.Данные.Вставить("П00022М100004", Сумма);
					Иначе
						СтрокаМнЧ.Данные.Вставить("П00022М100004",
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Р22Гр2 * СтавкаВидаПТ));
					КонецЕсли;
					
				КонецЦикла;
				
				// Расчет подразделе 2.4.
				Сумма = 0;
				
				Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
					Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, СтрокаМнЧ.Данные["П00021М100004"]);
				КонецЦикла;
				
				Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
					КодОперации = СокрЛП(СтрокаМнЧ.Данные["П00022М100001"]);
					Если КодыОперацийДляСуммирования.Найти(КодОперации) <> Неопределено Тогда
						Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, СтрокаМнЧ.Данные["П00022М100004"]);
					КонецЕсли;
				КонецЦикла;
				
				Для каждого СтрокаМнЧ Из ДеревоМнЧР23М1.Строки Цикл
					Сумма = Сумма - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, СтрокаМнЧ.Данные["П00023М100003"]);
				КонецЦикла;
				
				ВеткаР21.Данные.Вставить("П000240000001", ?(Сумма >= 0, "40001", "40002"));
				ВеткаР21.Данные.Вставить("П000240000002", ?(Сумма >= 0, Сумма, - Сумма));
				
				Если ВеткаР21 = АктивнаяВеткаР21 Тогда
					Для каждого Пок Из ВеткаР21.Данные Цикл
						Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
					КонецЦикла;
					Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
						ИндСтроки = Формат(ДеревоМнЧР21М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧР21М1 Цикл
							Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
					Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
						ИндСтроки = Формат(ДеревоМнЧР22М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧР22М1 Цикл
							Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
					Для каждого СтрокаМнЧ Из ДеревоМнЧР23М1.Строки Цикл
						ИндСтроки = Формат(ДеревоМнЧР23М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧР23М1 Цикл
							Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение11" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		Для каждого ВеткаП1 Из ДеревоДанных.Строки Цикл
			
			Для каждого ВеткаП11 Из ВеткаП1.Строки[0].Строки Цикл
				
				Если ВеткаП11 = АктивнаяВетка Тогда
					Для каждого Пок Из ВеткаП11.Данные Цикл
						ВеткаП11.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
					КонецЦикла;
				КонецЕсли;
				
				ВеткаП11.Данные.Вставить("П001010008003", Окр(ВеткаП11.Данные["П001010006003"] * ВеткаП11.Данные["П001010007003"] / 1000, 3));
				
				ВеткаП11.Данные.Вставить("П001010011003",
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаП11.Данные["П001010006003"]
				* ВеткаП11.Данные["П001010010003"]));
				
				ВеткаП11.Данные.Вставить("П001010013003",
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаП11.Данные["П001010009003"])
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаП11.Данные["П001010012003"]));
				
				Стр130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаП11.Данные["П001010013003"]);
				Стр140 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаП11.Данные["П001010014003"]);
				ВеткаП11.Данные.Вставить("П001010015003", ?(Стр130 >= Стр140, Стр130, 0));
				ВеткаП11.Данные.Вставить("П001010015103", ?(Стр140 > Стр130, Стр140, 0));
				
				Если ВеткаП11 = АктивнаяВетка Тогда
					Для каждого Пок Из ВеткаП11.Данные Цикл
						Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП2М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М1;
		ИменаГрафМнЧП2М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М1]["ИменаГраф"];
		
		ИмяГруппыМнЧП2М2 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М2;
		ИменаГрафМнЧП2М2 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М2]["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧП2М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М1];
			ДеревоМнЧП2М2 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М2];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП2М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП2М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП2М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП2М2.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП2М2.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП2М2 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Сумма = 0;
			Для каждого СтрокаМнЧ Из ДеревоМнЧП2М1.Строки Цикл
				Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, СтрокаМнЧ.Данные["П00102М100003"]);
			КонецЦикла;
			Ветка.Данные.Вставить("П001020006003", Сумма);
			
			Сумма = 0;
			Для каждого СтрокаМнЧ Из ДеревоМнЧП2М2.Строки Цикл
				Сумма = Сумма
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00102М207005"])
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00102М208005"]);
			КонецЦикла;
			Ветка.Данные.Вставить("П001020006503", Макс(Ветка.Данные["П001020006003"] - Сумма, 0));
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП2М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП2М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП2М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП2М2.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП2М2.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП2М2 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СформироватьРаздел1();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		СформироватьСтраницыПодразделов21_25ПоДаннымПриложений1();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
		ЗаполнитьСтроки030и040Приложений1();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1()
	
	// Сохранение значения кода по ОКТМО с целью последующего восстановления.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохрОКТМО = СокрЛП(ТабличныйДокумент.Область("П000010001003").Значение);
	Иначе
		ДеревоДанныхРаздел1 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		СохрОКТМО = СокрЛП(ДеревоДанныхРаздел1.Строки[0].Данные["П000010001003"]);
	КонецЕсли;
	
	ИнициализироватьМногоуровневыйРаздел("Раздел1");
	
	СоответствиеКБККодуВидаПТ = Новый Соответствие;
	
	СоответствиеКБККодуВидаПТ.Вставить("_411", "18210302030011000110");
	СоответствиеКБККодуВидаПТ.Вставить("_430", "18210302030011000110");
	СоответствиеКБККодуВидаПТ.Вставить("_440", "18210302030011000110");
	СоответствиеКБККодуВидаПТ.Вставить("_450", "18210302030011000110");
	СоответствиеКБККодуВидаПТ.Вставить("_460", "18210302030011000110");
	
	СоответствиеКБККодуВидаПТ.Вставить("_470", "18210302360011000110");
	
	СоответствиеКБККодуВидаПТ.Вставить("_471", "18210302370011000110");
	
	СоответствиеКБККодуВидаПТ.Вставить("_472", "18210302380011000110");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КБК");
	ТЗ.Колонки.Добавить("СуммаКУплате");
	ТЗ.Колонки.Добавить("СуммаКУменьш");
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	Для каждого ВеткаРаздел2 Из ДеревоДанныхРаздел2.Строки Цикл
		
		Для каждого ВеткаРаздел21 Из ВеткаРаздел2.Строки[0].Строки Цикл
			
			КБК = СоответствиеКБККодуВидаПТ.Получить("_" + СокрЛП(ВеткаРаздел21.Данные["П000020004003"]));
			КБК = ?(КБК = Неопределено, "", КБК);
			КодПок = СокрЛП(ВеткаРаздел21.Данные["П000240000001"]);
			Сумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, ВеткаРаздел21.Данные["П000240000002"]);
			
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.КБК = КБК;
			НоваяСтрокаТЗ.СуммаКУплате = ?(КодПок = "40001", Сумма, 0);
			НоваяСтрокаТЗ.СуммаКУменьш = ?(КодПок = "40002", Сумма, 0);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТЗ.Свернуть("КБК", "СуммаКУплате,СуммаКУменьш");
	ТЗ.Сортировать("КБК");
	
	ТЗКоличествоСтрок = ТЗ.Количество();
	
	Для Инд = 0 По ТЗКоличествоСтрок - 1 Цикл
		ОбрИнд = ТЗКоличествоСтрок - 1 - Инд;
		СтрокаТЗ = ТЗ[ОбрИнд];
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.КБК)
		   И НЕ ЗначениеЗаполнено(СтрокаТЗ.СуммаКУплате)
		   И НЕ ЗначениеЗаполнено(СтрокаТЗ.СуммаКУменьш) Тогда
			ТЗ.Удалить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	ДеревоДанныхРаздел1 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	// Восстановления сохраненного ранее значения кода по ОКТМО.
	ДеревоДанныхРаздел1.Строки[0].Данные["П000010001003"] = СохрОКТМО;
	
	ДеревоМнЧР1М1 = ДеревоДанныхРаздел1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
	
	Для Инд = 0 По ТЗ.Количество() - 1 Цикл
		
		СтрокаТЗ = ТЗ[Инд];
		
		Если Инд = 0 Тогда
			СтрокаМнЧР1М1 = ДеревоМнЧР1М1.Строки[0];
		Иначе
			СтрокаМнЧР1М1 = ДеревоМнЧР1М1.Строки.Добавить();
			СтрокаМнЧР1М1.Данные = Новый Структура;
			СтрокаМнЧР1М1.ДанныеМногострочныхЧастей = Новый Структура;
		КонецЕсли;
		
		СтрокаМнЧР1М1.Данные.Вставить("П00001М102003", СтрокаТЗ.КБК);
		СтрокаМнЧР1М1.Данные.Вставить("П00001М103003", Макс(СтрокаТЗ.СуммаКУплате - СтрокаТЗ.СуммаКУменьш, 0));
		СтрокаМнЧР1М1.Данные.Вставить("П00001М104003", Макс(СтрокаТЗ.СуммаКУменьш - СтрокаТЗ.СуммаКУплате, 0));
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел1,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
		НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
		ВывестиДанныеВТабличныйДокумент("Раздел1", НовыеНомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтраницыПодразделов21_25ПоДаннымПриложений1()
	
	СформироватьСтраницуПодразделов21_25ПоКодуВидаПодакцизногоТовара("450");
	СформироватьСтраницуПодразделов21_25ПоКодуВидаПодакцизногоТовара("460");
	
	РасчетНаСервере("Раздел21");
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = ИскомыйРаздел.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтраницуПодразделов21_25ПоКодуВидаПодакцизногоТовара(КодВидаПодакцизногоТовара)
	
	ТЗ_21 = Новый ТаблицаЗначений;
	ТЗ_21.Колонки.Добавить("П00021М100001");
	ТЗ_21.Колонки.Добавить("П00021М100002");
	ТЗ_21.Колонки.Добавить("П00021М100003");
	
	ТЗ_22 = Новый ТаблицаЗначений;
	ТЗ_22.Колонки.Добавить("П00022М100001");
	ТЗ_22.Колонки.Добавить("П00022М100002");
	ТЗ_22.Колонки.Добавить("П00022М100003");
	
	ТЗ_23 = Новый ТаблицаЗначений;
	ТЗ_23.Колонки.Добавить("П00023М100001");
	ТЗ_23.Колонки.Добавить("П00023М100002");
	ТЗ_23.Колонки.Добавить("П00023М100003");
	
	ТЗ_25 = Новый ТаблицаЗначений;
	ТЗ_25.Колонки.Добавить("П00025М100001");
	ТЗ_25.Колонки.Добавить("П00025М100002");
	ТЗ_25.Колонки.Добавить("П00025М100003");
	ТЗ_25.Колонки.Добавить("П00025М100004");
	ТЗ_25.Колонки.Добавить("П00025М100005");
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение1"]);
	
	ЕстьХотяБыОднаПодходящаяСтраницаПриложения1 = Ложь;
	
	Для каждого ВеткаП1 Из ДеревоРаздела.Строки Цикл
		
		КодВидаПТ   = СокрЛП(ВеткаП1.Данные["П001010001003"]);
		КодОперации = СокрЛП(ВеткаП1.Данные["П001010002003"]);
		
		Если КодВидаПТ = КодВидаПодакцизногоТовара
			И СтрДлина(КодОперации) = 5
			И СтрНайти("1235", Лев(КодОперации, 1)) > 0 Тогда
			
			ЕстьХотяБыОднаПодходящаяСтраницаПриложения1 = Истина;
			
			Если СтрНачинаетсяС(КодОперации, "1") Тогда
				
				НовСтрТЗ_21 = ТЗ_21.Добавить();
				НовСтрТЗ_21["П00021М100001"] = КодОперации;
				НовСтрТЗ_21["П00021М100002"] = ВеткаП1.Данные["П001010004003"];
				НовСтрТЗ_21["П00021М100003"] = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, ВеткаП1.Данные["П001010003003"]);
				
			ИначеЕсли СтрНачинаетсяС(КодОперации, "2") Тогда
				
				НовСтрТЗ_22 = ТЗ_22.Добавить();
				НовСтрТЗ_22["П00022М100001"] = КодОперации;
				НовСтрТЗ_22["П00022М100002"] = ВеткаП1.Данные["П001010004003"];
				НовСтрТЗ_22["П00022М100003"] = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, ВеткаП1.Данные["П001010003003"]);
				
			ИначеЕсли СтрНачинаетсяС(КодОперации, "3") Тогда
				
				НовСтрТЗ_23 = ТЗ_23.Добавить();
				НовСтрТЗ_23["П00023М100001"] = КодОперации;
				НовСтрТЗ_23["П00023М100002"] = ВеткаП1.Данные["П001010004003"];
				НовСтрТЗ_23["П00023М100003"] = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, ВеткаП1.Данные["П001010003003"]);
				
			ИначеЕсли СтрНачинаетсяС(КодОперации, "5") Тогда
				
				НовСтрТЗ_25 = ТЗ_25.Добавить();
				НовСтрТЗ_25["П00025М100001"] = КодОперации;
				НовСтрТЗ_25["П00025М100002"] = ВеткаП1.Данные["П001010004003"];
				НовСтрТЗ_25["П00025М100003"] = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, ВеткаП1.Данные["П001010003003"]);
				НовСтрТЗ_25["П00025М100004"] = ВеткаП1.Данные["П001010002503"];
				НовСтрТЗ_25["П00025М100005"] = ВеткаП1.Данные["П001010002504"];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьХотяБыОднаПодходящаяСтраницаПриложения1 Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	ВеткаР2 = ДеревоРаздела.Строки[0];
	
	Если ВеткаР2.Строки[0].Строки.Количество() = 1
		И НЕ ЗаполненРаздел(ВеткаР2.Строки[0], "Раздел21") Тогда
		СтраницаПодразделов21_25 = ВеткаР2.Строки[0].Строки[0];
	Иначе
		ИндексВеткиР21_25 = Неопределено;
		Для каждого ВеткаР21_25 Из ВеткаР2.Строки[0].Строки Цикл
			Если СокрЛП(ВеткаР21_25.Данные["П000020004003"]) = КодВидаПодакцизногоТовара Тогда
				ИндексВеткиР21_25 = ВеткаР2.Строки[0].Строки.Индекс(ВеткаР21_25);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИндексВеткиР21_25 = Неопределено Тогда
			СтраницаПодразделов21_25 = ВеткаР2.Строки[0].Строки.Добавить();
		Иначе
			СтраницаПодразделов21_25 = ВеткаР2.Строки[0].Строки.Вставить(ИндексВеткиР21_25);
			ВеткаР2.Строки[0].Строки.Удалить(ИндексВеткиР21_25 + 1);
		КонецЕсли;
	КонецЕсли;
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Раздел21"));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента("Раздел21");
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
	СтраницаПодразделов21_25.Данные = ДанныеТаблДокумента.Данные;
	СтраницаПодразделов21_25.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	СтраницаПодразделов21_25.Данные.Вставить("П000020004003", КодВидаПодакцизногоТовара);
	СтраницаПодразделов21_25.Данные.Вставить("П0000200040А3", НалоговаяСтавкаВидаПодакцизногоТовара(
	КодВидаПодакцизногоТовара, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	// Особая обработка значения показателя раздела 2.4 "Код показателя".
	СтраницаПодразделов21_25.Данные.Вставить("П000240000001", "40001");
	
	ТЗ_21.Свернуть("П00021М100001", "П00021М100002,П00021М100003");
	ТЗ_21.Сортировать("П00021М100001 Возр");
	СформироватьМногострочнуюЧастьОдногоИзПодразделов21_25(СтраницаПодразделов21_25, ТЗ_21);
	
	ТЗ_22.Свернуть("П00022М100001", "П00022М100002,П00022М100003");
	ТЗ_22.Сортировать("П00022М100001 Возр");
	СформироватьМногострочнуюЧастьОдногоИзПодразделов21_25(СтраницаПодразделов21_25, ТЗ_22);
	
	ТЗ_23.Свернуть("П00023М100001", "П00023М100002,П00023М100003");
	ТЗ_23.Сортировать("П00023М100001 Возр");
	СформироватьМногострочнуюЧастьОдногоИзПодразделов21_25(СтраницаПодразделов21_25, ТЗ_23);
	
	ТЗ_25.Свернуть("П00025М100001,П00025М100004,П00025М100005", "П00025М100002,П00025М100003");
	ТЗ_25.Сортировать("П00025М100001 Возр, П00025М100005 Возр, П00025М100004 Возр");
	СформироватьМногострочнуюЧастьОдногоИзПодразделов21_25(СтраницаПодразделов21_25, ТЗ_25);
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанныхРаздел2",
	ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМногострочнуюЧастьОдногоИзПодразделов21_25(СтраницаПодразделов21_25, ТаблЗнач)
	
	ИмяГруппы = Лев(ТаблЗнач.Колонки[0].Имя, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	КолСтрокТЗ = ТаблЗнач.Количество();
	ДеревоМнЧ = Неопределено;
	СтраницаПодразделов21_25.ДанныеМногострочныхЧастей.Свойство(ИмяГруппы, ДеревоМнЧ);
	Если ДеревоМнЧ <> Неопределено Тогда
		Для Инд = 0 По КолСтрокТЗ - 1 Цикл
			Если Инд = 0 Тогда
				ВеткаМнЧ = ДеревоМнЧ.Строки[0];
			Иначе
				ВеткаМнЧ = ДеревоМнЧ.Строки.Добавить();
				ВеткаМнЧ["Данные"] = Новый Структура;
				ВеткаМнЧ["ДанныеМногострочныхЧастей"] = Новый Структура;
			КонецЕсли;
			СтрокаТЗ = ТаблЗнач[Инд];
			Для каждого КолонкаТЗ Из ТаблЗнач.Колонки Цикл
				ИмяКолонки = КолонкаТЗ.Имя;
				ВеткаМнЧ.Данные.Вставить(ИмяКолонки, СтрокаТЗ[ИмяКолонки]);
			КонецЦикла;
		КонецЦикла;
		СтраницаПодразделов21_25.ДанныеМногострочныхЧастей.Вставить(ИмяГруппы, ДеревоМнЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтроки030и040Приложений1()
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение1"]);
	
	АктивнаяВеткаП1 = Неопределено;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
		АктивнаяВеткаП1 = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	КонецЕсли;
	
	АктивнаяВеткаП11 = Неопределено;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение11" Тогда
		АктивнаяВеткаП11 = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
	КонецЕсли;
	
	Для каждого ВеткаП1 Из ДеревоРаздела.Строки Цикл
		
		Стр030 = 0;
		Стр040 = 0;
		
		Для каждого ВеткаП11 Из ВеткаП1.Строки[0].Строки Цикл
			
			Если ВеткаП11 = АктивнаяВеткаП11 Тогда
				ВеткаП11.Данные.Вставить("П001010008003", ТабличныйДокумент.Область("П001010008003").Значение);
				ВеткаП11.Данные.Вставить("П001010015003", ТабличныйДокумент.Область("П001010015003").Значение);
				ВеткаП11.Данные.Вставить("П001010015103", ТабличныйДокумент.Область("П001010015103").Значение);
			КонецЕсли;
			
			Стр030 = Стр030
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ВеткаП11.Данные["П001010015003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ВеткаП11.Данные["П001010015103"]);
			Стр040 = Стр040 + ВеткаП11.Данные["П001010008003"];
			
		КонецЦикла;
		
		ВеткаП1.Данные.Вставить("П001010003003", Стр030);
		ВеткаП1.Данные.Вставить("П001010004003", Стр040);
		
		Если ВеткаП1 = АктивнаяВеткаП1 Тогда
			ТабличныйДокумент.Область("П001010003003").Значение = Стр030;
			ТабличныйДокумент.Область("П001010004003").Значение = Стр040;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДеревоРаздела,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение1"]);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Приложение11.
	Структ = Новый Структура;
	Структ.Вставить("П001010008003", "П001010006003;П001010007003");
	Структ.Вставить("П001010011003", "П001010006003;П001010010003");
	Структ.Вставить("П001010013003", "П001010009003;П001010012003");
	Структ.Вставить("П001010015003", "П001010013003;П001010009003;П001010012003;П001010014003");
	Структ.Вставить("П001010015103", "П001010013003;П001010009003;П001010012003;П001010014003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение11", Структ);
	
	// Приложение2.
	Структ = Новый Структура;
	Структ.Вставить("П001020006003", "П00102М100003");
	Структ.Вставить("П001020006503", "П001020006003;П00102М100003;П00102М207005;П00102М208005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение2", Структ);
	
	// Раздел21.
	Структ = Новый Структура;
	Структ.Вставить("П00021М100004");
	Структ.Вставить("П00022М100004");
	Структ.Вставить("П000240000001");
	Структ.Вставить("П000240000002");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел21", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", СтруктураРеквизитовФормы.ИП);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
	СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "АкцТабак");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_AKCTABAK"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("220");
	ВозможныеКодыПоМесту.Добавить("331");
	
	ВозможныеКодыПериода = Новый Массив;
	Для Инд = 1 По 12 Цикл
		ВозможныеКодыПериода.Добавить(Формат(Инд, "ЧЦ=2;ЧВН="));
	КонецЦикла;
	
	ВозможныеКодыПериодаРеорг = Новый Массив;
	Для Инд = 71 По 82 Цикл
		ВозможныеКодыПериодаРеорг.Добавить(Формат(Инд, "ЧГ="));
	КонецЦикла;
	
	ВозможныеКодыФормыРеорганизции = Новый Массив;
	ВозможныеКодыФормыРеорганизции.Добавить("0");
	ВозможныеКодыФормыРеорганизции.Добавить("1");
	ВозможныеКодыФормыРеорганизции.Добавить("2");
	ВозможныеКодыФормыРеорганизции.Добавить("3");
	ВозможныеКодыФормыРеорганизции.Добавить("5");
	ВозможныеКодыФормыРеорганизции.Добавить("6");
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 12 цифр.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС("Не задана фамилия налогоплательщика.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС("Не задано имя налогоплательщика.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС("Не задан КПП налогоплательщика.", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов.", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("Не задано наименование налогоплательщика.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено
		И ВозможныеКодыПериодаРеорг.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа.", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр.", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места представления налоговой декларации.", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код места представления налоговой декларации.", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ПараметрыВыгрузки.ПоМесту = "213" Тогда
		Символы56КПП = Сред(ПараметрыВыгрузки.КПП, 5, 2);
		Если Символы56КПП <> "50" Тогда
			СообщитьВТС("Если код места представления декларации равен 213, 5-й и 6-й символы КПП организации должны быть равны ""50"".", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ (НЕ ПараметрыВыгрузки.ЭтоИП И ПараметрыВыгрузки.ПрПодп = "1") Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			СообщитьВТС("Не задана фамилия подписанта.", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			СообщитьВТС("Не задано имя подписанта.", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС("Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя.",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации.",
			"Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС("Задано некорректное значение кода формы реорганизации.",
				"Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации.",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации.",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1;
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел1") Тогда
		СтраницаРаздела = ДеревоРаздела.Строки[0];
		НомСтраницы = "1";
		
		ДлинаОКТМО = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000010001003));
		Если ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
			СообщитьВТС("В разделе 1 не" + ?(ДлинаОКТМО = 0, "", "верно") + " задан код по ОКТМО.",
			"Раздел1", "П000010001003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			ДлинаКБК = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00001М102003"]));
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("В разделе 1 в строке " + НомСтроки + " группы строк 020-040 не"
				+ ?(ДлинаКБК = 0, "", "верно") + " задан код бюджетной классификации.",
				"Раздел1", "П00001М102003_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		СообщитьВТС("Не заполнен раздел 1.", "Раздел1", "П000010001003", "1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 2.
	//
	ВозмКодыПокР21 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00021М100001");
	ВозмКодыПокР22 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00022М100001");
	ВозмКодыПокР23 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00023М100001");
	ВозмКодыПокР24 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000240000001");
	ВозмКодыПокР25 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00025М100001");
	
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел2;
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел2") Тогда
		СтраницаРаздела = ДеревоРаздела.Строки[0];
		
		Для каждого Страница21 Из СтраницаРаздела.Строки[0].Строки Цикл
			НомСтраницы21 = Формат(СтраницаРаздела.Строки[0].Строки.Индекс(Страница21) + 1, "ЧГ=");
			
			КодПТ = СокрЛП(Страница21.Данные["П000020004003"]);
			Если НЕ ЗначениеЗаполнено(КодПТ) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21
				+ ": не задан код вида подакцизного товара.",
				"Раздел21", "П000020004003", НомСтраницы21);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(КодПТ) <> 3 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21
				+ ": задан код вида подакцизного товара, не состоящий из 3 цифр.",
				"Раздел21", "П000020004003", НомСтраницы21);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыР21М1;
			ДанныеМнЧ = Страница21.ДанныеМногострочныхЧастей[ИмяГруппы];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполненаСтрокаМнЧ = Ложь;
				Для каждого Элем Из СтрокаМнЧ.Данные Цикл
					ЗаполненаСтрокаМнЧ = ЗаполненаСтрокаМнЧ ИЛИ ЗначениеЗаполнено(Элем.Значение);
					Если ЗаполненаСтрокаМнЧ Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗаполненаСтрокаМнЧ Тогда
					Продолжить;
				КонецЕсли;
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00021М100001"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.1 не задан код показателя.",
					"Раздел21", "П00021М100001_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмКодыПокР21.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.1 код показателя должен принимать одно из значений: " + ВозмКодыПокР21.СтрокаЗначений,
					"Раздел21", "П00021М100001_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыР22М1;
			ДанныеМнЧ = Страница21.ДанныеМногострочныхЧастей[ИмяГруппы];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполненаСтрокаМнЧ = Ложь;
				Для каждого Элем Из СтрокаМнЧ.Данные Цикл
					ЗаполненаСтрокаМнЧ = ЗаполненаСтрокаМнЧ ИЛИ ЗначениеЗаполнено(Элем.Значение);
					Если ЗаполненаСтрокаМнЧ Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗаполненаСтрокаМнЧ Тогда
					Продолжить;
				КонецЕсли;
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00022М100001"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.2 не задан код показателя.",
					"Раздел21", "П00022М100001_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмКодыПокР22.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.2 код показателя должен принимать одно из значений: " + ВозмКодыПокР22.СтрокаЗначений,
					"Раздел21", "П00022М100001_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыР23М1;
			ДанныеМнЧ = Страница21.ДанныеМногострочныхЧастей[ИмяГруппы];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполненаСтрокаМнЧ = Ложь;
				Для каждого Элем Из СтрокаМнЧ.Данные Цикл
					ЗаполненаСтрокаМнЧ = ЗаполненаСтрокаМнЧ ИЛИ ЗначениеЗаполнено(Элем.Значение);
					Если ЗаполненаСтрокаМнЧ Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗаполненаСтрокаМнЧ Тогда
					Продолжить;
				КонецЕсли;
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00023М100001"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.3 не задан код показателя.",
					"Раздел21", "П00023М100001_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмКодыПокР23.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.3 код показателя должен принимать одно из значений: " + ВозмКодыПокР23.СтрокаЗначений,
					"Раздел21", "П00023М100001_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ЗначПок = СокрЛП(Страница21.Данные["П000240000001"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в подразделе 2.4 не задан код показателя.",
				"Раздел21", "П000240000001", НомСтраницы21);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыПокР24.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21
				+ ": в подразделе 2.4 код показателя должен принимать одно из значений: " + ВозмКодыПокР24.СтрокаЗначений,
				"Раздел21", "П000240000001", НомСтраницы21);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыР25М1;
			ДанныеМнЧ = Страница21.ДанныеМногострочныхЧастей[ИмяГруппы];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполненаСтрокаМнЧ = Ложь;
				Для каждого Элем Из СтрокаМнЧ.Данные Цикл
					ЗаполненаСтрокаМнЧ = ЗаполненаСтрокаМнЧ ИЛИ ЗначениеЗаполнено(Элем.Значение);
					Если ЗаполненаСтрокаМнЧ Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗаполненаСтрокаМнЧ Тогда
					Продолжить;
				КонецЕсли;
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00025М100001"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.5 не задан код показателя.",
					"Раздел21", "П00025М100001_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмКодыПокР25.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.5 код показателя должен принимать одно из значений: " + ВозмКодыПокР25.СтрокаЗначений,
					"Раздел21", "П00025М100001_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00025М100004"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.5 не задан код налогового периода, в котором осуществлена реализация товаров.",
					"Раздел21", "П00025М100004_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00025М100005"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы21 + ": в строке " + НомСтроки
					+ " подраздела 2.5 не задан год налогового периода, в котором осуществлена реализация товаров.",
					"Раздел21", "П00025М100005_" + НомСтроки, НомСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		СообщитьВТС("Не заполнен раздел 2.", "Раздел2", "П000020001003", "1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Приложение 1.
	//
	ВозмКодыВидаПТП1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001010001003");
	ВозмКодыПокП1    = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001010002003");
	
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Приложение1;
	
	Если ЗаполненРаздел(ДеревоРаздела, "Приложение1") Тогда
		
		Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(СтраницаРаздела.Данные["П001010001003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": не задан код вида подакцизного товара.",
				"Приложение1", "П001010001003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыВидаПТП1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
				+ ": код вида подакцизного товара должен принимать одно из значений: " + ВозмКодыВидаПТП1.СтрокаЗначений,
				"Приложение1", "П001010001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(СтраницаРаздела.Данные["П001010002003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": не задан код операции (показателя).",
				"Приложение1", "П001010002003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыПокП1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
				+ ": код операции (показателя) должен принимать одно из значений: " + ВозмКодыПокП1.СтрокаЗначений,
				"Приложение1", "П001010002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Для каждого Страница11 Из СтраницаРаздела.Строки[0].Строки Цикл
				НомСтраницы11 = Формат(СтраницаРаздела.Строки[0].Строки.Индекс(Страница11) + 1, "ЧГ=");
				Координаты11  = НомСтраницы + "," + НомСтраницы11;
				
				ЗначПок = СокрЛП(Страница11.Данные["П001010005003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
					+ ": в подразделе ""Сумма акциза по марке (наименованию) сигарет (папирос)"" на странице "
					+ НомСтраницы11 + " не задана марка (наименование) сигарет (папирос).",
					"Приложение11", "П001010005003", Координаты11);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Приложение 2.
	//
	ВозмКодыПризнДок = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001020000103");
	
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Приложение2;
	
	Если ЗаполненРаздел(ДеревоРаздела, "Приложение2") Тогда
		
		Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(СтраницаРаздела.Данные["П001020000103"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": не задан признак документа.",
				"Приложение2", "П001020000103", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыПризнДок.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
				+ ": признак документа должен принимать одно из значений: " + ВозмКодыПризнДок.СтрокаЗначений,
				"Приложение2", "П001020000103", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(СтраницаРаздела.Данные["П001020001003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задан номер банковской гарантии (договора поручительства).",
				"Приложение2", "П001020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СтраницаРаздела.Данные["П001020002003"];
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата выдачи банковской гарантии (заключения договора поручительства).",
				"Приложение2", "П001020002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СтраницаРаздела.Данные["П001020003003"];
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата начала срока действия банковской гарантии (договора поручительства).",
				"Приложение2", "П001020003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СтраницаРаздела.Данные["П001020004003"];
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата окончания срока действия банковской гарантии (договора поручительства).",
				"Приложение2", "П001020004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыП2М1;
			ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			ЗаполненРаздел1Приложения2 = Ложь;
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполненаСтрокаМнЧ = Ложь;
				Для каждого Элем Из СтрокаМнЧ.Данные Цикл
					ЗаполненаСтрокаМнЧ = ЗаполненаСтрокаМнЧ ИЛИ ЗначениеЗаполнено(Элем.Значение);
					Если ЗаполненаСтрокаМнЧ Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗаполненаСтрокаМнЧ Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполненРаздел1Приложения2 = Истина;
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00102М100001"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке "
					+ НомСтроки + " раздела 1 не задан код показателя.",
					"Приложение2", "П00102М100001_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
					СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке "
					+ НомСтроки + " раздела 1 задан код показателя, не состоящий из 3 цифр.",
					"Приложение2", "П00102М100001_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыП2М2;
			ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			ЗаполненРаздел2Приложения2 = Ложь;
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполненаСтрокаМнЧ = Ложь;
				ЗаполненаСтрока080МнЧ = Ложь;
				Для каждого Элем Из СтрокаМнЧ.Данные Цикл
					ЗаполненаСтрокаМнЧ = ЗаполненаСтрокаМнЧ ИЛИ ЗначениеЗаполнено(Элем.Значение);
					ЗаполненаСтрока080МнЧ = ЗаполненаСтрока080МнЧ ИЛИ (СтрНачинаетсяС(Элем.Ключ, "П00102М2080") И ЗначениеЗаполнено(Элем.Значение));
					Если ЗаполненаСтрокаМнЧ И ЗаполненаСтрока080МнЧ Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗаполненаСтрокаМнЧ Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполненРаздел2Приложения2 = Истина;
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00102М207003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке "
					+ НомСтроки + " раздела 2 по строке 070 не задан код показателя.",
					"Приложение2", "П00102М207003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
					СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке "
					+ НомСтроки + " раздела 2 по строке 070 задан код показателя, не состоящий из 3 цифр.",
					"Приложение2", "П00102М207003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00102М207006"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
					+ " раздела 2 по строке 070 не задан код налогового периода, в котором осуществлена реализация товаров.",
					"Приложение2", "П00102М207006_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00102М207007"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
					+ " раздела 2 по строке 070 не задан год налогового периода, в котором осуществлена реализация товаров.",
					"Приложение2", "П00102М207007_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ЗаполненаСтрока080МнЧ Тогда
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00102М208003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке "
						+ НомСтроки + " раздела 2 по строке 080 не задан код показателя.",
						"Приложение2", "П00102М208003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке "
						+ НомСтроки + " раздела 2 по строке 080 задан код показателя, не состоящий из 3 цифр.",
						"Приложение2", "П00102М208003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ (ЗаполненРаздел1Приложения2 ИЛИ ЗаполненРаздел2Приложения2) Тогда
				
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": должен быть заполнен хотя бы один из разделов 1 и 2.",
				"Приложение2", "П00102М100001_1", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел(Знач ДеревоРаздела, Знач ИмяРаздела)
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Если ИмяРаздела = "Раздел21" Тогда
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000240000001");
	КонецЕсли;
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		Данные = СтраницаРаздела.Данные;
		Для каждого Пок Из Данные Цикл
			Если ЗначениеЗаполнено(Пок.Значение)
				И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
			ИменаГруппМнЧ = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
			Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
				ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
				МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
				Для Каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					Для каждого ИмяГрафы Из МассивИменГраф Цикл
						Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяГрафы])
							И ПоказателиНеанализируемыеНаЗаполненность.Найти(ИмяГрафы) = Неопределено Тогда
							Возврат Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
			ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
			Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
				ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
				ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
				Если ЗаполненРаздел(ДеревоПодчРаздела, ИмяПодчРаздела) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтаФорма, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	СтрокаЗначений = """" + СтрСоединить(МассивЗначений, """, """) + """.";
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ДеревоРаздел1     = ДанныеМногоуровневыхРазделов["Раздел1"];
	ДеревоРаздел2     = ДанныеМногоуровневыхРазделов["Раздел2"];
	ДеревоПриложение1 = ДанныеМногоуровневыхРазделов["Приложение1"];
	ДеревоПриложение2 = ДанныеМногоуровневыхРазделов["Приложение2"];
	
	// Раздел 1.
	//
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	НемногострочныеДанныеР1 = ДеревоРаздел1.Строки[0].Данные;
	Для каждого Эл Из СумНалПУ.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, НемногострочныеДанныеР1[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	СумНалПУКод = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумНалПУКод");
	ДанныеМнЧР1М1 = ДеревоРаздел1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
	Для каждого СтрокаМнЧР1М1 Из ДанныеМнЧР1М1.Строки Цикл
		ЭкзСумНалПУКод = СкопироватьУзел(СумНалПУ, СумНалПУКод, СумНалПУ.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзСумНалПУКод.Строки Цикл
			Если Эл.Код = "НалПУ" Тогда
				ВывестиПоказательВXML(Эл, СтрокаМнЧР1М1.Данные["П00001М103003"] - СтрокаМнЧР1М1.Данные["П00001М104003"]);
			Иначе
				ВывестиПоказательВXML(Эл, СтрокаМнЧР1М1.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 2.
	//
	РасчАкц = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкц");
	НемногострочныеДанныеР2 = ДеревоРаздел2.Строки[0].Данные;
	Для каждого Эл Из РасчАкц.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, НемногострочныеДанныеР2[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	РасчАкцПТ = ПолучитьПодчиненныйЭлемент(РасчАкц, "РасчАкцПТ");
	ДеревоРаздел21 = ДеревоРаздел2.Строки[0].Строки[0];
	Для каждого Страница21 Из ДеревоРаздел21.Строки Цикл
		ЭкзРасчАкцПТ = СкопироватьУзел(РасчАкц, РасчАкцПТ, РасчАкц.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзРасчАкцПТ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Страница21.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Подраздел 2.1.
		ОперПТРФ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкцПТ, "ОперПТРФ");
		ОперПТРФКод = ПолучитьПодчиненныйЭлемент(ОперПТРФ, "ОперПТРФКод");
		ЗначКодПТ = СокрЛП(Страница21.Данные["П000020004003"]);
		УсловиеОбязательности_ИсчислАкциз = (ЗначКодПТ = "440" ИЛИ ЗначКодПТ = "450" ИЛИ ЗначКодПТ = "460");
		Если УсловиеОбязательности_ИсчислАкциз Тогда
			Для каждого Эл Из ОперПТРФКод.Строки Цикл
				Если Эл.Код = "ИсчислАкциз" Тогда
					Эл.Обязательность = "О";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеМнЧР21М1 = Страница21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР21М1];
		Для каждого СтрокаМнЧР21М1 Из ДанныеМнЧР21М1.Строки Цикл
			ЭкзОперПТРФКод = СкопироватьУзел(ОперПТРФ, ОперПТРФКод, ОперПТРФ.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧР21М1.Данные, ЭкзОперПТРФКод);
		КонецЦикла;
		// Подраздел 2.2.
		ОперПТНеРФ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкцПТ, "ОперПТНеРФ");
		ОперПТНеРФКод = ПолучитьПодчиненныйЭлемент(ОперПТНеРФ, "ОперПТНеРФКод");
		ДанныеМнЧР22М1 = Страница21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
		Для каждого СтрокаМнЧР22М1 Из ДанныеМнЧР22М1.Строки Цикл
			ЭкзОперПТНеРФКод = СкопироватьУзел(ОперПТНеРФ, ОперПТНеРФКод, ОперПТНеРФ.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧР22М1.Данные, ЭкзОперПТНеРФКод);
		КонецЦикла;
		// Подраздел 2.3.
		АкцизВыч = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкцПТ, "АкцизВыч");
		АкцизВычКод = ПолучитьПодчиненныйЭлемент(АкцизВыч, "АкцизВычКод");
		ДанныеМнЧР23М1 = Страница21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР23М1];
		Для каждого СтрокаМнЧР23М1 Из ДанныеМнЧР23М1.Строки Цикл
			ЭкзАкцизВычКод = СкопироватьУзел(АкцизВыч, АкцизВычКод, АкцизВыч.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧР23М1.Данные, ЭкзАкцизВычКод);
		КонецЦикла;
		// Подраздел 2.4.
		ЗаполнитьДаннымиУзел(Страница21.Данные, ПолучитьПодчиненныйЭлемент(ЭкзРасчАкцПТ, "АкцизПУ"));
		// Подраздел 2.5.
		ДокЭкспПТ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкцПТ, "ДокЭкспПТ");
		ДокЭкспПТКод = ПолучитьПодчиненныйЭлемент(ДокЭкспПТ, "ДокЭкспПТКод");
		ДанныеМнЧР25М1 = Страница21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР25М1];
		Для каждого СтрокаМнЧР25М1 Из ДанныеМнЧР25М1.Строки Цикл
			ЭкзДокЭкспПТКод = СкопироватьУзел(ДокЭкспПТ, ДокЭкспПТКод, ДокЭкспПТ.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧР25М1.Данные, ЭкзДокЭкспПТКод);
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 1.
	//
	РасчАкцСП = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкцСП");
	Для каждого Страница1 Из ДеревоПриложение1.Строки Цикл
		ЭкзРасчАкцСП = СкопироватьУзел(УзелРодитель, РасчАкцСП, УзелРодитель.Строки.Количество() - 1);
		КодОперации = СокрЛП(Страница1.Данные["П001010002003"]);
		Для каждого Эл Из ЭкзРасчАкцСП.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Страница1.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		РасчАкцНаимПТ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкцСП, "РасчАкцНаимПТ");
		Для каждого Страница11 Из Страница1.Строки[0].Строки Цикл
			ЭкзРасчАкцНаимПТ = СкопироватьУзел(ЭкзРасчАкцСП, РасчАкцНаимПТ, ЭкзРасчАкцСП.Строки.Количество() - 1);
			Если Страница11.Данные["П001010015003"] = 0 И Страница11.Данные["П001010015103"] = 0 Тогда
				Для каждого Эл Из ЭкзРасчАкцНаимПТ.Строки Цикл
					Если Эл.Код = "СумАкцПрмКомб" Тогда
						Эл.Обязательность = "О";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗаполнитьДаннымиУзел(Страница11.Данные, ЭкзРасчАкцНаимПТ);
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 2.
	//
	РеалТабИздЭксп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РеалТабИздЭксп");
	Для каждого Страница Из ДеревоПриложение2.Строки Цикл
		ЭкзРеалТабИздЭксп = СкопироватьУзел(УзелРодитель, РеалТабИздЭксп, УзелРодитель.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзРеалТабИздЭксп.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Страница.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Подраздел 1.
		СведПТЭксп = ПолучитьПодчиненныйЭлемент(ЭкзРеалТабИздЭксп, "СведПТЭксп");
		СведПТЭкспПТ = ПолучитьПодчиненныйЭлемент(СведПТЭксп, "СведПТЭкспПТ");
		ДанныеМнЧП2М1 = Страница.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
		Для каждого СтрокаМнЧП2М1 Из ДанныеМнЧП2М1.Строки Цикл
			ЭкзСведПТЭкспПТ = СкопироватьУзел(СведПТЭксп, СведПТЭкспПТ, СведПТЭксп.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧП2М1.Данные, ЭкзСведПТЭкспПТ);
		КонецЦикла;
		// Подраздел 2.
		СвДокПдтвЭксп = ПолучитьПодчиненныйЭлемент(ЭкзРеалТабИздЭксп, "СвДокПдтвЭксп");
		ДанныеМнЧП2М2 = Страница.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М2];
		Для каждого СтрокаМнЧП2М2 Из ДанныеМнЧП2М2.Строки Цикл
			ЭкзСвДокПдтвЭксп = СкопироватьУзел(ЭкзРеалТабИздЭксп, СвДокПдтвЭксп, ЭкзРеалТабИздЭксп.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧП2М2.Данные, ЭкзСвДокПдтвЭксп);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + ИННКПП
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ДекларацияПоАкцизамНаТабак");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	УстановитьФорматВыводаНаСервере(ИмяРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	ИменаМногострочныхПоказателей   = Новый Массив;
	ИменаНемногострочныхПоказателей = Новый Массив;
	
	Если ИмяРаздела = "Раздел1" Тогда
		ИменаМногострочныхПоказателей.Добавить("П00001М103003");
		ИменаМногострочныхПоказателей.Добавить("П00001М104003");
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		ИменаМногострочныхПоказателей.Добавить("П00021М100003");
		ИменаМногострочныхПоказателей.Добавить("П00021М100004");
		ИменаМногострочныхПоказателей.Добавить("П00022М100003");
		ИменаМногострочныхПоказателей.Добавить("П00022М100004");
		ИменаМногострочныхПоказателей.Добавить("П00023М100003");
		ИменаНемногострочныхПоказателей.Добавить("П000240000002");
		ИменаМногострочныхПоказателей.Добавить("П00025М100003");
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		ИменаНемногострочныхПоказателей.Добавить("П001010003003");
	ИначеЕсли ИмяРаздела = "Приложение11" Тогда
		ИменаНемногострочныхПоказателей.Добавить("П001010009003");
		ИменаНемногострочныхПоказателей.Добавить("П001010011003");
		ИменаНемногострочныхПоказателей.Добавить("П001010012003");
		ИменаНемногострочныхПоказателей.Добавить("П001010013003");
		ИменаНемногострочныхПоказателей.Добавить("П001010014003");
		ИменаНемногострочныхПоказателей.Добавить("П001010015003");
		ИменаНемногострочныхПоказателей.Добавить("П001010015103");
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		ИменаНемногострочныхПоказателей.Добавить("П001020005003");
		ИменаНемногострочныхПоказателей.Добавить("П001020006003");
		ИменаНемногострочныхПоказателей.Добавить("П001020006503");
		ИменаМногострочныхПоказателей.Добавить("П00102М100003");
		ИменаМногострочныхПоказателей.Добавить("П00102М207005");
		ИменаМногострочныхПоказателей.Добавить("П00102М208005");
	КонецЕсли;
	
	Для каждого ИмяПоказателя Из ИменаНемногострочныхПоказателей Цикл
		
		ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 2));
		
		ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя];
		ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
		Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
			ЧислоЕЗнак = Новый ОписаниеТипов("Число",
			Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
			ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
		КонецЕсли;
		ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
		
		СтрокаФормата = СтруктураРеквизитовФормы.мСтрокаФормата;
		Если (ИмяПоказателя = "П001010015003" ИЛИ ИмяПоказателя = "П001010015103") Тогда
			// Переопределение представления нулевого значения в строке формата (вместо "-" - "0").
			СтрокаФормата = СтрЗаменить(СтруктураРеквизитовФормы.мСтрокаФормата, "ЧН=-", "ЧН=0");
		КонецЕсли;
		
		ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтрокаФормата;
		
	КонецЦикла;
	
	Для каждого ИмяПоказателя Из ИменаМногострочныхПоказателей Цикл
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Пока ТабличныйДокумент.Области.Найти(ИмяПоказателя + "_" + ИндексСтр) <> Неопределено Цикл
			
			Если ИмяРаздела = "Раздел1" Тогда
				ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
			Иначе
				ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 2));
			КонецЕсли;
			
			ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя + "_" + ИндексСтр];
			ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
			Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
				ЧислоЕЗнак = Новый ОписаниеТипов("Число",
				Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
				ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
			КонецЕсли;
			ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
			ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение11" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущееЗначениеКоэффициентаТ = 0;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[
			ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
			Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		// Особая обработка значения показателя раздела 2 "Значение коэффициента Т".
		Если ИмяСтраницы = "Раздел2" И НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			РасчетНаСервере("Раздел21");
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
	Иначе
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
			
			// Особая обработка значения показателя раздела 2.4 "Код показателя".
			ТабличныйДокумент.Область("П000240000001").Значение = "40001";
			
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("КодВидаПТ", ТабличныйДокумент.Область("П000020004003").Значение);
			СтруктПарам.Вставить("НомерСтраницы",
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницыРаздела21(СтруктПарам);
			
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
			
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("КодВидаПТ", ТабличныйДокумент.Область("П001010001003").Значение);
			СтруктПарам.Вставить("КодОперации", ТабличныйДокумент.Область("П001010002003").Значение);
			СтруктПарам.Вставить("НомерСтраницы",
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницыПриложения1(СтруктПарам);
			
		КонецЕсли;
		
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧР1М1 = СтруктураРеквизитовФормы.мИдГруппыР1М1;
		
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппыМнЧР1М1];
		
		СтрокМнЧ1НаЛисте = 5;
		
		// Определение количества листов.
		КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
		ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
		ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
		КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
		
		// Подготовка многострочных данных для заполнения листов.
		МассивДанныхМнЧ1ДляПечати = Новый Массив;
		ИмяП00001М102003 = "П00001М102003";
		ИмяП00001М103003 = "П00001М103003";
		ИмяП00001М104003 = "П00001М104003";
		
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			
			Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
			ДанныеМнЧ1ДляПечати = Новый Структура;
			Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
				_ИндСтрокиМнЧ = СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
				ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
				
				НовИмяП00001М102003 = ИмяП00001М102003 + _ИндСтрокиМнЧ;
				НовИмяП00001М103003 = ИмяП00001М103003 + _ИндСтрокиМнЧ;
				НовИмяП00001М104003 = ИмяП00001М104003 + _ИндСтрокиМнЧ;
				
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М102003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М103003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М104003, 0);
				
				Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М102003,
					ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00001М102003]);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М103003,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
					ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00001М103003]));
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М104003,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
					ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00001М104003]));
				КонецЕсли;
			КонецЦикла;
			МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
			
		КонецЦикла;
		
		// Вывод листов.
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Если НомЛиста = 1 Тогда
				НемногострочныеДанные = ДеревоДанныхРаздела.Строки[0].Данные;
				Для каждого Пок Из НемногострочныеДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧР1М1 + СтрокаСИндексомПоказателя(Ном);
				ВставитьДопСтроку(ИмяГруппыМнЧР1М1, ИмяОбластиПреемника);
			КонецЦикла;
			
			ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		МакетРаздела2 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		МакетРаздела21 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Раздел21");
		
		ИмяГруппыМнЧР21М1 = СтруктураРеквизитовФормы.мИдГруппыР21М1;
		ИмяГруппыМнЧР22М1 = СтруктураРеквизитовФормы.мИдГруппыР22М1;
		ИмяГруппыМнЧР23М1 = СтруктураРеквизитовФормы.мИдГруппыР23М1;
		ИмяГруппыМнЧР25М1 = СтруктураРеквизитовФормы.мИдГруппыР25М1;
		
		СтрокМнЧР21М1НаЛисте = 5;
		СтрокМнЧР22М1НаЛисте = 3;
		СтрокМнЧР23М1НаЛисте = 2;
		СтрокМнЧР25М1НаЛисте = 8;
		
		Ветка2 = ДеревоДанныхРаздела.Строки[0];
		
		Для каждого Ветка21 Из Ветка2.Строки[0].Строки Цикл
			
			// Определение количества первых листов.
			//
			ДанныеМнЧР21М1 = Ветка21.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР21М1];
			КолСтрокМнЧР21М1 = ДанныеМнЧР21М1.Строки.Количество();
			ДробКолМнЧР21М1 = КолСтрокМнЧР21М1 / СтрокМнЧР21М1НаЛисте;
			ЦелКолМнЧР21М1  = Цел(КолСтрокМнЧР21М1 / СтрокМнЧР21М1НаЛисте);
			КолЛистовМнЧР21М1 = ?(ДробКолМнЧР21М1 = ЦелКолМнЧР21М1, ЦелКолМнЧР21М1, ЦелКолМнЧР21М1 + 1);
			
			ДанныеМнЧР22М1 = Ветка21.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР22М1];
			КолСтрокМнЧР22М1 = ДанныеМнЧР22М1.Строки.Количество();
			ДробКолМнЧР22М1 = КолСтрокМнЧР22М1 / СтрокМнЧР22М1НаЛисте;
			ЦелКолМнЧР22М1  = Цел(КолСтрокМнЧР22М1 / СтрокМнЧР22М1НаЛисте);
			КолЛистовМнЧР22М1 = ?(ДробКолМнЧР22М1 = ЦелКолМнЧР22М1, ЦелКолМнЧР22М1, ЦелКолМнЧР22М1 + 1);
			
			КолЛистовРаздела2 = Макс(КолЛистовМнЧР21М1, КолЛистовМнЧР22М1);
			
			// Подготовка многострочных данных для заполнения первых листов.
			//
			МассивДанныхМнЧР21М1ДляПечати = Новый Массив;
			ИмяП00021М100001 = "П00021М100001";
			ИмяП00021М100002 = "П00021М100002";
			ИмяП00021М100003 = "П00021М100003";
			ИмяП00021М100004 = "П00021М100004";
			
			МассивДанныхМнЧР22М1ДляПечати = Новый Массив;
			ИмяП00022М100001 = "П00022М100001";
			ИмяП00022М100002 = "П00022М100002";
			ИмяП00022М100003 = "П00022М100003";
			ИмяП00022М100004 = "П00022М100004";
			
			Для НомЛиста = 1 По КолЛистовРаздела2 Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧР21М1НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧР21М1НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					
					НовИмяП00021М100001 = ИмяП00021М100001 + _ИндСтроки;
					НовИмяП00021М100002 = ИмяП00021М100002 + _ИндСтроки;
					НовИмяП00021М100003 = ИмяП00021М100003 + _ИндСтроки;
					НовИмяП00021М100004 = ИмяП00021М100004 + _ИндСтроки;
					
					ДанныеМнЧДляПечати.Вставить(НовИмяП00021М100001, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00021М100002, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00021М100003, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00021М100004, 0);
					
					Если КолСтрокМнЧР21М1 >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М100001,
						ДанныеМнЧР21М1.Строки[ИндСПриращением - 1].Данные[ИмяП00021М100001]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М100002,
						ДанныеМнЧР21М1.Строки[ИндСПриращением - 1].Данные[ИмяП00021М100002]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М100003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
						ДанныеМнЧР21М1.Строки[ИндСПриращением - 1].Данные[ИмяП00021М100003]));
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М100004,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
						ДанныеМнЧР21М1.Строки[ИндСПриращением - 1].Данные[ИмяП00021М100004]));
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧР21М1ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧР22М1НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧР22М1НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					
					НовИмяП00022М100001 = ИмяП00022М100001 + _ИндСтроки;
					НовИмяП00022М100002 = ИмяП00022М100002 + _ИндСтроки;
					НовИмяП00022М100003 = ИмяП00022М100003 + _ИндСтроки;
					НовИмяП00022М100004 = ИмяП00022М100004 + _ИндСтроки;
					
					ДанныеМнЧДляПечати.Вставить(НовИмяП00022М100001, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00022М100002, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00022М100003, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00022М100004, 0);
					
					Если КолСтрокМнЧР22М1 >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00022М100001,
						ДанныеМнЧР22М1.Строки[ИндСПриращением - 1].Данные[ИмяП00022М100001]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00022М100002,
						ДанныеМнЧР22М1.Строки[ИндСПриращением - 1].Данные[ИмяП00022М100002]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00022М100003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
						ДанныеМнЧР22М1.Строки[ИндСПриращением - 1].Данные[ИмяП00022М100003]));
						ДанныеМнЧДляПечати.Вставить(НовИмяП00022М100004,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
						ДанныеМнЧР22М1.Строки[ИндСПриращением - 1].Данные[ИмяП00022М100004]));
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧР22М1ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод первых листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела2 Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела2);
				ТабличныйДокумент.Вывести(МакетРаздела21);
				
				Если Ветка2.Строки[0].Строки.Индекс(Ветка21) = 0 И НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка2.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка21.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧР21М1НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧР21М1 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧР21М1, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧР22М1НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧР22М1 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧР22М1, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧР21М1ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧР22М1ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
			// Определение количества вторых листов.
			//
			ДанныеМнЧР23М1 = Ветка21.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР23М1];
			КолСтрокМнЧР23М1 = ДанныеМнЧР23М1.Строки.Количество();
			ДробКолМнЧР23М1 = КолСтрокМнЧР23М1 / СтрокМнЧР23М1НаЛисте;
			ЦелКолМнЧР23М1  = Цел(КолСтрокМнЧР23М1 / СтрокМнЧР23М1НаЛисте);
			КолЛистовМнЧР23М1 = ?(ДробКолМнЧР23М1 = ЦелКолМнЧР23М1, ЦелКолМнЧР23М1, ЦелКолМнЧР23М1 + 1);
			
			ДанныеМнЧР25М1 = Ветка21.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР25М1];
			КолСтрокМнЧР25М1 = ДанныеМнЧР25М1.Строки.Количество();
			ДробКолМнЧР25М1 = КолСтрокМнЧР25М1 / СтрокМнЧР25М1НаЛисте;
			ЦелКолМнЧР25М1  = Цел(КолСтрокМнЧР25М1 / СтрокМнЧР25М1НаЛисте);
			КолЛистовМнЧР25М1 = ?(ДробКолМнЧР25М1 = ЦелКолМнЧР25М1, ЦелКолМнЧР25М1, ЦелКолМнЧР25М1 + 1);
			
			КолЛистовРаздела2 = Макс(КолЛистовМнЧР23М1, КолЛистовМнЧР25М1);
			
			// Подготовка многострочных данных для заполнения вторых листов.
			//
			МассивДанныхМнЧР23М1ДляПечати = Новый Массив;
			ИмяП00023М100001 = "П00023М100001";
			ИмяП00023М100002 = "П00023М100002";
			ИмяП00023М100003 = "П00023М100003";
			
			МассивДанныхМнЧР25М1ДляПечати = Новый Массив;
			ИмяП00025М100001 = "П00025М100001";
			ИмяП00025М100002 = "П00025М100002";
			ИмяП00025М100003 = "П00025М100003";
			ИмяП00025М100004 = "П00025М100004";
			ИмяП00025М100005 = "П00025М100005";
			
			Для НомЛиста = 1 По КолЛистовРаздела2 Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧР23М1НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧР23М1НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					
					НовИмяП00023М100001 = ИмяП00023М100001 + _ИндСтроки;
					НовИмяП00023М100002 = ИмяП00023М100002 + _ИндСтроки;
					НовИмяП00023М100003 = ИмяП00023М100003 + _ИндСтроки;
					
					ДанныеМнЧДляПечати.Вставить(НовИмяП00023М100001, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00023М100002, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00023М100003, 0);
					
					Если КолСтрокМнЧР23М1 >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00023М100001,
						ДанныеМнЧР23М1.Строки[ИндСПриращением - 1].Данные[ИмяП00023М100001]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00023М100002,
						ДанныеМнЧР23М1.Строки[ИндСПриращением - 1].Данные[ИмяП00023М100002]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00023М100003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
						ДанныеМнЧР23М1.Строки[ИндСПриращением - 1].Данные[ИмяП00023М100003]));
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧР23М1ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧР25М1НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧР25М1НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					
					НовИмяП00025М100001 = ИмяП00025М100001 + _ИндСтроки;
					НовИмяП00025М100002 = ИмяП00025М100002 + _ИндСтроки;
					НовИмяП00025М100003 = ИмяП00025М100003 + _ИндСтроки;
					НовИмяП00025М100004 = ИмяП00025М100004 + _ИндСтроки;
					НовИмяП00025М100005 = ИмяП00025М100005 + _ИндСтроки;
					
					ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100001, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100002, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100003, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100004, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100005, "");
					
					Если КолСтрокМнЧР25М1 >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100001,
						ДанныеМнЧР25М1.Строки[ИндСПриращением - 1].Данные[ИмяП00025М100001]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100002,
						ДанныеМнЧР25М1.Строки[ИндСПриращением - 1].Данные[ИмяП00025М100002]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
						ДанныеМнЧР25М1.Строки[ИндСПриращением - 1].Данные[ИмяП00025М100003]));
						ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100004,
						ДанныеМнЧР25М1.Строки[ИндСПриращением - 1].Данные[ИмяП00025М100004]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00025М100005,
						ДанныеМнЧР25М1.Строки[ИндСПриращением - 1].Данные[ИмяП00025М100005]);
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧР25М1ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод вторых листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела2 Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела2);
				ТабличныйДокумент.Вывести(МакетРаздела21);
				
				Если Ветка2.Строки[0].Строки.Индекс(Ветка21) = 0 И НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка2.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка21.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
				
				Для Ном = 1 По СтрокМнЧР23М1НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧР23М1 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧР23М1, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧР25М1НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧР25М1 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧР25М1, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧР23М1ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧР25М1ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Раздел2_Продолжение");
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение1" Тогда
		
		МакетПрил1 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		МакетПрил11 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение11");
		
		Для каждого Ветка1 Из ДеревоДанныхРаздела.Строки Цикл
			
			Для каждого Ветка11 Из Ветка1.Строки[0].Строки Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетПрил1);
				ТабличныйДокумент.Вывести(МакетПрил11);
				
				Если Ветка1.Строки[0].Строки.Индекс(Ветка11) = 0 Тогда
					НемногострочныеДанные = Ветка1.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НемногострочныеДанные = Ветка11.Данные;
				Для каждого Пок Из НемногострочныеДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение2" Тогда
		
		МакетПрил2 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧП2М1 = СтруктураРеквизитовФормы.мИдГруппыП2М1;
		ИмяГруппыМнЧП2М2 = СтруктураРеквизитовФормы.мИдГруппыП2М2;
		
		СтрокМнЧП2М1НаЛисте = 6;
		СтрокМнЧП2М2НаЛисте = 1;
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Определение количества листов.
			//
			ДанныеМнЧП2М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М1];
			КолСтрокМнЧП2М1 = ДанныеМнЧП2М1.Строки.Количество();
			ДробКолМнЧП2М1 = КолСтрокМнЧП2М1 / СтрокМнЧП2М1НаЛисте;
			ЦелКолМнЧП2М1  = Цел(КолСтрокМнЧП2М1 / СтрокМнЧП2М1НаЛисте);
			КолЛистовМнЧП2М1 = ?(ДробКолМнЧП2М1 = ЦелКолМнЧП2М1, ЦелКолМнЧП2М1, ЦелКолМнЧП2М1 + 1);
			
			ДанныеМнЧП2М2 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М2];
			КолСтрокМнЧП2М2 = ДанныеМнЧП2М2.Строки.Количество();
			ДробКолМнЧП2М2 = КолСтрокМнЧП2М2 / СтрокМнЧП2М2НаЛисте;
			ЦелКолМнЧП2М2  = Цел(КолСтрокМнЧП2М2 / СтрокМнЧП2М2НаЛисте);
			КолЛистовМнЧП2М2 = ?(ДробКолМнЧП2М2 = ЦелКолМнЧП2М2, ЦелКолМнЧП2М2, ЦелКолМнЧП2М2 + 1);
			
			КолЛистовРаздела = Макс(КолЛистовМнЧП2М1, КолЛистовМнЧП2М2);
			
			// Подготовка многострочных данных для заполнения листов.
			//
			МассивДанныхМнЧП2М1ДляПечати = Новый Массив;
			ИмяП00102М100001 = "П00102М100001";
			ИмяП00102М100002 = "П00102М100002";
			ИмяП00102М100003 = "П00102М100003";
			
			МассивДанныхМнЧП2М2ДляПечати = Новый Массив;
			ИмяП00102М207003 = "П00102М207003";
			ИмяП00102М207004 = "П00102М207004";
			ИмяП00102М207005 = "П00102М207005";
			ИмяП00102М207006 = "П00102М207006";
			ИмяП00102М207007 = "П00102М207007";
			ИмяП00102М208003 = "П00102М208003";
			ИмяП00102М208004 = "П00102М208004";
			ИмяП00102М208005 = "П00102М208005";
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧП2М1НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧП2М1НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					
					НовИмяП00102М100001 = ИмяП00102М100001 + _ИндСтроки;
					НовИмяП00102М100002 = ИмяП00102М100002 + _ИндСтроки;
					НовИмяП00102М100003 = ИмяП00102М100003 + _ИндСтроки;
					
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М100001, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М100002, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М100003, 0);
					
					Если КолСтрокМнЧП2М1 >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М100001,
						ДанныеМнЧП2М1.Строки[ИндСПриращением - 1].Данные[ИмяП00102М100001]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М100002,
						ДанныеМнЧП2М1.Строки[ИндСПриращением - 1].Данные[ИмяП00102М100002]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М100003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
						ДанныеМнЧП2М1.Строки[ИндСПриращением - 1].Данные[ИмяП00102М100003]));
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧП2М1ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧП2М2НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧП2М2НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					
					НовИмяП00102М207003 = ИмяП00102М207003 + _ИндСтроки;
					НовИмяП00102М207004 = ИмяП00102М207004 + _ИндСтроки;
					НовИмяП00102М207005 = ИмяП00102М207005 + _ИндСтроки;
					НовИмяП00102М207006 = ИмяП00102М207006 + _ИндСтроки;
					НовИмяП00102М207007 = ИмяП00102М207007 + _ИндСтроки;
					НовИмяП00102М208003 = ИмяП00102М208003 + _ИндСтроки;
					НовИмяП00102М208004 = ИмяП00102М208004 + _ИндСтроки;
					НовИмяП00102М208005 = ИмяП00102М208005 + _ИндСтроки;
					
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207003, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207004, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207005, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207006, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207007, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М208003, "");
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М208004, 0);
					ДанныеМнЧДляПечати.Вставить(НовИмяП00102М208005, 0);
					
					Если КолСтрокМнЧП2М2 >= ИндСПриращением Тогда
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207003,
						ДанныеМнЧП2М2.Строки[ИндСПриращением - 1].Данные[ИмяП00102М207003]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207004,
						ДанныеМнЧП2М2.Строки[ИндСПриращением - 1].Данные[ИмяП00102М207004]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207005,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
						ДанныеМнЧП2М2.Строки[ИндСПриращением - 1].Данные[ИмяП00102М207005]));
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207006,
						ДанныеМнЧП2М2.Строки[ИндСПриращением - 1].Данные[ИмяП00102М207006]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М207007,
						ДанныеМнЧП2М2.Строки[ИндСПриращением - 1].Данные[ИмяП00102М207007]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М208003,
						ДанныеМнЧП2М2.Строки[ИндСПриращением - 1].Данные[ИмяП00102М208003]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М208004,
						ДанныеМнЧП2М2.Строки[ИндСПриращением - 1].Данные[ИмяП00102М208004]);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00102М208005,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма,
						ДанныеМнЧП2М2.Строки[ИндСПриращением - 1].Данные[ИмяП00102М208005]));
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧП2М2ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетПрил2);
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
				
				Для Ном = 1 По СтрокМнЧП2М1НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧП2М1 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧП2М1, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧП2М2НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧП2М2 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧП2М2, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧП2М1ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧП2М2ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2018Кв3_";
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	МакетМЧБ = Неопределено;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	//// Особая обработка ИНН.
	//ИНН = Новый Массив(12);
	//Для Инд = 1 По 12 Цикл
	//	Для Знакоместо = 0 По 11 Цикл
	//		ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
	//	КонецЦикла;
	//	Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//КонецЦикла;
	
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Имя = "П000010001003" Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
			СокрЛП(Показатель.Значение), 11, "-", 1);
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = СокрЛП(Обл.Значение);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"			, Истина);
	СтруктураРезультата.Вставить("ДопСведенияВЗаголовокРасшифровки"	, Ложь);
	СтруктураРезультата.Вставить("ДопСведенияВСтрокуРасшифровки"	, Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	мДанныеОтчета.Вставить("ДанныеКС"	, Новый Структура);
	мДанныеОтчета.ДанныеКС.Вставить("ВТ", Новый МенеджерВременныхТаблиц);
	СформироватьСтруктурыДанныхКС();
	ПолучитьСтавкиСигаретПапирос();
	ПолучитьСписочныеЗначения();
	
	Раздел1Заполнен = РазделЗаполнен(Сохраненныеданныеотчета.ДанныеМногоуровневыхРазделов.Раздел1.Строки, Ложь);
	Раздел2Заполнен = РазделЗаполнен(Сохраненныеданныеотчета.ДанныеМногоуровневыхРазделов.Раздел2.Строки, Ложь);
	Приложение1Заполнено = РазделЗаполнен(Сохраненныеданныеотчета.ДанныеМногоуровневыхРазделов.Приложение1.Строки, Ложь);
	Приложение2Заполнено = РазделЗаполнен(Сохраненныеданныеотчета.ДанныеМногоуровневыхРазделов.Приложение2.Строки, Ложь);
		
	Если Раздел1Заполнен Тогда
		ПроверитьКС_1_01(СтруктураРезультата);
		ПроверитьКС_1_02(СтруктураРезультата);
		ПроверитьКС_1_03(СтруктураРезультата);
		ПроверитьКС_1_04(СтруктураРезультата);
		ПроверитьКС_1_05_доп(СтруктураРезультата);
	КонецЕсли;
	
	Если Раздел2Заполнен Тогда
		ПроверитьКС_2_01(СтруктураРезультата);
		ПроверитьКС_2_02(СтруктураРезультата);
		ПроверитьКС_2_03(СтруктураРезультата);
		ПроверитьКС_2_04(СтруктураРезультата);
		ПроверитьКС_2_05(СтруктураРезультата);
		ПроверитьКС_2_06(СтруктураРезультата);
		ПроверитьКС_2_07(СтруктураРезультата);
		ПроверитьКС_2_08(СтруктураРезультата);
		ПроверитьКС_2_09(СтруктураРезультата);
		ПроверитьКС_2_10(СтруктураРезультата);
		ПроверитьКС_2_11(СтруктураРезультата);
		ПроверитьКС_2_12(СтруктураРезультата);
		ПроверитьКС_2_13(СтруктураРезультата);
		ПроверитьКС_2_14(СтруктураРезультата);
		ПроверитьКС_2_15(СтруктураРезультата);
		ПроверитьКС_2_16(СтруктураРезультата);
		ПроверитьКС_2_17(СтруктураРезультата);
		ПроверитьКС_2_18(СтруктураРезультата);
		ПроверитьКС_2_19(СтруктураРезультата);
		ПроверитьКС_2_20(СтруктураРезультата);
		ПроверитьКС_2_21(СтруктураРезультата);
		ПроверитьКС_2_22(СтруктураРезультата);
		ПроверитьКС_2_23(СтруктураРезультата);
		ПроверитьКС_2_24(СтруктураРезультата);
		ПроверитьКС_2_25(СтруктураРезультата);
		ПроверитьКС_2_26(СтруктураРезультата);
		ПроверитьКС_2_27(СтруктураРезультата);
		ПроверитьКС_2_28(СтруктураРезультата);
		ПроверитьКС_2_29(СтруктураРезультата);
		ПроверитьКС_2_30(СтруктураРезультата);
		ПроверитьКС_2_31(СтруктураРезультата);
		ПроверитьКС_2_32(СтруктураРезультата);
		ПроверитьКС_2_33_доп(СтруктураРезультата);
		ПроверитьКС_2_34_доп(СтруктураРезультата);
	КонецЕсли;
	
	Если Приложение1Заполнено Тогда
		ПроверитьКС_3_01(СтруктураРезультата);
		ПроверитьКС_3_02(СтруктураРезультата);
		ПроверитьКС_3_03(СтруктураРезультата);
		ПроверитьКС_3_04(СтруктураРезультата);
		ПроверитьКС_3_05(СтруктураРезультата);
		ПроверитьКС_3_06(СтруктураРезультата);
		ПроверитьКС_3_07(СтруктураРезультата);
		ПроверитьКС_3_08(СтруктураРезультата);
		ПроверитьКС_3_09(СтруктураРезультата);
		ПроверитьКС_3_10(СтруктураРезультата);
		ПроверитьКС_3_11(СтруктураРезультата);
		ПроверитьКС_3_12_доп(СтруктураРезультата);
		ПроверитьКС_3_13_доп(СтруктураРезультата);
		ПроверитьКС_3_14_доп(СтруктураРезультата);
		ПроверитьКС_3_15_доп(СтруктураРезультата);
	КонецЕсли;
	
	Если Приложение2Заполнено Тогда
		ПроверитьКС_4_01(СтруктураРезультата);
		ПроверитьКС_4_02(СтруктураРезультата);
		ПроверитьКС_4_03(СтруктураРезультата);
		ПроверитьКС_4_04(СтруктураРезультата);
		ПроверитьКС_4_05(СтруктураРезультата);
		ПроверитьКС_4_06(СтруктураРезультата);
		ПроверитьКС_4_07(СтруктураРезультата);
		ПроверитьКС_4_08(СтруктураРезультата);
		ПроверитьКС_4_09(СтруктураРезультата);
		ПроверитьКС_4_10(СтруктураРезультата);
		ПроверитьКС_4_11а(СтруктураРезультата);
		ПроверитьКС_4_11б(СтруктураРезультата);
		ПроверитьКС_4_12(СтруктураРезультата);
		ПроверитьКС_4_13(СтруктураРезультата);
		ПроверитьКС_4_14_доп(СтруктураРезультата);
		ПроверитьКС_4_15_доп(СтруктураРезультата);
	КонецЕсли;
		
	мДанныеОтчета = Неопределено;
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	АдресФормул			= ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы	, Новый УникальныйИдентификатор);
	АдресПоказателей	= ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей"	, АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_ПроверкиРаздела1

&НаСервере
Процедура ПроверитьКС_1_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='Код ОКТМО (стр.010 Раздела 1) должен быть заполнен'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='ОКТМО %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение (""%1"") %2заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении кода ОКТМО в Разделе 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1",		"Р01С010");
	
	ПроверитьКС_1_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru='КБК (стр.020 Раздела 1) должен быть заполнен'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='КБК %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение (""%1"") %2заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении КБК в Разделе 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1",		"Р01С020");
	
	ПроверитьКС_1_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_02_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел1.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел1.Р01С010 КАК Р01С010
	|ИЗ
	|	ВТ_Раздел1 КАК ВТ_Раздел1";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", 
		?(Настройки.ПоказательР1 = "Р01С010", "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Р01С010", Настройки.ПоказательР1);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Настройки.ДопСведенияВОписаниеКС = ЗначениеЗаполнено(Выборка[Настройки.ПоказательР1]);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Показатель", Выборка[Настройки.ПоказательР1]));
		ЗарегистрироватьФормулу(Настройки);
		Показатели = ЗаполнитьПоказатели(Настройки.ПоказательР1, Выборка, Выборка.НомерСтроки, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Выборка.НомерСтраницы);
		
		Настройки.ЭтоОшибка		= НЕ ЗначениеЗаполнено(Выборка[Настройки.ПоказательР1]);
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Выборка[Настройки.ПоказательР1], ?(Настройки.ЭтоОшибка, "не ", ""));
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза, подлежащая уплате в бюджет (стр.030 Раздела 1) должна быть равна сумме '") +
		НСтр("ru='акциза в гр.2 подраздела 2.4 по коду 40001 (гр.1 подраздела 2.4) и соотв. КБК'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='КБК %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, подлежащей уплате в бюджет в Разделе 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1",		"Р01С030");
	
	ПроверитьКС_1_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза, исчисленная к уменьшению (стр.040 Раздела 1) должна быть равна сумме '") +
		НСтр("ru='акциза в гр.2 подраздела 2.4 по коду 40002 (гр.1 подраздела 2.4) и соотв. КБК'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='КБК %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза начисленной к уменьшению в Разделе 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1",		"Р01С040");
	
	ПроверитьКС_1_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_04_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел1.Р01С020 КАК КБК,
	|	ВТ_Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел1.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел1.Р01С030 КАК Р01С030
	|ИЗ
	|	ВТ_Раздел1 КАК ВТ_Раздел1
	|ИТОГИ
	|	СУММА(Р01С030)
	|ПО
	|	КБК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Раздел2х.КБК КАК КБК,
	|	ВТ_Раздел2х.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2х.Р20С040 КАК КодТовара,
	|	ВТ_Раздел2х.Р24С020 КАК Р24С020
	|ИЗ
	|	ВТ_Раздел2х КАК ВТ_Раздел2х
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	СУММА(Р24С020)
	|ПО
	|	КБК";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Р01С030", Настройки.ПоказательР1);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаР1 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаР1.Следующий() Цикл
		
		Настройки.ДопСведенияВОписаниеКС = ЗначениеЗаполнено(ВыборкаР1.КБК);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("КБК", ВыборкаР1.КБК));
		ЗарегистрироватьФормулу(Настройки);
		СуммаР1Стр = "";
		СуммаР2Стр = "";
		СуммаР2 = 0;
			
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели(Настройки.ПоказательР1, Выборка, Выборка.НомерСтроки, Истина);
			Дополнение = "КБК " + ВыборкаР1.КБК;
			ДобавитьИнфоКПредставлениюПоказателя(Показатели[Настройки.ПоказательР1], Дополнение);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Выборка.НомерСтраницы);
			ЗначениеПоказателя = ?(Показатели[Настройки.ПоказательР1].Значение >= 0, 
				Показатели[Настройки.ПоказательР1].Значение, "(" + Показатели[Настройки.ПоказательР1].Значение + ")");
			СуммаР1Стр = СуммаР1Стр + ЗначениеПоказателя + " + ";
		КонецЦикла;
		
		Если ВыборкаР2.НайтиСледующий(ВыборкаР1.КБК, "КБК") Тогда
			СуммаР2 = ВыборкаР2.Р24С020;
			Выборка = ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				Показатели = ЗаполнитьПоказатели("Р24С020", Выборка,, Истина);
				Дополнение = "Страница " + Выборка.НомерСтраницы + ", код товара " + Выборка.КодТовара + " -> КБК "
					+ Выборка.КБК;
				ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р24С020, Дополнение);
				РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Выборка.НомерСтраницы);
				ЗначениеПоказателя = ?(Показатели.Р24С020.Значение >= 0, Показатели.Р24С020.Значение, "(" 
					+ Показатели.Р24С020.Значение + ")");
				СуммаР2Стр = СуммаР2Стр + ЗначениеПоказателя + " + ";
			КонецЦикла;
		КонецЕсли; 
		
		Настройки.ЭтоОшибка		= ?(Настройки.ПоказательР1 = "Р01С030", НЕ ВыборкаР1[Настройки.ПоказательР1] = 
			Макс(СуммаР2, 0), НЕ ВыборкаР1[Настройки.ПоказательР1] = Мин(СуммаР2, 0));
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасшифровкаВСтр(СуммаР1Стр), ВыборкаР1[Настройки.ПоказательР1], РасшифровкаВСтр(СуммаР2Стр), СуммаР2);
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_05_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.5.доп)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("ПредставлениеПоказателя", НСтр("ru='Значение КБК (стр.020 Раздела 1)'"));
		
	Раздел1	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел1.Строки[0].ДанныеМногострочныхЧастей.П00001М1;
	КолвоСтрок	= Раздел1.Строки.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели("Р01С020", Раздел1.Строки[Счетчик - 1].Данные, Счетчик);
		
		Если НЕ ЗначениеЗаполнено(Показатели.Р01С020.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.ЭтоОшибка	= ПроверитьСписочноеЗначение(Настройки, Показатели.Р01С020);
		Если Настройки.ЭтоОшибка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", 1);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела2

&НаСервере
Процедура ПроверитьКС_2_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='За налоговый период сентябрь - декабрь: значение коэффициента Т (стр.030 Раздела 2) '") +
		НСтр("ru='должно быть равно 1, если значение по стр.010 Раздела 2 <= значения по стр.020 Раздела 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 1 когда %2 <= %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении коэффициента Т в стр.030 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 1);
	
	ПроверитьКС_2_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='За налоговый период сентябрь - декабрь: значение коэффициента Т (стр.030 Раздела 2) '") +
		НСтр("ru='должно быть равно 1 + 0,3 х (стр.010 Раздела 2 - стр.020 Раздела 2) / стр.010 Раздела 2, '") +
		НСтр("ru='если стр.010 Раздела 2 > стр.020 Раздела 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 1 + 0,3 х (%2 - %3) / %2 Итог [%4] когда %2 > %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении коэффициента Т в стр.030 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 2);
	
	ПроверитьКС_2_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='За налоговый период сентябрь - декабрь: значение коэффициента Т (стр.030 Раздела 2) '") +
		НСтр("ru='должно быть равно 1 текущего года для впервые ставших налогоплательщиками'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 1 когда %2 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении коэффициента Т в стр.030 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 3);
	
	ПроверитьКС_2_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_03_код(Настройки)
	
	МесяцОтчета = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если НЕ МесяцОтчета > 8 Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2.Р02С010 КАК Р02С010,
	|	ВТ_Раздел2.Р02С020 КАК Р02С020,
	|	ВТ_Раздел2.Р02С030 КАК Р02С030
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Настройки.КодКС = 1 Тогда
			
			Если НЕ Выборка.Р02С010 <= Выборка.Р02С020 Тогда
				Возврат;
			КонецЕсли;
		
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
			ЗарегистрироватьФормулу(Настройки);
			Показатели	= ЗаполнитьПоказатели("Р02С010, Р02С020, Р02С030", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка		= НЕ Показатели.Р02С030.Значение = 1;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р02С030.Значение, Показатели.Р02С010.Значение, Показатели.Р02С020.Значение);
		
		ИначеЕсли Настройки.КодКС = 2 Тогда
			
			Если НЕ(ЗначениеЗаполнено(Выборка.Р02С020) И Выборка.Р02С010 > Выборка.Р02С020) Тогда
				Возврат;
			КонецЕсли;
		
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
			ЗарегистрироватьФормулу(Настройки);
			Показатели	= ЗаполнитьПоказатели("Р02С010, Р02С020, Р02С030", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			РасчетнаяСумма =	Окр(1 + 0.3 * (Выборка.Р02С010 - Выборка.Р02С020) / Выборка.Р02С010, 6);
			РасчетнаяСуммаОкр =	Окр(РасчетнаяСумма, 2);
			Настройки.ЭтоОшибка		= НЕ Показатели.Р02С030.Значение = РасчетнаяСуммаОкр;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р02С030.Значение, Показатели.Р02С010.Значение, Показатели.Р02С020.Значение, РасчетнаяСумма);
		
		ИначеЕсли Настройки.КодКС = 3 Тогда
			
			Если ЗначениеЗаполнено(Выборка.Р02С020) Тогда
				Возврат;
			КонецЕсли;
		
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Выборка.НомерСтраницы));
			ЗарегистрироватьФормулу(Настройки);
			Показатели	= ЗаполнитьПоказатели("Р02С020, Р02С030", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка		= НЕ Показатели.Р02С030.Значение = 1;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р02С030.Значение, Показатели.Р02С020.Значение);
		
		КонецЕсли;
		
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код вида подакцизного товара (стр.040 Раздела 2) должен иметь значение 411 '") +
		НСтр("ru='или 430 или 440 или 450 или 460 или 470 или 471 или 472'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан код вида подакцизного товара в стр.040 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='Р20С040'"));
	
	ПроверитьКС_2_24_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код операции (гр.1 подраздела 2.1) должен иметь значение 10001 или 10006 - 10012'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, код операции %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан код операции в гр.1 подраздела 2.1 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='Р21С010'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00021М1'"));
	
	ПроверитьКС_2_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 450 или 460, то объем подакцизного товара '") +
		НСтр("ru='(гр.2 подраздела 2.1) = стр.040 Приложения 1 по соотв. кодам стр.010 и стр.020 Приложения 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, код операции %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении объема подакцизного товара с кодами 450 и '") +
		НСтр("ru='460 в гр.2 подраздела 2.1 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р21С020'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П01С040'"));
	Настройки.Вставить("Раздел"				, 21);
	Настройки.Вставить("КодКС"				, 6);
	
	ПроверитьКС_2_30_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 411 или 430 или 470 - 472, '") +
		НСтр("ru='то исчисленная сумма акциза (гр.3 подраздела 2.1) = 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении гр.3 подраздела 2.1 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 21);
	Настройки.Вставить("КодКС"				, 7);
	
	ПроверитьКС_2_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 440, то исчисленная сумма акциза '") +
		НСтр("ru='(гр.3 подраздела 2.1) = объем подакцизного товара (гр.2 подраздела 2.1) по соотв. '") +
		НСтр("ru='коду операции (гр.1 подраздела 2.1) х Ставка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 * %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении гр.3 подраздела 2.1 Раздела 2 '"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 21);
	Настройки.Вставить("КодКС"				, 8);
	
	ПроверитьКС_2_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 450 или 460, то исчисленная сумма акциза '") +
		НСтр("ru='(гр.3 подраздела 2.1)  = стр.030 Приложения 1 по соответствующим кодам стр.010 и стр.020 Приложения 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, код операции %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении исчисленной суммы акциза в гр.3 подраздела 2.1 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р21С030'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П01С030'"));
	Настройки.Вставить("Раздел"				, 21);
	Настройки.Вставить("КодКС"				, 9);
	
	ПроверитьКС_2_30_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 411 или 430 или 470 - 472, то сумма акциза '") +
		НСтр("ru='к уплате (гр.4 подраздела 2.1) = объем подакцизного товара (гр.2 подраздела 2.1) по '") +
		НСтр("ru='соотв. коду операции (гр.1 подраздела 2.1) х Ставка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 * %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза к уплате в гр.4 подраздела 2.1 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 21);
	Настройки.Вставить("КодКС"				, 10);
	
	ПроверитьКС_2_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='За налоговый период сентябрь - декабрь: если код вида подакцизного товара (стр.040 Раздела 2) '") +
		НСтр("ru='= 440 или 450 или 460, то сумма акциза к уплате (гр.4 подраздела 2.1) = коэффициент Т '") +
		НСтр("ru='(стр.030 Раздела 2) х исчисленная сумма акциза (гр.3 подраздела 2.1) по соотв. коду операции '") +
		НСтр("ru='(гр.1 подраздела 2.1)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 * %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза к уплате в гр.4 подраздела 2.1 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 21);
	Настройки.Вставить("КодКС"				, 11);
	
	ПроверитьКС_2_20_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='За налоговый период январь - август: если код вида подакцизного товара (стр.040 Раздела 2) '") +
		НСтр("ru='= 440 или 450 или 460, то сумма акциза к уплате (гр.4 подраздела 2.1) = исчисленная сумма '") +
		НСтр("ru='акциза (гр.3 подраздела 2.1) по соотв. коду операции (гр.1 подраздела 2.1)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза к уплате в гр.4 подраздела 2.1 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 21);
	Настройки.Вставить("КодКС"				, 12);
	
	ПроверитьКС_2_20_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код операции (гр.1 подраздела 2.2) должен иметь значение 20001 - 20015'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, код операции %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан код операции в гр.1 подраздела 2.2 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='Р22С010'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00022М1'"));
	
	ПроверитьКС_2_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_14(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 450 или 460, то объем подакцизного товара '") +
		НСтр("ru='(гр.2 подраздела 2.2) = стр.040 Приложения 1 по соотв. кодам стр.010 и стр.020 Приложения 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, код операции %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении объема подакцизного товара с кодами 450 и '") +
		НСтр("ru='460 в гр.2 подраздела 2.2 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р22С020'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П01С040'"));
	Настройки.Вставить("Раздел"				, 22);
	Настройки.Вставить("КодКС"				, 14);
	
	ПроверитьКС_2_30_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_15(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 411 или 430 или 470 - 472, '") +
		НСтр("ru='то исчисленная сумма акциза (гр.3 подраздела 2.2) = 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении гр.3 подраздела 2.2 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 22);
	Настройки.Вставить("КодКС"				, 15);
	
	ПроверитьКС_2_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_16(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 440, то исчисленная сумма акциза '") +
		НСтр("ru='(гр.3 подраздела 2.2) = объем подакцизного товара (гр.2 подраздела 2.2) по соотв. '") +
		НСтр("ru='коду операции (гр.1 подраздела 2.2) х Ставка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 * %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении  графы 3 подраздела 2.2 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 22);
	Настройки.Вставить("КодКС"				, 16);
	
	ПроверитьКС_2_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_17(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 450 или 460, то исчисленная сумма акциза '") +
		НСтр("ru='(гр.3 подраздела 2.2)  = стр.030 Приложения 1 по соответствующим кодам стр.010 и стр.020 Приложения 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, код операции %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении исчисленной суммы акциза в гр.3 подраздела 2.2 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р22С030'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П01С030'"));
	Настройки.Вставить("Раздел"				, 22);
	Настройки.Вставить("КодКС"				, 17);
	
	ПроверитьКС_2_30_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_18(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 411 или 430 или 470 - 472, то сумма акциза '") +
		НСтр("ru='к уплате (гр.4 подраздела 2.2) = объем подакцизного товара (гр.2 подраздела 2.2) по '") +
		НСтр("ru='соотв. коду операции (гр.1 подраздела 2.2) х Ставка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 * %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза к уплате в гр.4 подраздела 2.2 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 22);
	Настройки.Вставить("КодКС"				, 18);
	
	ПроверитьКС_2_18_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_18_код(Настройки)
	
	ЭтоКС07 = Настройки.КодКС = 7	ИЛИ Настройки.КодКС = 15;
	ЭтоКС08 = Настройки.КодКС = 8	ИЛИ Настройки.КодКС = 16;
	ЭтоКС10 = Настройки.КодКС = 10	ИЛИ Настройки.КодКС = 18;
	
	МассивКодов = Новый Массив;
	Если ЭтоКС08 Тогда
		МассивКодов.Добавить("440");
	Иначе
		МассивКодов.Добавить("411");
		МассивКодов.Добавить("430");
		МассивКодов.Добавить("470");
		МассивКодов.Добавить("471");
		МассивКодов.Добавить("472");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("МассивКодов"			, МассивКодов);
	Запрос.УстановитьПараметр("Раздел"				, Настройки.Раздел);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2х.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2х.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел2х.Раздел КАК Раздел,
	|	ВТ_Раздел2х.Р20С040 КАК Р20С040,
	|	ВТ_Раздел2х.Р20С041 КАК Р20С041,
	|	ВТ_Раздел2х.Р21С010 КАК Р21С010,
	|	ВТ_Раздел2х.Р21С020 КАК Р21С020,
	|	ВТ_Раздел2х.Р21С030 КАК Р21С030,
	|	ВТ_Раздел2х.Р21С040 КАК Р21С040,
	|	ВТ_Раздел2х.Р22С010 КАК Р22С010,
	|	ВТ_Раздел2х.Р22С020 КАК Р22С020,
	|	ВТ_Раздел2х.Р22С030 КАК Р22С030,
	|	ВТ_Раздел2х.Р22С040 КАК Р22С040
	|ИЗ
	|	ВТ_Раздел2х КАК ВТ_Раздел2х
	|ГДЕ
	|	ВТ_Раздел2х.Р20С040 В(&МассивКодов)
	|	И ВТ_Раздел2х.Раздел = &Раздел";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	База = "Р" + Настройки.Раздел + "С020";
	Произведение = ?(ЭтоКС10, "Р" + Настройки.Раздел + "С040", "Р" + Настройки.Раздел + "С030");
	
	Пока Выборка.Следующий() Цикл
		СтрокаПоказателей = ?(ЭтоКС07, Произведение, "Р20С040, " + База + ", Р20С041, " + Произведение);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, КодТовара", 
			Выборка.НомерСтраницы, Выборка.Р20С040));
		ЗарегистрироватьФормулу(Настройки);
		Показатели = ЗаполнитьПоказатели(СтрокаПоказателей, Выборка, Выборка.НомерСтроки, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Выборка.НомерСтраницы);
		РасчетнаяСумма = ?(ЭтоКС07, 0, Выборка[База] * Выборка.Р20С041);
		РасчетнаяСуммаОкр = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
			
		Настройки.ЭтоОшибка		= НЕ Выборка[Произведение] = РасчетнаяСуммаОкр;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Выборка[Произведение], Выборка[База], Выборка.Р20С041, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_19(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='За налоговый период сентябрь - декабрь: если код вида подакцизного товара (стр.040 Раздела 2) '") +
		НСтр("ru='= 440 или 450 или 460, то сумма акциза к уплате (гр.4 подраздела 2.2) = коэффициент Т '") +
		НСтр("ru='(стр.030 Раздела 2) х исчисленная сумма акциза (гр.3 подраздела 2.2) по соотв. коду операции '") +
		НСтр("ru='(гр.1 подраздела 2.2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 * %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза к уплате в гр.4 подраздела 2.2 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 22);
	Настройки.Вставить("КодКС"				, 19);
	
	ПроверитьКС_2_20_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_20(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='За налоговый период январь - август: если код вида подакцизного товара (стр.040 Раздела 2) '") +
		НСтр("ru='= 440 или 450 или 460, то сумма акциза к уплате (гр.4 подраздела 2.2) = исчисленная сумма '") +
		НСтр("ru='акциза (гр.3 подраздела 2.2) по соотв. коду операции (гр.1 подраздела 2.2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза к уплате в гр.4 подраздела 2.2 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Раздел"				, 22);
	Настройки.Вставить("КодКС"				, 20);
	
	ПроверитьКС_2_20_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_20_код(Настройки)
	
	ЭтоКС11 = Настройки.КодКС = 11	ИЛИ Настройки.КодКС = 19;
	ЭтоКС12 = Настройки.КодКС = 12	ИЛИ Настройки.КодКС = 20;
	
	МесяцОтчета = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЭтоКС11 И НЕ МесяцОтчета > 8 ИЛИ ЭтоКС12 И МесяцОтчета > 8 Тогда
		Возврат;
	КонецЕсли; 
	
	МассивКодов = Новый Массив;
	МассивКодов.Добавить("440");
	МассивКодов.Добавить("450");
	МассивКодов.Добавить("460");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("МассивКодов"			, МассивКодов);
	Запрос.УстановитьПараметр("Раздел"				, Настройки.Раздел);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2х.НомерСтраницы КАК НомерСтраницы2,
	|	ВТ_Раздел2х.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел2х.Раздел КАК Раздел,
	|	ВТ_Раздел2х.Р20С040 КАК Р20С040,
	|	ВТ_Раздел2х.Р21С010 КАК Р21С010,
	|	ВТ_Раздел2х.Р21С020 КАК Р21С020,
	|	ВТ_Раздел2х.Р21С030 КАК Р21С030,
	|	ВТ_Раздел2х.Р21С040 КАК Р21С040,
	|	ВТ_Раздел2х.Р22С010 КАК Р22С010,
	|	ВТ_Раздел2х.Р22С020 КАК Р22С020,
	|	ВТ_Раздел2х.Р22С030 КАК Р22С030,
	|	ВТ_Раздел2х.Р22С040 КАК Р22С040,
	|	ВТ_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2.Р02С030 КАК Р02С030
	|ИЗ
	|	ВТ_Раздел2х КАК ВТ_Раздел2х,
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|ГДЕ
	|	ВТ_Раздел2х.Р20С040 В(&МассивКодов)
	|	И ВТ_Раздел2х.Раздел = &Раздел";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	База			= "Р" + Настройки.Раздел + "С030";
	Произведение	= "Р" + Настройки.Раздел + "С040";
	
	Пока Выборка.Следующий() Цикл
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, КодТовара", 
			Выборка.НомерСтраницы2, Выборка.Р20С040));
		ЗарегистрироватьФормулу(Настройки);
		
		ПоказателиР2х = ЗаполнитьПоказатели("Р20С040, " + База + ", " + Произведение, Выборка, Выборка.НомерСтроки, Истина);
		РасшифроватьПоказатели(ПоказателиР2х, Настройки, "Раздел21", Выборка.НомерСтраницы2);
		
		Если ЭтоКС11 Тогда
			ПоказателиР2 = ЗаполнитьПоказатели("Р02С030", Выборка,, Истина);
			РасшифроватьПоказатели(ПоказателиР2, Настройки, "Раздел2", Выборка.НомерСтраницы);
		КонецЕсли;
		
		РасчетнаяСумма = ?(МесяцОтчета > 8, Выборка[База] * Выборка.Р02С030, Выборка[База]);
		РасчетнаяСуммаОкр = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
		Настройки.ЭтоОшибка		= НЕ Выборка[Произведение] = РасчетнаяСуммаОкр;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Выборка[Произведение], Выборка[База], Выборка.Р02С030, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_21(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код показателя (гр.1 подраздела 2.3) должен иметь значение 30001 или 30002'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, код операции %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении гр.1 подраздела 2.3 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='Р23С010'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00023М1'"));
	
	ПроверитьКС_2_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_22(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 450 или 460, то объем подакцизного товара '") +
		НСтр("ru='(гр.2 подраздела 2.3) = стр.040 Приложения 1 по соотв. кодам стр.010 и стр.020 Приложения 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, код операции %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении гр.2 подраздела 2.3 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р23С020'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П01С040'"));
	Настройки.Вставить("Раздел"				, 23);
	Настройки.Вставить("КодКС"				, 22);
	
	ПроверитьКС_2_30_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_23(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 450 или 460, то сумма акциза к вычету '") +
		НСтр("ru='(гр.3 подраздела 2.3)  = стр.030 Приложения 1 по соответствующим кодам стр.010 и стр.020 Приложения 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, код операции %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, подлежащей вычету в гр.3 подраздела 2.3 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р23С030'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П01С030'"));
	Настройки.Вставить("Раздел"				, 23);
	Настройки.Вставить("КодКС"				, 23);
	
	ПроверитьКС_2_30_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_24(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код показателя (гр.1 подраздела 2.4) должен иметь значение 40001 или 40002'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении гр.1 подраздела 2.4 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='Р24С010'"));
	
	ПроверитьКС_2_24_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_24_код(Настройки)
		
	Раздел2		= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел2.Строки[0].Строки[0];
	КолвоСтрок	= Раздел2.Строки.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели(Настройки.Показатель, Раздел2.Строки[Счетчик - 1].Данные);
			
		Если НЕ ЭлементЗаполнен(Раздел2.Строки[Счетчик - 1], Ложь) Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.ЭтоОшибка	= ПроверитьСписочноеЗначение(Настройки, Показатели[Настройки.Показатель]);
		Если Настройки.ЭтоОшибка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница", Счетчик));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Счетчик);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_25(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение гр.2 подраздела 2.4 по коду 40001 гр.1 подраздела 2.4 = (Сумма гр.4 подраздела 2.1 '") +
		НСтр("ru='+ Сумма гр.4 подраздела 2.2 с кодами 20003 или 20004 или 20005 или 20007 или 20009 или 20011 '") +
		НСтр("ru='или 20013 или 20015 гр.1 подраздела 2.2) - Сумма гр.3 подраздела 2.3, если результат >= 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, подлежащей уплате в гр.2 подраздела 2.4 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодПоказателя",		"40001");
	
	ПроверитьКС_2_26_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_26(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение гр.2 подраздела 2.4 по коду 40002 гр.1 подраздела 2.4 = (Сумма гр.4 подраздела 2.1 '") +
		НСтр("ru='+ Сумма гр.4 подраздела 2.2 с кодами 20003 или 20004 или 20005 или 20007 или 20009 или 20011 '") +
		НСтр("ru='или 20013 или 20015 гр.1 подраздела 2.2) - Сумма гр.3 подраздела 2.3, если результат < 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, начисленной к уменьшению в гр.2 подраздела '") +
		НСтр("ru='2.4 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодПоказателя",		"40002");
	
	ПроверитьКС_2_26_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_26_код(Настройки)
	
	МассивУчитываемых = Новый Массив;
	МассивУчитываемых.Добавить("20003");
	МассивУчитываемых.Добавить("20004");
	МассивУчитываемых.Добавить("20005");
	МассивУчитываемых.Добавить("20007");
	МассивУчитываемых.Добавить("20009");
	МассивУчитываемых.Добавить("20011");
	МассивУчитываемых.Добавить("20013");
	МассивУчитываемых.Добавить("20015");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("МассивУчитываемых"	, МассивУчитываемых);
	Запрос.УстановитьПараметр("КодПоказателя"		, Настройки.КодПоказателя);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2х.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2х.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел2х.Раздел КАК Раздел,
	|	ВТ_Раздел2х.Р20С040 КАК КодТовара,
	|	ВТ_Раздел2х.Р21С040 КАК Р21С040,
	|	ВТ_Раздел2х.Р22С010 КАК Р22С010,
	|	ВТ_Раздел2х.Р22С040 КАК Р22С040,
	|	ВТ_Раздел2х.Р23С030 КАК Р23С030,
	|	ВТ_Раздел2х.Р24С010 КАК Р24С010,
	|	ВТ_Раздел2х.Р24С020 КАК Р24С020
	|ИЗ
	|	ВТ_Раздел2х КАК ВТ_Раздел2х
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_Раздел2х.Раздел = 22
	|				ТОГДА ВТ_Раздел2х.Р22С010 В (&МассивУчитываемых)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВТ_Раздел2х.Р24С010 = &КодПоказателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	Раздел,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	СУММА(Р21С040),
	|	СУММА(Р22С040),
	|	СУММА(Р23С030),
	|	МИНИМУМ(Р24С010),
	|	МИНИМУМ(Р24С020)
	|ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	ВыборкаГр = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГр.Следующий() Цикл
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, КодТовара", ВыборкаГр.НомерСтраницы, 
			ВыборкаГр.КодТовара));
		ЗарегистрироватьФормулу(Настройки);
		Показатели = ЗаполнитьПоказатели("Р24С010, Р24С020", ВыборкаГр,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", ВыборкаГр.НомерСтраницы);
		РасчетнаяСумма = ВыборкаГр.Р21С040 + ВыборкаГр.Р22С040 + ВыборкаГр.Р23С030;
		СуммаСтр = "";
		Счетчик = 0;
			
		Выборка = ВыборкаГр.Выбрать();
		Пока Выборка.Следующий() И Счетчик < 1000 Цикл
			Если Выборка.Раздел = 21 Тогда
				ИмяПоказателя = "Р21С040";
			ИначеЕсли Выборка.Раздел = 22 Тогда	
				ИмяПоказателя = "Р22С040";
			ИначеЕсли Выборка.Раздел = 23 Тогда	
				ИмяПоказателя = "Р23С030";
			Иначе
				Продолжить;
			КонецЕсли;
			Показатели = ЗаполнитьПоказатели(ИмяПоказателя, Выборка, Выборка.НомерСтроки, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Выборка.НомерСтраницы);
			ЗначениеПоказателя = ?(Показатели[ИмяПоказателя].Значение >= 0, 
				Показатели[ИмяПоказателя].ЗначениеСтр, "(" + Показатели[ИмяПоказателя].ЗначениеСтр + ")");
			Если Счетчик <= 4 И ЗначениеЗаполнено(Показатели[ИмяПоказателя].Значение) Тогда
				СуммаСтр = СуммаСтр + ?(Счетчик = 4, ?(ЗначениеЗаполнено(РасчетнаяСумма), "<...>", "0"), 
					ЗначениеПоказателя) + " + ";
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		Настройки.ЭтоОшибка		= НЕ ВыборкаГр.Р24С020 = РасчетнаяСумма;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			ВыборкаГр.Р24С020, РасшифровкаВСтр(СуммаСтр), РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_27(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение гр.2 подраздела 2.4 по коду 40002 гр.1 подраздела 2.4 должно быть больше 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, начисленной к уменьшению в гр.2 '") +
		НСтр("ru='подраздела 2.4 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("КодПоказателя"		, "40002");
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Раздел2х.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2х.Р20С040 КАК КодТовара,
	|	ВТ_Раздел2х.Р24С010 КАК Р24С010,
	|	-ВТ_Раздел2х.Р24С020 КАК Р24С020
	|ИЗ
	|	ВТ_Раздел2х КАК ВТ_Раздел2х
	|ГДЕ
	|	ВТ_Раздел2х.Р24С010 = &КодПоказателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, КодТовара", Выборка.НомерСтраницы, 
			Выборка.КодТовара));
		ЗарегистрироватьФормулу(Настройки);
		Показатели = ЗаполнитьПоказатели("Р24С010, Р24С020", Выборка,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Выборка.НомерСтраницы);
		
		Настройки.ЭтоОшибка		= НЕ Выборка.Р24С020 > 0;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Выборка.Р24С020);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_28(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код показателя (гр.1 подраздела 2.5) должен иметь значение 50001 - 50011'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, код операции %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при заполнении графы 1 подраздела 2.5 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='Р25С010'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00025М1'"));
	
	ПроверитьКС_2_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_28_код(Настройки, Направление = "")
		
	Раздел2		= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел2.Строки[0].Строки[0];
	КолвоСтрок	= Раздел2.Строки.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		
		Раздел2х	= Раздел2.Строки[Счетчик - 1].ДанныеМногострочныхЧастей[Настройки.ТабЧасть];
		КолвоСтрокТЧ = Раздел2х.Строки.Количество();
		Для Инд	= 1 По КолвоСтрокТЧ Цикл
			Показатели	= ЗаполнитьПоказатели(Настройки.Показатель, Раздел2х.Строки[Инд - 1].Данные, Инд);
			
			Если НЕ ЭлементЗаполнен(Раздел2х.Строки[Инд - 1], Ложь) Тогда
				Продолжить;
			КонецЕсли;
			
			Настройки.ЭтоОшибка	= ПроверитьСписочноеЗначение(Настройки, Показатели[Настройки.Показатель],, Направление);
			Если Настройки.ЭтоОшибка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, Строка, КодОперации", Счетчик, Инд,
				Показатели[Настройки.Показатель].Значение));
			ЗарегистрироватьФормулу(Настройки);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Счетчик);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_29(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 450 или 460, то объем подакцизного товара '") +
		НСтр("ru='(гр.2 подраздела 2.5) = стр.040 Приложения 1 по соотв. кодам стр.010, стр.020 и стр.025 Приложения 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, код операции %2, период %3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении объема подакцизного товара при подтвержденном экспорте '") +
		НСтр("ru='в гр.2 подраздела 2.5 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р25С020'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П01С040'"));
	Настройки.Вставить("Раздел"				, 25);
	Настройки.Вставить("КодКС"				, 29);
	
	ПроверитьКС_2_30_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_30(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если код вида подакцизного товара (стр.040 Раздела 2) = 450 или 460, то сумма акциза '") +
		НСтр("ru='(гр.3 подраздела 2.5) = стр.030 Приложения 1 по соответствующим кодам стр.010, стр.020 '") +
		НСтр("ru='и стр.025 Приложения 1, если значение месяца (гр.4 подраздела 2.5) = 01 - 08'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, код операции %2, период %3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении объема подакцизного товара при подтвержденном экспорте '") +
		НСтр("ru='в гр.3 подраздела 2.5 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р25С030'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П01С030'"));
	Настройки.Вставить("Раздел"				, 25);
	Настройки.Вставить("КодКС"				, 30);
	
	ПроверитьКС_2_30_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_30_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("Раздел"				, Настройки.Раздел);
	Запрос.УстановитьПараметр("КодКС"				, Настройки.КодКС);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2х.Р20С040 + ВТ_Раздел2х.Р21С010 + ВТ_Раздел2х.Р22С010 + ВТ_Раздел2х.Р23С010 + 
	|	ВТ_Раздел2х.Р25С010 + ВТ_Раздел2х.Р25С050 + ВТ_Раздел2х.Р25С040 КАК Ключ,
	|	ВТ_Раздел2х.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2х.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел2х.Раздел КАК Раздел,
	|	ВТ_Раздел2х.Р20С040 КАК КодТовара,
	|	ВТ_Раздел2х.Р21С010 КАК Р21С010,
	|	ВТ_Раздел2х.Р21С020 КАК Р21С020,
	|	ВТ_Раздел2х.Р21С030 КАК Р21С030,
	|	ВТ_Раздел2х.Р22С010 КАК Р22С010,
	|	ВТ_Раздел2х.Р22С020 КАК Р22С020,
	|	ВТ_Раздел2х.Р22С030 КАК Р22С030,
	|	ВТ_Раздел2х.Р23С010 КАК Р23С010,
	|	ВТ_Раздел2х.Р23С020 КАК Р23С020,
	|	-ВТ_Раздел2х.Р23С030 КАК Р23С030,
	|	ВТ_Раздел2х.Р25С010 КАК Р25С010,
	|	ВТ_Раздел2х.Р25С020 КАК Р25С020,
	|	ВТ_Раздел2х.Р25С030 КАК Р25С030,
	|	ВТ_Раздел2х.Р25С040 КАК Р25С040,
	|	ВТ_Раздел2х.Р25С050 КАК Р25С050
	|ИЗ
	|	ВТ_Раздел2х КАК ВТ_Раздел2х
	|ГДЕ
	|	ВТ_Раздел2х.Р20С040 В (""450"", ""460"")
	|	И ВТ_Раздел2х.Раздел = &Раздел
	|	И ВЫБОР
	|			КОГДА &КодКС = 30
	|				ТОГДА НЕ ВТ_Раздел2х.Р25С040 В (""09"", ""10"", ""11"", ""12"")
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВТ_Раздел2х.Р20С040 + ВТ_Раздел2х.Р21С010 + ВТ_Раздел2х.Р22С010 + ВТ_Раздел2х.Р23С010 + 
	|	ВТ_Раздел2х.Р25С010 + ВТ_Раздел2х.Р25С050 + ВТ_Раздел2х.Р25С040 ПОДОБНО ""[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ключ,
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(Р21С010),
	|	СУММА(Р21С020),
	|	СУММА(Р21С030),
	|	МИНИМУМ(Р22С010),
	|	СУММА(Р22С020),
	|	СУММА(Р22С030),
	|	МИНИМУМ(Р23С010),
	|	СУММА(Р23С020),
	|	СУММА(Р23С030),
	|	МИНИМУМ(Р25С010),
	|	СУММА(Р25С020),
	|	СУММА(Р25С030),
	|	МИНИМУМ(Р25С040),
	|	МИНИМУМ(Р25С050)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приложение1.П01С010 + ВТ_Приложение1.П01С020 + ВТ_Приложение1.П01С026 + ВТ_Приложение1.П01С025 КАК Ключ,
	|	ВТ_Приложение1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Приложение1.П01С010 КАК П01С010,
	|	ВТ_Приложение1.П01С020 КАК П01С020,
	|	ВТ_Приложение1.П01С025 КАК П01С025,
	|	ВТ_Приложение1.П01С026 КАК П01С026,
	|	ВТ_Приложение1.П01С030 КАК П01С030,
	|	ВТ_Приложение1.П01С040 КАК П01С040
	|ИЗ
	|	ВТ_Приложение1 КАК ВТ_Приложение1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ключ,
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(П01С010),
	|	МИНИМУМ(П01С020),
	|	МИНИМУМ(П01С025),
	|	МИНИМУМ(П01С026),
	|	СУММА(П01С030),
	|	СУММА(П01С040)
	|ПО
	|	Ключ";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаР1 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПоказательОперации = "Р" + Настройки.Раздел + "С010";
	Пока ВыборкаР1.Следующий() Цикл
		
		ЗначениеПериода = ВыборкаР1.Р25С040 + "/" + ВыборкаР1.Р25С050;
		Если Настройки.КодКС = 29 ИЛИ Настройки.КодКС = 30 Тогда
			ДопСведения = Новый Структура("КодТовара, КодОперации, Период", ВыборкаР1.КодТовара, ВыборкаР1[ПоказательОперации], 
				ЗначениеПериода);
		Иначе
			ДопСведения = Новый Структура("КодТовара, КодОперации", ВыборкаР1.КодТовара, ВыборкаР1[ПоказательОперации]);
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", ДопСведения);
		ЗарегистрироватьФормулу(Настройки);
		СуммаР1Стр = "";
		СуммаР2Стр = "";
		СуммаР2 = 0;
			
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели(Настройки.ПоказательР1, Выборка, Выборка.НомерСтроки, Истина);
			Дополнение = "Код товара " + Выборка.КодТовара + ", код операции " + Выборка[ПоказательОперации]
				+ ?(Настройки.КодКС = 29 ИЛИ Настройки.КодКС = 30, ", период " + ЗначениеПериода, "");
			ДобавитьИнфоКПредставлениюПоказателя(Показатели[Настройки.ПоказательР1], Дополнение);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Выборка.НомерСтраницы);
			СуммаР1Стр = СуммаР1Стр + Показатели[Настройки.ПоказательР1].ЗначениеСтр + " + ";
		КонецЦикла;
		
		Если ВыборкаР2.НайтиСледующий(ВыборкаР1.Ключ, "Ключ") Тогда
			СуммаР2 = ВыборкаР2[Настройки.ПоказательР2];
			Выборка = ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				Показатели = ЗаполнитьПоказатели(Настройки.ПоказательР2, Выборка,, Истина);
				Дополнение = "Код товара " + Выборка.П01С010 + ", код операции " + Выборка.П01С020
					+ ?(Настройки.КодКС = 29 ИЛИ Настройки.КодКС = 30, ", период " + Выборка.П01С025 + "/" + Выборка.П01С026, "");
				ДобавитьИнфоКПредставлениюПоказателя(Показатели[Настройки.ПоказательР2], Дополнение);
				РасшифроватьПоказатели(Показатели, Настройки, "Приложение1", Выборка.НомерСтраницы);
				СуммаР2Стр = СуммаР2Стр + Показатели[Настройки.ПоказательР2].ЗначениеСтр + " + ";
			КонецЦикла;
		КонецЕсли; 
			
		Настройки.ЭтоОшибка		= НЕ ВыборкаР1[Настройки.ПоказательР1] = СуммаР2;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасшифровкаВСтр(СуммаР1Стр), ВыборкаР1[Настройки.ПоказательР1], РасшифровкаВСтр(СуммаР2Стр), СуммаР2);
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_31(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение гр.2 подраздела 2.5 по кодам 50003 или 50008 или 50009 гр.1 подраздела 2.5 = Сумма '") +
		НСтр("ru='гр.4 стр.070 раздела 2 Приложения 2 по соотв. коду гр.3 стр.070 раздела 2 Приложения 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза при подтвержденном экспорте в гр.2 '") +
		НСтр("ru='подраздела 2.5 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р25С020'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П22С074'"));
	Настройки.Вставить("Раздел"				, 25);
	
	ПроверитьКС_2_32_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_32(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение гр.3 подраздела 2.5 по кодам 50003 или 50008 или 50009 гр.1 подраздела 2.5 = Сумма '") +
		НСтр("ru='гр.5 стр.070 раздела 2 Приложения 2 по соотв. коду гр.3 стр.070 раздела 2 Приложения 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза при подтвержденном экспорте в гр.3 '") +
		НСтр("ru='подраздела 2.5 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1"		, НСтр("ru='Р25С030'"));
	Настройки.Вставить("ПоказательР2"		, НСтр("ru='П22С075'"));
	Настройки.Вставить("Раздел"				, 25);
	
	ПроверитьКС_2_32_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_32_код(Настройки)
	
	МассивУчитываемых = Новый Массив;
	МассивУчитываемых.Добавить("50003");
	МассивУчитываемых.Добавить("50008");
	МассивУчитываемых.Добавить("50009");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("МассивУчитываемых"	, МассивУчитываемых);
	Запрос.УстановитьПараметр("Раздел"				, 25);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел2х.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2х.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел2х.Раздел КАК Раздел,
	|	ВТ_Раздел2х.Р20С040 КАК КодТовара,
	|	ВТ_Раздел2х.Р25С010 КАК Р25С010,
	|	ВТ_Раздел2х.Р25С020 КАК Р25С020,
	|	ВТ_Раздел2х.Р25С030 КАК Р25С030
	|ИЗ
	|	ВТ_Раздел2х КАК ВТ_Раздел2х
	|ГДЕ
	|	ВТ_Раздел2х.Раздел = &Раздел
	|	И ВТ_Раздел2х.Р25С010 В(&МассивУчитываемых)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Р25С020),
	|	СУММА(Р25С030)
	|ПО
	|	КодТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приложение22.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Приложение22.НомерСтроки КАК НомерСтроки,
	|	ВТ_Приложение22.П22С073 КАК П22С073,
	|	ВТ_Приложение22.П22С074 КАК П22С074,
	|	ВТ_Приложение22.П22С075 КАК П22С075
	|ИЗ
	|	ВТ_Приложение22 КАК ВТ_Приложение22
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(П22С074),
	|	СУММА(П22С075)
	|ПО
	|	П22С073";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаР1 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаР1.Следующий() Цикл
		
		ДопСведения = Новый Структура("КодТовара", ВыборкаР1.КодТовара);
		Настройки.Вставить("ДопСведенияПараметры", ДопСведения);
		ЗарегистрироватьФормулу(Настройки);
		СуммаР1Стр = "";
		СуммаР2Стр = "";
		СуммаР2 = 0;
			
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели(Настройки.ПоказательР1, Выборка, Выборка.НомерСтроки, Истина);
			Дополнение = "Страница " + Выборка.НомерСтраницы + ", строка " + Выборка.НомерСтроки;
			ДобавитьИнфоКПредставлениюПоказателя(Показатели[Настройки.ПоказательР1], Дополнение);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел21", Выборка.НомерСтраницы);
			СуммаР1Стр = СуммаР1Стр + Показатели[Настройки.ПоказательР1].ЗначениеСтр + " + ";
		КонецЦикла;
		
		Если ВыборкаР2.НайтиСледующий(ВыборкаР1.КодТовара, "П22С073") Тогда
			СуммаР2 = ВыборкаР2[Настройки.ПоказательР2];
			Выборка = ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				Показатели = ЗаполнитьПоказатели(Настройки.ПоказательР2, Выборка, Выборка.НомерСтроки, Истина);
				Дополнение = "Страница " + Выборка.НомерСтраницы + ", строка " + Выборка.НомерСтроки;
				ДобавитьИнфоКПредставлениюПоказателя(Показатели[Настройки.ПоказательР2], Дополнение);
				РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Выборка.НомерСтраницы);
				СуммаР2Стр = СуммаР2Стр + Показатели[Настройки.ПоказательР2].ЗначениеСтр + " + ";
			КонецЦикла;
		КонецЕсли; 
			
		Настройки.ЭтоОшибка		= НЕ ВыборкаР1[Настройки.ПоказательР1] = СуммаР2;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасшифровкаВСтр(СуммаР1Стр), ВыборкаР1[Настройки.ПоказательР1], РасшифровкаВСтр(СуммаР2Стр), СуммаР2);
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_33_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.33.доп)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, месяц %3'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='Р25С040'"));
	Настройки.Вставить("ПредставлениеПоказателя"
											, НСтр("ru='Значение месяца налогового периода (гр.4 подраздела 2.5)'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00025М1'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	
	ПроверитьКС_2_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_34_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 2.34.доп)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, год %3'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='Р25С050'"));
	Настройки.Вставить("ПредставлениеПоказателя"
											, НСтр("ru='Значение года налогового периода (гр.5 подраздела 2.5)'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00025М1'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	
	ПроверитьКС_2_28_код(Настройки, "Убыв");
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиПриложения1

&НаСервере
Процедура ПроверитьКС_3_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код вида подакцизного товара (стр.010 Приложения 1) должен иметь значение 450 или 460'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан код вида подакцизного товара в стр.010 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='П01С010'"));
	
	ПроверитьКС_3_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код операции (стр.020 Приложения 1) должен иметь значение 10001 или 10006 - 10012 '") +
		НСтр("ru='или 20001 - 20015 или 30001 или 30002 или 50001 - 50011'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код операции %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан код операции (показателя) в стр.020 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='П01С020'"));
	
	ПроверитьКС_3_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_02_код(Настройки)
		
	Приложение1	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Приложение1;
	КолвоСтрок	= Приложение1.Строки.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели(Настройки.Показатель, Приложение1.Строки[Счетчик - 1].Данные);
		Настройки.ДопСведенияВОписаниеКС = ЗначениеЗаполнено(Показатели[Настройки.Показатель].Значение);
		
		Если НЕ ЭлементЗаполнен(Приложение1.Строки[Счетчик - 1], Ложь) Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.ЭтоОшибка	= ПроверитьСписочноеЗначение(Настройки, Показатели[Настройки.Показатель]);
		Если Настройки.ЭтоОшибка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Код", Показатели[Настройки.Показатель].Значение));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Приложение1", Счетчик);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Налоговый период (стр.025 Приложения 1) должен быть заполнен, если код '") +
		НСтр("ru='операции (стр.020 Приложения 1) = 50001 - 50011'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2, код операции %3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 > 0, %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно заполнена стр.025 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, "П01С025,П01С026");
	Настройки.Вставить("КодКС"				, 3);
	
	ПроверитьКС_3_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_03_код(Настройки)
	
	МассивУчитываемых = Новый Массив;
	МассивУчитываемых.Добавить("50001");
	МассивУчитываемых.Добавить("50002");
	МассивУчитываемых.Добавить("50003");
	МассивУчитываемых.Добавить("50004");
	МассивУчитываемых.Добавить("50005");
	МассивУчитываемых.Добавить("50006");
	МассивУчитываемых.Добавить("50007");
	МассивУчитываемых.Добавить("50008");
	МассивУчитываемых.Добавить("50009");
	МассивУчитываемых.Добавить("50010");
	МассивУчитываемых.Добавить("50011");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("МассивУчитываемых"	, МассивУчитываемых);
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Приложение1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Приложение1.П01С010 КАК КодТовара,
	|	ВТ_Приложение1.П01С020 КАК КодОперации,
	|	ВТ_Приложение1.П01С025 КАК П01С025,
	|	ВТ_Приложение1.П01С026 КАК П01С026
	|ИЗ
	|	ВТ_Приложение1 КАК ВТ_Приложение1
	|ГДЕ
	|	ВТ_Приложение1.П01С020 В (&МассивУчитываемых)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Показатели = ЗаполнитьПоказатели(Настройки.Показатель, Выборка,, Истина);
		
		Если Настройки.КодКС = 14 ИЛИ Настройки.КодКС = 15 Тогда
			Если НЕ ЗначениеЗаполнено(Выборка[Настройки.Показатель]) Тогда
				Продолжить;
			КонецЕсли;
			Направление = ?(Настройки.КодКС = 15, "УБЫВ", "");
			Настройки.ЭтоОшибка	= ПроверитьСписочноеЗначение(Настройки, Показатели[Настройки.Показатель],, Направление);
			Если Настройки.ЭтоОшибка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.КодКС = 3 Тогда
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, КодТовара, КодОперации", 
				Выборка.НомерСтраницы, Выборка.КодТовара, Выборка.КодОперации));
		Иначе
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, Период", 
				Выборка.НомерСтраницы, Выборка[Настройки.Показатель]));
		КонецЕсли;
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Приложение1", Выборка.НомерСтраницы);
		
		Если Настройки.КодКС = 3 Тогда
			Настройки.ЭтоОшибка		= НЕ (ЗначениеЗаполнено(Выборка.П01С025) И ЗначениеЗаполнено(Выборка.П01С026));
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				?(ЗначениеЗаполнено(Выборка.П01С025), Выборка.П01С025, "0"), 
				?(ЗначениеЗаполнено(Выборка.П01С026), Выборка.П01С026, "0"));
		КонецЕсли;
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Объем реализованных табачных изделий (стр.080 Приложения 1) = количество реализованных упаковок '") +
		НСтр("ru='(стр.060 Приложения 1) х количество сигарет в одной упаковке (стр.070 Приложения 1) / 1000'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, страница %2, наименование ""%3""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 х %3) / 1000 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении объема реализованных табачных изделий в стр.080 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 4);
	
	ПроверитьКС_3_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза, рассчитанная исходя из твердой ставки (стр.090 Приложения 1) = объем реализованных '") +
		НСтр("ru='табачных изделий (стр.080 Приложения 1) х Ставку (твердая часть)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, страница %2, наименование ""%3""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза из твердой ставки в стр.090 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 5);
	
	ПроверитьКС_3_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Расчетная стоимость реализованных табачных изделий (стр.110 Приложения 1) = количество реализованных '") +
		НСтр("ru='упаковок (стр.060 Приложения 1) х максимальная розничная цена за упаковку (стр.100 Приложения 1)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, страница %2, наименование ""%3""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении расчетной стоимости  реализованных табачных изделий в '") +
		НСтр("ru='стр.110 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 6);
	
	ПроверитьКС_3_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза, расчитанная исходя из адвалорной ставки (стр.120 Приложения 1) = расчетная '") +
		НСтр("ru='стоимость реализованных табачных изделий (стр.110 Приложения 1) х Ставку (адвалорная часть)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, страница %2, наименование ""%3""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3% Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза из адвалорной ставки в стр.120 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 7);
	
	ПроверитьКС_3_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза из комбинированной ставки (стр.130 Приложения 1) = сумма акциза из твердой ставки '") +
		НСтр("ru='(стр.090 Приложения 1) + сумма акциза из адвалорной ставки (стр.120 Приложения 1)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, страница %2, наименование ""%3""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза из комбинированной ставки в стр.130 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 8);
	
	ПроверитьКС_3_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза, расчитанная исходя из минимальной ставки (стр.140 Приложения 1) = '") +
		НСтр("ru='объем реализованных табачных изделий (стр.080 Приложения 1) х минимальную ставку'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, страница %2, наименование ""%3""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза из минимальной ставки в стр.140 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 9);
	
	ПроверитьКС_3_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза, принимаемая к расчету исходя из комбинированной ставки акциза (стр.150 Приложения 1) '") +
		НСтр("ru='= сумма акциза, рассчитанная исходя из комбинированной ставки акциза (стр.130 Приложения 1), если '") +
		НСтр("ru='стр.130 Приложения 1 > стр.140 Приложения 1. Если стр.130 Приложения 1 <= стр.140 Приложения 1, то '") +
		НСтр("ru='стр.150 Приложения 1 = 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, страница %2, наименование ""%3""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза из комбинированной ставки в стр.150 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 10);
	
	ПроверитьКС_3_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза, принимаемая к расчету исходя из минимальной ставки акциза (стр.151 Приложения 1) '") +
		НСтр("ru='= сумма акциза, рассчитанная исходя из минимальной ставки акциза (стр.140 Приложения 1), если '") +
		НСтр("ru='стр.130 Приложения 1 <= стр.140 Приложения 1. Если стр.130 Приложения 1 > стр.140 Приложения 1, то '") +
		НСтр("ru='стр.151 Приложения 1 = 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, страница %2, наименование ""%3""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза из минимальной ставки в стр.151 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 11);
	
	ПроверитьКС_3_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_11_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Приложение11.КодТовара КАК КодТовара,
	|	ВТ_Приложение11.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Приложение11.НомерСтраницы2 КАК НомерСтраницы2,
	|	ВТ_Приложение11.П01С050 КАК П01С050,
	|	ВТ_Приложение11.П01С060 КАК П01С060,
	|	ВТ_Приложение11.П01С070 КАК П01С070,
	|	ВТ_Приложение11.П01С080 КАК П01С080,
	|	ВТ_Приложение11.П01С090 КАК П01С090,
	|	ВТ_Приложение11.П01С100 КАК П01С100,
	|	ВТ_Приложение11.П01С110 КАК П01С110,
	|	ВТ_Приложение11.П01С120 КАК П01С120,
	|	ВТ_Приложение11.П01С130 КАК П01С130,
	|	ВТ_Приложение11.П01С140 КАК П01С140,
	|	ВТ_Приложение11.П01С150 КАК П01С150,
	|	ВТ_Приложение11.П01С151 КАК П01С151,
	|	0 КАК СтавкаТвердая,
	|	0 КАК СтавкаАдвалорная,
	|	0 КАК СтавкаМинимальная
	|ИЗ
	|	ВТ_Приложение11 КАК ВТ_Приложение11
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтраницы2";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Настройки.КодКС = 5 ИЛИ Настройки.КодКС = 7 ИЛИ Настройки.КодКС = 9 Тогда
			Ставки = мДанныеОтчета.ДанныеКС.СтавкиСигаретПапирос.Получить(Выборка.КодТовара);
			Если Ставки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("КодТовара, Страница, Наименование", 
			Выборка.КодТовара, Выборка.НомерСтраницы2, Выборка.П01С050));
		ЗарегистрироватьФормулу(Настройки);
		НомерСтраницы = "" + Выборка.НомерСтраницы + "," + Выборка.НомерСтраницы2;
		
		Если Настройки.КодКС = 4 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П01С050, П01С060, П01С070, П01С080", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы);
			РасчетнаяСумма = Показатели.П01С060.Значение * Показатели.П01С070.Значение / 1000;
			Настройки.ЭтоОшибка		= НЕ Показатели.П01С080.Значение = РасчетнаяСумма;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П01С080.Значение, Показатели.П01С060.Значение, Показатели.П01С070.Значение, РасчетнаяСумма);
		
		ИначеЕсли Настройки.КодКС = 5 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П01С050, П01С080, СтавкаТвердая, П01С090", Выборка,, Истина);
			Показатели.СтавкаТвердая.Значение = Ставки.СтавкаТвердая;
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы, "П01С050, П01С080");
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы, "СтавкаТвердая",,"БезРасшифровки");
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы, "П01С090");
			РасчетнаяСумма = Показатели.П01С080.Значение * Ставки.СтавкаТвердая;
			РасчетнаяСуммаОкр = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
			Настройки.ЭтоОшибка		= НЕ Показатели.П01С090.Значение = РасчетнаяСуммаОкр;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П01С090.Значение, Показатели.П01С080.Значение, Показатели.СтавкаТвердая.Значение, РасчетнаяСумма);
				
		ИначеЕсли Настройки.КодКС = 6 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П01С050, П01С060, П01С100, П01С110", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы);
			РасчетнаяСумма = Показатели.П01С060.Значение * Показатели.П01С100.Значение;
			РасчетнаяСуммаОкр = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
			Настройки.ЭтоОшибка		= НЕ Показатели.П01С110.Значение = РасчетнаяСуммаОкр;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П01С110.Значение, Показатели.П01С060.Значение, Показатели.П01С100.Значение, РасчетнаяСумма);
		
		ИначеЕсли Настройки.КодКС = 7 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П01С050, П01С110, СтавкаАдвалорная, П01С120", Выборка,, Истина);
			Показатели.СтавкаАдвалорная.Значение = Ставки.СтавкаАдвалорная;
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы, "П01С050, П01С110");
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы, "СтавкаАдвалорная",,"БезРасшифровки");
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы, "П01С120");
			РасчетнаяСумма = Показатели.П01С110.Значение * Ставки.СтавкаАдвалорная / 100;
			РасчетнаяСуммаОкр = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
			Настройки.ЭтоОшибка		= НЕ Показатели.П01С120.Значение = РасчетнаяСуммаОкр;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П01С120.Значение, Показатели.П01С110.Значение, Показатели.СтавкаАдвалорная.Значение, РасчетнаяСумма);
				
		ИначеЕсли Настройки.КодКС = 8 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П01С050, П01С090, П01С120, П01С130", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы);
			РасчетнаяСумма = Показатели.П01С090.Значение + Показатели.П01С120.Значение;
			Настройки.ЭтоОшибка		= НЕ Показатели.П01С130.Значение = РасчетнаяСумма;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П01С130.Значение, Показатели.П01С090.Значение, Показатели.П01С120.Значение, РасчетнаяСумма);
		
		ИначеЕсли Настройки.КодКС = 9 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П01С050, П01С080, СтавкаМинимальная, П01С140", Выборка,, Истина);
			Показатели.СтавкаМинимальная.Значение = Ставки.СтавкаМинимальная;
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы, "П01С050, П01С080");
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы, "СтавкаМинимальная",,"БезРасшифровки");
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы, "П01С140");
			РасчетнаяСумма = Показатели.П01С080.Значение * Ставки.СтавкаМинимальная;
			РасчетнаяСуммаОкр = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
			Настройки.ЭтоОшибка		= НЕ Показатели.П01С140.Значение = РасчетнаяСуммаОкр;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П01С140.Значение, Показатели.П01С080.Значение, Показатели.СтавкаМинимальная.Значение, РасчетнаяСумма);
				
		ИначеЕсли Настройки.КодКС = 10 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П01С050, П01С130, П01С140, П01С150", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы);
			РасчетнаяСумма = ?(Показатели.П01С130.Значение >= Показатели.П01С140.Значение, Показатели.П01С130.Значение, 0);
			Настройки.ЭтоОшибка		= НЕ Показатели.П01С150.Значение = РасчетнаяСумма;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П01С150.Значение, РасчетнаяСумма);
				
		ИначеЕсли Настройки.КодКС = 11 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П01С050, П01С130, П01С140, П01С151", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение11", НомерСтраницы);
			РасчетнаяСумма = ?(Показатели.П01С130.Значение < Показатели.П01С140.Значение, Показатели.П01С140.Значение, 0);
			Настройки.ЭтоОшибка		= НЕ Показатели.П01С151.Значение = РасчетнаяСумма;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П01С151.Значение, РасчетнаяСумма);
				
		КонецЕсли;
		
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_12_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.12.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза по виду подакцизного товара (стр. 030 Приложения 1) = сумме стр.150 Приложения 1 и '") +
		НСтр("ru='сумме стр.151 Приложения 1 по соотв. кодам стр.010, стр.020 Приложения 1, и, в случае документального '") +
		НСтр("ru='подтверждения факта реализации подакцизного товара за пределы территории РФ (коды операций '") +
		НСтр("ru='(показателей) 50001 - 50011), - по соотв. стр.025 Приложения 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2, код операции %3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма акциза по виду подакцизного товара в стр.030 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 12);
	
	ПроверитьКС_3_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_13_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.13.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Объем реализованных табачных изделий (стр. 040 Приложения 1) = сумме стр.080 Приложения 1 '") +
		НСтр("ru='по соотв. кодам стр.010, стр.020 Приложения 1, и, в случае документального подтверждения '") +
		НСтр("ru='факта реализации подакцизного товара за пределы территории РФ (коды операций (показателей) '") +
		НСтр("ru='50001 - 50011), - по соотв. стр.025 Приложения 1'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2, код операции %3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указан объем реализованных табачных изделий в стр.040 Приложения 1'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 13);
	
	ПроверитьКС_3_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_13_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Приложение1.НомерСтраницы КАК НомерСтраницы,
	|	ЕСТЬNULL(ВТ_Приложение11.НомерСтраницы2, 0) КАК НомерСтраницы2,
	|	ВТ_Приложение1.П01С010 КАК КодТовара,
	|	ВТ_Приложение1.П01С020 КАК КодОперации,
	|	ВТ_Приложение1.П01С030 КАК П01С030,
	|	ВТ_Приложение1.П01С040 КАК П01С040,
	|	ЕСТЬNULL(ВТ_Приложение11.П01С050, """") КАК Наименование,
	|	ЕСТЬNULL(ВТ_Приложение11.П01С080, 0) КАК П01С080,
	|	ЕСТЬNULL(ВТ_Приложение11.П01С150, 0) КАК П01С150,
	|	ЕСТЬNULL(ВТ_Приложение11.П01С151, 0) КАК П01С151
	|ИЗ
	|	ВТ_Приложение1 КАК ВТ_Приложение1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приложение11 КАК ВТ_Приложение11
	|		ПО ВТ_Приложение1.НомерСтраницы = ВТ_Приложение11.НомерСтраницы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтраницы2
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодОперации),
	|	МИНИМУМ(П01С030),
	|	МИНИМУМ(П01С040),
	|	СУММА(П01С080),
	|	СУММА(П01С150),
	|	СУММА(П01С151)
	|ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	ВыборкаГр = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГр.Следующий() Цикл
		
		РасчетнаяСумма = ?(Настройки.КодКС = 12, ВыборкаГр.П01С150 + ВыборкаГр.П01С151, ВыборкаГр.П01С080);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, КодТовара, КодОперации", 
			ВыборкаГр.НомерСтраницы, ВыборкаГр.КодТовара, ВыборкаГр.КодОперации));
		ЗарегистрироватьФормулу(Настройки);
		ИмяПоказателяГр = ?(Настройки.КодКС = 12, "П01С030", "П01С040");
		Показатели	= ЗаполнитьПоказатели(ИмяПоказателяГр, ВыборкаГр,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Приложение1", ВыборкаГр.НомерСтраницы);
		СуммаСтр	= "";
		Счетчик		= 0;
			
		Выборка = ВыборкаГр.Выбрать();
		Пока Выборка.Следующий() И Счетчик < 1000 Цикл
			ИмяПоказателя = ?(Настройки.КодКС = 12, "П01С150, П01С151", "П01С080");
			Показатели = ЗаполнитьПоказатели(ИмяПоказателя, Выборка,, Истина);
			Для каждого Показатель Из Показатели Цикл
				Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
					Дополнение = "Страница " + Выборка.НомерСтраницы2 + ", наименование """ + Выборка.Наименование + """";
					ДобавитьИнфоКПредставлениюПоказателя(Показатель.Значение, Дополнение);
					НомерСтраницы = "" + Выборка.НомерСтраницы + "," + Выборка.НомерСтраницы2;
					ВнестиПоказательВРасшифровку(Показатель.Значение, "Приложение11", НомерСтраницы);
				КонецЕсли;
				Если Счетчик <= 4 И ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
					СуммаСтр = СуммаСтр + ?(Счетчик = 4, ?(ЗначениеЗаполнено(РасчетнаяСумма), "<...>", "0"), 
						Показатель.Значение.ЗначениеСтр + " + ");
				КонецЕсли;
			КонецЦикла;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		Настройки.ЭтоОшибка		= НЕ ВыборкаГр[ИмяПоказателяГр] = РасчетнаяСумма;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			ВыборкаГр[ИмяПоказателяГр], РасшифровкаВСтр(СуммаСтр), РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_14_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.14.доп)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, месяц %2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='П01С025'"));
	Настройки.Вставить("ПредставлениеПоказателя"
											, НСтр("ru='Значение месяца налогового периода (стр.025 Приложения 1)'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("КодКС"				, 14);
	
	ПроверитьКС_3_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_15_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 3.15.доп)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, год %2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='П01С026'"));
	Настройки.Вставить("ПредставлениеПоказателя"
											, НСтр("ru='Значение года налогового периода (стр.025 Приложения 1)'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("КодКС"				, 15);
	
	ПроверитьКС_3_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиПриложения2

&НаСервере
Процедура ПроверитьКС_4_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Признак документа (стр.001 Приложения 2) должен иметь значение 1 или 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Признак документа %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан признак документа в стр.001 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
		
	Приложение2	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Приложение2;
	КолвоСтрок	= Приложение2.Строки.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		Показатели	= ЗаполнитьПоказатели("П02С001", Приложение2.Строки[Счетчик - 1].Данные);
		Настройки.ДопСведенияВОписаниеКС = ЗначениеЗаполнено(Показатели.П02С001.Значение);
		
		Если НЕ ЭлементЗаполнен(Приложение2.Строки[Счетчик - 1], Ложь) Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.ЭтоОшибка	= ПроверитьСписочноеЗначение(Настройки, Показатели.П02С001);
		Если Настройки.ЭтоОшибка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Признак", Показатели.П02С001.Значение));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Счетчик);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата выдачи банковской гарантии (стр.020 Приложения 2) <= даты начала срока '") +
		НСтр("ru='действия банковской гарантии (стр.030 Приложения 2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указана дата выдачи банковской гарантии (поручительства) в стр.020 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 2);
	
	ПроверитьКС_4_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата начала срока действия банковской гарантии (стр.030 Приложения 2) >= даты выдачи '") +
		НСтр("ru='банковской гарантии (стр.020 Приложения 2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указана дата начала срока действия банковской гарантии (поручительства) '") +
		НСтр("ru='в стр.030 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 3);
	
	ПроверитьКС_4_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата окончания срока действия банковской гарантии (стр.040 Приложения 2) > даты выдачи (стр.020 '") +
		НСтр("ru='Приложения 2) и даты начала срока действия банковской гарантии (стр.030 Приложения 2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 > %2 и %1 > %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указана дата окончания срока действия банковской гарантии (поручительства) '") +
		НСтр("ru='в стр.040 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 4);
	
	ПроверитьКС_4_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма обязательств по банковской гарантии (стр.050 Приложения 2) >= общая сумма акциза, '") +
		НСтр("ru='освобожденная от уплаты в связи с представлением банковской гарантии (стр.060 Приложения 2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка в сумме обязательст по банковской гарантии (поручительству) в стр.050 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 5);
	
	ПроверитьКС_4_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Общая сумма акциза, освобожденная от уплаты в связи с представлением банковской гарантии '") +
		НСтр("ru='(стр.060 Приложения 2) <= сумма обязательств по банковской гарантии (стр.050 Приложения 2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением '") +
		НСтр("ru='банковской гарантии (поручительства) в стр.060 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 6);
	
	ПроверитьКС_4_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_06_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Приложение2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Приложение2.П02С010 КАК П02С010,
	|	ВТ_Приложение2.П02С020 КАК П02С020,
	|	ВТ_Приложение2.П02С030 КАК П02С030,
	|	ВТ_Приложение2.П02С040 КАК П02С040,
	|	ВТ_Приложение2.П02С050 КАК П02С050,
	|	ВТ_Приложение2.П02С060 КАК П02С060
	|ИЗ
	|	ВТ_Приложение2 КАК ВТ_Приложение2
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, НомерГарантии", 
			Выборка.НомерСтраницы, Выборка.П02С010));
		ЗарегистрироватьФормулу(Настройки);
		
		Если Настройки.КодКС = 2 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П02С010, П02С020, П02С030", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка		= НЕ Показатели.П02С020.Значение <= Показатели.П02С030.Значение;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П02С020.ЗначениеСтр, Показатели.П02С030.ЗначениеСтр);
				
		ИначеЕсли Настройки.КодКС = 3 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П02С010, П02С030, П02С020", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка		= НЕ Показатели.П02С030.Значение >= Показатели.П02С020.Значение;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П02С030.ЗначениеСтр, Показатели.П02С020.ЗначениеСтр);
				
		ИначеЕсли Настройки.КодКС = 4 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П02С010, П02С020, П02С030, П02С040", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка		= НЕ (Показатели.П02С040.Значение > Показатели.П02С020.Значение 
				ИЛИ Показатели.П02С040.Значение > Показатели.П02С030.Значение);
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П02С040.ЗначениеСтр, Показатели.П02С020.ЗначениеСтр, Показатели.П02С030.ЗначениеСтр);
				
		ИначеЕсли Настройки.КодКС = 5 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П02С010, П02С050, П02С060", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка		= НЕ Показатели.П02С050.Значение >= Показатели.П02С060.Значение;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П02С050.Значение, Показатели.П02С060.Значение);
				
		ИначеЕсли Настройки.КодКС = 6 Тогда
		
			Показатели	= ЗаполнитьПоказатели("П02С010, П02С060, П02С050", Выборка,, Истина);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Выборка.НомерСтраницы);
			Настройки.ЭтоОшибка		= НЕ Показатели.П02С060.Значение <= Показатели.П02С050.Значение;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П02С060.Значение, Показатели.П02С050.Значение);
				
		КонецЕсли;
		
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Общая сумма акциза, освобожденная от уплаты в связи с представлением банковской гарантии '") +
		НСтр("ru='(стр.060 Приложения 2) = сумма гр.3 раздела 1 Приложения 2 по соотв. стр.010 Приложения 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением '") +
		НСтр("ru='банковской гарантии (поручительства) в стр.060 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Приложение2.НомерСтраницы КАК НомерСтраницы,
	|	ЕСТЬNULL(ВТ_Приложение21.НомерСтроки, 0) КАК НомерСтроки,
	|	ВТ_Приложение2.П02С010 КАК П02С010,
	|	ВТ_Приложение2.П02С060 КАК П02С060,
	|	ЕСТЬNULL(ВТ_Приложение21.П21С030, 0) КАК П21С030
	|ИЗ
	|	ВТ_Приложение2 КАК ВТ_Приложение2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приложение21 КАК ВТ_Приложение21
	|		ПО ВТ_Приложение2.НомерСтраницы = ВТ_Приложение21.НомерСтраницы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(П02С010),
	|	МИНИМУМ(П02С060),
	|	СУММА(П21С030)
	|ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	ВыборкаГр = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГр.Следующий() Цикл
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, НомерГарантии", 
			ВыборкаГр.НомерСтраницы, ВыборкаГр.П02С010));
		ЗарегистрироватьФормулу(Настройки);
		Показатели = ЗаполнитьПоказатели("П02С060", ВыборкаГр,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", ВыборкаГр.НомерСтраницы);
		
		СуммаСтр	= "";
		Счетчик		= 0;
		Выборка = ВыборкаГр.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели	= ЗаполнитьПоказатели("П21С030", Выборка, Выборка.НомерСтроки, Истина);
			Если ЗначениеЗаполнено(Показатели.П21С030.Значение) Тогда
				РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Выборка.НомерСтраницы);
				Если Счетчик <= 4 Тогда
					СуммаСтр = СуммаСтр + ?(Счетчик = 4, ?(ЗначениеЗаполнено(ВыборкаГр.П21С030), "<...>", "0"), 
						Показатели.П21С030.ЗначениеСтр + " + ");
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка		= НЕ ВыборкаГр.П02С060 = ВыборкаГр.П21С030;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			ВыборкаГр.П02С060, РасшифровкаВСтр(СуммаСтр), ВыборкаГр.П21С030);
		
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Общая сумма акциза, освобожденная от уплаты в связи с представлением банковской гарантии (стр.060 '") +
		НСтр("ru='Приложения 2) >= сумма гр.5 стр.070 + сумма гр.5 стр.080 раздела 2 Приложения 2 по соотв. '") +
		НСтр("ru='стр.010 Приложения 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением '") +
		НСтр("ru='банковской гарантии (поручительства) в стр.060 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 8);
	
	ПроверитьКС_4_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Превышение суммы акциза (стр.065 Приложения 2) = общая сумма акциза, освобожденная от '") +
		НСтр("ru='уплаты (стр.060 Приложения 2) - (гр.5 стр.070 + гр.5 стр.080 раздела 2 Приложения 2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - (%3) Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении превышения суммы акциза, освобожденной от уплаты, над суммой '") +
		НСтр("ru='акциза документально подтвержденного экспорта в стр.065 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("КодКС"				, 9);
	
	ПроверитьКС_4_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код вида подакцизного товара (гр.1 раздела 1 Приложения 2) должен иметь значение '") +
		НСтр("ru='411 или 430 или 440 или 450 или 460 или 470 или 471 или 472'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, код товара %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан код вида подакцизных товаров в гр.1 раздела 1 Приложении 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='П21С010'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00102М1'"));
	Настройки.Вставить("КодКС"				, 10);
	
	ПроверитьКС_4_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_11а(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.11а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код вида подакцизного товара (гр.3 стр.070 раздела 2 Приложения 2) должен иметь значение '") +
		НСтр("ru='411 или 430 или 440 или 450 или 460 или 470 или 471 или 472'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, код товара %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан код вида подакцизных товаров в гр.3 стр.070 раздела 2 Приложении 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='П22С073'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00102М2'"));
	Настройки.Вставить("КодКС"				, 11.1);
	
	ПроверитьКС_4_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_11б(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.11б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код вида подакцизного товара (гр.3 стр.080 раздела 2 Приложения 2) должен иметь значение '") +
		НСтр("ru='411 или 430 или 440 или 450 или 460 или 470 или 471 или 472'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, код товара %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан код вида подакцизных товаров в гр.3 стр.080 раздела 2 Приложении 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='П22С083'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00102М2'"));
	Настройки.Вставить("КодКС"				, 11.2);
	
	ПроверитьКС_4_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_11_код(Настройки)
	
	Направление	= ?(Настройки.КодКС = 15, "УБЫВ", "");	
	Приложение2	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Приложение2;
	КолвоСтрок	= Приложение2.Строки.Количество();
	Для Счетчик	= 1 По КолвоСтрок Цикл
		
		Приложение2Х = Приложение2.Строки[Счетчик - 1].ДанныеМногострочныхЧастей[Настройки.ТабЧасть];
		КолвоСтрок2Х = Приложение2Х.Строки.Количество();
		Для Инд	= 1 По КолвоСтрок2Х Цикл
			Показатели	= ЗаполнитьПоказатели(Настройки.Показатель, Приложение2Х.Строки[Инд - 1].Данные, Инд);
		
			Если НЕ ЗначениеЗаполнено(Показатели[Настройки.Показатель].Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Настройки.ЭтоОшибка	= ПроверитьСписочноеЗначение(Настройки, Показатели[Настройки.Показатель],, Направление);
			Если Настройки.ЭтоОшибка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, Строка, Показатель", 
				Счетчик, Инд, Показатели[Настройки.Показатель].Значение));
			ЗарегистрироватьФормулу(Настройки);
			РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", Счетчик);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза (гр.5 стр.070 раздела 2 Приложения 2) <= общая сумма акциза, '") +
		НСтр("ru='освобожденная от уплаты (стр.060 Приложения 2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] <= %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, подтвержденного экспорта в налоговом '") +
		НСтр("ru='периоде в гр.5 стр.070 раздела 2 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, "П22С075");
	Настройки.Вставить("КодКС"				, 12);
	
	ПроверитьКС_4_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза (гр.5 стр.080 раздела 2 Приложения 2) <= общая сумма акциза, '") +
		НСтр("ru='освобожденная от уплаты (стр.060 Приложения 2)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, номер банковской гарантии %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] <= %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза, подтвержденного экспорта в налоговом '") +
		НСтр("ru='периоде в гр.5 стр.080 раздела 2 Приложения 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, "П22С085");
	Настройки.Вставить("КодКС"				, 13);
	
	ПроверитьКС_4_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_13_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Приложение2.НомерСтраницы КАК НомерСтраницы,
	|	ЕСТЬNULL(ВТ_Приложение22.НомерСтроки, 0) КАК НомерСтроки,
	|	ВТ_Приложение2.П02С010 КАК П02С010,
	|	ВТ_Приложение2.П02С060 КАК П02С060,
	|	ВТ_Приложение2.П02С065 КАК П02С065,
	|	ЕСТЬNULL(ВТ_Приложение22.П22С075, 0) КАК П22С075,
	|	ЕСТЬNULL(ВТ_Приложение22.П22С085, 0) КАК П22С085
	|ИЗ
	|	ВТ_Приложение2 КАК ВТ_Приложение2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приложение22 КАК ВТ_Приложение22
	|		ПО ВТ_Приложение2.НомерСтраницы = ВТ_Приложение22.НомерСтраницы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(П02С010),
	|	МИНИМУМ(П02С060),
	|	МИНИМУМ(П02С065),
	|	СУММА(П22С075),
	|	СУММА(П22С085)
	|ПО
	|	НомерСтраницы";
	
	Результат = Запрос.Выполнить();
	ВыборкаГр = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтрокаПоказателейЛев = ?(Настройки.КодКС = 9, "П02С065, П02С060", "П02С060");
	
	Пока ВыборкаГр.Следующий() Цикл
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, НомерГарантии", 
			ВыборкаГр.НомерСтраницы, ВыборкаГр.П02С010));
		ЗарегистрироватьФормулу(Настройки);
		Показатели = ЗаполнитьПоказатели(СтрокаПоказателейЛев, ВыборкаГр,, Истина);
		РасшифроватьПоказатели(Показатели, Настройки, "Приложение2", ВыборкаГр.НомерСтраницы);
		
		Если Настройки.КодКС = 12 Тогда
			РасчетнаяСумма = ВыборкаГр.П22С075;
			СтрокаПоказателейПрав = "П22С075";
		ИначеЕсли Настройки.КодКС = 13 Тогда
			РасчетнаяСумма = ВыборкаГр.П22С085;
			СтрокаПоказателейПрав = "П22С085";
		Иначе
			РасчетнаяСумма = ВыборкаГр.П22С075 + ВыборкаГр.П22С085;
			СтрокаПоказателейПрав = "П22С075, П22С085";
		КонецЕсли;
		
		СуммаСтр	= "";
		Счетчик		= 0;
		Выборка = ВыборкаГр.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели	= ЗаполнитьПоказатели(СтрокаПоказателейПрав, Выборка, Выборка.НомерСтроки, Истина);
			Для каждого Показатель Из Показатели Цикл
				Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
					ВнестиПоказательВРасшифровку(Показатель.Значение, "Приложение2", Выборка.НомерСтраницы);
					Если Счетчик <= 4 Тогда
						СуммаСтр = СуммаСтр + ?(Счетчик = 4, ?(ЗначениеЗаполнено(РасчетнаяСумма), "<...>", "0"), 
							Показатель.Значение.ЗначениеСтр + " + ");
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Настройки.КодКС = 8 Тогда
			Настройки.ЭтоОшибка		= НЕ ВыборкаГр.П02С060 >= РасчетнаяСумма;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				ВыборкаГр.П02С060, РасшифровкаВСтр(СуммаСтр), РасчетнаяСумма);
		ИначеЕсли Настройки.КодКС = 9 Тогда
			РасчетнаяСумма			= ВыборкаГр.П02С060 - РасчетнаяСумма;
			Настройки.ЭтоОшибка		= ?(РасчетнаяСумма > 0, НЕ ВыборкаГр.П02С065 = РасчетнаяСумма, НЕ ВыборкаГр.П02С065 = 0);
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				ВыборкаГр.П02С065, ВыборкаГр.П02С060, РасшифровкаВСтр(СуммаСтр), ?(РасчетнаяСумма > 0, РасчетнаяСумма, 0));
		Иначе
			Настройки.ЭтоОшибка		= НЕ ВыборкаГр.П02С060 >= РасчетнаяСумма;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				РасшифровкаВСтр(СуммаСтр), РасчетнаяСумма, ВыборкаГр.П02С060);
		КонецЕсли;
		
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_14_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.14.доп)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, месяц %3'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='П22С076'"));
	Настройки.Вставить("ПредставлениеПоказателя"
											, НСтр("ru='Значение месяца налогового периода (гр.6 стр.070 раздела 2 Приложения 2)'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00102М2'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("КодКС"				, 14);
	
	ПроверитьКС_4_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_15_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 4.15.доп)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, строка %2, год %3'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Показатель"			, НСтр("ru='П22С077'"));
	Настройки.Вставить("ПредставлениеПоказателя"
											, НСтр("ru='Значение года налогового периода (гр.7 стр.070 раздела 2 Приложения 2)'"));
	Настройки.Вставить("ТабЧасть"			, НСтр("ru='П00102М2'"));
	Настройки.Вставить("РасшифровкаСписка"	, "");
	Настройки.Вставить("КодКС"				, 15);
	
	ПроверитьКС_4_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСписочноеЗначение(Настройки, Показатель, КоличествоЗначений = 20, Направление = "")
	
	Направление		= ?(ЗначениеЗаполнено(Направление), НаправлениеСортировки.Убыв, НаправлениеСортировки.Возр);
	ИмяПоказателя	= Лев(Показатель.Имя, 13);
	Список			= мДанныеОтчета.ДанныеКС.СоответствиеСписков.Получить(ИмяПоказателя);
	ЭтоОшибка		= Неопределено;
	
	Если НЕ Список = Неопределено Тогда
			
		Если НЕ ЗначениеЗаполнено(Настройки.РасшифровкаСписка) Тогда
			
			МассивРасшифровки = Новый Массив;
			Для каждого ЭлементСписка Из Список Цикл
				Если ЗначениеЗаполнено(ЭлементСписка.Ключ) Тогда
					МассивРасшифровки.Добавить(ЭлементСписка.Ключ);
				КонецЕсли;
			КонецЦикла;
			Сортировка = Новый СписокЗначений;
			Сортировка.ЗагрузитьЗначения(МассивРасшифровки);
			Сортировка.СортироватьПоЗначению(Направление);
	
			КоличествоСтрок = Сортировка.Количество();
			Если КоличествоСтрок > КоличествоЗначений Тогда
				Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
					Сортировка.Удалить(КоличествоСтрок - ОбратныйИндекс);
					Если КоличествоСтрок - ОбратныйИндекс = КоличествоЗначений Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
			
			Если КоличествоСтрок > КоличествоЗначений Тогда
				Сортировка.Добавить("<...>");
			КонецЕсли;
			Настройки.РасшифровкаСписка = СтрСоединить(Сортировка.ВыгрузитьЗначения(), ", ");
		КонецЕсли;
		
		ЭтоОшибка = Список.Получить(Показатель.Значение) = Неопределено;
		
		Если НЕ ЗначениеЗаполнено(Настройки.Нарушение) Тогда
			Настройки.Вставить("Нарушение"	, НСтр("ru='Ошибка ввода'"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Настройки.ОписаниеКС) Тогда
			Настройки.Вставить("ОписаниеКС"	, Настройки.ПредставлениеПоказателя 
				+ НСтр("ru=' должно соответствовать списку допустимых значений'"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Настройки.ОписаниеОшибки) Тогда
			Настройки.Вставить("ОписаниеОшибки"	, Настройки.ПредставлениеПоказателя 
				+ НСтр("ru=' должно соответствовать одному из следующих значений: '") + Настройки.РасшифровкаСписка);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Настройки.ШаблонРасшифровки) Тогда
		Настройки.Вставить("ШаблонРасшифровки"	
			, НСтр("ru='Указанное значение (""%1"") %2соответствует списку допустимых значений'"));
		КонецЕсли;
		
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатель.ЗначениеСтр, ?(ЭтоОшибка, "не ", ""));
	КонецЕсли;
	
	Возврат ЭтоОшибка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КС_ФормированиеКонтекста

&НаСервере
Процедура ПолучитьСписочныеЗначения()
	
	МассивПроверяемых = Новый Массив;
	МассивПроверяемых.Добавить("П00001М102003"); // кбк
	МассивПроверяемых.Добавить("П000020004003"); // код товара
	МассивПроверяемых.Добавить("П00021М100001"); // код операции
	МассивПроверяемых.Добавить("П00022М100001"); // код операции
	МассивПроверяемых.Добавить("П00023М100001"); // код операции
	МассивПроверяемых.Добавить("П000240000001"); // код операции
	МассивПроверяемых.Добавить("П00025М100001"); // код операции
	МассивПроверяемых.Добавить("П001010001003"); // код товара
	МассивПроверяемых.Добавить("П001010002003"); // код операции
	МассивПроверяемых.Добавить("П001020000103"); // признак документа
	МассивПроверяемых.Добавить("П00102М100001"); // код товара
	МассивПроверяемых.Добавить("П00102М207003"); // код товара
	МассивПроверяемых.Добавить("П00102М208003"); // код товара
	
	УчитыватьНезаполненные = Ложь;
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПроверяемых.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаЗначения.Код) И НЕ УчитыватьНезаполненные Тогда
					Продолжить;
				КонецЕсли;
				СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Месяца	= Новый Соответствие;
	Для Счетчик = 1 По 12 Цикл
		Месяца.Вставить(Формат(Счетчик, "ЧЦ=2; ЧВН="), 1);
	КонецЦикла; 
	
	Года	= Новый Соответствие;
	ГодОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Для Счетчик = 1900 По ГодОтчета Цикл
		Года.Вставить(Формат(Счетчик, "ЧЦ=4; ЧГ=0"), 1);
	КонецЦикла; 
	
	СоответствиеСписков.Вставить("П00025М100004", Месяца);
	СоответствиеСписков.Вставить("П001010002503", Месяца);
	СоответствиеСписков.Вставить("П00102М207006", Месяца);
	
	СоответствиеСписков.Вставить("П00025М100005", Года);
	СоответствиеСписков.Вставить("П001010002504", Года);
	СоответствиеСписков.Вставить("П00102М207007", Года);
	
	мДанныеОтчета.ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтавкиСигаретПапирос()
	
	СтавкиСигаретПапирос = Новый Соответствие;
	СтавкиСигарет = Новый Структура;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20220101' Тогда
		
		СтавкиСигарет = Неопределено;
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20210101' Тогда
		
		СтавкиСигарет.Вставить("СтавкаТвердая"		, 2045);
		СтавкиСигарет.Вставить("СтавкаАдвалорная"	, 14.5);
		СтавкиСигарет.Вставить("СтавкаМинимальная"	, 2778);
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20200101' Тогда
		
		СтавкиСигарет.Вставить("СтавкаТвердая"		, 1966);
		СтавкиСигарет.Вставить("СтавкаАдвалорная"	, 14.5);
		СтавкиСигарет.Вставить("СтавкаМинимальная"	, 2671);
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20190101' Тогда
		
		СтавкиСигарет.Вставить("СтавкаТвердая"		, 1890);
		СтавкиСигарет.Вставить("СтавкаАдвалорная"	, 14.5);
		СтавкиСигарет.Вставить("СтавкаМинимальная"	, 2568);
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20180701' Тогда
		
		СтавкиСигарет.Вставить("СтавкаТвердая"		, 1718);
		СтавкиСигарет.Вставить("СтавкаАдвалорная"	, 14.5);
		СтавкиСигарет.Вставить("СтавкаМинимальная"	, 2335);
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20180101' Тогда
		
		СтавкиСигарет.Вставить("СтавкаТвердая"		, 1562);
		СтавкиСигарет.Вставить("СтавкаАдвалорная"	, 14.5);
		СтавкиСигарет.Вставить("СтавкаМинимальная"	, 2123);
		
	Иначе
		
		СтавкиСигарет = Неопределено;
		
	КонецЕсли;
	
	Если НЕ СтавкиСигарет = Неопределено Тогда
		СтавкиСигаретПапирос.Вставить("450", СтавкиСигарет);
		СтавкиСигаретПапирос.Вставить("460", СтавкиСигарет);
		мДанныеОтчета.ДанныеКС.Вставить("СтавкиСигаретПапирос", СтавкиСигаретПапирос);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	// Раздел 1
	
	Если УсловныйКодПоказателя = "Р01С010" Тогда
		Результат.Вставить("Имя", "П000010001003");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р01С020" Тогда
		Результат.Вставить("Имя", "П00001М102003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р01С030" Тогда
		Результат.Вставить("Имя", "П00001М103003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, подлежащая уплате в бюджет (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р01С040" Тогда
		Результат.Вставить("Имя", "П00001М104003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, начисленная к уменьшению (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	// Раздел 2
	
	ИначеЕсли УсловныйКодПоказателя = "Р02С010" Тогда
		Результат.Вставить("Имя", "П000020001003");
		Результат.Вставить("Представление", Нстр("ru='Совокупный объем реализованных подакцизных товаров за налоговый период (тысяч штук)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р02С020" Тогда
		Результат.Вставить("Имя", "П000020002003");
		Результат.Вставить("Представление", Нстр("ru='Среднемесячный совокупный объем реализованных подакцизных товаров в предыдущем календарном году (тысяч штук)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р02С025" Тогда
		Результат.Вставить("Имя", "П000020002503");
		Результат.Вставить("Представление", Нстр("ru='Объем реализации ввезенных подакцизных товаров (тысяч штук)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р02С030" Тогда
		Результат.Вставить("Имя", "П000020003003");
		Результат.Вставить("Представление", Нстр("ru='Значение коэффициента Т'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	// Раздел 2х
	
	ИначеЕсли УсловныйКодПоказателя = "Р20С040" Тогда
		Результат.Вставить("Имя", "П000020004003");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р20С041" Тогда
		Результат.Вставить("Имя", "П0000200040А3");
		Результат.Вставить("Представление", Нстр("ru='Налоговая ставка (ст. 193 НК РФ)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р21С010" Тогда
		Результат.Вставить("Имя", "П00021М100001%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код операции'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р21С020" Тогда
		Результат.Вставить("Имя", "П00021М100002%1%2");
		Результат.Вставить("Представление", Нстр("ru='Объем подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р21С030" Тогда
		Результат.Вставить("Имя", "П00021М100003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Исчисленная сумма акциза (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р21С040" Тогда
		Результат.Вставить("Имя", "П00021М100004%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, подлежащая уплате (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р22С010" Тогда
		Результат.Вставить("Имя", "П00022М100001%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код операции'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р22С020" Тогда
		Результат.Вставить("Имя", "П00022М100002%1%2");
		Результат.Вставить("Представление", Нстр("ru='Объем подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р22С030" Тогда
		Результат.Вставить("Имя", "П00022М100003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Исчисленная сумма акциза (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р22С040" Тогда
		Результат.Вставить("Имя", "П00022М100004%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, подлежащая уплате (освобожденная от уплаты) (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р23С010" Тогда
		Результат.Вставить("Имя", "П00023М100001%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р23С020" Тогда
		Результат.Вставить("Имя", "П00023М100002%1%2");
		Результат.Вставить("Представление", Нстр("ru='Объем подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р23С030" Тогда
		Результат.Вставить("Имя", "П00023М100003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, подлежащая вычету (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р24С010" Тогда
		Результат.Вставить("Имя", "П000240000001");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р24С020" Тогда
		Результат.Вставить("Имя", "П000240000002");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, подлежащая уплате в бюджет либо начисленная к уменьшению (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р25С010" Тогда
		Результат.Вставить("Имя", "П00025М100001%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р25С020" Тогда
		Результат.Вставить("Имя", "П00025М100002%1%2");
		Результат.Вставить("Представление", Нстр("ru='Объем подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р25С030" Тогда
		Результат.Вставить("Имя", "П00025М100003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р25С040" Тогда
		Результат.Вставить("Имя", "П00025М100004%1%2");
		Результат.Вставить("Представление", Нстр("ru='Налоговый период, месяц'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "Р25С050" Тогда
		Результат.Вставить("Имя", "П00025М100005%1%2");
		Результат.Вставить("Представление", Нстр("ru='Налоговый период, год'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	// Приложение 1
	
	ИначеЕсли УсловныйКодПоказателя = "П01С010" Тогда
		Результат.Вставить("Имя", "П001010001003");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С020" Тогда
		Результат.Вставить("Имя", "П001010002003");
		Результат.Вставить("Представление", Нстр("ru='Код операции (показателя)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С025" Тогда
		Результат.Вставить("Имя", "П001010002503");
		Результат.Вставить("Представление", Нстр("ru='Налоговый период, месяц'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С026" Тогда
		Результат.Вставить("Имя", "П001010002504");
		Результат.Вставить("Представление", Нстр("ru='Налоговый период, год'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С030" Тогда
		Результат.Вставить("Имя", "П001010003003");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза по виду подакцизного товара (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С040" Тогда
		Результат.Вставить("Имя", "П001010004003");
		Результат.Вставить("Представление", Нстр("ru='Объем реализованных (переданных) табачных изделий - всего (тысяч штук)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	// Приложение 11
	
	ИначеЕсли УсловныйКодПоказателя = "П01С050" Тогда
		Результат.Вставить("Имя", "П001010005003");
		Результат.Вставить("Представление", Нстр("ru='Марка (наименование) сигарет (папирос)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С060" Тогда
		Результат.Вставить("Имя", "П001010006003");
		Результат.Вставить("Представление", Нстр("ru='Количество единиц реализованных (переданных) потребительских упаковок (пачек) (штук)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С070" Тогда
		Результат.Вставить("Имя", "П001010007003");
		Результат.Вставить("Представление", Нстр("ru='Количество единиц сигарет (папирос) в одной потребительской упаковке (пачке) (штук)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С080" Тогда
		Результат.Вставить("Имя", "П001010008003");
		Результат.Вставить("Представление", Нстр("ru='Объем реализованных (переданных) табачных изделий (тысяч штук)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С090" Тогда
		Результат.Вставить("Имя", "П001010009003");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, рассчитанная исходя из твердой (специфической) налоговой ставки (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С100" Тогда
		Результат.Вставить("Имя", "П001010010003");
		Результат.Вставить("Представление", Нстр("ru='Максимальная розничная цена за единицу потребительской упаковки (пачки) табачных изделий (в рублях и копейках)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С110" Тогда
		Результат.Вставить("Имя", "П001010011003");
		Результат.Вставить("Представление", Нстр("ru='Расчетная стоимость реализованных (переданных) табачных изделий (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С120" Тогда
		Результат.Вставить("Имя", "П001010012003");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, рассчитанная исходя из адвалорной налоговой ставки (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С130" Тогда
		Результат.Вставить("Имя", "П001010013003");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, рассчитанная исходя из комбинированной ставки (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С140" Тогда
		Результат.Вставить("Имя", "П001010014003");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, рассчитанная исходя из минимальной ставки (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С150" Тогда
		Результат.Вставить("Имя", "П001010015003");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, принимаемая к расчету исходя из комбинированной ставки акциза (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П01С151" Тогда
		Результат.Вставить("Имя", "П001010015103");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, принимаемая к расчету исходя из минимальной ставки акциза (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	// Приложение 2
	
	ИначеЕсли УсловныйКодПоказателя = "П02С001" Тогда
		Результат.Вставить("Имя", "П001020000103");
		Результат.Вставить("Представление", Нстр("ru='Признак документа'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П02С010" Тогда
		Результат.Вставить("Имя", "П001020001003");
		Результат.Вставить("Представление", Нстр("ru='Номер банковской гарантии (договора поручительства)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П02С020" Тогда
		Результат.Вставить("Имя", "П001020002003");
		Результат.Вставить("Представление", Нстр("ru='Дата выдачи банковской гарантии (заключения договора поручительства)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П02С030" Тогда
		Результат.Вставить("Имя", "П001020003003");
		Результат.Вставить("Представление", Нстр("ru='Дата начала срока действия банковской гарантии (договора поручительства)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П02С040" Тогда
		Результат.Вставить("Имя", "П001020004003");
		Результат.Вставить("Представление", Нстр("ru='Дата окончания срока действия банковской гарантии (договора поручительства)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П02С050" Тогда
		Результат.Вставить("Имя", "П001020005003");
		Результат.Вставить("Представление", Нстр("ru='Сумма обязательств по банковской гарантии (договору поручительства) (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П02С060" Тогда
		Результат.Вставить("Имя", "П001020006003");
		Результат.Вставить("Представление", Нстр("ru='Общая сумма акциза, освобожденная от уплаты в связи с представлением банковской гарантии (договора поручительства) (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П02С065" Тогда
		Результат.Вставить("Имя", "П001020006503");
		Результат.Вставить("Представление", Нстр("ru='Превышение суммы акциза, освобожденной от уплаты, над суммой акциза, приходящейся на объем подакцизных товаров, факт реализации которых за пределы территории Российской Федерации документально подтвержден на конец налогового периода (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	// Приложение 21
	
	ИначеЕсли УсловныйКодПоказателя = "П21С010" Тогда
		Результат.Вставить("Имя", "П00102М100001%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П21С030" Тогда
		Результат.Вставить("Имя", "П00102М100003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, освобожденная от уплаты (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	// Приложение 22
	
	ИначеЕсли УсловныйКодПоказателя = "П22С073" Тогда
		Результат.Вставить("Имя", "П00102М207003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П22С074" Тогда
		Результат.Вставить("Имя", "П00102М207004%1%2");
		Результат.Вставить("Представление", Нстр("ru='Объем подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П22С075" Тогда
		Результат.Вставить("Имя", "П00102М207005%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза в налоговом периоде (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "П22С076" Тогда
		Результат.Вставить("Имя", "П00102М207006%1%2");
		Результат.Вставить("Представление", Нстр("ru='Налоговый период, месяц'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П22С077" Тогда
		Результат.Вставить("Имя", "П00102М207007%1%2");
		Результат.Вставить("Представление", Нстр("ru='Налоговый период, год'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П22С083" Тогда
		Результат.Вставить("Имя", "П00102М208003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "П22С085" Тогда
		Результат.Вставить("Имя", "П00102М208005%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза в предыдущих налоговых периодах (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	// Прочие показатели
	
	ИначеЕсли УсловныйКодПоказателя = "СтавкаТвердая" Тогда
		Результат.Вставить("Имя", "");
		Результат.Вставить("Представление", Нстр("ru='Твердая ставка акциза, (в рублях за 1 тыс. шт.)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "СтавкаАдвалорная" Тогда
		Результат.Вставить("Имя", "");
		Результат.Вставить("Представление", Нстр("ru='Адвалорная ставка акциза, (в %)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	ИначеЕсли УсловныйКодПоказателя = "СтавкаМинимальная" Тогда
		Результат.Вставить("Имя", "");
		Результат.Вставить("Представление", Нстр("ru='Минимальная ставка акциза, (в рублях за 1 тыс. шт.)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктурыДанныхКС()
	
	К05	= Новый КвалификаторыСтроки(5);
	К10	= Новый КвалификаторыСтроки(10);
	К20	= Новый КвалификаторыСтроки(20);
	К80	= Новый КвалификаторыСтроки(80);
	
	Т_Раздел1 = Новый ТаблицаЗначений;
	Т_Раздел1.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел1.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	Т_Раздел1.Колонки.Добавить("Р01С010"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел1.Колонки.Добавить("Р01С020"			, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел1.Колонки.Добавить("Р01С030"			, Новый ОписаниеТипов("Число"));
	Т_Раздел1.Колонки.Добавить("Р01С040"			, Новый ОписаниеТипов("Число"));
	
	Т_Раздел2 = Новый ТаблицаЗначений;
	Т_Раздел2.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С010"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С020"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С025"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р02С030"			, Новый ОписаниеТипов("Число"));
	
	Т_Раздел2х = Новый ТаблицаЗначений;
	Т_Раздел2х.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Раздел"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("КБК"				, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел2х.Колонки.Добавить("Р20С040"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2х.Колонки.Добавить("Р20С041"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р21С010"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2х.Колонки.Добавить("Р21С020"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р21С030"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р21С040"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р22С010"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2х.Колонки.Добавить("Р22С020"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р22С030"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р22С040"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р23С010"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2х.Колонки.Добавить("Р23С020"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р23С030"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р24С010"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2х.Колонки.Добавить("Р24С020"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р25С010"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2х.Колонки.Добавить("Р25С020"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р25С030"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2х.Колонки.Добавить("Р25С040"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2х.Колонки.Добавить("Р25С050"			, Новый ОписаниеТипов("Строка",,К05));
	
	Т_Приложение1 = Новый ТаблицаЗначений;
	Т_Приложение1.Колонки.Добавить("НомерСтраницы"	, Новый ОписаниеТипов("Число"));
	Т_Приложение1.Колонки.Добавить("П01С010"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение1.Колонки.Добавить("П01С020"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение1.Колонки.Добавить("П01С025"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение1.Колонки.Добавить("П01С026"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение1.Колонки.Добавить("П01С030"		, Новый ОписаниеТипов("Число"));
	Т_Приложение1.Колонки.Добавить("П01С040"		, Новый ОписаниеТипов("Число"));
	
	Т_Приложение11 = Новый ТаблицаЗначений;
	Т_Приложение11.Колонки.Добавить("НомерСтраницы"	, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("НомерСтраницы2", Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("КодТовара"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение11.Колонки.Добавить("П01С050"		, Новый ОписаниеТипов("Строка",,К80));
	Т_Приложение11.Колонки.Добавить("П01С060"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С070"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С080"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С090"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С100"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С110"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С120"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С130"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С140"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С150"		, Новый ОписаниеТипов("Число"));
	Т_Приложение11.Колонки.Добавить("П01С151"		, Новый ОписаниеТипов("Число"));
	
	Т_Приложение2 = Новый ТаблицаЗначений;
	Т_Приложение2.Колонки.Добавить("НомерСтраницы"	, Новый ОписаниеТипов("Число"));
	Т_Приложение2.Колонки.Добавить("П02С010"		, Новый ОписаниеТипов("Строка",,К20));
	Т_Приложение2.Колонки.Добавить("П02С020"		, Новый ОписаниеТипов("Дата"));
	Т_Приложение2.Колонки.Добавить("П02С030"		, Новый ОписаниеТипов("Дата"));
	Т_Приложение2.Колонки.Добавить("П02С040"		, Новый ОписаниеТипов("Дата"));
	Т_Приложение2.Колонки.Добавить("П02С050"		, Новый ОписаниеТипов("Число"));
	Т_Приложение2.Колонки.Добавить("П02С060"		, Новый ОписаниеТипов("Число"));
	Т_Приложение2.Колонки.Добавить("П02С065"		, Новый ОписаниеТипов("Число"));
	
	Т_Приложение21 = Новый ТаблицаЗначений;
	Т_Приложение21.Колонки.Добавить("НомерСтраницы"	, Новый ОписаниеТипов("Число"));
	Т_Приложение21.Колонки.Добавить("НомерСтроки"	, Новый ОписаниеТипов("Число"));
	Т_Приложение21.Колонки.Добавить("П21С010"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение21.Колонки.Добавить("П21С030"		, Новый ОписаниеТипов("Число"));
	
	Т_Приложение22 = Новый ТаблицаЗначений;
	Т_Приложение22.Колонки.Добавить("НомерСтраницы"	, Новый ОписаниеТипов("Число"));
	Т_Приложение22.Колонки.Добавить("НомерСтроки"	, Новый ОписаниеТипов("Число"));
	Т_Приложение22.Колонки.Добавить("П22С073"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение22.Колонки.Добавить("П22С074"		, Новый ОписаниеТипов("Число"));
	Т_Приложение22.Колонки.Добавить("П22С075"		, Новый ОписаниеТипов("Число"));
	Т_Приложение22.Колонки.Добавить("П22С076"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение22.Колонки.Добавить("П22С077"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение22.Колонки.Добавить("П22С083"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение22.Колонки.Добавить("П22С085"		, Новый ОписаниеТипов("Число"));
	
	СоответствиеКБККодуТовара = Новый Соответствие;
	СоответствиеКБККодуТовара.Вставить("411", "18210302030011000110");
	СоответствиеКБККодуТовара.Вставить("430", "18210302030011000110");
	СоответствиеКБККодуТовара.Вставить("440", "18210302030011000110");
	СоответствиеКБККодуТовара.Вставить("450", "18210302030011000110");
	СоответствиеКБККодуТовара.Вставить("460", "18210302030011000110");
	СоответствиеКБККодуТовара.Вставить("470", "18210302360011000110");
	СоответствиеКБККодуТовара.Вставить("471", "18210302370011000110");
	СоответствиеКБККодуТовара.Вставить("472", "18210302380011000110");
	
	Если СохраненныеДанныеОтчета.ВерсияФормы = "01/08/2018" Тогда
		
		Раздел1		= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел1.Строки;
		КолвоСтрок	= Раздел1.Количество();
		Для Счетчик	= 1 По КолвоСтрок Цикл
			Показатели	= ЗаполнитьПоказатели("Р01С010", Раздел1[Счетчик - 1].Данные);
			Раздел1_МнЧ	= Раздел1[Счетчик - 1].ДанныеМногострочныхЧастей.П00001М1;
			КолвоСтрок2	= Раздел1_МнЧ.Строки.Количество();
			Для Счетчик2	= 1 По КолвоСтрок2 Цикл
				НоваяСтрока	= Т_Раздел1.Добавить();
				ПоказателиТЧ= ЗаполнитьПоказатели("Р01С020, Р01С030, Р01С040", Раздел1_МнЧ.Строки[Счетчик2 - 1].Данные, Счетчик2);
				НоваяСтрока.НомерСтраницы = Счетчик;
				НоваяСтрока.НомерСтроки	= Счетчик2;
				НоваяСтрока.Р01С010 = Показатели.Р01С010.Значение;
				НоваяСтрока.Р01С020 = ПоказателиТЧ.Р01С020.Значение;
				НоваяСтрока.Р01С030 = ПоказателиТЧ.Р01С030.Значение;
				НоваяСтрока.Р01С040 = - ПоказателиТЧ.Р01С040.Значение;
			КонецЦикла;
		КонецЦикла;
		
		Раздел2		= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел2.Строки;
		КолвоСтрок	= Раздел2.Количество();
		Для Счетчик	= 1 По КолвоСтрок Цикл
			Показатели	= ЗаполнитьПоказатели("Р02С010, Р02С020, Р02С025, Р02С030", Раздел2[Счетчик - 1].Данные);
			НоваяСтрока	= Т_Раздел2.Добавить();
			НоваяСтрока.НомерСтраницы = Счетчик;
			НоваяСтрока.Р02С010 = Показатели.Р02С010.Значение;
			НоваяСтрока.Р02С020 = Показатели.Р02С020.Значение;
			НоваяСтрока.Р02С025 = Показатели.Р02С025.Значение;
			НоваяСтрока.Р02С030 = Показатели.Р02С030.Значение;
		КонецЦикла;
		
		Раздел2х	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел2.Строки[0].Строки[0];
		КолвоСтрок	= Раздел2х.Строки.Количество();
		Для Счетчик	= 1 По КолвоСтрок Цикл
			Показатели	= ЗаполнитьПоказатели("Р20С040, Р20С041, Р24С010, Р24С020", Раздел2х.Строки[Счетчик - 1].Данные);
			Показатели.Р24С020.Значение = ?(Показатели.Р24С010.Значение = "40001", Показатели.Р24С020.Значение, 
				-Показатели.Р24С020.Значение);
			ОбщиеДанные = Новый Структура;
			ОбщиеДанные.Вставить("НомерСтраницы", Счетчик);
			ОбщиеДанные.Вставить("КБК"			, СоответствиеКБККодуТовара.Получить(Показатели.Р20С040.Значение));
			ОбщиеДанные.Вставить("Р20С040"		, Показатели.Р20С040.Значение);
			ОбщиеДанные.Вставить("Р20С041"		, Показатели.Р20С041.Значение);
			ОбщиеДанные.Вставить("Р24С010"		, Показатели.Р24С010.Значение);
			ОбщиеДанные.Вставить("Р24С020"		, Показатели.Р24С020.Значение);
				
			Раздел21	= Раздел2х.Строки[Счетчик - 1].ДанныеМногострочныхЧастей.П00021М1;
			КолвоСтрокТЧ = Раздел21.Строки.Количество();
			Для Инд	= 1 По КолвоСтрокТЧ Цикл
				ПоказателиТЧ	= ЗаполнитьПоказатели("Р21С010, Р21С020, Р21С030, Р21С040", Раздел21.Строки[Инд - 1].Данные, Инд);
				НоваяСтрока		= Т_Раздел2х.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеДанные);
				НоваяСтрока.Раздел			= 21;
				НоваяСтрока.НомерСтроки		= Инд;
				НоваяСтрока.Р21С010			= ПоказателиТЧ.Р21С010.Значение;
				НоваяСтрока.Р21С020			= ПоказателиТЧ.Р21С020.Значение;
				НоваяСтрока.Р21С030			= ПоказателиТЧ.Р21С030.Значение;
				НоваяСтрока.Р21С040			= ПоказателиТЧ.Р21С040.Значение;
			КонецЦикла;
			
			Раздел22	= Раздел2х.Строки[Счетчик - 1].ДанныеМногострочныхЧастей.П00022М1;
			КолвоСтрокТЧ = Раздел22.Строки.Количество();
			Для Инд	= 1 По КолвоСтрокТЧ Цикл
				ПоказателиТЧ	= ЗаполнитьПоказатели("Р22С010, Р22С020, Р22С030, Р22С040", Раздел22.Строки[Инд - 1].Данные, Инд);
				НоваяСтрока		= Т_Раздел2х.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеДанные);
				НоваяСтрока.Раздел			= 22;
				НоваяСтрока.НомерСтроки		= Инд;
				НоваяСтрока.Р22С010			= ПоказателиТЧ.Р22С010.Значение;
				НоваяСтрока.Р22С020			= ПоказателиТЧ.Р22С020.Значение;
				НоваяСтрока.Р22С030			= ПоказателиТЧ.Р22С030.Значение;
				НоваяСтрока.Р22С040			= ПоказателиТЧ.Р22С040.Значение;
			КонецЦикла;
			
			Раздел23	= Раздел2х.Строки[Счетчик - 1].ДанныеМногострочныхЧастей.П00023М1;
			КолвоСтрокТЧ = Раздел23.Строки.Количество();
			Для Инд	= 1 По КолвоСтрокТЧ Цикл
				ПоказателиТЧ	= ЗаполнитьПоказатели("Р23С010, Р23С020, Р23С030", Раздел23.Строки[Инд - 1].Данные, Инд);
				НоваяСтрока		= Т_Раздел2х.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеДанные);
				НоваяСтрока.Раздел			= 23;
				НоваяСтрока.НомерСтроки		= Инд;
				НоваяСтрока.Р23С010			= ПоказателиТЧ.Р23С010.Значение;
				НоваяСтрока.Р23С020			= ПоказателиТЧ.Р23С020.Значение;
				НоваяСтрока.Р23С030			= - ПоказателиТЧ.Р23С030.Значение;
			КонецЦикла;
			
			Раздел25	= Раздел2х.Строки[Счетчик - 1].ДанныеМногострочныхЧастей.П00025М1;
			КолвоСтрокТЧ = Раздел25.Строки.Количество();
			Для Инд	= 1 По КолвоСтрокТЧ Цикл
				ПоказателиТЧ	= ЗаполнитьПоказатели("Р25С010, Р25С020, Р25С030, Р25С040, Р25С050", Раздел25.Строки[Инд - 1].Данные, 
					Инд);
				НоваяСтрока		= Т_Раздел2х.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеДанные);
				НоваяСтрока.Раздел			= 25;
				НоваяСтрока.НомерСтроки		= Инд;
				НоваяСтрока.Р25С010			= ПоказателиТЧ.Р25С010.Значение;
				НоваяСтрока.Р25С020			= ПоказателиТЧ.Р25С020.Значение;
				НоваяСтрока.Р25С030			= ПоказателиТЧ.Р25С030.Значение;
				НоваяСтрока.Р25С040			= ПоказателиТЧ.Р25С040.Значение;
				НоваяСтрока.Р25С050			= ПоказателиТЧ.Р25С050.Значение;
			КонецЦикла;
		КонецЦикла;
		
		Приложение1	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Приложение1;
		КолвоСтрок	= Приложение1.Строки.Количество();
		Для Счетчик	= 1 По КолвоСтрок Цикл
			НоваяСтрока	= Т_Приложение1.Добавить();
			Показатели	= ЗаполнитьПоказатели("П01С010, П01С020, П01С025, П01С026, П01С030, П01С040", 
				Приложение1.Строки[Счетчик - 1].Данные);
			НоваяСтрока.НомерСтраницы = Счетчик;
			Для каждого Показатель Из Показатели Цикл
				НоваяСтрока[Показатель.Ключ] = Показатель.Значение.Значение;
			КонецЦикла;
			
			Приложение11 = Приложение1.Строки[Счетчик - 1].Строки[0];
			КолвоСтрок11 = Приложение11.Строки.Количество();
			Для Инд	= 1 По КолвоСтрок11 Цикл
				НоваяСтрока	= Т_Приложение11.Добавить();
				Показатели11	= ЗаполнитьПоказатели("П01С050, П01С060, П01С070, П01С080, П01С090, П01С100, П01С110, П01С120, П01С130, П01С140, П01С150, П01С151", 
					Приложение11.Строки[Инд - 1].Данные);
				НоваяСтрока.НомерСтраницы	= Счетчик;
				НоваяСтрока.НомерСтраницы2	= Инд;
				НоваяСтрока.КодТовара		= Показатели.П01С010.Значение;
				Для каждого Показатель Из Показатели11 Цикл
					НоваяСтрока[Показатель.Ключ] = Показатель.Значение.Значение;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Приложение2	= СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Приложение2;
		КолвоСтрок	= Приложение2.Строки.Количество();
		Для Счетчик	= 1 По КолвоСтрок Цикл
			НоваяСтрока	= Т_Приложение2.Добавить();
			Показатели	= ЗаполнитьПоказатели("П02С010, П02С020, П02С030, П02С040, П02С050, П02С060, П02С065", 
				Приложение2.Строки[Счетчик - 1].Данные);
			НоваяСтрока.НомерСтраницы = Счетчик;
			Для каждого Показатель Из Показатели Цикл
				НоваяСтрока[Показатель.Ключ] = Показатель.Значение.Значение;
			КонецЦикла;
			
			Приложение21 = Приложение2.Строки[Счетчик - 1].ДанныеМногострочныхЧастей.П00102М1;
			КолвоСтрок21 = Приложение21.Строки.Количество();
			Для Инд	= 1 По КолвоСтрок21 Цикл
				НоваяСтрока	= Т_Приложение21.Добавить();
				Показатели21	= ЗаполнитьПоказатели("П21С010, П21С030", Приложение21.Строки[Инд - 1].Данные, Инд);
				НоваяСтрока.НомерСтраницы = Счетчик;
				НоваяСтрока.НомерСтроки = Инд;
				НоваяСтрока.П21С010 = Показатели21.П21С010.Значение;
				НоваяСтрока.П21С030 = Показатели21.П21С030.Значение;
			КонецЦикла;
			
			Приложение22 = Приложение2.Строки[Счетчик - 1].ДанныеМногострочныхЧастей.П00102М2;
			КолвоСтрок22 = Приложение22.Строки.Количество();
			Для Инд	= 1 По КолвоСтрок22 Цикл
				НоваяСтрока	= Т_Приложение22.Добавить();
				Показатели22= ЗаполнитьПоказатели("П22С073, П22С074, П22С075, П22С076, П22С077, П22С083, П22С085", 
					Приложение22.Строки[Инд - 1].Данные, Инд);
				НоваяСтрока.НомерСтраницы = Счетчик;
				НоваяСтрока.НомерСтроки = Инд;
				Для каждого Показатель Из Показатели22 Цикл
					НоваяСтрока[Показатель.Ключ] = Показатель.Значение.Значение;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("Т_Раздел1"		, Т_Раздел1);
	Запрос.УстановитьПараметр("Т_Раздел2"		, Т_Раздел2);
	Запрос.УстановитьПараметр("Т_Раздел2х"		, Т_Раздел2х);
	Запрос.УстановитьПараметр("Т_Приложение1"	, Т_Приложение1);
	Запрос.УстановитьПараметр("Т_Приложение11"	, Т_Приложение11);
	Запрос.УстановитьПараметр("Т_Приложение2"	, Т_Приложение2);
	Запрос.УстановитьПараметр("Т_Приложение21"	, Т_Приложение21);
	Запрос.УстановитьПараметр("Т_Приложение22"	, Т_Приложение22);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Т_Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел1.НомерСтроки КАК НомерСтроки,
	|	Т_Раздел1.Р01С010 КАК Р01С010,
	|	Т_Раздел1.Р01С020 КАК Р01С020,
	|	Т_Раздел1.Р01С030 КАК Р01С030,
	|	Т_Раздел1.Р01С040 КАК Р01С040
	|ПОМЕСТИТЬ ВТ_Раздел1
	|ИЗ
	|	&Т_Раздел1 КАК Т_Раздел1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел2.Р02С010 КАК Р02С010,
	|	Т_Раздел2.Р02С020 КАК Р02С020,
	|	Т_Раздел2.Р02С025 КАК Р02С025,
	|	Т_Раздел2.Р02С030 КАК Р02С030
	|ПОМЕСТИТЬ ВТ_Раздел2
	|ИЗ
	|	&Т_Раздел2 КАК Т_Раздел2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел2х.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел2х.НомерСтроки КАК НомерСтроки,
	|	Т_Раздел2х.Раздел КАК Раздел,
	|	Т_Раздел2х.КБК КАК КБК,
	|	Т_Раздел2х.Р20С040 КАК Р20С040,
	|	Т_Раздел2х.Р20С041 КАК Р20С041,
	|	Т_Раздел2х.Р21С010 КАК Р21С010,
	|	Т_Раздел2х.Р21С020 КАК Р21С020,
	|	Т_Раздел2х.Р21С030 КАК Р21С030,
	|	Т_Раздел2х.Р21С040 КАК Р21С040,
	|	Т_Раздел2х.Р22С010 КАК Р22С010,
	|	Т_Раздел2х.Р22С020 КАК Р22С020,
	|	Т_Раздел2х.Р22С030 КАК Р22С030,
	|	Т_Раздел2х.Р22С040 КАК Р22С040,
	|	Т_Раздел2х.Р23С010 КАК Р23С010,
	|	Т_Раздел2х.Р23С020 КАК Р23С020,
	|	Т_Раздел2х.Р23С030 КАК Р23С030,
	|	Т_Раздел2х.Р24С010 КАК Р24С010,
	|	Т_Раздел2х.Р24С020 КАК Р24С020,
	|	Т_Раздел2х.Р25С010 КАК Р25С010,
	|	Т_Раздел2х.Р25С020 КАК Р25С020,
	|	Т_Раздел2х.Р25С030 КАК Р25С030,
	|	Т_Раздел2х.Р25С040 КАК Р25С040,
	|	Т_Раздел2х.Р25С050 КАК Р25С050
	|ПОМЕСТИТЬ ВТ_Раздел2х
	|ИЗ
	|	&Т_Раздел2х КАК Т_Раздел2х
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Приложение1.НомерСтраницы КАК НомерСтраницы,
	|	Т_Приложение1.П01С010 КАК П01С010,
	|	Т_Приложение1.П01С020 КАК П01С020,
	|	Т_Приложение1.П01С025 КАК П01С025,
	|	Т_Приложение1.П01С026 КАК П01С026,
	|	Т_Приложение1.П01С030 КАК П01С030,
	|	Т_Приложение1.П01С040 КАК П01С040
	|ПОМЕСТИТЬ ВТ_Приложение1
	|ИЗ
	|	&Т_Приложение1 КАК Т_Приложение1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Приложение11.НомерСтраницы КАК НомерСтраницы,
	|	Т_Приложение11.НомерСтраницы2 КАК НомерСтраницы2,
	|	Т_Приложение11.КодТовара КАК КодТовара,
	|	Т_Приложение11.П01С050 КАК П01С050,
	|	Т_Приложение11.П01С060 КАК П01С060,
	|	Т_Приложение11.П01С070 КАК П01С070,
	|	Т_Приложение11.П01С080 КАК П01С080,
	|	Т_Приложение11.П01С090 КАК П01С090,
	|	Т_Приложение11.П01С100 КАК П01С100,
	|	Т_Приложение11.П01С110 КАК П01С110,
	|	Т_Приложение11.П01С120 КАК П01С120,
	|	Т_Приложение11.П01С130 КАК П01С130,
	|	Т_Приложение11.П01С140 КАК П01С140,
	|	Т_Приложение11.П01С150 КАК П01С150,
	|	Т_Приложение11.П01С151 КАК П01С151
	|ПОМЕСТИТЬ ВТ_Приложение11
	|ИЗ
	|	&Т_Приложение11 КАК Т_Приложение11
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Приложение2.НомерСтраницы КАК НомерСтраницы,
	|	Т_Приложение2.П02С010 КАК П02С010,
	|	Т_Приложение2.П02С020 КАК П02С020,
	|	Т_Приложение2.П02С030 КАК П02С030,
	|	Т_Приложение2.П02С040 КАК П02С040,
	|	Т_Приложение2.П02С050 КАК П02С050,
	|	Т_Приложение2.П02С060 КАК П02С060,
	|	Т_Приложение2.П02С065 КАК П02С065
	|ПОМЕСТИТЬ ВТ_Приложение2
	|ИЗ
	|	&Т_Приложение2 КАК Т_Приложение2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Приложение21.НомерСтраницы КАК НомерСтраницы,
	|	Т_Приложение21.НомерСтроки КАК НомерСтроки,
	|	Т_Приложение21.П21С010 КАК П21С010,
	|	Т_Приложение21.П21С030 КАК П21С030
	|ПОМЕСТИТЬ ВТ_Приложение21
	|ИЗ
	|	&Т_Приложение21 КАК Т_Приложение21
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Приложение22.НомерСтраницы КАК НомерСтраницы,
	|	Т_Приложение22.НомерСтроки КАК НомерСтроки,
	|	Т_Приложение22.П22С073 КАК П22С073,
	|	Т_Приложение22.П22С074 КАК П22С074,
	|	Т_Приложение22.П22С075 КАК П22С075,
	|	Т_Приложение22.П22С076 КАК П22С076,
	|	Т_Приложение22.П22С077 КАК П22С077,
	|	Т_Приложение22.П22С083 КАК П22С083,
	|	Т_Приложение22.П22С085 КАК П22С085
	|ПОМЕСТИТЬ ВТ_Приложение22
	|ИЗ
	|	&Т_Приложение22 КАК Т_Приложение22";	
	
	Запрос.Выполнить();
	
	СтруктураГрафИПодразделов = Новый Структура;
	СтруктураГрафИПодразделов.Вставить("П00021М1", "Подраздела 2.1");
	СтруктураГрафИПодразделов.Вставить("П00022М1", "Подраздела 2.2");
	СтруктураГрафИПодразделов.Вставить("П00023М1", "Подраздела 2.3");
	СтруктураГрафИПодразделов.Вставить("П0002400", "Подраздела 2.4");
	СтруктураГрафИПодразделов.Вставить("П00025М1", "Подраздела 2.5");
	СтруктураГрафИПодразделов.Вставить("П00102М1", "Раздела 1");
	СтруктураГрафИПодразделов.Вставить("П00102М2", "Раздела 2");
	
	СтруктураРазделов = Новый Структура;
	СтруктураРазделов.Вставить("П00001", "Раздела 1");
	СтруктураРазделов.Вставить("П00002", "Раздела 2");
	СтруктураРазделов.Вставить("П00021", "Раздела 2");
	СтруктураРазделов.Вставить("П00022", "Раздела 2");
	СтруктураРазделов.Вставить("П00023", "Раздела 2");
	СтруктураРазделов.Вставить("П00024", "Раздела 2");
	СтруктураРазделов.Вставить("П00025", "Раздела 2");
	СтруктураРазделов.Вставить("П00101", "Приложения 1");
	СтруктураРазделов.Вставить("П00102", "Приложения 2");
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("П000010001003");
	МассивИсключений.Добавить("П000240000001");
	
	мДанныеОтчета.ДанныеКС.Вставить("СтруктураГрафИПодразделов"	, СтруктураГрафИПодразделов);
	мДанныеОтчета.ДанныеКС.Вставить("СтруктураРазделов"			, СтруктураРазделов);
	мДанныеОтчета.ДанныеКС.Вставить("МассивИсключений"			, МассивИсключений);
	
КонецФункции

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура РасшифроватьПоказатели(Знач СтруктураПоказателей, 
	Знач Настройки,
	Знач НазваниеСтраницы,
	Знач НомерСтраницы,
	Знач ВключаяПоказатели	= Неопределено,
	Знач ИсключаяПоказатели	= Неопределено,
	Знач Отчет = Неопределено)
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		
		Если ПропуститьЭлемент(ЭлементКоллекции.Ключ, ВключаяПоказатели, ИсключаяПоказатели) Тогда
			Продолжить;
		КонецЕсли;
		
		ВнестиПоказательВРасшифровку(ЭлементКоллекции.Значение, НазваниеСтраницы, СтрокаЧГ0(НомерСтраницы), Отчет);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ОписаниеКС = СформироватьОписаниеКС(Настройки, "ДопСведенияВЗаголовокРасшифровки");
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, 
		ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= Формат(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок, "ЧГ=0");
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, НСтр("ru=''"));
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель, ИмяКолонки = "")
	
	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяКолонки];
	ИначеЕсли ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		Если ЗначениеПоказателя = Неопределено Тогда
			ЗначениеПоказателя = 0;
		Иначе
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки, ИмяКолонки = "")
	
	НомерСтрокиСтр = "" + НомерСтроки;
	ИмяПоказателя = СтрЗаменить(Показатель.Имя, "%1", "");
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "%2", "");
		
	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяКолонки];
	ИначеЕсли ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИнфоКПредставлениюПоказателя(Показатель, СтрокаИнфо)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	Если СтрЗаканчиваетсяНа(ПредставлениеПоказателя, ")") Тогда
		ПозицияОткрСкобки = СтрНайти(ПредставлениеПоказателя, "(", НаправлениеПоиска.СКонца);
		Если ПозицияОткрСкобки > 0 Тогда
			ПредставлениеПоказателя = Лев(ПредставлениеПоказателя, ПозицияОткрСкобки);
			Показатель.Представление = ПредставлениеПоказателя + СтрокаИнфо + ")";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Показатель.Представление = ПредставлениеПоказателя + " (" + СтрокаИнфо + ")";
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, 
	ИмяСтраницы, НомерСтраницы = Неопределено, СсылкаНаДокумент = Неопределено)
	
	ПредставлениеПоказателя = ПредставлениеПоказателя(Показатель);
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтрЗаменить(Показатель.Имя, "%1", "_");
		ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "%2", Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		?(СсылкаНаДокумент = Неопределено, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, Неопределено),
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
		Настройки.Вставить("ПредставлениеПоказателя", "");
		Настройки.Вставить("РасшифровкаСписка"		, "");
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоказатели(Знач СтрокаПоказателей, Источник, НомерСтроки = 0, ПоКолонке = Ложь)

	МассивНазваний			= СтрРазделить(СтрокаПоказателей, ", ", Ложь);
	СтруктураПоказателей	= Новый Структура;
	
	Для каждого ЭлементМассива Из МассивНазваний Цикл
		Показатель = ПоказательПоСтроке(ЭлементМассива);
		СтруктураПоказателей.Вставить(ЭлементМассива, Показатель);
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			ВставитьЗначениеМногострочногоПоказателя(Источник, ЭлементКоллекции.Значение, НомерСтроки, 
				?(ПоКолонке, ЭлементКоллекции.Ключ, ""));
		Иначе
			ВставитьЗначениеПоказателя(Источник, ЭлементКоллекции.Значение, ?(ПоКолонке, ЭлементКоллекции.Ключ, ""));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПоказателей;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат(Знач Настройки, Знач СтруктураРезультата);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
		"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПропуститьЭлемент(НазваниеПоказателя, СтрокаВключая, СтрокаИсключая)
	
	Если СтрокаВключая = Неопределено И СтрокаИсключая = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Обработать	= Не СтрокаВключая = Неопределено И Не СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0
		Или Не СтрокаИсключая = Неопределено И СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0;
	Исключить	= Не СтрокаИсключая = Неопределено И Не СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0
		Или Не СтрокаВключая = Неопределено И СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0;
	
	Если Исключить Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Обработать Тогда
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		
		Если Не Настройки.ДопСведенияПараметры = Неопределено И
			Не Настройки.ДопСведенияПараметры.Количество() = 0 Тогда
			
			МассивПараметров = Новый Массив;
			Для каждого ЭлементКоллекции Из Настройки.ДопСведенияПараметры Цикл
				МассивПараметров.Добавить(ЭлементКоллекции.Значение);
			КонецЦикла;
			
			КоличествоПараметров = МассивПараметров.Количество();
			
			Если КоличествоПараметров = 1 Тогда
				Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений, "%1", МассивПараметров[0]);
			ИначеЕсли КоличествоПараметров = 2 Тогда
				Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений, "%1", МассивПараметров[0]);
				Настройки.ДопСведения = СтрЗаменить(Настройки.ДопСведения, "%2", МассивПараметров[1]);
			ИначеЕсли КоличествоПараметров = 3 Тогда
				Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений, "%1", МассивПараметров[0]);
				Настройки.ДопСведения = СтрЗаменить(Настройки.ДопСведения, "%2", МассивПараметров[1]);
				Настройки.ДопСведения = СтрЗаменить(Настройки.ДопСведения, "%3", МассивПараметров[2]);
			ИначеЕсли КоличествоПараметров = 4 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3]);
			ИначеЕсли КоличествоПараметров = 5 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4]);
			Иначе
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4], МассивПараметров[5]);
			КонецЕсли;
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(ВнешняяКоллекция, Знач Результат)
	
	Для каждого ВнешнийЭлемент Из ВнешняяКоллекция Цикл
		Результат = ЭлементЗаполнен(ВнешнийЭлемент, Результат);
		Если Результат Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭлементЗаполнен(ВнешнийЭлемент, Знач Результат)
	
	Для Каждого Показатель Из ВнешнийЭлемент.Данные Цикл
		Если НЕ мДанныеОтчета.ДанныеКС.МассивИсключений.Найти(Показатель.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат Или ЗначениеЗаполнено(Показатель.Значение);
		Если Результат Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВнешнийЭлемент.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
		Для каждого МнЧасть Из ВнешнийЭлемент.ДанныеМногострочныхЧастей Цикл
			Результат = Результат Или РазделЗаполнен(МнЧасть.Значение.Строки, Результат);
			Если Результат Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ВнешнийЭлемент.Строки.Количество() = 0 Тогда
		Для каждого ВнутреннийЭлемент Из ВнешнийЭлемент.Строки Цикл
			Результат = Результат Или РазделЗаполнен(ВнутреннийЭлемент.Строки, Результат);
			Если Результат Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПредставлениеПоказателя(Показатель, ПолноеПредставление = Истина)
	
	Перем ИмяПодраздела, ИмяРаздела;
	
	МассивПредставлений = Новый Массив;
	
	Если ЗначениеЗаполнено(Показатель.Имя) Тогда
		Если мДанныеОтчета.ДанныеКС.СтруктураГрафИПодразделов.Свойство(Лев(Показатель.Имя, 8)) Тогда
			МассивПредставлений.Добавить("Графа " + Сред(Показатель.Имя, 13, 1));
		КонецЕсли;
		
		Если НЕ Сред(Показатель.Имя, 9, 3) = "000" Тогда
			МассивПредставлений.Добавить("Строка " + Сред(Показатель.Имя, 9, 3));
		КонецЕсли;
		
		Если мДанныеОтчета.ДанныеКС.СтруктураГрафИПодразделов.Свойство(Лев(Показатель.Имя, 8), ИмяПодраздела) Тогда
			МассивПредставлений.Добавить(ИмяПодраздела);
		КонецЕсли;
		
		Если мДанныеОтчета.ДанныеКС.СтруктураРазделов.Свойство(Лев(Показатель.Имя, 6), ИмяРаздела) Тогда
			МассивПредставлений.Добавить(ИмяРаздела);
		КонецЕсли;
	КонецЕсли;
	
	ТехническоеПредставление = СтрСоединить(МассивПредставлений, " ");
	МассивПредставлений.Очистить();
	
	Если ЗначениеЗаполнено(ТехническоеПредставление) Тогда
		МассивПредставлений.Добавить(ТехническоеПредставление);
	КонецЕсли;
	
	Если ПолноеПредставление Тогда
		МассивПредставлений.Добавить(Показатель.Представление);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПредставлений, ". ");
	
КонецФункции

&НаСервере
Функция РасшифровкаВСтр(СтрокаДляРасшифровки)
	Если ТипЗнч(СтрокаДляРасшифровки) = Тип("Строка") Тогда
		Если СтрокаДляРасшифровки= "" Тогда
			Возврат "0";
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " + " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " - " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " и " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		Иначе
			Возврат СтрокаДляРасшифровки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтрокаДляРасшифровки) = Тип("Число") Тогда
		Возврат СтрокаЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтрокаДляРасшифровки));
	Иначе
		Возврат СтрокаДляРасшифровки;
	КонецЕсли;
КонецФункции

&НаСервере
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ФИО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		СтруктураРеквизитовФормы.Вставить(
		"НачальноеЗначениеНаимОрганизации", ТабличныйДокумент.Области.НаимОрг.Значение);
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" ИЛИ Ячейка.Раздел = "Раздел2" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел21" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Приложение1"
		ИЛИ Ячейка.Раздел = "Приложение2" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Приложение11" Тогда
		
		ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[Ячейка.Раздел]["ИмяГлавногоРаздела"];
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраница = НайденнаяСтраница;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяПодчСтраница Из ТекСтраница.ПолучитьЭлементы() Цикл
			Если НайденнаяПодчСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяПодчСтраница.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						Если ИмяРаздела = "Приложение1" Тогда
							
							ДанныеСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Данные;
							
							СтруктПарам = Новый Структура;
							СтруктПарам.Вставить("КодВидаПТ", ДанныеСтраницы.П001010001003);
							СтруктПарам.Вставить("КодОперации", ДанныеСтраницы.П001010002003);
							СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыРаздела);
							
							ЭлементРаздел.КолонкаРазделыОтчета = ПредставлениеСтраницыПриложения1(СтруктПарам);
							
						Иначе
							
							НаимСтраницы = "Стр. ";
							Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
								НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
							КонецЕсли;
							ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
							+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
							
						КонецЕсли;
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								Если СтруктураПодчРаздела.Свойство("Многостраничность") Тогда
									
									КолСтрокВДеревеДанныхПодчРаздела = Макс(ДеревоДанныхРаздела.Строки[
									НомерСтраницыРаздела - 1].Строки[ИндПодчРаздела].Строки.Количество(), 1);
									
									Для НомерСтраницыПодчРаздела = 1 По КолСтрокВДеревеДанныхПодчРаздела Цикл
										
										ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
										НаимСтраницы = "Стр. ";
										Если СтруктураПодчРаздела.Свойство("НаимСтраницы") Тогда
											НаимСтраницы = СтруктураПодчРаздела["НаимСтраницы"];
										КонецЕсли;
										ЭлементПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы
										+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыПодчРаздела, "ЧГ=");
										ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
										ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПодчРаздела;
										
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
					
					ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
					КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
					
					Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
						
						ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
						СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
						
						Если СтруктураПодчРаздела.Свойство("Многостраничность") Тогда
							
							КолСтрокВДеревеДанныхПодчРаздела
							= Макс(ДеревоДанныхРаздела.Строки[0].Строки[ИндПодчРаздела].Строки.Количество(), 1);
							
							Для НомерСтраницыПодчРаздела = 1 По КолСтрокВДеревеДанныхПодчРаздела Цикл
								
								ЭлементПодчРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
								
								Если ИмяПодчРаздела = "Раздел21" Тогда
									
									ДанныеПодчСтраницы
									= ДеревоДанныхРаздела.Строки[0].Строки[ИндПодчРаздела].Строки[НомерСтраницыПодчРаздела - 1].Данные;
									
									СтруктПарам = Новый Структура;
									СтруктПарам.Вставить("КодВидаПТ", ДанныеПодчСтраницы.П000020004003);
									СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыПодчРаздела);
									
									ЭлементПодчРаздел.КолонкаРазделыОтчета = ПредставлениеСтраницыРаздела21(СтруктПарам);
									
								Иначе
									
									НаимСтраницы = "Стр. ";
									Если СтруктураПодчРаздела.Свойство("НаимСтраницы") Тогда
										НаимСтраницы = СтруктураПодчРаздела["НаимСтраницы"];
									КонецЕсли;
									ЭлементПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы
									+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыПодчРаздела, "ЧГ=");
									
								КонецЕсли;
								
								ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
								ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПодчРаздела;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21" Тогда
				
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
				
			Иначе
				
				ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
				Если ТекРодитель <> Неопределено Тогда
					ТекЭлемент = Элемент.ТекущиеДанные;
					Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
						СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
						Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
							ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
							СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
							ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
							НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
						Иначе
							НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
						КонецЕсли;
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
						ТекЭлемент = ТекРодитель;
						ТекРодитель = ТекЭлемент.ПолучитьРодителя();
					КонецЦикла;
				КонецЕсли;
				
				СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
				Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
					НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
				Иначе
					НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
				КонецЕсли;
				
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтраницыРаздела21(СтруктураПараметров)
	
	КодВидаПТ = СокрЛП(СтруктураПараметров.КодВидаПТ);
	
	Возврат ?(ЗначениеЗаполнено(КодВидаПТ), "Код товара " + КодВидаПТ,
	"Стр. " + Формат(СтруктураПараметров.НомерСтраницы, "ЧГ="));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтраницыПриложения1(СтруктураПараметров)
	
	КодВидаПТ = СокрЛП(СтруктураПараметров.КодВидаПТ);
	КодОперации = СокрЛП(СтруктураПараметров.КодОперации);
	
	Если ЗначениеЗаполнено(КодВидаПТ) И ЗначениеЗаполнено(КодОперации) Тогда
		Возврат "Код товара " + КодВидаПТ + ", код операции " + КодОперации;
	ИначеЕсли ЗначениеЗаполнено(КодВидаПТ) Тогда
		Возврат "Код товара " + КодВидаПТ;
	ИначеЕсли ЗначениеЗаполнено(КодОперации) Тогда
		Возврат "Код операции " + КодОперации;
	КонецЕсли;
	
	Возврат "Стр. " + Формат(СтруктураПараметров.НомерСтраницы, "ЧГ=");
	
КонецФункции

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции