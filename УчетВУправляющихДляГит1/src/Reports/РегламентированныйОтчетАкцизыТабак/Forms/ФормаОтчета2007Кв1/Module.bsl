&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	// вспомогательные реквизиты, для избежания повторных вычислений
	СтруктураРеквизитовФормы.НаименованиеОтчета = ИмяОтчета(ЭтаФорма.ИмяФормы);
	СтруктураРеквизитовФормы.НаименованиеФормыОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета"));
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2007Кв1";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураДанныхТитульный   = Новый Структура;
	СтруктураДанныхРаздел1     = Новый Структура;
	СтруктураДанныхРаздел2     = Новый Структура;
	СтруктураДанныхРаздел3     = Новый Структура;
	СтруктураДанныхРаздел4     = Новый Структура;
	СтруктураДанныхПриложение4 = Новый Структура;
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0005200030";
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0005300030";
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0005500030";
	СтруктураРеквизитовФормы.мИдГруппы4 = "П0005600030";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	КолИсхСтрокИдГруппы2 = 1;
	КолИсхСтрокИдГруппы3 = 1;
	КолИсхСтрокИдГруппы4 = 1;
	
	КолКолонокИдГруппы1 = 14;
	КолКолонокИдГруппы2 = 14;
	КолКолонокИдГруппы3 = 14;
	КолКолонокИдГруппы4 = 14;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, СтруктураРеквизитовФормы.мИдГруппы4);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Приложение1", "ТаблицаСтраницыПриложение1");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение2", "ТаблицаСтраницыПриложение2");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение3", "ТаблицаСтраницыПриложение3");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение5", "ТаблицаСтраницыПриложение5");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение6", "ТаблицаСтраницыПриложение6");
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолИсхСтрокИдГруппы3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолИсхСтрокИдГруппы4);	
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолКолонокИдГруппы3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолКолонокИдГруппы4);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2007"; // Первая версия
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета   = "1151074";
	
	СтруктураРеквизитовФормы.ОбязРазделов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ОбязРазделов.Добавить("Раздел1");
	СтруктураРеквизитовФормы.ОбязРазделов.Добавить("Раздел2");
	
	ВариантыФорматовВыгрузки = Новый СписокЗначений;
	ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 3.00002", Ложь);
	ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 3.00003", Истина);
	
	КНД = "1151074";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.НаименованиеФормыОтчета + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма   	  = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок       	  = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("мВерсияОтчета");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета");
	СтруктураРеквизитовФормы.Вставить("НаименованиеФормыОтчета");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мИсключитьЗапускРасчета");
	СтруктураРеквизитовФормы.Вставить("мКБКРаздел1");
	СтруктураРеквизитовФормы.Вставить("мКодОКАТОРаздел1");
	СтруктураРеквизитовФормы.Вставить("мКодОКВЭД");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мСуммаНалогаКУменьшению1");
	СтруктураРеквизитовФормы.Вставить("мСуммаНалога25Число1");
	СтруктураРеквизитовФормы.Вставить("мСуммаНалога15Число1");
	СтруктураРеквизитовФормы.Вставить("ОбязРазделов");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("ПеречисленияЮрФизЛицо");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыПриложение1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыПриложение2.Добавить();
	СтрПерваяСтраница.Представление               = "НоваяСтраница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	СтрПерваяСтраница.ДанныеДопСтрок              = Неопределено;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыПриложение3.Добавить();
	СтрПерваяСтраница.Представление               = "НоваяСтраница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	СтрПерваяСтраница.ДанныеДопСтрок              = Неопределено;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыПриложение5.Добавить();
	СтрПерваяСтраница.Представление               = "НоваяСтраница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	СтрПерваяСтраница.ДанныеДопСтрок              = Неопределено;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыПриложение6.Добавить();
	СтрПерваяСтраница.Представление               = "НоваяСтраница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	СтрПерваяСтраница.ДанныеДопСтрок              = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел2.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	СтруктураДанныхРаздел4.Очистить();
	СтруктураДанныхПриложение4.Очистить();
	
	ТаблицаСтраницыПриложение1.Очистить();
	ТаблицаСтраницыПриложение2.Очистить();
	ТаблицаСтраницыПриложение3.Очистить();
	ТаблицаСтраницыПриложение5.Очистить();
	ТаблицаСтраницыПриложение6.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.НаименованиеФормыОтчета + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.НаименованиеФормыОтчета + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000510001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000520001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000530001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000550001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина; // Сохраняем как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000560001000";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	РазделЯвляетсяАвтозаполняемым                      = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "Приложение2";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		ТекТабличноеПоле = "Приложение3";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы3 Тогда
		ТекТабличноеПоле = "Приложение5";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		ТекТабличноеПоле = "Приложение6";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
		
    Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение6" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле)
	
	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
		
	// Блок отвечает за вставку в структуру показателей несуществующих на титульном листе
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"  Тогда

		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо",  Форма.СтруктураРеквизитовФормы.мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", Форма.СтруктураРеквизитовФормы.мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", Форма.СтруктураРеквизитовФормы.мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя",  Форма.СтруктураРеквизитовФормы.мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя",      Форма.СтруктураРеквизитовФормы.мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", Форма.СтруктураРеквизитовФормы.мОтчествоПредставителя);

	КонецЕсли;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));

	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));

	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));

	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
                				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Выгрузить();

					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",    СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя",   СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя",   СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",    СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",        СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя",   СтруктураРеквизитовФормы.мОтчествоПредставителя);
	ПеременныеМодуля.Вставить("мКБКРаздел1",              СтруктураРеквизитовФормы.мКБКРаздел1);
	ПеременныеМодуля.Вставить("мКодОКАТОРаздел1",         СтруктураРеквизитовФормы.мКодОКАТОРаздел1);
	ПеременныеМодуля.Вставить("мСуммаНалога25Число1",     СтруктураРеквизитовФормы.мСуммаНалога25Число1);
	ПеременныеМодуля.Вставить("мСуммаНалога15Число1",     СтруктураРеквизитовФормы.мСуммаНалога15Число1);
	ПеременныеМодуля.Вставить("мСуммаНалогаКУменьшению1", СтруктураРеквизитовФормы.мСуммаНалогаКУменьшению1);
	ПеременныеМодуля.Вставить("мКодОКВЭД",                СтруктураРеквизитовФормы.мКодОКВЭД);
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо    = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя   = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя	  = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя	  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя		  = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя	  = ПеременныеМодуля.мОтчествоПредставителя;
	СтруктураРеквизитовФормы.мКБКРаздел1		      = ПеременныеМодуля.мКБКРаздел1;
	СтруктураРеквизитовФормы.мКодОКАТОРаздел1		  = ПеременныеМодуля.мКодОКАТОРаздел1;
	СтруктураРеквизитовФормы.мСуммаНалога25Число1	  = ПеременныеМодуля.мСуммаНалога25Число1;
	СтруктураРеквизитовФормы.мСуммаНалога15Число1	  = ПеременныеМодуля.мСуммаНалога15Число1;
	СтруктураРеквизитовФормы.мСуммаНалогаКУменьшению1 = ПеременныеМодуля.мСуммаНалогаКУменьшению1;
	СтруктураРеквизитовФормы.мКодОКВЭД		          = ПеременныеМодуля.мКодОКВЭД;
               		
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",    СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя",   СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя",   СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",    СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",        СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя",   СтруктураРеквизитовФормы.мОтчествоПредставителя);
	ПеременныеМодуля.Вставить("мКБКРаздел1",              СтруктураРеквизитовФормы.мКБКРаздел1);
	ПеременныеМодуля.Вставить("мКодОКАТОРаздел1",         СтруктураРеквизитовФормы.мКодОКАТОРаздел1);
	ПеременныеМодуля.Вставить("мСуммаНалога25Число1",     СтруктураРеквизитовФормы.мСуммаНалога25Число1);
	ПеременныеМодуля.Вставить("мСуммаНалога15Число1",     СтруктураРеквизитовФормы.мСуммаНалога15Число1);
	ПеременныеМодуля.Вставить("мСуммаНалогаКУменьшению1", СтруктураРеквизитовФормы.мСуммаНалогаКУменьшению1);
	ПеременныеМодуля.Вставить("мКодОКВЭД",                СтруктураРеквизитовФормы.мКодОКВЭД);
	                                                	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

	СтруктураРеквизитовФормы.мПредставительФизЛицо    = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя   = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя	  = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя	  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя		  = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя	  = ПеременныеМодуля.мОтчествоПредставителя;
	СтруктураРеквизитовФормы.мКБКРаздел1		      = ПеременныеМодуля.мКБКРаздел1;
	СтруктураРеквизитовФормы.мКодОКАТОРаздел1		  = ПеременныеМодуля.мКодОКАТОРаздел1;
	СтруктураРеквизитовФормы.мСуммаНалога25Число1	  = ПеременныеМодуля.мСуммаНалога25Число1;
	СтруктураРеквизитовФормы.мСуммаНалога15Число1	  = ПеременныеМодуля.мСуммаНалога15Число1;
	СтруктураРеквизитовФормы.мСуммаНалогаКУменьшению1 = ПеременныеМодуля.мСуммаНалогаКУменьшению1;
	СтруктураРеквизитовФормы.мКодОКВЭД		          = ПеременныеМодуля.мКодОКВЭД;
			   	 	                      	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы, ПеременныеМодуля)

	Если ИмяСтраницы = "Титульный" Тогда

		ПеременныеМодуля.мПредставительФизЛицо = Неопределено;
		ПеременныеМодуля.мНазваниеПредставителя = "";
		ПеременныеМодуля.мДокументПредставителя = "";

		ПеременныеМодуля.мФамилияПредставителя = "";
		ПеременныеМодуля.мИмяПредставителя = "";
		ПеременныеМодуля.мОтчествоПредставителя = "";

	ИначеЕсли ИмяСтраницы = "Раздел1" Тогда

		ПеременныеМодуля.мКБКРаздел1 = "";
		ПеременныеМодуля.мКодОКАТОРаздел1 = "";
		ПеременныеМодуля.мСуммаНалога25Число1 = 0;
		ПеременныеМодуля.мСуммаНалога15Число1 = 0;
		ПеременныеМодуля.мСуммаНалогаКУменьшению1 = 0;
		ПеременныеМодуля.мКодОКВЭД = "";

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()

	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
    		
	Если (СтруктураРеквизитовФормы.мДокументВосстановлен) И (СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;

	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	ТабличныйДокумент.Области.НалогПериод.Значение = "1";
	ТабличныйДокумент.Области.НомКвартал.Значение = Формат(Число(НомерМесяца), "ЧЦ=2; ЧВН=");
	ТабличныйДокумент.Области.ОтчетГод.Значение   = НомерГода ;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
    	
	ЗаполнитьДатуПодписи(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
    		
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;

КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)

	// Процедура "заглушка" для сохранения работающих механизмов.
	// Вызов осуществляется из роЗаполнитьСведенияОбОрганизации.
	Возврат;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ТелОрганизации, КодНО, НаимНО, ТипНП, ОКАТО, ОКТМО";
	КонецЕсли;

	Сведения = Сведения + ", ФИОРук, ФИО";

	Результат = РегламентированнаяОтчетностьВызовСервера.ЗаполнитьСведенияОбОрганизацииНаСервере(ЭтаФорма, Сведения);
	
	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда
		
		ТабличныйДокумент.Области.КодИМНС.Значение = Результат.КодНО;
		ТабличныйДокумент.Области.ИНН1.Значение    = Результат.ИННЮЛ;
		ТабличныйДокумент.Области.КПП1.Значение    = Результат.КППЮЛ;
		
		КодТерриториальногоОбразования = ?(ПрименяетсяФормат300006(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), Результат.ОКТМО, Результат.ОКАТО);
		КодТерриториальногоОбразования = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КодТерриториальногоОбразования, 11, " ");

		СтруктураРеквизитовФормы.мКодОКАТОРаздел1 = СокрЛП(КодТерриториальногоОбразования);
						
		Если НЕ СтруктураДанныхРаздел1.Свойство("КБК1") Тогда
			СтруктураДанныхРаздел1.Вставить("КБК1", "");
		КонецЕсли;	
		
		Если НЕ СтруктураДанныхРаздел1.Свойство("КодОКАТО1") Тогда
			СтруктураДанныхРаздел1.Вставить("КодОКАТО1", "");
		КонецЕсли;
		
		Если НЕ СтруктураДанныхРаздел1.Свойство("СуммаНалога25Число1") Тогда			
			СтруктураДанныхРаздел1.Вставить("СуммаНалога25Число1", 0);
		КонецЕсли;
		
		Если НЕ СтруктураДанныхРаздел1.Свойство("СуммаНалога15Число1") Тогда
			СтруктураДанныхРаздел1.Вставить("СуммаНалога15Число1", 0);
		КонецЕсли;
		
		Если НЕ СтруктураДанныхРаздел1.Свойство("СуммаНалогаКУменьшению1") Тогда
			СтруктураДанныхРаздел1.Вставить("СуммаНалогаКУменьшению1", 0);
		КонецЕсли;
						
		ТипНП = Результат.ТипНП;
		
		ТабличныйДокумент.Области.ТипОрг1.Значение = ?(ТипНП = 1, "V", "");
		ТабличныйДокумент.Области.ТипОрг2.Значение = ?(ТипНП = 2, "V", "");
		ТабличныйДокумент.Области.ТипОрг3.Значение = ?(ТипНП = 3, "V", "");
		ТабличныйДокумент.Области.ТипОрг4.Значение = ?(ТипНП = 4, "V", "");

	КонецЕсли;
	
	СтруктураДанныхРаздел1.Вставить("ОКВЭДРаздел1", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураРеквизитовФормы.мКодОКВЭД);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхРаздел1.ОКВЭДРаздел1);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();
				
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма, "дляВыбораСтраницОтчета");

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",   "ПечатнаяФормаОтчета2007Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",     "ПечатнаяФормаОтчета2007Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",     "ПечатнаяФормаОтчета2007Кв1_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",     "ПечатнаяФормаОтчета2007Кв1_Раздел3");
	СоответствиеРазделовМакетам.Вставить("Раздел4",     "ПечатнаяФормаОтчета2007Кв1_Раздел4");
	СоответствиеРазделовМакетам.Вставить("Приложение1", "ПечатнаяФормаОтчета2007Кв1_Приложение1");
	СоответствиеРазделовМакетам.Вставить("Приложение2", "ПечатнаяФормаОтчета2007Кв1_Приложение2");
	СоответствиеРазделовМакетам.Вставить("Приложение3", "ПечатнаяФормаОтчета2007Кв1_Приложение3");
	СоответствиеРазделовМакетам.Вставить("Приложение4", "ПечатнаяФормаОтчета2007Кв1_Приложение4");
    СоответствиеРазделовМакетам.Вставить("Приложение5", "ПечатнаяФормаОтчета2007Кв1_Приложение5");
    СоответствиеРазделовМакетам.Вставить("Приложение6", "ПечатнаяФормаОтчета2007Кв1_Приложение6");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетПечатнойФормы = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 10;
	МакетПечатнойФормы.ПолеСправа = 10;
	МакетПечатнойФормы.ПолеСнизу = 10;
	МакетПечатнойФормы.ПолеСлева = 10;
		
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		ОбластьМнгЧасти              = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть");
		ВысотаОбластиМнгЧасти        = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, , ВысотаОбластиМнгЧасти).Области[0].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
		
		КолвоСтрокВПечатнойФормеСтр = Формат(КолвоСтрокВПечатнойФорме, "ЧГ=");
		
		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
						
			НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + "01_" + КолвоСтрокВПечатнойФормеСтр).Верх;
			НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + Формат(мСтруктураКолвоКолонокРазделов[ИдГруппы], "ЧЦ=2; ЧВН=") + "_" + КолвоСтрокВПечатнойФормеСтр).Низ;
				
			ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
									
			Для Ном = 1 По КолвоДопСтрок Цикл
							
				МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
													
			КонецЦикла;
			
			Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
				НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
				Если НЕ НайденнаяОбласть = Неопределено Тогда 
					НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, СтрНайти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
				КонецЕсли;
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок - 1 Цикл
				
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
						
		КонецЕсли;
						
	КонецЕсли;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
		
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если СтрНайти(Область.Имя, "ДобавлениеСтроки") > 0
			Или СтрНайти(Область.Имя, "ДобавитьСтроку") > 0
			Или СтрНайти(Область.Имя, "УдалитьСтроку") > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Область.Имя, "ДобавитьСтраницу") > 0
			Или СтрНайти(Область.Имя, "УдалитьСтраницу") > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение <> Неопределено И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ИНН") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КПП") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "СоставленаНа") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомКвартал") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "КодИМНС") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "Прил") > 0 
					  ИЛИ СтрЧислоВхождений(Область.Имя, "Прил") > 0 Тогда
					  
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;	
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел1" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КБК") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + "_" + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
			
		    	ИначеЕсли СтрЧислоВхождений(Область.Имя, "СуммаНалога") > 0  Тогда
		    		  
		    		  Если ЗначениеЗаполнено(Область.Значение) Тогда 
		    			  
		 
		    			  Строка1 = СтрЗаменить(Область.Значение,Символы.НПП,"");
		    			  
		    			  Для Ном = 1 По СтрДлина(Строка1) Цикл
		    				  
		    				  МакетПечатнойФормы.Области[Область.Имя + "_" + (16 - Ном)].Значение = Сред(Строка1, СтрДлина(Строка1) + 1 - Ном, 1);
		    				  
		    			  КонецЦикла;
		    			  
		    		  КонецЕсли;
		    		
		    		Продолжить;				
				
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ОКВЭД") > 0  Тогда
					  
					  Если ЗначениеЗаполнено(Область.Значение) Тогда 
						  
						  Для Ном = 1 По СтрДлина(Область.Значение) Цикл
							  
							МакетПечатнойФормы.Области[Область.Имя + "_" + Ном].Значение = Сред(Область.Значение, Ном, 1);
							  
						  КонецЦикла;
						  
					  КонецЕсли;
					
					Продолжить;	
		
			КонецЕсли;
	
				КонецЕсли;
							
			попытка
			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			исключение
			конецпопытки;
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		Если Реквизит.Ключ = "ДатаПодписиРук" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиРук";
				Постфикс = "1";
				Разделитель = Ложь;
			Иначе
				НаименованиеОбласти = "ДатаПодписи1";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиБух" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиБух";
				Постфикс = "1";
				Разделитель = Ложь;
			Иначе
				НаименованиеОбласти = "ДатаПодписи2";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиИП" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиИП";
				Постфикс = "1";
				Разделитель = Ложь;
			Иначе
				НаименованиеОбласти = "ДатаПодписи3";
			КонецЕсли;
		Иначе
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
		КонецЕсли;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Цикл
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение = Реквизит.Значение[Ном - 1];
			КонецЦикла;
			
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		МакетПечатнойФормы.Области.Приказ.Текст = НомерПриказа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];

	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;
    
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
															
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ТаблицаЗначений") Тогда
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
			Иначе
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	ВыбТабличноеПоле = Форма["ТабличныйДокумент"];
	ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ВыбТабличноеПолеИмя);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.
		
		Форма.УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок);

		Форма["ТабличныйДокумент"] = ВыбТабличноеПоле;

	КонецЕсли;
	
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПолеИмя <> "ФизЛица") Тогда
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (СтрНайти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (СтрНайти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			ТекущаяОбласть.Значение = "";
		Иначе
			ТекущаяОбласть.Очистить();
		КонецЕсли;
		
	КонецЦикла;

	ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
	
	#Если НаКлиенте Тогда
		Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(ИмяСтраницыПанели);
	#Иначе
		Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(ИмяСтраницыПанели);
	#КонецЕсли
		
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппыДопСтрок);
	КонецЕсли;
	
	Для Каждого Обл Из ВыбТабличноеПоле.Области Цикл 
		Если СтрНайти(Обл.Имя, "УдалитьСтроку") = 1 Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Расчет(Форма, ИмяСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    	       	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение3" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение5" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение6" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	Если НомерКорректировки = 0 Тогда
		СтруктураДанныхТитульный.Вставить("НомКоррект", "");
	КонецЕсли;
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
						
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
	
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение3" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение5" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение6" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Загрузить(СохрТЗМногострочнойГруппы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	СтруктураДанныхТитульный.Вставить("НомКоррект", Строка(НомерКорректировки));
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомКоррект", ТабличныйДокумент.Области.НомКоррект.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомКоррект) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомКоррект);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
                           
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	                            	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
                                             
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт			
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант 								  = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
    	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи             							 = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения            = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения    = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий		   	                                 = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
						
		КонецЦикла;
				
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					// Конвертация данных при переходе с 2.0 на 3.0.
					Если ЭлементСтруктуры.Ключ = "Раздел1" Тогда
						Для каждого СтрокаТЗ Из ЭлементМассива Цикл
							Если СтрокаТЗ.КодПоказателя = "СуммаНалога25Число1_1" Тогда
								СтрокаТЗ.КодПоказателя = "СуммаНалога25Число1";
							ИначеЕсли СтрокаТЗ.КодПоказателя = "СуммаНалога15Число1_1" Тогда
								СтрокаТЗ.КодПоказателя = "СуммаНалога15Число1";
							ИначеЕсли СтрокаТЗ.КодПоказателя = "СуммаНалогаКУменьшению1_1" Тогда
								СтрокаТЗ.КодПоказателя = "СуммаНалогаКУменьшению1";
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
    		
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	    	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ВосстановитьДанныеРаздела1СтарогоОбразца(ПоказателиОтчета);
		
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.мДелитель = 1;
	
	// Управляем видимостью страниц основной панели формы
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;

	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",    СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя",   СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя",   СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",    СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",        СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя",   СтруктураРеквизитовФормы.мОтчествоПредставителя);
	ПеременныеМодуля.Вставить("мКБКРаздел1",              СтруктураРеквизитовФормы.мКБКРаздел1);
	ПеременныеМодуля.Вставить("мКодОКАТОРаздел1",         СтруктураРеквизитовФормы.мКодОКАТОРаздел1);
	ПеременныеМодуля.Вставить("мСуммаНалога25Число1",     СтруктураРеквизитовФормы.мСуммаНалога25Число1);
	ПеременныеМодуля.Вставить("мСуммаНалога15Число1",     СтруктураРеквизитовФормы.мСуммаНалога15Число1);
	ПеременныеМодуля.Вставить("мСуммаНалогаКУменьшению1", СтруктураРеквизитовФормы.мСуммаНалогаКУменьшению1);
	ПеременныеМодуля.Вставить("мКодОКВЭД",                СтруктураРеквизитовФормы.мКодОКВЭД);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо    = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя   = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя   = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя    = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя        = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя   = ПеременныеМодуля.мОтчествоПредставителя;
	СтруктураРеквизитовФормы.мКБКРаздел1	          = ПеременныеМодуля.мКБКРаздел1;
	СтруктураРеквизитовФормы.мКодОКАТОРаздел1         = ПеременныеМодуля.мКодОКАТОРаздел1;
	СтруктураРеквизитовФормы.мСуммаНалога25Число1     = ПеременныеМодуля.мСуммаНалога25Число1;
	СтруктураРеквизитовФормы.мСуммаНалога15Число1     = ПеременныеМодуля.мСуммаНалога15Число1;
	СтруктураРеквизитовФормы.мСуммаНалогаКУменьшению1 = ПеременныеМодуля.мСуммаНалогаКУменьшению1;
	СтруктураРеквизитовФормы.мКодОКВЭД	              = ПеременныеМодуля.мКодОКВЭД;
				      	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",    СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя",   СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя",   СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",    СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",        СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя",   СтруктураРеквизитовФормы.мОтчествоПредставителя);
	ПеременныеМодуля.Вставить("мКБКРаздел1",              СтруктураРеквизитовФормы.мКБКРаздел1);
	ПеременныеМодуля.Вставить("мКодОКАТОРаздел1",         СтруктураРеквизитовФормы.мКодОКАТОРаздел1);
	ПеременныеМодуля.Вставить("мСуммаНалога25Число1",     СтруктураРеквизитовФормы.мСуммаНалога25Число1);
	ПеременныеМодуля.Вставить("мСуммаНалога15Число1",     СтруктураРеквизитовФормы.мСуммаНалога15Число1);
	ПеременныеМодуля.Вставить("мСуммаНалогаКУменьшению1", СтруктураРеквизитовФормы.мСуммаНалогаКУменьшению1);
	ПеременныеМодуля.Вставить("мКодОКВЭД",                СтруктураРеквизитовФормы.мКодОКВЭД);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо    = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя   = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя   = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя    = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя        = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя   = ПеременныеМодуля.мОтчествоПредставителя;
	СтруктураРеквизитовФормы.мКБКРаздел1	          = ПеременныеМодуля.мКБКРаздел1;
	СтруктураРеквизитовФормы.мКодОКАТОРаздел1         = ПеременныеМодуля.мКодОКАТОРаздел1;
	СтруктураРеквизитовФормы.мСуммаНалога25Число1     = ПеременныеМодуля.мСуммаНалога25Число1;
	СтруктураРеквизитовФормы.мСуммаНалога15Число1     = ПеременныеМодуля.мСуммаНалога15Число1;
	СтруктураРеквизитовФормы.мСуммаНалогаКУменьшению1 = ПеременныеМодуля.мСуммаНалогаКУменьшению1;
	СтруктураРеквизитовФормы.мКодОКВЭД	              = ПеременныеМодуля.мКодОКВЭД;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
		ПеременныеМодуля.мКБКРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел1" Тогда
		ПеременныеМодуля.мКодОКАТОРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога25Число1" Тогда
		ПеременныеМодуля.мСуммаНалога25Число1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога15Число1" Тогда
		ПеременныеМодуля.мСуммаНалога15Число1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалогаКУменьшению1" Тогда
		ПеременныеМодуля.мСуммаНалогаКУменьшению1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКВЭД" Тогда
		ПеременныеМодуля.мКодОКВЭД = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000560003007", "П000560003005;П000560003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000560003008", "П000560003004;П000560003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000560003011", "П000560003009;П000560003010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000550003007", "П000550003005;П000550003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000550003008", "П000550003004;П000550003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000550003011", "П000550003009;П000550003010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000540001005", "П000540001006;П000540001007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000540002005", "П000540002006;П000540002007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000540003005", "П000540003006;П000540003007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000540004005", "П000540004006;П000540004007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000540005005", "П000540005006;П000540005007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000540006005", "П000540006006;П000540006007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000540007005", "П000540007006;П000540007007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000530003007", "П000530003005;П000530003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000530004007", "П000530003005;П000530003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000530003008", "П000530003004;П000530003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000530004008", "П000530003004;П000530003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000530003011", "П000530003009;П000530003010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000530004013", "П000530003013");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000530004014", "П000530003014");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000510013005", "П000510005005;П000510006005;П000510007005;П000510008005;П000510009005;П000510010005;П000510011005;П000510012005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000520003007", "П000520003005;П000520003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000520004007", "П000520003005;П000520003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000520003008", "П000520003004;П000520003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000520004008", "П000520003004;П000520003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000520003011", "П000520003009;П000520003010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000520004013", "П000520003013");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000520004014", "П000520003014");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000520004105", "П000520005005;П000520006005;П000520007005;П000520008005;П000520009005;П000520010005;П000520011005;П000520012005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000520004106", "П000520005006;П000520006006;П000520007006;П000520008006;П000520009006;П000520010006;П000520011006;П000520012006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000040011005", "П000040001005;П000040002005;П000040003005;П000040004005;П000040005005;П000040006005;П000040007005;П000040008005;П000040009005;П000040010005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000040022005", "П000040012005;П000040013005;П000040014005;П000040015005;П000040016005;П000040017005;П000040018005;П000040019005;П000040020005;П000040021005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030002007", "П000030002005;П000030002006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030003007", "П000030003005;П000030003006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030004007", "П000030004005;П000030004006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030005107", "П000030005105;П000030005106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030005207", "П000030005205;П000030005206");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030005307", "П000030005305;П000030005306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030005007", "П000030005107;П000030005207;П000030005307;П000030005105;П000030005106;П000030005205;П000030005206;П000030005305;П000030005306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030006107", "П000030006105;П000030006106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030006207", "П000030006205;П000030006206");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030006307", "П000030006305;П000030006306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030006007", "П000030006107;П000030006207;П000030006307;П000030006105;П000030006106;П000030006205;П000030006206;П000030006305;П000030006306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030008007", "П000030008005;П000030008006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030009007", "П000030009005;П000030009006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030010007", "П000030010005;П000030010006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030011107", "П000030011105;П000030011106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030011207", "П000030011205;П000030011206");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030011307", "П000030011305;П000030011306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030011007", "П000030011107;П000030011207;П000030011307;П000030011105;П000030011106;П000030011205;П000030011206;П000030011305;П000030011306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030012107", "П000030012105;П000030012106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030012207", "П000030012205;П000030012206");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030012307", "П000030012305;П000030012306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030012007", "П000030012107;П000030012207;П000030012307;П000030012105;П000030012106;П000030012205;П000030012206;П000030012305;П000030012306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030007007", "П000030008007;П000030009007;П000030010007;П000030011007;П000030012007;П000030008005;П000030008006;П000030009005;П000030009006;П000030010005;П000030010006;П000030011107;П000030011207;П000030011307;П000030011105;П000030011106;П000030011205;П000030011206;П000030011305;П000030011306;П000030012107;П000030012207;П000030012307;П000030012105;П000030012106;П000030012205;П000030012206;П000030012305;П000030012306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030001007", "П000030002007;П000030003007;П000030004007;П000030005007;П000030006007;П000030002005;П000030002006;П000030003005;П000030003006;П000030004005;П000030004006;П000030005107;П000030005207;П000030005307;П000030005105;П000030005106;П000030005205;П000030005206;П000030005305;П000030005306;П000030006107;П000030006207;П000030006307;П000030006105;П000030006106;П000030006205;П000030006206;П000030006305;П000030006306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030013007", "П000030001007;П000030007007;П000030008007;П000030009007;П000030010007;П000030011007;П000030012007;П000030008005;П000030008006;П000030009005;П000030009006;П000030010005;П000030010006;П000030011107;П000030011207;П000030011307;П000030011105;П000030011106;П000030011205;П000030011206;П000030011305;П000030011306;П000030012107;П000030012207;П000030012307;П000030012105;П000030012106;П000030012205;П000030012206;П000030012305;П000030012306;П000030002007;П000030003007;П000030004007;П000030005007;П000030006007;П000030002005;П000030002006;П000030003005;П000030003006;П000030004005;П000030004006;П000030005107;П000030005207;П000030005307;П000030005105;П000030005106;П000030005205;П000030005206;П000030005305;П000030005306;П000030006107;П000030006207;П000030006307;П000030006105;П000030006106;П000030006205;П000030006206;П000030006305;П000030006306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220011006", "П000220012006;П000220013006");
   	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220014006", "П000220015006;П000220016006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220017006", "П000220018006;П000220019006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220011008", "П000220011006;П000220011007;П000220012006;П000220013006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220012008", "П000220012006;П000220012007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220013008", "П000220013006;П000220013007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220014008", "П000220014006;П000220014007;П000220015006;П000220016006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220015008", "П000220015006;П000220015007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220016008", "П000220016006;П000220016007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220017008", "П000220017006;П000220017007;П000220018006;П000220019006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220018008", "П000220018006;П000220018007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000220019008", "П000220019006;П000220019007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210001009", "П000210002009;П000210003009;П000210004009;П000210005009");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210006009", "П000210007009;П000210008009;П000210009009;П000210010009");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230020008", "П000210001009;П000210006009;П000220011008;П000220014008;П000220017008;П000030013007;П000220011006;П000220011007;П000220012006;П000220013006;П000220014006;П000220014007;П000220015006;П000220016006;П000220017006;П000220017007;П000220018006;П000220019006;П000210002009;П000210003009;П000210004009;П000210005009;П000210007009;П000210008009;П000210009009;П000210010009;П000030001007;П000030007007;П000030008007;П000030009007;П000030010007;П000030011007;П000030012007;П000030008005;П000030008006;П000030009005;П000030009006;П000030010005;П000030010006;П000030011107;П000030011207;П000030011307;П000030011105;П000030011106;П000030011205;П000030011206;П000030011305;П000030011306;П000030012107;П000030012207;П000030012307;П000030012105;П000030012106;П000030012205;П000030012206;П000030012305;П000030012306;П000030002007;П000030003007;П000030004007;П000030005007;П000030006007;П000030002005;П000030002006;П000030003005;П000030003006;П000030004005;П000030004006;П000030005107;П000030005207;П000030005307;П000030005105;П000030005106;П000030005205;П000030005206;П000030005305;П000030005306;П000030006107;П000030006207;П000030006307;П000030006105;П000030006106;П000030006205;П000030006206;П000030006305;П000030006306");
   	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230022008", "П000230020008;П000230021008;П000210001009;П000210006009;П000220011008;П000220014008;П000220017008;П000030013007;П000220011006;П000220011007;П000220012006;П000220013006;П000220014006;П000220014007;П000220015006;П000220016006;П000220017006;П000220017007;П000220018006;П000220019006;П000210002009;П000210003009;П000210004009;П000210005009;П000210007009;П000210008009;П000210009009;П000210010009;П000030001007;П000030007007;П000030008007;П000030009007;П000030010007;П000030011007;П000030012007;П000030008005;П000030008006;П000030009005;П000030009006;П000030010005;П000030010006;П000030011107;П000030011207;П000030011307;П000030011105;П000030011106;П000030011205;П000030011206;П000030011305;П000030011306;П000030012107;П000030012207;П000030012307;П000030012105;П000030012106;П000030012205;П000030012206;П000030012305;П000030012306;П000030002007;П000030003007;П000030004007;П000030005007;П000030006007;П000030002005;П000030002006;П000030003005;П000030003006;П000030004005;П000030004006;П000030005107;П000030005207;П000030005307;П000030005105;П000030005106;П000030005205;П000030005206;П000030005305;П000030005306;П000030006107;П000030006207;П000030006307;П000030006105;П000030006106;П000030006205;П000030006206;П000030006305;П000030006306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230023008", "П000230021008;П000230020008;П000210001009;П000210006009;П000220011008;П000220014008;П000220017008;П000030013007;П000220011006;П000220011007;П000220012006;П000220013006;П000220014006;П000220014007;П000220015006;П000220016006;П000220017006;П000220017007;П000220018006;П000220019006;П000210002009;П000210003009;П000210004009;П000210005009;П000210007009;П000210008009;П000210009009;П000210010009;П000030001007;П000030007007;П000030008007;П000030009007;П000030010007;П000030011007;П000030012007;П000030008005;П000030008006;П000030009005;П000030009006;П000030010005;П000030010006;П000030011107;П000030011207;П000030011307;П000030011105;П000030011106;П000030011205;П000030011206;П000030011305;П000030011306;П000030012107;П000030012207;П000030012307;П000030012105;П000030012106;П000030012205;П000030012206;П000030012305;П000030012306;П000030002007;П000030003007;П000030004007;П000030005007;П000030006007;П000030002005;П000030002006;П000030003005;П000030003006;П000030004005;П000030004006;П000030005107;П000030005207;П000030005307;П000030005105;П000030005106;П000030005205;П000030005206;П000030005305;П000030005306;П000030006107;П000030006207;П000030006307;П000030006105;П000030006106;П000030006205;П000030006206;П000030006305;П000030006306");
			
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ТабличныйДокумент.Области.Приказ.Текст = НомерПриказа();
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2013 Тогда
		
		УстановитьРазмерностьНалоговойСтавки2013();
			
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	// ФлОтклВыборЗначений
	СтруктураРеквизитовФормы.мАвтоВыборКодов 				 = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен  		 = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 				     = Ложь;
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета         = Ложь;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация  = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		ЗагрузитьПоказателиИзМакета("КБК2005");
		ЗагрузитьПоказателиИзМакета("ТабачныеИзделияКодыТоваров");
		ЗагрузитьПоказателиИзМакета("ТабачныеИзделияЕдИзмерения");
		ЗагрузитьПоказателиИзМакета("Только450и460");
		ЗагрузитьПоказателиИзМакета("Кроме450и460");
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
			Если НЕ БезОткрытияФормы Тогда
				НачальныеОперацииСМногострочнымиБлоками();
			КонецЕсли;
			
			//документ скопирован
			ВосстановитьСохраненныеДанные();
			
		Иначе
			
			// Это новый документ.
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мДелитель                = 1;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ТабличныйДокумент.Области.ВидДок.Значение = "1";
			
		КонецЕсли;
		
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		Если НЕ БезОткрытияФормы Тогда
			// Установим маска, чтобы при воостановлении не устанавливать, а копировать с уже установленных масок на строках.
			НачальныеОперацииСМногострочнымиБлоками();
			
		КонецЕсли;
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистамиНаСервере();
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		
		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если НазваниеСтраницы = "Титульный" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (СтруктураРеквизитовФормы.мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	ЗаполнитьДатуПодписи(ЭтаФорма);
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомКоррект.Значение = Строка(НомерКорректировки);
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция НомерПриказа()
	
	НомерПриказа = "Приложение № 3 к приказу Министерства финансов Российской Федерации от 14.11.2006 г. № 146н";
	
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= '20080101' Тогда
		НомерПриказа= НомерПриказа + " (в редакции приказа Минфина России от 20.12.2007 г. № 142н)";
	КонецЕсли;
	
	Возврат НомерПриказа;
	
КонецФункции

&НаСервере
Процедура УстановитьРазмерностьНалоговойСтавки2013()
	
	ТипЧисло4 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4));
	ТипЧисло2_1 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 1));
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000210002007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000210002007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000210003007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000210003007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000210004007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000210004007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000210005007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000210005007.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000210007007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000210007007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000210008007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000210008007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000210009007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000210009007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000210010007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000210010007.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000220011007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000220011007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000220012007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000220012007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000220013007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000220013007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000220014007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000220014007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000220015007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000220015007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000220016007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000220016007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000220017007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000220017007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000220018007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000220018007.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000220019007.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000220019007.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000210002008.ТипЗначения = ТипЧисло2_1;
		ТабличныйДокумент.Области.П000210002008.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000210004008.ТипЗначения = ТипЧисло2_1;
		ТабличныйДокумент.Области.П000210004008.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000210007008.ТипЗначения = ТипЧисло2_1;
		ТабличныйДокумент.Области.П000210007008.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000210009008.ТипЗначения = ТипЧисло2_1;
		ТабличныйДокумент.Области.П000210009008.Формат = "ЧН=-";
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		
		ТабличныйДокумент.Области.П000030002006.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030002006.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030003006.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030003006.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030004006.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030004006.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000030005206.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030005206.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030005306.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030005306.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000030006206.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030006206.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030006306.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030006306.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000030008006.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030008006.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030009006.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030009006.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030010006.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030010006.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000030011206.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030011206.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030011306.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030011306.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000030012206.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030012206.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030012306.ТипЗначения = ТипЧисло4;
		ТабличныйДокумент.Области.П000030012306.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000030005106.ТипЗначения = ТипЧисло2_1;
		ТабличныйДокумент.Области.П000030005106.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030006106.ТипЗначения = ТипЧисло2_1;
		ТабличныйДокумент.Области.П000030006106.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030011106.ТипЗначения = ТипЧисло2_1;
		ТабличныйДокумент.Области.П000030011106.Формат = "ЧН=-";
		ТабличныйДокумент.Области.П000030012106.ТипЗначения = ТипЧисло2_1;
		ТабличныйДокумент.Области.П000030012106.Формат = "ЧН=-";
		
	КонецЕсли;
	
	Если ПрименяетсяФормат300007(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		
		УстановитьРазмерностьНалоговойСтавки2015Кв4();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРазмерностьНалоговойСтавки2015Кв4()
	
	ТипЧисло3_1 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 1));
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000210002008.ТипЗначения = ТипЧисло3_1;
		ТабличныйДокумент.Области.П000210002008.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000210004008.ТипЗначения = ТипЧисло3_1;
		ТабличныйДокумент.Области.П000210004008.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000210007008.ТипЗначения = ТипЧисло3_1;
		ТабличныйДокумент.Области.П000210007008.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000210009008.ТипЗначения = ТипЧисло3_1;
		ТабличныйДокумент.Области.П000210009008.Формат = "ЧН=-";
						
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				
		ТабличныйДокумент.Области.П000030005106.ТипЗначения = ТипЧисло3_1;
		ТабличныйДокумент.Области.П000030005106.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000030006106.ТипЗначения = ТипЧисло3_1;
		ТабличныйДокумент.Области.П000030006106.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000030011106.ТипЗначения = ТипЧисло3_1;
		ТабличныйДокумент.Области.П000030011106.Формат = "ЧН=-";
		
		ТабличныйДокумент.Области.П000030012106.ТипЗначения = ТипЧисло3_1;
		ТабличныйДокумент.Области.П000030012106.Формат = "ЧН=-";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиИзМакета(РазделВМакете)
	
	МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет("Списки2007Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КБК2005" Тогда
					НовСтрока = мКБК2005.Добавить();
				ИначеЕсли РазделВМакете = "ТабачныеИзделияКодыТоваров" Тогда
					НовСтрока = мТабачныеИзделияКодыТоваров.Добавить();
				ИначеЕсли РазделВМакете = "ТабачныеИзделияЕдИзмерения" Тогда
					НовСтрока = мТабачныеИзделияЕдИзмерения.Добавить();
				ИначеЕсли РазделВМакете = "Только450и460" Тогда
					НовСтрока = мТолько450и460.Добавить();
				ИначеЕсли РазделВМакете = "Кроме450и460" Тогда
					НовСтрока = мКроме450и460.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение1";
	СтрокаУровня1.Представление            = "Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение2";
	СтрокаУровня1.Представление            = "Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение3";
	СтрокаУровня1.Представление            = "Прил. 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение4";
	СтрокаУровня1.Представление            = "Прил. 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение5";
	СтрокаУровня1.Представление            = "Прил. 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение6";
	СтрокаУровня1.Представление            = "Прил. 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
						
	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры

&НаСервере
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
		
	СтруктураМногостраничныхРазделов = Неопределено;
	Если НЕ БратьИзФормы Тогда
		ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Источник данных для формирования отчета не определен!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Истина);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргИНН = Орг.ИНН;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргДиректор = СокрЛП(ПоказателиТитульный.ОргДиректор);
	ОргУП = СокрЛП(ПоказателиТитульный.ОргУП);
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Орг);
	
	Если НЕ ЭтоПБОЮЛ Тогда
		Если ТекущаяДатаСеанса() >= '20080101' Тогда
			Если ПустаяСтрока(ОргДиректор) И ПустаяСтрока(ОргУП) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не задано наименование организации!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ОргИНН) Тогда
			СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ОргИНН, Истина) Тогда
			СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	Если ПоказателиТитульный.ПредставительФизЛицо = Истина И НЕ ПустаяСтрока(ОргУП) И РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
			СообщитьВТС("Фамилия, имя или отчество представителя содержат недопустимые символы!", "Титульный", "ОргУП");
			СтатусПроверки = 1;
	КонецЕсли;
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

&НаСервере
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	УпПред = ПоказателиТитульный.ОргУп;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ТелОрганизации, 20))); 
	ПризнВидаДок = Число(ПоказателиТитульный.ВидДок);
	НомКорректировки = ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект));
	ПризнОтчетногоПериода = 1; // представляется ежемесячно
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	ДокПредставляется = 210; // 
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 120;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредставляется = 331;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Орг) Тогда
		// Блок <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Если ДокПредставляется = 220 ИЛИ ДокПредставляется = 331 Тогда
			Текст.ДобавитьСтроку("КППЮЛ:" + СокрЛП(Орг.ГоловнаяОрганизация.КПП));
			Текст.ДобавитьСтроку("КППОП:" + ОргКПП);
		Иначе
			Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
		КонецЕсли;
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
		// Блок <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("УпПред:" + ВРЕГ(СокрЛП(?(ПоказателиТитульный.ПредставительФизЛицо = Истина, РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред), УпПред)))); 		
		Если НЕ ПустаяСтрока(УпПред) Тогда
			Текст.ДобавитьСтроку("ДокУпПред:" + ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ДокументПредставителя, 120))));
		КонецЕсли;
		Текст.ДобавитьСтроку("###");
	Иначе
		// Блок <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("УпПред:" + ВРЕГ(СокрЛП(?(ПоказателиТитульный.ПредставительФизЛицо = Истина, РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред), УпПред)))); 
		Если НЕ ПустаяСтрока(УпПред) Тогда
			Текст.ДобавитьСтроку("ДокУпПред:" + ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ДокументПредставителя, 120))));
		КонецЕсли;
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	// Блок <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	Текст.ДобавитьСтроку("ПризФОтч:1");
	Текст.ДобавитьСтроку("КНД:" + СтруктураРеквизитовФормы.мКодОтчета);
	
	НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО АКЦИЗАМ НА ТАБАЧНЫЕ ИЗДЕЛИЯ";

	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки));
	
	Год_мДатаКонцаПериодаОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Если ПрименяетсяФормат300007(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		Текст.ДобавитьСтроку("ВерФОтч:3.00007");
		Текст.ДобавитьСтроку("ПериодВерОтч:01.10.2015,");
	ИначеЕсли ПрименяетсяФормат300006(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		Текст.ДобавитьСтроку("ВерФОтч:3.00006");
		Текст.ДобавитьСтроку("ПериодВерОтч:01.12.2013,30.09.2015");
	ИначеЕсли Год_мДатаКонцаПериодаОтчета < 2008 Тогда	
		Текст.ДобавитьСтроку("ВерФОтч:3.00002");
		Текст.ДобавитьСтроку("ПериодВерОтч:11.01.2007,01.01.2008");
	ИначеЕсли Год_мДатаКонцаПериодаОтчета < 2010 Тогда
		Текст.ДобавитьСтроку("ВерФОтч:3.00003");
		Текст.ДобавитьСтроку("ПериодВерОтч:01.01.2008,31.12.2009");
	ИначеЕсли Год_мДатаКонцаПериодаОтчета < 2013 Тогда
		Текст.ДобавитьСтроку("ВерФОтч:3.00004");
		Текст.ДобавитьСтроку("ПериодВерОтч:01.01.2010,31.12.2012");
	Иначе
		Текст.ДобавитьСтроку("ВерФОтч:3.00005");
		Текст.ДобавитьСтроку("ПериодВерОтч:01.01.2013,30.11.2013");
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ПризВидДок:" + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:" + НомКорректировки);
	Конецесли;
	Текст.ДобавитьСтроку("ПризПериодОтч:" + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	Текст.ДобавитьСтроку("ГодПериодОтч:" + Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:" + ДокПредставляется);
	Текст.ДобавитьСтроку("ОКЕИ:383");
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

&НаСервере
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	// Конвертация данных при переходе с 2.0 на 3.0.
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаРаздел1"];
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если ИмяПоказателя = "КБК1_1" Тогда
			ПоказателиТаблПоле.Вставить("КБК1", "");
			Для Ном = 1 По 20 Цикл
				ПоказателиТаблПоле.КБК1 = ПоказателиТаблПоле.КБК1 + СокрЛП(ПоказателиТаблПоле["КБК1_" + Ном]);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодОКАТО1_1" Тогда
			ПоказателиТаблПоле.Вставить("КодОКАТО1", "");
			Для Ном = 1 По 11 Цикл
				ПоказателиТаблПоле.КодОКАТО1
					= ПоказателиТаблПоле.КодОКАТО1 + СокрЛП(ПоказателиТаблПоле["КодОКАТО1_" + Ном]);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭДРаздел1_1" Тогда
			ПоказателиТаблПоле.Вставить("ОКВЭДРаздел1", "");
			Для Ном = 1 По 8 Цикл
				ПоказателиТаблПоле.ОКВЭДРаздел1
					= ПоказателиТаблПоле.ОКВЭДРаздел1 + СокрЛП(ПоказателиТаблПоле["ОКВЭДРаздел1_" + Ном]);
			КонецЦикла;
			Пока Прав(ПоказателиТаблПоле.ОКВЭДРаздел1, 1) = "." Цикл
				ПоказателиТаблПоле.ОКВЭДРаздел1 = Сред(
					ПоказателиТаблПоле.ОКВЭДРаздел1, 1, СтрДлина(ПоказателиТаблПоле.ОКВЭДРаздел1) - 1);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаНалога25Число1_1" Тогда
			ПоказателиТаблПоле.Вставить("СуммаНалога25Число1", "");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.СуммаНалога25Число1
					= ПоказателиТаблПоле.СуммаНалога25Число1 + СокрЛП(ПоказателиТаблПоле["СуммаНалога25Число1_" + Ном]);
			КонецЦикла;
			Если ЗначениеЗаполнено(ПоказателиТаблПоле.СуммаНалога25Число1) Тогда
				ПоказателиТаблПоле.СуммаНалога25Число1 = Число(ПоказателиТаблПоле.СуммаНалога25Число1);
			Иначе
				ПоказателиТаблПоле.СуммаНалога25Число1 = 0;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "СуммаНалога15Число1_1" Тогда
			ПоказателиТаблПоле.Вставить("СуммаНалога15Число1", "");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.СуммаНалога15Число1
					= ПоказателиТаблПоле.СуммаНалога15Число1 + СокрЛП(ПоказателиТаблПоле["СуммаНалога15Число1_" + Ном]);
			КонецЦикла;
			Если ЗначениеЗаполнено(ПоказателиТаблПоле.СуммаНалога15Число1) Тогда
				ПоказателиТаблПоле.СуммаНалога15Число1 = Число(ПоказателиТаблПоле.СуммаНалога15Число1);
			Иначе
				ПоказателиТаблПоле.СуммаНалога15Число1 = 0;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "СуммаНалогаКУменьшению1_1" Тогда
			ПоказателиТаблПоле.Вставить("СуммаНалогаКУменьшению1", "");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.СуммаНалогаКУменьшению1
					= ПоказателиТаблПоле.СуммаНалогаКУменьшению1 + СокрЛП(ПоказателиТаблПоле["СуммаНалогаКУменьшению1_" + Ном]);
			КонецЦикла;
			Если ЗначениеЗаполнено(ПоказателиТаблПоле.СуммаНалогаКУменьшению1) Тогда
				ПоказателиТаблПоле.СуммаНалогаКУменьшению1 = Число(ПоказателиТаблПоле.СуммаНалогаКУменьшению1);
			Иначе
				ПоказателиТаблПоле.СуммаНалогаКУменьшению1 = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	Показатели = РеквизитФормыВЗначение("мТаблицаСоставПоказателей", Тип("ТаблицаЗначений")).Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=";
	
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
 		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		Если ПустойРаздел И СтруктураРеквизитовФормы.ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Призн = "#" Тогда //раздел многостранично-многострочный

			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
								Если ИндексЗнакаВИмениЯчейки > 0 Тогда
									ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
								КонецЕсли;
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							СтрокаПустая = 1;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
								Если ИндексЗнакаВИмениЯчейки > 0 Тогда
									ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
								КонецЕсли;
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
								Если ИндексЗнакаВИмениЯчейки > 0 Тогда
									ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
								КонецЕсли;
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");
					КонецЕсли;//многострочный или обычный подраздел
				КонецЦикла;//по подразделам
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный

			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
				КонецЦикла;
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				КонецЦикла;
				Текст.ДобавитьСтроку("###");
			КонецЦикла;
			//конец выгрузки многостраничного раздела
		ИначеЕсли Призн = "/" Тогда //раздел многострочный

			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				// в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда // многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла = Ложь;
					
					Пока Истина Цикл
						СтрокаПустая = 1;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
							Если ИндексЗнакаВИмениЯчейки > 0 Тогда
								ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
							КонецЕсли;
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
												
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
							Если ИндексЗнакаВИмениЯчейки > 0 Тогда
								ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
							КонецЕсли;
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
					КонецЦикла;
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					КонецЦикла;
					Текст.ДобавитьСтроку("###");
				КонецЕсли;
			Конеццикла;
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	СтраницаПустая = 1;

	Если Призн = "#" Тогда //раздел многостранично-многострочный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		НомСтр = 0;
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
			НомСтр = НомСтр + 1;
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла = Ложь;
					
					Пока Истина Цикл
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
							
						ном = ном + 1;
					КонецЦикла;
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
					КонецЦикла;
				КонецЕсли;//многострочный или обычный подраздел
			Конеццикла;//по подразделам
		КонецЦикла;//по страницам
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
			НомСтр = НомСтр + 1;
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				ВыходИзДвойногоЦикла = Ложь;
				
				Пока Истина Цикл
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
							
							ВыходИзДвойногоЦикла = Истина;
							Прервать;
							
						КонецЕсли;
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
					КонецЦикла;
					
					Если ВыходИзДвойногоЦикла Тогда
						Прервать;
					КонецЕсли;
									
					ном = ном + 1;
				КонецЦикла;
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
				КонецЦикла;
			КонецЕсли;
		Конеццикла;
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

&НаСервере
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	ИмяРазделаПред = "";
	СтатусПроверки = 0;
	ПредставлениеОтчета = "";
	Если БратьИзФормы Тогда
	Иначе
		ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если ДанныеОтчета = Неопределено Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!'");

			Сообщение.Сообщить();

			Возврат Ложь;
			
		КонецЕсли;
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
				
		Для Каждого ЭлементСтруктуры Из ДанныеОтчета.ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
						
		КонецЦикла;
				
		мСтруктураВариантыЗаполнения.Очистить();
		
		Для Каждого ЭлементСтруктуры Из ДанныеОтчета.ДанныеВариантовАвтоЗаполнения Цикл
			
			МассивТаблЗнач = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ];
			МассивТаблЗнач.Очистить();
			
			мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
			
			Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
				
				ТаблВарЗаполнения = МассивТаблЗнач.Добавить();
				
				ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения.ТаблицаВариантовЗаполнения);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПредставлениеОтчета = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок) + ". ";
	КонецЕсли;
	
	Показатели = РеквизитФормыВЗначение("мТаблицаСоставПоказателей", Тип("ТаблицаЗначений")).Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный

			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла = Ложь;
					
					Пока Истина Цикл
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
												
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
												
						ном = ном + 1;
					КонецЦикла;
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ИнициализацияСоставаПоказателей();
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах() И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");

		Сообщение.Сообщить();

		Возврат;
		
	КонецЕсли;
	
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьДанные()
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		
		Если (Тек13Симв = "П000210010009" ИЛИ Тек13Симв = "П000220019008") И Лев(Текст.ПолучитьСтроку(ТекИнд + 1), 3) <> "###" Тогда
			Текст.ВставитьСтроку(ТекИнд + 1, "###");
		КонецЕсли;
		
		Если Тек13Симв = "П000510001000" ИЛИ Тек13Симв = "П000510003000"
			ИЛИ Тек13Симв = "П000520001000" ИЛИ Тек13Симв = "П000520003002"
			ИЛИ Тек13Симв = "П000530001000" ИЛИ Тек13Симв = "П000530003002"
			ИЛИ Тек13Симв = "П000550001000" ИЛИ Тек13Симв = "П000550003002"
			ИЛИ Тек13Симв = "П000560001000"	ИЛИ Тек13Симв = "П000560003002" Тогда
			
			Текст.ЗаменитьСтроку(ТекИнд, СокрЛП(Лев(ТекСтрока, 13 + 1 + 120)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПустойРаздел21 = "
	|П000210001004:460
	|П000210001009:
	|П000210002005:
	|П000210002006:
	|П000210002007:
	|П000210002008:
	|П000210002009:
	|П000210003005:
	|П000210003007:
	|П000210003009:
	|П000210004005:
	|П000210004006:
	|П000210004007:
	|П000210004008:
	|П000210004009:
	|П000210005005:
	|П000210005007:
	|П000210005009:
	|П000210006004:450
	|П000210006009:
	|П000210007005:
	|П000210007006:
	|П000210007007:
	|П000210007008:
	|П000210007009:
	|П000210008005:
	|П000210008007:
	|П000210008009:
	|П000210009005:
	|П000210009006:
	|П000210009007:
	|П000210009008:
	|П000210009009:
	|П000210010005:
	|П000210010007:
	|П000210010009:
	|###";
	
	ПустойРаздел22 = "
	|П000220011004:411
	|П000220011006:
	|П000220011007:
	|П000220011008:
	|П000220012006:
	|П000220012007:
	|П000220012008:
	|П000220013006:
	|П000220013007:
	|П000220013008:
	|П000220014004:430
	|П000220014006:
	|П000220014007:
	|П000220014008:
	|П000220015006:
	|П000220015007:
	|П000220015008:
	|П000220016006:
	|П000220016007:
	|П000220016008:
	|П000220017004:440
	|П000220017006:
	|П000220017007:
	|П000220017008:
	|П000220018006:
	|П000220018007:
	|П000220018008:
	|П000220019006:
	|П000220019007:
	|П000220019008:
	|###";
	
	ТекстВыгрузки = Текст.ПолучитьТекст();
	ДлинаДоЗамены = СтрДлина(ТекстВыгрузки);
	ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки, ПустойРаздел22, "");
	Если ДлинаДоЗамены = СтрДлина(ТекстВыгрузки) Тогда
		ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки, ПустойРаздел21, "");
	КонецЕсли;
	Текст.УстановитьТекст(ТекстВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
			
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , СтруктураРеквизитовФормы.мСохраненныйДок.КПП, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала, СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;
	
	РегламентированнаяОтчетность.СтандартнаяПостобработкаТекстаВыгрузки(Текст);

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ИнициализацияСоставаПоказателей()

	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));

	мТаблицаСоставПоказателей.Очистить();

	МакетСоставаПоказателей = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет("СоставПоказателей2007Кв1");
	ОписаниеТиповСтрока15   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока100  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1     = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	ОписаниеТиповЧисло15    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;
		КонецЦикла;
	КонецЦикла;
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение2"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение3"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение5"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение6" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомКоррект.Значение = "0";
		ТабличныйДокумент.Области.ВидДок.Значение = "1";
		СтруктураРеквизитовФормы.ВидДокумента = 0;
	Иначе 
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)

	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	Для Инд = 1 По 4 Цикл
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + СтруктураРеквизитовФормы["мИдГруппы" + Инд] + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", Знач ОбластьИмя = "") Экспорт
	// Пересчет вызывается в случаях:
	// 1. Изменения в желтых ячейках разделов.
	// 2. Дорасчет после сбора данных.
	// 3. Очистка  данных

	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или Форма.СтруктураРеквизитовФормы.мРежимПечати Или Форма.СтруктураРеквизитовФормы.мИсключитьЗапускРасчета Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;
	
	НомерПоз = СтрНайти(ОбластьИмя, "_");
	Если НомерПоз > 0 Тогда
		ОбластьИмя = Лев(ОбластьИмя, НомерПоз - 1);
	КонецЕсли;
		
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		// Получаем сумму акциза и сумму вычета.
		СуммаАкциза = ?(Форма.СтруктураДанныхРаздел2.Свойство("П000230022008"), РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000230022008), 0);
		СуммаВычета = ?(Форма.СтруктураДанныхРаздел2.Свойство("П000230023008"), РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000230023008), 0);
		
		// начиная с декабря 2009 и далее оплата производится до 25 числа (ячейка 040 равна 0 и не рассчитывается)		
		Если (Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2009 И Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12) ИЛИ 
			Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 2009 Тогда
			
			П000010003000 = СуммаАкциза;
			Форма.СтруктураДанныхРаздел1.Вставить("СуммаНалога15Число1", 0);
		                                			
		Иначе 			  
			
			П000010003000 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, СуммаАкциза / 2);  
			П000010004000 = СуммаАкциза - П000010003000;    
				  
		КонецЕсли;
		 
		П000010005000 = СуммаВычета;

		Форма.СтруктураДанныхРаздел1.Вставить("СуммаНалога25Число1",     П000010003000);
		Форма.СтруктураДанныхРаздел1.Вставить("СуммаНалога15Число1",     П000010004000);
		Форма.СтруктураДанныхРаздел1.Вставить("СуммаНалогаКУменьшению1", П000010005000);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницыПанели Тогда
			
			Форма.ТабличныйДокумент.Области.СуммаНалога25Число1.Значение     = Форма.СтруктураДанныхРаздел1.СуммаНалога25Число1;
			Форма.ТабличныйДокумент.Области.СуммаНалога15Число1.Значение     = Форма.СтруктураДанныхРаздел1.СуммаНалога15Число1;
			Форма.ТабличныйДокумент.Области.СуммаНалогаКУменьшению1.Значение = Форма.СтруктураДанныхРаздел1.СуммаНалогаКУменьшению1;
				
		КонецЕсли;
		        		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницыПанели Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220011006, ОбластьИмя) > 0 Тогда
				// Строка 110, графа 6 и 7.
				Форма.ТабличныйДокумент.Области.П000220011006.Значение = Форма.ТабличныйДокумент.Области.П000220012006.Значение + Форма.ТабличныйДокумент.Области.П000220013006.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220014006, ОбластьИмя) > 0 Тогда
				// Строка 140, графа 6 и 7.
				Форма.ТабличныйДокумент.Области.П000220014006.Значение = Форма.ТабличныйДокумент.Области.П000220015006.Значение + Форма.ТабличныйДокумент.Области.П000220016006.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220017006, ОбластьИмя) > 0 Тогда
				// Строка 170, графа 6 и 7.
				Форма.ТабличныйДокумент.Области.П000220017006.Значение = Форма.ТабличныйДокумент.Области.П000220018006.Значение + Форма.ТабличныйДокумент.Области.П000220019006.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220011008, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000220011008.Значение = Форма.ТабличныйДокумент.Области.П000220011006.Значение * Форма.ТабличныйДокумент.Области.П000220011007.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220012008, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000220012008.Значение = Форма.ТабличныйДокумент.Области.П000220012006.Значение * Форма.ТабличныйДокумент.Области.П000220012007.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220013008, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000220013008.Значение = Форма.ТабличныйДокумент.Области.П000220013006.Значение * Форма.ТабличныйДокумент.Области.П000220013007.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220014008, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000220014008.Значение = Форма.ТабличныйДокумент.Области.П000220014006.Значение * Форма.ТабличныйДокумент.Области.П000220014007.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220015008, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000220015008.Значение = Форма.ТабличныйДокумент.Области.П000220015006.Значение * Форма.ТабличныйДокумент.Области.П000220015007.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220016008, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000220016008.Значение = Форма.ТабличныйДокумент.Области.П000220016006.Значение * Форма.ТабличныйДокумент.Области.П000220016007.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220017008, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000220017008.Значение = Форма.ТабличныйДокумент.Области.П000220017006.Значение * Форма.ТабличныйДокумент.Области.П000220017007.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220018008, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000220018008.Значение = Форма.ТабличныйДокумент.Области.П000220018006.Значение * Форма.ТабличныйДокумент.Области.П000220018007.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220019008, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000220019008.Значение = Форма.ТабличныйДокумент.Области.П000220019006.Значение * Форма.ТабличныйДокумент.Области.П000220019007.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210001009, ОбластьИмя) > 0 Тогда
				// Строка 010, графа 9.
				Форма.ТабличныйДокумент.Области.П000210001009.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000210002009.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000210003009.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000210004009.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000210005009.Значение);
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210006009, ОбластьИмя) > 0 Тогда
				// Строка 060, графа 9.
				Форма.ТабличныйДокумент.Области.П000210006009.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000210007009.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000210008009.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000210009009.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000210010009.Значение);
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230020008, ОбластьИмя) > 0 Тогда
				
				// Строка 200, графа 8.
				Форма.ТабличныйДокумент.Области.П000230020008.Значение = Форма.ТабличныйДокумент.Области.П000210001009.Значение
				+ Форма.ТабличныйДокумент.Области.П000210006009.Значение
				+ Форма.ТабличныйДокумент.Области.П000220011008.Значение
				+ Форма.ТабличныйДокумент.Области.П000220014008.Значение
				+ Форма.ТабличныйДокумент.Области.П000220017008.Значение
				+ ?(Форма.СтруктураДанныхРаздел3.Свойство("П000030013007"), Форма.СтруктураДанныхРаздел3.П000030013007, 0); // гр.7, стр. 130, раздела 3.
					
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230022008, ОбластьИмя) > 0 Тогда
				
				Форма.ТабличныйДокумент.Области.П000230022008.Значение = Макс(Форма.ТабличныйДокумент.Области.П000230020008.Значение - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000230021008.Значение), 0);
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000230022008", Форма.ТабличныйДокумент.Области.П000230022008.Значение);
				
				Расчет(Форма, "Раздел1", ОбластьИмя);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230023008, ОбластьИмя) > 0 Тогда
				
				Форма.ТабличныйДокумент.Области.П000230023008.Значение = Макс(Форма.ТабличныйДокумент.Области.П000230021008.Значение - Форма.ТабличныйДокумент.Области.П000230020008.Значение, 0);
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000230023008", Форма.ТабличныйДокумент.Области.П000230023008.Значение);
				
				Расчет(Форма, "Раздел1", ОбластьИмя);
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220011006, ОбластьИмя) > 0
			  	  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220012006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220013006")) Тогда
				// Строка 110, графа 6 и 7.
				Форма.СтруктураДанныхРаздел2.Вставить("П000220011006", Форма.СтруктураДанныхРаздел2.П000220012006 + Форма.СтруктураДанныхРаздел2.П000220013006);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220014006, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220015006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220016006")) Тогда
				// Строка 140, графа 6 и 7.
				Форма.СтруктураДанныхРаздел2.Вставить("П000220014006", Форма.СтруктураДанныхРаздел2.П000220015006 + Форма.СтруктураДанныхРаздел2.П000220016006);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220017006, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220018006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220019006")) Тогда
				// Строка 170, графа 6 и 7.
				Форма.СтруктураДанныхРаздел2.Вставить("П000220017006", Форма.СтруктураДанныхРаздел2.П000220018006 + Форма.СтруктураДанныхРаздел2.П000220019006);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220011008, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220011006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220011007")) Тогда
				Форма.СтруктураДанныхРаздел2.Вставить("П000220011008", Форма.СтруктураДанныхРаздел2.П000220011006 * Форма.СтруктураДанныхРаздел2.П000220011007);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220012008, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220012006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220012007")) Тогда
				Форма.СтруктураДанныхРаздел2.Вставить("П000220012008", Форма.СтруктураДанныхРаздел2.П000220012006 * Форма.СтруктураДанныхРаздел2.П000220012007);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220013008, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220013006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220013007")) Тогда
				Форма.СтруктураДанныхРаздел2.Вставить("П000220013008", Форма.СтруктураДанныхРаздел2.П000220013006 * Форма.СтруктураДанныхРаздел2.П000220013007);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220014008, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220014006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220014007")) Тогда
				Форма.СтруктураДанныхРаздел2.Вставить("П000220014008", Форма.СтруктураДанныхРаздел2.П000220014006 * Форма.СтруктураДанныхРаздел2.П000220014007);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220015008, ОбластьИмя) > 0 
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220015006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220015007")) Тогда
				Форма.СтруктураДанныхРаздел2.Вставить("П000220015008", Форма.СтруктураДанныхРаздел2.П000220015006 * Форма.СтруктураДанныхРаздел2.П000220015007);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220016008, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220016006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220016007")) Тогда
				Форма.СтруктураДанныхРаздел2.Вставить("П000220016008", Форма.СтруктураДанныхРаздел2.П000220016006 * Форма.СтруктураДанныхРаздел2.П000220016007);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220017008, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220017006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220017007")) Тогда
				Форма.СтруктураДанныхРаздел2.Вставить("П000220017008", Форма.СтруктураДанныхРаздел2.П000220017006 * Форма.СтруктураДанныхРаздел2.П000220017007);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220018008, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220018006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220018007")) Тогда
				Форма.СтруктураДанныхРаздел2.Вставить("П000220018008", Форма.СтруктураДанныхРаздел2.П000220018006 * Форма.СтруктураДанныхРаздел2.П000220018007);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000220019008, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000220019006") И Форма.СтруктураДанныхРаздел2.Свойство("П000220019007")) Тогда
				Форма.СтруктураДанныхРаздел2.Вставить("П000220019008", Форма.СтруктураДанныхРаздел2.П000220019006 * Форма.СтруктураДанныхРаздел2.П000220019007);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210001009, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000210002009") И Форма.СтруктураДанныхРаздел2.Свойство("П000210003009") И Форма.СтруктураДанныхРаздел2.Свойство("П000210004009") И Форма.СтруктураДанныхРаздел2.Свойство("П000210005009")) Тогда
				// Строка 010, графа 9.
				Форма.СтруктураДанныхРаздел2.Вставить("П000210001009", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000210002009)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000210003009)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000210004009)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000210005009));
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210006009, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел2.Свойство("П000210007009") И Форма.СтруктураДанныхРаздел2.Свойство("П000210008009") И Форма.СтруктураДанныхРаздел2.Свойство("П000210009009") И Форма.СтруктураДанныхРаздел2.Свойство("П000210010009")) Тогда
				// Строка 060, графа 9.
				Форма.СтруктураДанныхРаздел2.Вставить("П000210006009", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000210007009)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000210008009)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000210009009)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел2.П000210010009));
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230020008, ОбластьИмя) > 0
				  И Форма.СтруктураДанныхРаздел3.Свойство("П000030013007") Тогда
									
				Форма.СтруктураДанныхРаздел2.Вставить("П000230020008", 
				?(Форма.СтруктураДанныхРаздел2.Свойство("П000210001009"), Форма.СтруктураДанныхРаздел2.П000210001009, 0)
				+ ?(Форма.СтруктураДанныхРаздел2.Свойство("П000210006009"), Форма.СтруктураДанныхРаздел2.П000210006009, 0)
				+ ?(Форма.СтруктураДанныхРаздел2.Свойство("П000220011008"), Форма.СтруктураДанныхРаздел2.П000220011008, 0)
				+ ?(Форма.СтруктураДанныхРаздел2.Свойство("П000220014008"), Форма.СтруктураДанныхРаздел2.П000220014008, 0)
				+ ?(Форма.СтруктураДанныхРаздел2.Свойство("П000220017008"), Форма.СтруктураДанныхРаздел2.П000220017008, 0)
				+ Форма.СтруктураДанныхРаздел3.П000030013007);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230022008, ОбластьИмя) > 0 Тогда
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000230022008", Макс(?(Форма.СтруктураДанныхРаздел2.Свойство("П000230020008"), Форма.СтруктураДанныхРаздел2.П000230020008, 0) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Форма.СтруктураДанныхРаздел2.Свойство("П000230021008"), Форма.СтруктураДанныхРаздел2.П000230021008, 0)), 0));
				
				Расчет(Форма, "Раздел1", ОбластьИмя);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230023008, ОбластьИмя) > 0 Тогда
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000230023008", Макс(?(Форма.СтруктураДанныхРаздел2.Свойство("П000230021008"), Форма.СтруктураДанныхРаздел2.П000230021008, 0) - ?(Форма.СтруктураДанныхРаздел2.Свойство("П000230020008"), Форма.СтруктураДанныхРаздел2.П000230020008, 0), 0));
								
				Расчет(Форма, "Раздел1", ОбластьИмя);
				
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницыПанели Тогда
			
			// Графа 7
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030002007, ОбластьИмя) > 0 Тогда
				
				// Строка 020.
				Форма.ТабличныйДокумент.Области.П000030002007.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030002005.Значение
				* Форма.ТабличныйДокумент.Области.П000030002006.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030003007, ОбластьИмя) > 0 Тогда																
				
				// Строка 030.
				Форма.ТабличныйДокумент.Области.П000030003007.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030003005.Значение
				* Форма.ТабличныйДокумент.Области.П000030003006.Значение);
				
			КонецЕсли;																																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030004007, ОбластьИмя) > 0 Тогда																
				
				// Строка 040.
				Форма.ТабличныйДокумент.Области.П000030004007.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030004005.Значение
				* Форма.ТабличныйДокумент.Области.П000030004006.Значение);
				
			КонецЕсли;																																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030005107, ОбластьИмя) > 0 Тогда																
				
				// Строка 051.
				Форма.ТабличныйДокумент.Области.П000030005107.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030005105.Значение
				* Форма.ТабличныйДокумент.Области.П000030005106.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030005207, ОбластьИмя) > 0 Тогда																
				
				// Строка 052.
				Форма.ТабличныйДокумент.Области.П000030005207.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030005205.Значение
				* Форма.ТабличныйДокумент.Области.П000030005206.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030005307, ОбластьИмя) > 0 Тогда																
				
				// Строка 053.
				Форма.ТабличныйДокумент.Области.П000030005307.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030005305.Значение
				* Форма.ТабличныйДокумент.Области.П000030005306.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030005007, ОбластьИмя) > 0 Тогда																
				
				// Строка 050.
				Форма.ТабличныйДокумент.Области.П000030005007.Значение = Форма.ТабличныйДокумент.Области.П000030005107.Значение
				+ Форма.ТабличныйДокумент.Области.П000030005207.Значение
				+ Форма.ТабличныйДокумент.Области.П000030005307.Значение;
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006107, ОбластьИмя) > 0 Тогда										
				
				// Строка 061.
				Форма.ТабличныйДокумент.Области.П000030006107.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030006105.Значение
				* Форма.ТабличныйДокумент.Области.П000030006106.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006207, ОбластьИмя) > 0 Тогда																
				
				// Строка 062.
				Форма.ТабличныйДокумент.Области.П000030006207.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030006205.Значение
				* Форма.ТабличныйДокумент.Области.П000030006206.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006307, ОбластьИмя) > 0 Тогда																
				
				// Строка 063.
				Форма.ТабличныйДокумент.Области.П000030006307.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030006305.Значение
				* Форма.ТабличныйДокумент.Области.П000030006306.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006007, ОбластьИмя) > 0 Тогда																
				
				// Строка 060.
				Форма.ТабличныйДокумент.Области.П000030006007.Значение = Форма.ТабличныйДокумент.Области.П000030006107.Значение
				+ Форма.ТабличныйДокумент.Области.П000030006207.Значение
				+ Форма.ТабличныйДокумент.Области.П000030006307.Значение;
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030008007, ОбластьИмя) > 0 Тогда										
				
				// Строка 080.
				Форма.ТабличныйДокумент.Области.П000030008007.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030008005.Значение
				* Форма.ТабличныйДокумент.Области.П000030008006.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030009007, ОбластьИмя) > 0 Тогда																
				
				// Строка 090.
				Форма.ТабличныйДокумент.Области.П000030009007.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030009005.Значение
				* Форма.ТабличныйДокумент.Области.П000030009006.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030010007, ОбластьИмя) > 0 Тогда																
				
				// Строка 100.
				Форма.ТабличныйДокумент.Области.П000030010007.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030010005.Значение
				* Форма.ТабличныйДокумент.Области.П000030010006.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030011107, ОбластьИмя) > 0 Тогда																
				
				// Строка 111.
				Форма.ТабличныйДокумент.Области.П000030011107.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030011105.Значение
				* Форма.ТабличныйДокумент.Области.П000030011106.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030011207, ОбластьИмя) > 0 Тогда																
				
				// Строка 112.
				Форма.ТабличныйДокумент.Области.П000030011207.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030011205.Значение
				* Форма.ТабличныйДокумент.Области.П000030011206.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030011307, ОбластьИмя) > 0 Тогда																
				
				// Строка 113.
				Форма.ТабличныйДокумент.Области.П000030011307.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030011305.Значение
				* Форма.ТабличныйДокумент.Области.П000030011306.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030011007, ОбластьИмя) > 0 Тогда																
				
				// Строка 110.
				Форма.ТабличныйДокумент.Области.П000030011007.Значение = Форма.ТабличныйДокумент.Области.П000030011107.Значение
				+ Форма.ТабличныйДокумент.Области.П000030011207.Значение
				+ Форма.ТабличныйДокумент.Области.П000030011307.Значение;
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030012107, ОбластьИмя) > 0 Тогда										
				
				// Строка 121.
				Форма.ТабличныйДокумент.Области.П000030012107.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030012105.Значение
				* Форма.ТабличныйДокумент.Области.П000030012106.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030012207, ОбластьИмя) > 0 Тогда																
				
				// Строка 122.
				Форма.ТабличныйДокумент.Области.П000030012207.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030012205.Значение
				* Форма.ТабличныйДокумент.Области.П000030012206.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030012307, ОбластьИмя) > 0 Тогда																
				
				// Строка 123.
				Форма.ТабличныйДокумент.Области.П000030012307.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000030012305.Значение
				* Форма.ТабличныйДокумент.Области.П000030012306.Значение);
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030012007, ОбластьИмя) > 0 Тогда																
				
				// Строка 120.
				Форма.ТабличныйДокумент.Области.П000030012007.Значение = Форма.ТабличныйДокумент.Области.П000030012107.Значение
				+ Форма.ТабличныйДокумент.Области.П000030012207.Значение
				+ Форма.ТабличныйДокумент.Области.П000030012307.Значение;
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030007007, ОбластьИмя) > 0 Тогда										
				
				// Строка 070.
				Форма.ТабличныйДокумент.Области.П000030007007.Значение = Форма.ТабличныйДокумент.Области.П000030008007.Значение
				+ Форма.ТабличныйДокумент.Области.П000030009007.Значение
				+ Форма.ТабличныйДокумент.Области.П000030010007.Значение
				+ Форма.ТабличныйДокумент.Области.П000030011007.Значение
				+ Форма.ТабличныйДокумент.Области.П000030012007.Значение;
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030001007, ОбластьИмя) > 0 Тогда										
				
				// Строка 010.
				Форма.ТабличныйДокумент.Области.П000030001007.Значение = Форма.ТабличныйДокумент.Области.П000030002007.Значение
				+ Форма.ТабличныйДокумент.Области.П000030003007.Значение
				+ Форма.ТабличныйДокумент.Области.П000030004007.Значение
				+ Форма.ТабличныйДокумент.Области.П000030005007.Значение
				+ Форма.ТабличныйДокумент.Области.П000030006007.Значение;
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030013007, ОбластьИмя) > 0
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230020008, ОбластьИмя) > 0 Тогда
				
				// Строка 130.
				Форма.ТабличныйДокумент.Области.П000030013007.Значение = Форма.ТабличныйДокумент.Области.П000030001007.Значение
				+ Форма.ТабличныйДокумент.Области.П000030007007.Значение;
				
				Форма.СтруктураДанныхРаздел3.Вставить("П000030013007", Форма.ТабличныйДокумент.Области.П000030013007.Значение);
				
				Расчет(Форма, "Раздел2", ОбластьИмя);
				
			КонецЕсли;										
			
		Иначе
			
			// Графа 7
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030002007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030002005") И Форма.СтруктураДанныхРаздел3.Свойство("П000030002006")) Тогда
				
				// Строка 020.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030002007", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030002005
				* Форма.СтруктураДанныхРаздел3.П000030002006));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030003007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030003005") И Форма.СтруктураДанныхРаздел3.Свойство("П000030003006")) Тогда																
				
				// Строка 030.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030003007", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030003005
				* Форма.СтруктураДанныхРаздел3.П000030003006));
				
			КонецЕсли;																																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030004007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030004005") И Форма.СтруктураДанныхРаздел3.Свойство("П000030004006")) Тогда																
				
				// Строка 040.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030004007", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030004005
				* Форма.СтруктураДанныхРаздел3.П000030004006));
				
			КонецЕсли;																																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030005107, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030005105") И Форма.СтруктураДанныхРаздел3.Свойство("П000030005106")) Тогда																
				
				// Строка 051.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030005107", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030005105
				* Форма.СтруктураДанныхРаздел3.П000030005106));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030005207, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030005205") И Форма.СтруктураДанныхРаздел3.Свойство("П000030005206")) Тогда																
				
				// Строка 052.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030005207", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030005205
				* Форма.СтруктураДанныхРаздел3.П000030005206));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030005307, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030005305") И Форма.СтруктураДанныхРаздел3.Свойство("П000030005306")) Тогда																
				
				// Строка 053.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030005307", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030005305
				* Форма.СтруктураДанныхРаздел3.П000030005306));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030005007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030005107") И Форма.СтруктураДанныхРаздел3.Свойство("П000030005207") И Форма.СтруктураДанныхРаздел3.Свойство("П000030005307")) Тогда																
				
				// Строка 050.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030005007", Форма.СтруктураДанныхРаздел3.П000030005107
				+ Форма.СтруктураДанныхРаздел3.П000030005207
				+ Форма.СтруктураДанныхРаздел3.П000030005307);
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006107, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030006105") И Форма.СтруктураДанныхРаздел3.Свойство("П000030006106")) Тогда										
				
				// Строка 061.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030006107", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030006105
				* Форма.СтруктураДанныхРаздел3.П000030006106));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006207, ОбластьИмя) > 0 
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030006205") И Форма.СтруктураДанныхРаздел3.Свойство("П000030006206")) Тогда																
				
				// Строка 062.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030006207", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030006205
				* Форма.СтруктураДанныхРаздел3.П000030006206));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006307, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030006305") И Форма.СтруктураДанныхРаздел3.Свойство("П000030006306")) Тогда																
				
				// Строка 063.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030006307", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030006305
				* Форма.СтруктураДанныхРаздел3.П000030006306));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030006007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030006107") И Форма.СтруктураДанныхРаздел3.Свойство("П000030006207") И Форма.СтруктураДанныхРаздел3.Свойство("П000030006307")) Тогда																
				
				// Строка 060.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030006007", Форма.СтруктураДанныхРаздел3.П000030006107
				+ Форма.СтруктураДанныхРаздел3.П000030006207
				+ Форма.СтруктураДанныхРаздел3.П000030006307);
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030008007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030008005") И Форма.СтруктураДанныхРаздел3.Свойство("П000030008006")) Тогда										
				
				// Строка 080.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030008007", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030008005
				* Форма.СтруктураДанныхРаздел3.П000030008006));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030009007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030009005") И Форма.СтруктураДанныхРаздел3.Свойство("П000030009006")) Тогда																
				
				// Строка 090.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030009007", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030009005
				* Форма.СтруктураДанныхРаздел3.П000030009006));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030010007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030010005") И Форма.СтруктураДанныхРаздел3.Свойство("П000030010006")) Тогда																
				
				// Строка 100.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030010007", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030010005
				* Форма.СтруктураДанныхРаздел3.П000030010006));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030011107, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030011105") И Форма.СтруктураДанныхРаздел3.Свойство("П000030011106")) Тогда																
				
				// Строка 111.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030011107", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030011105
				* Форма.СтруктураДанныхРаздел3.П000030011106));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030011207, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030011205") И Форма.СтруктураДанныхРаздел3.Свойство("П000030011206")) Тогда																
				
				// Строка 112.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030011207", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030011205
				* Форма.СтруктураДанныхРаздел3.П000030011206));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030011307, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030011305") И Форма.СтруктураДанныхРаздел3.Свойство("П000030011306")) Тогда																
				
				// Строка 113.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030011307", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030011305
				* Форма.СтруктураДанныхРаздел3.П000030011306));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030011007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030011107") И Форма.СтруктураДанныхРаздел3.Свойство("П000030011207") И Форма.СтруктураДанныхРаздел3.Свойство("П000030011307")) Тогда																
				
				// Строка 110.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030011007", Форма.СтруктураДанныхРаздел3.П000030011107
				+ Форма.СтруктураДанныхРаздел3.П000030011207
				+ Форма.СтруктураДанныхРаздел3.П000030011307);
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030012107, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030012105") И Форма.СтруктураДанныхРаздел3.Свойство("П000030012106")) Тогда										
				
				// Строка 121.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030012107", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030012105
				* Форма.СтруктураДанныхРаздел3.П000030012106));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030012207, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030012205") И Форма.СтруктураДанныхРаздел3.Свойство("П000030012206")) Тогда																
				
				// Строка 122.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030012207", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030012205
				* Форма.СтруктураДанныхРаздел3.П000030012206));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030012307, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030012305") И Форма.СтруктураДанныхРаздел3.Свойство("П000030012306")) Тогда																
				
				// Строка 123.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030012307", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.СтруктураДанныхРаздел3.П000030012305
				* Форма.СтруктураДанныхРаздел3.П000030012306));
				
			КонецЕсли;																
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030012007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030012107") И Форма.СтруктураДанныхРаздел3.Свойство("П000030012207") И Форма.СтруктураДанныхРаздел3.Свойство("П000030012307")) Тогда																
				
				// Строка 120.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030012007", Форма.СтруктураДанныхРаздел3.П000030012107
				+ Форма.СтруктураДанныхРаздел3.П000030012207
				+ Форма.СтруктураДанныхРаздел3.П000030012307);
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030007007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030008007") И Форма.СтруктураДанныхРаздел3.Свойство("П000030009007") И Форма.СтруктураДанныхРаздел3.Свойство("П000030010007") И Форма.СтруктураДанныхРаздел3.Свойство("П000030011007") И Форма.СтруктураДанныхРаздел3.Свойство("П000030012007")) Тогда										
				
				// Строка 070.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030007007", Форма.СтруктураДанныхРаздел3.П000030008007
				+ Форма.СтруктураДанныхРаздел3.П000030009007
				+ Форма.СтруктураДанныхРаздел3.П000030010007
				+ Форма.СтруктураДанныхРаздел3.П000030011007
				+ Форма.СтруктураДанныхРаздел3.П000030012007);
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030001007, ОбластьИмя) > 0
				  И (Форма.СтруктураДанныхРаздел3.Свойство("П000030002007") И Форма.СтруктураДанныхРаздел3.Свойство("П000030003007") И Форма.СтруктураДанныхРаздел3.Свойство("П000030004007") И Форма.СтруктураДанныхРаздел3.Свойство("П000030005007") И Форма.СтруктураДанныхРаздел3.Свойство("П000030006007")) Тогда										
				
				// Строка 010.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030001007", Форма.СтруктураДанныхРаздел3.П000030002007
				+ Форма.СтруктураДанныхРаздел3.П000030003007
				+ Форма.СтруктураДанныхРаздел3.П000030004007
				+ Форма.СтруктураДанныхРаздел3.П000030005007
				+ Форма.СтруктураДанныхРаздел3.П000030006007);
				
			КонецЕсли;										
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030013007, ОбластьИмя) > 0
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230020008, ОбластьИмя) > 0
				И (Форма.СтруктураДанныхРаздел3.Свойство("П000030001007") И Форма.СтруктураДанныхРаздел3.Свойство("П000030007007")) Тогда
				
				// Строка 130.
				Форма.СтруктураДанныхРаздел3.Вставить("П000030013007", Форма.СтруктураДанныхРаздел3.П000030001007
				+ Форма.СтруктураДанныхРаздел3.П000030007007);
				
				Расчет(Форма, "Раздел2", ОбластьИмя);
				
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000040011005, ОбластьИмя) > 0 Тогда
			
			// Строка 110.
			Форма.ТабличныйДокумент.Области.П000040011005.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040001005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040002005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040003005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040004005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040005005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040006005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040007005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040008005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040009005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040010005.Значение);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000040022005, ОбластьИмя) > 0 Тогда
			
			// Строка 220.
			Форма.ТабличныйДокумент.Области.П000040022005.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040012005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040013005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040014005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040015005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040016005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040017005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040018005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040019005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040020005.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области.П000040021005.Значение);
			
		КонецЕсли;										

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000510013005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000510013005.Значение = Форма.ТабличныйДокумент.Области.П000510005005.Значение
			+ Форма.ТабличныйДокумент.Области.П000510006005.Значение
			+ Форма.ТабличныйДокумент.Области.П000510007005.Значение
			+ Форма.ТабличныйДокумент.Области.П000510008005.Значение
			+ Форма.ТабличныйДокумент.Области.П000510009005.Значение
			+ Форма.ТабличныйДокумент.Области.П000510010005.Значение
			+ Форма.ТабличныйДокумент.Области.П000510011005.Значение
			+ Форма.ТабличныйДокумент.Области.П000510012005.Значение;
			
		КонецЕсли;													   

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		
		ТаблРаздела = Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы1];
		ТаблРазделаКоличество = Форма[ТаблРаздела].Количество();
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000520003007, ОбластьИмя) > 0
											  ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000520004007, ОбластьИмя) > 0 Тогда
			
			ОбщКолонка7 = 0;
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 7.
				Колонка7 = Окр(Форма.ТабличныйДокумент.Области["П000520003005_" + СтрИнд].Значение * Форма.ТабличныйДокумент.Области["П000520003006_" + СтрИнд].Значение / 1000, 3);
				Форма.ТабличныйДокумент.Области["П000520003007_" + СтрИнд].Значение = Колонка7;
				ОбщКолонка7 = ОбщКолонка7 + Колонка7;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000520004007.Значение = ОбщКолонка7;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000520003008, ОбластьИмя) > 0
											  ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000520004008, ОбластьИмя) > 0 Тогда
			
			ОбщКолонка8 = 0;
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 8.
				Колонка8 = Окр(Форма.ТабличныйДокумент.Области["П000520003004_" + СтрИнд].Значение * Форма.ТабличныйДокумент.Области["П000520003006_" + СтрИнд].Значение, 2);
				Форма.ТабличныйДокумент.Области["П000520003008_" + СтрИнд].Значение = Колонка8;
				ОбщКолонка8 = ОбщКолонка8 + Колонка8;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000520004008.Значение = ОбщКолонка8;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000520003011, ОбластьИмя) > 0 Тогда
			
			ОбщКолонка11 = 0;
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 11.
				Колонка11 = Форма.ТабличныйДокумент.Области["П000520003009_" + СтрИнд].Значение + Форма.ТабличныйДокумент.Области["П000520003010_" + СтрИнд].Значение;
				Форма.ТабличныйДокумент.Области["П000520003011_" + СтрИнд].Значение = Колонка11;
				ОбщКолонка11 = ОбщКолонка11 + Колонка11;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000520004013, ОбластьИмя) > 0 Тогда
											  
			ОбщКолонка13 = 0;

			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
			                                         
				ОбщКолонка13 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области["П000520003013_" + СтрИнд].Значение) + ОбщКолонка13;
				
			КонецЦикла;	
			
			Форма.ТабличныйДокумент.Области.П000520004013.Значение = ОбщКолонка13;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000520004014, ОбластьИмя) > 0 Тогда
			
			ОбщКолонка14 = 0;

			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
			                                         
				ОбщКолонка14 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области["П000520003014_" + СтрИнд].Значение) + ОбщКолонка14;
				
			КонецЦикла;	
			
			Форма.ТабличныйДокумент.Области.П000520004014.Значение = ОбщКолонка14;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000520004105, ОбластьИмя) > 0 Тогда
			
			// Строка 041, колонка 5.
			Форма.ТабличныйДокумент.Области.П000520004105.Значение = Форма.ТабличныйДокумент.Области.П000520005005.Значение
			+ Форма.ТабличныйДокумент.Области.П000520006005.Значение
			+ Форма.ТабличныйДокумент.Области.П000520007005.Значение
			+ Форма.ТабличныйДокумент.Области.П000520008005.Значение
			+ Форма.ТабличныйДокумент.Области.П000520009005.Значение
			+ Форма.ТабличныйДокумент.Области.П000520010005.Значение
			+ Форма.ТабличныйДокумент.Области.П000520011005.Значение
			+ Форма.ТабличныйДокумент.Области.П000520012005.Значение;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000520004106, ОбластьИмя) > 0 Тогда
			
			// Строка 041, колонка 6.
			Форма.ТабличныйДокумент.Области.П000520004106.Значение = Форма.ТабличныйДокумент.Области.П000520005006.Значение
			+ Форма.ТабличныйДокумент.Области.П000520006006.Значение
			+ Форма.ТабличныйДокумент.Области.П000520007006.Значение
			+ Форма.ТабличныйДокумент.Области.П000520008006.Значение
			+ Форма.ТабличныйДокумент.Области.П000520009006.Значение
			+ Форма.ТабличныйДокумент.Области.П000520010006.Значение
			+ Форма.ТабличныйДокумент.Области.П000520011006.Значение
			+ Форма.ТабличныйДокумент.Области.П000520012006.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда

		ТаблРаздела = Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы2];
		ТаблРазделаКоличество = Форма[ТаблРаздела].Количество();
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000530003007, ОбластьИмя) > 0
											  ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000530004007, ОбластьИмя) > 0 Тогда
			
			ОбщКолонка7 = 0;
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 7.
				Колонка7 = Окр(Форма.ТабличныйДокумент.Области["П000530003005_" + СтрИнд].Значение * Форма.ТабличныйДокумент.Области["П000530003006_" + СтрИнд].Значение / 1000, 3);
				Форма.ТабличныйДокумент.Области["П000530003007_" + СтрИнд].Значение = Колонка7;
				ОбщКолонка7 = ОбщКолонка7 + Колонка7;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000530004007.Значение = ОбщКолонка7;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000530003008, ОбластьИмя) > 0
											  ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000530004008, ОбластьИмя) > 0 Тогда
			
			ОбщКолонка8 = 0;
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 8.
				Колонка8 = Окр(Форма.ТабличныйДокумент.Области["П000530003004_" + СтрИнд].Значение * Форма.ТабличныйДокумент.Области["П000530003006_" + СтрИнд].Значение, 2);
				Форма.ТабличныйДокумент.Области["П000530003008_" + СтрИнд].Значение = Колонка8;
				ОбщКолонка8 = ОбщКолонка8 + Колонка8;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000530004008.Значение = ОбщКолонка8;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000530003011, ОбластьИмя) > 0 Тогда
			
			ОбщКолонка11 = 0;
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 11.
				Колонка11 = Форма.ТабличныйДокумент.Области["П000530003009_" + СтрИнд].Значение + Форма.ТабличныйДокумент.Области["П000530003010_" + СтрИнд].Значение;
				Форма.ТабличныйДокумент.Области["П000530003011_" + СтрИнд].Значение = Колонка11;
				ОбщКолонка11 = ОбщКолонка11 + Колонка11;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000530004013, ОбластьИмя) > 0 Тогда
			
			ОбщКолонка13 = 0;

			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
			                                         
				ОбщКолонка13 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области["П000530003013_" + СтрИнд].Значение) + ОбщКолонка13;
				
			КонецЦикла;	
			
			Форма.ТабличныйДокумент.Области.П000530004013.Значение = ОбщКолонка13;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000530004014, ОбластьИмя) > 0 Тогда
			
			ОбщКолонка14 = 0;

			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
			                                         
				ОбщКолонка14 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Форма.ТабличныйДокумент.Области["П000530003014_" + СтрИнд].Значение) + ОбщКолонка14;
				
			КонецЦикла;	
			
			Форма.ТабличныйДокумент.Области.П000530004014.Значение = ОбщКолонка14;
			
		КонецЕсли;
		        
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение4" Тогда

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000540001005, ОбластьИмя) > 0 Тогда
			
			// Строка 010.
			Форма.ТабличныйДокумент.Области.П000540001005.Значение = Форма.ТабличныйДокумент.Области.П000540001006.Значение
			+ Форма.ТабличныйДокумент.Области.П000540001007.Значение;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000540002005, ОбластьИмя) > 0 Тогда													   
			
			// Строка 020.
			Форма.ТабличныйДокумент.Области.П000540002005.Значение = Форма.ТабличныйДокумент.Области.П000540002006.Значение
			+ Форма.ТабличныйДокумент.Области.П000540002007.Значение;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000540003005, ОбластьИмя) > 0 Тогда													   
			
			// Строка 030.
			Форма.ТабличныйДокумент.Области.П000540003005.Значение = Форма.ТабличныйДокумент.Области.П000540003006.Значение
			+ Форма.ТабличныйДокумент.Области.П000540003007.Значение;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000540004005, ОбластьИмя) > 0 Тогда													   
			
			// Строка 040.
			Форма.ТабличныйДокумент.Области.П000540004005.Значение = Форма.ТабличныйДокумент.Области.П000540004006.Значение
			+ Форма.ТабличныйДокумент.Области.П000540004007.Значение;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000540005005, ОбластьИмя) > 0 Тогда													   
			
			// Строка 050.
			Форма.ТабличныйДокумент.Области.П000540005005.Значение = Форма.ТабличныйДокумент.Области.П000540005006.Значение
			+ Форма.ТабличныйДокумент.Области.П000540005007.Значение;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000540006005, ОбластьИмя) > 0 Тогда													   
			
			// Строка 060.
			Форма.ТабличныйДокумент.Области.П000540006005.Значение = Форма.ТабличныйДокумент.Области.П000540006006.Значение
			+ Форма.ТабличныйДокумент.Области.П000540006007.Значение;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000540007005, ОбластьИмя) > 0 Тогда													   
			
			// Строка 070.
			Форма.ТабличныйДокумент.Области.П000540007005.Значение = Форма.ТабличныйДокумент.Области.П000540007006.Значение
			+ Форма.ТабличныйДокумент.Области.П000540007007.Значение;
			
		КонецЕсли;													   

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда
			
		ТаблРаздела = Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы3];
		ТаблРазделаКоличество = Форма[ТаблРаздела].Количество();
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000550003007, ОбластьИмя) > 0 Тогда
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 7.
				Колонка7 = Окр(Форма.ТабличныйДокумент.Области["П000550003005_" + СтрИнд].Значение * Форма.ТабличныйДокумент.Области["П000550003006_" + СтрИнд].Значение / 1000, 3);
				Форма.ТабличныйДокумент.Области["П000550003007_" + СтрИнд].Значение = Колонка7;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000550003008, ОбластьИмя) > 0 Тогда
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 8.
				Колонка8 = Окр(Форма.ТабличныйДокумент.Области["П000550003004_" + СтрИнд].Значение * Форма.ТабличныйДокумент.Области["П000550003006_" + СтрИнд].Значение, 2);
				Форма.ТабличныйДокумент.Области["П000550003008_" + СтрИнд].Значение = Колонка8;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000550003011, ОбластьИмя) > 0 Тогда
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 11.
				Колонка11 = Форма.ТабличныйДокумент.Области["П000550003009_" + СтрИнд].Значение + Форма.ТабличныйДокумент.Области["П000550003010_" + СтрИнд].Значение;
				Форма.ТабличныйДокумент.Области["П000550003011_" + СтрИнд].Значение = Колонка11;
				
			КонецЦикла;
			
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение6" Тогда

		ТаблРаздела = Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4];
		ТаблРазделаКоличество = Форма[ТаблРаздела].Количество();
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000560003007, ОбластьИмя) > 0 Тогда
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 7.
				Колонка7 = Окр(Форма.ТабличныйДокумент.Области["П000560003005_" + СтрИнд].Значение * Форма.ТабличныйДокумент.Области["П000560003006_" + СтрИнд].Значение / 1000, 3);
				Форма.ТабличныйДокумент.Области["П000560003007_" + СтрИнд].Значение = Колонка7;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000560003008, ОбластьИмя) > 0 Тогда
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 8.
				Колонка8 = Окр(Форма.ТабличныйДокумент.Области["П000560003004_" + СтрИнд].Значение * Форма.ТабличныйДокумент.Области["П000560003006_" + СтрИнд].Значение, 2);
				Форма.ТабличныйДокумент.Области["П000560003008_" + СтрИнд].Значение = Колонка8;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000560003011, ОбластьИмя) > 0 Тогда
			
			Для Инд = 1 По ТаблРазделаКоличество Цикл
				
				СтрИнд = Формат(Инд, "ЧГ=");
				
				// Колонка 11.
				Колонка11 = Форма.ТабличныйДокумент.Области["П000560003009_" + СтрИнд].Значение + Форма.ТабличныйДокумент.Области["П000560003010_" + СтрИнд].Значение;
				Форма.ТабличныйДокумент.Области["П000560003011_" + СтрИнд].Значение = Колонка11;
				
			КонецЦикла;
			
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		// Выполняем расчет вычисляемых показателей отчета на
		// всех страницах основной панели формы
		Расчет(Форма, "Приложение6", ОбластьИмя);
		Расчет(Форма, "Приложение5", ОбластьИмя);
		Расчет(Форма, "Приложение4", ОбластьИмя);
		Расчет(Форма, "Приложение3", ОбластьИмя);
		Расчет(Форма, "Приложение2", ОбластьИмя);
		Расчет(Форма, "Приложение1", ОбластьИмя);
		Расчет(Форма, "Раздел4", ОбластьИмя);
		Форма.РасчетРаздела3(Ложь);
		Расчет(Форма, "Раздел3", ОбластьИмя);
		Форма.РасчетРаздела2(Ложь);
		Расчет(Форма, "Раздел2", ОбластьИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	 
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
			
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 1, ОбластьЯчейки.Верх, 1);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 1, ОбластьЯчейкиИсходнойОбласти.Верх, 1);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Инд);
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(Форма,ИмяГруппы);
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=");
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				НСтрСтр = Формат(НСтр, "ЧГ=");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=");
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						                        						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 1, ОбластьСдвинутойЯчейки.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяГруппы + "01_1"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЕсли;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
		
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
    	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" ИЛИ ИмяТекущейСтраницыПанели = "" Тогда
		// Конвертация данных при переходе с 2.0 на 3.0.
		Для каждого СтрокаТЗ Из Форма.ТаблицаВариантыЗаполненияРаздел1[0].ТаблицаВариантовЗаполнения Цикл
			Если СтрокаТЗ.КодПоказателя = "СуммаНалога25Число1_1" Тогда
				СтрокаТЗ.КодПоказателя = "СуммаНалога25Число1";
			ИначеЕсли СтрокаТЗ.КодПоказателя = "СуммаНалога15Число1_1" Тогда
				СтрокаТЗ.КодПоказателя = "СуммаНалога15Число1";
			ИначеЕсли СтрокаТЗ.КодПоказателя = "СуммаНалогаКУменьшению1_1" Тогда
				СтрокаТЗ.КодПоказателя = "СуммаНалогаКУменьшению1";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
		
	РегламентированнаяОтчетностьКлиентСервер.УстановитьФорматВывода(ЭтаФорма, НаимРаздела);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаНаКлиенте(НаимРаздела)
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьФорматВывода(ЭтаФорма, НаимРаздела);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ИнициализацияСоставаПоказателей();
	ИзвлечьДанные();
	
	ДеревоДляЗагрузки = Неопределено;
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, Новый Структура, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");

		Сообщение.Сообщить();

		Возврат;
		
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;

	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗакраситьБелым(Форма)
	
	ЦветБелый =  Новый Цвет(255, 255, 255);
	
	Область = Форма.ТабличныйДокумент.Области["СуммаНалога15Число1"];
	Область.Значение = "";
	Область.Защита = Истина;	
	Область.ЦветФона = ЦветБелый; 		
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
		Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "КодОКАТО1" И ЗначениеЗаполнено(Область.Значение) Тогда
		
		ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
		
		Если НЕ ПрименяетсяФормат300006(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
			
			Для Инд = ДлинаЗначения + 1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
			
		ИначеЕсли НЕ ДлинаЗначения = 8 И НЕ ДлинаЗначения = 11 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Код ОКТМО(ОКАТО) должен состоять из 8 или 11 цифр.'");
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "ОКВЭДРаздел1" Тогда
		
		Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе 1 задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);

			Сообщение.Сообщить();

		КонецЕсли;

	КонецЕсли;
	
	ИмяРаздела =  СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ИмяРаздела = "Титульный" Тогда
		Если Область.Имя = "ДатаПодписи" Тогда 
			ДатаПодписи = Область.Значение;
			ЗаполнитьСведенияОбОрганизации(Истина);
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "НомКоррект" Тогда 
			ОписаниеТипа = Новый ОписаниеТипов("Число");
			НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
			Область.Значение = Строка(НомерКорректировки);
			СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
			ТабличныйДокумент.Области["ВидДок"].Значение = ?(НомерКорректировки = 0, "1", "3");
			ЗаполнитьСведенияОбОрганизации(Истина);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

	ИмяОбласти = Область.Имя;
		
	РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);

 	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрименяетсяФормат300006(ДатаПериода)
	
	Возврат (ДатаПериода >= '2013-12-01');
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрименяетсяФормат300007(ДатаПериода)
	
	Возврат (ДатаПериода >= '2015-10-01');
	
КонецФункции

&НаКлиенте
Процедура ВводКБК(Элемент, Область, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РабочаяТабл = мКБК2005;
	
	ПервоначальноеЗначение = Область.Значение;
	
	МаксДлина  = 20;
	
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		ДополнительныеПараметры = Новый Структура("Область, ПервоначальноеЗначение", Область, ПервоначальноеЗначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиСтрокуВКБКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ПервоначальноеЗначение, "Введите КБК", МаксДлина);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          "Выбор КБК");
	ПараметрыФормы.Вставить("ТаблицаЗначений",    РабочаяТабл);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКБКЗавершение", ЭтотОбъект, Новый Структура("Область", Область));
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСтрокуВКБКЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ПервоначальноеЗначение = ?(Строка = Неопределено, ДополнительныеПараметры.ПервоначальноеЗначение, Строка);
	
	Если (Строка <> Неопределено) Тогда
		Область.Значение = ПервоначальноеЗначение; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКБКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		
		Область.Значение = Результат.Код; 
		
		СтруктураРеквизитовФормы.мКБКРаздел1 = Результат.Код; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	 
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ТекущийРазделИмя = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ОбластьИмя = Область.Имя;
	
	Если ТекущийРазделИмя = "Раздел1"	Тогда
						
		// Строка 010. КБК.
		
		Если ОбластьИмя = "КБК1" Тогда
			
			 ВводКБК (Элемент, Область, СтандартнаяОбработка);
			 
		КонецЕсли;
					
	ИначеЕсли ТекущийРазделИмя = "Раздел2"	Тогда
		
	ИначеЕсли ТекущийРазделИмя = "Раздел3"	Тогда

	ИначеЕсли ТекущийРазделИмя = "Раздел4"	Тогда

	ИначеЕсли ТекущийРазделИмя = "Приложение1"	Тогда
           	
		// Строка 010 и 020.
		Если (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И ((ОбластьИмя = "П000510001000") Или (ОбластьИмя = "П000510002000")) Тогда
			
			СтандартнаяОбработка = Ложь;
			КолонкаПоиска = ?(ОбластьИмя = "П000510001000", "Название", "Код");
			
			НачЗначение = Область.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мКроме450и460);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, НачЗначение));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияПриложение1Завершение", ЭтотОбъект);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		// Строка 030 и 040.
		ИначеЕсли (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И (ОбластьИмя = "П000510003000" Или ОбластьИмя = "П000510004000") Тогда
			
			СтандартнаяОбработка = Ложь;
			КолонкаПоиска = ?(ОбластьИмя = "П000510003000", "Название", "Код");
			НачЗначение = Область.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мТабачныеИзделияЕдИзмерения);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, НачЗначение));
			
			ДополнительныеПараметры = Новый Структура("ОбластьНазвания, ОбластьКод","П000510003000", "П000510004000");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияПриложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Конецесли; 
		                       
	ИначеЕсли ТекущийРазделИмя = "Приложение2"	Тогда

			// Строка 010 и 020.
			Если (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И (ОбластьИмя = "П000520001000" Или ОбластьИмя = "П000520002000") Тогда

				СтандартнаяОбработка = Ложь;
				КолонкаПоиска = ?(ОбластьИмя = "П000520001000", "Название", "Код");

				НачЗначение = Область.Значение;

				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Заголовок",          "Выбор");
				ПараметрыФормы.Вставить("ТаблицаЗначений",    мТолько450и460);
				ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, НачЗначение));
				ДополнительныеПараметры = Новый Структура("ОбластьНазвания, ОбластьКод", "П000520001000", "П000520002000");
				ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияПриложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
                               
	ИначеЕсли ТекущийРазделИмя = "Приложение3"	Тогда
                               
		// Строка 010 и 020.
		Если (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И (ОбластьИмя = "П000530001000" Или ОбластьИмя = "П000530002000") Тогда
			
			СтандартнаяОбработка = Ложь;
			КолонкаПоиска = ?(ОбластьИмя = "П000530001000", "Название", "Код");
			
			НачЗначение = Область.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мТолько450и460);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, НачЗначение));
			ДополнительныеПараметры = Новый Структура("ОбластьНазвания, ОбластьКод", "П000530001000", "П000530002000");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияПриложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		                       
	ИначеЕсли ТекущийРазделИмя = "Приложение4"	Тогда

	ИначеЕсли ТекущийРазделИмя = "Приложение5"	Тогда

		// Строка 010 и 020.
		Если (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И (ОбластьИмя = "П000550001000" Или ОбластьИмя = "П000550002000") Тогда
			
			СтандартнаяОбработка = Ложь;
			КолонкаПоиска = ?(ОбластьИмя = "П000550001000", "Название", "Код");
			
			НачЗначение = Область.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мТолько450и460);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, НачЗначение));
			
			ДополнительныеПараметры = Новый Структура("ОбластьНазвания, ОбластьКод", "П000550001000", "П000550002000");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияПриложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли ТекущийРазделИмя = "Приложение6"	Тогда

		// Строка 010 и 020.
		Если (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И (ОбластьИмя = "П000560001000" Или ОбластьИмя = "П000560002000") Тогда
			
			СтандартнаяОбработка = Ложь;
			КолонкаПоиска = ?(ОбластьИмя = "П000560001000", "Название", "Код");
			
			НачЗначение = Область.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мТолько450и460);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, НачЗначение));
			
			ДополнительныеПараметры = Новый Структура("ОбластьНазвания, ОбластьКод", "П000560001000", "П000560002000");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияПриложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияПриложение1Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Значение1 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат, Результат["Название"]);
		Значение2 = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов, Результат, Результат["Код"]);
		Если НЕ ЗначениеЗаполнено(Значение2) Тогда
			Значение1 = "";
		КонецЕсли;
		
		ТабличныйДокумент.Области.П000510001000.Значение = Значение1;
		ТабличныйДокумент.Области.П000510002000.Значение = Значение2;
		// предопределенные значения как
		ТабличныйДокумент.Области.П000510003000.Значение = ? (НЕ ЗначениеЗаполнено(Значение1), "", "тыс. штук");
		ТабличныйДокумент.Области.П000510004000.Значение = ? (НЕ ЗначениеЗаполнено(Значение1), "", "798");
		Модифицированность = Истина;
		
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияПриложениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбластьНазвания = ДополнительныеПараметры.ОбластьНазвания;
	ОбластьКод = ДополнительныеПараметры.ОбластьКод;
	
	Если Результат <> Неопределено Тогда
		
		Значение1 = Результат["Название"];
		Значение2 = Результат["Код"];
		Если ПустаяСтрока(Значение2) Тогда
			Значение1 = "";
		КонецЕсли;
		
		ТабличныйДокумент.Области[ОбластьНазвания].Значение = Значение1;
		ТабличныйДокумент.Области[ОбластьКод].Значение = Значение2;
		Модифицированность = Истина;
		
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре) Экспорт
	
	Рез = 0;
	
	Если КодПоказателяПоСтруктуре = "КБКРаздел1" Тогда
		Рез = СтруктураРеквизитовФормы.мКБКРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКАТОРаздел1" Тогда
		Рез = СтруктураРеквизитовФормы.мКодОКАТОРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога25Число1" Тогда
		Рез = СтруктураРеквизитовФормы.мСуммаНалога25Число1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога15Число1" Тогда
		Рез = СтруктураРеквизитовФормы.мСуммаНалога15Число1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалогаКУменьшению1" Тогда
		Рез = СтруктураРеквизитовФормы.мСуммаНалогаКУменьшению1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОКВЭД" Тогда
		Рез = СтруктураРеквизитовФормы.мКодОКВЭД;
	КонецЕсли;

	Возврат Рез;
	
КонецФункции

&НаКлиенте
Процедура ПроставитьСведенияОПредставителеОрганизацииНаКлиенте() Экспорт
	
	ПроставитьСведенияОПредставителеОрганизации(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьСведенияОПредставителеОрганизацииНаСервере() Экспорт
	
	ПроставитьСведенияОПредставителеОрганизации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьСведенияОПредставителеОрганизации(Форма)
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьСведенияОПредставителеОрганизации(Форма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахИРассчитатьНаСервере() Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000210001004.Значение = "460";
		ТабличныйДокумент.Области.П000210006004.Значение = "450";
		ТабличныйДокумент.Области.П000220011004.Значение = "411";
		ТабличныйДокумент.Области.П000220014004.Значение = "430";
		ТабличныйДокумент.Области.П000220017004.Значение = "440";
		
	ИначеЕсли НаимРаздела = "Раздел3" Тогда
		
		ТабличныйДокумент.Области.П000030002004.Значение = "411";
		ТабличныйДокумент.Области.П000030003004.Значение = "430";
		ТабличныйДокумент.Области.П000030004004.Значение = "440";
		ТабличныйДокумент.Области.П000030005004.Значение = "450";
		ТабличныйДокумент.Области.П000030006004.Значение = "460";
		ТабличныйДокумент.Области.П000030008004.Значение = "411";
		ТабличныйДокумент.Области.П000030009004.Значение = "430";
		ТабличныйДокумент.Области.П000030010004.Значение = "440";
		ТабличныйДокумент.Области.П000030011004.Значение = "450";
		ТабличныйДокумент.Области.П000030012004.Значение = "460";
		
	ИначеЕсли НаимРаздела = "Раздел4" Тогда
		
		ТабличныйДокумент.Области.П000040001004.Значение = "411";
		ТабличныйДокумент.Области.П000040002004.Значение = "430";
		ТабличныйДокумент.Области.П000040003004.Значение = "440";
		ТабличныйДокумент.Области.П000040004004.Значение = "450";
		ТабличныйДокумент.Области.П000040005004.Значение = "460";
		ТабличныйДокумент.Области.П000040006004.Значение = "411";
		ТабличныйДокумент.Области.П000040007004.Значение = "430";
		ТабличныйДокумент.Области.П000040008004.Значение = "440";
		ТабличныйДокумент.Области.П000040009004.Значение = "450";
		ТабличныйДокумент.Области.П000040010004.Значение = "460";
		ТабличныйДокумент.Области.П000040012004.Значение = "411";
		ТабличныйДокумент.Области.П000040013004.Значение = "430";
		ТабличныйДокумент.Области.П000040014004.Значение = "440";
		ТабличныйДокумент.Области.П000040015004.Значение = "450";
		ТабличныйДокумент.Области.П000040016004.Значение = "460";
		ТабличныйДокумент.Области.П000040017004.Значение = "411";
		ТабличныйДокумент.Области.П000040018004.Значение = "430";
		ТабличныйДокумент.Области.П000040019004.Значение = "440";
		ТабличныйДокумент.Области.П000040020004.Значение = "450";
		ТабличныйДокумент.Области.П000040021004.Значение = "460";
				
	ИначеЕсли НаимРаздела = "Приложение1" Тогда
		
		ТабличныйДокумент.Области.П000510005004.Значение = "10001";
		ТабличныйДокумент.Области.П000510006004.Значение = "10006";
		ТабличныйДокумент.Области.П000510007004.Значение = "10007";
		ТабличныйДокумент.Области.П000510008004.Значение = "10008";
		ТабличныйДокумент.Области.П000510009004.Значение = "10009";
		ТабличныйДокумент.Области.П000510010004.Значение = "10010";
		ТабличныйДокумент.Области.П000510011004.Значение = "10011";
		ТабличныйДокумент.Области.П000510012004.Значение = "10012";
		ТабличныйДокумент.Области.П000510013004.Значение = "10000";
				
	ИначеЕсли НаимРаздела = "Приложение2" Тогда
		
		ТабличныйДокумент.Области.П000520004104.Значение = "10000";
		ТабличныйДокумент.Области.П000520005004.Значение = "10001";
		ТабличныйДокумент.Области.П000520006004.Значение = "10006";
		ТабличныйДокумент.Области.П000520007004.Значение = "10007";
		ТабличныйДокумент.Области.П000520008004.Значение = "10008";
		ТабличныйДокумент.Области.П000520009004.Значение = "10009";
		ТабличныйДокумент.Области.П000520010004.Значение = "10010";
		ТабличныйДокумент.Области.П000520011004.Значение = "10011";
		ТабличныйДокумент.Области.П000520012004.Значение = "10012";
				
	ИначеЕсли НаимРаздела = "Приложение4" Тогда
		
		ТабличныйДокумент.Области.П000540001004.Значение = "411";
		ТабличныйДокумент.Области.П000540002004.Значение = "430";
		ТабличныйДокумент.Области.П000540003004.Значение = "440";
		ТабличныйДокумент.Области.П000540004004.Значение = "450";
		ТабличныйДокумент.Области.П000540005004.Значение = "450";
		ТабличныйДокумент.Области.П000540006004.Значение = "460";
		ТабличныйДокумент.Области.П000540007004.Значение = "460";
		
	ИначеЕсли НаимРаздела = "Приложение2" Тогда
		
		ТабличныйДокумент.Области.П000520004104.Значение = "10000";
		ТабличныйДокумент.Области.П000520005004.Значение = "10001";
		ТабличныйДокумент.Области.П000520006004.Значение = "10006";
		ТабличныйДокумент.Области.П000520007004.Значение = "10007";
		ТабличныйДокумент.Области.П000520008004.Значение = "10008";
		ТабличныйДокумент.Области.П000520009004.Значение = "10009";
		ТабличныйДокумент.Области.П000520010004.Значение = "10010";
		ТабличныйДокумент.Области.П000520011004.Значение = "10011";
		ТабличныйДокумент.Области.П000520012004.Значение = "10012";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	УстановитьРазмерностьНалоговойСтавки2013();
								
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	
	НаимТаблицыСтраницы = "ТаблицаСтраницы" + НаимРаздела;
	
	Если НаимРаздела = "Приложение1" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
				
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
						
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
 	ИначеЕсли НаимРаздела = "Приложение2" 
		 ИЛИ  НаимРаздела = "Приложение3"
		 ИЛИ  НаимРаздела = "Приложение5"
		 ИЛИ  НаимРаздела = "Приложение6" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
									
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
						
		КонецЕсли;
				
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы)
	Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].ПолучитьМакет(СтруктураРеквизитовФормы.НаименованиеФормыОтчета + "_" + ИмяТекРаздела));

	НаимТаблицыСтраницы = "ТаблицаСтраницы" + ИмяТекРаздела;
	
	// Многостраничные разделы.
	Если ИмяТекРаздела = "Приложение1" Тогда
	 	   		    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	    
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
	// Многостраничные и многострочные разделы.
 	ИначеЕсли ИмяТекРаздела = "Приложение2" 
		 ИЛИ  ИмяТекРаздела = "Приложение3"
		 ИЛИ  ИмяТекРаздела = "Приложение5"
		 ИЛИ  ИмяТекРаздела = "Приложение6" Тогда
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
								
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
								
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
		Если ИмяТекРаздела = "Раздел1" Тогда
			ЗакраситьБелым(ЭтаФорма);
		КонецЕсли;
	Иначе
		ТабличныйДокумент.Области.Приказ.Текст = НомерПриказа();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		// Конвертация данных при переходе с 2.0 на 3.0.
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомКвартал1" Тогда
			СтруктураДанныхТитульный.Вставить("НомКвартал", "");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.НомКвартал
					= СтруктураДанныхТитульный.НомКвартал + СокрЛП(ПоказателиТаблПоле["НомКвартал" + Ном]);
				СтруктураДанныхТитульный.Удалить("НомКвартал1" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.Удалить("СоставленаНа_" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеРаздела1СтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаРаздел1"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		// Конвертация данных при переходе с 2.0 на 3.0.
		
		Если ИмяПоказателя = "КБК1_1" Тогда
			СтруктураДанныхРаздел1.Вставить("КБК1", "");
			Для Ном = 1 По 20 Цикл
				СтруктураДанныхРаздел1.КБК1 = СтруктураДанныхРаздел1.КБК1 + СокрЛП(ПоказателиТаблПоле["КБК1_" + Ном]);
				СтруктураДанныхРаздел1.Удалить("КБК1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодОКАТО1_1" Тогда
			СтруктураДанныхРаздел1.Вставить("КодОКАТО1", "");
			Для Ном = 1 По 11 Цикл
				СтруктураДанныхРаздел1.КодОКАТО1
					= СтруктураДанныхРаздел1.КодОКАТО1 + СокрЛП(ПоказателиТаблПоле["КодОКАТО1_" + Ном]);
				СтруктураДанныхРаздел1.Удалить("КодОКАТО1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭДРаздел1_1" Тогда
			СтруктураДанныхРаздел1.Вставить("ОКВЭДРаздел1", "");
			Для Ном = 1 По 8 Цикл
				СтруктураДанныхРаздел1.ОКВЭДРаздел1
					= СтруктураДанныхРаздел1.ОКВЭДРаздел1 + СокрЛП(ПоказателиТаблПоле["ОКВЭДРаздел1_" + Ном]);
				СтруктураДанныхРаздел1.Удалить("ОКВЭДРаздел1_" + Ном);
			КонецЦикла;
			Пока Прав(СтруктураДанныхРаздел1.ОКВЭДРаздел1, 1) = "." Цикл
				СтруктураДанныхРаздел1.ОКВЭДРаздел1 = Сред(
					СтруктураДанныхРаздел1.ОКВЭДРаздел1, 1, СтрДлина(СтруктураДанныхРаздел1.ОКВЭДРаздел1) - 1);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаНалога25Число1_1" Тогда
			СтруктураДанныхРаздел1.Вставить("СуммаНалога25Число1", "");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхРаздел1.СуммаНалога25Число1
					= СтруктураДанныхРаздел1.СуммаНалога25Число1 + СокрЛП(ПоказателиТаблПоле["СуммаНалога25Число1_" + Ном]);
				СтруктураДанныхРаздел1.Удалить("СуммаНалога25Число1_" + Ном);
			КонецЦикла;
			Если ЗначениеЗаполнено(СтруктураДанныхРаздел1.СуммаНалога25Число1) Тогда
				СтруктураДанныхРаздел1.СуммаНалога25Число1 = Число(СтруктураДанныхРаздел1.СуммаНалога25Число1);
			Иначе
				СтруктураДанныхРаздел1.СуммаНалога25Число1 = 0;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "СуммаНалога15Число1_1" Тогда
			СтруктураДанныхРаздел1.Вставить("СуммаНалога15Число1", "");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхРаздел1.СуммаНалога15Число1
					= СтруктураДанныхРаздел1.СуммаНалога15Число1 + СокрЛП(ПоказателиТаблПоле["СуммаНалога15Число1_" + Ном]);
				СтруктураДанныхРаздел1.Удалить("СуммаНалога15Число1_" + Ном);
			КонецЦикла;
			Если ЗначениеЗаполнено(СтруктураДанныхРаздел1.СуммаНалога15Число1) Тогда
				СтруктураДанныхРаздел1.СуммаНалога15Число1 = Число(СтруктураДанныхРаздел1.СуммаНалога15Число1);
			Иначе
				СтруктураДанныхРаздел1.СуммаНалога15Число1 = 0;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "СуммаНалогаКУменьшению1_1" Тогда
			СтруктураДанныхРаздел1.Вставить("СуммаНалогаКУменьшению1", "");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхРаздел1.СуммаНалогаКУменьшению1
					= СтруктураДанныхРаздел1.СуммаНалогаКУменьшению1 + СокрЛП(ПоказателиТаблПоле["СуммаНалогаКУменьшению1_" + Ном]);
				СтруктураДанныхРаздел1.Удалить("СуммаНалогаКУменьшению1_" + Ном);
			КонецЦикла;
			Если ЗначениеЗаполнено(СтруктураДанныхРаздел1.СуммаНалогаКУменьшению1) Тогда
				СтруктураДанныхРаздел1.СуммаНалогаКУменьшению1 = Число(СтруктураДанныхРаздел1.СуммаНалогаКУменьшению1);
			Иначе
				СтруктураДанныхРаздел1.СуммаНалогаКУменьшению1 = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок) Экспорт
	
	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
	
	ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
	
	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
	
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		// Имеются дополнительные строки.
		// Удаляем их.
		
		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
			
			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
			
			ИмяПервойКолонки = ИмяГруппыДопСтрок + "01_";
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + НСтр;
			
			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			
			РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			
			// удаляем из структуры многострочного раздела соответствующую строку
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
			
			НСтр = НСтр - 1;
						
		КонецЦикла;	
		
		Если ВыбТабличноеПоле.Области.Найти("МногострочнаяЧасть") = Неопределено Тогда
			
			ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти - 1, , НомерНижнЯчейкиОбласти - 1).Имя = "МногострочнаяЧасть";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписиРук = Новый Массив(8);
	МассивДатаПодписиБух = Новый Массив(8);
	МассивДатаПодписиИП  = Новый Массив(8);
				
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = "00" + СтрИНН;
		КонецЕсли;
				
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргДиректор.Значение) Тогда
				МассивДатаПодписиРук[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	

			Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
				МассивДатаПодписиИП[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук", МассивДатаПодписиРук);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух", МассивДатаПодписиБух);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиИП", МассивДатаПодписиИП);	
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
		
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьАвто();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвто()

	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	РасчетРаздела3(Истина);
	РасчетНаСервере("Раздел3");
	РасчетРаздела2(Истина);
	РасчетНаСервере("Раздел2");
	    	
КонецПроцедуры

&НаСервере
Процедура РасчетРаздела3(ВызываетсяИзЗаполнитьАвто)
	
	Если НЕ ВызываетсяИзЗаполнитьАвто Тогда
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или СтруктураРеквизитовФормы.мРежимПечати Или СтруктураРеквизитовФормы.мИсключитьЗапускРасчета Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТблПриложение5 = ЭтаФорма[мСтруктураМногостраничныхРазделов.Приложение5];
	ТблПриложение6 = ЭтаФорма[мСтруктураМногостраничныхРазделов.Приложение6];

	ТаблПрил5 = Новый ТаблицаЗначений;
	ТаблПрил5.Колонки.Добавить("Код");
	ТаблПрил5.Колонки.Добавить("Строка030Графы7_По13Колонке"); // С условием, что в колонке 13 значение больше 0.
	ТаблПрил5.Колонки.Добавить("Строка030Графы8");
	ТаблПрил5.Колонки.Добавить("Строка030Графы7_По14Колонке"); // С условием, что в колонке 14 значение больше 0.

	ТаблПрил6 = Новый ТаблицаЗначений;
	ТаблПрил6.Колонки.Добавить("Код");
	ТаблПрил6.Колонки.Добавить("Строка030Графы7_По13Колонке"); // С условием, что в колонке 13 значение больше 0.
	ТаблПрил6.Колонки.Добавить("Строка030Графы8");
	ТаблПрил6.Колонки.Добавить("Строка030Графы7_По14Колонке"); // С условием, что в колонке 14 значение больше 0.

	// Заполняем таблицу по приложению 5.
	Для каждого Экз Из ТблПриложение5 Цикл
		
		Код = Экз.Данные[0].Значение.П000550002000;
				
		Если ПустаяСтрока(Код) Тогда
			Продолжить;
		КонецЕсли;
		
		// Организуем цикл по табличной части.
		Номер = 1;
		НомерСтр = "1";

		// Пока строка с индексом есть ...
		Пока Экз.Данные[0].Значение.Свойство("П000550003013_" + НомерСтр) Цикл

			НовЗап = ТаблПрил5.Добавить();
			НовЗап.Код = Код;

			Если Экз.Данные[0].Значение["П000550003013_" + НомерСтр] > 0 Тогда
				НовЗап.Строка030Графы7_По13Колонке = Экз.Данные[0].Значение["П000550003007_" + НомерСтр];
				НовЗап.Строка030Графы8 = Экз.Данные[0].Значение["П000550003008_" + НомерСтр];
			Иначе
				НовЗап.Строка030Графы7_По13Колонке = 0;
				НовЗап.Строка030Графы8 = 0;
			КонецЕсли;
			Если Экз.Данные[0].Значение["П000550003014_" + НомерСтр] > 0 Тогда
				НовЗап.Строка030Графы7_По14Колонке = Экз.Данные[0].Значение["П000550003007_" + НомерСтр];
			Иначе
				НовЗап.Строка030Графы7_По14Колонке = 0;
			КонецЕсли;

			Номер = Номер + 1;
			НомерСтр = Формат(Номер, "ЧГ=")
		КонецЦикла;

	КонецЦикла;

	// Заполняем таблицу по приложению 6.
	Для каждого Экз Из ТблПриложение6 Цикл
				
		Код = Экз.Данные[0].Значение.П000560002000;
		
		Если ПустаяСтрока(Код) Тогда
			Продолжить;
		КонецЕсли;
		
		// Организуем цикл по табличной части.
		Номер = 1;
		НомерСтр = "1";

		// Пока строка с индексом есть ...
		Пока Экз.Данные[0].Значение.Свойство("П000560003013_" + НомерСтр) Цикл

			НовЗап     = ТаблПрил6.Добавить();
			НовЗап.Код = Код;

			Если Экз.Данные[0].Значение["П000560003013_" + НомерСтр] > 0 Тогда
				НовЗап.Строка030Графы7_По13Колонке = Экз.Данные[0].Значение["П000560003007_" + НомерСтр];
				НовЗап.Строка030Графы8 = Экз.Данные[0].Значение["П000560003008_" + НомерСтр];
			Иначе
				НовЗап.Строка030Графы7_По13Колонке = 0;
				НовЗап.Строка030Графы8 = 0;
			КонецЕсли;
			Если Экз.Данные[0].Значение["П000560003014_" + НомерСтр] > 0 Тогда
				НовЗап.Строка030Графы7_По14Колонке = Экз.Данные[0].Значение["П000560003007_" + НомерСтр];
			Иначе
				НовЗап.Строка030Графы7_По14Колонке = 0;
			КонецЕсли;

			Номер = Номер + 1;
			НомерСтр = Формат(Номер, "ЧГ=")
		КонецЦикла;

	КонецЦикла;
         	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		
		ТабличныйДокумент.Области.П000030005105.Значение = 0;
		ТабличныйДокумент.Области.П000030006105.Значение = 0;
		ТабличныйДокумент.Области.П000030011105.Значение = 0;
		ТабличныйДокумент.Области.П000030012105.Значение = 0;
		
		ТабличныйДокумент.Области.П000030005205.Значение = 0;
		ТабличныйДокумент.Области.П000030006205.Значение = 0;
		ТабличныйДокумент.Области.П000030011205.Значение = 0;
		ТабличныйДокумент.Области.П000030012205.Значение = 0;
		
		ТабличныйДокумент.Области.П000030005305.Значение = 0;
		ТабличныйДокумент.Области.П000030006305.Значение = 0;
		ТабличныйДокумент.Области.П000030011305.Значение = 0;
		ТабличныйДокумент.Области.П000030012305.Значение = 0;
		
	Иначе
		
		СтруктураДанныхРаздел3.П000030005105 = 0;
		СтруктураДанныхРаздел3.П000030006105 = 0;
		СтруктураДанныхРаздел3.П000030011105 = 0;
		СтруктураДанныхРаздел3.П000030012105 = 0;
		
		СтруктураДанныхРаздел3.П000030005205 = 0;
		СтруктураДанныхРаздел3.П000030006205 = 0;
		СтруктураДанныхРаздел3.П000030011205 = 0;
		СтруктураДанныхРаздел3.П000030012205 = 0;
		
		СтруктураДанныхРаздел3.П000030005305 = 0;
		СтруктураДанныхРаздел3.П000030006305 = 0;
		СтруктураДанныхРаздел3.П000030011305 = 0;
		СтруктураДанныхРаздел3.П000030012305 = 0;
		
	КонецЕсли;

	ТаблПрил5.Свернуть("Код", "Строка030Графы7_По13Колонке, Строка030Графы8, Строка030Графы7_По14Колонке");

	Код450 = ТаблПрил5.Найти("450", "Код");
	Код460 = ТаблПрил5.Найти("460", "Код");

	Если Код450 <> Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			
			ТабличныйДокумент.Области.П000030005105.Значение = Код450.Строка030Графы8;
			ТабличныйДокумент.Области.П000030005205.Значение = Код450.Строка030Графы7_По13Колонке;
			ТабличныйДокумент.Области.П000030005305.Значение = Код450.Строка030Графы7_По14Колонке;
			
		Иначе
			
			СтруктураДанныхРаздел3.П000030005105 = Код450.Строка030Графы8;
			СтруктураДанныхРаздел3.П000030005205 = Код450.Строка030Графы7_По13Колонке;
			СтруктураДанныхРаздел3.П000030005305 = Код450.Строка030Графы7_По14Колонке;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Код460 <> Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			
			ТабличныйДокумент.Области.П000030006105.Значение = Код460.Строка030Графы8;
			ТабличныйДокумент.Области.П000030006205.Значение = Код460.Строка030Графы7_По13Колонке;
			ТабличныйДокумент.Области.П000030006305.Значение = Код460.Строка030Графы7_По14Колонке;
			
		Иначе
			
			СтруктураДанныхРаздел3.П000030006105 = Код460.Строка030Графы8;
			СтруктураДанныхРаздел3.П000030006205 = Код460.Строка030Графы7_По13Колонке;
			СтруктураДанныхРаздел3.П000030006305 = Код460.Строка030Графы7_По14Колонке;
			
		КонецЕсли;
		
	КонецЕсли;

	ТаблПрил6.Свернуть("Код", "Строка030Графы7_По13Колонке, Строка030Графы8, Строка030Графы7_По14Колонке");

	Код450 = ТаблПрил6.Найти("450", "Код");
	Код460 = ТаблПрил6.Найти("460", "Код");

	Если Код450 <> Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			
			ТабличныйДокумент.Области.П000030011105.Значение = Код450.Строка030Графы8;
			ТабличныйДокумент.Области.П000030011205.Значение = Код450.Строка030Графы7_По13Колонке;
			ТабличныйДокумент.Области.П000030011305.Значение = Код450.Строка030Графы7_По14Колонке;
			
		Иначе
			
			СтруктураДанныхРаздел3.П000030011105 = Код450.Строка030Графы8;
			СтруктураДанныхРаздел3.П000030011205 = Код450.Строка030Графы7_По13Колонке;
			СтруктураДанныхРаздел3.П000030011305 = Код450.Строка030Графы7_По14Колонке;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Код460 <> Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			
			ТабличныйДокумент.Области.П000030012105.Значение = Код460.Строка030Графы8;
			ТабличныйДокумент.Области.П000030012205.Значение = Код460.Строка030Графы7_По13Колонке;
			ТабличныйДокумент.Области.П000030012305.Значение = Код460.Строка030Графы7_По14Колонке;
			
		Иначе
			
			СтруктураДанныхРаздел3.П000030012105 = Код460.Строка030Графы8;
			СтруктураДанныхРаздел3.П000030012205 = Код460.Строка030Графы7_По13Колонке;
			СтруктураДанныхРаздел3.П000030012305 = Код460.Строка030Графы7_По14Колонке;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РасчетРаздела2(ВызываетсяИзЗаполнитьАвто)
		
	Если НЕ ВызываетсяИзЗаполнитьАвто Тогда
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или СтруктураРеквизитовФормы.мРежимПечати Или СтруктураРеквизитовФормы.мИсключитьЗапускРасчета Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
    	
	СуммаГрафа9Строки020И070 = 0;
	СуммаГрафа9Строки030И080 = 0;
	
	СуммаГрафа9Строки040И090 = 0;
	СуммаГрафа9Строки050И100 = 0;

	СуммаГрафа9Строки020И070460 = 0;
	СуммаГрафа9Строки020И070450 = 0;
	СуммаГрафа9Строки030И080460 = 0;
	СуммаГрафа9Строки030И080450 = 0;

	СуммаГрафа9Строки040И090460 = 0;
	СуммаГрафа9Строки040И090450 = 0;
	СуммаГрафа9Строки050И100460 = 0;
	СуммаГрафа9Строки050И100450 = 0;

	ТблПриложение1 = ЭтаФорма[мСтруктураМногостраничныхРазделов.Приложение1];
	ТблПриложение2 = ЭтаФорма[мСтруктураМногостраничныхРазделов.Приложение2];
	
	// Посчитаем сумму со всех экз. прил. 2 с нужным кодом акциза. 460, строка 040, колонки 13 и 14
	Для каждого Экз Из ТблПриложение2 Цикл
		
		Если Экз.Данные[0].Значение.П000520002000 = "460" Тогда
			СуммаГрафа9Строки020И070460 = Экз.Данные[0].Значение.П000520004013 + СуммаГрафа9Строки020И070460;
			СуммаГрафа9Строки030И080460 = Экз.Данные[0].Значение.П000520004014 + СуммаГрафа9Строки030И080460;
		ИначеЕсли Экз.Данные[0].Значение.П000520002000 = "450" Тогда
			СуммаГрафа9Строки020И070450 = Экз.Данные[0].Значение.П000520004013 + СуммаГрафа9Строки020И070450;
			СуммаГрафа9Строки030И080450 = Экз.Данные[0].Значение.П000520004014 + СуммаГрафа9Строки030И080450;
		КонецЕсли;

	КонецЦикла;

	ТблПриложение3 = ЭтаФорма[мСтруктураМногостраничныхРазделов.Приложение3];
	
	// Посчитаем сумму со всех экз. прил. 3 с нужным кодом акциза. 450, строка 040, колонки 13 и 14
	Для каждого Экз Из ТблПриложение3 Цикл
		
		Если Экз.Данные[0].Значение.П000530002000 = "450" Тогда
			СуммаГрафа9Строки040И090450 = Экз.Данные[0].Значение.П000530004013 + СуммаГрафа9Строки040И090450;
			СуммаГрафа9Строки050И100450 = Экз.Данные[0].Значение.П000530004014 + СуммаГрафа9Строки050И100450;
		ИначеЕсли Экз.Данные[0].Значение.П000530002000 = "460" Тогда
			СуммаГрафа9Строки040И090460 = Экз.Данные[0].Значение.П000530004013 + СуммаГрафа9Строки040И090460;
			СуммаГрафа9Строки050И100460 = Экз.Данные[0].Значение.П000530004014 + СуммаГрафа9Строки050И100460;
		КонецЕсли;

	КонецЦикла;

	ТаблПрил2Свер = Новый ТаблицаЗначений;
	ТаблПрил2Свер.Колонки.Добавить("Код");
	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа5Строки020И070");
	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа6Строки020И070");
	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа9Строки020И070");

	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа5Строки030И080");
	ТаблПрил2Свер.Колонки.Добавить("СуммаГрафа9Строки030И080");

	ТаблПрил3Свер = Новый ТаблицаЗначений;

	ТаблПрил3Свер.Колонки.Добавить("Код");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа5Строки040И090");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа6Строки040И090");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа5Строки050И100");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа9Строки040И090");
	ТаблПрил3Свер.Колонки.Добавить("СуммаГрафа9Строки050И100");

	// Сформируем итоговую таблицу на основании приложения 2
	Для каждого Экз Из ТблПриложение2 Цикл
		
		Если НЕ ПустаяСтрока(Экз.Данные[0].Значение.П000520002000) Тогда
			Если Экз.Данные[0].Значение.П000520002000 <> "460" И Экз.Данные[0].Значение.П000520002000 <> "450" Тогда
				Продолжить;
			КонецЕсли;

			Номер = 1;
			НомерСтр = "1";

			// Пока строка с индексом есть ...
			Пока Экз.Данные[0].Значение.Свойство("П000520003013_" + НомерСтр) Цикл

				НовЗап = ТаблПрил2Свер.Добавить();
				НовЗап.Код    = Экз.Данные[0].Значение.П000520002000; // Запишем код.

				// в графу 10 строк 030, 080 раздела 2.1 из приложения № 2 переносится значение показателя графы 14 строки 040.
				// Графа 5,6,9 строки 020 и 070.

				Если (Экз.Данные[0].Значение.П000520002000 = "460" И СуммаГрафа9Строки020И070460 > 0)
				 Или (Экз.Данные[0].Значение.П000520002000 = "450" И СуммаГрафа9Строки020И070450 > 0) Тогда
					// Если значение показателя графы 14 строки 040 приложения № 2 равно нулю,
					// то в графах 5, 6 и 10 строк 030, 080 раздела 2.1 проставляются прочерки;

					// В случае, если колонка 13 будет равна 0, тогда все колонки также будут равны 0.
					Если Экз.Данные[0].Значение["П000520003013_" + НомерСтр] > 0 Тогда
						НовЗап.СуммаГрафа5Строки020И070 = Экз.Данные[0].Значение["П000520003007_" + НомерСтр]; // Графа 7 приложения 2.
						НовЗап.СуммаГрафа6Строки020И070 = Экз.Данные[0].Значение["П000520003008_" + НомерСтр]; // Графа 8 приложения 2.
					КонецЕсли;
				ИначеЕсли (Экз.Данные[0].Значение.П000520002000 = "460" И СуммаГрафа9Строки020И070460 = 0)
					  Или (Экз.Данные[0].Значение.П000520002000 = "450" И СуммаГрафа9Строки020И070450 = 0) Тогда
					НовЗап.СуммаГрафа5Строки020И070 = 0; // Графа 7 приложения 2.
					НовЗап.СуммаГрафа6Строки020И070 = 0; // Графа 8 приложения 2.
					Если Экз.Данные[0].Значение.П000520002000 = "460" Тогда
						СуммаГрафа9Строки020И070460 = 0;       // Графа 13 приложения 2.
					ИначеЕсли Экз.Данные[0].Значение.П000520002000 = "450" Тогда
						СуммаГрафа9Строки020И070450 = 0;       // Графа 13 приложения 2.
					КонецЕсли;
				КонецЕсли;

				// Строка 020 и 070

				// Графа 5 и 9 строки 030 и 080.
				Если (Экз.Данные[0].Значение.П000520002000 = "460" И СуммаГрафа9Строки030И080460 > 0)
				 Или (Экз.Данные[0].Значение.П000520002000 = "450" И СуммаГрафа9Строки030И080450 > 0) Тогда

					// в графу 5 строк 030, 080 раздела 2.1 из приложения № 2 переносится сумма строк 030 графы 7,
					// в которых значение показателя графы 14 больше нуля;
					Если Экз.Данные[0].Значение["П000520003014_" + НомерСтр] > 0 Тогда
						НовЗап.СуммаГрафа5Строки030И080 = Экз.Данные[0].Значение["П000520003007_" + НомерСтр];
					КонецЕсли;
				ИначеЕсли (Экз.Данные[0].Значение.П000520002000 = "460" И СуммаГрафа9Строки030И080460 = 0)
					  Или (Экз.Данные[0].Значение.П000520002000 = "450" И СуммаГрафа9Строки030И080450 = 0) Тогда
					НовЗап.СуммаГрафа5Строки030И080 = 0;
					Если Экз.Данные[0].Значение.П000520002000 = "450" Тогда
						СуммаГрафа9Строки030И080450 = 0;
					ИначеЕсли Экз.Данные[0].Значение.П000520002000 = "460" Тогда
						СуммаГрафа9Строки030И080460 = 0;
					КонецЕсли;
				КонецЕсли;

				Номер = Номер + 1;
				НомерСтр = Формат(Номер, "ЧГ=")
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	// Сформируем итоговую таблицу на основании приложения 3
	Для каждого Экз Из ТблПриложение3 Цикл
		
		Если НЕ ПустаяСтрока(Экз.Данные[0].Значение.П000530002000) Тогда
			Если Экз.Данные[0].Значение.П000530002000 <> "460" И Экз.Данные[0].Значение.П000530002000 <> "450" Тогда
				Продолжить;
			КонецЕсли;

			Номер = 1;
			НомерСтр = "1";

			// Пока строка с индексом есть ...
			Пока Экз.Данные[0].Значение.Свойство("П000530003013_" + НомерСтр) Цикл

				НовЗап = ТаблПрил3Свер.Добавить();
				НовЗап.Код    = Экз.Данные[0].Значение.П000530002000; // Запишем код.

				// в графу 10 строк 030, 080 раздела 2.1 из приложения № 2 переносится значение показателя графы 14 строки 040.
				// Графа 5,6,9 строки 020 и 070.

				// Графа 5,6,9 строки 040 и 090.
				Если (Экз.Данные[0].Значение.П000530002000 = "460" И СуммаГрафа9Строки040И090460 > 0)
				 Или (Экз.Данные[0].Значение.П000530002000 = "450" И СуммаГрафа9Строки040И090450 > 0) Тогда
					// Если значение показателя графы 14 строки 040 приложения № 2 равно нулю,
					// то в графах 5, 6 и 10 строк 030, 080 раздела 2.1 проставляются прочерки;

					// В случае, если колонка 13 будет равна 0, тогда все колонки также будут равны 0.
					Если Экз.Данные[0].Значение["П000530003013_" + НомерСтр] > 0 Тогда
						НовЗап.СуммаГрафа5Строки040И090 = Экз.Данные[0].Значение["П000530003007_" + НомерСтр]; // Графа 7 приложения 2.
						НовЗап.СуммаГрафа6Строки040И090 = Экз.Данные[0].Значение["П000530003008_" + НомерСтр]; // Графа 8 приложения 2.
					КонецЕсли;
				ИначеЕсли (Экз.Данные[0].Значение.П000530002000 = "460" И СуммаГрафа9Строки040И090460 = 0)
					  Или (Экз.Данные[0].Значение.П000530002000 = "450" И СуммаГрафа9Строки040И090450 = 0) Тогда
					НовЗап.СуммаГрафа5Строки040И090 = 0;
					НовЗап.СуммаГрафа6Строки040И090 = 0;
					Если Экз.Данные[0].Значение.П000530002000 = "450" Тогда
						СуммаГрафа9Строки040И090450 = 0;
					ИначеЕсли Экз.Данные[0].Значение.П000530002000 = "460" Тогда
						СуммаГрафа9Строки040И090460 = 0;
					КонецЕсли;

				КонецЕсли;

				// Строка 050 и 100

				// Графа 5 и 9 строки 050 и 100.
				Если (Экз.Данные[0].Значение.П000530002000 = "460" И СуммаГрафа9Строки050И100460 > 0)
				 Или (Экз.Данные[0].Значение.П000530002000 = "450" И СуммаГрафа9Строки050И100450 > 0) Тогда
					// Если значение показателя графы 14 строки 040 приложения № 2 равно нулю,
					// то в графах 5, 6 и 10 строк 030, 080 раздела 2.1 проставляются прочерки;

					// В случае, если колонка 13 будет равна 0, тогда все колонки также будут равны 0.
					Если Экз.Данные[0].Значение["П000530003014_" + НомерСтр] > 0 Тогда
						НовЗап.СуммаГрафа5Строки050И100 = Экз.Данные[0].Значение["П000530003007_" + НомерСтр]; // Графа 7 приложения 3.
					КонецЕсли;
				ИначеЕсли (Экз.Данные[0].Значение.П000530002000 = "460" И СуммаГрафа9Строки050И100460 = 0)
					  Или (Экз.Данные[0].Значение.П000530002000 = "450" И СуммаГрафа9Строки050И100450 = 0) Тогда
					НовЗап.СуммаГрафа5Строки050И100 = 0;
					Если Экз.Данные[0].Значение.П000530002000 = "450" Тогда
						СуммаГрафа9Строки050И100450 = 0;
					ИначеЕсли Экз.Данные[0].Значение.П000530002000 = "460" Тогда
						СуммаГрафа9Строки050И100460 = 0;
					КонецЕсли;
				КонецЕсли;

				Номер = Номер + 1;
				НомерСтр = Формат(Номер, "ЧГ=")
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		// 460
		ТабличныйДокумент.Области.П000210002005.Значение = 0;
		ТабличныйДокумент.Области.П000210002006.Значение = 0;
		ТабличныйДокумент.Области.П000210002009.Значение = 0;
		
		ТабличныйДокумент.Области.П000210003005.Значение = 0;
		ТабличныйДокумент.Области.П000210003009.Значение = 0;
		
		ТабличныйДокумент.Области.П000210004005.Значение = 0;
		ТабличныйДокумент.Области.П000210004006.Значение = 0;
		ТабличныйДокумент.Области.П000210004009.Значение = 0;
		
		ТабличныйДокумент.Области.П000210005005.Значение = 0;
		ТабличныйДокумент.Области.П000210005009.Значение = 0;
		
		// 450
		ТабличныйДокумент.Области.П000210007005.Значение = 0;
		ТабличныйДокумент.Области.П000210007006.Значение = 0;
		ТабличныйДокумент.Области.П000210007009.Значение = 0;
		
		ТабличныйДокумент.Области.П000210008005.Значение = 0;
		ТабличныйДокумент.Области.П000210008009.Значение = 0;
		
		ТабличныйДокумент.Области.П000210009005.Значение = 0;
		ТабличныйДокумент.Области.П000210009006.Значение = 0;
		ТабличныйДокумент.Области.П000210009009.Значение = 0;
		
		ТабличныйДокумент.Области.П000210010005.Значение = 0;
		ТабличныйДокумент.Области.П000210010009.Значение = 0;
		
	Иначе
		
		// 460
		СтруктураДанныхРаздел2.П000210002005 = 0;
		СтруктураДанныхРаздел2.П000210002006 = 0;
		СтруктураДанныхРаздел2.П000210002009 = 0;
		
		СтруктураДанныхРаздел2.П000210003005 = 0;
		СтруктураДанныхРаздел2.П000210003009 = 0;
		
		СтруктураДанныхРаздел2.П000210004005 = 0;
		СтруктураДанныхРаздел2.П000210004006 = 0;
		СтруктураДанныхРаздел2.П000210004009 = 0;
		
		СтруктураДанныхРаздел2.П000210005005 = 0;
		СтруктураДанныхРаздел2.П000210005009 = 0;
		
		// 450
		СтруктураДанныхРаздел2.П000210007005 = 0;
		СтруктураДанныхРаздел2.П000210007006 = 0;
		СтруктураДанныхРаздел2.П000210007009 = 0;
		
		СтруктураДанныхРаздел2.П000210008005 = 0;
		СтруктураДанныхРаздел2.П000210008009 = 0;
		
		СтруктураДанныхРаздел2.П000210009005 = 0;
		СтруктураДанныхРаздел2.П000210009006 = 0;
		СтруктураДанныхРаздел2.П000210009009 = 0;
		
		СтруктураДанныхРаздел2.П000210010005 = 0;
		СтруктураДанныхРаздел2.П000210010009 = 0;
		
	КонецЕсли;

	ТаблПрил2Свер.Свернуть("Код", "СуммаГрафа5Строки020И070, СуммаГрафа6Строки020И070, СуммаГрафа5Строки030И080");
	
	// В каждой собранной таблице, могут быть данные как по коду 460, так и по коду 450.
	Данные460 = ТаблПрил2Свер.Найти("460", "Код");
	Данные450 = ТаблПрил2Свер.Найти("450", "Код");
	
	Если Данные460 <> Неопределено Тогда
		
		// Заполняем строки 020 и 030 по коду 460.
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			ТабличныйДокумент.Области.П000210002005.Значение = Данные460.СуммаГрафа5Строки020И070;
			ТабличныйДокумент.Области.П000210002006.Значение = Данные460.СуммаГрафа6Строки020И070;
			ТабличныйДокумент.Области.П000210002009.Значение = СуммаГрафа9Строки020И070460;
			
			ТабличныйДокумент.Области.П000210003005.Значение = Данные460.СуммаГрафа5Строки030И080;
			ТабличныйДокумент.Области.П000210003009.Значение = СуммаГрафа9Строки030И080460;
			
		Иначе
			
			СтруктураДанныхРаздел2.П000210002005 = Данные460.СуммаГрафа5Строки020И070;
			СтруктураДанныхРаздел2.П000210002006 = Данные460.СуммаГрафа6Строки020И070;
			СтруктураДанныхРаздел2.П000210002009 = СуммаГрафа9Строки020И070460;
			
			СтруктураДанныхРаздел2.П000210003005 = Данные460.СуммаГрафа5Строки030И080;
			СтруктураДанныхРаздел2.П000210003009 = СуммаГрафа9Строки030И080460;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Данные450 <> Неопределено Тогда
		
		// Заполняем строки 070 и 080 по коду 450.
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			ТабличныйДокумент.Области.П000210007005.Значение = Данные450.СуммаГрафа5Строки020И070;
			ТабличныйДокумент.Области.П000210007006.Значение = Данные450.СуммаГрафа6Строки020И070;
			ТабличныйДокумент.Области.П000210007009.Значение = СуммаГрафа9Строки020И070450;
			
			ТабличныйДокумент.Области.П000210008005.Значение = Данные450.СуммаГрафа5Строки030И080;
			ТабличныйДокумент.Области.П000210008009.Значение = СуммаГрафа9Строки030И080450;
			
		Иначе
			
			СтруктураДанныхРаздел2.П000210007005 = Данные450.СуммаГрафа5Строки020И070;
			СтруктураДанныхРаздел2.П000210007006 = Данные450.СуммаГрафа6Строки020И070;
			СтруктураДанныхРаздел2.П000210007009 = СуммаГрафа9Строки020И070450;
			
			СтруктураДанныхРаздел2.П000210008005 = Данные450.СуммаГрафа5Строки030И080;
			СтруктураДанныхРаздел2.П000210008009 = СуммаГрафа9Строки030И080450;
			
		КонецЕсли;
		
	КонецЕсли;

	ТаблПрил3Свер.Свернуть("Код", "СуммаГрафа5Строки040И090, СуммаГрафа6Строки040И090, СуммаГрафа5Строки050И100");
	
	Данные460 = ТаблПрил3Свер.Найти("460", "Код");
	Данные450 = ТаблПрил3Свер.Найти("450", "Код");
	
	Если Данные460 <> Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			ТабличныйДокумент.Области.П000210004005.Значение = Данные460.СуммаГрафа5Строки040И090;
			ТабличныйДокумент.Области.П000210004006.Значение = Данные460.СуммаГрафа6Строки040И090;
			ТабличныйДокумент.Области.П000210004009.Значение = СуммаГрафа9Строки040И090460;
			
			ТабличныйДокумент.Области.П000210005005.Значение = Данные460.СуммаГрафа5Строки050И100;
			ТабличныйДокумент.Области.П000210005009.Значение = СуммаГрафа9Строки050И100460;
			
		Иначе
			
			СтруктураДанныхРаздел2.П000210004005 = Данные460.СуммаГрафа5Строки040И090;
			СтруктураДанныхРаздел2.П000210004006 = Данные460.СуммаГрафа6Строки040И090;
			СтруктураДанныхРаздел2.П000210004009 = СуммаГрафа9Строки040И090460;
			
			СтруктураДанныхРаздел2.П000210005005 = Данные460.СуммаГрафа5Строки050И100;
			СтруктураДанныхРаздел2.П000210005009 = СуммаГрафа9Строки050И100460;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Данные450 <> Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			ТабличныйДокумент.Области.П000210009005.Значение = Данные450.СуммаГрафа5Строки040И090;
			ТабличныйДокумент.Области.П000210009006.Значение = Данные450.СуммаГрафа6Строки040И090;
			ТабличныйДокумент.Области.П000210009009.Значение = СуммаГрафа9Строки040И090450;
			
			ТабличныйДокумент.Области.П000210010005.Значение = Данные450.СуммаГрафа5Строки050И100;
			ТабличныйДокумент.Области.П000210010009.Значение = СуммаГрафа9Строки050И100450;
			
		Иначе
			
			СтруктураДанныхРаздел2.П000210009005 = Данные450.СуммаГрафа5Строки040И090;
			СтруктураДанныхРаздел2.П000210009006 = Данные450.СуммаГрафа6Строки040И090;
			СтруктураДанныхРаздел2.П000210009009 = СуммаГрафа9Строки040И090450;
			
			СтруктураДанныхРаздел2.П000210010005 = Данные450.СуммаГрафа5Строки050И100;
			СтруктураДанныхРаздел2.П000210010009 = СуммаГрафа9Строки050И100450;
			
		КонецЕсли;
		
	КонецЕсли;

	// Автозаполнение подраздела 2.2 раздела 2, на основании приложения 1.
	// По каждой из строк 120, 150, 180 (показатели ""реализовано (передано) на территории Российской Федерации"") в графу 6 переносится
	// значение показателя из графы 5 по строке 130 приложения № 1 к декларации, заполненного в отношении соответствующего вида табачных изделий.
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000220012006.Значение = 0;
		ТабличныйДокумент.Области.П000220015006.Значение = 0;
		ТабличныйДокумент.Области.П000220018006.Значение = 0;
		
	Иначе
		
		СтруктураДанныхРаздел2.П000220012006 = 0;
		СтруктураДанныхРаздел2.П000220015006 = 0;
		СтруктураДанныхРаздел2.П000220018006 = 0;
		
	КонецЕсли;
	
	Код411_Строка130 = 0;
	Код430_Строка130 = 0;
	Код440_Строка130 = 0;
	
	Для каждого Экз Из ТблПриложение1 Цикл
		
		П000510013005 = Экз.Данные[0].Значение.П000510013005;
		П000510002000 = Экз.Данные[0].Значение.П000510002000;

		Если П000510002000 = "411" Тогда
			Код411_Строка130 = Код411_Строка130 + П000510013005;
		ИначеЕсли П000510002000 = "430" Тогда
			Код430_Строка130 = Код430_Строка130 + П000510013005;
		ИначеЕсли П000510002000 = "440" Тогда
			Код440_Строка130 = Код440_Строка130 + П000510013005;
		КонецЕсли;
	КонецЦикла;

	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000220012006.Значение = Код411_Строка130;
		ТабличныйДокумент.Области.П000220015006.Значение = Код430_Строка130;
		ТабличныйДокумент.Области.П000220018006.Значение = Код440_Строка130;
		
	Иначе
		
		СтруктураДанныхРаздел2.П000220012006 = Код411_Строка130;
		СтруктураДанныхРаздел2.П000220015006 = Код430_Строка130;
		СтруктураДанныхРаздел2.П000220018006 = Код440_Строка130;
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

&НаКлиенте
Процедура Проверить(Команда)
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	ПроверкаРаздел1 (СтруктураРезультата);
	ПроверкаРаздел2 (СтруктураРезультата);
	ПроверкаРаздел3 (СтруктураРезультата);
	ПроверкаРаздел4 (СтруктураРезультата);
	ПроверкаПриложение1 (СтруктураРезультата);
	ПроверкаПриложение2 (СтруктураРезультата);
	ПроверкаПриложение4 (СтруктураРезультата);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма)
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможно, показатели заполнены некорректно.");
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + ". " + ОписаниеКС);
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеНарушения);
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Норма);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздел1 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел2;
	Раздел3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	Приложение3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение3;
	Приложение4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение4;
	Приложение5 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение5;
	Приложение6 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение6;
	
	ТекстФормулы = "Раздел 1";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.1
	//--------------------------------------------------------------------------------------------------------------
	Если Число(Титульный.ОтчетГод) >= 2010 Тогда
		ОписаниеКС = "Сумма акциза к уплате по строке 030 раздела 1 должна быть равна значению строки 220 графы 8 Раздела 2.3.";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел1.СуммаНалога25Число1) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230022008));
		
		Расшифровка = "" + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел1.СуммаНалога25Число1) + " = " + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230022008);
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "Возможно имеет место одно из следующих нарушений: 1) занижение налоговой базы; 2) завышение налоговой базы; 3) неправильное применение ставки; 4) завышение налоговых вычетов";
			Норма = "Ст. 182, 183, 193, 194, 200, 201, 202 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка без номера
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма акциза к уменьшению по строке 050 должна быть равна значению строки 230 графы 8 Раздела 2.3.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел1.СуммаНалогаКУменьшению1) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230023008));
	
	Расшифровка = "" + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел1.СуммаНалогаКУменьшению1) + " = " + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230023008);
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Возможно имеет место одно из следующих нарушений: 1) занижение налоговой базы; 2) завышение налоговой базы; 3) неправильное применение ставки; 4) завышение налоговых вычетов";
		Норма = "Ст. 182, 183, 193, 194, 200, 201, 202 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздел2 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел2;
	Раздел3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	Приложение3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение3;
	Приложение4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение4;
	Приложение5 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение5;
	Приложение6 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение6;
	
	ТекстФормулы = "Раздел 2";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.2
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000520003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000520003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000520003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П2Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210002005 <> 0 Тогда
		ОписаниеКС = "Значение по строке 020 графы 5 Раздела 2.1 должно быть равно сумме строк 030 графы 7 Приложения 2, если значение по строке 030 графы 13 Приложения 2 больше нуля (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (Раздел2.П000210002005 = П2Ст030Гр7);
		
		Расшифровка = "" + Раздел2.П000210002005 + " = " + П2Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.3
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000520003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000520003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000520003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П2Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210007005 <> 0 Тогда
		ОписаниеКС = "Значение по строке 070 графы 5 Раздела 2.1 должно быть равно сумме строк 030 графы 7 Приложения 2, если значение по строке 030 графы 13 Приложения 2 больше нуля (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (Раздел2.П000210007005 = П2Ст030Гр7);
		
		Расшифровка = "" + Раздел2.П000210007005 + " = " + П2Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.4
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000520003008_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000520003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000520003008_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П2Ст030Гр8 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210002006 <> 0 Тогда
		ОписаниеКС = "Значение по строке 020 графы 6 Раздела 2.1 должно быть равно сумме строк 030 графы 8 Приложения 2, если значение по строке 030 графы 13 Приложения 2 больше нуля (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (Раздел2.П000210002006 = П2Ст030Гр8);
		
		Расшифровка = "" + Раздел2.П000210002006 + " = " + П2Ст030Гр8;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000520003008_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000520003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000520003008_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П2Ст030Гр8 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210007006 <> 0 Тогда
		ОписаниеКС = "Значение по строке 070 графы 6 Раздела 2.1 должно быть равно сумме строк 030 графы 8 Приложения 2, если значение по строке 030 графы 13 Приложения 2 больше нуля (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (Раздел2.П000210007006 = П2Ст030Гр8);
		
		Расшифровка = "" + Раздел2.П000210007006 + " = " + П2Ст030Гр8;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.6
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "460" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000520004013;
		КонецЕсли;
	КонецЦикла;
	П2Ст040Гр13 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210002009 <> 0 Тогда
		ОписаниеКС = "Значение по строке 020 графы 9 Раздела 2.1 должно быть равно значению строки 040 графы 13 Приложения 2 (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210002009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, П2Ст040Гр13));
		
		Расшифровка = "" + Раздел2.П000210002009 + " = " + П2Ст040Гр13;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.7
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "450" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000520004013;
		КонецЕсли;
	КонецЦикла;
	П2Ст040Гр13 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210007009 <> 0 Тогда
		ОписаниеКС = "Значение по строке 070 графы 9 Раздела 2.1 должно быть равно значению строки 040 графы 13 Приложения 2 (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210007009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, П2Ст040Гр13));
		
		Расшифровка = "" + Раздел2.П000210007009 + " = " + П2Ст040Гр13;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.8
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000520003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000520003014_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000520003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П2Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210003005 <> 0 Тогда
		ОписаниеКС = "Значение по строке 030 графы 5 Раздела 2.1 должно быть равно сумме строк 030 графы 7 Приложения 2, если значение по строке 030 графы 14 Приложения 2 больше нуля (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (Раздел2.П000210003005 = П2Ст030Гр7);
		
		Расшифровка = "" + Раздел2.П000210003005 + " = " + П2Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.9
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			Пока Страница1.Данные.Свойство("П000520003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000520003014_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000520003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П2Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210008005 <> 0 Тогда
		ОписаниеКС = "Значение по строке 080 графы 5 Раздела 2.1 должно быть равно сумме строк 030 графы 7 Приложения 2, если значение по строке 030 графы 14 Приложения 2 больше нуля (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (Раздел2.П000210008005 = П2Ст030Гр7);
		
		Расшифровка = "" + Раздел2.П000210008005 + " = " + П2Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.10
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "460" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000520004014;
		КонецЕсли;
	КонецЦикла;
	П2Ст040Гр14 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210003009 <> 0 Тогда
		ОписаниеКС = "Значение по строке 030 графы 9 Раздела 2.1 должно быть равно сумме строк 040 графы 14 Приложения 2 (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210003009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, П2Ст040Гр14));
		
		Расшифровка = "" + Раздел2.П000210003009 + " = " + П2Ст040Гр14;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.11
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		Если Страница1.Данные.П000520002000 = "450" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000520004014;
		КонецЕсли;
	КонецЦикла;
	П2Ст040Гр14 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение2 Цикл
		Если Страница2.Данные.П000520002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210008009 <> 0 Тогда
		ОписаниеКС = "Значение по строке 080 графы 9 Раздела 2.1 должно быть равно сумме строк 040 графы 14 Приложения 2 (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210008009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, П2Ст040Гр14));
		
		Расшифровка = "" + Раздел2.П000210008009 + " = " + П2Ст040Гр14;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.12
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000530003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000530003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000530003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П3Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210004005 <> 0 Тогда
		ОписаниеКС = "Значение по строке 040 графы 5 Раздела 2.1 должно быть равно сумме строк 030 графы 7 Приложения 3, если значение по строке 030 графы 13 Приложения 3 больше нуля (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (Раздел2.П000210004005 = П3Ст030Гр7);
		
		Расшифровка = "" + Раздел2.П000210004005 + " = " + П3Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.13
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000530003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000530003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000530003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П3Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210009005 <> 0 Тогда
		ОписаниеКС = "Значение по строке 090 графы 5 Раздела 2.1 должно быть равно сумме строк 030 графы 7 Приложения 3, если значение по строке 030 графы 13 Приложения 3 больше нуля (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (Раздел2.П000210009005 = П3Ст030Гр7);
		
		Расшифровка = "" + Раздел2.П000210009005 + " = " + П3Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.14
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000530003008_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000530003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000530003008_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П3Ст030Гр8 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210004006 <> 0 Тогда
		ОписаниеКС = "Значение по строке 040 графы 6 Раздела 2.1 должно быть равно сумме строк 030 графы 8 Приложения 3, если значение по строке 030 графы 13 Приложения 3 больше нуля (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (Раздел2.П000210004006 = П3Ст030Гр8);
		
		Расшифровка = "" + Раздел2.П000210004006 + " = " + П3Ст030Гр8;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.15
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000530003008_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000530003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000530003008_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П3Ст030Гр8 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210009006 <> 0 Тогда
		ОписаниеКС = "Значение по строке 090 графы 6 Раздела 2.1 должно быть равно сумме строк 030 графы 8 Приложения 3, если значение по строке 030 графы 13 Приложения 3 больше нуля (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (Раздел2.П000210009006 = П3Ст030Гр8);
		
		Расшифровка = "" + Раздел2.П000210009006 + " = " + П3Ст030Гр8;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.16
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "460" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000530004013;
		КонецЕсли;
	КонецЦикла;
	П3Ст040Гр13 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210004009 <> 0 Тогда
		ОписаниеКС = "Значение по строке 040 графы 9 Раздела 2.1 должно быть равно сумме строк 040 графы 13 Приложения 3 (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210004009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, П3Ст040Гр13));
		
		Расшифровка = "" + Раздел2.П000210004009 + " = " + П3Ст040Гр13;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.17
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "450" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000530004013;
		КонецЕсли;
	КонецЦикла;
	П3Ст040Гр13 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210009009 <> 0 Тогда
		ОписаниеКС = "Значение по строке 090 графы 9 Раздела 2.1 должно быть равно сумме строк 040 графы 13 Приложения 3 (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210009009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, П3Ст040Гр13));
		
		Расшифровка = "" + Раздел2.П000210009009 + " = " + П3Ст040Гр13;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.18
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000530003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000530003014_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000530003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П3Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210005005 <> 0 Тогда
		ОписаниеКС = "Значение по строке 050 графы 5 Раздела 2.1 должно быть равно сумме строк 030 графы 7 Приложения 3, если значение по строке 030 графы 14 Приложения 3 больше нуля (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (Раздел2.П000210005005 = П3Ст030Гр7);
		
		Расшифровка = "" + Раздел2.П000210005005 + " = " + П3Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.19
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000530003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000530003014_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000530003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П3Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210010005 <> 0 Тогда
		ОписаниеКС = "Значение по строке 100 графы 5 Раздела 2.1 должно быть равно сумме строк 030 графы 7 Приложения 3, если значение по строке 030 графы 14 Приложения 3 больше нуля (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (Раздел2.П000210010005 = П3Ст030Гр7);
		
		Расшифровка = "" + Раздел2.П000210010005 + " = " + П3Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.20
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "460" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000530004014;
		КонецЕсли;
	КонецЦикла;
	П3Ст040Гр14 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210005009 <> 0 Тогда
		ОписаниеКС = "Значение по строке 050 графы 9 Раздела 2.1 должно быть равно сумме строк 040 графы 14 Приложения 3 (для кода вида подакцизных товаров - 460).";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210005009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, П3Ст040Гр14));
		
		Расшифровка = "" + Раздел2.П000210005009 + " = " + П3Ст040Гр14;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.21
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение3 Цикл
		Если Страница1.Данные.П000530002000 = "450" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000530004014;
		КонецЕсли;
	КонецЦикла;
	П3Ст040Гр14 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение3 Цикл
		Если Страница2.Данные.П000530002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000210010009 <> 0 Тогда
		ОписаниеКС = "Значение по строке 100 графы 9 Раздела 2.1 должно быть равно сумме строк 040 графы 14 Приложения 3 (для кода вида подакцизных товаров - 450).";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210010009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, П3Ст040Гр14));
		
		Расшифровка = "" + Раздел2.П000210010009 + " = " + П3Ст040Гр14;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.22
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение по строке 010 графы 9 Раздела 2.1 должно быть равно сумме значений строки 020 графы 9, строки 030 графы 9, строки 040 графы 9 и строки 050 графы 9 по Разделу 2.1 (для кода вида подакцизных товаров - 460).";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210001009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210002009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210003009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210004009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210005009));
	
	Расшифровка = "" + Раздел2.П000210001009 + " = " + Раздел2.П000210002009 + " + " + Раздел2.П000210003009 + " + " + Раздел2.П000210004009 + " + " + Раздел2.П000210005009 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210002009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210003009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210004009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210005009)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.23
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение по строке 060 графы 9 Раздела 2.1 должно быть равно сумме значений строки 070 графы 9, строки 080 графы 9, строки 090 графы 9 и строки 100 графы 9 по Разделу 2.1 (для кода вида подакцизных товаров - 450).";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210006009) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210007009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210008009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210009009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210010009));
	
	Расшифровка = "" + Раздел2.П000210006009 + " = " + Раздел2.П000210007009 + " + " + Раздел2.П000210008009 + " + " + Раздел2.П000210009009 + " + " + Раздел2.П000210010009 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210007009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210008009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210009009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210010009)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.24
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000510002000 = "411" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000510013005;
		КонецЕсли;
	КонецЦикла;
	П1Ст130Гр5 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение1 Цикл
		Если Страница2.Данные.П000510002000 = "411" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000220012006 <> 0 Тогда
		ОписаниеКС = "Значение по строке 120 графы 6 Раздела 2.2 должно быть равно значению строки 130 графы 5 Приложения 1 (для кода вида подакцизных товаров - 411).";
		
		ЭтоОшибка = Не (Раздел2.П000220012006 = П1Ст130Гр5);
		
		Расшифровка = "" + Раздел2.П000220012006 + " = " + П1Ст130Гр5;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.25
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000510002000 = "430" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000510013005;
		КонецЕсли;
	КонецЦикла;
	П1Ст130Гр5 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение1 Цикл
		Если Страница2.Данные.П000510002000 = "430" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000220015006 <> 0 Тогда
		ОписаниеКС = "Значение по строке 150 графы 6 Раздела 2.2 должно быть равно значению строки 130 графы 5 Приложения 1 (для кода вида подакцизных товаров - 430).";
		
		ЭтоОшибка = Не (Раздел2.П000220015006 = П1Ст130Гр5);
		
		Расшифровка = "" + Раздел2.П000220015006 + " = " + П1Ст130Гр5;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.26
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000510002000 = "440" Тогда
			Сумма1 = Сумма1 + Страница1.Данные.П000510013005;
		КонецЕсли;
	КонецЦикла;
	П1Ст130Гр5 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение1 Цикл
		Если Страница2.Данные.П000510002000 = "440" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел2.П000220018006 <> 0 Тогда
		ОписаниеКС = "Значение по строке 180 графы 6 Раздела 2.2 должно быть равно значению строки 130 графы 5 Приложения 1 (для кода вида подакцизных товаров - 440).";
		
		ЭтоОшибка = Не (Раздел2.П000220018006 = П1Ст130Гр5);
		
		Расшифровка = "" + Раздел2.П000220018006 + " = " + П1Ст130Гр5;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.27 110
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 110 графы 8 Раздела 2.2 должно быть равно произведению значений соответствующих строк по графам 6 и 7.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220011008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220011006 * Раздел2.П000220011007));
	
	Расшифровка = "" + Раздел2.П000220011008 + " = " + Раздел2.П000220011006 + " х " + Раздел2.П000220011007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220011006 * Раздел2.П000220011007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.27 120
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 120 графы 8 Раздела 2.2 должно быть равно произведению значений соответствующих строк по графам 6 и 7.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220012008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220012006 * Раздел2.П000220012007));
	
	Расшифровка = "" + Раздел2.П000220012008 + " = " + Раздел2.П000220012006 + " х " + Раздел2.П000220012007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220012006 * Раздел2.П000220012007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.27 130
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 130 графы 8 Раздела 2.2 должно быть равно произведению значений соответствующих строк по графам 6 и 7.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220013008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220013006 * Раздел2.П000220013007));
	
	Расшифровка = "" + Раздел2.П000220013008 + " = " + Раздел2.П000220013006 + " х " + Раздел2.П000220013007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220013006 * Раздел2.П000220013007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.27 140
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 140 графы 8 Раздела 2.2 должно быть равно произведению значений соответствующих строк по графам 6 и 7.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220014008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220014006 * Раздел2.П000220014007));
	
	Расшифровка = "" + Раздел2.П000220014008 + " = " + Раздел2.П000220014006 + " х " + Раздел2.П000220014007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220014006 * Раздел2.П000220014007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.27 150
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 150 графы 8 Раздела 2.2 должно быть равно произведению значений соответствующих строк по графам 6 и 7.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220015008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220015006 * Раздел2.П000220015007));
	
	Расшифровка = "" + Раздел2.П000220015008 + " = " + Раздел2.П000220015006 + " х " + Раздел2.П000220015007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220015006 * Раздел2.П000220015007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.27 160
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 160 графы 8 Раздела 2.2 должно быть равно произведению значений соответствующих строк по графам 6 и 7.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220016008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220016006 * Раздел2.П000220016007));
	
	Расшифровка = "" + Раздел2.П000220016008 + " = " + Раздел2.П000220016006 + " х " + Раздел2.П000220016007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220016006 * Раздел2.П000220016007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.27 170
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 170 графы 8 Раздела 2.2 должно быть равно произведению значений соответствующих строк по графам 6 и 7.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220017008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220017006 * Раздел2.П000220017007));
	
	Расшифровка = "" + Раздел2.П000220017008 + " = " + Раздел2.П000220017006 + " х " + Раздел2.П000220017007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220017006 * Раздел2.П000220017007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.27 180
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 180 графы 8 Раздела 2.2 должно быть равно произведению значений соответствующих строк по графам 6 и 7.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220018008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220018006 * Раздел2.П000220018007));
	
	Расшифровка = "" + Раздел2.П000220018008 + " = " + Раздел2.П000220018006 + " х " + Раздел2.П000220018007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220018006 * Раздел2.П000220018007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.27 190
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 190 графы 8 Раздела 2.2 должно быть равно произведению значений соответствующих строк по графам 6 и 7.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220019008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220019006 * Раздел2.П000220019007));
	
	Расшифровка = "" + Раздел2.П000220019008 + " = " + Раздел2.П000220019006 + " х " + Раздел2.П000220019007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220019006 * Раздел2.П000220019007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.29
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Итого сумма акциза, исчисленная за налоговый период (строка 200 графа 8 Раздела 2.3) должна быть равна сумме значений строки 010 графа 9 Раздела 2.1, строки 060 графы 9 Раздела 2.1, строки 110 графы 8 Раздела 2.2, строки 140 графы 8 Раздела 2.2, строки 170 графы 8 Раздела 2.2, строки 130 графы 7 Раздела 3.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230020008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210001009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210006009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220011008) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220014008) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220017008) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030013007));
	
	Расшифровка = "" + Раздел2.П000230020008 + " = " + Раздел2.П000210001009 + " + " + Раздел2.П000210006009 + " + " + Раздел2.П000220011008 + " + " + Раздел2.П000220014008 + " + " + Раздел2.П000220017008 + " + " + Раздел3.П000030013007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210001009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000210006009) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220011008) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220014008) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000220017008) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030013007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.30
	//--------------------------------------------------------------------------------------------------------------
	Если Раздел2.П000230020008 >= Раздел2.П000230021008 Тогда
		ОписаниеКС = "Сумма акциза, подлежащая уплате в бюджет (строка 220 графы 8 Раздела 2.3) должна быть равна разнице значений по строке 200 графы 8 Раздела 2.3 и строки 210 графы 8 Раздела 2.3, при условии, что значение строки 200 графы 8 Раздела 2.3 больше или равно значению строки 210 графы 8 Раздела 2.3.";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230022008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230020008) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230021008));
		
		Расшифровка = "" + Раздел2.П000230022008 + " = " + Раздел2.П000230020008 + " - " + Раздел2.П000230021008 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230020008) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230021008)) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "Возможно имеет место одно из следующих нарушений: 1) занижение налоговой базы; 2) завышение налоговой базы; 3) неправильное применение ставки; 4) завышение налоговых вычетов";
			Норма = "ст. 182, 183, 193, 194, 200, 201, 202 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.31
	//--------------------------------------------------------------------------------------------------------------
	Если Раздел2.П000230020008 <= Раздел2.П000230021008 Тогда
		ОписаниеКС = "Сумма превышения налоговых вычетов (строка 230 графы 8 Раздела 2.3) должна быть равна разнице значений по строке 210 графы 8 Раздела 2.3 и строке 200 графы 8 Раздела 2.3, при условии, что значение по строке 210 графы 8 Раздела 2.3 меньше значения по строке 200 графы 8 Раздела 2.3 .";
		
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230023008) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230021008) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230020008));
		
		Расшифровка = "" + Раздел2.П000230023008 + " = " + Раздел2.П000230021008 + " - " + Раздел2.П000230020008 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230021008) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел2.П000230020008)) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "Возможно имеет место одно из следующих нарушений: 1) занижение налоговой базы; 2) завышение налоговой базы; 3) неправильное применение ставки; 4) завышение налоговых вычетов";
			Норма = "ст. 182, 183, 193, 194, 200, 201, 202 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздел3 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел2;
	Раздел3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	Приложение3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение3;
	Приложение4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение4;
	Приложение5 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение5;
	Приложение6 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение6;
	
	ТекстФормулы = "Раздел 3";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.32
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение5 Цикл
		Если Страница1.Данные.П000550002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000550003008_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000550003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000550003008_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П5Ст030Гр8 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение5 Цикл
		Если Страница2.Данные.П000550002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030005105 <> 0 Тогда
		ОписаниеКС = "Значение по строке 051 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 8 Приложения 5, если значение по строке 030 графы 13 Приложения 5 больше нуля (для кода вида подакцизных товаров 450).";
		
		ЭтоОшибка = Не (Раздел3.П000030005105 = П5Ст030Гр8);
		
		Расшифровка = "" + Раздел3.П000030005105 + " = " + П5Ст030Гр8;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.33
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение5 Цикл
		Если Страница1.Данные.П000550002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000550003008_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000550003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000550003008_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П5Ст030Гр8 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение5 Цикл
		Если Страница2.Данные.П000550002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030006105 <> 0 Тогда
		ОписаниеКС = "Значение по строке 061 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 8 Приложения 5, если значение по строке 030 графы 13 Приложения 5 больше нуля (для кода вида подакцизных товаров 460).";
		
		ЭтоОшибка = Не (Раздел3.П000030006105 = П5Ст030Гр8);
		
		Расшифровка = "" + Раздел3.П000030006105 + " = " + П5Ст030Гр8;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.34
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение5 Цикл
		Если Страница1.Данные.П000550002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000550003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000550003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000550003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П5Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение5 Цикл
		Если Страница2.Данные.П000550002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030005205 <> 0 Тогда
		ОписаниеКС = "Значение по строке 052 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 7 Приложения 5, если значение по строке 030 графы 13 Приложения 5 больше нуля (для кода вида подакцизных товаров 450).";
		
		ЭтоОшибка = Не (Раздел3.П000030005205 = П5Ст030Гр7);
		
		Расшифровка = "" + Раздел3.П000030005205 + " = " + П5Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.35
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение5 Цикл
		Если Страница1.Данные.П000550002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000550003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000550003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000550003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П5Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение5 Цикл
		Если Страница2.Данные.П000550002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030006205 <> 0 Тогда
		ОписаниеКС = "Значение по строке 062 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 7 Приложения 5, если значение по строке 030 графы 13 Приложения 5 больше нуля (для кода вида подакцизных товаров 460).";
		
		ЭтоОшибка = Не (Раздел3.П000030006205 = П5Ст030Гр7);
		
		Расшифровка = "" + Раздел3.П000030006205 + " = " + П5Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.36
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение6 Цикл
		Если Страница1.Данные.П000560002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000560003008_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000560003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000560003008_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П6Ст030Гр8 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение6 Цикл
		Если Страница2.Данные.П000560002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030011105 <> 0 Тогда
		ОписаниеКС = "Значение по строке 111 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 8 Приложения 6, если значение по строке 030 графы 13 Приложения 6 больше нуля (для кода вида подакцизных товаров 450).";
		
		ЭтоОшибка = Не (Раздел3.П000030011105 = П6Ст030Гр8);
		
		Расшифровка = "" + Раздел3.П000030011105 + " = " + П6Ст030Гр8;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.37
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение6 Цикл
		Если Страница1.Данные.П000560002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000560003008_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000560003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000560003008_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П6Ст030Гр8 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение6 Цикл
		Если Страница2.Данные.П000560002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030012105 <> 0 Тогда
		ОписаниеКС = "Значение по строке 121 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 8 Приложения 6, если значение по строке 030 графы 13 Приложения 6 больше нуля (для кода вида подакцизных товаров 460).";
		
		ЭтоОшибка = Не (Раздел3.П000030012105 = П6Ст030Гр8);
		
		Расшифровка = "" + Раздел3.П000030012105 + " = " + П6Ст030Гр8;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.38
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение6 Цикл
		Если Страница1.Данные.П000560002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000560003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000560003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000560003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П6Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение6 Цикл
		Если Страница2.Данные.П000560002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030011205 <> 0 Тогда
		ОписаниеКС = "Значение по строке 112 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 7 Приложения 6, если значение по строке 030 графы 13 Приложения 6 больше нуля (для кода вида подакцизных товаров 450).";
		
		ЭтоОшибка = Не (Раздел3.П000030011205 = П6Ст030Гр7);
		
		Расшифровка = "" + Раздел3.П000030011205 + " = " + П6Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.39
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение6 Цикл
		Если Страница1.Данные.П000560002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000560003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000560003013_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000560003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П6Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение6 Цикл
		Если Страница2.Данные.П000560002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030012205 <> 0 Тогда
		ОписаниеКС = "Значение по строке 122 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 7 Приложения 6, если значение по строке 030 графы 13 Приложения 6 больше нуля (для кода вида подакцизных товаров 460).";
		
		ЭтоОшибка = Не (Раздел3.П000030012205 = П6Ст030Гр7);
		
		Расшифровка = "" + Раздел3.П000030012205 + " = " + П6Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.40
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение5 Цикл
		Если Страница1.Данные.П000550002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000550003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000550003014_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000550003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П5Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение5 Цикл
		Если Страница2.Данные.П000550002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030005305 <> 0 Тогда
		ОписаниеКС = "Значение по строке 053 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 7 Приложения 5, если значение по строке 030 графы 14 Приложения 5 больше нуля (для кода вида подакцизных товаров 450).";
		
		ЭтоОшибка = Не (Раздел3.П000030005305 = П5Ст030Гр7);
		
		Расшифровка = "" + Раздел3.П000030005305 + " = " + П5Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.41
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение5 Цикл
		Если Страница1.Данные.П000550002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000550003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000550003014_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000550003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П5Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение5 Цикл
		Если Страница2.Данные.П000550002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030006305 <> 0 Тогда
		ОписаниеКС = "Значение по строке 063 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 7 Приложения 5, если значение по строке 030 графы 14 Приложения 5 больше нуля (для кода вида подакцизных товаров 460).";
		
		ЭтоОшибка = Не (Раздел3.П000030006305 = П5Ст030Гр7);
		
		Расшифровка = "" + Раздел3.П000030006305 + " = " + П5Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.42
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение6 Цикл
		Если Страница1.Данные.П000560002000 = "450" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000560003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000560003014_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000560003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П6Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение6 Цикл
		Если Страница2.Данные.П000560002000 = "450" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030011305 <> 0 Тогда
		ОписаниеКС = "Значение по строке 113 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 7 Приложения 6, если значение по строке 030 графы 14 Приложения 6 больше нуля (для кода вида подакцизных товаров 450).";
		
		ЭтоОшибка = Не (Раздел3.П000030011305 = П6Ст030Гр7);
		
		Расшифровка = "" + Раздел3.П000030011305 + " = " + П6Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.43
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение6 Цикл
		Если Страница1.Данные.П000560002000 = "460" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			НомерСтроки1Стр = "1";
			Пока Страница1.Данные.Свойство("П000560003007_" + НомерСтроки1Стр) Цикл
				Если Страница1.Данные["П000560003014_" + НомерСтроки1Стр] > 0 Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000560003007_" + НомерСтроки1Стр];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
				НомерСтроки1Стр = Формат(НомерСтроки1, "ЧГ=");
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П6Ст030Гр7 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Приложение6 Цикл
		Если Страница2.Данные.П000560002000 = "460" Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	Если КолСтраниц1 > 0 Или Раздел3.П000030012305 <> 0 Тогда
		ОписаниеКС = "Значение по строке 123 графы 5 Раздела 3 должно быть равно сумме строк 030 графы 7 Приложения 6, если значение по строке 030 графы 14 Приложения 6 больше нуля (для кода вида подакцизных товаров 460).";
		
		ЭтоОшибка = Не (Раздел3.П000030012305 = П6Ст030Гр7);
		
		Расшифровка = "" + Раздел3.П000030012305 + " = " + П6Ст030Гр7;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЕсли;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 020
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 020 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030002007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030002005 * Раздел3.П000030002006));
	
	Расшифровка = "" + Раздел3.П000030002007 + " = " + Раздел3.П000030002005 + " х " + Раздел3.П000030002006 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030002005 * Раздел3.П000030002006)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 030
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 030 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030003007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030003005 * Раздел3.П000030003006));
	
	Расшифровка = "" + Раздел3.П000030003007 + " = " + Раздел3.П000030003005 + " х " + Раздел3.П000030003006 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030003005 * Раздел3.П000030003006)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 040
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 040 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030004007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030004005 * Раздел3.П000030004006));
	
	Расшифровка = "" + Раздел3.П000030004007 + " = " + Раздел3.П000030004005 + " х " + Раздел3.П000030004006 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030004005 * Раздел3.П000030004006)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 051
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 051 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005107) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005105 * Раздел3.П000030005106));
	
	Расшифровка = "" + Раздел3.П000030005107 + " = " + Раздел3.П000030005105 + " х " + Раздел3.П000030005106 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005105 * Раздел3.П000030005106)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 052
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 052 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005207) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005205 * Раздел3.П000030005206));
	
	Расшифровка = "" + Раздел3.П000030005207 + " = " + Раздел3.П000030005205 + " х " + Раздел3.П000030005206 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005205 * Раздел3.П000030005206)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 053
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 053 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005307) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005305 * Раздел3.П000030005306));
	
	Расшифровка = "" + Раздел3.П000030005307 + " = " + Раздел3.П000030005305 + " х " + Раздел3.П000030005306 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005305 * Раздел3.П000030005306)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 061
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 061 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006107) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006105 * Раздел3.П000030006106));
	
	Расшифровка = "" + Раздел3.П000030006107 + " = " + Раздел3.П000030006105 + " х " + Раздел3.П000030006106 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006105 * Раздел3.П000030006106)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 062
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 062 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006207) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006205 * Раздел3.П000030006206));
	
	Расшифровка = "" + Раздел3.П000030006207 + " = " + Раздел3.П000030006205 + " х " + Раздел3.П000030006206 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006205 * Раздел3.П000030006206)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 063
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 063 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006307) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006305 * Раздел3.П000030006306));
	
	Расшифровка = "" + Раздел3.П000030006307 + " = " + Раздел3.П000030006305 + " х " + Раздел3.П000030006306 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006305 * Раздел3.П000030006306)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 080
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 080 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030008007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030008005 * Раздел3.П000030008006));
	
	Расшифровка = "" + Раздел3.П000030008007 + " = " + Раздел3.П000030008005 + " х " + Раздел3.П000030008006 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030008005 * Раздел3.П000030008006)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 090
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 090 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030009007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030009005 * Раздел3.П000030009006));
	
	Расшифровка = "" + Раздел3.П000030009007 + " = " + Раздел3.П000030009005 + " х " + Раздел3.П000030009006 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030009005 * Раздел3.П000030009006)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 100
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 100 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030010007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030010005 * Раздел3.П000030010006));
	
	Расшифровка = "" + Раздел3.П000030010007 + " = " + Раздел3.П000030010005 + " х " + Раздел3.П000030010006 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030010005 * Раздел3.П000030010006)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 111
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 111 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011107) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011105 * Раздел3.П000030011106));
	
	Расшифровка = "" + Раздел3.П000030011107 + " = " + Раздел3.П000030011105 + " х " + Раздел3.П000030011106 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011105 * Раздел3.П000030011106)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 112
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 112 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011207) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011205 * Раздел3.П000030011206));
	
	Расшифровка = "" + Раздел3.П000030011207 + " = " + Раздел3.П000030011205 + " х " + Раздел3.П000030011206 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011205 * Раздел3.П000030011206)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 113
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 113 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011307) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011305 * Раздел3.П000030011306));
	
	Расшифровка = "" + Раздел3.П000030011307 + " = " + Раздел3.П000030011305 + " х " + Раздел3.П000030011306 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011305 * Раздел3.П000030011306)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 121
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 121 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012107) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012105 * Раздел3.П000030012106));
	
	Расшифровка = "" + Раздел3.П000030012107 + " = " + Раздел3.П000030012105 + " х " + Раздел3.П000030012106 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012105 * Раздел3.П000030012106)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 122
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 122 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012207) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012205 * Раздел3.П000030012206));
	
	Расшифровка = "" + Раздел3.П000030012207 + " = " + Раздел3.П000030012205 + " х " + Раздел3.П000030012206 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012205 * Раздел3.П000030012206)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.44 123
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 123 графы 7 Раздела 3 должно быть равно произведению значений этой строки по графам 5 и 6.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012307) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012305 * Раздел3.П000030012306));
	
	Расшифровка = "" + Раздел3.П000030012307 + " = " + Раздел3.П000030012305 + " х " + Раздел3.П000030012306 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012305 * Раздел3.П000030012306)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "Неправильное применение ставки, или неправильное определение налоговой базы";
		Норма = "ст. 193, 194 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.45
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма экспорта табачных изделий по строке 010 графы 7 Раздела 3 должна быть равна сумме значений строки 020 графы 7 Раздела 3, строки 030 графы 7 Раздела 3, строки 040 графы 7 Раздела 3, строки 050 графы 7 Раздела 3, строки 060 графы 7 Раздела 3.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030001007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030002007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030003007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030004007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006007));
	
	Расшифровка = "" + Раздел3.П000030001007 + " = " + Раздел3.П000030002007 + " + " + Раздел3.П000030003007 + " + " + Раздел3.П000030004007 + " + " + Раздел3.П000030005007 + " + " + Раздел3.П000030006007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030002007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030003007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030004007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.46
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма акциза по строке 050 графы 7 Раздела 3 должна быть равна сумме значений строки 051 графы 7 Раздела 3, строки 052 графы 7 Раздела 3, строки 053 графы 7 Раздела 3.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005107) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005207) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005307));
	
	Расшифровка = "" + Раздел3.П000030005007 + " = " + Раздел3.П000030005107 + " + " + Раздел3.П000030005207 + " + " + Раздел3.П000030005307 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005107) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005207) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030005307)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.47
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма акциза по строке 060 графы 7 Раздела 3 должна быть равна сумме значений строки 061 графы 7 Раздела 3, строки 062 графы 7 Раздела 3, строки 063 графы 7 Раздела 3.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006107) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006207) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006307));
	
	Расшифровка = "" + Раздел3.П000030006007 + " = " + Раздел3.П000030006107 + " + " + Раздел3.П000030006207 + " + " + Раздел3.П000030006307 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006107) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006207) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030006307)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.48
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма акциза по строке 070 графы 7 Раздела 3 должна быть равна сумме значений строки 080 графы 7 Раздела 3, строки 090 графы 7 Раздела 3, строки 100 графы 7 Раздела 3, строки 110 графы 7 Раздела 3, строки 120 графы 7 Раздела 3.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030007007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030008007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030009007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030010007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012007));
	
	Расшифровка = "" + Раздел3.П000030007007 + " = " + Раздел3.П000030008007 + " + " + Раздел3.П000030009007 + " + " + Раздел3.П000030010007 + " + " + Раздел3.П000030011007 + " + " + Раздел3.П000030012007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030008007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030009007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030010007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.49
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма акциза по строке 110 графы 7 Раздела 3 должна быть равна сумме значений строки 111 графы 7 Раздела 3, строки 112 графы 7 Раздела 3, строки 113 графы 7 Раздела 3.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011107) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011207) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011307));
	
	Расшифровка = "" + Раздел3.П000030011007 + " = " + Раздел3.П000030011107 + " + " + Раздел3.П000030011207 + " + " + Раздел3.П000030011307 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011107) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011207) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030011307)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.50
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма акциза по строке 120 графы 7 Раздела 3 должна быть равна сумме значений строки 121 графы 7 Раздела 3, строки 122 графы 7 Раздела 3, строки 123 графы 7 Раздела 3.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012107) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012207) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012307));
	
	Расшифровка = "" + Раздел3.П000030012007 + " = " + Раздел3.П000030012107 + " + " + Раздел3.П000030012207 + " + " + Раздел3.П000030012307 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012107) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012207) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030012307)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.51
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма акциза по строке 130 графы 7 Раздела 3 должна быть равна сумме значений строки 010 графы 7 Раздела 3 и строки 070 графы 7 Раздела 3.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030013007) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030001007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030007007));
	
	Расшифровка = "" + Раздел3.П000030013007 + " = " + Раздел3.П000030001007 + " + " + Раздел3.П000030007007 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030001007) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел3.П000030007007)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздел4 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел2;
	Раздел3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	Приложение3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение3;
	Приложение4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение4;
	Приложение5 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение5;
	Приложение6 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение6;
	
	ТекстФормулы = "Раздел 4";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.52
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма акциза по строке 110 графы 5 Раздела 4 должна быть равна сумме значений по строкам 010, 020, 030, 040, 050, 060, 070, 080, 090, 100 графы 5 Раздела 4.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040011005) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040001005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040002005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040003005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040004005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040005005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040006005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040007005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040008005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040009005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040010005));
	
	Расшифровка = "" + Раздел4.П000040011005 + " = " + Раздел4.П000040001005 + " + " + Раздел4.П000040002005 + " + " + Раздел4.П000040003005 + " + " + Раздел4.П000040004005 + " + " + Раздел4.П000040005005 + " + " + Раздел4.П000040006005 + " + " + Раздел4.П000040007005 + " + " + Раздел4.П000040008005 + " + " + Раздел4.П000040009005 + " + " + Раздел4.П000040010005 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040001005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040002005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040003005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040004005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040005005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040006005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040007005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040008005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040009005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040010005)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.53
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Сумма акциза по строке 220 графы 5 Раздела 4 должна быть равна сумме значений по строкам 120, 130, 140, 150, 160, 170, 180, 190, 200, 210 графы 5 Раздела 4.";
	
	ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040022005) = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040012005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040013005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040014005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040015005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040016005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040017005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040018005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040019005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040020005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040021005));
	
	Расшифровка = "" + Раздел4.П000040022005 + " = " + Раздел4.П000040012005 + " + " + Раздел4.П000040013005 + " + " + Раздел4.П000040014005 + " + " + Раздел4.П000040015005 + " + " + Раздел4.П000040016005 + " + " + Раздел4.П000040017005 + " + " + Раздел4.П000040018005 + " + " + Раздел4.П000040019005 + " + " + Раздел4.П000040020005 + " + " + Раздел4.П000040021005 + " Итог [" + (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040012005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040013005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040014005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040015005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040016005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040017005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040018005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040019005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040020005) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Раздел4.П000040021005)) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПриложение1 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел2;
	Раздел3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	Приложение3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение3;
	Приложение4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение4;
	Приложение5 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение5;
	Приложение6 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение6;
	
	ТекстФормулы = "Приложение 1";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.54
	//--------------------------------------------------------------------------------------------------------------
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Налоговая база по строке 130 графы 5 Приложения 1 должна быть равна сумме значений по строкам 050, 060, 070, 080, 090, 100, 110, 120 графы 5 Приложения 1.";
		
		ЭтоОшибка = Не (Страница1.Данные.П000510013005 = Страница1.Данные.П000510005005 + Страница1.Данные.П000510006005 + Страница1.Данные.П000510007005 + Страница1.Данные.П000510008005 + Страница1.Данные.П000510009005 + Страница1.Данные.П000510010005 + Страница1.Данные.П000510011005 + Страница1.Данные.П000510012005);
		
		Расшифровка = "" + Страница1.Данные.П000510013005 + " = " + Страница1.Данные.П000510005005 + " + " + Страница1.Данные.П000510006005 + " + " + Страница1.Данные.П000510007005 + " + " + Страница1.Данные.П000510008005 + " + " + Страница1.Данные.П000510009005 + " + " + Страница1.Данные.П000510010005 + " + " + Страница1.Данные.П000510011005 + " + " + Страница1.Данные.П000510012005 + " Итог [" + (Страница1.Данные.П000510005005 + Страница1.Данные.П000510006005 + Страница1.Данные.П000510007005 + Страница1.Данные.П000510008005 + Страница1.Данные.П000510009005 + Страница1.Данные.П000510010005 + Страница1.Данные.П000510011005 + Страница1.Данные.П000510012005) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПриложение2 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел2;
	Раздел3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	Приложение3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение3;
	Приложение4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение4;
	Приложение5 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение5;
	Приложение6 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение6;
	
	ТекстФормулы = "Приложение 2";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.55
	//--------------------------------------------------------------------------------------------------------------
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Значение налоговой базы в строке 041 графы 5 Приложения 2 должно быть равно значению в строке 040 графы 7 Приложения 2.";
		
		ЭтоОшибка = Не (Страница1.Данные.П000520004105 = Страница1.Данные.П000520004007);
		
		Расшифровка = "" + Страница1.Данные.П000520004105 + " = " + Страница1.Данные.П000520004007;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.56
	//--------------------------------------------------------------------------------------------------------------
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Значение налоговой базы в строке 041 графы 6 Приложения 2 должно быть равно значению в строке 040 графы 8 Приложения 2.";
		
		ЭтоОшибка = Не (Страница1.Данные.П000520004106 = Страница1.Данные.П000520004008);
		
		Расшифровка = "" + Страница1.Данные.П000520004106 + " = " + Страница1.Данные.П000520004008;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.57
	//--------------------------------------------------------------------------------------------------------------
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Значение налоговой базы в строке 041 графы 5 Приложения 2 должно быть равно сумме значений по строкам 050, 060, 070, 080, 090, 100, 110, 120 графы 5 Приложения 2.";
		
		ЭтоОшибка = Не (Страница1.Данные.П000520004105 = Страница1.Данные.П000520005005 + Страница1.Данные.П000520006005 + Страница1.Данные.П000520007005 + Страница1.Данные.П000520008005 + Страница1.Данные.П000520009005 + Страница1.Данные.П000520010005 + Страница1.Данные.П000520011005 + Страница1.Данные.П000520012005);
		
		Расшифровка = "" + Страница1.Данные.П000520004105 + " = " + Страница1.Данные.П000520005005 + " + " + Страница1.Данные.П000520006005 + " + " + Страница1.Данные.П000520007005 + " + " + Страница1.Данные.П000520008005 + " + " + Страница1.Данные.П000520009005 + " + " + Страница1.Данные.П000520010005 + " + " + Страница1.Данные.П000520011005 + " + " + Страница1.Данные.П000520012005 + " Итог [" + (Страница1.Данные.П000520005005 + Страница1.Данные.П000520006005 + Страница1.Данные.П000520007005 + Страница1.Данные.П000520008005 + Страница1.Данные.П000520009005 + Страница1.Данные.П000520010005 + Страница1.Данные.П000520011005 + Страница1.Данные.П000520012005) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.58
	//--------------------------------------------------------------------------------------------------------------
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Приложение2 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Значение налоговой базы в строке 041 графы 6 Приложения 2 должно быть равно сумме значений по строкам 050, 060, 070, 080, 090, 100, 110, 120 графы 6 Приложения 2.";
		
		ЭтоОшибка = Не (Страница1.Данные.П000520004106 = Страница1.Данные.П000520005006 + Страница1.Данные.П000520006006 + Страница1.Данные.П000520007006 + Страница1.Данные.П000520008006 + Страница1.Данные.П000520009006 + Страница1.Данные.П000520010006 + Страница1.Данные.П000520011006 + Страница1.Данные.П000520012006);
		
		Расшифровка = "" + Страница1.Данные.П000520004106 + " = " + Страница1.Данные.П000520005006 + " + " + Страница1.Данные.П000520006006 + " + " + Страница1.Данные.П000520007006 + " + " + Страница1.Данные.П000520008006 + " + " + Страница1.Данные.П000520009006 + " + " + Страница1.Данные.П000520010006 + " + " + Страница1.Данные.П000520011006 + " + " + Страница1.Данные.П000520012006 + " Итог [" + (Страница1.Данные.П000520005006 + Страница1.Данные.П000520006006 + Страница1.Данные.П000520007006 + Страница1.Данные.П000520008006 + Страница1.Данные.П000520009006 + Страница1.Данные.П000520010006 + Страница1.Данные.П000520011006 + Страница1.Данные.П000520012006) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "";
			Норма = "Арифметическая ошибка";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПриложение4 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел2;
	Раздел3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	Приложение3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение3;
	Приложение4 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение4;
	Приложение5 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение5;
	Приложение6 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение6;
	
	ТекстФормулы = "Приложение 4";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.59 010
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 010 графы 5 Приложения 4 должно быть равно сумме значений по графам 6 и 7 этой же строки.";
	
	ЭтоОшибка = Не (Приложение4.П000540001005 = Приложение4.П000540001006 + Приложение4.П000540001007);
	
	Расшифровка = "" + Приложение4.П000540001005 + " = " + Приложение4.П000540001006 + " + " + Приложение4.П000540001007 + " Итог [" + (Приложение4.П000540001006 + Приложение4.П000540001007) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.59 020
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 020 графы 5 Приложения 4 должно быть равно сумме значений по графам 6 и 7 этой же строки.";
	
	ЭтоОшибка = Не (Приложение4.П000540002005 = Приложение4.П000540002006 + Приложение4.П000540002007);
	
	Расшифровка = "" + Приложение4.П000540002005 + " = " + Приложение4.П000540002006 + " + " + Приложение4.П000540002007 + " Итог [" + (Приложение4.П000540002006 + Приложение4.П000540002007) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.59 030
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 030 графы 5 Приложения 4 должно быть равно сумме значений по графам 6 и 7 этой же строки.";
	
	ЭтоОшибка = Не (Приложение4.П000540003005 = Приложение4.П000540003006 + Приложение4.П000540003007);
	
	Расшифровка = "" + Приложение4.П000540003005 + " = " + Приложение4.П000540003006 + " + " + Приложение4.П000540003007 + " Итог [" + (Приложение4.П000540003006 + Приложение4.П000540003007) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.59 040
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 040 графы 5 Приложения 4 должно быть равно сумме значений по графам 6 и 7 этой же строки.";
	
	ЭтоОшибка = Не (Приложение4.П000540004005 = Приложение4.П000540004006 + Приложение4.П000540004007);
	
	Расшифровка = "" + Приложение4.П000540004005 + " = " + Приложение4.П000540004006 + " + " + Приложение4.П000540004007 + " Итог [" + (Приложение4.П000540004006 + Приложение4.П000540004007) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.59 050
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 050 графы 5 Приложения 4 должно быть равно сумме значений по графам 6 и 7 этой же строки.";
	
	ЭтоОшибка = Не (Приложение4.П000540005005 = Приложение4.П000540005006 + Приложение4.П000540005007);
	
	Расшифровка = "" + Приложение4.П000540005005 + " = " + Приложение4.П000540005006 + " + " + Приложение4.П000540005007 + " Итог [" + (Приложение4.П000540005006 + Приложение4.П000540005007) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.59 060
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 060 графы 5 Приложения 4 должно быть равно сумме значений по графам 6 и 7 этой же строки.";
	
	ЭтоОшибка = Не (Приложение4.П000540006005 = Приложение4.П000540006006 + Приложение4.П000540006007);
	
	Расшифровка = "" + Приложение4.П000540006005 + " = " + Приложение4.П000540006006 + " + " + Приложение4.П000540006007 + " Итог [" + (Приложение4.П000540006006 + Приложение4.П000540006007) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 1.59 070
	//--------------------------------------------------------------------------------------------------------------
	ОписаниеКС = "Значение строки 070 графы 5 Приложения 4 должно быть равно сумме значений по графам 6 и 7 этой же строки.";
	
	ЭтоОшибка = Не (Приложение4.П000540007005 = Приложение4.П000540007006 + Приложение4.П000540007007);
	
	Расшифровка = "" + Приложение4.П000540007005 + " = " + Приложение4.П000540007006 + " + " + Приложение4.П000540007007 + " Итог [" + (Приложение4.П000540007006 + Приложение4.П000540007007) + "]";
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = "";
		Норма = "Арифметическая ошибка";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Формат(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1, "ЧГ=");
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции