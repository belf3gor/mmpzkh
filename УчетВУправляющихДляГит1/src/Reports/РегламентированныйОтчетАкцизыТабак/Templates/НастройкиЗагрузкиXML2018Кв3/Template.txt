// Область "Настройки" описывает параметры инициализации механизма загрузки
// регламентированных отчетов из файлов выгрузки. Формат области настроек - JSON.
//
// Описание параметров:
//  * Установкой параметра "РазрешитьЗагрузку" в "true" или "false" регулируем видимость
//    кнопки "Загрузить" и возможность загрузки из файла в форме отчета.
//  * Параметр "ФорматыСхемВыгрузки" описывает соответствие имен макетов схем выгрузки
//    поддерживаемым форматам загрузки. Если у формы единственная схема выгрузки или
//    нужно всегда использовать схему по умолчанию - указываем значение "null".
//  * Параметр "ОбластиОбработчиков" содержит список имен используемых обработчиков
//    загружаемых данных. Имена соответствуют областям макета, в которых можно размещать
//    произвольные алгоритмы на языке "1С:Предприятие" для обработки доступных объектов.
//
// Примечание:
//  Сопоставление имен узлов из файла XML и имен показателей отчета выполняется по данным схемы выгрузки,
//  поэтому обработчики используются для получения значений показателей не описанных в схеме выгрузки.
//
#Область Настройки
{
	"РазрешитьЗагрузку"   : true,
	
	"ФорматыСхемВыгрузки" : null,
	"ОбластиОбработчиков" : {
		"ПередЗагрузкой"  : "ПредОбработкаСхемыЗагрузки",
		"ПослеЗагрузки"   : "ПостОбработкаДокументаОтчета",
	}
}
#КонецОбласти

// Доступны параметры:
//
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПредОбработкаСхемыЗагрузки
	
	ДобавитьКолонкуВДеревоЕслиНеНайдена(П.ДеревоДляЗагрузки, "МнУр"); // для определения многоуровневых разделов
	НайденныйУзел = УзлыПоXPath(П.ДеревоДляЗагрузки, "//Документ/АкцТабак")[0];
	НайденныйУзел.МнУр = Истина;
	НайденныеУзлыИерархия = УзлыПоXPath(НайденныйУзел, "//node()"); // вся иерархия подчиненных узлов любого типа
	Для Каждого ТекущийУзел Из НайденныеУзлыИерархия Цикл
		ТекущийУзел.МнУр = Истина;
		Если ТекущийУзел.Раздел = "Раздел2" И ТекущийУзел.Код = "РасчАкц" Тогда
			ТекущийУзел.Обязательность = "ОМ";  // устанавливаем фиктивную многостраничность для корректного формирования подчиненных страниц
			ТекущийУзел.Многостраничность = Истина; 
		ИначеЕсли ТекущийУзел.Раздел = "Раздел21" Тогда
			ТекущийУзел.Раздел = "Раздел2";     // собираем два раздела в один многоуговневый раздел
		ИначеЕсли ТекущийУзел.Раздел = "Приложение11" Тогда
			ТекущийУзел.Раздел = "Приложение1"; // собираем два раздела в один многоуговневый раздел
		КонецЕсли;
	КонецЦикла;
	
	НайденныйУзелНалПУ = УзлыПоXPath(НайденныйУзел, "СумНалПУ/СумНалПУКод/@НалПУ")[0];
	НайденныйУзелНалПУ.Ключ = "П00001М103003"; // обработаем в структуре данных документа
	
#КонецОбласти

// Доступны параметры:
//
//  П.ДанныеОтчета      - заполненные данные документа регламентированного отчета;
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПостОбработкаДокументаОтчета

	Титульный = Неопределено;
	
	П.ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный", Титульный);
	Если Титульный <> Неопределено Тогда
		
		Титульный.Период         = П.ПараметрыОтчета.Период;
		Титульный.ОтчетГод       = П.ПараметрыОтчета.ОтчетГод;
		Титульный.НалоговыйОрган = П.ПараметрыОтчета.КодНО;
		Титульный.ПоМесту        = П.ПараметрыОтчета.ПоМесту;
		
		Если ЗначениеЗаполнено(П.ПараметрыОтчета.ФормРеорг) Тогда
			Титульный.КодФормыРеорганизации          = П.ПараметрыОтчета.ФормРеорг;
			Титульный.ИННРеорганизованнойОрганизации = П.ПараметрыОтчета.ИННРеорг;
			Титульный.КППРеорганизованнойОрганизации = П.ПараметрыОтчета.КППРеорг;
		КонецЕсли;
		
	КонецЕсли;
	
	Раздел1 = Неопределено;
	
	П.ДанныеОтчета.ДанныеМногоуровневыхРазделов.Свойство("Раздел1", Раздел1);
	Если Раздел1 <> Неопределено Тогда
		Для Каждого СтраницаРаздела Из Раздел1.Строки Цикл
			Для Каждого МногострочнаяЧасть Из СтраницаРаздела.ДанныеМногострочныхЧастей Цикл
				Для Каждого СтрокаМногострочнойЧасти Из МногострочнаяЧасть.Значение.Строки Цикл
					ДанныеСтроки = СтрокаМногострочнойЧасти.Данные;
					
					ЗначениеПоказателя = 0;
					Если ДанныеСтроки.Свойство("П00001М103003", ЗначениеПоказателя) Тогда
						ЗначениеПоказателя = 0 + ЗначениеПоказателя;
						Если ЗначениеПоказателя >= 0 Тогда
							ДанныеСтроки.Вставить("П00001М103003", ЗначениеПоказателя);
							ДанныеСтроки.Вставить("П00001М104003", 0);
						Иначе
							ДанныеСтроки.Вставить("П00001М103003", 0);
							ДанныеСтроки.Вставить("П00001М104003", -ЗначениеПоказателя);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Раздел2 = Неопределено;
	
	П.ДанныеОтчета.ДанныеМногоуровневыхРазделов.Свойство("Раздел2", Раздел2);
	Если Раздел2 <> Неопределено Тогда
		
		Для Каждого СтраницаПервогоУровня Из Раздел2.Строки Цикл
			Для Каждого СтраницаПервогоУровняНаименование Из СтраницаПервогоУровня.Строки Цикл
				Для Каждого СтраницаВторогоУровня Из СтраницаПервогоУровняНаименование.Строки Цикл
					
					КодВидаПТ = Неопределено;
					Если СтраницаВторогоУровня.Данные.Свойство("П000020004003", КодВидаПТ) Тогда
						
						СтавкаВидаПТ = 0;
						
						ИмяРасчетнойГрафыПр21 = "П00021М100004";
						ИмяРасчетнойГрафыПр22 = "П00022М100004";
						
						Если СокрЛП(КодВидаПТ) = "440" Тогда
							ИмяРасчетнойГрафыПр21 = "П00021М100003";
							ИмяРасчетнойГрафыПр22 = "П00022М100003";
						ИначеЕсли СокрЛП(КодВидаПТ) = "450"
							  ИЛИ СокрЛП(КодВидаПТ) = "460" Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого МногострочнаяЧасть Из СтраницаВторогоУровня.ДанныеМногострочныхЧастей Цикл
							Для Каждого СтрокаМногострочнойЧасти Из МногострочнаяЧасть.Значение.Строки Цикл
								ДанныеСтроки = СтрокаМногострочнойЧасти.Данные;
								
								ЗначениеПоказателя = 0;
								
								Если ДанныеСтроки.Свойство("П00021М100002", ЗначениеПоказателя) Тогда
									ИмяРасчетнойГрафы = ИмяРасчетнойГрафыПр21;
								ИначеЕсли ДанныеСтроки.Свойство("П00022М100002", ЗначениеПоказателя) Тогда
									ИмяРасчетнойГрафы = ИмяРасчетнойГрафыПр22;
								Иначе
									Продолжить;
								КонецЕсли;
								
								ЗначениеГрафы2 = 0 + ЗначениеПоказателя;
								
								ДанныеСтроки.Свойство(ИмяРасчетнойГрафы, ЗначениеПоказателя);
								Если ЗначениеЗаполнено(ЗначениеПоказателя) И ЗначениеЗаполнено(ЗначениеГрафы2) Тогда
									СтавкаВидаПТ = Макс(СтавкаВидаПТ, Окр(ЗначениеПоказателя/ЗначениеГрафы2, 0));
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						
						Если СтавкаВидаПТ > 0 Тогда
							СтраницаВторогоУровня.Данные.Вставить("П0000200040А3", СтавкаВидаПТ);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти