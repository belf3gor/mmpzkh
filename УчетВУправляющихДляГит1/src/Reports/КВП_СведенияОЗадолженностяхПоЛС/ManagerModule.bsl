
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	мОтказУчетнойПолитикиТСЖ = Ложь;
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(ПараметрыОтчета.НачалоПериода), ПараметрыОтчета.Организация, мОтказУчетнойПолитикиТСЖ);
	Иначе
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(ПараметрыОтчета.НачалоПериода), УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию(), мОтказУчетнойПолитикиТСЖ);
	КонецЕсли;
	
	Если НЕ ПараметрыОтчета.Свойство("ВариантОтбораУслуг") Тогда
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Макет");
	
	// Выбор варианта заголовка, при вызове отчета из обработки "Работа с должниками"
	// используется краткий заголовок, в остальных случаях - стандартный заголовок.
	Если ПараметрыОтчета.Свойство("ЗаголовокКраткий", Истина) Тогда
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокКраткий");
	Иначе
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Заголовок = "Сведения о задолженностях по лицевым счетам";
	ОбластьЗаголовок.Параметры.Период    = "на " + Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy");
	
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	Если Не ПараметрыОтчета.ВключатьЗадолженностьПредыдущегоМесяца И мНастройкиУчетнойПолитикиТСЖ.ЧислоВнесенияПлатежа >= День(ПараметрыОтчета.НачалоПериода) Тогда
		ДатаДляДолга = КонецМесяца(ДобавитьМесяц(ПараметрыОтчета.НачалоПериода, -2));
		ДатаНачалаДляДолга = КонецМесяца(ДобавитьМесяц(ДатаДляДолга, - ПараметрыОтчета.КоличествоМесяцевЗадолженности));
	Иначе
		ДатаДляДолга = КонецМесяца(НачалоМесяца(ПараметрыОтчета.НачалоПериода) - 1);
		ДатаНачалаДляДолга = КонецМесяца(ДобавитьМесяц(ДатаДляДолга, - ПараметрыОтчета.КоличествоМесяцевЗадолженности));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ОбъектУказан           = ПараметрыОтчета.Свойство("Объект") И ЗначениеЗаполнено(ПараметрыОтчета.Объект);
	ВидСобственностиУказан = ПараметрыОтчета.Свойство("ВидСобственности") И ЗначениеЗаполнено(ПараметрыОтчета.ВидСобственности);
	ПолучатьПоВсемЛС       = Ложь;
	
	Если ОбъектУказан Тогда
		
		СписокЛицевыхСчетов = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСписокЛСОбъекта(ПараметрыОтчета.Объект, ПараметрыОтчета.НачалоПериода, , Ложь, Истина);
		
	ИначеЕсли ПараметрыОтчета.Свойство("ЛицевойСчет") Тогда
		
		СписокЛицевыхСчетов = ПараметрыОтчета.ЛицевойСчет;
		
	Иначе
		
		СписокЛицевыхСчетов = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСписокЛСОбъекта(Неопределено, ПараметрыОтчета.НачалоПериода, , Ложь, Истина);
		
		ПолучатьПоВсемЛС = Истина;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	
	Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		УсловиеНаУслугу = "ИСТИНА";
	Иначе
		Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
			УсловиеНаУслугу = "Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			УсловиеНаУслугу = "Услуга В (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
			УсловиеНаУслугу = "НЕ Услуга В (&СписокУслуг)";
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокУслуг", ПараметрыОтчета.СписокУслуг);
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса();
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопПараметр", УсловиеНаУслугу);
	
	Запрос.УстановитьПараметр("Дата",             Новый Граница(КонецДня(ПараметрыОтчета.НачалоПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МесяцНачисления",  ДатаДляДолга);
	Запрос.УстановитьПараметр("СуммаМин",         ПараметрыОтчета.СуммаМин);
	Запрос.УстановитьПараметр("Организация",      ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ВидСобственности", ?(ВидСобственностиУказан, ПараметрыОтчета.ВидСобственности, Неопределено));
	Запрос.УстановитьПараметр("ТаблицаТелефоновЖильцов", Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(?(ЗначениеЗаполнено(СписокЛицевыхСчетов), СписокЛицевыхСчетов, Неопределено)));
	
	Если ПараметрыОтчета.ОграничитьСрокВыводимойЗадолженности Тогда
		Запрос.УстановитьПараметр("ДатаНачалаЗадолженности", ДатаНачалаДляДолга);
	Иначе
		Запрос.УстановитьПараметр("ДатаНачалаЗадолженности", Дата(1, 1, 1));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВсеЛицевыеСчета",              ПолучатьПоВсемЛС);
	Запрос.УстановитьПараметр("БезОтбораПоВидуСобственности", Не ВидСобственностиУказан);
	
	Область = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновнаяТаблица");
	ДокументРезультат.Вывести(Область);
	
	Если ПараметрыОтчета.ВывестиДопИнформацию Тогда
		ОбластьДопИнформация = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопИнформация");
		ДокументРезультат.Присоединить(ОбластьДопИнформация);
	КонецЕсли;
	
	Если ПараметрыОтчета.ВывестиСрокДолга = Истина И ПараметрыОтчета.ВывестиПериодДолга = Истина Тогда
		ОбластьДолга = Макет.ПолучитьОбласть("ЗаголовокТаблицы|СрокДолга");
		ДокументРезультат.Присоединить(ОбластьДолга);
		ОбластьДолга = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ПериодДолга");
		ДокументРезультат.Присоединить(ОбластьДолга);
	ИначеЕсли ПараметрыОтчета.ВывестиСрокДолга = Истина Тогда
		ОбластьДолга = Макет.ПолучитьОбласть("ЗаголовокТаблицы|СрокДолга");
		ДокументРезультат.Присоединить(ОбластьДолга);
	ИначеЕсли ПараметрыОтчета.ВывестиПериодДолга = Истина Тогда
		ОбластьДолга = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ПериодДолга");
		ДокументРезультат.Присоединить(ОбластьДолга);
	КонецЕсли;
	
	ДеревоЗадолжностей = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбработатьДеревоЗадолжностей(ДеревоЗадолжностей, ДатаДляДолга, ПараметрыОтчета);
	
	ИтогСумма = 0;
	НомерПП   = 0;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	Для Каждого СтрокаЛицевыхСчетов Из ДеревоЗадолжностей.Строки Цикл
		
		Если СтрокаЛицевыхСчетов.КоличествоМесяцев < ПараметрыОтчета.КоличествоМесяцевМин Тогда
			Продолжить;
		КонецЕсли;
		НомерПП = НомерПП + 1;
		
		Область = Макет.ПолучитьОбласть("СтрокаТаблицы|ОсновнаяТаблица");
		Область.Параметры.Заполнить(СтрокаЛицевыхСчетов);
		Область.Параметры.НомерПП = НомерПП;
		Если ТипЗнч(СтрокаЛицевыхСчетов.ЛицевойСчет) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(СтрокаЛицевыхСчетов.Здание);
			Адрес = ПолучитьАдресПомещения(АдресДома, СтрокаЛицевыхСчетов.Адрес);
			Область.Параметры.Адрес = Адрес;
		КонецЕсли;
		
		ДокументРезультат.Вывести(Область, 0);
		
		Если ПараметрыОтчета.ВывестиДопИнформацию Тогда
			ОбластьДопИнформация = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопИнформация");
			ОбластьДопИнформация.Параметры.КолЗарегистрированных = СтрокаЛицевыхСчетов.КолЗарегистрированных;
			ОбластьДопИнформация.Параметры.ВидСобственности      = СтрокаЛицевыхСчетов.ВидСобственности;
			ДокументРезультат.Присоединить(ОбластьДопИнформация);
		КонецЕсли;
		
		МассивМесяцев                 = ПолучитьНеоплаченныеМесяцы(1, СтрокаЛицевыхСчетов.Строки);
		КоличествоНеоплаченныхМесяцев = ПолучитьНеоплаченныеМесяцы(2, СтрокаЛицевыхСчетов.Строки);
		
		ПараметрПериодаДолга = "";
		Если МассивМесяцев.Количество() > 0 Тогда
			ПараметрПериодаДолга = МассивМесяцев.Получить(0) + " - " + МассивМесяцев.Получить(МассивМесяцев.Количество()-1);
		КонецЕсли;
		
		Если ПараметрыОтчета.ВывестиСрокДолга = Истина И ПараметрыОтчета.ВывестиПериодДолга = Истина Тогда
			
			ОбластьДолга = Макет.ПолучитьОбласть("СтрокаТаблицы|СрокДолга");
			ОбластьДолга.Параметры.Заполнить(СтрокаЛицевыхСчетов);
			ОбластьДолга.Параметры.ПериодДолга = ПараметрПериодаДолга;
			ДокументРезультат.Присоединить(ОбластьДолга);
			ОбластьДолга = Макет.ПолучитьОбласть("СтрокаТаблицы|ПериодДолга");
			ОбластьДолга.Параметры.Заполнить(СтрокаЛицевыхСчетов);
			ОбластьДолга.Параметры.НеоплаченныеМесяцы = КоличествоНеоплаченныхМесяцев;
			ДокументРезультат.Присоединить(ОбластьДолга);
		
		ИначеЕсли ПараметрыОтчета.ВывестиСрокДолга = Истина Тогда
			
			ОбластьДолга = Макет.ПолучитьОбласть("СтрокаТаблицы|СрокДолга");
			ОбластьДолга.Параметры.Заполнить(СтрокаЛицевыхСчетов);
			ОбластьДолга.Параметры.ПериодДолга = ПараметрПериодаДолга;
			ДокументРезультат.Присоединить(ОбластьДолга);
		
		ИначеЕсли ПараметрыОтчета.ВывестиПериодДолга = Истина Тогда
			
			ОбластьДолга = Макет.ПолучитьОбласть("СтрокаТаблицы|ПериодДолга");
			ОбластьДолга.Параметры.Заполнить(СтрокаЛицевыхСчетов);
			ОбластьДолга.Параметры.НеоплаченныеМесяцы = КоличествоНеоплаченныхМесяцев;
			ДокументРезультат.Присоединить(ОбластьДолга);
			
		КонецЕсли;
		
		СуммаЗаПредМесяц = 0;
		
		Для Каждого СтрокаПериода Из СтрокаЛицевыхСчетов.Строки Цикл
			
			Область              = Макет.ПолучитьОбласть("СтрокаРасшифровки|ОсновнаяТаблица");
			ОбластьДопИнформация = Макет.ПолучитьОбласть("СтрокаРасшифровки|ДопИнформация");
			
			Если ПараметрыОтчета.ВывестиСрокДолга = Истина И ПараметрыОтчета.ВывестиПериодДолга = Истина Тогда
				
				ДокументРезультат.Вывести(Область, 1);
				Если ПараметрыОтчета.ВывестиДопИнформацию Тогда
					ДокументРезультат.Присоединить(ОбластьДопИнформация, 1);
				КонецЕсли;
				ОбластьДолга = Макет.ПолучитьОбласть("СтрокаРасшифровки|СрокДолга");
				ОбластьДолга.Параметры.Месяцы = Формат(СтрокаПериода.Месяцы, "ДФ='MMMM гггг ""г.""'");
				ОбластьДолга.Параметры.Сумма = СтрокаПериода.Сумма;
				ДокументРезультат.Присоединить(ОбластьДолга);
				
				ОбластьДолга = Макет.ПолучитьОбласть("СтрокаРасшифровки|ПериодДолга");
				ОбластьДолга.Параметры.СуммаЗаМесяц = СтрокаПериода.Сумма - СуммаЗаПредМесяц;
				Если (СтрокаПериода.Сумма - СуммаЗаПредМесяц) > 0 Тогда
					ОбластьДолга.Параметры.НеоплаченныйМесяц = Формат(СтрокаПериода.Месяцы, "ДФ='MMMM гггг ""г.""'");
				КонецЕсли;
				ДокументРезультат.Присоединить(ОбластьДолга);
				
			ИначеЕсли ПараметрыОтчета.ВывестиСрокДолга = Истина Тогда
				
				ДокументРезультат.Вывести(Область, 1);
				Если ПараметрыОтчета.ВывестиДопИнформацию Тогда
					ДокументРезультат.Присоединить(ОбластьДопИнформация, 1);
				КонецЕсли;
				ОбластьДолга = Макет.ПолучитьОбласть("СтрокаРасшифровки|СрокДолга");
				ОбластьДолга.Параметры.Месяцы = Формат(СтрокаПериода.Месяцы, "ДФ='MMMM гггг ""г.""'");
				ОбластьДолга.Параметры.Сумма = СтрокаПериода.Сумма;
				ДокументРезультат.Присоединить(ОбластьДолга);
				
			ИначеЕсли ПараметрыОтчета.ВывестиПериодДолга = Истина Тогда
				
				ОбластьДолга = Макет.ПолучитьОбласть("СтрокаРасшифровки|ПериодДолга");
				ОбластьДолга.Параметры.СуммаЗаМесяц = СтрокаПериода.Сумма - СуммаЗаПредМесяц;
				Если (СтрокаПериода.Сумма - СуммаЗаПредМесяц) > 0 Тогда
					
					ДокументРезультат.Вывести(Область, 1);
					Если ПараметрыОтчета.ВывестиДопИнформацию Тогда
						ДокументРезультат.Присоединить(ОбластьДопИнформация, 1);
					КонецЕсли;
					ОбластьДолга.Параметры.НеоплаченныйМесяц = Формат(СтрокаПериода.Месяцы, "ДФ='MMMM гггг ""г.""'");
					ДокументРезультат.Присоединить(ОбластьДолга);
					
				КонецЕсли;
							
			КонецЕсли;
			
			СуммаЗаПредМесяц = СтрокаПериода.Сумма;
			
		КонецЦикла;
		
		ИтогСумма = ИтогСумма + СтрокаЛицевыхСчетов.Сумма;
		
	КонецЦикла;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Итоги
	Если ПараметрыОтчета.ВывестиСрокДолга = Истина И ПараметрыОтчета.ВывестиПериодДолга = Истина Тогда
		Область = Макет.ПолучитьОбласть("Итоги|ОсновнаяТаблица");
		Если ПараметрыОтчета.ВывестиДопИнформацию Тогда
			ДокументРезультат.Вывести(Область);
			Область = Макет.ПолучитьОбласть("Итоги|ДопИнформация");
			Область.Параметры.ТекстСуммаИтого = "Сумма итого:";
			ДокументРезультат.Присоединить(Область);
		Иначе
			Область.Параметры.ТекстСуммаИтого = "Сумма итого:";
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		Область = Макет.ПолучитьОбласть("Итоги|СрокДолга");
		Область.Параметры.ИтогСумма = ИтогСумма;
		ДокументРезультат.Присоединить(Область);
		Область = Макет.ПолучитьОбласть("Итоги|ПериодДолга");
		Область.Параметры.ИтогСумма = ИтогСумма;
		ДокументРезультат.Присоединить(Область);
	ИначеЕсли ПараметрыОтчета.ВывестиСрокДолга = Истина Тогда
		Область = Макет.ПолучитьОбласть("Итоги|ОсновнаяТаблица");
		Если ПараметрыОтчета.ВывестиДопИнформацию Тогда
			ДокументРезультат.Вывести(Область);
			ОбластьДопИнформация = Макет.ПолучитьОбласть("Итоги|ДопИнформация");
			ОбластьДопИнформация.Параметры.ТекстСуммаИтого = "Сумма итого:";
			ДокументРезультат.Присоединить(ОбластьДопИнформация);
		Иначе
			Область.Параметры.ТекстСуммаИтого = "Сумма итого:";
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		Область = Макет.ПолучитьОбласть("Итоги|СрокДолга");
		Область.Параметры.ИтогСумма = ИтогСумма;
		ДокументРезультат.Присоединить(Область);
	ИначеЕсли ПараметрыОтчета.ВывестиПериодДолга = Истина Тогда
		Область = Макет.ПолучитьОбласть("Итоги|ОсновнаяТаблица");
		Если ПараметрыОтчета.ВывестиДопИнформацию Тогда
			ДокументРезультат.Вывести(Область);
			ОбластьДопИнформация = Макет.ПолучитьОбласть("Итоги|ДопИнформация");
			ОбластьДопИнформация.Параметры.ТекстСуммаИтого = "Сумма итого:";
			ДокументРезультат.Присоединить(ОбластьДопИнформация);
		Иначе
			Область.Параметры.ТекстСуммаИтого = "Сумма итого:";
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		Область = Макет.ПолучитьОбласть("Итоги|ПериодДолга");
		Область.Параметры.ИтогСумма = ИтогСумма;
		ДокументРезультат.Присоединить(Область);
	КонецЕсли;
	
	// Подвал
	Область = Макет.ПолучитьОбласть("Подвал");
	ДокументРезультат.Вывести(Область);
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = 6;
	
	ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(6, , 6, );
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2,
	                                  ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "НастройкиПечати_КВП_СведенияОЗадолженностяхПоЛС";
	
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры

// Получает сведения о месяцах, в которых отсутствовала оплата услуг.
Функция ПолучитьНеоплаченныеМесяцы(Параметр, СтрокаЛицевыхСчетов)
	
	МассивМесяцев = Новый Массив();
	КоличествоНеоплаченныхМесяцев = 0;
	МассивМесяцев.Очистить();
	СуммаЗаПредМесяц = 0;
	Для Каждого СтрокаПериода Из СтрокаЛицевыхСчетов Цикл
		ТекМесяц = Формат(СтрокаПериода.Месяцы, "ДФ='MMM гггг ""г.""'");
		ТекИтоговыйМесяц = ВРег(Лев(ТекМесяц, 1)) + Сред(ТекМесяц, 2);
		Если (СтрокаПериода.Сумма - СуммаЗаПредМесяц) > 0 Тогда
			КоличествоНеоплаченныхМесяцев = КоличествоНеоплаченныхМесяцев + 1;
		КонецЕсли;
		МассивМесяцев.Добавить(ТекИтоговыйМесяц);
		СуммаЗаПредМесяц = СтрокаПериода.Сумма;
		
	КонецЦикла;
	
	Если Параметр = 1 Тогда
		Возврат МассивМесяцев;
	Иначе
		Возврат КоличествоНеоплаченныхМесяцев;
	КонецЕсли;
	
КонецФункции // ПолучитьНеоплаченныеМесяцы()

// Формирует дерево задолжностей нарастающим итогом
//
Процедура ОбработатьДеревоЗадолжностей(ДеревоЗадолжностей, ДатаДляДолга, ПараметрыОтчета)
	
	ДеревоЗадолжностей.Колонки.Добавить("КолЗарегистрированных", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаЛицевыхСчетов Из ДеревоЗадолжностей.Строки Цикл
		
		СтрокаЛицевыхСчетов.Строки.Сортировать("Месяцы Возр");
		
		// дополним месяцами, в которых задолженность нулевая.
		НачалоЗадолженности = СтрокаЛицевыхСчетов.Строки.Получить(0);
		ТекущийПериод = НачалоЗадолженности.Месяцы;
		СуммаПереплат = 0;
		Пока ТекущийПериод <= ДатаДляДолга Цикл
			СтрокаТекущегоПериода = СтрокаЛицевыхСчетов.Строки.Найти(ТекущийПериод, "Месяцы");
			Если СтрокаТекущегоПериода = Неопределено Тогда
				СтрокаЗадолженности = СтрокаЛицевыхСчетов.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗадолженности, НачалоЗадолженности);
				СтрокаЗадолженности.Месяцы = ТекущийПериод;
				СтрокаЗадолженности.Сумма = 0;
			Иначе
				СуммаПереплат = ?(СтрокаТекущегоПериода.Сумма < 0, СуммаПереплат - СтрокаТекущегоПериода.Сумма, СуммаПереплат);
			КонецЕсли;
			ТекущийПериод = КонецМесяца(ДобавитьМесяц(ТекущийПериод, 1));
		КонецЦикла;
		
		СтрокаЛицевыхСчетов.Строки.Сортировать("Месяцы Возр");
		
		Если ПараметрыОтчета.УчитыватьПереплаты Тогда
			
			// сформируем задолженность нарастающим итогом
			ТекущаяЗадолженность = 0;
			ЗадолженностьНарастающимИтогом = 0;
			Для Каждого СтрокаПериода Из СтрокаЛицевыхСчетов.Строки Цикл
				
				Если СтрокаПериода.Сумма < 0 Тогда
					СтрокаПериода.Сумма = 0;
				КонецЕсли;
				
				СтрокаПериода.Сумма = СтрокаПериода.Сумма + ТекущаяЗадолженность;
				
				Если СуммаПереплат > 0 Тогда
					ПогашаемаяСумма = Мин(СтрокаПериода.Сумма, СуммаПереплат);
					СтрокаПериода.Сумма = СтрокаПериода.Сумма - ПогашаемаяСумма;
					СуммаПереплат = СуммаПереплат - ПогашаемаяСумма;
				КонецЕсли;
				
				ТекущаяЗадолженность = СтрокаПериода.Сумма;
				
			КонецЦикла;
			
			// удалим строки с нулевой суммой до первой задолженности
			Пока СтрокаЛицевыхСчетов.Строки.Количество() > 0 И СтрокаЛицевыхСчетов.Строки[0].Сумма = 0 Цикл
				СтрокаЛицевыхСчетов.Строки.Удалить(0);
			КонецЦикла;
			
		Иначе
			
			СуммаПредПериода = 0;
			Для Каждого СтрокаПериода Из СтрокаЛицевыхСчетов.Строки Цикл
				СтрокаПериода.Сумма = СуммаПредПериода + СтрокаПериода.Сумма;
				СуммаПредПериода = СтрокаПериода.Сумма;
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаЛицевыхСчетов.КоличествоМесяцев = СтрокаЛицевыхСчетов.Строки.Количество();
		СтрокаЛицевыхСчетов.ВидСобственности  = СтрокаЛицевыхСчетов.ВидСобственности;
		
		// Количество зарегистрированных:
		СтрокаЛицевыхСчетов.КолЗарегистрированных = ПолучитьКоличествоЗарегистрированных(СтрокаЛицевыхСчетов.ЛицевойСчет,
																									ПараметрыОтчета.НачалоПериода);
																									
	КонецЦикла;
	
КонецПроцедуры // ОбработатьДеревоЗадолжностей()

// Формирует и возвращает текст запроса.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ПолучитьТекстЗапроса()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТелефоновЖильцов.Жилец КАК Жилец,
	|	ТаблицаТелефоновЖильцов.СписокТелефонов КАК СписокТелефонов
	|ПОМЕСТИТЬ втТаблицаТелефоновЖильцов
	|ИЗ
	|	&ТаблицаТелефоновЖильцов КАК ТаблицаТелефоновЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления, МЕСЯЦ) КАК МесяцНачисления,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК СуммаНачисленияОстаток
	|ПОМЕСТИТЬ ТаблицаМесяцевЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И (ЛицевойСчет В (&СписокЛицевыхСчетов)
	|					ИЛИ &ВсеЛицевыеСчета)
	|				И НЕ МесяцНачисления > &МесяцНачисления
	|				И НЕ МесяцНачисления < &ДатаНачалаЗадолженности
	|				И &ДопПараметр) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммЗадолженностей.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчетаСОтборомПоСумме
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаМесяцевЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
	|		СУММА(ТаблицаМесяцевЗадолженности.СуммаНачисленияОстаток) КАК СуммаНачисленияОстаток
	|	ИЗ
	|		ТаблицаМесяцевЗадолженности КАК ТаблицаМесяцевЗадолженности
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаМесяцевЗадолженности.ЛицевойСчет) КАК ТаблицаСуммЗадолженностей
	|ГДЕ
	|	ТаблицаСуммЗадолженностей.СуммаНачисленияОстаток >= &СуммаМин
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаСуммЗадолженностей.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМесяцевЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаМесяцевЗадолженности.МесяцНачисления КАК МесяцНачисления,
	|	ТаблицаМесяцевЗадолженности.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
	|ПОМЕСТИТЬ ТаблицаМесяцевЗадолженностиСОтборомПоСумме
	|ИЗ
	|	ТаблицаМесяцевЗадолженности КАК ТаблицаМесяцевЗадолженности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛицевыеСчетаСОтборомПоСумме КАК втЛицевыеСчетаСОтборомПоСумме
	|		ПО (втЛицевыеСчетаСОтборомПоСумме.ЛицевойСчет = ТаблицаМесяцевЗадолженности.ЛицевойСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМесяцевЗадолженностиСОтборомПоСумме.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаМесяцевЗадолженностиСОтборомПоСумме.МесяцНачисления КАК МесяцНачисления,
	|	ТаблицаМесяцевЗадолженностиСОтборомПоСумме.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток,
	|	УПЖКХ_Помещения.Ссылка КАК Помещение,
	|	УПЖКХ_Помещения.Владелец КАК Здание,
	|	УПЖКХ_Помещения.Код КАК АдресКвартира
	|ПОМЕСТИТЬ ИтоговаяТаблицаМесяцевЗадолженности
	|ИЗ
	|	ТаблицаМесяцевЗадолженностиСОтборомПоСумме КАК ТаблицаМесяцевЗадолженностиСОтборомПоСумме
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО (УПЖКХ_Помещения.Ссылка = ТаблицаМесяцевЗадолженностиСОтборомПоСумме.ЛицевойСчет.Адрес)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговаяТаблицаМесяцевЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
	|	ИтоговаяТаблицаМесяцевЗадолженности.Помещение КАК Помещение,
	|	ИтоговаяТаблицаМесяцевЗадолженности.Здание КАК Здание,
	|	ИтоговаяТаблицаМесяцевЗадолженности.АдресКвартира КАК АдресКвартира,
	|	ИтоговаяТаблицаМесяцевЗадолженности.МесяцНачисления КАК МесяцНачисления,
	|	ИтоговаяТаблицаМесяцевЗадолженности.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ФИО
	|ПОМЕСТИТЬ ТаблицаМесяцевЗадолженностиССобственниками
	|ИЗ
	|	ИтоговаяТаблицаМесяцевЗадолженности КАК ИтоговаяТаблицаМесяцевЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаСОтборомПоСумме.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчетаСОтборомПоСумме)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО ИтоговаяТаблицаМесяцевЗадолженности.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаМесяцевЗадолженностиССобственниками.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаМесяцевЗадолженностиССобственниками.Помещение КАК Помещение,
	|	ТаблицаМесяцевЗадолженностиССобственниками.Здание КАК Здание,
	|	ТаблицаМесяцевЗадолженностиССобственниками.АдресКвартира КАК АдресКвартира,
	|	ТаблицаМесяцевЗадолженностиССобственниками.МесяцНачисления КАК МесяцНачисления,
	|	ТаблицаМесяцевЗадолженностиССобственниками.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток,
	|	ТаблицаМесяцевЗадолженностиССобственниками.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	ТаблицаМесяцевЗадолженностиССобственниками.ФИО КАК ФИО,
	|	ЕСТЬNULL(втТаблицаТелефоновЖильцов.СписокТелефонов, """") КАК Телефон,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности
	|ПОМЕСТИТЬ втТаблицаМесяцевЗадолженности
	|ИЗ
	|	ТаблицаМесяцевЗадолженностиССобственниками КАК ТаблицаМесяцевЗадолженностиССобственниками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|				&Дата,
	|				Помещение В
	|					(ВЫБРАТЬ
	|						ТаблицаМесяцевЗадолженностиССобственниками.Помещение
	|					ИЗ
	|						ТаблицаМесяцевЗадолженностиССобственниками)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПО (УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = ТаблицаМесяцевЗадолженностиССобственниками.Помещение)
	|			И (УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаТелефоновЖильцов КАК втТаблицаТелефоновЖильцов
	|		ПО ТаблицаМесяцевЗадолженностиССобственниками.ОтветственныйВладелец = втТаблицаТелефоновЖильцов.Жилец
	|ГДЕ
	|	(&БезОтбораПоВидуСобственности
	|			ИЛИ УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = &ВидСобственности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	НАЧАЛОПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, ДЕНЬ) КАК Период,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачисленияОборот
	|ПОМЕСТИТЬ втТаблицаОплат
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			,
	|			&Дата,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаСОтборомПоСумме.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчетаСОтборомПоСумме)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				И НЕ МесяцНачисления < &ДатаНачалаЗадолженности
	|				И ВЫБОР
	|					КОГДА НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование)
	|						ТОГДА НЕ МесяцНачисления > &МесяцНачисления
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И &ДопПараметр) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксПериодОплаты.ЛицевойСчет КАК ЛицевойСчет,
	|	МаксПериодОплаты.Период КАК Период,
	|	СУММА(втТаблицаОплат.СуммаНачисленияОборот) КАК СуммаНачисленияОборот
	|ПОМЕСТИТЬ втТаблицаПоследнихОплат
	|ИЗ
	|	(ВЫБРАТЬ
	|		втТаблицаОплат.ЛицевойСчет КАК ЛицевойСчет,
	|		МАКСИМУМ(втТаблицаОплат.Период) КАК Период
	|	ИЗ
	|		втТаблицаОплат КАК втТаблицаОплат
	|	
	|	СГРУППИРОВАТЬ ПО
	|		втТаблицаОплат.ЛицевойСчет) КАК МаксПериодОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаОплат КАК втТаблицаОплат
	|		ПО МаксПериодОплаты.ЛицевойСчет = втТаблицаОплат.ЛицевойСчет
	|			И МаксПериодОплаты.Период = втТаблицаОплат.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксПериодОплаты.ЛицевойСчет,
	|	МаксПериодОплаты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТаблицаМесяцевЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаМесяцевЗадолженности.ОтветственныйВладелец КАК ВладелецОбъекта,
	|	втТаблицаМесяцевЗадолженности.ФИО КАК ФИО,
	|	втТаблицаМесяцевЗадолженности.Помещение КАК Адрес,
	|	втТаблицаМесяцевЗадолженности.Здание КАК Здание,
	|	втТаблицаМесяцевЗадолженности.ВидСобственности КАК ВидСобственности,
	|	ВЫБОР
	|		КОГДА НЕ втТаблицаМесяцевЗадолженности.Телефон = """"
	|			ТОГДА втТаблицаМесяцевЗадолженности.Телефон
	|		ИНАЧЕ втТаблицаМесяцевЗадолженности.ЛицевойСчет.Телефон
	|	КОНЕЦ КАК Телефон,
	|	втТаблицаМесяцевЗадолженности.МесяцНачисления КАК Месяцы,
	|	СУММА(втТаблицаМесяцевЗадолженности.СуммаНачисленияОстаток) КАК Сумма,
	|	втТаблицаМесяцевЗадолженности.АдресКвартира КАК АдресКвартира,
	|	ЕСТЬNULL(втТаблицаПоследнихОплат.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПослДата,
	|	СУММА(ЕСТЬNULL(-втТаблицаПоследнихОплат.СуммаНачисленияОборот, 0)) КАК ПослСумма,
	|	СУММА(0) КАК КоличествоМесяцев
	|ИЗ
	|	втТаблицаМесяцевЗадолженности КАК втТаблицаМесяцевЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПоследнихОплат КАК втТаблицаПоследнихОплат
	|		ПО втТаблицаМесяцевЗадолженности.ЛицевойСчет = втТаблицаПоследнихОплат.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаМесяцевЗадолженности.ЛицевойСчет,
	|	втТаблицаМесяцевЗадолженности.ОтветственныйВладелец,
	|	втТаблицаМесяцевЗадолженности.ФИО,
	|	втТаблицаМесяцевЗадолженности.Здание,
	|	втТаблицаМесяцевЗадолженности.ВидСобственности,
	|	ВЫБОР
	|		КОГДА НЕ втТаблицаМесяцевЗадолженности.Телефон = """"
	|			ТОГДА втТаблицаМесяцевЗадолженности.Телефон
	|		ИНАЧЕ втТаблицаМесяцевЗадолженности.ЛицевойСчет.Телефон
	|	КОНЕЦ,
	|	втТаблицаМесяцевЗадолженности.МесяцНачисления,
	|	втТаблицаМесяцевЗадолженности.АдресКвартира,
	|	втТаблицаПоследнихОплат.Период,
	|	втТаблицаМесяцевЗадолженности.Помещение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Здание,
	|	АдресКвартира,
	|	ЛицевойСчет
	|ИТОГИ
	|	МАКСИМУМ(ВладелецОбъекта),
	|	МАКСИМУМ(ФИО),
	|	МАКСИМУМ(Адрес),
	|	МАКСИМУМ(Здание),
	|	МАКСИМУМ(ВидСобственности),
	|	МАКСИМУМ(Телефон),
	|	КОЛИЧЕСТВО(Месяцы),
	|	СУММА(Сумма),
	|	МАКСИМУМ(АдресКвартира),
	|	МАКСИМУМ(ПослДата),
	|	МАКСИМУМ(ПослСумма)
	|ПО
	|	ЛицевойСчет";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

#КонецОбласти

#КонецЕсли