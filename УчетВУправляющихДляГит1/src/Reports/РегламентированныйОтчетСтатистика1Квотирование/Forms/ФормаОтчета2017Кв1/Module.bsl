&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "06/02/2017";
	// Код отчета, равен коду по ОКУД
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0001020001";
	КолИсхСтрокИдГруппы1 = 3;
	КолКолонокИдГруппы1 = 11;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, "МногострочнаяЧасть1");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));	
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаОтчета2017Кв1_ФормаОтчета"));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма                      = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета              = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета             = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность                       = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма                    = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок                      = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация      		              = Параметры.Организация;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.мЦветБелый = Новый Цвет(255, 255, 255);
	СтруктураРеквизитовФормы.мЦветЖелтый = Новый Цвет(255, 255, 192);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	СтруктураРеквизитовФормы.Вставить("мЦветБелый");
	СтруктураРеквизитовФормы.Вставить("мЦветЖелтый");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	РегламентированнаяОтчетность.ЗапомнитьИменаСправочниковОбособленныхПодразделений(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	мАдресвФорматеДляВыгрузки = "";
	ФормироватьСтруктуруСтраницОтчета();
	РегламентированнаяОтчетность.НачальныеОперацииСМногострочнымиБлоками(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			УстановитьФорматВывода(ЭтаФорма);
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ВывестиПриложениеНаПечать = ТекТабличноеПоле.Области.ВывестиПриложениеНаПечать.Значение;
	Если ВывестиПриложениеНаПечать = "Да" ИЛИ ВывестиПриложениеНаПечать = "V" Тогда
		ТекТабличноеПоле.Области.ВывестиПриложениеНаПечать.Значение = "V";
	Иначе
		ТекТабличноеПоле.Области.ВывестиПриложениеНаПечать.Значение = "";
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ТекТабличноеПоле.Области.НомерКорректировки.Значение = НомерКорректировки;
	ТекТабличноеПоле.Области.ДатаПодписания.Значение = ДатаПодписи;
	
	УстановитьДоступностьЭУВыбораОбособленныхПодразделений(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаПодписания.Значение = ДатаПодписи;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;
	
	УстановитьДоступностьСтр4_6Гр5(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Элементы.НаименованиеЭтапа.Заголовок = "В работе";
	Иначе
		Статус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиРеглОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		Если Статус <> Неопределено Тогда
			Элементы.НаименованиеЭтапа.Заголовок
			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), Статус);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",                  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",                   СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ОбособленноеПодразделение",                ОбособленноеПодразделение);
	ПараметрыОтчета.Вставить("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений);
	
	Контейнер = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(Контейнер);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	ВывестиПоказателиОтчетаВТабличныйДокумент(Контейнер);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭУВыбораОбособленныхПодразделений(Форма)
	Форма.ОбособленноеПодразделение = ?(НЕ Форма.ИсключитьДанныеОбособленныхПодразделений, Форма.ОбособленноеПодразделение, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", 							 СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", 				 СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  				 СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ЗначениеТекущегоПоказателя",               Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Текст);
	ПараметрыОтчета.Вставить("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений);
	ПараметрыОтчета.Вставить("ОбособленноеПодразделение",                ОбособленноеПодразделение);
	
	ИДИменПоказателей = Новый Массив;
	ИДИменПоказателей.Добавить(Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ОбособПодразделение;
	Перем УстановкиГраницСнизу;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                    = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	// восстанавливаем флаг исключения данных обособленных подразделений
	СписокСохранения.Свойство("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений);
	
	// восстанавливаем выбранное значение обособленного подразделения
	Если Не СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		Если СписокСохранения.Свойство("ОбособленноеПодразделение", ОбособПодразделение) Тогда
			ОбособленноеПодразделение = ОбособПодразделение;
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем нижние границы областей
	Если СписокСохранения.Свойство("УстановкиГраницСнизу", УстановкиГраницСнизу) Тогда
		УстановитьНижниеГраницыОбластей(ЭтаФорма, УстановкиГраницСнизу);
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) И ДанныеМногострочныхРазделов <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
				ВывестиРазделВТабличныйДокументНаСервере(НайденноеЗначение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере();
	
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	ВывестиПоказателиОтчетаВТабличныйДокумент(ПоказателиОтчета);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	ЭтаФорма.ПолеТабличногоДокументаФормаОтчета.Области.ДатаПодписания.Значение = ДатаПодписи;
	УстановитьФорматВывода(ЭтаФорма);
	РегламентированнаяОтчетность.ЗаполнитьДанныеВШапкеОбособленныхПодразделений(ЭтаФорма);
	Модифицированность   = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказателиОтчетаВТабличныйДокумент(ПоказателиОтчета)
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			
			ИмяПоказателя      = Показатель.Ключ;
			ЗначениеПоказателя = Показатель.Значение;
			
			Обл = ТекТабличноеПоле.Области.Найти(ИмяПоказателя);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	Если Прав(СтруктураРеквизитовФормы.СтрПериодОтчета, 2) = "г." Тогда 
		СтруктураРеквизитовФормы.СтрПериодОтчета = СтрЗаменить(СтруктураРеквизитовФормы.СтрПериодОтчета, "г.", "года");
	КонецЕсли;
	ПериодОтчета = " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	ПолеТабличногоДокументаФормаОтчета.Области.Период.Значение = ПериодОтчета;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;
	
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "АдрФакт");
		Сведения.Добавить("", "АдрЮр");
		Сведения.Добавить("", "ФИОРук");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОргПравФорм");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД2");
		Сведения.Добавить("", "ФаксОрганизации");
		Сведения.Добавить("", "ТипНП");
		Сведения.Добавить("", "ОснВидДеят");
		
	КонецЕсли;
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ИННЮЛ       = "";
		АдрПочт     = "";
		АдрФакт     = "";
		АдрЮр       = "";
		ФИОРук      = "";
		ОКОПФ       = "";
		ОргПравФорм = "";
		ОКФС        = "";
		ФормСобств  = "";
		ТелОрганизации = "";
		НаимЮЛПол   = "";
		ОргКодОКПО  = "";
		ОргКодОКВЭД = "";
		ОргФакс     = "";
		ТипНП       = "";
		ОснВидДеят  = "";
		
	КонецЕсли;
	
	ОргДиректор  = "";
	ОргБухгалтер = "";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("ОКПО",           ОргКодОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("АдрФакт",        АдрФакт);
		ОргСведения.Свойство("АдрЮр",          АдрЮр);
		ОргСведения.Свойство("ФИОРук",         ФИОРук);
		ОргСведения.Свойство("ОКОПФ",          ОКОПФ);
		ОргСведения.Свойство("ОргПравФорм",    ОргПравФорм);
		ОргСведения.Свойство("ОКФС",           ОКФС);
		ОргСведения.Свойство("ФормСобств",     ФормСобств);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
		ОргСведения.Свойство("ОКВЭД2",         ОргКодОКВЭД);
		ОргСведения.Свойство("ФаксОрганизации",ОргФакс);
		ОргСведения.Свойство("ТипНП",          ТипНП);
		ОргСведения.Свойство("ОснВидДеят",     ОснВидДеят);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИННЮЛ) Тогда
		
		Для Инд = 1 По 10 Цикл
			Форма.ПолеТабличногоДокументаФормаОтчета.Области["ИНН" + Строка(Инд)].Значение = Сред(?(ТипНП <> 3, ИННЮЛ, ""), Инд, 1);
		КонецЦикла;
		
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОснВидДеят.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОснВидДеят.Значение = ОснВидДеят;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргФакс.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргФакс.Значение = ОргФакс;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКВЭД.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКВЭД.Значение = ОргКодОКВЭД;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКВЭД2.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКВЭД2.Значение = "" + ОргКодОКВЭД + " " + ОснВидДеят;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = "";
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = ОргКодОКПО;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазвЮЛ.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазвЮЛ.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргОКОПФ.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргОКОПФ.Значение = ОргПравФорм;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргПочтАдрес.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрЗаменить(АдрПочт, ",","")) Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргПочтАдрес.Значение = "";
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргПочтАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргФактАдрес.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрЗаменить(АдрФакт, ",","")) Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргФактАдрес.Значение = "";
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргФактАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрФакт);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргЮрАдрес.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрЗаменить(АдрЮр, ",","")) Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргЮрАдрес.Значение = "";
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрЮр);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефон.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефон.Значение = ТелОрганизации;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефон2.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефон2.Значение = ТелОрганизации;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргФИОПредставителя.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргФИОПредставителя.Значение = ФИОРук;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСнятьНижнююГраницуОбласти(Область, Установить = Неопределено)
	
	ЕстьЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	НетЛинии  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	
	Если Установить = Неопределено Тогда //Переключить
		Если Область.ГраницаСнизу = ЕстьЛиния Тогда
			Область.ГраницаСнизу = НетЛинии;
		Иначе
			Область.ГраницаСнизу = ЕстьЛиния;
		КонецЕсли;
	ИначеЕсли Установить = Истина Тогда
		Область.ГраницаСнизу = ЕстьЛиния;
	Иначе
		Область.ГраницаСнизу = НетЛинии;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПризнаковУстановкиНижнихГраницОбластей(Форма)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	ПризнакиОбластей = Новый Структура("ОргФСГос,ОргФСМун,ОргФСЧаст,ОргФСОбщ,СоцГарантДДУ1,СоцГарантДДУ2,СоцГарантМО,СоцГарантСКО,СоцГарантУПП");
	
	Для каждого ЭлементСтруктуры Из ПризнакиОбластей Цикл
		
		ТекОбласть = Форма.ПолеТабличногоДокументаФормаОтчета.Области[ЭлементСтруктуры.Ключ];
		
		ПризнакУстановкиГраницы = Ложь;
		Если ТекОбласть.ГраницаСнизу = Линия Тогда
			ПризнакУстановкиГраницы = Истина;
		КонецЕсли;
		
		ПризнакиОбластей[ЭлементСтруктуры.Ключ] = ПризнакУстановкиГраницы;
		
	КонецЦикла;
	
	Возврат ПризнакиОбластей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНижниеГраницыОбластей(Форма, СтруктураПризнаков)
	
	Если ТипЗнч(СтруктураПризнаков) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из СтруктураПризнаков Цикл
		
		ТекОбласть = Форма.ПолеТабличногоДокументаФормаОтчета.Области.Найти(ЭлементСтруктуры.Ключ);
		
		Если ТекОбласть <> Неопределено Тогда
			
			УстановитьСнятьНижнююГраницуОбласти(ТекОбласть, ЭлементСтруктуры.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма) Экспорт
	
	Области = Форма.ПолеТабличногоДокументаФормаОтчета.Области;
	мСтрокаФормата = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
	
	ЕдиницаИзмерения = Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	Если ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
	КонецЕсли;
	
	Области.П000010021004.Формат = мСтрокаФормата;
	Области.П000010022004.Формат = мСтрокаФормата;
	Области.П000010023004.Формат = мСтрокаФормата;
	Области.П000010024004.Формат = мСтрокаФормата;
	Области.П000010025004.Формат = мСтрокаФормата;
	Области.П000010026004.Формат = мСтрокаФормата;
	Области.П000010027004.Формат = мСтрокаФормата;
	
	Области.П000010028004.Формат = мСтрокаФормата;
	Области.П000010029004.Формат = мСтрокаФормата;
	Области.П000010030004.Формат = мСтрокаФормата;
	
	Области.П000010031004.Формат = мСтрокаФормата;
	Области.П000010032004.Формат = мСтрокаФормата;
	Области.П000010033004.Формат = мСтрокаФормата;
	Области.П000010034004.Формат = мСтрокаФормата;
	Области.П000010035004.Формат = мСтрокаФормата;
	Области.П000010036004.Формат = мСтрокаФормата;
	Области.П000010037004.Формат = мСтрокаФормата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("УправлениеВариантами", Ложь);
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Ложь);
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеЕдИзм, ЗначениеЗпт", ЗначениеЕдИзм, ЗначениеЗпт);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Модифицированность = Истина;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаНаСервере();
	#Иначе
		УстановитьФорматВывода(ЭтаФорма);
		РасчетНаКлиенте();
	#КонецЕсли
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

&НаСервере
Процедура УстановитьФорматВыводаНаСервере()
	
	УстановитьФорматВывода(ЭтаФорма);
	
	РасчетНаСервере();
	
КонецПроцедуры // УстановитьФорматВыводаНаСервере()

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в рублях точность не может превышать 2 знака'");
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака'");
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'");
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаКлиенте()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;  
	Иначе
		Очистить(); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПолеНаСервере();
	
	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	
КонецПроцедуры // Очистить()

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	ОчиститьТабличноеПоле(ЭтаФорма);
	РасчетНаСервере();
	
КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма)
	
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	Область4_2 = Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОсновнаяЧасть3_1;
	Область4_3 = Форма.ПолеТабличногоДокументаФормаОтчета.Области.ДобавлениеСтроки1;
	ИсхКолвоСтрок = Форма.мСтруктураИсхКолвоСтрокРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы1];
	
	Если Область4_2.Низ + ИсхКолвоСтрок + 1 < Область4_3.Верх Тогда 
		ОбластьДляУдаления = Форма.ПолеТабличногоДокументаФормаОтчета.Область(Область4_2.Низ + ИсхКолвоСтрок + 1, ,Область4_3.Верх - 1, );
		Форма.ПолеТабличногоДокументаФормаОтчета.УдалитьОбласть(ОбластьДляУдаления, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	Форма.ЭтаФорма[Форма.СтруктураРеквизитовФормы.мИдГруппы1].Очистить();
	Для Инд = 1 По Форма.мСтруктураИсхКолвоСтрокРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы1] Цикл 
		Форма.ЭтаФорма[Форма.СтруктураРеквизитовФормы.мИдГруппы1].Добавить();
	КонецЦикла;
	
	ВыбТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргПочтАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом3");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом4");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом5");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом6");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом7");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Директор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Бухгалтер");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефон");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФакс");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ЭлектронныйЯщик");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОснВидДеят");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКорректировки");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОбособленноеПодразделение");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ИсключитьДанныеОбособленныхПодразделений");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаДопЛист");
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита И ТекущаяОбласть.Имя <> "ВывестиПриложениеНаПечать" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	ВыбТабличноеПоле.Области.П000010004005.Значение = Неопределено;
	ВыбТабличноеПоле.Области.П000010005005.Значение = Неопределено;
	ВыбТабличноеПоле.Области.П000010006005.Значение = Неопределено;
	
	ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте() Экспорт
	
	Расчет(ЭтаФорма);
	
КонецПроцедуры // РасчетНаКлиенте()

&НаСервере
Процедура РасчетНаСервере() Экспорт
	
	Расчет(ЭтаФорма);
	
КонецПроцедуры // РасчетНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСтр4_6Гр5(Форма)
	Области = Форма.ПолеТабличногоДокументаФормаОтчета.Области;
	Желтый = Новый Цвет(255,255,192);
	Зеленый = Новый Цвет(192,220,192);
	
	Для Стр = 1 По 3 Цикл 
		Зн3 = Области["П00001000"+Стр+"003"].Значение;
		Зн4_5 = Области["П00001000"+Стр+"004"].Значение;
		Обл = Области["П00001000"+(Стр+3)+"005"];
		
		Если Зн4_5 = Зн3 Тогда 
			Обл.Защита = Ложь;
			Обл.ЦветФона = Желтый;
		Иначе
			Обл.Защита = Истина;
			Обл.ЦветФона = Зеленый;
		КонецЕсли;
		
		Если Зн4_5 > Зн3 Тогда
			Области["П00001000"+(Стр+3)+"003"].ЦветФона = Желтый;
			Области["П00001000"+(Стр+3)+"004"].ЦветФона = Желтый;
			Области["П00001000"+(Стр+3)+"005"].ЦветФона = Желтый;
			Области["П00001000"+(Стр+3)+"003"].Защита = Ложь;
			Области["П00001000"+(Стр+3)+"004"].Защита = Ложь;
			Области["П00001000"+(Стр+3)+"005"].Защита = Ложь;
		Иначе
			Области["П00001000"+(Стр+3)+"003"].ЦветФона = Зеленый;
			Области["П00001000"+(Стр+3)+"004"].ЦветФона = Зеленый;
			Области["П00001000"+(Стр+3)+"003"].Защита = Истина;
			Области["П00001000"+(Стр+3)+"004"].Защита = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьВБольшуюСторону(Ч)
	Если Ч = Цел(Ч) Тогда 
		Возврат Ч;
	Иначе
		Возврат Цел(Ч+1);
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма)
	
	УстановитьДоступностьСтр4_6Гр5(Форма);
	
	Области = Форма.ПолеТабличногоДокументаФормаОтчета.Области;
	Если Области.П000010001003.Значение = Области.П000010001004.Значение Тогда 
		Области.П000010004003.Значение = Цел(4*Области.П000010001004.Значение/100);
		Области.П000010004004.Значение = Области.П000010004003.Значение - Области.П000010004005.Значение;
		Если Области.П000010004004.Значение < ОкруглитьВБольшуюСторону(2*Области.П000010001004.Значение/100) Тогда
			Области.П000010004004.Значение = ОкруглитьВБольшуюСторону(2*Области.П000010001004.Значение/100);
			Области.П000010004005.Значение = Области.П000010004003.Значение - Области.П000010004004.Значение;
		КонецЕсли;
	ИначеЕсли Области.П000010001003.Значение > Области.П000010001004.Значение Тогда 
		Области.П000010004003.Значение = Цел(4*Области.П000010001004.Значение/100);
		Области.П000010004004.Значение = ОкруглитьВБольшуюСторону(2*Области.П000010001004.Значение/100);
		Области.П000010004005.Значение = Области.П000010004003.Значение - Области.П000010004004.Значение;
	КонецЕсли;
	
	Если Области.П000010002003.Значение = Области.П000010002004.Значение Тогда 
		Области.П000010005003.Значение = Цел(4*Области.П000010002004.Значение/100);
		Области.П000010005004.Значение = Области.П000010005003.Значение - Области.П000010005005.Значение;
		Если Области.П000010005004.Значение < ОкруглитьВБольшуюСторону(2*Области.П000010002004.Значение/100) Тогда
			Области.П000010005004.Значение = ОкруглитьВБольшуюСторону(2*Области.П000010002004.Значение/100);
			Области.П000010005005.Значение = Области.П000010005003.Значение - Области.П000010005004.Значение;
		КонецЕсли;
	ИначеЕсли Области.П000010002003.Значение > Области.П000010002004.Значение Тогда 
		Области.П000010005003.Значение = Цел(4*Области.П000010002004.Значение/100);
		Области.П000010005004.Значение = ОкруглитьВБольшуюСторону(2*Области.П000010002004.Значение/100);
		Области.П000010005005.Значение = Области.П000010005003.Значение - Области.П000010005004.Значение;
	КонецЕсли;
	
	Если Области.П000010003003.Значение = Области.П000010003004.Значение Тогда 
		Области.П000010006003.Значение = Цел(4*Области.П000010003004.Значение/100);
		Области.П000010006004.Значение = Области.П000010006003.Значение - Области.П000010006005.Значение;
		Если Области.П000010006004.Значение < ОкруглитьВБольшуюСторону(2*Области.П000010003004.Значение/100) Тогда
			Области.П000010006004.Значение = ОкруглитьВБольшуюСторону(2*Области.П000010003004.Значение/100);
			Области.П000010006005.Значение = Области.П000010006003.Значение - Области.П000010006004.Значение;
		КонецЕсли;
	ИначеЕсли Области.П000010003003.Значение > Области.П000010003004.Значение Тогда 
		Области.П000010006003.Значение = Цел(4*Области.П000010003004.Значение/100);
		Области.П000010006004.Значение = ОкруглитьВБольшуюСторону(2*Области.П000010003004.Значение/100);
		Области.П000010006005.Значение = Области.П000010006003.Значение - Области.П000010006004.Значение;
	КонецЕсли;

	// строки 07 - 09
	Области.П000010007003.Значение = Области.П000010007004.Значение + Области.П000010007005.Значение;
	Области.П000010008003.Значение = Области.П000010008004.Значение + Области.П000010008005.Значение;
	Области.П000010009003.Значение = Области.П000010009004.Значение + Области.П000010009005.Значение;
	
	// строки 11 - 13
	// Невыполненная квота (подлежит оплате) по месяцам  
	Области.П000010011003.Значение = Макс(Области.П000010004003.Значение - Области.П000010007003.Значение, 0);
	Области.П000010012003.Значение = Макс(Области.П000010005003.Значение - Области.П000010008003.Значение, 0);
	Области.П000010013003.Значение = Макс(Области.П000010006003.Значение - Области.П000010009003.Значение, 0);
	
	Области.П000010011004.Значение = Макс(Области.П000010004004.Значение - Области.П000010007004.Значение, 0);
	Области.П000010012004.Значение = Макс(Области.П000010005004.Значение - Области.П000010008004.Значение, 0);
	Области.П000010013004.Значение = Макс(Области.П000010006004.Значение - Области.П000010009004.Значение, 0);
	
	Области.П000010011005.Значение = Макс(Области.П000010004005.Значение - Области.П000010007005.Значение, 0);
	Области.П000010012005.Значение = Макс(Области.П000010005005.Значение - Области.П000010008005.Значение, 0);
	Области.П000010013005.Значение = Макс(Области.П000010006005.Значение - Области.П000010009005.Значение, 0);
	
	// строка 10
	// Невыполненная квота (подлежит оплате) за квартал
	Области.П000010010003.Значение = Области.П000010011003.Значение + Области.П000010012003.Значение + Области.П000010013003.Значение;
	Области.П000010010004.Значение = Области.П000010011004.Значение + Области.П000010012004.Значение + Области.П000010013004.Значение;
	Области.П000010010005.Значение = Области.П000010011005.Значение + Области.П000010012005.Значение + Области.П000010013005.Значение;
	
	Области.П000010014003.Значение = Области.П000010004003.Значение + Области.П000010005003.Значение + Области.П000010006003.Значение;
	Области.П000010014004.Значение = Области.П000010004004.Значение + Области.П000010005004.Значение + Области.П000010006004.Значение;
	Области.П000010015003.Значение = Области.П000010007003.Значение + Области.П000010008003.Значение + Области.П000010009003.Значение;
	Области.П000010015004.Значение = Области.П000010007004.Значение + Области.П000010008004.Значение + Области.П000010009004.Значение;
	
	// Раздел II.
	// строки 16 - 19
	Области.П000010016003.Значение = Области.П000010016004.Значение + Области.П000010016005.Значение;
	Области.П000010017003.Значение = Области.П000010017004.Значение + Области.П000010017005.Значение;
	Области.П000010018003.Значение = Области.П000010018004.Значение + Области.П000010018005.Значение;
	Области.П000010019003.Значение = Области.П000010019004.Значение + Области.П000010019005.Значение;
	
	// Раздел Справочно
	// Справка 1
	Области.П000010120003.Значение = Области.П000010120004.Значение + Области.П000010120005.Значение;
	
	Если Области.П000010021004.Значение > 0 Тогда
		Области.П000010024004.Значение = 0;
		Области.П000010024004.ЦветФона = Форма.СтруктураРеквизитовФормы.мЦветБелый;
		Области.П000010024004.Защита = Истина;
	Иначе
		Области.П000010024004.ЦветФона = Форма.СтруктураРеквизитовФормы.мЦветЖелтый;
		Области.П000010024004.Защита = Ложь;
	КонецЕсли;
	
	Области.П000010022004.Значение = Мин(Области.П000010021004.Значение, Макс(Области.П000010022004.Значение, 0));
	Области.П000010023004.Значение = Мин(Области.П000010021004.Значение - Области.П000010022004.Значение, Области.П000010023004.Значение);
	
	Области.П000010026003.Значение = Области.П000010011003.Значение;
	Области.П000010027003.Значение = Области.П000010012003.Значение;
	Области.П000010028003.Значение = Области.П000010013003.Значение;
	
	Области.П000010025003.Значение = Области.П000010010003.Значение;
	Области.П000010025004.Значение = Области.П000010026004.Значение + Области.П000010027004.Значение + Области.П000010028004.Значение;
	
	Области.П000010031004.Значение = Области.П000010021004.Значение + Области.П000010025004.Значение + Области.П000010029004.Значение + Области.П000010030004.Значение;
	Области.П000010033004.Значение = Мин(Области.П000010032004.Значение, Области.П000010033004.Значение);
	
	Области.П000010034004.Значение = Макс(Области.П000010031004.Значение - Области.П000010032004.Значение, 0);
	Переплата = Области.П000010032004.Значение - Области.П000010031004.Значение;
	Если Области.П000010034004.Значение > 0 Тогда
		Области.П000010037004.Значение = 0;
	Иначе
		Области.П000010037004.Значение = Переплата;
	КонецЕсли;
	
	Области.П000010035004.Значение = Мин(Области.П000010034004.Значение, Макс(Области.П000010035004.Значение, 0));
	Области.П000010036004.Значение = Мин(Области.П000010034004.Значение - Области.П000010035004.Значение, Области.П000010036004.Значение);
	
КонецПроцедуры // Расчет

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры // СохранитьОтчет()

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаКлиенте()

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции // ПередСохранением()

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;	
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);	
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем данные многострочных разделов
	ДанныеМногострочныхРазделов = Новый Структура;
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы1);
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);

	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вставляем флаг исключения данных обособленных подразделений
	СписокСохранения.Вставить("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений);
	
	// вставляем выбранное значение обособленного подразделения
	СписокСохранения.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	
	// вставляем структуру признаков установки границ снизу областей
	СписокСохранения.Вставить("УстановкиГраницСнизу", СтруктураПризнаковУстановкиНижнихГраницОбластей(ЭтаФорма));
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ОбработкаВыбораПоляОбособленныхПодразделений(ЭтаФорма, Область, СтандартнаяОбработка);
	
	Если СтрНайти(Область.Имя, "СоцГарант") > 0 Тогда
		Если СтрНайти(Область.Имя, "СоцГарантДДУ") > 0 Тогда
			Установить = Истина;
			Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			Если Область.ГраницаСнизу = Линия Тогда
				Установить = Ложь;
			КонецЕсли;
			УстановитьСнятьНижнююГраницуОбласти(ПолеТабличногоДокументаФормаОтчета.Области.СоцГарантДДУ1, Установить);
			УстановитьСнятьНижнююГраницуОбласти(ПолеТабличногоДокументаФормаОтчета.Области.СоцГарантДДУ2, Установить);
		Иначе
			УстановитьСнятьНижнююГраницуОбласти(Область);
		КонецЕсли;
	ИначеЕсли СтрНайти(Область.Имя, "ОргФС") > 0 Тогда
		УстановитьСнятьНижнююГраницуОбласти(Область);
	ИначеЕсли СтрНайти(Область.Имя, "ВывестиПриложениеНаПечать") > 0 Тогда
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
		КонецЕсли;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку("");
		СтандартнаяОбработка = Ложь;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 Тогда
		УдалитьСтроку("");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	РасчетНаКлиенте();
	Если Область.Имя = "ДатаПодписания" Тогда
		ЗаполнитьСведенияОбОрганизации(ЭтаФорма, Истина);
		ДатаПодписи = Область.Значение;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьДанныеОбособленныхПодразделенийПриИзменении(Элемент) Экспорт 
	
	НачЗначениеОбособленногоПодразделения = ОбособленноеПодразделение;
	
	УстановитьДоступностьЭУВыбораОбособленныхПодразделений(ЭтаФорма);
	
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		Если НачЗначениеОбособленногоПодразделения <> ОбособленноеПодразделение Тогда
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент) Экспорт 
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТабДок = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	Области = ПолеТабличногоДокументаФормаОтчета.Области;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧасть1а"));
	ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧасть1б"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 1-квотирование");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧасть2"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 1-квотирование");
	
	Если ЗначениеЗаполнено(Области.ВывестиПриложениеНаПечать.Значение) Тогда
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧастьПриложение1"));
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 1-квотирование");
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧасть3_1"));
		
		ВерхМногострочнойЧасти = Области.ОсновнаяЧасть3_1.Низ + 1;
		НизМногострочнойЧасти = Области.ДобавлениеСтроки1.Верх - 1;
		Область4 = ТабДок.ПолучитьОбласть("ОсновнаяЧасть3_2");
		
		ТекущийВерх = ВерхМногострочнойЧасти;
		Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
			ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
			МассивПроверки = Новый Массив;
			МассивПроверки.Добавить(ТекущаяОбластьМногострочнойЧасти);
			МассивПроверки.Добавить(Область4);
			Если ПечатнаяФорма.ПроверитьВывод(МассивПроверки) Тогда
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
			Иначе
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 1-квотирование");
				ПечатнаяФорма = Новый ТабличныйДокумент();
				ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
				ПечатнаяФорма.ОтображатьСетку     = Ложь;
				ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
				ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
				ПечатнаяФорма.Автомасштаб         = Истина;
				ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
				ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧасть3_1"));
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
			КонецЕсли;
			
			ТекущийВерх = ТекущийВерх + 1;
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧасть3_2"));
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 1-квотирование");
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Форма 1-квотирование (Москва)";
	СтрокаУровня1.Представление            = "Форма 1-квотирование (Москва)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФормаОтчета";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	#Если ВебКлиент Тогда
		ДобавитьСтрокуНаСервере(Неопределено);
	#Иначе
		ДобавитьСтрокуНаКлиенте(Неопределено);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	ТекТабличноеПоле = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		УдалитьДополнительнуюСтрокуНаСервере(Неопределено);
	#Иначе
		УдалитьДополнительнуюСтрокуНаКлиенте(Неопределено);
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница = Неопределено) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(Форма,ИмяГруппы);
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 0 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 0 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 0 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для НомерГрафы = 0 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Возврат ИдГрупп.мИдГруппы1;
	
КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		РегламентированнаяОтчетностьКлиентСервер.ДобавитьНеобходимоеКоличествоДопСтрок(Форма, ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 0 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// задаем значение ячейки
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере()
	
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	ПолеТабличногоДокументаФормаОтчета.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаОтчета2017Кв1_ФормаОтчета"));
	
	ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	СтруктураГруппы = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Возврат "ФормаОтчета";
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаНаименованиеСтатусаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции
