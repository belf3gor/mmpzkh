#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЕ

#Область ПроцедурыИФункцииОбщегоНазначения

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПриВыводеЗаголовка,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Ложь, Истина, Истина, Истина, Истина, Ложь);
							
КонецФункции

// Функция возвращает текст заголовка.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  ОрганизацияВНачале	 - Булево - Признак организации в начале заголовка.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Ведомость контрольных съемов показаний приборов учета потребителей " + Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy; ДП=...");
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  Схема				 - СхемаКомпоновкиДанных - Схема компоновки данных отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек компоновки данных отчета.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период) + 1);
	КонецЕсли;
	
	Таблица = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл		
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Если Таблица <> Неопределено Тогда
		// Группировка.
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				УПЖКХ_ТиповыеМетодыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

// В процедуре дорабатывается результат.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек компоновки данных отчета.
//  Результат			 - ТабличныйДокумент - Табличный документ для вывода в отчете.
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = Отчеты.УПЖКХ_ВедомостьКонтрольныхСъемовПоказанийПУ.ПолучитьМакет("ШапкаОтчета");
	
	ОбластьОтчета = Макет.ПолучитьОбласть("Шапка");
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ОбластьОтчета.Параметры.НаименованиеОрганизации = ПараметрыОтчета.Организация.НаименованиеСокращенное;
		СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, ПараметрыОтчета.Период);
		ОбластьОтчета.Параметры.ЮридическийАдрес = СведенияОбОрганизации.ЮридическийАдрес;
	КонецЕсли;
	
	Результат.Вывести(ОбластьОтчета);
	
КонецПроцедуры

// Возникает после вывода результата.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  Результат		 - ТабличныйДокумент - Табличный документ для вывода в отчете.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Вызывает настройку вариантов отчета.
//
// Параметры:
//  Настройки	   - Структура - Структура настроек отчета.
//  ОписаниеОтчета - Строка - Строка описания отчета.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	// Заглушка.
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
// Параметры:
//  Настройки - Структура - Структура настроек отчета.
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Функция возвращает пустой массив показателей.
Функция ПолучитьНаборПоказателей() Экспорт
	
	// Заглушка.
	НаборПоказателей = Новый Массив;
	
	Возврат НаборПоказателей;
	
КонецФункции

// Функция определяет внешние наборы данных для СКД.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  МакетКомпоновки	 - Макет - Макет компоновки данных отчета.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Получение данных по счетчикам.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_Счетчики.Ссылка,
	|	КВП_Счетчики.ЗаводскойНомер,
	|	КВП_Счетчики.Идентификатор
	|ИЗ
	|	Справочник.КВП_Счетчики КАК КВП_Счетчики
	|ГДЕ
	|	НЕ КВП_Счетчики.ЭтоГруппа";
	
	ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСчетчиков.Колонки.Добавить("ТипСчетчика");
	ТаблицаСчетчиков.Колонки.Добавить("НомерСчетчика");
	
	Для Каждого Счетчик Из ТаблицаСчетчиков Цикл
		
		Если НЕ ЗначениеЗаполнено(Счетчик.ЗаводскойНомер) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденРазделитель = Найти(Счетчик.ЗаводскойНомер, "-");
		Если НайденРазделитель = 0
			ИЛИ СтрЧислоВхождений(Счетчик.ЗаводскойНомер, "-") > 1 Тогда
			Счетчик.НомерСчетчика = Счетчик.ЗаводскойНомер;
			Продолжить;
		КонецЕсли;
		
		Счетчик.ТипСчетчика   = Сред(Счетчик.ЗаводскойНомер, 0, НайденРазделитель - 1);
		Счетчик.НомерСчетчика = Сред(Счетчик.ЗаводскойНомер, НайденРазделитель + 1, СтрДлина(Счетчик.ЗаводскойНомер));
		
	КонецЦикла;
	
	СтруктураВнешнихДанных = Новый Структура("Счетчики", ТаблицаСчетчиков);
	
	// Получение данных по адресам зданий.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивЗданий = Новый Массив;
	
	ЗапросВыборкиЗданий = Новый Запрос;
	ЗапросВыборкиЗданий.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания";
	
	ВыборкаЗданий = ЗапросВыборкиЗданий.Выполнить().Выбрать();
	Пока ВыборкаЗданий.Следующий() Цикл
		МассивЗданий.Добавить(ВыборкаЗданий.Ссылка);
	КонецЦикла;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);

	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЗданий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	СтруктураВнешнихДанных.Вставить("втАдресаЗданий", Запрос.Выполнить().Выгрузить());
	
	Возврат СтруктураВнешнихДанных;
	
КонецФункции // ПолучитьСтруктуруВнешнихДанных()

// Процедура выгрузки отчета во внешний файл.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  АдресХранилища	 - Строка - Строка адреса отчета во временном хранилище.
//
Процедура ВыгрузитьДанные(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ИмяФайлаДанных = ПолучитьИмяВременногоФайла("xml");
	ТекстСообщения = "";
	СхемаКомпоновкиДанных = Отчеты.УПЖКХ_ВедомостьКонтрольныхСъемовПоказанийПУ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	// Получаем настройки по умолчанию для СКД.
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
	
	// Записываем настройки.
	НоваяЗапись = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НоваяЗапись.Использование    = Истина;
	НоваяЗапись.Поле             = КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы.Найти("ИдентификаторСчетчика").Поле;
	НоваяЗапись.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		ЗаполнитьЗначенияСвойств(Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), ЭлементОтбора);
	КонецЦикла;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		ЗаполнитьЗначенияСвойств(Настройки.ПараметрыДанных.Элементы.Добавить(), ЭлементОтбора);
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	СтруктураВнешнихДанных = ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, СтруктураВнешнихДанных, , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаРезультатов = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайлаДанных, "UTF-16");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("DATA");
	ЗаписьXML.ЗаписатьАтрибут("DBVERSION", "");
	ЗаписьXML.ЗаписатьНачалоЭлемента("DOCUMENTS");
	ЗаписьXML.ЗаписатьНачалоЭлемента("DOCUMENT");
	ЗаписьXML.ЗаписатьАтрибут("GUID", "D18203A4-3458-47DB-8900-0B0E7233A45E");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Для Каждого СтрокаРезультатов Из ТаблицаРезультатов Цикл
		
		Если ЗначениеЗаполнено(СтрокаРезультатов.Госповерка) Тогда
			
			Госповерка = СтрЗаменить(Сред(СтрокаРезультатов.Госповерка, 0, Найти(СтрокаРезультатов.Госповерка, ",") - 1), Символы.НПП, "")
						 + Сред(СтрокаРезультатов.Госповерка, Найти(СтрокаРезультатов.Госповерка, ","), СтрДлина(СтрокаРезультатов.Госповерка));
			
		Иначе
			Госповерка = "";
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ITEM");
		ЗаписьXML.ЗаписатьАтрибут("GUID",      Строка(СтрокаРезультатов.ИдентификаторСчетчика));
		ЗаписьXML.ЗаписатьАтрибут("dt",        Формат(ТекущаяДата(), "ДФ=""гггг-ММ-ддТЧЧ:мм:сс"""));
		ЗаписьXML.ЗаписатьАтрибут("IsDeleted", "0");
		ЗаписьXML.ЗаписатьАтрибут("IsPost",    "0");
		ЗаписьXML.ЗаписатьАтрибут("DocNumber", "");
		ЗаписьXML.ЗаписатьАтрибут("A01",       Строка(СтрокаРезультатов.ЛицевойСчет.Идентификатор));
		ЗаписьXML.ЗаписатьАтрибут("A02",       Строка(СтрокаРезультатов.ОтветственныйВладелец));
		ЗаписьXML.ЗаписатьАтрибут("A03",       Строка(Число(СтрокаРезультатов.СчетчикДействует)));
		ЗаписьXML.ЗаписатьАтрибут("A04",       Строка(СтрокаРезультатов.Улица));
		ЗаписьXML.ЗаписатьАтрибут("A05",       Строка(СтрокаРезультатов.Дом));
		ЗаписьXML.ЗаписатьАтрибут("A06",       Строка(СтрокаРезультатов._НомерКвартиры_));
		ЗаписьXML.ЗаписатьАтрибут("A07",       Строка(СтрокаРезультатов.Корпус));
		ЗаписьXML.ЗаписатьАтрибут("A08",       Строка(СтрокаРезультатов.ТипСчетчика));
		ЗаписьXML.ЗаписатьАтрибут("A09",       Строка(СтрокаРезультатов.НомерСчетчика));
		ЗаписьXML.ЗаписатьАтрибут("A010",      Строка(СтрокаРезультатов.Значность));
		ЗаписьXML.ЗаписатьАтрибут("A011",      "");
		ЗаписьXML.ЗаписатьАтрибут("A012",      Госповерка);
		ЗаписьXML.ЗаписатьАтрибут("A013",      "");
		ЗаписьXML.ЗаписатьАтрибут("A014",      "");
		ЗаписьXML.ЗаписатьАтрибут("A015",      "");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.Закрыть();
		
	ФайлДанных = Новый ДвоичныеДанные(ИмяФайлаДанных);
	
	Результат = Новый Структура("Сообщение, ДвоичныеДанные", ТекстСообщения, ФайлДанных);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли