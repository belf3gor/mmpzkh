#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если НЕ ПараметрыОтчета.Свойство("ВариантОтбораУслуг") Тогда
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
	КонецЕсли;
	
	Если Не ПараметрыОтчета.Свойство("РазделУчета") Тогда
		ПараметрыОтчета.Вставить("РазделУчета", "");
	КонецЕсли;
	
	Если Не ПараметрыОтчета.Свойство("ВидНачисления") Тогда
		ПараметрыОтчета.Вставить("ВидНачисления", "");
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Отчеты.КВП_КарточкаРасчетов.ПолучитьМакет("Макет");
	
	Если ПараметрыОтчета.ВариантВыводаСведенийОЗадолженности = "в основной таблице" Тогда
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицыССальдо");
		ОбластьСальдоНачальное = Макет.ПолучитьОбласть("СальдоНачальное");
		ОбластьДетали          = Макет.ПолучитьОбласть("ДеталиССальдо");
		ОбластьОбороты         = Макет.ПолучитьОбласть("ОборотыССальдо");
		ОбластьСальдоКонечное  = Макет.ПолучитьОбласть("СальдоКонечное");
	Иначе
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыБезСальдо");
		ОбластьДетали       = Макет.ПолучитьОбласть("ДеталиБезСальдо");
		ОбластьОбороты      = Макет.ПолучитьОбласть("ОборотыБезСальдо");
	КонецЕсли;
	
	#Область Заголовок
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовка.Параметры.Заголовок = ЗаголовокОтчета(ПараметрыОтчета);
	
	ОбластьЗаголовка.Параметры.Собственник = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ПараметрыОтчета.ЛицевойСчет, ПараметрыОтчета.КонецПериода);
	ТекущийЛС = ?(ТекущийЛС = Неопределено, ПараметрыОтчета.ЛицевойСчет, ТекущийЛС);
	ОбластьЗаголовка.Параметры.Адрес = ПолучитьАдресПомещения(ТекущийЛС.Адрес.Владелец.Наименование, ТекущийЛС.Адрес);
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовка);
	
	ВысотаЗаголовка = ТабличныйДокумент.ВысотаТаблицы;
	
	#КонецОбласти
	
	#Область Строка_с_начальным_сальдо
	
	Если ПараметрыОтчета.ВариантВыводаСведенийОЗадолженности = "в основной таблице" Тогда
		// Нахождение начального и конечного сальдо.
		СальдоНач = ПолучитьНачальноеСальдо(ПараметрыОтчета);
		
		ОбластьСальдоНачальное.Параметры.ДатаНач       = Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСальдоНачальное.Параметры.Задолженность = СальдоНач;
		ТабличныйДокумент.Вывести(ОбластьСальдоНачальное);
		
		ТекЗадолженность = СальдоНач;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Начисления_с_сальдо
	
	// Шапка таблицы
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаНач",       ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон",       КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",   ПараметрыОтчета.ЛицевойСчет);
	
	Если НЕ ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		Запрос.УстановитьПараметр("СписокУслуг", ПараметрыОтчета.СписокУслуг);
	КонецЕсли;
	
	СтруктураОтбора = СформироватьСтруктуруОтбораПрограммныхРазделовУчетаИВидовНачислений(ПараметрыОтчета);
	Если СтруктураОтбора <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВидНачисления", СтруктураОтбора.ВидыНачислений);
		Запрос.УстановитьПараметр("РазделУчета",   СтруктураОтбора.РазделыУчета);
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса(ПараметрыОтчета);
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаИтогов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	ВыборкаИтогов.Следующий();
	
	// Таблица
	ОбластьОбороты.Параметры.Заполнить(ВыборкаИтогов); // Общие итоги идут первой строкой.
	
	ВыборкаДанных = ВыборкаИтогов.Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		Если ПараметрыОтчета.ВариантВыводаСведенийОЗадолженности = "в основной таблице" Тогда
			ТекЗадолженность = ТекЗадолженность + ВыборкаДанных.Начислено - ВыборкаДанных.Оплачено;
			ОбластьДетали.Параметры.Задолженность = ТекЗадолженность;
		КонецЕсли;
		ОбластьДетали.Параметры.Заполнить(ВыборкаДанных);
		ТабличныйДокумент.Вывести(ОбластьДетали);
	КонецЦикла;
	
	// ОбластьОбороты
	ТабличныйДокумент.Вывести(ОбластьОбороты);
	
	#КонецОбласти
	
	Если ПараметрыОтчета.ВариантВыводаСведенийОЗадолженности = "в основной таблице" Тогда// Сальдо конечное
		ОбластьСальдоКонечное.Параметры.ДатаКон       = Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy");
		ОбластьСальдоКонечное.Параметры.Задолженность = ТекЗадолженность;
		ТабличныйДокумент.Вывести(ОбластьСальдоКонечное);
	Иначе
		
		ТаблицаЗадолженностиИНачислений = ПолучитьТаблицуЗадолженностиИНачислений(ПараметрыОтчета);
		
		Область = Макет.ПолучитьОбласть("ЗаголовокТаблицыЗадолженности");
		Область.Параметры.НачалоПериода = Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		Область.Параметры.КонецПериода  = Формат(ПараметрыОтчета.КонецПериода,  "ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ШапкаТаблицыЗадолженности");
		ТабличныйДокумент.Вывести(Область);
		
		Если ТаблицаЗадолженностиИНачислений.Количество() > 0 Тогда
			Для каждого ТекСтрока Из ТаблицаЗадолженностиИНачислений Цикл
				Если ТекСтрока.ВыделятьСтроку Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТаблицыЗадолженностиСВыделением");
				Иначе
					Область = Макет.ПолучитьОбласть("СтрокаТаблицыЗадолженности");
				КонецЕсли;
				Область.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(Область);
			КонецЦикла;
		Иначе
			// Пустая строка с начальным сальдо.
			ОбластьВыделенная = Макет.ПолучитьОбласть("СтрокаТаблицыЗадолженностиСВыделением");
			ОбластьВыделенная.Параметры.ОписаниеСтроки  = "Начальное сальдо";
			ОбластьВыделенная.Параметры.Всего           = 0;
			ОбластьВыделенная.Параметры.РасчетПоУслугам = 0;
			ОбластьВыделенная.Параметры.Пени            = 0;
			ОбластьВыделенная.Параметры.Рассрочка       = 0;
			ТабличныйДокумент.Вывести(ОбластьВыделенная);
			
			// Пустая строка с начислениями за период.
			ОбластьОбычная = Макет.ПолучитьОбласть("СтрокаТаблицыЗадолженности");
			ОбластьОбычная.Параметры.ОписаниеСтроки  = "	Начислено за период";
			ОбластьОбычная.Параметры.Всего           = 0;
			ОбластьОбычная.Параметры.РасчетПоУслугам = 0;
			ОбластьОбычная.Параметры.Пени            = 0;
			ОбластьОбычная.Параметры.Рассрочка       = 0;
			ТабличныйДокумент.Вывести(ОбластьОбычная);
			
			// Пустая строка с оплатами за период.
			ОбластьОбычная.Параметры.ОписаниеСтроки  = "	Оплачено за период";
			ТабличныйДокумент.Вывести(ОбластьОбычная);
			
			// Пустая строка с итогами за период.
			ОбластьОбычная.Параметры.ОписаниеСтроки  = "	Итого за период";
			ТабличныйДокумент.Вывести(ОбластьОбычная);
			
			// Пустая строка с конечным сальдо.
			ОбластьВыделенная.Параметры.ОписаниеСтроки  = "Конечное сальдо";
			ТабличныйДокумент.Вывести(ОбластьВыделенная);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Зафиксируем заголовок отчета и колонки
	ТабличныйДокумент.ФиксацияСверху = ВысотаЗаголовка + 2;
	
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область(ВысотаЗаголовка + 2, , ВысотаЗаголовка + 3, );
	
	// Первую колонку не печатаем
	ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(1, 2,
	                                  ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ТабличныйДокумент.ИмяПараметровПечати = "КарточкаРасчетаКВП";
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

// Формирует и возвращает текст запроса
//
Функция ПолучитьТекстЗапроса(ПараметрыОтчета)
	
	Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		УсловиеНаУслугу = "ИСТИНА";
	Иначе
		Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
			УсловиеНаУслугу = "Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет кроме указанных услуг" Тогда
			УсловиеНаУслугу = "НЕ Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			УсловиеНаУслугу = "Услуга В (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
			УсловиеНаУслугу = "НЕ Услуга В (&СписокУслуг)";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыОтчета.РазделУчета) Тогда
		УсловиеНаРазделУчета = "ИСТИНА";
	Иначе
		УсловиеНаРазделУчета = "РазделУчета В (&РазделУчета)";
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыОтчета.ВидНачисления) Тогда
		УсловиеНаВидНачисления = "ИСТИНА";
	Иначе
		УсловиеНаВидНачисления = "ВидНачисления В (&ВидНачисления)";
	КонецЕсли;
	
	Если ПараметрыОтчета.Организация.Пустая() Тогда
		УсловиеНаОрганизацию = "ИСТИНА";
	Иначе
		УсловиеНаОрганизацию = "Организация = &Организация";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, ДЕНЬ) КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_НачисленияОбороты.Регистратор) КАК ПредставлениеДокумента,
	|	УПЖКХ_НачисленияОбороты.Регистратор КАК Документ,
	|	УПЖКХ_НачисленияОбороты.Регистратор.Номер КАК НомерДокумента,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|			ТОГДА ""Расчеты по услугам""
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|			ТОГДА ""Льготы""
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|			ТОГДА ""Пени""
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка))
	|			ТОГДА ""Комиссия банка""
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка))
	|			ТОГДА ""Рассрочка""
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))
	|			ТОГДА ""Добровольное страхование""
	|	КОНЕЦ КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо)
	|			ТОГДА ""Ввод начального сальдо""
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
	|			ТОГДА ""Начисление""
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
	|			ТОГДА ""Корректировка""
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата))
	|			ТОГДА ""Оплата""
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА ""Закрытие авансов""
	|	КОНЕЦ КАК ВидНачисления,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачисленияОборот,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Оплачено,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Начислено
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(&ДатаНач, &ДатаКон, Регистратор, &ДопПараметр) КАК УПЖКХ_НачисленияОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	УПЖКХ_НачисленияОбороты.Услуга.Наименование
	|{УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	НомерДокумента,
	|	Услуга.*}
	|ИТОГИ
	|	СУММА(Оплачено),
	|	СУММА(Начислено)
	|ПО
	|	ОБЩИЕ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопПараметр", "ЛицевойСчет = &ЛицевойСчет И " 
								+ УсловиеНаУслугу + " И " + УсловиеНаРазделУчета + " И " + УсловиеНаВидНачисления + " И " + УсловиеНаОрганизацию);
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапроса()

// Предназначена для определения сведений о задолженности и оборотах по начислениям
// за отчетный период по выбранному лицевому счету.
Функция ПолучитьТаблицуЗадолженностиИНачислений(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		УсловиеНаОтборУслуг = "ИСТИНА";
	Иначе
		Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
			УсловиеНаОтборУслуг = "Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет кроме указанных услуг" Тогда
			УсловиеНаОтборУслуг = "НЕ Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			УсловиеНаОтборУслуг = "Услуга В (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
			УсловиеНаОтборУслуг = "НЕ Услуга В (&СписокУслуг)";
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокУслуг", ПараметрыОтчета.СписокУслуг);
	КонецЕсли;
	
	Если ПараметрыОтчета.Организация.Пустая() Тогда
		УсловиеНаОрганизацию = "ИСТИНА";
	Иначе
		УсловиеНаОрганизацию = "Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("ЛицевойСчет",   ПараметрыОтчета.ЛицевойСчет);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления КАК ВидНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток КАК НачальноеСальдо,
	|	0 КАК НачисленоЗаПериод,
	|	0 КАК ОплаченоЗаПериод,
	|	0 КАК ИтогоЗаПериод,
	//|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияОборот КАК ИтогоЗаПериод,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток КАК КонечноеСальдо
	|ПОМЕСТИТЬ втТаблицаЗадолженностиИНачисленийБезГруппировок
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			&УсловиеНаОрганизацию
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И &УсловиеНаОтборУслуг) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА 0
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|	КОНЕЦ,
	//|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			&УсловиеНаОрганизацию
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И &УсловиеНаОтборУслуг) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЗадолженностиИНачисленийБезГруппировок.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаЗадолженностиИНачисленийБезГруппировок.ВидНачисления КАК ВидНачисления,
	|	СУММА(втТаблицаЗадолженностиИНачисленийБезГруппировок.НачальноеСальдо) КАК НачальноеСальдо,
	|	СУММА(втТаблицаЗадолженностиИНачисленийБезГруппировок.НачисленоЗаПериод) КАК НачисленоЗаПериод,
	|	СУММА(втТаблицаЗадолженностиИНачисленийБезГруппировок.ОплаченоЗаПериод) КАК ОплаченоЗаПериод,
	|	СУММА(втТаблицаЗадолженностиИНачисленийБезГруппировок.ИтогоЗаПериод) КАК ИтогоЗаПериод,
	|	СУММА(втТаблицаЗадолженностиИНачисленийБезГруппировок.КонечноеСальдо) КАК КонечноеСальдо
	|ПОМЕСТИТЬ втТаблицаЗадолженностиИНачислений
	|ИЗ
	|	втТаблицаЗадолженностиИНачисленийБезГруппировок КАК втТаблицаЗадолженностиИНачисленийБезГруппировок
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаЗадолженностиИНачисленийБезГруппировок.ВидНачисления,
	|	втТаблицаЗадолженностиИНачисленийБезГруппировок.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	""Начальное сальдо"" КАК ОписаниеСтроки,
	|	ИСТИНА КАК ВыделятьСтроку,
	|	СУММА(втТаблицаЗадолженностиИНачислений.НачальноеСальдо) КАК Всего,
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.НачальноеСальдо
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РасчетПоУслугам,
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.НачальноеСальдо
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Пени,
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.НачальноеСальдо
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Рассрочка
	|ИЗ
	|	втТаблицаЗадолженностиИНачислений КАК втТаблицаЗадолженностиИНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет,
	|	""	Начислено за период"",
	|	ЛОЖЬ,
	|	СУММА(втТаблицаЗадолженностиИНачислений.НачисленоЗаПериод),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.НачисленоЗаПериод
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.НачисленоЗаПериод
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.НачисленоЗаПериод
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	втТаблицаЗадолженностиИНачислений КАК втТаблицаЗадолженностиИНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет,
	|	""	Оплачено за период"",
	|	ЛОЖЬ,
	|	СУММА(втТаблицаЗадолженностиИНачислений.ОплаченоЗаПериод),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.ОплаченоЗаПериод
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.ОплаченоЗаПериод
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.ОплаченоЗаПериод
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	втТаблицаЗадолженностиИНачислений КАК втТаблицаЗадолженностиИНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет,
	|	""	Итого за период"",
	|	ЛОЖЬ,
	|	СУММА(втТаблицаЗадолженностиИНачислений.ИтогоЗаПериод),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.ИтогоЗаПериод
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.ИтогоЗаПериод
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.ИтогоЗаПериод
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	втТаблицаЗадолженностиИНачислений КАК втТаблицаЗадолженностиИНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет,
	|	""Конечное сальдо"",
	|	ИСТИНА,
	|	СУММА(втТаблицаЗадолженностиИНачислений.КонечноеСальдо),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.КонечноеСальдо
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.КонечноеСальдо
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаЗадолженностиИНачислений.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
	|				ТОГДА втТаблицаЗадолженностиИНачислений.КонечноеСальдо
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	втТаблицаЗадолженностиИНачислений КАК втТаблицаЗадолженностиИНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаЗадолженностиИНачислений.ЛицевойСчет";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОтборУслуг",  УсловиеНаОтборУслуг);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОрганизацию", УсловиеНаОрганизацию);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуЗадолженностиИНачислений()

// Формирует заголовок отчета.
//
// Возвращаемое значение:
//  Строка - заголовок отчета
//
Функция ЗаголовокОтчета(ПараметрыОтчета)
	
	ИнформационнаяПодстрокаСОтборомУслуг = "";
	Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		ИнформационнаяПодстрокаСОтборомУслуг = " по всем услугам";
	ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
		ИнформационнаяПодстрокаСОтборомУслуг = " по услугам, выбранным в таблице ""Отбор услуг""";
	ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
		ИнформационнаяПодстрокаСОтборомУслуг = " по услугам, отличным от кап. ремонта";
	ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
		ИнформационнаяПодстрокаСОтборомУслуг = " по услугам кап. ремонта";
	КонецЕсли;
	
	Возврат "КАРТОЧКА РАСЧЕТОВ" + Символы.ПС + "за период с " + Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy; ДП=01.01.0001")
	      + " по " + Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy") + Символы.ПС
	      + "по лицевому счету " + ПараметрыОтчета.ЛицевойСчет.Наименование
	      + ИнформационнаяПодстрокаСОтборомУслуг;
КонецФункции

// Формирует структуры с массивами пользовательских разделов учета и видов начисления,
// которые могут быть использованы в отборах.
//
Функция ЗаполнитьСтруктуруСМассивамиРазделовУчетаИВидовНачисления() Экспорт
	
	МассивРазделовУчета = Новый Массив;
	МассивРазделовУчета.Добавить("Расчеты по услугам");
	МассивРазделовУчета.Добавить("Льготы");
	МассивРазделовУчета.Добавить("Пени");
	МассивРазделовУчета.Добавить("Комиссия банка");
	МассивРазделовУчета.Добавить("Рассрочка");
	МассивРазделовУчета.Добавить("Добровольное страхование");
	
	МассивВидовНачисления = Новый Массив;
	МассивВидовНачисления.Добавить("Ввод начального сальдо");
	МассивВидовНачисления.Добавить("Начисление");
	МассивВидовНачисления.Добавить("Корректировка");
	МассивВидовНачисления.Добавить("Оплата");
	МассивВидовНачисления.Добавить("Закрытие авансов");
	
	СтруктураПараметров = Новый Структура("МассивРазделовУчета, МассивВидовНачисления");
	СтруктураПараметров.МассивРазделовУчета   = МассивРазделовУчета;
	СтруктураПараметров.МассивВидовНачисления = МассивВидовНачисления;
	
	Возврат СтруктураПараметров;
	
КонецФункции // ЗаполнитьСтруктуруСоСпискамиРазделовУчетаИВидовНачисления()

// Формирует список программных разделов учета и видов начисления на основании
// введенных пользовательского раздела учета и вида начисления.
//
Функция СформироватьСтруктуруОтбораПрограммныхРазделовУчетаИВидовНачислений(ПараметрыОтчета)
	
	РазделУчета   = ПараметрыОтчета.РазделУчета;
	ВидНачисления = ПараметрыОтчета.ВидНачисления;
	
	Если ПустаяСтрока(РазделУчета) И ПустаяСтрока(ВидНачисления) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//СтруктураПараметров = Отчеты.КВП_КарточкаРасчетов.ЗаполнитьСтруктуруСМассивамиРазделовУчетаИВидовНачисления();
	СтруктураПараметров = ЗаполнитьСтруктуруСМассивамиРазделовУчетаИВидовНачисления();
	
	РазделыУчета   = Новый СписокЗначений;
	ВидыНачислений = Новый СписокЗначений;
	
	// "Расчеты по услугам"
	Если РазделУчета = СтруктураПараметров.МассивРазделовУчета[0] Тогда
		РазделыУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг);
		РазделыУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ);
	// "Льготы"
	 ИначеЕсли РазделУчета = СтруктураПараметров.МассивРазделовУчета[1] Тогда
		РазделыУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.Льготы);
	// "Пени"
	 ИначеЕсли РазделУчета = СтруктураПараметров.МассивРазделовУчета[2] Тогда
		РазделыУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.Пени);
	// "Комиссия банка"
	 ИначеЕсли РазделУчета = СтруктураПараметров.МассивРазделовУчета[3] Тогда
		РазделыУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка);
	// "Рассрочка"
	 ИначеЕсли РазделУчета = СтруктураПараметров.МассивРазделовУчета[4] Тогда
		РазделыУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.Рассрочка);
	// "Добровольное страхование"
	 ИначеЕсли РазделУчета = СтруктураПараметров.МассивРазделовУчета[5] Тогда
		РазделыУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование);
	КонецЕсли;
	
	// "Ввод начального сальдо"
	Если ВидНачисления = СтруктураПараметров.МассивВидовНачисления[0] Тогда
		ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо);
	// "Начисление"
	ИначеЕсли ВидНачисления = СтруктураПараметров.МассивВидовНачисления[1] Тогда
		// "Расчеты по услугам"
		Если РазделУчета = СтруктураПараметров.МассивРазделовУчета[0] Тогда
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.СервисныеУслуги);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ФактическиеЗатраты);
		ИначеЕсли НЕ ПустаяСтрока(РазделУчета) Тогда
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
			// "Комиссия банка"
			Если РазделУчета = СтруктураПараметров.МассивРазделовУчета[3] Тогда
				ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Комиссия);
			КонецЕсли;
		Иначе
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.СервисныеУслуги);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ФактическиеЗатраты);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Комиссия);
		КонецЕсли;
	// "Корректировка"
	ИначеЕсли ВидНачисления = СтруктураПараметров.МассивВидовНачисления[2] Тогда
		// "Расчеты по услугам"
		Если РазделУчета = СтруктураПараметров.МассивРазделовУчета[0] Тогда
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ);
		// "Льготы" или "Пени"
		ИначеЕсли РазделУчета = СтруктураПараметров.МассивРазделовУчета[1]
		 ИЛИ РазделУчета = СтруктураПараметров.МассивРазделовУчета[2] Тогда
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Корректировка);
		Иначе
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ);
			ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Корректировка);
		КонецЕсли;
	// "Оплаты"
	ИначеЕсли ВидНачисления = СтруктураПараметров.МассивВидовНачисления[3] Тогда
		ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Оплата);
	// "Закрытие авансов"
	ИначеЕсли ВидНачисления = СтруктураПараметров.МассивВидовНачисления[4] Тогда
		ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("РазделыУчета, ВидыНачислений");
	СтруктураОтбора.РазделыУчета   = РазделыУчета;
	СтруктураОтбора.ВидыНачислений = ВидыНачислений;
	
	Возврат СтруктураОтбора;
	
КонецФункции // СформироватьСтруктуруОтбораПрограммныхРазделовУчетаИВидовНачислений()

// Находит остаток на дату начала указанного периода
//
// Возвращаемое значение:
//  Число – остаток
//
Функция ПолучитьНачальноеСальдо(ПараметрыОтчета)
	
	Запрос = Новый Запрос();
	
	Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		ДопУсловия = "ИСТИНА";
	Иначе
		Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
			ДопУсловия = "Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет кроме указанных услуг" Тогда
			ДопУсловия = "НЕ Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			ДопУсловия = "Услуга В (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
			ДопУсловия = "НЕ Услуга В (&СписокУслуг)";
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокУслуг", ПараметрыОтчета.СписокУслуг);
	КонецЕсли;
	
	Если Не ПараметрыОтчета.Организация.Пустая() Тогда
		ДопУсловия = ДопУсловия + " И Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(НачисленияНаЛС.СуммаНачисленияОстаток, 0) КАК Остаток
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|		&Дата, ЛицевойСчет = &ЛицевойСчет И " + ДопУсловия + ") КАК НачисленияНаЛС";
	
	Запрос.УстановитьПараметр("Дата",        НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("ЛицевойСчет", ПараметрыОтчета.ЛицевойСчет);
	
	ТаблРез = Запрос.Выполнить().Выгрузить();
	ТаблРез.Свернуть("", "Остаток");
	
	Возврат ТаблРез.Получить(0).Остаток;
	
КонецФункции // ПолучитьНачальноеСальдо()

#КонецОбласти

#КонецЕсли