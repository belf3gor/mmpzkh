
#Область ИнициализацияПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПриСозданииНаСервере" формы.
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка настроек печати по умолчанию. Если настройки были изменены, они будут загружены при формировании отчета.
	Результат.АвтоМасштаб = Истина;
	
	// Если форма открыта из внешнего источника записываются переданные параметры.
	Параметры.Свойство("ЛицевойСчет",             ВнешнееФормирование_ЛицевойСчет);
	Параметры.Свойство("Организация",             ВнешнееФормирование_Организация);
	Параметры.Свойство("НачалоПериода",           ВнешнееФормирование_НачалоПериода);
	Параметры.Свойство("КонецПериода",            ВнешнееФормирование_КонецПериода);
	Параметры.Свойство("СформироватьПриОткрытии", СформироватьПриОткрытии);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.День,
																	Элементы.ВидПериода.СписокВыбора, ВидПериода);
	
	СтруктураПараметров = Отчеты.КВП_КарточкаРасчетов.ЗаполнитьСтруктуруСМассивамиРазделовУчетаИВидовНачисления();
	Элементы.РазделУчета.СписокВыбора.ЗагрузитьЗначения(СтруктураПараметров.МассивРазделовУчета);
	Элементы.ВидНачисления.СписокВыбора.ЗагрузитьЗначения(СтруктураПараметров.МассивВидовНачисления);
	
	УправлениеФормой(ЭтаФорма);
	
	// СхемыУчета
	ОТР_СхемыУчетаСервер.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаОсновнаяКоманднаяПанель);
	// Конец СхемыУчета
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события "ПриОткрытии" формы.
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	ОбновитьРеквизитыКапРемонта();
	
	УправлениеФормой(ЭтаФорма);
	
	// Если отчет был открыт из внешнего источника, то будут установлены переданные настройки.
	Если Не (ВнешнееФормирование_ЛицевойСчет.Пустая() Или ВнешнееФормирование_Организация.Пустая()) Тогда
		Отчет.ЛицевойСчет   = ВнешнееФормирование_ЛицевойСчет;
		Отчет.Организация   = ВнешнееФормирование_Организация;
		Отчет.НачалоПериода = ВнешнееФормирование_НачалоПериода;
		Отчет.КонецПериода  = ВнешнееФормирование_КонецПериода;
		ВидПериода          = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	КонецЕсли;
	
	// Если отчет открыт из внешнего источника и был передан параметр СформироватьПриОткрытии в значении Истина,
	// то отчет будет сформирован при открытии.
	Если СформироватьПриОткрытии Тогда
		СформироватьОтчет(Команды.СформироватьОтчет);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПриЗакрытии" формы.
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры // ПриЗакрытии()

// Обработчик события "ОбработкаОповещения" формы.
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = Отчет.Организация) ИЛИ ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		
		ОбновитьРеквизитыКапРемонта();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура возникает при сохранении настроек на сервере.
&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
КонецПроцедуры // ПриСохраненииПользовательскихНастроекНаСервере()

// Процедура возникает при загрузке настроек на сервере.
&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеПользовательскихНастроекНаСервере()

// Процедура возникает при загрузке варианта на сервере.
&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	
КонецПроцедуры // ПриЗагрузкеВариантаНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

// Обработчик события "ПриИзменении" поля "ВидПериода".
&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода, Период);
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ВидПериодаПриИзменении()

// Обработчик события "ПриИзменении" поля "Период".
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ПериодПриИзменении()

// Обработчик события "НачалоВыбора" поля "Период".
&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, Отчет.НачалоПериода, ОписаниеОповещения);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ПериодНачалоВыбора()

// Процедура окончания асинхроного выбора периода.
&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период.
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Отчет.НачалоПериода = СтруктураПериода.НачалоПериода;
		Отчет.КонецПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры // ПериодНачалоВыбораЗавершение()

// Обработчик события "ОбработкаВыбора" поля "Период".
&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
		
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ПериодОбработкаВыбора()

// Обработчик события "АвтоПодбор" поля "Период".
&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры // ПериодАвтоПодбор()

// Обработчик события "ОкончаниеВводаТекста" поля "Период".
&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры // ПериодОкончаниеВводаТекста()

// Обработчик события "ПриИзменении" поля "НачалоПериода".
&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // НачалоПериодаПриИзменении()

// Обработчик события "ПриИзменении" поля "КонецПериода".
&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // КонецПериодаПриИзменении()

// Обработчик события "ПриИзменении" поля "НачалоПериодаДень".
&НаКлиенте
Процедура НачалоПериодаДеньПриИзменении(Элемент)
	
	Отчет.КонецПериода = КонецДня(Отчет.НачалоПериода);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // НачалоПериодаДеньПриИзменении()

// Обработчик события "ПриИзменении" поля "Организация".
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	// Обновление информационнной надписи о ведении учета по КР.
	ОбновитьРеквизитыКапРемонта();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события "ПриИзменении" поля "ЛицевойСчет".
&НаКлиенте
Процедура ЛицевойСчетПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ЛицевойСчетПриИзменении()

// Обработчик события "ПриИзменении" поля "Услуга".
&НаКлиенте
Процедура УслугаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // УслугаПриИзменении()

// Обработчик события "ПриИзменении" поля "ВидНачисления".
&НаКлиенте
Процедура ВидНачисленияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ВидНачисленияПриИзменении()

// Обработчик события "ПриИзменении" поля "ВариантВыводаСведенийОЗадолженности".
&НаКлиенте
Процедура ВариантВыводаСведенийОЗадолженностиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ВариантВыводаСведенийОЗадолженностиПриИзменении()

// Обработчик события "ПриИзменении" поля "РазделУчета".
&НаКлиенте
Процедура РазделУчетаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // РазделУчетаПриИзменении()

// Обработчик события "ПриИзменении" поля "ВариантОтбораУслуг".
&НаКлиенте
Процедура ВариантОтбораУслугПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ВариантОтбораУслугПриИзменении()

// Обработчик события "ОбработкаДополнительнойРасшифровки" поля "Результат".
&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры // РезультатОбработкаДополнительнойРасшифровки()

// Обработчик события "Нажатие" гиперссылки "КомандаПоказатьНастройкиВеденияКР".
&НаКлиенте
Процедура КомандаПоказатьНастройкиВеденияКР(Команда)
	
	СсылкаНаЭлемент = ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Отчет.Организация);
	Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены
		И СсылкаНаЭлемент = Неопределено Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Владелец", Отчет.Организация), ЭтаФорма);
	Иначе
		Если ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, "ПометкаУдаления") Тогда
			Оповещение = Новый ОписаниеОповещения("КнопкаНастройкаВеденияКРНажатиеЗавершение", ЭтотОбъект, СсылкаНаЭлемент);
			
			ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
						 + Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КомандаПоказатьНастройкиВеденияКР()

// Процедура - обработчик результата опроса команды "НадписьЭлементСправочника".
//
&НаКлиенте
Процедура КнопкаНастройкаВеденияКРНажатиеЗавершение(Ответ, ДополнительныйПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(ДополнительныйПараметр);
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ДополнительныйПараметр), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаВеденияКРНажатиеЗавершение()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Обработчик команды "СформироватьОтчет".
&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры // СформироватьОтчет()

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
&НаСервере
Процедура РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(СсылкаНаЭлемент)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(СсылкаНаЭлемент);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеПоСсылкеНаСервере()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура проверяет, выполнено ли задание.
&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

// Процедура готовит параметры на сервере.
&НаСервере
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Новый Структура;
	
	СтруктураСПериодомФормированияОтчета = ОбработатьПериодыФормированияОтчетов(Отчет.НачалоПериода, Отчет.КонецПериода);
	
	ПараметрыОтчета.Вставить("НачалоПериода" ,                      СтруктураСПериодомФормированияОтчета.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"  ,                      СтруктураСПериодомФормированияОтчета.КонецПериода);
	ПараметрыОтчета.Вставить("Организация"   ,                      Отчет.Организация);
	ПараметрыОтчета.Вставить("ЛицевойСчет"   ,                      Отчет.ЛицевойСчет);
	ПараметрыОтчета.Вставить("РазделУчета"   ,                      Отчет.РазделУчета);
	ПараметрыОтчета.Вставить("ВидНачисления" ,                      Отчет.ВидНачисления);
	ПараметрыОтчета.Вставить("ВариантОтбораУслуг",                  Отчет.ВариантОтбораУслуг);
	ПараметрыОтчета.Вставить("СписокУслуг",                         СформироватьСписокУслугДляЗапроса());
	ПараметрыОтчета.Вставить("ВариантВыводаСведенийОЗадолженности", Отчет.ВариантВыводаСведенийОЗадолженности);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Процедура обновляет текст заголовка.
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	Если ЗначениеЗаполнено(Отчет.НачалоПериода) И ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		ЗаголовокОтчета = "Карточка расчетов "
						+ УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);
	Иначе
		ЗаголовокОтчета = "Карточка расчетов за " + Формат(Отчет.НачалоПериода, "ДФ=dd.MM.yyyy; ДП=01.01.0001") + " - " + Формат(Отчет.КонецПериода, "ДФ=dd.MM.yyyy; ДП=30.12.3999");
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

// Процедура получает сведения о настройках кап. ремонта по текущей организации
// и управляет текстом гиперссылки открытия настроек кап. ремонта.
&НаСервере
Функция ОбновитьРеквизитыКапРемонта()
	
	ЗаполнитьРеквизитыОтчетаПоКапремонту();
	
	мМассивВариантовОтбораУслуг = Новый Массив;
	мМассивВариантовОтбораУслуг.Добавить("формировать отчет по всем услугам");
	мМассивВариантовОтбораУслуг.Добавить("формировать отчет по указанным услугам");
	мМассивВариантовОтбораУслуг.Добавить("формировать отчет кроме указанных услуг");
	
	Если ТипЗнч(мСтруктураНастроекКапРемонта) = Тип("Структура")
	   И мСтруктураНастроекКапРемонта.НастройкиОпределены
	   И мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		
		СписокУслугКР = мСтруктураНастроекКапРемонта.СписокУслуг;
		СтрокаУслугКР = "";
		Для Каждого ТекЭлемент Из СписокУслугКР Цикл
			СтрокаУслугКР = СтрокаУслугКР + ?(Не ПустаяСтрока(СтрокаУслугКР), ",", "") + """" + ТекЭлемент.Значение + """";
		КонецЦикла;
		
		Если Не ПустаяСтрока(СтрокаУслугКР) Тогда
			СтрокаУслугКР = " (" +?(СписокУслугКР.Количество() > 1, "услуги: ", "услуга: ") + СтрокаУслугКР + ")";
		КонецЕсли;
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Ведется раздельный учет по услугам капитального ремонта" + СтрокаУслугКР;
		
		мМассивВариантовОтбораУслуг.Добавить("формировать отчет по услугам, отличным от кап. ремонта");
		мМассивВариантовОтбораУслуг.Добавить("формировать отчет по услугам кап. ремонта");
		
	Иначе
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Не ведется раздельный учет по услугам капитального ремонта";
		
		Если Отчет.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта"
			ИЛИ Отчет.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			Отчет.ВариантОтбораУслуг = "формировать отчет по всем услугам";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВариантОтбораУслуг.СписокВыбора.ЗагрузитьЗначения(мМассивВариантовОтбораУслуг);
	
КонецФункции // ОбновитьРеквизитыКапРемонта()

// Процедура предназначена для заполнения сведения о ведение раздельного учета по капремонту в организации.
//
&НаСервере
Процедура ЗаполнитьРеквизитыОтчетаПоКапремонту()
	
	Попытка
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Отчет.Организация, Истина);
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>Не удалось получить настройки учета капитального ремонта. Пожалуйста, проверьте, корректно ли заданы настройки учета капитального ремонта.", ОписаниеОшибки()));
		Возврат;
	КонецПопытки;

КонецПроцедуры // ЗаполнитьРеквизитыОтчетаПоКапремонту()

// Функция формирует отчет на сервере.
&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_КарточкаРасчетов.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.КВП_КарточкаРасчетов.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции // СформироватьОтчетНаСервере()

// Управляет видимостью элементов формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Форма.Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Форма.ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода);
		
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Форма.ВидПериода,
																			Элементы.ГруппаПоляВводаПериода);
	
	// Если вариант отбора услуг не заполнен, то по умолчанию устанавливаем "формировать отчет по всем услугам".
	Если ПустаяСтрока(Отчет.ВариантОтбораУслуг) Тогда
		Отчет.ВариантОтбораУслуг = "формировать отчет по всем услугам";
	КонецЕсли;
	
	Элементы.ГруппаПанельНастроек.Видимость = Отчет.ВариантОтбораУслуг = "формировать отчет по указанным услугам" ИЛИ Отчет.ВариантОтбораУслуг = "формировать отчет кроме указанных услуг";
	
	Если ПустаяСтрока(Отчет.ВариантВыводаСведенийОЗадолженности) Тогда
		Отчет.ВариантВыводаСведенийОЗадолженности = "в основной таблице";
	КонецЕсли;
	
	// Если форма открыта из внешнего источника и был передан лицевой счет, то устанавливаем запрет на редактирование
	Элементы.ЛицевойСчет.ТолькоПросмотр = Не Форма.ВнешнееФормирование_ЛицевойСчет.Пустая();
	
КонецПроцедуры // УправлениеФормой()

// Вспомогательная функция, которая позволяет получить значение реквизит по ссылке.
&НаСервере
Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, НаименованиеРеквизита)
	
	Возврат СсылкаНаЭлемент[НаименованиеРеквизита];
	
КонецФункции // ПолучитьЗначениеРеквизитаОбъектаНаСервере()

// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
//
&НаСервере
Функция ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементСправочникаПоОрганизацииНаСервере()

// Процедура загружает подготовленные данные на сервере.
&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьПодготовленныеДанныеНаСервере()

// Процедуры проверяет выполнение задания.
&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры // Подключаемый_ПроверитьВыполнениеЗадания()

// Предназначена для формирования списка услуг по которым будут получены данные о начислениях.
&НаСервере
Функция СформироватьСписокУслугДляЗапроса()
	
	СписокУслуг = Новый СписокЗначений;
	
	Если Отчет.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		// Оставляем пустой список.
	ИначеЕсли Отчет.ВариантОтбораУслуг = "формировать отчет по указанным услугам"
		ИЛИ Отчет.ВариантОтбораУслуг = "формировать отчет кроме указанных услуг" Тогда
		
		Для каждого ТекСтрока Из Отчет.ВыбранныеУслуги Цикл
			Если НЕ ТекСтрока.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
				СписокУслуг.Добавить(ТекСтрока.Услуга);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Отчет.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта"
		ИЛИ Отчет.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
		
		СписокУслуг = мСтруктураНастроекКапРемонта.СписокУслуг;
		
	КонецЕсли;
	
	Возврат СписокУслуг;
	
КонецФункции // СформироватьСписокУслугДляЗапроса()

// Подготавливаем периоды для формирования отчета.
&НаСервере
Функция ОбработатьПериодыФормированияОтчетов(ДатаНачала, ДатаОкончания)
	
	СтруктураСПериодомФормированияОтчета = Новый Структура("НачалоПериода, КонецПериода");
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		// Если период формирования не заполнен, то отчет формируем за все время существования базы.
		НачалоПериода = '00010101';
		КонецПериода  = '39991230';
	Иначе
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			// Если заполнена только дата начала периода, то берем все данные от даты начала.
			НачалоПериода = НачалоДня(ДатаНачала);
			КонецПериода  = '39991230';
		ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
			// Если заполнена только дата окончания периода, то берем все данные до даты окончания.
			НачалоПериода = '00010101';
			КонецПериода  = КонецДня(ДатаОкончания);
		Иначе
			// Введены корректные дата начала и дата окончания.
			НачалоПериода = НачалоДня(ДатаНачала);
			КонецПериода  = КонецДня(ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСПериодомФормированияОтчета.НачалоПериода = НачалоПериода;
	СтруктураСПериодомФормированияОтчета.КонецПериода  = КонецПериода;
	
	Возврат СтруктураСПериодомФормированияОтчета;
	
КонецФункции // ОбработатьПериодыФормированияОтчетов()

#КонецОбласти
