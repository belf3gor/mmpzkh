#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища = Неопределено) Экспорт
	
	ПараметрыОтчета.СписокСформированныхЛистов.Очистить();
	
	// В связи со спецификой отчета переопределим перериод
	ПараметрыОтчета.Период = КонецКвартала(ПараметрыОтчета.КонецПериода);
	
	// Подготовка данных отчета
	ДанныеОтчета = ПодготовитьДанныеОтчета(ПараметрыОтчета);
	ПараметрыОтчета.Вставить("ДанныеОтчета", ДанныеОтчета);
	
	// Вывод печатной формы
	
	ПечатьТитульногоЛиста(ПараметрыОтчета);
	
	ПечатьРаздела1(ПараметрыОтчета);
	
	Если ПараметрыОтчета.ПрименяетсяУСНДоходыМинусРасходы
		И НЕ ПараметрыОтчета.РежимИнтеграцииСБанком Тогда
		
		ПечатьРаздела2(ПараметрыОтчета);
		
		ПечатьРаздела3(ПараметрыОтчета);
		
	КонецЕсли;
	
	ПечатьРаздела4(ПараметрыОтчета);
	
	ПечатьРаздела5(ПараметрыОтчета);
	
	Если АдресХранилища <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(ПараметрыОтчета.СписокСформированныхЛистов, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеПериода(Период, КонДата = Неопределено) Экспорт
	
	КонДата = ?(КонДата = Неопределено, Период, КонДата);
	Возврат ПредставлениеПериода(НачалоГода(КонДата), КонецДня(КонДата), "ФП = Истина");
	
КонецФункции

#Область ПубликуемыеДанные

// Формирует структуру входящих настроек в формате параметров, запрашиваемых при подготовке публикуемых данных.
// Настройки сериализуются в JSON и передаются внешнему клиенту вместе с URL.
// См. также ДанныеОтчета().
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой требуются публикуемые данные отчета.
//  Период -Дата - дата в году, за который требуются публикуемые данные.
//
// Возвращаемое значение:
//  Структура - структура настроек для параметризации внешней ссылки.
//
Функция ВходящиеНастройкиПубликуемыхДанных(Организация, Период) Экспорт

    Настройки = Новый Структура;

    Псевдонимы = Новый Структура;
    Псевдонимы.Вставить("inn", "ИНН");
    Псевдонимы.Вставить("kpp", "КПП");

    РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Псевдонимы);

    Настройки.Вставить("organization", РеквизитыОрганизации);
    Настройки.Вставить("date", Период);

    Возврат Настройки;

КонецФункции

// Возвращает публикуемый идентификатор отчета
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "income_expenses_book";
	
КонецФункции

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	
	ОписаниеВозвращаемыхДанных.Наименование = НСтр("ru = 'Книга доходов и расходов УСН'");
	ОписаниеВозвращаемыхДанных.Описание = НСтр("ru = 'Книга доходов и расходов УСН'");
	ОписаниеВозвращаемыхДанных.МодульМенеджер = Отчеты.КнигаУчетаДоходовИРасходов;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить("zip");
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//               Указывается в качестве имени файла, возвращаемом в результате.
//   Параметры - ДвоичныеДанные - переданные параметры получения данных.
//   КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//   Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//   СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) = ВРег(ПубликуемыйИдентификатор()) Тогда
		ИдентификаторДанных = ИдентификаторДанных + ".zip";
		Возврат ДанныеОтчетаДляПередачи(Параметры, КодВозврата, Ошибка, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПодготовитьПараметрыОтчета(ОписаниеОбъекта) Экспорт
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ВыводитьРасшифровки",              ОписаниеОбъекта.Отчет.ВыводитьРасшифровки);
	ПараметрыОтчета.Вставить("Организация",                      ОписаниеОбъекта.Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода",                    ОписаниеОбъекта.Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",                     ОписаниеОбъекта.Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("Период",                           ОписаниеОбъекта.Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("РежимПечатиГраф4и6",               ОписаниеОбъекта.Отчет.РежимПечатиГраф4и6);
	ПараметрыОтчета.Вставить("РежимПечатиНДС",                   ОписаниеОбъекта.Отчет.РежимПечатиНДС);
	ПараметрыОтчета.Вставить("СписокСформированныхЛистов",       ОписаниеОбъекта.Отчет.СписокСформированныхЛистов);
	
	ПараметрыОтчета.Вставить("ПрименяетсяУСНДоходыМинусРасходы", ОписаниеОбъекта.ПрименяетсяУСНДоходыМинусРасходы);
	ПараметрыОтчета.Вставить("ДатаПрекращенияПримененияУСНДоходыМинусРасходы",
		ОписаниеОбъекта.ДатаПрекращенияПримененияУСНДоходыМинусРасходы);
	ПараметрыОтчета.Вставить("РасходыНаНДСПоОплатеПоставщику",   ОписаниеОбъекта.РасходыНаНДСПоОплатеПоставщику);
	ПараметрыОтчета.Вставить("НалоговыйПериодРасширен",          ОписаниеОбъекта.НалоговыйПериодРасширен);
	ПараметрыОтчета.Вставить("НачалоНалоговогоПериода",          ОписаниеОбъекта.НачалоНалоговогоПериода);
	
	ПараметрыОтчета.Вставить("РежимИнтеграцииСБанком",           ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Процедура ЗаполнитьСведенияОНалоговомПериоде(ОписаниеОбъекта) Экспорт
	
	ДатаРегистрации = Справочники.Организации.ДатаРегистрацииОрганизации(ОписаниеОбъекта.Отчет.Организация);
	
	ОписаниеОбъекта.МинимальныйПериод = НачалоКвартала(ДатаРегистрации);
	
	Если ОписаниеОбъекта.Отчет.КонецПериода < ОписаниеОбъекта.МинимальныйПериод Тогда
		// Если при смене организации, восстановлении периода из настроек или инициализации из рабочей даты
		// период отчета оказался в запрещенном интервале, нужно сдвинуть его вперед до ближайшего доступного.
		ПериодНарастающимИтогом = НачалоГода(ОписаниеОбъекта.Отчет.НачалоПериода) =
			НачалоКвартала(ОписаниеОбъекта.Отчет.НачалоПериода);
		
		ОписаниеОбъекта.Отчет.КонецПериода  = КонецКвартала(ОписаниеОбъекта.МинимальныйПериод);
		ОписаниеОбъекта.Отчет.НачалоПериода = 
			?(ПериодНарастающимИтогом, НачалоГода(ОписаниеОбъекта.Отчет.КонецПериода),
				НачалоКвартала(ОписаниеОбъекта.Отчет.КонецПериода));
	КонецЕсли;
	
	ОписаниеОбъекта.НалоговыйПериодРасширен = УчетУСН.НалоговыйПериодРасширен(ОписаниеОбъекта.Отчет.Организация,
		ОписаниеОбъекта.Отчет.КонецПериода, ДатаРегистрации);
	ОписаниеОбъекта.НалоговыйПериодПропущен = УчетУСН.НалоговыйПериодПропущен(ОписаниеОбъекта.Отчет.Организация,
		ОписаниеОбъекта.Отчет.КонецПериода, ДатаРегистрации);
	
	Если ОписаниеОбъекта.НалоговыйПериодПропущен Тогда
		ОписаниеОбъекта.Отчет.НачалоПериода = НачалоГода(ОписаниеОбъекта.Отчет.НачалоПериода);
	КонецЕсли;
	
	ОписаниеОбъекта.НачалоНалоговогоПериода = 
		?(ОписаниеОбъекта.НалоговыйПериодРасширен, НачалоДня(ДатаРегистрации),
			НачалоГода(ОписаниеОбъекта.Отчет.КонецПериода));
	
КонецПроцедуры

Процедура ПолучитьНастройкиОтчета(ОписаниеОбъекта) Экспорт
	
	Перем ДатаИзменения;
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(
		ОписаниеОбъекта.Отчет.Организация, ОписаниеОбъекта.Отчет.КонецПериода, ДатаИзменения);
	
	Если Не ПрименяетсяУСНДоходыМинусРасходы И ДатаИзменения > ОписаниеОбъекта.Отчет.НачалоПериода Тогда
		ПрименяетсяУСНДоходыМинусРасходыВПрошлом = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(
			ОписаниеОбъекта.Отчет.Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе
		ПрименяетсяУСНДоходыМинусРасходыВПрошлом = ПрименяетсяУСНДоходыМинусРасходы;
	КонецЕсли;
	
	ОписаниеОбъекта.ПрименяетсяУСНДоходыМинусРасходы = (ПрименяетсяУСНДоходыМинусРасходы Или ПрименяетсяУСНДоходыМинусРасходыВПрошлом);
	
	Если (ПрименяетсяУСНДоходыМинусРасходыВПрошлом И Не ПрименяетсяУСНДоходыМинусРасходы) Тогда // Прекращено применение УСН (Д-Р)
		ОписаниеОбъекта.ДатаПрекращенияПримененияУСНДоходыМинусРасходы = ДатаИзменения;
	Иначе
		ОписаниеОбъекта.ДатаПрекращенияПримененияУСНДоходыМинусРасходы = Дата(1, 1, 1);
	КонецЕсли;
	
	ПорядокПризнанияРасходовПоНДС =
		УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(ОписаниеОбъекта.Отчет.Организация,
			ОписаниеОбъекта.Отчет.КонецПериода);
	ОписаниеОбъекта.РасходыНаНДСПоОплатеПоставщику
		= (ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	
	Если (ОписаниеОбъекта.Отчет.РежимПечатиНДС = 1)
		И (НЕ ОписаниеОбъекта.ПрименяетсяУСНДоходыМинусРасходы ИЛИ ОписаниеОбъекта.РасходыНаНДСПоОплатеПоставщику) Тогда
		ОписаниеОбъекта.Отчет.РежимПечатиНДС = 2;
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеОбъекта(Отчет) Экспорт
	
	ОписаниеОбъекта = Новый Структура();
	ОписаниеОбъекта.Вставить("Отчет",                            Отчет);
	ОписаниеОбъекта.Вставить("ПрименяетсяУСНДоходыМинусРасходы", Ложь);
	ОписаниеОбъекта.Вставить("ДатаПрекращенияПримененияУСНДоходыМинусРасходы", '00010101');
	ОписаниеОбъекта.Вставить("РасходыНаНДСПоОплатеПоставщику",   Истина);
	ОписаниеОбъекта.Вставить("НалоговыйПериодРасширен",          Ложь);
	ОписаниеОбъекта.Вставить("НалоговыйПериодПропущен",          Ложь);
	ОписаниеОбъекта.Вставить("НачалоНалоговогоПериода",          Отчет.КонецПериода);
	ОписаниеОбъекта.Вставить("МинимальныйПериод",                '00010101');
	
	Возврат ОписаниеОбъекта;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиШапкуРаздела1(ПараметрыОтчета, ТабличныйДокумент, Макет)
	
	Секция = Макет.ПолучитьОбласть("Шапка|Основная");
	ТабличныйДокумент.Вывести(Секция);
	Секция = Макет.ПолучитьОбласть(?(ПараметрыОтчета.РежимПечатиГраф4и6 = 3, "Шапка|Режим3","Шапка|Режим12"));
	Если ПараметрыОтчета.РежимПечатиГраф4и6 = 3 Тогда
		Секция = Макет.ПолучитьОбласть("Шапка|Режим3");
		Секция.Параметры.Заголовок4 = "Доходы, учитываемые при исчислении налоговой базы";
		Секция.Параметры.Заголовок6 = "Расходы, учитываемые при исчислении налоговой базы";
	Иначе
		Секция = Макет.ПолучитьОбласть("Шапка|Режим12");
		Секция.Параметры.Заголовок5 = "в т.ч. доходы, учитываемые при исчислении налоговой базы";
		Секция.Параметры.Заголовок7 = "в т.ч. расходы, учитываемые при исчислении налоговой базы";
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(Секция);
	
КонецПроцедуры

Процедура ПечатьТитульногоЛиста(ПараметрыОтчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Автомасштаб         = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаУчетаДоходовИРасходов_ТитульныйЛист";
	
	Если ПараметрыОтчета.Период >= Дата("20130101") Тогда
		Секция = ПолучитьМакет("ТитульныйЛист_135н");
		Секция.Параметры.РедакцияПриказаМинфина = РедакцияПриказаМинфина135н(ПараметрыОтчета);
	Иначе
		Секция = ПолучитьМакет("ТитульныйЛист_154н");
	КонецЕсли;
	
	Секция.Параметры.НаПериод = "на " + Формат(Год(ПараметрыОтчета.Период), "ЧГ=") + " год";
	
	Сведения = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, ПараметрыОтчета.Период);
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация);
	
	Если ЭтоЮрЛицо Тогда
		Секция.Параметры.ПолноеНаименованиеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			Сведения, "НаименованиеДляПечатныхФорм");
	Иначе
		Секция.Параметры.ПолноеНаименованиеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			Сведения, "ФИОФизлица");
	КонецЕсли;
	
	Секция.Параметры.КодОКПО = Сведения.КодПоОКПО;
	
	//Соберем банковские счета
	Счета = "";
	
	Данные = ПараметрыОтчета.ДанныеОтчета;
	Если Данные.БанковскиеСчета <> Неопределено Тогда
		БанковскиеСчетаВыборка = Данные.БанковскиеСчета.Выбрать();
		Пока БанковскиеСчетаВыборка.Следующий() Цикл
			НомСч = СокрЛП(БанковскиеСчетаВыборка.Номер);
			Банк  = СокрЛП(БанковскиеСчетаВыборка.Банк);
			Счета = Счета+"№ "+НомСч+" в "+Банк+", ";
		КонецЦикла;
		Счета = Лев(Счета,СтрДлина(Счета)-2);
	КонецЕсли;
	Секция.Параметры.Счета = Счета;
	
	Если УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.Период, Истина) Тогда
		Секция.Параметры.ОбъектНалогообложения =
			УчетнаяПолитика.ОбъектНалогообложенияУСН(ПараметрыОтчета.Организация, ПараметрыОтчета.Период);
	КонецЕсли;
	
	//Проверим длину адреса
	СтрокаАдреса = СокрЛП(Сведения.ЮридическийАдрес);
	Если СтрДлина(СтрокаАдреса) > 45 Тогда
		
		ПозицияПереноса = 0;
		СтрокаПоиска = СтрокаАдреса;
		РезультатПоиска = СтрНайти(СтрокаПоиска, ",");
		
		Пока (РезультатПоиска + ПозицияПереноса < 45) И (РезультатПоиска > 0) Цикл
			ПозицияПереноса = ПозицияПереноса + РезультатПоиска;
			СтрокаПоиска = Прав(СтрокаПоиска, СтрДлина(СтрокаПоиска) - РезультатПоиска);
			РезультатПоиска = СтрНайти(СтрокаПоиска, ",");
		КонецЦикла;
		
		Если НЕ ПозицияПереноса = 0 Тогда
			Секция.Параметры.АдресОрганизации = Лев(СтрокаАдреса, ПозицияПереноса);
			Секция.Параметры.АдресОрганизации2 = Прав(СтрокаАдреса, СтрДлина(СтрокаАдреса) - ПозицияПереноса);
		Иначе
			СтрокаПоиска = СтрокаАдреса;
			РезультатПоиска = СтрНайти(СтрокаПоиска, " ");
			Пока (РезультатПоиска + ПозицияПереноса < 45) И (РезультатПоиска > 0) Цикл
				ПозицияПереноса = ПозицияПереноса + РезультатПоиска;
				СтрокаПоиска = Прав(СтрокаПоиска, СтрДлина(СтрокаПоиска) - РезультатПоиска);
				РезультатПоиска = СтрНайти(СтрокаПоиска, " ");
			КонецЦикла;
			ПозицияПереноса = ?(ПозицияПереноса = 0, 45, ПозицияПереноса);
			Секция.Параметры.АдресОрганизации = Лев(СтрокаАдреса, ПозицияПереноса);
			Секция.Параметры.АдресОрганизации2 = Прав(СтрокаАдреса, СтрДлина(СтрокаАдреса) - ПозицияПереноса);
		КонецЕсли;
		
	Иначе
		Секция.Параметры.АдресОрганизации = Сведения.ЮридическийАдрес;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	
	ИНН = СокрЛП(Сведения.ИНН);
	КПП = СокрЛП(Сведения.КПП);
	
	Если СтрДлина(ИНН) <> 12 Тогда
		// Налогоплательщик - юр. лицо
		ИНН = "00" + ИНН;
	Иначе
		// Налогоплательщик - физ. лицо
		КПП = "";
	КонецЕсли;
	
	ИмяОбластиИНН = ?(ЭтоЮрЛицо, "ИНН", "ПрИНН");
	
	Для НомерСимвола = 1 По 12 Цикл
		
		ТабличныйДокумент.Область(ИмяОбластиИНН + НомерСимвола).Текст = ?(Число(ИНН) > 0, Сред(ИНН, НомерСимвола, 1), "");
		
		Если НомерСимвола <= 9 Тогда
			ТабличныйДокумент.Область("КПП" + НомерСимвола).Текст = Сред(КПП, НомерСимвола, 1);
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	ПараметрыОтчета.СписокСформированныхЛистов.Добавить(ТабличныйДокумент, НСтр("ru = 'Титульный лист'"));
	
КонецПроцедуры

Процедура ПечатьРаздела1(ПараметрыОтчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Автомасштаб         = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаУчетаДоходовИРасходов_Раздел1";
	Макет = ПолучитьМакет("Раздел1");
	
	ВывестиШапкуРаздела1(ПараметрыОтчета, ТабличныйДокумент, Макет);
	
	ВыделятьНДС = ВыделятьНДС(ПараметрыОтчета);
	
	НачДата = НачалоКвартала(ПараметрыОтчета.НачалоПериода);
	КолКварталов = НомерКвартала(ПараметрыОтчета.Период);
	
	НПП = 1;
	
	ВыборкаКоличествоЗаписей =
		ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "КоличествоЗаписейРаздела1ДоНачалаОтчета");
	
	Если ВыборкаКоличествоЗаписей <> Неопределено Тогда
		Пока ВыборкаКоличествоЗаписей.Следующий() Цикл
			НПП = НПП + ВыборкаКоличествоЗаписей.КоличествоСтрок + ВыборкаКоличествоЗаписей.КоличествоСтрокНДС;
		КонецЦикла;
	КонецЕсли;
	
	ТекКвартал              = НомерКвартала(НачДата);
	ПоследнийКварталПериода = НомерКвартала(ПараметрыОтчета.Период);
	
	ВыборкаЗаписей = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "ЗаписиРаздел1");
	
	ТаблицаРасшифровок = ПолучитьТаблицуДанных(ПараметрыОтчета.ДанныеОтчета, "ЗаписиРасшифровкиРаздел1");
	Если ПараметрыОтчета.ВыводитьРасшифровки И ЗначениеЗаполнено(ТаблицаРасшифровок) Тогда
		ТаблицаРасшифровок.Индексы.Добавить("Регистратор");
		ТаблицаРасшифровок.Индексы.Добавить("СтрокаДокумента");
		ТаблицаРасшифровок.Индексы.Добавить("ВидРасхода");
	КонецЕсли;
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		КварталЗаписи = КварталЗаписи(ВыборкаЗаписей.Период, ПараметрыОтчета);
		
		Пока КварталЗаписи <> ТекКвартал Цикл
			
			ВывестиИтогиЗаКвартал(ПараметрыОтчета, ТекКвартал, ПоследнийКварталПериода, Макет, ТабличныйДокумент);
			ТекКвартал = ТекКвартал + 1;
			
		КонецЦикла;
		
		Секция = Макет.ПолучитьОбласть("Строка|Основная");
		Секция.Параметры.НомерПП         = НПП;
		Секция.Параметры.ТекРасшифровка  = ВыборкаЗаписей.Регистратор;
		Секция.Параметры.ПечДатаНомерДок = ВыборкаЗаписей.РеквизитыПервичногоДокумента;
		Секция.Параметры.ПечСодержОпер   = ВыборкаЗаписей.Содержание;
		
		Если ПараметрыОтчета.РежимПечатиГраф4и6 < 2 Тогда
			//Выводим все строки
		ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаЗаписей.Графа5) И НЕ ЗначениеЗаполнено(ВыборкаЗаписей.Графа7) Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Секция);
		
		НДСрасходовБУ = 0;
		
		Секция = Макет.ПолучитьОбласть(?(ПараметрыОтчета.РежимПечатиГраф4и6 = 3, "Строка|Режим3","Строка|Режим12"));
		Если ПараметрыОтчета.РежимПечатиГраф4и6 < 2 Тогда
			Секция.Параметры.ПечДоходыБУ = ВыборкаЗаписей.Графа4;
			Если ПараметрыОтчета.РежимПечатиНДС = 2 И ВыборкаЗаписей.Графа6 > 0
				И ВыборкаЗаписей.Графа7 > 0 И ВыборкаЗаписей.НДС > 0
					И НЕ ВыделятьНДС Тогда
				НДСрасходовБУ = ?(ВыборкаЗаписей.Графа6 >= ВыборкаЗаписей.Графа7, ВыборкаЗаписей.НДС,
					ВыборкаЗаписей.НДС*ВыборкаЗаписей.Графа6/ВыборкаЗаписей.Графа7);
				Секция.Параметры.ПечРасходыБУ = ВыборкаЗаписей.Графа6 - НДСрасходовБУ;
			Иначе
				Секция.Параметры.ПечРасходыБУ = ВыборкаЗаписей.Графа6;
			КонецЕсли;
		КонецЕсли;
		
		Секция.Параметры.ПечДоходы = ВыборкаЗаписей.Графа5;
		
		Если ВыборкаЗаписей.НДС = 0 ИЛИ ВыделятьНДС Тогда
			
			Секция.Параметры.ПечРасходы = ВыборкаЗаписей.Графа7;
			ТабличныйДокумент.Присоединить(Секция);
			
		ИначеЕсли ПараметрыОтчета.РежимПечатиНДС = 1 Тогда
			
			Секция.Параметры.ПечРасходы = "" + Формат(ВыборкаЗаписей.Графа7, "ЧДЦ=2") + "
			|в т.ч. НДС
			|" + Формат(ВыборкаЗаписей.НДС, "ЧДЦ=2");
			ТабличныйДокумент.Присоединить(Секция);
			
		Иначе // ПараметрыОтчета.РежимПечатиНДС = 2
			
			Секция.Параметры.ПечРасходы = ВыборкаЗаписей.Графа7 - ВыборкаЗаписей.НДС;
			ТабличныйДокумент.Присоединить(Секция);
			
		КонецЕсли;
		
		Если ПараметрыОтчета.ВыводитьРасшифровки И ЗначениеЗаполнено(ТаблицаРасшифровок) Тогда
			ЕстьШапка = Ложь;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Регистратор", ВыборкаЗаписей.Регистратор);
			ПараметрыОтбора.Вставить("СтрокаДокумента", ВыборкаЗаписей.СтрокаДокумента);
			
			НайденныеСтроки = ТаблицаРасшифровок.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаРасшифровки Из НайденныеСтроки Цикл
				
				Если ПараметрыОтчета.РежимПечатиНДС = 2 И (НЕ ВыделятьНДС) И ВыборкаЗаписей.НДС <> 0
						И СтрокаРасшифровки.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЕстьШапка Тогда
					
					ТабличныйДокумент.НачатьГруппуСтрок("Расшифровка расходов строки №" + Строка(НПП), Ложь);
					
					Секция = Макет.ПолучитьОбласть(?(ПараметрыОтчета.РежимПечатиГраф4и6 = 3,
						"ШапкаРасшифровки3",
						"ШапкаРасшифровки12"));
					Секция.Параметры.НомерПП = НПП;
					
					ТабличныйДокумент.Вывести(Секция);
					
					ЕстьШапка = Истина;
				КонецЕсли;
				
				Секция = Макет.ПолучитьОбласть(?(ПараметрыОтчета.РежимПечатиГраф4и6 = 3,
					"СтрокаРасшифровки3",
					"СтрокаРасшифровки12"));
				Секция.Параметры.НомерПП       = Строка(НПП) + "." + СтрокаРасшифровки.СтрокаРасхода;
				Секция.Параметры.ПечСодержОпер = СтрокаРасшифровки.Содержание;
				Если ЗначениеЗаполнено(СтрокаРасшифровки.РеквизитыДокументаОплаты) Тогда
					Секция.Параметры.ПечДатаНомерОплаты = "Оплачено: "
						+ УчетУСН.РеквизитыПервичногоДокументаДляКУДиР(СтрокаРасшифровки.ДокументОплатыДата,
								СтрокаРасшифровки.ДокументОплатыНомер, СтрокаРасшифровки.Период);
					Секция.Параметры.ДокОплаты = СтрокаРасшифровки.РеквизитыДокументаОплаты;
				КонецЕсли;
				Секция.Параметры.ПечРасходы = СтрокаРасшифровки.Графа7;
				
				ТабличныйДокумент.Вывести(Секция);
				
			КонецЦикла;
			
			Если ЕстьШапка Тогда
				Секция = Макет.ПолучитьОбласть("ПодвалРасшифровки");
				ТабличныйДокумент.Вывести(Секция);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
		КонецЕсли;
		
		//Выведем строку НДС
		Если ПараметрыОтчета.РежимПечатиНДС = 2 И ВыборкаЗаписей.НДС <> 0 И НЕ ВыделятьНДС Тогда
			
			НПП = НПП + 1;
			
			Секция = Макет.ПолучитьОбласть("Строка|Основная");
			Секция.Параметры.НомерПП         = НПП;
			Секция.Параметры.ТекРасшифровка  = ВыборкаЗаписей.Регистратор;
			Секция.Параметры.ПечДатаНомерДок = ВыборкаЗаписей.РеквизитыПервичногоДокумента;
			Секция.Параметры.ПечСодержОпер   = ВыборкаЗаписей.Содержание +" (НДС)";
			ТабличныйДокумент.Вывести(Секция);
			Секция = Макет.ПолучитьОбласть(?(ПараметрыОтчета.РежимПечатиГраф4и6 = 3, "Строка|Режим3","Строка|Режим12"));
			Если ПараметрыОтчета.РежимПечатиГраф4и6 < 2 Тогда
				Секция.Параметры.ПечРасходыБУ = НДСрасходовБУ;
			КонецЕсли;
			Секция.Параметры.ПечРасходы = ВыборкаЗаписей.НДС;
			ТабличныйДокумент.Присоединить(Секция);
			
			Если ПараметрыОтчета.ВыводитьРасшифровки И ЗначениеЗаполнено(ТаблицаРасшифровок) Тогда
				ЕстьШапка = Ложь;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Регистратор", ВыборкаЗаписей.Регистратор);
				ПараметрыОтбора.Вставить("СтрокаДокумента", ВыборкаЗаписей.СтрокаДокумента);
				ПараметрыОтбора.Вставить("ВидРасхода", Перечисления.ВидыРасходовУСН.НДС);
				
				НайденныеСтроки = ТаблицаРасшифровок.НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаРасшифровки Из НайденныеСтроки Цикл
					
					Если ПараметрыОтчета.РежимПечатиНДС = 2 И ВыборкаЗаписей.НДС <> 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ ЕстьШапка Тогда
						
						ТабличныйДокумент.НачатьГруппуСтрок("Расшифровка расходов строки №" + Строка(НПП), Ложь);
						
						Секция = Макет.ПолучитьОбласть(?(ПараметрыОтчета.РежимПечатиГраф4и6 = 3,
							"ШапкаРасшифровки3",
							"ШапкаРасшифровки12"));
						Секция.Параметры.НомерПП = НПП;
						
						ТабличныйДокумент.Вывести(Секция);
						
						ЕстьШапка = Истина;
					КонецЕсли;
					
					Секция = Макет.ПолучитьОбласть(?(ПараметрыОтчета.РежимПечатиГраф4и6 = 3,
						"СтрокаРасшифровки3",
						"СтрокаРасшифровки12"));
					Секция.Параметры.НомерПП       = Строка(НПП) + "." + СтрокаРасшифровки.СтрокаРасхода;
					Секция.Параметры.ПечСодержОпер = СтрокаРасшифровки.Содержание;
					Если ЗначениеЗаполнено(СтрокаРасшифровки.РеквизитыДокументаОплаты) Тогда
						Секция.Параметры.ПечДатаНомерОплаты = "Оплачено: "
							+ УчетУСН.РеквизитыПервичногоДокументаДляКУДиР(СтрокаРасшифровки.ДокументОплатыДата,
								СтрокаРасшифровки.ДокументОплатыНомер, СтрокаРасшифровки.Период);
						Секция.Параметры.ДокОплаты = СтрокаРасшифровки.РеквизитыДокументаОплаты;
					КонецЕсли;
					Секция.Параметры.ПечРасходы = СтрокаРасшифровки.Графа7;
					
					ТабличныйДокумент.Вывести(Секция);
					
				КонецЦикла;
				
				Если ЕстьШапка Тогда
					Секция = Макет.ПолучитьОбласть("ПодвалРасшифровки");
					ТабличныйДокумент.Вывести(Секция);
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НПП = НПП + 1;
		
	КонецЦикла;
	
	Пока ПоследнийКварталПериода >= ТекКвартал Цикл
		
		ВывестиИтогиЗаКвартал(ПараметрыОтчета, ТекКвартал, ПоследнийКварталПериода, Макет, ТабличныйДокумент);
		ТекКвартал = ТекКвартал + 1;
		
	КонецЦикла;
	
	// Выведем подвал
	Если НомерКвартала(ПараметрыОтчета.Период) = 4 Тогда
		Секция = Макет.ПолучитьОбласть("Справка");
		
		П010 = 0;
		П020 = 0;
		
		ВыборкаОбороты = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "ОборотыРаздела1ПоКварталам", Истина);
		Пока ВыборкаОбороты.Следующий() Цикл
			П010 = П010 + ВыборкаОбороты.Графа5;
			П020 = П020 + ВыборкаОбороты.Графа7;
		КонецЦикла;
		
		П030 = 0;
		
		ТаблицаУбытков = ПолучитьТаблицуДанных(ПараметрыОтчета.ДанныеОтчета, "УбыткиРаздел3", Истина);
		Если ЗначениеЗаполнено(ТаблицаУбытков) Тогда
			П030 = ТаблицаУбытков[0].УбытокОтУплатыМинимальногоНалога;
		КонецЕсли;
		
		Секция.Параметры.ПечДоходы = П010;
		Секция.Параметры.ПечРасходы = П020;
		Секция.Параметры.Убыток030 = П030;
		
		Если П010 - П020 - П030 >= 0 Тогда
			Секция.Параметры.ИтогоДоходы = П010 - П020 - П030;
		Иначе
			Секция.Параметры.ИтогоРасходы = П020 + П030 - П010;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;
	
	УстановитьШиринуКолонкиСодержание(ПараметрыОтчета, Макет, ТабличныйДокумент);
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область(6,,6,);
	
	ПараметрыОтчета.СписокСформированныхЛистов.Добавить(ТабличныйДокумент,
		СтрШаблон(НСтр("ru = 'Раздел I. Доходы и расходы за %1 кв.'"), ПоследнийКварталПериода));
	
КонецПроцедуры

Процедура ПечатьРаздела2(ПараметрыОтчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.Автомасштаб         = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаУчетаДоходовИРасходов_Раздел2";
	
	Если ПараметрыОтчета.Период >= Дата("20130101") Тогда
		Макет = ПолучитьМакет("Раздел2_135н");
	Иначе
		Макет = ПолучитьМакет("Раздел2_154н");
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.ЗаПериод = "за " + ПолучитьПредставлениеПериода(ПараметрыОтчета.Период);
	ТабличныйДокумент.Вывести(Секция);
	
	ТаблицаРезультата = ПолучитьТаблицуДанных(ПараметрыОтчета.ДанныеОтчета, "ЗаписиРаздел2");
	ТаблицаОтчета = Неопределено;
	
	Если ЗначениеЗаполнено(ТаблицаРезультата) Тогда
	
		ТаблицаОтчета = ТаблицаРезультата.Скопировать();
		ТаблицаОтчета.Очистить();
		ТаблицаОтчета.Колонки.Добавить("ПечДатаОплаты");
		СтрокаТаблицыОтчета = Неопределено;
		СписокДат = "";
		Для Каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
			Если СтрокаТаблицыОтчета = Неопределено Тогда
				СтрокаТаблицыОтчета = ТаблицаОтчета.Добавить();
			КонецЕсли;
			Если (СтрокаТаблицыОтчета.ОсновноеСредство					 = СтрокаТаблицы.ОсновноеСредство) И
				(СтрокаТаблицыОтчета.ДокументМодернизации 				 = СтрокаТаблицы.ДокументМодернизации) И
				(СтрокаТаблицыОтчета.Графа3_ДатаВводаВЭксплуатацию 		 = СтрокаТаблицы.Графа3_ДатаВводаВЭксплуатацию) И
				(СтрокаТаблицыОтчета.Графа7_СрокПолезногоИспользования   = СтрокаТаблицы.Графа7_СрокПолезногоИспользования) И
				(СтрокаТаблицыОтчета.Графа8_КолКварталовВОтчетномПериоде = СтрокаТаблицы.Графа8_КолКварталовВОтчетномПериоде) И
				(СтрокаТаблицыОтчета.Графа9_КолКварталовВНалПериоде 	 = СтрокаТаблицы.Графа9_КолКварталовВНалПериоде) И
				(СтрокаТаблицыОтчета.Графа10_ДоляРасходовЗаНалПериод 	 = СтрокаТаблицы.Графа10_ДоляРасходовЗаНалПериод) И
				(СтрокаТаблицыОтчета.Графа11_ДоляРасходовЗаКвартал 		 = СтрокаТаблицы.Графа11_ДоляРасходовЗаКвартал) Тогда
				
				СтрокаТаблицыОтчета.Графа5_ПервоначальнаяСтоимость 		= СтрокаТаблицыОтчета.Графа5_ПервоначальнаяСтоимость
					+ СтрокаТаблицы.Графа5_ПервоначальнаяСтоимость;
				СтрокаТаблицыОтчета.Графа6_ОстаточнаяСтоимость 			= СтрокаТаблицыОтчета.Графа6_ОстаточнаяСтоимость
					+ СтрокаТаблицы.Графа6_ОстаточнаяСтоимость;
				СтрокаТаблицыОтчета.Графа12_СуммаРасходовЗаОтчетнПериод = СтрокаТаблицыОтчета.Графа12_СуммаРасходовЗаОтчетнПериод
					+ СтрокаТаблицы.Графа12_СуммаРасходовЗаОтчетнПериод;
				СтрокаТаблицыОтчета.Графа13_СуммаРасходовЗаКвартал 		= СтрокаТаблицыОтчета.Графа13_СуммаРасходовЗаКвартал
					+ СтрокаТаблицы.Графа13_СуммаРасходовЗаКвартал;
				СтрокаТаблицыОтчета.Графа14_РасходыПрошлыхПериодов 		= СтрокаТаблицыОтчета.Графа14_РасходыПрошлыхПериодов
					+ СтрокаТаблицы.Графа14_РасходыПрошлыхПериодов;
				СтрокаТаблицыОтчета.Графа15_ОстатокРасходов 			= СтрокаТаблицыОтчета.Графа15_ОстатокРасходов
					+ СтрокаТаблицы.Графа15_ОстатокРасходов;
				
				СписокДат = СписокДат + Формат(СтрокаТаблицы.ДатаОплаты, "ДФ=дд.ММ.гггг") + ", ";
			Иначе
				СтрокаТаблицыОтчета.ПечДатаОплаты = ?(Прав(СписокДат,2)=", ",Лев(СписокДат,СтрДлина(СписокДат)-2),СписокДат);
				
				СтрокаТаблицыОтчета 									= ТаблицаОтчета.Добавить();
				СтрокаТаблицыОтчета.ОсновноеСредство 					= СтрокаТаблицы.ОсновноеСредство;
				СтрокаТаблицыОтчета.ДокументМодернизации 				= СтрокаТаблицы.ДокументМодернизации;
				СтрокаТаблицыОтчета.ИнвентарныйНомер 					= СтрокаТаблицы.ИнвентарныйНомер;
				СтрокаТаблицыОтчета.Графа3_ДатаВводаВЭксплуатацию 		= СтрокаТаблицы.Графа3_ДатаВводаВЭксплуатацию;
				СтрокаТаблицыОтчета.Графа4_ГосударственнаяРегистрация	= СтрокаТаблицы.Графа4_ГосударственнаяРегистрация;
				СтрокаТаблицыОтчета.Графа7_СрокПолезногоИспользования 	= СтрокаТаблицы.Графа7_СрокПолезногоИспользования;
				СтрокаТаблицыОтчета.Графа8_КолКварталовВОтчетномПериоде = СтрокаТаблицы.Графа8_КолКварталовВОтчетномПериоде;
				СтрокаТаблицыОтчета.Графа9_КолКварталовВНалПериоде 		= СтрокаТаблицы.Графа9_КолКварталовВНалПериоде;
				СтрокаТаблицыОтчета.Графа10_ДоляРасходовЗаНалПериод 	= СтрокаТаблицы.Графа10_ДоляРасходовЗаНалПериод;
				СтрокаТаблицыОтчета.Графа11_ДоляРасходовЗаКвартал 		= СтрокаТаблицы.Графа11_ДоляРасходовЗаКвартал;
				
				СтрокаТаблицыОтчета.Графа5_ПервоначальнаяСтоимость 		= СтрокаТаблицы.Графа5_ПервоначальнаяСтоимость;
				СтрокаТаблицыОтчета.Графа6_ОстаточнаяСтоимость			= СтрокаТаблицы.Графа6_ОстаточнаяСтоимость;
				СтрокаТаблицыОтчета.Графа12_СуммаРасходовЗаОтчетнПериод = СтрокаТаблицы.Графа12_СуммаРасходовЗаОтчетнПериод;
				СтрокаТаблицыОтчета.Графа13_СуммаРасходовЗаКвартал 		= СтрокаТаблицы.Графа13_СуммаРасходовЗаКвартал;
				СтрокаТаблицыОтчета.Графа14_РасходыПрошлыхПериодов 		= СтрокаТаблицы.Графа14_РасходыПрошлыхПериодов;
				СтрокаТаблицыОтчета.Графа15_ОстатокРасходов 			= СтрокаТаблицы.Графа15_ОстатокРасходов;
				
				СписокДат = Формат(СтрокаТаблицы.ДатаОплаты, "ДФ=дд.ММ.гггг") + ", ";
			КонецЕсли;
		КонецЦикла;
		Если НЕ СтрокаТаблицыОтчета = Неопределено Тогда
			СтрокаТаблицыОтчета.ПечДатаОплаты = ?(Прав(СписокДат,2)=", ",Лев(СписокДат,СтрДлина(СписокДат)-2),СписокДат);
			ТаблицаОтчета.Удалить(0);
		КонецЕсли;
		
		НПП = 1;
		Для Каждого СтрокаТаблицыОтчета Из ТаблицаОтчета Цикл
			
			Секция = Макет.ПолучитьОбласть("Строка");
			Секция.Параметры.ПорядковыйНомер  = НПП;
			Секция.Параметры.ОсновноеСредство = СтрокаТаблицыОтчета.ОсновноеСредство;
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета.ДокументМодернизации) Тогда
				СтрокаСодержания = СтрокаТаблицыОтчета.ОсновноеСредство.Наименование
					+ ?(НЕ ЗначениеЗаполнено(СтрокаТаблицыОтчета.ИнвентарныйНомер), "", ", инв.№"
					+ СтрокаТаблицыОтчета.ИнвентарныйНомер) + " (" + СтрокаТаблицыОтчета.ДокументМодернизации.СобытиеОС.Наименование
					+ " от " + Формат(СтрокаТаблицыОтчета.ДокументМодернизации.Дата,"ДФ=дд.ММ.гггг") + ")";
			Иначе
				СтрокаСодержания = СтрокаТаблицыОтчета.ОсновноеСредство.Наименование
					+ ?(НЕ ЗначениеЗаполнено(СтрокаТаблицыОтчета.ИнвентарныйНомер), "", ", инв.№" + СтрокаТаблицыОтчета.ИнвентарныйНомер);
			КонецЕсли;
			Секция.Параметры.НаименованиеОС            = СтрокаСодержания;
			Секция.Параметры.ПечДатаВводаВЭксплуатацию = Формат(СтрокаТаблицыОтчета.Графа3_ДатаВводаВЭксплуатацию,
				"ДФ=дд.ММ.гггг");
			Секция.Параметры.ДатаОплаты                = СтрокаТаблицыОтчета.ПечДатаОплаты;
			Секция.Параметры.ПервоначальнаяСтоимость   = СтрокаТаблицыОтчета.Графа5_ПервоначальнаяСтоимость;
			
			Если НомерКвартала(ПараметрыОтчета.Период) = 4 Тогда
				Секция.Параметры.СуммаРасходовЗаОтчетныйПериод = СтрокаТаблицыОтчета.Графа12_СуммаРасходовЗаОтчетнПериод;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыОтчета.Графа7_СрокПолезногоИспользования) Тогда
				СтрокаТаблицыОтчета.Графа15_ОстатокРасходов = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицыОтчета.Графа4_ГосударственнаяРегистрация) Тогда
				Секция.Параметры.Графа4_ГосударственнаяРегистрация	= СтрокаТаблицыОтчета.Графа4_ГосударственнаяРегистрация;
			КонецЕсли;
			
			Секция.Параметры.ОстаточнаяСтоимость        = СтрокаТаблицыОтчета.Графа6_ОстаточнаяСтоимость;
			Секция.Параметры.СрокПолезногоИспользования = СтрокаТаблицыОтчета.Графа7_СрокПолезногоИспользования;
			
			Секция.Параметры.КоличествоКварталовВНалоговомПериоде     = СтрокаТаблицыОтчета.Графа9_КолКварталовВНалПериоде;
			Секция.Параметры.ПроцентПринятыхРасходов                  = СтрокаТаблицыОтчета.Графа10_ДоляРасходовЗаНалПериод;
			Секция.Параметры.ПроцентПринятыхРасходовЗаКвартал         = СтрокаТаблицыОтчета.Графа11_ДоляРасходовЗаКвартал;
			Секция.Параметры.СуммаРасходовЗаПоследнийКвартал          = СтрокаТаблицыОтчета.Графа13_СуммаРасходовЗаКвартал;
			Секция.Параметры.СуммаРасходовПредыдущихПериодов          = СтрокаТаблицыОтчета.Графа14_РасходыПрошлыхПериодов;
			Секция.Параметры.СуммаРасходовНеВключенныхВСоставРасходов = СтрокаТаблицыОтчета.Графа15_ОстатокРасходов;
			
			ДокументСнятоСУчетаБУ = Неопределено;
			ДатаВыбытия           = Неопределено;
			Если ТипЗнч(СтрокаТаблицыОтчета.ОсновноеСредство) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
				УчетНМА.ПолучитьДокументБухСостоянияНМА(СтрокаТаблицыОтчета.ОсновноеСредство,
					ПараметрыОтчета.Организация, Перечисления.ВидыСостоянийНМА.Списан, ДокументСнятоСУчетаБУ, ДатаВыбытия);
			Иначе
				УчетОС.ПолучитьДокументБухСостоянияОС(СтрокаТаблицыОтчета.ОсновноеСредство,
					ПараметрыОтчета.Организация, Перечисления.СостоянияОС.СнятоСУчета, ДокументСнятоСУчетаБУ, ДатаВыбытия);
			КонецЕсли;
			ДатаВыбытия = ?(ДатаВыбытия > КонецДня(ПараметрыОтчета.Период),"", ДатаВыбытия);
			Секция.Параметры.ПечДатаВыбытия = Формат(ДатаВыбытия, "ДФ=дд.ММ.гггг");
			
			ТабличныйДокумент.Вывести(Секция);
			НПП = НПП + 1;
		КонецЦикла;
	
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Итог");
	
	Если ЗначениеЗаполнено(ТаблицаОтчета) Тогда
		
		Секция.Параметры.ИтогоПервоначальнаяСтоимость = ТаблицаОтчета.Итог("Графа5_ПервоначальнаяСтоимость");
		Секция.Параметры.ИтогоОстаточнаяСтоимость     = ТаблицаОтчета.Итог("Графа6_ОстаточнаяСтоимость");
		
		Если НомерКвартала(ПараметрыОтчета.Период) = 4 Тогда
			Секция.Параметры.ИтогоСуммаРасходовЗаОтчетныйПериод = ТаблицаОтчета.Итог("Графа12_СуммаРасходовЗаОтчетнПериод");
		КонецЕсли;
		
		Секция.Параметры.ИтогоСуммаРасходовЗаПоследнийКвартал          = ТаблицаОтчета.Итог("Графа13_СуммаРасходовЗаКвартал");
		Секция.Параметры.ИтогоСуммаРасходовПредыдущихПериодов          = ТаблицаОтчета.Итог("Графа14_РасходыПрошлыхПериодов");
		Секция.Параметры.ИтогоСуммаРасходовНеВключенныхВСоставРасходов = ТаблицаОтчета.Итог("Графа15_ОстатокРасходов");
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	ПараметрыОтчета.СписокСформированныхЛистов.Добавить(ТабличныйДокумент, НСтр("ru = 'Раздел II. Расходы на ОС и НМА'"));
	
КонецПроцедуры

Процедура ПечатьРаздела3(ПараметрыОтчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Автомасштаб         = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаУчетаДоходовИРасходов_Раздел3";
	
	Если ПараметрыОтчета.Период >= Дата("20130101") Тогда
		Секция = ПолучитьМакет("Раздел3_135н");
	Иначе
		Секция = ПолучитьМакет("Раздел3_154н");
	КонецЕсли;
	Секция.Параметры.ЗаПериод = "за " + ПолучитьПредставлениеПериода(ПараметрыОтчета.Период);
	
	ТаблицаУбытков = ПолучитьТаблицуДанных(ПараметрыОтчета.ДанныеОтчета, "УбыткиРаздел3");
	
	Если ЗначениеЗаполнено(ТаблицаУбытков) Тогда
		
		Раздел1_П010 = 0;
		Раздел1_П020 = 0;
		
		ВыборкаОбороты = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "ОборотыРаздела1ПоКварталам", Истина);
		Пока ВыборкаОбороты.Следующий() Цикл
			Раздел1_П010 = Раздел1_П010 + ВыборкаОбороты.Графа5;
			Раздел1_П020 = Раздел1_П020 + ВыборкаОбороты.Графа7;
		КонецЦикла;
		
		Раздел1_П030 = ТаблицаУбытков[0].УбытокОтУплатыМинимальногоНалога;
		Раздел1_П040 = ?(Раздел1_П010 - Раздел1_П020 - Раздел1_П030 >= 0, Раздел1_П010 - Раздел1_П020 - Раздел1_П030, 0);
		Раздел1_П041 = ?(Раздел1_П010 - Раздел1_П020 - Раздел1_П030 >= 0, 0, Раздел1_П020 + Раздел1_П030 - Раздел1_П010);
		
		П010 = ТаблицаУбытков.Итог("СуммаНеПеренесенныхУбытков");
		П120 = Раздел1_П040;
		П130 = Мин(Раздел1_П040, П010);
		П140 = Раздел1_П041;
		П150 = П010 - П130 + П140;
		
		СуммаКРаспределениюПоСтрокам = П130;
		
		Для Каждого СтрокаУбытка Из ТаблицаУбытков Цикл
			ПараметрСтроки1 = Формат(1+СтрокаУбытка.НомерСтроки, "ЧЦ=2; ЧВН=");
			ПараметрСтроки2 = Формат(14+СтрокаУбытка.НомерСтроки, "ЧЦ=2; ЧВН=");
			Секция.Области["П"+ПараметрСтроки1+"01"].Текст = Прав(СтрокаУбытка.Год, 2);
			Секция.Области["П"+ПараметрСтроки1+"03"].Текст = СтрокаУбытка.СуммаНеПеренесенныхУбытков;
			
			СуммаУбыткаПоСтроке = Мин(СуммаКРаспределениюПоСтрокам, СтрокаУбытка.СуммаНеПеренесенныхУбытков);
			СуммаКРаспределениюПоСтрокам = СуммаКРаспределениюПоСтрокам - СуммаУбыткаПоСтроке;
			
			Если СтрокаУбытка.НомерСтроки > 1 Тогда
				Секция.Области["П"+ПараметрСтроки2+"01"].Текст = Прав(СтрокаУбытка.Год, 2);
				Секция.Области["П"+ПараметрСтроки2+"03"].Текст = СтрокаУбытка.СуммаНеПеренесенныхУбытков - СуммаУбыткаПоСтроке;
			Иначе
				//Убыток "сгорел" - прошло больше 10 лет
				Если СтрокаУбытка.СуммаНеПеренесенныхУбытков - СуммаУбыткаПоСтроке > 0 Тогда
					П150 = П150 - СтрокаУбытка.СуммаНеПеренесенныхУбытков - СуммаУбыткаПоСтроке
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Секция.Области["П2501"].Текст = Прав(ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(Перечисления.ДоступныеПериодыОтчета.Год, НачалоГода(ПараметрыОтчета.Период), КонецГода(ПараметрыОтчета.Период)), 2);
		Секция.Области["П2503"].Текст = Раздел1_П041;
		
		Секция.Области["П0103"].Текст = П010;
		Секция.Области["П1203"].Текст = П120;
		Секция.Области["П1303"].Текст = П130;
		Секция.Области["П1403"].Текст = П140;
		Секция.Области["П1503"].Текст = П150;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	ПараметрыОтчета.СписокСформированныхЛистов.Добавить(ТабличныйДокумент, НСтр("ru = 'Раздел III. Расчет убытка'"));
	
КонецПроцедуры

Процедура ПечатьРаздела4(ПараметрыОтчета)
	
	Если ПараметрыОтчета.Период < УчетУСНКлиентСервер.ДатаНачалаФормирования4РазделаКУДиР() Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.Автомасштаб         = Истина;
	ТабличныйДокумент.КлючПараметровПечати= "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаУчетаДоходовИРасходов_Раздел4";
	
	Макет = ПолучитьМакет("Раздел4");
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.ЗаПериод = "за " + ПолучитьПредставлениеПериода(ПараметрыОтчета.Период);
	ТабличныйДокумент.Вывести(Секция);
	
	НачДата = НачалоКвартала(ПараметрыОтчета.НачалоПериода);
	КолКварталов = НомерКвартала(ПараметрыОтчета.Период);
	
	НПП = 1;
	
	ВыборкаКоличествоЗаписей = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "КоличествоЗаписейРаздела4ДоНачалаОтчета");
	Если ВыборкаКоличествоЗаписей <> Неопределено Тогда
		Пока ВыборкаКоличествоЗаписей.Следующий() Цикл
			НПП = НПП + ВыборкаКоличествоЗаписей.КоличествоСтрок;
		КонецЦикла;
	КонецЕсли;
	
	ТекКвартал              = НомерКвартала(НачДата);
	ПоследнийКварталПериода = НомерКвартала(ПараметрыОтчета.Период);
	
	ВыборкаЗаписей = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "ЗаписиРаздел4");
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		КварталЗаписи = КварталЗаписи(ВыборкаЗаписей.ПериодЗаписи, ПараметрыОтчета);
		
		Пока КварталЗаписи <> ТекКвартал Цикл
			
			ВывестиУменьшенияНалогаЗаКвартал(ПараметрыОтчета, ТекКвартал, ПоследнийКварталПериода, Макет, ТабличныйДокумент);
			ТекКвартал = ТекКвартал + 1;
			
		КонецЦикла;
		
		Секция = Макет.ПолучитьОбласть("Строка");
		Секция.Параметры.НомерПП = НПП;
		Секция.Параметры.Заполнить(ВыборкаЗаписей);
		
		Если Не ЗначениеЗаполнено(ВыборкаЗаписей.ПериодНачисленияПредставление) Тогда
			Секция.Параметры.ПериодНачисленияПредставление = Формат(ВыборкаЗаписей.ПериодНачисления, "ДФ='ММММ гггг'");
		КонецЕсли;
		
		Секция.Параметры.ИтогоВзносов = ВыборкаЗаписей.ПФР + ВыборкаЗаписей.ФСС
			+ ВыборкаЗаписей.ФОМС + ВыборкаЗаписей.ФСС_НС
			+ ВыборкаЗаписей.Больничные + ВыборкаЗаписей.Дстрах;
		
		НПП = НПП + 1;
		ТабличныйДокумент.Вывести(Секция);
		
	КонецЦикла;
	
	Пока ПоследнийКварталПериода >= ТекКвартал Цикл
		
		ВывестиУменьшенияНалогаЗаКвартал(ПараметрыОтчета, ТекКвартал, ПоследнийКварталПериода, Макет, ТабличныйДокумент);
		ТекКвартал = ТекКвартал + 1;
		
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	ПараметрыОтчета.СписокСформированныхЛистов.Добавить(ТабличныйДокумент, НСтр("ru = 'Раздел IV. Уменьшение налога'"));
	
КонецПроцедуры

Процедура ПечатьРаздела5(ПараметрыОтчета)
	
	Если ПараметрыОтчета.Период < УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР() Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Автомасштаб         = Истина;
	ТабличныйДокумент.КлючПараметровПечати= "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаУчетаДоходовИРасходов_Раздел5";
	
	Макет  = ПолучитьМакет("Раздел5");
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.ЗаПериод = "за " + ПолучитьПредставлениеПериода(ПараметрыОтчета.Период);
	ТабличныйДокумент.Вывести(Секция);
	
	НачДата = НачалоКвартала(ПараметрыОтчета.НачалоПериода);
	КолКварталов = НомерКвартала(ПараметрыОтчета.Период);
	
	НПП = 1;
	
	ВыборкаКоличествоЗаписей = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "КоличествоЗаписейРаздела5ДоНачалаОтчета");
	Если ВыборкаКоличествоЗаписей <> Неопределено Тогда
		Пока ВыборкаКоличествоЗаписей.Следующий() Цикл
			НПП = НПП + ВыборкаКоличествоЗаписей.КоличествоСтрок;
		КонецЦикла;
	КонецЕсли;
	
	ТекКвартал              = НомерКвартала(НачДата);
	ПоследнийКварталПериода = НомерКвартала(ПараметрыОтчета.Период);
	
	ВыборкаЗаписей = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "ЗаписиРаздел5");
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		КварталЗаписи = КварталЗаписи(ВыборкаЗаписей.ПериодЗаписи, ПараметрыОтчета);
		
		Пока КварталЗаписи <> ТекКвартал Цикл
			
			ВывестиУплаченныйТорговыйСборЗаКвартал(ПараметрыОтчета, ТекКвартал, Макет, ТабличныйДокумент);
			ТекКвартал = ТекКвартал + 1;
			
		КонецЦикла;
		
		Секция = Макет.ПолучитьОбласть("Строка");
		Секция.Параметры.НомерПП = НПП;
		Секция.Параметры.Заполнить(ВыборкаЗаписей);
		
		Секция.Параметры.ПериодНачисленияПредставление = ПредставлениеПериода(
			НачалоКвартала(ВыборкаЗаписей.ПериодНачисления), КонецКвартала(ВыборкаЗаписей.ПериодНачисления), "ФП=Истина");
		
		НПП = НПП + 1;
		ТабличныйДокумент.Вывести(Секция);
		
	КонецЦикла;
	
	Пока ПоследнийКварталПериода >= ТекКвартал Цикл
		
		ВывестиУплаченныйТорговыйСборЗаКвартал(ПараметрыОтчета, ТекКвартал, Макет, ТабличныйДокумент);
		ТекКвартал = ТекКвартал + 1;
		
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	ПараметрыОтчета.СписокСформированныхЛистов.Добавить(ТабличныйДокумент, НСтр("ru = 'Раздел V. Уплаченный торговый сбор'"));
	
КонецПроцедуры

Функция РедакцияПриказаМинфина135н(ПараметрыОтчета)
	
	Если ПараметрыОтчета.Период >= УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР() Тогда
		// На титульном листе требуется указать дату и номер приказа, добавившего 5 раздел.
		Возврат НСтр("ru = '(в ред. Приказа Минфина России от 07.12.2016 № 227н)'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ВывестиИтогиЗаКвартал(ПараметрыОтчета, ТекКвартал, ПоследнийКварталПериода, Макет, ТабличныйДокумент)
	
	Секция = Макет.ПолучитьОбласть("Итого|Основная");
	РимскоеЧисло = ТекКвартал;
	Секция.Параметры.ПечТекстИтогов = "Итого за "
		+ СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(РимскоеЧисло, Ложь) + " квартал";
	ТабличныйДокумент.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть(?(ПараметрыОтчета.РежимПечатиГраф4и6 = 3, "Итого|Режим3","Итого|Режим12"));
	
	ИтогПечДоходыБУ  = 0;
	ИтогПечРасходыБУ = 0;
	ИтогПечДоходы    = 0;
	ИтогПечРасходы   = 0;
	ПечДоходыБУ      = 0;
	ПечРасходыБУ     = 0;
	ПечДоходы        = 0;
	ПечРасходы       = 0;
	
	ВыборкаОбороты = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "ОборотыРаздела1ПоКварталам", Истина);
	
	Пока ВыборкаОбороты.Следующий() Цикл
		Если НомерКвартала(ВыборкаОбороты.Период) > ТекКвартал Тогда
			Прервать;
		КонецЕсли;
		ИтогПечДоходыБУ  = ИтогПечДоходыБУ + ВыборкаОбороты.Графа4;
		ИтогПечРасходыБУ = ИтогПечРасходыБУ + ВыборкаОбороты.Графа6;
		ИтогПечДоходы    = ИтогПечДоходы + ВыборкаОбороты.Графа5;
		ИтогПечРасходы   = ИтогПечРасходы + ВыборкаОбороты.Графа7;
		Если НомерКвартала(ВыборкаОбороты.Период) = ТекКвартал Тогда
			ПечДоходыБУ  = ВыборкаОбороты.Графа4;
			ПечРасходыБУ = ВыборкаОбороты.Графа6;
			ПечДоходы    = ВыборкаОбороты.Графа5;
			ПечРасходы   = ВыборкаОбороты.Графа7;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОтчета.РежимПечатиГраф4и6 < 2 Тогда
		Секция.Параметры.ПечДоходыБУ = ПечДоходыБУ;
		Секция.Параметры.ПечРасходыБУ = ПечРасходыБУ;
	КонецЕсли;
	Секция.Параметры.ПечДоходы  = ПечДоходы;
	Секция.Параметры.ПечРасходы = ПечРасходы;
	ТабличныйДокумент.Присоединить(Секция);
	
	Если ТекКвартал <> 1 Тогда
		Секция = Макет.ПолучитьОбласть("Итого|Основная");
		Секция.Параметры.ПечТекстИтогов = "Итого за " + НазваниеПериодаНарастающимИтогом(ТекКвартал);
		ТабличныйДокумент.Вывести(Секция);
		
		Секция = Макет.ПолучитьОбласть(?(ПараметрыОтчета.РежимПечатиГраф4и6 = 3, "Итого|Режим3","Итого|Режим12"));
		Если ПараметрыОтчета.РежимПечатиГраф4и6 < 2 Тогда
			Секция.Параметры.ПечДоходыБУ = ИтогПечДоходыБУ;
			Секция.Параметры.ПечРасходыБУ = ИтогПечРасходыБУ;
		КонецЕсли;
		Секция.Параметры.ПечДоходы = ИтогПечДоходы;
		Секция.Параметры.ПечРасходы = ИтогПечРасходы;
		ТабличныйДокумент.Присоединить(Секция);
	КонецЕсли;
	
	Если ТекКвартал <> ПоследнийКварталПериода Тогда
		
		УстановитьШиринуКолонкиСодержание(ПараметрыОтчета, Макет, ТабличныйДокумент);
		
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область(6,,6,);
		
		ПараметрыОтчета.СписокСформированныхЛистов.Добавить(ТабличныйДокумент,
			СтрШаблон(НСтр("ru = 'Раздел I. Доходы и расходы за %1 кв.'"), ТекКвартал));
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.Автомасштаб         = Истина;
		ТабличныйДокумент.КлючПараметровПечати= "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаУчетаДоходовИРасходов_Раздел1";
		
		ВывестиШапкуРаздела1(ПараметрыОтчета, ТабличныйДокумент, Макет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиУменьшенияНалогаЗаКвартал(ПараметрыОтчета, ТекКвартал, ПоследнийКварталПериода, Макет, ТабличныйДокумент)
	
	Секция = Макет.ПолучитьОбласть("Итог");
	РимскоеЧисло = ТекКвартал;
	Секция.Параметры.ПредставлениеПериодаИтогов = "Итого за "
		+ СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(РимскоеЧисло, Ложь) + " квартал";
	
	ТекущийКвартал    = Новый Структура("ПФР, ФСС, ФОМС, ФСС_НС, Больничные, Дстрах, ИтогоВзносов", 0, 0, 0, 0, 0, 0, 0);
	НарастающимИтогом = Новый Структура("ПФР, ФСС, ФОМС, ФСС_НС, Больничные, Дстрах, ИтогоВзносов", 0, 0, 0, 0, 0, 0, 0);
	
	ВыборкаИтоги = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "ОборотыРаздела4ПоКварталам", Истина);
	
	Пока ВыборкаИтоги.Следующий() Цикл
	
		Если НомерКвартала(ВыборкаИтоги.Квартал) > ТекКвартал Тогда
			Прервать;
		КонецЕсли;
		НарастающимИтогом.ПФР        = НарастающимИтогом.ПФР + ВыборкаИтоги.ПФР;
		НарастающимИтогом.ФСС        = НарастающимИтогом.ФСС + ВыборкаИтоги.ФСС;
		НарастающимИтогом.ФОМС       = НарастающимИтогом.ФОМС + ВыборкаИтоги.ФОМС;
		НарастающимИтогом.ФСС_НС     = НарастающимИтогом.ФСС_НС + ВыборкаИтоги.ФСС_НС;
		НарастающимИтогом.Больничные = НарастающимИтогом.Больничные + ВыборкаИтоги.Больничные;
		НарастающимИтогом.Дстрах     = НарастающимИтогом.Дстрах + ВыборкаИтоги.Дстрах;
		
		НарастающимИтогом.ИтогоВзносов = НарастающимИтогом.ИтогоВзносов
			+ ВыборкаИтоги.ПФР + ВыборкаИтоги.ФСС
			+ ВыборкаИтоги.ФОМС + ВыборкаИтоги.ФСС_НС
			+ ВыборкаИтоги.Больничные + ВыборкаИтоги.Дстрах;
		
		Если НомерКвартала(ВыборкаИтоги.Квартал) = ТекКвартал Тогда
			ЗаполнитьЗначенияСвойств(ТекущийКвартал, ВыборкаИтоги);
			ТекущийКвартал.ИтогоВзносов = ВыборкаИтоги.ПФР + ВыборкаИтоги.ФСС
			+ ВыборкаИтоги.ФОМС + ВыборкаИтоги.ФСС_НС
			+ ВыборкаИтоги.Больничные + ВыборкаИтоги.Дстрах;
		КонецЕсли;
	КонецЦикла;
	
	Секция.Параметры.Заполнить(ТекущийКвартал);
	ТабличныйДокумент.Вывести(Секция);

	Если ТекКвартал <> 1 Тогда
		Секция = Макет.ПолучитьОбласть("Итог");
		Секция.Параметры.ПредставлениеПериодаИтогов = "Итого за " + НазваниеПериодаНарастающимИтогом(ТекКвартал);
		Секция.Параметры.Заполнить(НарастающимИтогом);
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиУплаченныйТорговыйСборЗаКвартал(ПараметрыОтчета, ТекущийКвартал, Макет, ТабличныйДокумент)

	Секция = Макет.ПолучитьОбласть("Итог");
	РимскоеЧисло = ТекущийКвартал;
	Секция.Параметры.ПредставлениеПериодаИтогов =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Итого за %1 квартал",
			СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(РимскоеЧисло, Ложь));
	
	УплаченныйСборЗаКвартал         = 0;
	УплаченныйСборНарастающимИтогом = 0;
	
	ВыборкаИтоги = ПолучитьВыборкуДанных(ПараметрыОтчета.ДанныеОтчета, "ОборотыРаздела5ПоКварталам", Истина);
	
	Пока ВыборкаИтоги.Следующий() Цикл
	
		Если НомерКвартала(ВыборкаИтоги.Квартал) > ТекущийКвартал Тогда
			Прервать;
		КонецЕсли;
		
		УплаченныйСборНарастающимИтогом = УплаченныйСборНарастающимИтогом + ВыборкаИтоги.СуммаТорговогоСбора;
		
		Если НомерКвартала(ВыборкаИтоги.Квартал) = ТекущийКвартал Тогда
			УплаченныйСборЗаКвартал = УплаченныйСборЗаКвартал + ВыборкаИтоги.СуммаТорговогоСбора;
		КонецЕсли;
	КонецЦикла;
	
	Секция.Параметры.СуммаТорговогоСбора = УплаченныйСборЗаКвартал;
	ТабличныйДокумент.Вывести(Секция);
	
	Если ТекущийКвартал <> 1 Тогда
		Секция = Макет.ПолучитьОбласть("Итог");
		Секция.Параметры.ПредставлениеПериодаИтогов = "Итого за " + НазваниеПериодаНарастающимИтогом(ТекущийКвартал);
		Секция.Параметры.СуммаТорговогоСбора = УплаченныйСборНарастающимИтогом;
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьШиринуКолонкиСодержание(ПараметрыОтчета, Макет, ТабличныйДокумент)

	// Если графы 4 и 6 скрыты - можно за их счет расширить Содержание
	Если ПараметрыОтчета.РежимПечатиГраф4и6 = 3 Тогда
		
		ШиринаСодержания = Макет.Область(,4,,4).ШиринаКолонки;
		ШиринаГраф4и6 = ШиринаОбласти(Макет.ПолучитьОбласть("Шапка|Режим12"))
			- ШиринаОбласти(Макет.ПолучитьОбласть("Шапка|Режим3"));
			
		ТабличныйДокумент.Область(,4,,4).ШиринаКолонки = ШиринаСодержания + ШиринаГраф4и6;
		
		// Заголовок раздела нужно сдвинуть в центр
		ТабличныйДокумент.Область(2,2,2,2).Отступ = 20;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает суммарную ширину всех колонок переданного табличного документа
// в так называемых средних символах шрифта
// (см. также описание свойства ШиринаКолонки объекта ОбластьЯчеекТабличногоДокумента)
//
Функция ШиринаОбласти(ТабличныйДокумент)
	
	Если ТипЗнч(ТабличныйДокумент) <> Тип("ТабличныйДокумент")
		Или ТабличныйДокумент.ШиринаТаблицы = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Ширина = 0;
	
	Индекс = 0;
	Для Индекс = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		Ширина = Ширина + ТабличныйДокумент.Область(,Индекс,,Индекс).ШиринаКолонки;
	КонецЦикла;
	
	Возврат Ширина;
	
КонецФункции

Функция ВыделятьНДС(ПараметрыОтчета)
	
	Возврат ПараметрыОтчета.ПрименяетсяУСНДоходыМинусРасходы
		И ПараметрыОтчета.РасходыНаНДСПоОплатеПоставщику;
	
КонецФункции

Функция НомерКвартала(ДатаВКвартале)
	
	Возврат Цел(Месяц(КонецКвартала(ДатаВКвартале))/3);
	
КонецФункции

Функция КварталЗаписи(ПериодЗаписи, ПараметрыОтчета)
	
	Если ПараметрыОтчета.НалоговыйПериодРасширен И ПериодЗаписи < НачалоГода(ПараметрыОтчета.Период) Тогда
		// Записи месяца регистрации (декабря) в случае расширенного налогового периода
		// отражаются в КУДиР первым кварталом следующего года.
		Возврат 1;
	Иначе
		Возврат НомерКвартала(ПериодЗаписи);
	КонецЕсли;
	
КонецФункции

Функция НазваниеПериодаНарастающимИтогом(НомерКвартала)

	ПредставлениеПериода = "";
	
	Если НомерКвартала = 2 Тогда
		ПредставлениеПериода = НСтр("ru = 'полугодие'");
	ИначеЕсли НомерКвартала = 3 Тогда
		ПредставлениеПериода = НСтр("ru = '9 месяцев'");
	ИначеЕсли НомерКвартала = 4 Тогда
		ПредставлениеПериода = НСтр("ru = 'год'");
	КонецЕсли;
	
	Возврат ПредставлениеПериода;

КонецФункции

Функция ПолучитьВыборкуДанных(ДанныеОтчета, ИмяРезультатаЗапроса, Сохранять = Ложь)
	
	Если Не ДанныеОтчета.Свойство(ИмяРезультатаЗапроса) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверное имя таблицы результата запроса: %1'"),
			ИмяРезультатаЗапроса);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Выборка = Неопределено;
	
	Если ДанныеОтчета.Свойство("Выборка" + ИмяРезультатаЗапроса) Тогда // Выборка получена
		Выборка = ДанныеОтчета["Выборка" + ИмяРезультатаЗапроса];
		Выборка.Сбросить();
	ИначеЕсли ДанныеОтчета[ИмяРезультатаЗапроса] <> Неопределено Тогда // Выборка не получена, есть результат запроса
		Выборка = ДанныеОтчета[ИмяРезультатаЗапроса].Выбрать();
		Если Сохранять Тогда
			ДанныеОтчета.Вставить("Выборка" + ИмяРезультатаЗапроса, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьТаблицуДанных(ДанныеОтчета, ИмяРезультатаЗапроса, Сохранять = Ложь)
	
	Если Не ДанныеОтчета.Свойство(ИмяРезультатаЗапроса) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверное имя таблицы результата запроса: %1'"),
			ИмяРезультатаЗапроса);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Таблица = Неопределено;
	
	Если ДанныеОтчета.Свойство("Таблица" + ИмяРезультатаЗапроса) Тогда // Таблица получена
		Таблица = ДанныеОтчета["Таблица" + ИмяРезультатаЗапроса];
	ИначеЕсли ДанныеОтчета[ИмяРезультатаЗапроса] <> Неопределено Тогда // Таблица не получена, есть результат запроса
		Таблица = ДанныеОтчета[ИмяРезультатаЗапроса].Выгрузить();
		Если Сохранять Тогда
			ДанныеОтчета.Вставить("Таблица" + ИмяРезультатаЗапроса, Таблица);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Функция ПодготовитьДанныеОтчета(ПараметрыОтчета)
	
	ДанныеОтчета = Новый Структура;
	
	НомераТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	
	НачалоНалоговогоПериода = ПараметрыОтчета.НачалоНалоговогоПериода;
	
	Если НачалоКвартала(ПараметрыОтчета.НачалоПериода) = НачалоГода(ПараметрыОтчета.Период) Тогда
		НачалоПериодаОтчета = НачалоНалоговогоПериода;
	Иначе
		НачалоПериодаОтчета = НачалоКвартала(ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода",            НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",             КонецКвартала(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",              ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода",  НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецГода",                КонецГода(ПараметрыОтчета.Период));
	Запрос.УстановитьПараметр("КонецПредыдущегоКвартала", НачалоКвартала(ПараметрыОтчета.Период) - 1);
	Запрос.УстановитьПараметр("НалоговыйПериодРасширен",  ПараметрыОтчета.НалоговыйПериодРасширен);
	
	// Данные Раздела 2 рассчитываются ежеквартально, но в случае прекращения применения УСН (Д-Р),
	// записи за выбранный квартал могут отсутствовать.
	// В таком случае получаем данные раздела 2 посчитанные за квартал, предшествующий дате перехода.
	Если ЗначениеЗаполнено(ПараметрыОтчета.ДатаПрекращенияПримененияУСНДоходыМинусРасходы) Тогда
		Запрос.УстановитьПараметр("НачалоКварталаОтчета", 
			НачалоКвартала(ДобавитьМесяц(ПараметрыОтчета.ДатаПрекращенияПримененияУСНДоходыМинусРасходы, -3)));
	Иначе
		Запрос.УстановитьПараметр("НачалоКварталаОтчета", НачалоКвартала(ПараметрыОтчета.Период));
	КонецЕсли;
	
	ВыделятьНДС = ВыделятьНДС(ПараметрыОтчета);
	
	Запрос.УстановитьПараметр("СчетчикСтрокНДС",
		?(НЕ ВыделятьНДС И ПараметрыОтчета.РежимПечатиНДС = 2, 1, 0));
	
	Запрос.Текст = ТекстЗапросаБанковскиеСчета(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаПодсчетСтрокРаздела1ДоТекущегоКвартала(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаПодсчетСтрокРаздела4ДоТекущегоКвартала(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаПодсчетСтрокРаздела5ДоТекущегоКвартала(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаОборотыРаздела1ПоКварталам(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаОборотыРаздела4ПоКварталам(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаОборотыРаздела5ПоКварталам(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаЗаписиРаздел1(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаЗаписиРасшифровкиРаздел1(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаЗаписиРаздел2(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаУбыткиРаздел3(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаЗаписиРаздел4(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		+ ТекстЗапросаЗаписиРаздел5(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
		;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ДанныеОтчета.Вставить(НомерТаблицы.Ключ, РезультатыЗапроса[НомерТаблицы.Значение]);
	КонецЦикла;
	
	Возврат ДанныеОтчета;
	
КонецФункции

Функция ТекстЗапросаБанковскиеСчета(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	НомераТаблиц.Вставить("БанковскиеСчета", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК Номер,
	|	БанковскиеСчета.Банк.Наименование КАК Банк
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И (БанковскиеСчета.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаОткрытия <= &КонецГода)
	|	И (БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаЗакрытия >= &НачалоНалоговогоПериода)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПодсчетСтрокРаздела1ДоТекущегоКвартала(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	Если НачалоКвартала(ПараметрыОтчета.НачалоПериода) = НачалоГода(ПараметрыОтчета.НачалоПериода) Тогда
		// Не нужно подсчитывать предыдущие записи
		ДанныеОтчета.Вставить("КоличествоЗаписейРаздела1ДоНачалаОтчета", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("КоличествоЗаписейРаздела1ДоНачалаОтчета", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА КнигаУчетаДоходовИРасходов.НДС <> 0
	|					ТОГДА &СчетчикСтрокНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК КоличествоСтрокНДС
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	КнигаУчетаДоходовИРасходов.Период МЕЖДУ &НачалоНалоговогоПериода И &КонецПредыдущегоКвартала
	|	И КнигаУчетаДоходовИРасходов.Активность
	|	И КнигаУчетаДоходовИРасходов.Организация = &Организация
	|	И &УсловиеНенулевыеДоходыРасходыНУ"
	;
	
	Если ПараметрыОтчета.РежимПечатиГраф4и6 = 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНенулевыеДоходыРасходыНУ", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&УсловиеНенулевыеДоходыРасходыНУ",
			"(КнигаУчетаДоходовИРасходов.Графа5 <> 0 ИЛИ КнигаУчетаДоходовИРасходов.Графа7 <> 0)");
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПодсчетСтрокРаздела4ДоТекущегоКвартала(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	Если ПараметрыОтчета.Период < УчетУСНКлиентСервер.ДатаНачалаФормирования4РазделаКУДиР() Тогда
		ДанныеОтчета.Вставить("КоличествоЗаписейРаздела4ДоНачалаОтчета", Неопределено);
		Возврат "";
	КонецЕсли;
	
	Если НачалоКвартала(ПараметрыОтчета.НачалоПериода) = НачалоГода(ПараметрыОтчета.НачалоПериода) Тогда
		// Не нужно подсчитывать предыдущие записи
		ДанныеОтчета.Вставить("КоличествоЗаписейРаздела4ДоНачалаОтчета", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("КоличествоЗаписейРаздела4ДоНачалаОтчета", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4 КАК КнигаУчетаДоходовИРасходовРаздел4
	|ГДЕ
	|	КнигаУчетаДоходовИРасходовРаздел4.Период МЕЖДУ &НачалоНалоговогоПериода И &КонецПредыдущегоКвартала
	|	И КнигаУчетаДоходовИРасходовРаздел4.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходовРаздел4.Активность";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПодсчетСтрокРаздела5ДоТекущегоКвартала(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	Если ПараметрыОтчета.НачалоПериода < УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР()
		ИЛИ НачалоКвартала(ПараметрыОтчета.НачалоПериода) = НачалоГода(ПараметрыОтчета.НачалоПериода) Тогда
		// Не нужно подсчитывать предыдущие записи
		ДанныеОтчета.Вставить("КоличествоЗаписейРаздела5ДоНачалаОтчета", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("КоличествоЗаписейРаздела5ДоНачалаОтчета", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел5 КАК КнигаУчетаДоходовИРасходовРаздел5
	|ГДЕ
	|	КнигаУчетаДоходовИРасходовРаздел5.Период МЕЖДУ &НачалоНалоговогоПериода И &КонецПредыдущегоКвартала
	|	И КнигаУчетаДоходовИРасходовРаздел5.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходовРаздел5.Активность";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОборотыРаздела1ПоКварталам(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	НомераТаблиц.Вставить("ОборотыРаздела1ПоКварталам", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &НалоговыйПериодРасширен
	|				И ГОД(КнигаУчетаДоходовИРасходовОбороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ)
	|	КОНЕЦ КАК Период,
	|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот) КАК Графа4,
	|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот) КАК Графа5,
	|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа6Оборот) КАК Графа6,
	|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот) КАК Графа7
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоНалоговогоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &НалоговыйПериодРасширен
	|				И ГОД(КнигаУчетаДоходовИРасходовОбороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОборотыРаздела4ПоКварталам(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	Если ПараметрыОтчета.Период < УчетУСНКлиентСервер.ДатаНачалаФормирования4РазделаКУДиР() Тогда
		ДанныеОтчета.Вставить("ОборотыРаздела4ПоКварталам", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОборотыРаздела4ПоКварталам", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел4Обороты.ПФРОборот) КАК ПФР,
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел4Обороты.ФССОборот) КАК ФСС,
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел4Обороты.ФОМСОборот) КАК ФОМС,
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел4Обороты.ФСС_НСОборот) КАК ФСС_НС,
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел4Обороты.БольничныеОборот) КАК Больничные,
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел4Обороты.ДобровольноеСтрахованиеОборот) КАК ДСтрах,
	|	ВЫБОР
	|		КОГДА &НалоговыйПериодРасширен
	|				И ГОД(КнигаУчетаДоходовИРасходовРаздел4Обороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел4Обороты.Период, КВАРТАЛ)
	|	КОНЕЦ КАК Квартал
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоНалоговогоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовРаздел4Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &НалоговыйПериодРасширен
	|				И ГОД(КнигаУчетаДоходовИРасходовРаздел4Обороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел4Обороты.Период, КВАРТАЛ)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Квартал"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОборотыРаздела5ПоКварталам(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	Если ПараметрыОтчета.НачалоПериода < УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР() Тогда
		ДанныеОтчета.Вставить("ОборотыРаздела5ПоКварталам", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОборотыРаздела5ПоКварталам", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &НалоговыйПериодРасширен
	|				И ГОД(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период, КВАРТАЛ)
	|	КОНЕЦ КАК Квартал,
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел5Обороты.СуммаТорговогоСбораОборот) КАК СуммаТорговогоСбора
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел5.Обороты(&НачалоНалоговогоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовРаздел5Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &НалоговыйПериодРасширен
	|				И ГОД(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период, КВАРТАЛ)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Квартал"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗаписиРаздел1(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	НомераТаблиц.Вставить("ЗаписиРаздел1", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходов.Период КАК Период,
	|	КнигаУчетаДоходовИРасходов.Регистратор,
	|	КнигаУчетаДоходовИРасходов.НДС,
	|	КнигаУчетаДоходовИРасходов.Содержание,
	|	КнигаУчетаДоходовИРасходов.РеквизитыПервичногоДокумента,
	|	КнигаУчетаДоходовИРасходов.СтрокаДокумента,
	|	КнигаУчетаДоходовИРасходов.ВидРасхода,
	|	КнигаУчетаДоходовИРасходов.Графа4,
	|	КнигаУчетаДоходовИРасходов.Графа5,
	|	КнигаУчетаДоходовИРасходов.Графа6,
	|	КнигаУчетаДоходовИРасходов.Графа7
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	КнигаУчетаДоходовИРасходов.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходов.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КнигаУчетаДоходовИРасходов.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	КнигаУчетаДоходовИРасходов.Регистратор,
	|	КнигаУчетаДоходовИРасходов.НомерСтроки"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗаписиРасшифровкиРаздел1(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	Если НЕ ПараметрыОтчета.ВыводитьРасшифровки Тогда
		ДанныеОтчета.Вставить("ЗаписиРасшифровкиРаздел1", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ЗаписиРасшифровкиРаздел1", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасшифровкаКУДиР.Период КАК Период,
	|	РасшифровкаКУДиР.Регистратор КАК Регистратор,
	|	РасшифровкаКУДиР.ВидРасхода,
	|	РасшифровкаКУДиР.СтрокаДокумента,
	|	РасшифровкаКУДиР.СтрокаРасхода КАК СтрокаРасхода,
	|	РасшифровкаКУДиР.Содержание,
	|	РасшифровкаКУДиР.РеквизитыДокументаОплаты,
	|	РасшифровкаКУДиР.Графа7,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Дата ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеПервичныхДокументов.Дата = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДанныеПервичныхДокументов.ДатаРегистратора
	|				ИНАЧЕ ДанныеПервичныхДокументов.Дата
	|			КОНЕЦ
	|	КОНЕЦ КАК ДокументОплатыДата,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Номер ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеПервичныхДокументов.Номер ПОДОБНО """"
	|					ТОГДА ДанныеПервичныхДокументов.НомерРегистратора
	|				ИНАЧЕ ДанныеПервичныхДокументов.Номер
	|			КОНЕЦ
	|	КОНЕЦ КАК ДокументОплатыНомер
	|ИЗ
	|	РегистрСведений.РасшифровкаКУДиР КАК РасшифровкаКУДиР
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РасшифровкаКУДиР.Организация = ДанныеПервичныхДокументов.Организация
	|			И РасшифровкаКУДиР.РеквизитыДокументаОплаты = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	РасшифровкаКУДиР.Организация = &Организация
	|	И РасшифровкаКУДиР.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасшифровкаКУДиР.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор,
	|	СтрокаРасхода"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗаписиРаздел2(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	НомераТаблиц.Вставить("ЗаписиРаздел2", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОС.ОсновноеСредство КАК ОсновноеСредство,
	|	КнигаУчетаДоходовИРасходовОС.ДокументМодернизации КАК ДокументМодернизации,
	|	КнигаУчетаДоходовИРасходовОС.Графа3_ДатаВводаВЭксплуатацию,
	|	КнигаУчетаДоходовИРасходовОС.ДатаОплаты КАК ДатаОплаты,
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа5_ПервоначальнаяСтоимость) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа5_ПервоначальнаяСтоимость КОНЕЦ) КАК Графа5_ПервоначальнаяСтоимость,
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа6_ОстаточнаяСтоимость) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа6_ОстаточнаяСтоимость КОНЕЦ) КАК Графа6_ОстаточнаяСтоимость,
	|	КнигаУчетаДоходовИРасходовОС.Графа4_ГосударственнаяРегистрация КАК Графа4_ГосударственнаяРегистрация,
	|	КнигаУчетаДоходовИРасходовОС.Графа7_СрокПолезногоИспользования КАК Графа7_СрокПолезногоИспользования,
	|	КнигаУчетаДоходовИРасходовОС.Графа8_КолКварталовВОтчетномПериоде КАК Графа8_КолКварталовВОтчетномПериоде,
	|	КнигаУчетаДоходовИРасходовОС.Графа9_КолКварталовВНалПериоде КАК Графа9_КолКварталовВНалПериоде,
	|	КнигаУчетаДоходовИРасходовОС.Графа10_ДоляРасходовЗаНалПериод КАК Графа10_ДоляРасходовЗаНалПериод,
	|	КнигаУчетаДоходовИРасходовОС.Графа11_ДоляРасходовЗаКвартал КАК Графа11_ДоляРасходовЗаКвартал,
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа12_СуммаРасходовЗаОтчетнПериод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа12_СуммаРасходовЗаОтчетнПериод КОНЕЦ) КАК Графа12_СуммаРасходовЗаОтчетнПериод,
	|	СУММА(ВЫБОР КОГДА ((КнигаУчетаДоходовИРасходовОС.Графа13_СуммаРасходовЗаКвартал) ЕСТЬ NULL ИЛИ (КнигаУчетаДоходовИРасходовОС.Период < &НачалоКварталаОтчета)) ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа13_СуммаРасходовЗаКвартал КОНЕЦ) КАК Графа13_СуммаРасходовЗаКвартал,
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа14_РасходыПрошлыхПериодов) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа14_РасходыПрошлыхПериодов КОНЕЦ) КАК Графа14_РасходыПрошлыхПериодов,
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа15_ОстатокРасходов) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа15_ОстатокРасходов КОНЕЦ) КАК Графа15_ОстатокРасходов,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовОС КАК КнигаУчетаДоходовИРасходовОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО КнигаУчетаДоходовИРасходовОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|
	|ГДЕ
	|	((КнигаУчетаДоходовИРасходовОС.Период МЕЖДУ &НачалоКварталаОтчета И &КонецПериода) ИЛИ
	|	((ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа15_ОстатокРасходов) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа15_ОстатокРасходов КОНЕЦ) = 0) И 
	|	(КнигаУчетаДоходовИРасходовОС.Период МЕЖДУ &НачалоНалоговогоПериода И &КонецПериода)) И
	|	КнигаУчетаДоходовИРасходовОС.Организация = &Организация И
	|	КнигаУчетаДоходовИРасходовОС.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	КнигаУчетаДоходовИРасходовОС.ОсновноеСредство,
	|	КнигаУчетаДоходовИРасходовОС.ДокументМодернизации,
	|	КнигаУчетаДоходовИРасходовОС.ДатаОплаты,
	|	КнигаУчетаДоходовИРасходовОС.Графа3_ДатаВводаВЭксплуатацию,
	|	КнигаУчетаДоходовИРасходовОС.Графа4_ГосударственнаяРегистрация,
	|	КнигаУчетаДоходовИРасходовОС.Графа7_СрокПолезногоИспользования,
	|	КнигаУчетаДоходовИРасходовОС.Графа8_КолКварталовВОтчетномПериоде,
	|	КнигаУчетаДоходовИРасходовОС.Графа9_КолКварталовВНалПериоде,
	|	КнигаУчетаДоходовИРасходовОС.Графа10_ДоляРасходовЗаНалПериод,
	|	КнигаУчетаДоходовИРасходовОС.Графа11_ДоляРасходовЗаКвартал,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОС.НематериальныйАктив,
	|	NULL,
	|	КнигаУчетаДоходовИРасходовОС.Графа3_ДатаПринятияКУчету,
	|	КнигаУчетаДоходовИРасходовОС.ДатаОплаты,
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа5_ПервоначальнаяСтоимость) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа5_ПервоначальнаяСтоимость КОНЕЦ),
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа6_ОстаточнаяСтоимость) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа6_ОстаточнаяСтоимость КОНЕЦ),
	|	0,
	|	КнигаУчетаДоходовИРасходовОС.Графа7_СрокПолезногоИспользования,
	|	КнигаУчетаДоходовИРасходовОС.Графа8_КолКварталовВОтчетномПериоде,
	|	КнигаУчетаДоходовИРасходовОС.Графа9_КолКварталовВНалПериоде,
	|	КнигаУчетаДоходовИРасходовОС.Графа10_ДоляРасходовЗаНалПериод,
	|	КнигаУчетаДоходовИРасходовОС.Графа11_ДоляРасходовЗаКвартал,
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа12_СуммаРасходовЗаОтчетнПериод) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа12_СуммаРасходовЗаОтчетнПериод КОНЕЦ),
	|	СУММА(ВЫБОР КОГДА ((КнигаУчетаДоходовИРасходовОС.Графа13_СуммаРасходовЗаКвартал) ЕСТЬ NULL ИЛИ (КнигаУчетаДоходовИРасходовОС.Период < &НачалоКварталаОтчета)) ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа13_СуммаРасходовЗаКвартал КОНЕЦ),
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа14_РасходыПрошлыхПериодов) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа14_РасходыПрошлыхПериодов КОНЕЦ),
	|	СУММА(ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа15_ОстатокРасходов) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа15_ОстатокРасходов КОНЕЦ),
	|	0
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовНМА КАК КнигаУчетаДоходовИРасходовОС
	|
	|ГДЕ
	|	((КнигаУчетаДоходовИРасходовОС.Период МЕЖДУ &НачалоКварталаОтчета И &КонецПериода) ИЛИ
	|	((ВЫБОР КОГДА (КнигаУчетаДоходовИРасходовОС.Графа15_ОстатокРасходов) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ КнигаУчетаДоходовИРасходовОС.Графа15_ОстатокРасходов КОНЕЦ) = 0) И
	|	(КнигаУчетаДоходовИРасходовОС.Период МЕЖДУ &НачалоНалоговогоПериода И &КонецПериода)) И
	|	КнигаУчетаДоходовИРасходовОС.Организация = &Организация И
	|	КнигаУчетаДоходовИРасходовОС.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	КнигаУчетаДоходовИРасходовОС.НематериальныйАктив,
	|	КнигаУчетаДоходовИРасходовОС.ДатаОплаты,
	|	КнигаУчетаДоходовИРасходовОС.Графа3_ДатаПринятияКУчету,
	|	КнигаУчетаДоходовИРасходовОС.Графа7_СрокПолезногоИспользования,
	|	КнигаУчетаДоходовИРасходовОС.Графа8_КолКварталовВОтчетномПериоде,
	|	КнигаУчетаДоходовИРасходовОС.Графа9_КолКварталовВНалПериоде,
	|	КнигаУчетаДоходовИРасходовОС.Графа10_ДоляРасходовЗаНалПериод,
	|	КнигаУчетаДоходовИРасходовОС.Графа11_ДоляРасходовЗаКвартал
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ДокументМодернизации,
	|	Графа7_СрокПолезногоИспользования,
	|	Графа8_КолКварталовВОтчетномПериоде УБЫВ,
	|	Графа9_КолКварталовВНалПериоде УБЫВ,
	|	Графа10_ДоляРасходовЗаНалПериод,
	|	Графа11_ДоляРасходовЗаКвартал,
	|	ДатаОплаты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаУбыткиРаздел3(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	НомераТаблиц.Вставить("УбыткиРаздел3", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрацияСуммыУбыткаУСН.Ссылка,
	|	РегистрацияСуммыУбыткаУСН.НомерСтроки КАК НомерСтроки,
	|	РегистрацияСуммыУбыткаУСН.Год,
	|	РегистрацияСуммыУбыткаУСН.СуммаНеПеренесенныхУбытков,
	|	РегистрацияСуммыУбыткаУСН.Ссылка.УбытокОтУплатыМинимальногоНалога КАК УбытокОтУплатыМинимальногоНалога,
	|	РегистрацияСуммыУбыткаУСН.Ссылка.Проведен
	|ИЗ
	|	Документ.РегистрацияСуммыУбыткаУСН.Убытки КАК РегистрацияСуммыУбыткаУСН
	|ГДЕ
	|	РегистрацияСуммыУбыткаУСН.Ссылка.Организация = &Организация
	|	И РегистрацияСуммыУбыткаУСН.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&КонецПериода, ГОД) И КОНЕЦПЕРИОДА(&КонецПериода, ГОД)
	|	И РегистрацияСуммыУбыткаУСН.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗаписиРаздел4(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	Если ПараметрыОтчета.Период < УчетУСНКлиентСервер.ДатаНачалаФормирования4РазделаКУДиР() Тогда
		ДанныеОтчета.Вставить("ЗаписиРаздел4", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ЗаписиРаздел4", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовРаздел4.РеквизитыПервичногоДокумента КАК ДатаНомер,
	|	КнигаУчетаДоходовИРасходовРаздел4.ДокументРасхода,
	|	КнигаУчетаДоходовИРасходовРаздел4.Период КАК ПериодЗаписи,
	|	КнигаУчетаДоходовИРасходовРаздел4.ПериодНачисления КАК ПериодНачисления,
	|	КнигаУчетаДоходовИРасходовРаздел4.ПериодНачисленияПредставление,
	|	КнигаУчетаДоходовИРасходовРаздел4.ПФР КАК ПФР,
	|	КнигаУчетаДоходовИРасходовРаздел4.ФСС КАК ФСС,
	|	КнигаУчетаДоходовИРасходовРаздел4.ФОМС КАК ФОМС,
	|	КнигаУчетаДоходовИРасходовРаздел4.ФСС_НС КАК ФСС_НС,
	|	КнигаУчетаДоходовИРасходовРаздел4.Больничные КАК Больничные,
	|	КнигаУчетаДоходовИРасходовРаздел4.ДобровольноеСтрахование КАК ДСтрах
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4 КАК КнигаУчетаДоходовИРасходовРаздел4
	|ГДЕ
	|	КнигаУчетаДоходовИРасходовРаздел4.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КнигаУчетаДоходовИРасходовРаздел4.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходовРаздел4.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодЗаписи,
	|	ПериодНачисления,
	|	КнигаУчетаДоходовИРасходовРаздел4.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗаписиРаздел5(НомераТаблиц, ДанныеОтчета, ПараметрыОтчета)
	
	Если ПараметрыОтчета.НачалоПериода < УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР() Тогда
		ДанныеОтчета.Вставить("ЗаписиРаздел5", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ЗаписиРаздел5", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовРаздел5.Регистратор,
	|	КнигаУчетаДоходовИРасходовРаздел5.РеквизитыПервичногоДокумента КАК ДатаНомер,
	|	КнигаУчетаДоходовИРасходовРаздел5.Период КАК ПериодЗаписи,
	|	КнигаУчетаДоходовИРасходовРаздел5.ПериодНачисления КАК ПериодНачисления,
	|	КнигаУчетаДоходовИРасходовРаздел5.СуммаТорговогоСбора
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел5 КАК КнигаУчетаДоходовИРасходовРаздел5
	|ГДЕ
	|	КнигаУчетаДоходовИРасходовРаздел5.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КнигаУчетаДоходовИРасходовРаздел5.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходовРаздел5.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодЗаписи,
	|	ПериодНачисления,
	|	Регистратор,
	|	КнигаУчетаДоходовИРасходовРаздел5.НомерСтроки"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

#Область СлужебныеПроцедурыИФункцииПубликуемыеДанные

Функция ДанныеОтчетаДляПередачи(Настройки, КодВозврата, Ошибка, СообщениеОбОшибке)
	
	Перем ОрганизацияИНН, ОрганизацияКПП, Организация, Период;
	
	Настройки = ПрочитатьНастройки(Настройки, СообщениеОбОшибке);
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем настройки формирования отчета
	Если Настройки.Свойство("organization") Тогда
		Настройки.organization.Свойство("inn", ОрганизацияИНН);
		Настройки.organization.Свойство("kpp", ОрганизацияКПП);
		
		Организация = Справочники.Организации.НайтиОрганизацию(ОрганизацияИНН, ОрганизацияКПП, Ложь);
		Если Не ЗначениеЗаполнено(Организация) Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не удалось найти организацию по переданным настройкам.'");
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если Организация.Пустая() Тогда
			СообщениеОбОшибке = НСтр("В информационной базе не задана организация по-умолчанию.");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Настройки.Свойство("date") Тогда
		Период = Настройки.date;
	Иначе
		ТекстОшибки = НСтр("Не указана дата, на которую формируется отчет %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПубликуемыйИдентификатор());
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Предварительная актуализация данных.
	Если НЕ ИнтеграцияСБанками.ОбеспечитьАктуальностьПубликуемыхДанных(Организация, Период, СообщениеОбОшибке) Тогда
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаВнутренняяОшибка();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем структуру параметров отчета
	Отчет = Новый Структура();
	Отчет.Вставить("ВыводитьРасшифровки",        Ложь);
	Отчет.Вставить("Организация",                Организация);
	Отчет.Вставить("НачалоПериода",              НачалоГода(Период));
	Отчет.Вставить("КонецПериода",               КонецГода(Период));
	Отчет.Вставить("Период",                     КонецГода(Период));
	Отчет.Вставить("РежимПечатиГраф4и6",         3);
	Отчет.Вставить("РежимПечатиНДС",             2);
	Отчет.Вставить("СписокСформированныхЛистов", Новый СписокЗначений);
	
	ОписаниеОбъекта = ОписаниеОбъекта(Отчет);
	// Настройки отчета
	ПолучитьНастройкиОтчета(ОписаниеОбъекта);
	ЗаполнитьСведенияОНалоговомПериоде(ОписаниеОбъекта);
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(ОписаниеОбъекта);
	
	// Формируем отчет и возвращаем его в виде двоичных данных
	СформироватьОтчет(ПараметрыОтчета);
	
	Возврат ДвоичныеДанныеОтчета(ПараметрыОтчета);
	
КонецФункции

Функция ДвоичныеДанныеОтчета(ПараметрыОтчета)
	
	ЗаписьZipФайла = Новый ЗаписьZipФайла();
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ТипФайла   = ТипФайлаТабличногоДокумента.PDF;
	Расширение = "pdf";
	
	ПрефиксИмени = НСтр("ru = 'КУДиР '") + ПолучитьПредставлениеПериода(КонецКвартала(ПараметрыОтчета.КонецПериода));
	ПрефиксИмени = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПрефиксИмени);
	
	Для Каждого НастройкаПечатнойФормы Из ПараметрыОтчета.СписокСформированныхЛистов Цикл
		
		ПечатнаяФорма = НастройкаПечатнойФормы.Значение;
		
		ИмяФайла = ПрефиксИмени + " " + НастройкаПечатнойФормы.Представление;
		ИмяФайла = ИмяФайла + "." + Расширение;
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла;
		ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
		
		ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
		
	КонецЦикла;
	
	Возврат ЗаписьZipФайла.ПолучитьДвоичныеДанные();
	
КонецФункции

Функция ПрочитатьНастройки(Настройки, СообщениеОбОшибке)
	
	Перем ДанныеОрганизации;
	
	Если Настройки = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Настройки не заданы.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтрокой = ПолучитьСтрокуИзДвоичныхДанных(Настройки);
	Если ПустаяСтрока(НастройкиСтрокой) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтруктурой = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрокой, "date");
	Если ТипЗнч(НастройкиСтруктурой) <> Тип("Структура") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не НастройкиСтруктурой.Свойство("date") Тогда
		СообщениеОбОшибке = НСтр("ru = 'В структуре JSON отсутствует обязательное поле date.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Организация может отсутствовать во входящих настройках.
	// В этом случае ошибку не возвращаем - для формирования будет использована основная организацийя.
	Если НастройкиСтруктурой.Свойство("organization", ДанныеОрганизации) Тогда
		Если Не ДанныеОрганизации.Свойство("inn") Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization отсутствует обязательное поле inn.'");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ДанныеОрганизации.Свойство("kpp") И ДанныеОрганизации.Свойство("inn")
			И СтрДлина(ДанныеОрганизации.inn) = 10 Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization для юридического лица отсутствует обязательное поле kpp.'");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Переданы корректные настройки, ошибок нет.
	Возврат НастройкиСтруктурой;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли