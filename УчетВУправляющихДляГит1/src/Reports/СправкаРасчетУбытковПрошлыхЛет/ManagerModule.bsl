#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейНалоговыйУчет());
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт 
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
	ДобавитьПримечаниеЛимитУменьшенияПрибыли(Результат, Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ТонкаяНастройка

Функция Примечания(КонтекстОтчета)
	
	Примечания = Новый Структура;
	
	НомерПримечания = 0;
	
	Если СправкиРасчеты.ТребуетсяДополнитьПериодОтчетаПримечанием(КонтекстОтчета) Тогда
		НомерПримечания = НомерПримечания + 1;
		Примечания.Вставить("СноскаНалоговыйПериод", НомерПримечания);
		// Вывод текста примечания - в СправкиРасчеты.ОформитьРезультатОтчета()
	КонецЕсли;
	
	Если НалоговыйУчет.ПрименяетсяОграничениеНаПереносУбытковПрошлыхЛетПоДолеПрибыли(КонтекстОтчета.КонецПериода) Тогда
		НомерПримечания = НомерПримечания + 1;
		Примечания.Вставить("ЛимитУменьшенияПрибыли", НомерПримечания);
		// Вывод текста примечания - в ДобавитьПримечаниеЛимитУменьшенияПрибыли()
	КонецЕсли;
	
	Возврат Примечания;
	
КонецФункции


Процедура ЗаполнитьПараметрыЗаголовковТаблицы(КомпоновщикНастроек, Контекст)
	
	Примечания = Примечания(Контекст);
	
	// Параметры для заголовков колонок
	НомерПримечания = 0;
	// - СноскаНалоговыйПериод
	Если Примечания.Свойство("СноскаНалоговыйПериод", НомерПримечания) Тогда
		СноскаНалоговыйПериод = "";
		СправкиРасчеты.ДополнитьСловоСсылкойНаПримечание(СноскаНалоговыйПериод, НомерПримечания);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СноскаНалоговыйПериод", СноскаНалоговыйПериод);
	КонецЕсли;
	// - ЛимитУменьшенияПрибыли
	Если Примечания.Свойство("ЛимитУменьшенияПрибыли", НомерПримечания) Тогда
		ЛимитУменьшенияПрибыли = " х 0,5";
		СправкиРасчеты.ДополнитьСловоСсылкойНаПримечание(ЛимитУменьшенияПрибыли, НомерПримечания);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ЛимитУменьшенияПрибыли", ЛимитУменьшенияПрибыли);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПримечаниеЛимитУменьшенияПрибыли(Результат, Контекст)
	
	Примечания = Примечания(Контекст);
	
	НомерПримечания = 0;
	
	Если Не Примечания.Свойство("ЛимитУменьшенияПрибыли", НомерПримечания) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПримечания =
	НСтр("ru = '""В отчетные (налоговые) периоды с 1 января 2017 года по 31 декабря 2020 года налоговая база по налогу за текущий отчетный (налоговый) период ... не может быть уменьшена на сумму убытков, полученных в предыдущих налоговых периодах, более чем на 50 процентов"" (п. 2.1 ст. 283 НК РФ)'");
	
	СправкиРасчеты.ДобавитьПримечание(Результат, ТекстПримечания, НомерПримечания - 1);// ДобавитьПримечание инкрементирует номер
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПоИмени(Структура, Имя)
	Группировка = Неопределено;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат	Группировка;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	ЗаполнитьПараметрыЗаголовковТаблицы(КомпоновщикНастроек, ПараметрыОтчета);
	
	ПараметрыОтчета.ПоказательНУ = Истина;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("НУ");
	
	МассивСумм = Новый Массив;
	МассивСумм.Добавить("СуммаОстатокНач");
	МассивСумм.Добавить("ПрибыльСНачалаГода");
	МассивСумм.Добавить("СуммаСНачалаГода");
	МассивСумм.Добавить("СуммаОстаток");
	
	ГруппировкаПодразделение = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"ПодразделениеУбытков");
	Таблица = НайтиПоИмени(ГруппировкаПодразделение.Структура,"Убытки");
	Группировка 	= НайтиПоИмени(Таблица.Строки,"Группировка");
	ГруппировкаПериод= НайтиПоИмени(Таблица.Строки,"ГруппировкаПериод");
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям") Тогда
		ПолеГруппировкиПодразделение = ГруппировкаПодразделение.ПоляГруппировки.Элементы[0];
		ПолеГруппировкиПодразделение.Использование = Ложь;
	КонецЕсли;
	
	Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"РБП");
	Для Каждого ИмяСумм Из МассивСумм Цикл
			ПодГруппа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "" + ИмяСумм + ИмяПоказателя);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ПериодРасчета");
	
	Для Каждого ИмяСумм Из МассивСумм Цикл
		
			ПодГруппа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "" + ИмяСумм + ИмяПоказателя);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.НалоговыйУчетПоНалогуНаПрибыль, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ВариантНастройкиУбытки", "Списание убытков прошлых лет"));
	
	Возврат Массив;
	
КонецФункции

#КонецЕсли