#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Ложь);
	
КонецФункции

// Функция возвращает текст заголовка.
//
// Параметры:
//  ПараметрыОтчета      - Структура - содержит передаваемые параметры.
//  ОрганизацияВНачале   - Булево    - признак, указывающий на то, что организация указывается в начале.
// 
// Возвращаемое значение:
//  Строка - Текст заголовка.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Отчет о дебиторской задолженности по срокам долга за " + Формат(ПараметрыОтчета.Период, "ДФ='MMММ yyyy'");
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета     - Структура - содержит передаваемые параметры.
//  Схема               - Схема     - схема данных.
//  КомпоновщикНастроек - Структура - структура компоновщика настроек.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	// Установка отбора по организации.
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация,,, Истина);
	КонецЕсли;
	
	// Подготовка интервалов в параметрах.
	ПараметрыОтчета.Интервалы.Свернуть("Значение, Представление");
	ПараметрыОтчета.Интервалы.Сортировать("Значение Воз");
	
	// Исходный текст запроса указан в схеме компоновки отчета.
	// Здесь идет переопределение исходного отчета с учетом заданных интервалов.
	// При изменении запроса правки нужно внести и в схему, и здесь.
	Схема.НаборыДанных.ДанныеПоНачислениямИДолгам.Запрос = ПолучитьТекстЗапроса(ПараметрыОтчета);
	
	// Установка параметров компоновки.
	УстановитьПараметры(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	// Установка полей выбора компоновки.
	ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	// Группировка
	УПЖКХ_ТиповыеМетодыВызовСервера.ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Добавление уровня детальных записей в группировку структуры отчета.
	ДобавитьУровеньДетальныхЗаписейВГруппировки(КомпоновщикНастроек);
	
	// Дополнительные данные
	УПЖКХ_ТиповыеМетодыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

// Возникает после компоновки макета.
//
// Параметры:
//  ПараметрыОтчета - Структура             - содержит передаваемые параметры.
//  МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
КонецПроцедуры

// Возникает после вывода результата.
//
// Параметры:
//  ПараметрыОтчета - Структура         - содержит передаваемые параметры.
//  Результат       - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Вызывает настройку вариантов отчета.
//
// Параметры:
//  Настройки      - Структура - содержит настройки варианта отчета.
//  ОписаниеОтчета - Структура - содержит описание варианта отчета.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
// Параметры:
//  Настройки - Структура - содержит настройки варианта отчета.
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры расшифровки отчета.
//
// Параметры:
//  Адрес                - Строка    - содержит адрес расшифровки отчета.
//  Расшифровка          - Строка    - содержит расшифровку отчета.
//  ПараметрыРасшифровка - Структура - содержит параметры расшифровки отчета.
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Функция определяет текст запроса в соответствии с параметрами отчета.
Функция ПолучитьТекстЗапроса(ПараметрыОтчета)
	
	// Количество интервалов, заданных пользователем в настройках отчета.
	// Кроме заданных интервалов нужно учитывать еще и бесконечный интервал,
	// выходящий за рамки заданных пользовательских интервалов. Например:
	//   пользователь указал интервалы: с 1 по 3 и с 4 по 6
	//   кроме этих интервалов нужен еще интервал: свыше 6.
	КоличествоИнтервалов = ПараметрыОтчета.Интервалы.Количество();
	
	// Исходный текст запроса указан в схеме компоновки отчета.
	// Здесь идет переопределение исходного отчета с учетом заданных интервалов.
	// При изменении запроса правки нужно внести и в схему, и здесь.
	
	// Выборка основных показателей по остаткам.
	ПолныйТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиИОбороты.Организация,
	|	ОстаткиИОбороты.ЛицевойСчет,
	|	ОстаткиИОбороты.МесяцНачисления,
	|	ОстаткиИОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	ОстаткиИОбороты.ЛицевойСчет.Адрес КАК Квартира,
	|	ОстаткиИОбороты.Услуга,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.СуммаНачисленияНачальныйОстаток > 0
	|				И КОНЕЦПЕРИОДА(ОстаткиИОбороты.МесяцНачисления, МЕСЯЦ) = КОНЕЦПЕРИОДА(&МесяцТекущейЗадолженностиНаНачалоПериода, МЕСЯЦ)
	|			ТОГДА ОстаткиИОбороты.СуммаНачисленияНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗадолженностьНаНачалоПериодаТекущая,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.СуммаНачисленияНачальныйОстаток < 0
	|			ТОГДА -1 * ОстаткиИОбороты.СуммаНачисленияНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПереплатаНаНачалоПериода,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|				И КОНЕЦПЕРИОДА(ОстаткиИОбороты.МесяцНачисления, МЕСЯЦ) = КОНЕЦПЕРИОДА(&МесяцТекущейЗадолженностиНаКонецПериода, МЕСЯЦ)
	|			ТОГДА ОстаткиИОбороты.СуммаНачисленияКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗадолженностьНаКонецПериодаТекущая,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.СуммаНачисленияКонечныйОстаток < 0
	|			ТОГДА -1 * ОстаткиИОбороты.СуммаНачисленияКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПереплатаНаКонецПериода,
	|	0 КАК ОплатаТекущая,
	|	0 КАК ОплатаАванс,
	|	0 КАК Начисление,
	|	0 КАК Перерасчеты,
	|	0 КАК ЗачетАвансов";
	
	// Выборка остатков на начало периода по интервалам.
	Для Индекс = 1 По КоличествоИнтервалов Цикл
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
		",
		|	ВЫБОР
		|		КОГДА ОстаткиИОбороты.СуммаНачисленияНачальныйОстаток > 0
		|				И ОстаткиИОбороты.МесяцНачисления >= &МесяцНачалаИнтервалаНаНачалоПериода" + Индекс + "
		|				И ОстаткиИОбороты.МесяцНачисления <= &МесяцОкончанияИнтервалаНаНачалоПериода" + Индекс + "
		|			ТОГДА ОстаткиИОбороты.СуммаНачисленияНачальныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЗадолженностьНаНачалоПериода" + Индекс;
		
	КонецЦикла;
	
	// Добавим бесконечный интервал после последнего заданного.
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
	",
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.СуммаНачисленияНачальныйОстаток > 0
	|				И ОстаткиИОбороты.МесяцНачисления < &МесяцНачалаИнтервалаНаНачалоПериода" + КоличествоИнтервалов + "
	|			ТОГДА ОстаткиИОбороты.СуммаНачисленияНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗадолженностьНаНачалоПериода" + (КоличествоИнтервалов + 1);
	
	// Выборка остатков на конец периода по интервалам.
	Для Индекс = 1 По КоличествоИнтервалов Цикл
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
		",
		|	ВЫБОР
		|		КОГДА ОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
		|				И ОстаткиИОбороты.МесяцНачисления >= &МесяцНачалаИнтервалаНаКонецПериода" + Индекс + "
		|				И ОстаткиИОбороты.МесяцНачисления <= &МесяцОкончанияИнтервалаНаКонецПериода" + Индекс + "
		|			ТОГДА ОстаткиИОбороты.СуммаНачисленияКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЗадолженностьНаКонецПериода" + Индекс;
		
	КонецЦикла;
	
	// Добавим бесконечный интервал после последнего заданного.
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
	",
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|				И ОстаткиИОбороты.МесяцНачисления < &МесяцНачалаИнтервалаНаКонецПериода" + КоличествоИнтервалов + "
	|			ТОГДА ОстаткиИОбороты.СуммаНачисленияКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗадолженностьНаКонецПериода" + (КоличествоИнтервалов + 1);
	
	// Псевдоним выборки оплат по интервалам.
	Для Индекс = 1 По КоличествоИнтервалов Цикл
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
		",
		|0 КАК Оплата" + Индекс;
		
	КонецЦикла;
	
	// Добавим бесконечный интервал после последнего заданного.
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
	",
	|0 КАК Оплата" + (КоличествоИнтервалов + 1);
	
	// Окончание первого подзапроса и выборка основных показателей по оборотам.
	// При этом при получении оплат и начислений отсекаются движения документов
	// закрытия периода по начислениям ЖКХ и корректировки взаиморасчетов,
	// так как они формируются движения с видами начислений "Оплата" и "Начисление",
	// а эти движения нужно исключать.
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
	|ПОМЕСТИТЬ врНачисленияИДолги
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			,
	|			&ВключатьСуммыПени
	|				ИЛИ НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК ОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Организация,
	|	Начисления.ЛицевойСчет,
	|	Начисления.МесяцНачисления,
	|	Начисления.ЛицевойСчет.Адрес.Владелец,
	|	Начисления.ЛицевойСчет.Адрес,
	|	Начисления.Услуга,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА Начисления.ВидНачисления = &ВидНачисленияОплата
	|				И КОНЕЦПЕРИОДА(Начисления.МесяцНачисления, МЕСЯЦ) = КОНЕЦПЕРИОДА(&МесяцТекущейЗадолженностиНаНачалоПериода, МЕСЯЦ)
	|				И НЕ Начисления.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
	|				И НЕ Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаВзаиморасчетовЖКХ
	|			ТОГДА -Начисления.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Начисления.ВидНачисления = &ВидНачисленияОплата
	|				И Начисления.МесяцНачисления > &МесяцТекущейЗадолженностиНаНачалоПериода
	|				И НЕ Начисления.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
	|				И НЕ Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаВзаиморасчетовЖКХ
	|			ТОГДА -Начисления.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Начисления.ВидНачисления = &ВидНачисленияОплата
	|				И НЕ Начисления.ВидНачисления В (&ВидыНачисленияКорректировки)
	|				И НЕ Начисления.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
	|				И НЕ Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаВзаиморасчетовЖКХ
	|			ТОГДА Начисления.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Начисления.ВидНачисления В (&ВидыНачисленияКорректировки)
	|			ТОГДА Начисления.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Начисления.СуммаНачисленияОборот > 0
	|				И (Начисления.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
	|					ИЛИ Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаВзаиморасчетовЖКХ
	|						И ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.КВП_КорректировкаВзаиморасчетовЖКХ).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности))
	|			ТОГДА Начисления.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	// Псевдоним выборки остатков на начало периода по интервалам.
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
		",
		|	0";
		
	КонецЦикла;
	
	// Псевдоним выборки остатков на конец периода по интервалам.
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
		",
		|	0";
		
	КонецЦикла;
	
	// Выборка оплат по интервалам.
	Для Индекс = 1 По КоличествоИнтервалов Цикл
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
		",
		|	ВЫБОР
		|		КОГДА Начисления.ВидНачисления = &ВидНачисленияОплата
		|				И Начисления.МесяцНачисления >= &МесяцНачалаИнтервалаНаНачалоПериода" + Индекс + "
		|				И Начисления.МесяцНачисления <= &МесяцОкончанияИнтервалаНаНачалоПериода" + Индекс + "
		|				И НЕ Начисления.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
		|				И НЕ Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаВзаиморасчетовЖКХ
		|			ТОГДА -Начисления.СуммаНачисленияОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ";
		
	КонецЦикла;
	
	// Добавим бесконечный интервал после последнего заданного.
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
	",
	|	ВЫБОР
	|		КОГДА Начисления.ВидНачисления = &ВидНачисленияОплата
	|				И Начисления.МесяцНачисления < &МесяцНачалаИнтервалаНаНачалоПериода" + КоличествоИнтервалов + "
	|				И НЕ Начисления.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
	|				И НЕ Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаВзаиморасчетовЖКХ
	|			ТОГДА -Начисления.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	// Окончание первого запроса, выборка основных показателей во втором запросе.
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			&ВключатьСуммыПени
	|				ИЛИ НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНачисленияИОстатки.Организация,
	|	врНачисленияИОстатки.ЛицевойСчет,
	|	врНачисленияИОстатки.МесяцНачисления,
	|	врНачисленияИОстатки.Здание,
	|	врНачисленияИОстатки.Квартира,
	|	врНачисленияИОстатки.Услуга,
	|	СУММА(врНачисленияИОстатки.ЗадолженностьНаНачалоПериодаТекущая) КАК ЗадолженностьНаНачалоПериодаТекущая,
	|	СУММА(врНачисленияИОстатки.ПереплатаНаНачалоПериода) КАК ПереплатаНаНачалоПериода,
	|	СУММА(врНачисленияИОстатки.ЗадолженностьНаКонецПериодаТекущая) КАК ЗадолженностьНаКонецПериодаТекущая,
	|	СУММА(врНачисленияИОстатки.ПереплатаНаКонецПериода) КАК ПереплатаНаКонецПериода,
	|	СУММА(врНачисленияИОстатки.ОплатаТекущая) КАК ОплатаТекущая,
	|	СУММА(врНачисленияИОстатки.ОплатаАванс) КАК ОплатаАванс,
	|	СУММА(врНачисленияИОстатки.Начисление) КАК Начисление,
	|	СУММА(врНачисленияИОстатки.Перерасчеты) КАК Перерасчеты,
	|	СУММА(врНачисленияИОстатки.ЗачетАвансов) КАК ЗачетАвансов";
	
	// Далее поля по интервалам добавляем с бесконечным интервалом,
	// поэтому количество интервалов всегда берем больше на единицу.
	
	// Выборка остатков на начало периода по интервалам.
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		
		ПсевдонимПоля = "ЗадолженностьНаНачалоПериода" + Индекс;
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
		",
		|	СУММА(врНачисленияИОстатки." + ПсевдонимПоля + ") КАК " + ПсевдонимПоля;
		
	КонецЦикла;
	
	// Выборка остатков на конец периода по интервалам.
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		
		ПсевдонимПоля = "ЗадолженностьНаКонецПериода" + Индекс;
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
		",
		|	СУММА(врНачисленияИОстатки." + ПсевдонимПоля + ") КАК " + ПсевдонимПоля;
		
	КонецЦикла;
	
	// Выборка оплат по интервалам.
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		
		ПсевдонимПоля = "Оплата" + Индекс;
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + 
		",
		|	СУММА(врНачисленияИОстатки." + ПсевдонимПоля + ") КАК " + ПсевдонимПоля;
		
	КонецЦикла;
	
	// Выборка итогов остатков на начало периода.
	ПолныйТекстЗапроса = ПолныйТекстЗапроса +
	",
	|	СУММА(врНачисленияИОстатки.ЗадолженностьНаНачалоПериодаТекущая - врНачисленияИОстатки.ПереплатаНаНачалоПериода";
	
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + " + врНачисленияИОстатки.ЗадолженностьНаНачалоПериода" + Индекс;
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + ") КАК ЗадолженностьНаНачалоПериодаВсего";
	
	// Выборка итогов остатков на конец периода.
	ПолныйТекстЗапроса = ПолныйТекстЗапроса +
	",
	|	СУММА(врНачисленияИОстатки.ЗадолженностьНаКонецПериодаТекущая - врНачисленияИОстатки.ПереплатаНаКонецПериода";
	
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + " + врНачисленияИОстатки.ЗадолженностьНаКонецПериода" + Индекс;
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + ") КАК ЗадолженностьНаКонецПериодаВсего";
	
	// Выборка итогов оплат.
	ПолныйТекстЗапроса = ПолныйТекстЗапроса +
	",
	|	СУММА(врНачисленияИОстатки.ОплатаТекущая + врНачисленияИОстатки.ОплатаАванс";
	
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + " + врНачисленияИОстатки.Оплата" + Индекс;
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + ") КАК ОплатаВсего
	|ИЗ
	|	врНачисленияИДолги КАК врНачисленияИОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	врНачисленияИОстатки.Организация,
	|	врНачисленияИОстатки.ЛицевойСчет,
	|	врНачисленияИОстатки.МесяцНачисления,
	|	врНачисленияИОстатки.Услуга,
	|	врНачисленияИОстатки.Здание,
	|	врНачисленияИОстатки.Квартира";
	
	Возврат ПолныйТекстЗапроса;
	
КонецФункции

// Процедура устанавливает параметры схемы компоновки данных.
Процедура УстановитьПараметры(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	// Параметры периода отчета.
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(ПараметрыОтчета.Период));
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецМесяца(ПараметрыОтчета.Период));
	
	// Параметры видов начисления.
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидНачисленияОплата", Перечисления.УПЖКХ_ВидыНачислений.Оплата);
	
	ВидыНачисленияКорректировки = Новый Массив;
	ВидыНачисленияКорректировки.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Корректировка);
	ВидыНачисленияКорректировки.Добавить(Перечисления.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ);
	ВидыНачисленияКорректировки.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыНачисленияКорректировки", ВидыНачисленияКорректировки);
	
	// Признак включения пени в сумы остатков и оплат.
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВключатьСуммыПени", ПараметрыОтчета.ВключатьСуммыПени);
	
	// Месяц текущей задолженности на начало периода.
	МесяцТекущейЗадолженностиНаНачалоПериода = НачалоДня(КонецМесяца(ДобавитьМесяц(ПараметрыОтчета.Период, - 1)));
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "МесяцТекущейЗадолженностиНаНачалоПериода", МесяцТекущейЗадолженностиНаНачалоПериода);
	
	// Месяц текущей задолженности на конец периода.
	МесяцТекущейЗадолженностиНаКонецПериода = НачалоДня(КонецМесяца(ПараметрыОтчета.Период));
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "МесяцТекущейЗадолженностиНаКонецПериода", МесяцТекущейЗадолженностиНаКонецПериода);
	
	// Параметры интервалов на начало периода.
	// Отсчет с месяца, предшествующего месяцу текущей задолженности на начало периода.
	ПоследнийМесяц = ДобавитьМесяц(ПараметрыОтчета.Период, -2);
	УстановитьПараметрыИнтервалов(Схема, КомпоновщикНастроек, ПараметрыОтчета.Интервалы, ПоследнийМесяц, "МесяцНачалаИнтервалаНаНачалоПериода", "МесяцОкончанияИнтервалаНаНачалоПериода");
	
	// Параметры интервалов на конец периода.
	// Отсчет с месяца, предшествующего месяцу отчета на конец периода.
	ПоследнийМесяц = ДобавитьМесяц(ПараметрыОтчета.Период, -1);
	УстановитьПараметрыИнтервалов(Схема, КомпоновщикНастроек, ПараметрыОтчета.Интервалы, ПоследнийМесяц, "МесяцНачалаИнтервалаНаКонецПериода", "МесяцОкончанияИнтервалаНаКонецПериода");
	
КонецПроцедуры

// Установка параметров интервалов отчета.
Процедура УстановитьПараметрыИнтервалов(Схема, КомпоновщикНастроек, Интервалы, ПоследнийМесяц, ИмяПараметраМесяцаНачала, ИмяПараметраМесяцаОкончания)
	
	// Параметры интервалов на начало периода.
	ТабИнтервалыНаНачалоПериода = Новый ТаблицаЗначений;
	ТабИнтервалыНаНачалоПериода.Колонки.Добавить("НомерИнтервала");
	ТабИнтервалыНаНачалоПериода.Колонки.Добавить("НачалоИнтервала");
	ТабИнтервалыНаНачалоПериода.Колонки.Добавить("КонецИнтервала");
	
	Индекс = 1;
	Первый = Истина;
	ПредыдущееЗначение = 0;
	
	Для Каждого Интервал Из Интервалы Цикл
		
		НоваяСтрока = ТабИнтервалыНаНачалоПериода.Добавить();
		НоваяСтрока.НомерИнтервала = Индекс;
		
		Если Первый Тогда
			НоваяСтрока.НачалоИнтервала = НачалоМесяца(ДобавитьМесяц(ПоследнийМесяц, (-1) * (Интервал.Значение - 1)));
			НоваяСтрока.КонецИнтервала  = КонецМесяца(ПоследнийМесяц);
			ПредыдущееЗначение = Интервал.Значение;
			Первый = Ложь;
		Иначе
			НоваяСтрока.НачалоИнтервала = НачалоМесяца(ДобавитьМесяц(ПоследнийМесяц, (-1) * (Интервал.Значение - 1)));
			НоваяСтрока.КонецИнтервала  = КонецМесяца(ДобавитьМесяц(ПоследнийМесяц, (-1) * (ПредыдущееЗначение)));
			ПредыдущееЗначение = Интервал.Значение;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Для Каждого СтрокаИнтервала Из ТабИнтервалыНаНачалоПериода Цикл
		ИмяПараметра = ИмяПараметраМесяцаНачала + СтрокаИнтервала.НомерИнтервала;
		Параметр = Схема.Параметры.Найти(ИмяПараметра);
		Если Параметр = Неопределено Тогда
			Параметр = Схема.Параметры.Добавить();
			Параметр.Имя = ИмяПараметра;
		КонецЕсли;
		
		ИмяПараметра = ИмяПараметраМесяцаОкончания + СтрокаИнтервала.НомерИнтервала;
		Параметр = Схема.Параметры.Найти(ИмяПараметра);
		Если Параметр = Неопределено Тогда
			Параметр = Схема.Параметры.Добавить();
			Параметр.Имя = ИмяПараметра;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	Для каждого СтрокаИнтервала из ТабИнтервалыНаНачалоПериода Цикл
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметраМесяцаНачала + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.НачалоИнтервала);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметраМесяцаОкончания + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.КонецИнтервала);
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет уровень детальных записей в структуру группировки отчета.
//
Процедура ДобавитьУровеньДетальныхЗаписейВГруппировки(КомпоновщикНастроек) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		СтруктураНастроек = КомпоновщикНастроек.Настройки.Структура;
	Иначе
		СтруктураНастроек = КомпоновщикНастроек;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		
		Группировка = ЭлементСтруктуры;
		
		Если ТипЗнч(Группировка) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			Если Группировка.Структура.Количество() = 0 Тогда
				
				НоваяГруппировка = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				НоваяГруппировка.Использование  = Истина;
				НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				
			Иначе
				ДобавитьУровеньДетальныхЗаписейВГруппировки(Группировка.Структура);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение полей выбора компоновки данных в соответствии с интервалами отчета.
Процедура ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	// Исходная структура отчета определена в схеме компоновки отчета.
	// Здесь идет переопределение исходной структуры отчета с учетом заданных интервалов.
	// При изменении структуры отчета правки нужно внести и в схему, и здесь.
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ЛицевойСчет");
	
	// Задолженность на начало периода
	ГруппаЗадолженностьНаНачалоПериода = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаЗадолженностьНаНачалоПериода.Заголовок = НСтр("ru = 'Задолженность на начало периода'");
	
	ДобавитьПоляГруппыПоказателейПоИнтервалам(ПараметрыОтчета, Схема, КомпоновщикНастроек, "ЗадолженностьНаНачалоПериода", ГруппаЗадолженностьНаНачалоПериода);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЗадолженностьНаНачалоПериода, "ЗадолженностьНаНачалоПериодаТекущая");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЗадолженностьНаНачалоПериода, "ПереплатаНаНачалоПериода");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЗадолженностьНаНачалоПериода, "ЗадолженностьНаНачалоПериодаВсего");
	
	// Оплата
	ГруппаОплата = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОплата.Заголовок = НСтр("ru = 'Оплата'");
	
	ДобавитьПоляГруппыПоказателейПоИнтервалам(ПараметрыОтчета, Схема, КомпоновщикНастроек, "Оплата", ГруппаОплата);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОплата, "ОплатаТекущая");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОплата, "ОплатаАванс");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОплата, "ОплатаВсего");
	
	// Зачет авансов
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ЗачетАвансов");
	
	// Начисление
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Начисление");
	
	// Перерасчеты
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Перерасчеты");
	
	// Задолженность на конец периода
	ГруппаЗадолженностьНаКонецПериода = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаЗадолженностьНаКонецПериода.Заголовок = НСтр("ru = 'Задолженность на конец периода'");
	
	ДобавитьПоляГруппыПоказателейПоИнтервалам(ПараметрыОтчета, Схема, КомпоновщикНастроек, "ЗадолженностьНаКонецПериода", ГруппаЗадолженностьНаКонецПериода);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЗадолженностьНаКонецПериода, "ЗадолженностьНаКонецПериодаТекущая");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЗадолженностьНаКонецПериода, "ПереплатаНаКонецПериода");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЗадолженностьНаКонецПериода, "ЗадолженностьНаКонецПериодаВсего");
	
КонецПроцедуры

// Процедура добавляет поля группы показателей по заданным интервалам.
Процедура ДобавитьПоляГруппыПоказателейПоИнтервалам(ПараметрыОтчета, Схема, КомпоновщикНастроек, ИсходноеИмяПоля, Группа = Неопределено)
	
	Индекс = 1;
	ЗначениеПоследнего = 0;
	
	Для Каждого Интервал Из ПараметрыОтчета.Интервалы Цикл
		
		ИмяПоля = ИсходноеИмяПоля + Индекс;
		
		Поле = Схема.НаборыДанных.ДанныеПоНачислениямИДолгам.Поля.Найти(ИмяПоля);
		Если Поле = Неопределено Тогда
			Поле = Схема.НаборыДанных.ДанныеПоНачислениямИДолгам.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		КонецЕсли;
		
		Поле.Поле        = ИмяПоля;
		Поле.ПутьКДанным = ИмяПоля;
		Поле.Заголовок   = Интервал.Представление;
		Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=2");
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
		
		Поле.ОграничениеИспользования.Группировка = Ложь;
		Поле.ОграничениеИспользованияРеквизитов.Группировка = Ложь;
		
		Поле = Схема.ПоляИтога.Найти(ИмяПоля);
		Если Поле = Неопределено Тогда
			ПолеИтога = Схема.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = ИмяПоля;
			ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ИмяПоля);
		
		Индекс = Индекс + 1;
		ЗначениеПоследнего = Интервал.Значение;
		
	КонецЦикла;
	
	ИмяПоля = ИсходноеИмяПоля + Индекс;
	
	Поле = Схема.НаборыДанных.ДанныеПоНачислениямИДолгам.Поля.Найти(ИмяПоля);
	Если Поле = Неопределено Тогда
		Поле = Схема.НаборыДанных.ДанныеПоНачислениямИДолгам.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	КонецЕсли;
	
	Поле.Поле        = ИмяПоля;
	Поле.ПутьКДанным = ИмяПоля;
	Поле.Заголовок   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Свыше %1 месяцев'"), ЗначениеПоследнего);
	
	Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=2");
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
	
	Поле = Схема.ПоляИтога.Найти(ИмяПоля);
	Если Поле = Неопределено Тогда
		ПолеИтога = Схема.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ИмяПоля;
		ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ИмяПоля);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли