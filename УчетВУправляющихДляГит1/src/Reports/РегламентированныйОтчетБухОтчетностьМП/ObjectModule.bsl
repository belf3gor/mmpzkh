#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
	
	НастройкиОтчета = НастройкиРеглОтчета(ИмяФормы);
			
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, "1", "0"));
	
	ЗаполнитьРеглОтчет(ИмяФормы,
					   ПараметрыАвтоформирования,
					   КорректирующийОтчет,
					   РазделыОтчета,
					   ДанныеРеглОтчета,
					   НастройкиОтчета);
					   
	Если ДанныеРеглОтчета.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИмяРаздела = "БалансНКО";
		РазделыОтчета.Удалить("Баланс");
	Иначе
		ИмяРаздела = "Баланс";
		РазделыОтчета.Удалить("БалансНКО");
	КонецЕсли;							   				   
					   
	РазделыОтчета[ИмяРаздела].Данные.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
		
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ПараметрыАвтоформирования.ДатаНачала;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = ПараметрыАвтоформирования.ДатаОкончания;
			
	ДанныеРеглОтчета.Вставить("СтруктураВариантыЗаполнения", Новый Структура);
	СформироватьВариантыЗаполнения(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.СтруктураВариантыЗаполнения);								   
								   
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ТипАдреса = ТипАдресаПоУмолчанию(ИмяФормы,
															  ДанныеРеглОтчета.СтруктураРеквизитовФормы,
															  ДанныеРеглОтчета.ДатаПодписи);
															  
	Для Каждого РазделОтчета Из РазделыОтчета Цикл
								   
		ПоказатьПериод(ИмяФормы, РазделОтчета.Значение.Данные, ДанныеРеглОтчета.СтруктураРеквизитовФормы, РазделОтчета.Ключ);
		
		Если НЕ РазделОтчета.Ключ = "ДополнительныеФайлы" Тогда
			РазделОтчета.Значение.Данные.ДатаПодписиОтчета = ДанныеРеглОтчета.ДатаПодписи;
		КонецЕсли;	
					
		ЗаполнитьСведенияОбОрганизации(ИмяФормы,
								       РазделОтчета.Значение.Данные,
								       ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								       ДанныеРеглОтчета.ДатаПодписи);
		
	КонецЦикла;	
	
	ВидСдачиОтчетности = 1;
	
	УстановитьВидСдачиОтчетности(ИмяФормы, РазделыОтчета[ИмяРаздела].Данные, ВидСдачиОтчетности);
	
	ПоказатьКодЕдиницыИзмерения(ИмяФормы, РазделыОтчета[ИмяРаздела].Данные, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
									   
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы,
												 ДанныеРеглОтчета.СтруктураРеквизитовФормы,
												 ДанныеРеглОтчета.ДатаПодписи);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
													  
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", ДанныеРеглОтчета.СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Комментарий", "");
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("СтруктураВариантыЗаполнения", ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ГруппаОрганизаций", ДанныеРеглОтчета.СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыЗаписи.Вставить("ТипАдреса", ДанныеРеглОтчета.СтруктураРеквизитовФормы.ТипАдреса);
	ПараметрыЗаписи.Вставить("Адрес9Запятых", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	ПараметрыЗаписи.Вставить("АвторасчетПоказателей",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыЗаписи.Вставить("БалансНекоммерческойОрганизации",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	ПараметрыЗаписи.Вставить("ПроверятьСоотношенияПриПечатиИВыгрузки",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Истина);	
	ПараметрыЗаписи.Вставить("СохранятьРасшифровку", Истина);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("НастройкиСоставаПоказателейОтчета", НастройкиОтчета);
	ПараметрыЗаписи.Вставить("СтруктураМногострочныхЧастей", Новый Структура);
	ПараметрыЗаписи.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	ПараметрыЗаписи.Вставить("ОтчетностьВРосстат", Документы.РегламентированныйОтчет.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("НастройкиФормыВыбораПечати", Неопределено);
	ПараметрыЗаписи.Вставить("ИмяФайлаПояснительнойЗаписки", "");
	ПараметрыЗаписи.Вставить("ИмяФайлаАудиторскогоЗаключения", "");
	ПараметрыЗаписи.Вставить("ИмяФайлаЗаявленияРевизионногоСоюза", "");
	ПараметрыЗаписи.Вставить("СпособСозданияОрганизации",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	ПараметрыЗаписи.Вставить("ДатаСозданияОрганизации",
		РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")));
	ПараметрыЗаписи.Вставить("ДатаАктуальностиДанных", Неопределено);
	ПараметрыЗаписи.Вставить("ВиднаПанельПроверкиАктуальностиДанных", Ложь);
	ПараметрыЗаписи.Вставить("ПроверкаАктуализацииДанныхПредупреждение", "");
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
			 				
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
		
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("БалансНКО", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Баланс", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("ОДДС", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("ОИК", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("ОПУ", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("ОЦИС", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("ДополнительныеФайлы",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
			
	Возврат РазделыОтчета;
	
КонецФункции

Процедура ПоказатьКодЕдиницыИзмерения(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы) Экспорт

	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		Если СтруктураДанныхТитульный.Области.Найти("КодЕИ") = Неопределено
		 ИЛИ СтруктураДанныхТитульный.Области.Найти("НазвЕИ") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
				
			СтруктураДанныхТитульный.Области.КодЕИ.Значение = "383";
			СтруктураДанныхТитульный.Области.НазвЕИ.Значение = "в рублях";
			
		ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
				
			СтруктураДанныхТитульный.Области.КодЕИ.Значение = "384";
			СтруктураДанныхТитульный.Области.НазвЕИ.Значение = "в тыс. рублей";
			
		ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
				
			СтруктураДанныхТитульный.Области.КодЕИ.Значение = "385";
			СтруктураДанныхТитульный.Области.НазвЕИ.Значение = "в млн. рублей";
			
		Иначе
			
			СтруктураДанныхТитульный.Области.КодЕИ.Значение = "";
			СтруктураДанныхТитульный.Области.НазвЕИ.Значение = "";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		Если СтруктураДанныхТитульный.Свойство("КодЕИ") = Неопределено
		 ИЛИ СтруктураДанныхТитульный.Свойство("НазвЕИ") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
				
			СтруктураДанныхТитульный.КодЕИ = "383";
			СтруктураДанныхТитульный.НазвЕИ = "в рублях";
			
		ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
				
			СтруктураДанныхТитульный.КодЕИ = "384";
			СтруктураДанныхТитульный.НазвЕИ = "в тыс. рублей";
			
		ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
				
			СтруктураДанныхТитульный.КодЕИ = "385";
			СтруктураДанныхТитульный.НазвЕИ = "в млн. рублей";
			
		Иначе
			
			СтруктураДанныхТитульный.КодЕИ = "";
			СтруктураДанныхТитульный.НазвЕИ = "";
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидСдачиОтчетности(ИмяФормы, СтруктураДанныхТитульный, ВидСдачиОтчетности) Экспорт
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		Если ВидСдачиОтчетности = 1 Тогда 
			
			СтруктураДанныхТитульный.Области.ВидОтчетности.Значение = "Обычная";
			
		ИначеЕсли ВидСдачиОтчетности = 2 Тогда
			
			СтруктураДанныхТитульный.Области.ВидОтчетности.Значение = "Промежуточная при ликвидации/реорганизации";
			
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			
			СтруктураДанныхТитульный.Области.ВидОтчетности.Значение = "Ликвидационная";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		Если ВидСдачиОтчетности = 1 Тогда 
			
			СтруктураДанныхТитульный.ВидОтчетности = "Обычная";
			
		ИначеЕсли ВидСдачиОтчетности = 2 Тогда
			
			СтруктураДанныхТитульный.ВидОтчетности = "Промежуточная при ликвидации/реорганизации";
			
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			
			СтруктураДанныхТитульный.ВидОтчетности = "Ликвидационная";
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция НастройкиРеглОтчета(ИмяФормы) Экспорт
	
	ШаблонНастроек = Новый ДеревоЗначений;
	ШаблонНастроек.Колонки.Добавить("Наименование",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	ШаблонНастроек.Колонки.Добавить("Идентификатор",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));	
	ШаблонНастроек.Колонки.Добавить("Отключаемость", Новый ОписаниеТипов("Булево"));	
	ШаблонНастроек.Колонки.Добавить("ОбластиЗатенения", Новый ОписаниеТипов("ТаблицаЗначений"));
	ШаблонНастроек.Колонки.Добавить("ВключатьВОтчет",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой)));
			
	НастройкиОтчета = Новый Структура;
	НастройкиОтчета.Вставить("ОДДС", ШаблонНастроек.Скопировать());
	НастройкиОтчета.Вставить("ОИК", ШаблонНастроек.Скопировать());
				
	Возврат НастройкиОтчета;
	
КонецФункции

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 ДанныеРеглОтчета,
							 НастройкиОтчета)
		
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
			
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
		
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ДанныеРеглОтчета.Вставить("НастройкиСоставаПоказателейОтчета");
	
	ИнициализироватьНастройкиСоставаПоказателейОтчетов(ИмяФормы,
													   ДанныеРеглОтчета.НастройкиСоставаПоказателейОтчета,
													   НастройкиОтчета);
			
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
	
	ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище
			= ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	               		
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",            	ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета", 	ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", Новый УникальныйИдентификатор());
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ЭтоБалансНКО",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	ПараметрыОтчета.Вставить("ЗаполнятьБаланс", Истина);
	ПараметрыОтчета.Вставить("ЗаполнятьОФР",
		?(ДанныеРеглОтчета.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации, Ложь, Истина));
	ПараметрыОтчета.Вставить("ЗаполнятьОИК",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОДДС",   Ложь);
		
	Контейнер = Новый Структура;
	Контейнер.Вставить("Баланс",	РазделыОтчета.Баланс.Данные);
	Контейнер.Вставить("БалансНКО", РазделыОтчета.БалансНКО.Данные);
	Контейнер.Вставить("ОДДС",      РазделыОтчета.ОДДС.Данные);
	Контейнер.Вставить("ОИК",       РазделыОтчета.ОИК.Данные);
	Контейнер.Вставить("ОПУ",       РазделыОтчета.ОПУ.Данные);
	Контейнер.Вставить("ОЦИС",      РазделыОтчета.ОЦИС.Данные);
				
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
		
	Иначе
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета,
																	Контейнер);
																	
		Расчет(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета.СтруктураРеквизитовФормы);															
																	
		СтруктураДанных = ПолучитьИзВременногоХранилища(
			ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
		
		Если НЕ ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
				
			Возврат;
			
		КонецЕсли;
				
		ТаблицаРасшифровки = Неопределено;
		
		Если СтруктураДанных.Свойство("ТаблицаРасшифровки", ТаблицаРасшифровки)
		   И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		   
			ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки
				= ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, Новый УникальныйИдентификатор());
						
		КонецЕсли;
																					
	КонецЕсли;
			
КонецПроцедуры

Процедура Расчет(ИмяФормы, РазделыОтчета, СтруктураРеквизитовФормы)
	
	ФорматОкругленияЧисла = Новый Структура;
	ФорматОкругленияЧисла.Вставить("Разрядность", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ФорматОкругленияЧисла.Вставить("Класс", СтруктураРеквизитовФормы.ДелительПредставления);
	
	// БАЛАНС
	//
		
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		Баланс = РазделыОтчета.БалансНКО.Данные;
	Иначе
		Баланс = РазделыОтчета.Баланс.Данные;
	КонецЕсли;
	
	Баланс.П000010000603 = Баланс.П000010000103
	+ Баланс.П000010000203
	+ Баланс.П000010000303
	+ Баланс.П000010000403
	+ Баланс.П000010000503;
	
	Баланс.П000010000604 = Баланс.П000010000104
	+ Баланс.П000010000204
	+ Баланс.П000010000304
	+ Баланс.П000010000404
	+ Баланс.П000010000504;
	
	Баланс.П000010000605 = Баланс.П000010000105
	+ Баланс.П000010000205
	+ Баланс.П000010000305
	+ Баланс.П000010000405
	+ Баланс.П000010000505;
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		
		Баланс.П000010001303 = Баланс.П000010007103
		+ Баланс.П000010007203
		+ Баланс.П000010000803
		+ Баланс.П000010000903
		+ Баланс.П000010001003
		+ Баланс.П000010001103
		+ Баланс.П000010001203;
		
	Иначе
		
		Баланс.П000010001303 = Баланс.П000010000703
		+ Баланс.П000010000803
		+ Баланс.П000010000903
		+ Баланс.П000010001003
		+ Баланс.П000010001103
		+ Баланс.П000010001203;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		
		Баланс.П000010001304 = Баланс.П000010007104
		+ Баланс.П000010007204
		+ Баланс.П000010000804
		+ Баланс.П000010000904
		+ Баланс.П000010001004
		+ Баланс.П000010001104
		+ Баланс.П000010001204;
		
	Иначе
		
		Баланс.П000010001304 = Баланс.П000010000704
		+ Баланс.П000010000804
		+ Баланс.П000010000904
		+ Баланс.П000010001004
		+ Баланс.П000010001104
		+ Баланс.П000010001204;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		
		Баланс.П000010001305 = Баланс.П000010007105
		+ Баланс.П000010007205
		+ Баланс.П000010000805
		+ Баланс.П000010000905
		+ Баланс.П000010001005
		+ Баланс.П000010001105
		+ Баланс.П000010001205;
		
	Иначе
		
		Баланс.П000010001305 = Баланс.П000010000705
		+ Баланс.П000010000805
		+ Баланс.П000010000905
		+ Баланс.П000010001005
		+ Баланс.П000010001105
		+ Баланс.П000010001205;
		
	КонецЕсли;
	
	// ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
	//
	
	ОПУ = РазделыОтчета.ОПУ.Данные;
	
	ОПУ.П000020000703 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000103)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000203)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000303)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000403)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000503)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000603);
		
	ОПУ.П000020000704 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000104)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000204)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000304)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000404)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000504)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОПУ.П000020000604);
	
	// ОТЧЕТ ОБ ИЗМЕНЕНИЯХ КАПИТАЛА
	//
		
	ОИК = РазделыОтчета.ОИК.Данные;
	
	ОИК.П000100310008 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100310003)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100310004)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100310005)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100310006)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100310007);
	
	ОИК.П000100321108 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321107);
	
	ОИК.П000100321208 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321207);
	
	ОИК.П000100321308 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321305)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321307);
	
	ОИК.П000100321408 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321403)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321404)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321405);
	
	ОИК.П000100321608 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321603)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321604)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321605)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321606)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321607);
	
	ОИК.П000100321003 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321403)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321503)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321603);
	  	
	ОИК.П000100321004 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321404)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321504)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321604);
	
	ОИК.П000100321005 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321305)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321405)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321505)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321605);
	
	ОИК.П000100321006 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321606);
	
	ОИК.П000100321007 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321107)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321207)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321307)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321507)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321607);
	
	ОИК.П000100321008 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321108)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321208)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321308)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321408)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100321608);
	
	ОИК.П000100322108 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322107);
	
	ОИК.П000100322208 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322207);
	
	ОИК.П000100322308 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322305)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322307);
	
	ОИК.П000100322408 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322403)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322404)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322405)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322407);
	
	ОИК.П000100322508 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322503)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322504)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322505)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322507);
	
	ОИК.П000100322608 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322603)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322604)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322605)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322606)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322607);
	
	ОИК.П000100322708 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322707);
	
	ОИК.П000100322008 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322003)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322004)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322005)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322006)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322007);
	
	ОИК.П000100324007 =
	  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100324006);
	
	ОИК.П000100322003 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322403)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322503)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322603);
	
	ОИК.П000100322004 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322404)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322504)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322604);
	
	ОИК.П000100322005 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322305)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322405)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322505)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322605);
	
	ОИК.П000100322006 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322606);
	
	ОИК.П000100322007 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322107)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322207)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322307)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322407)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322507)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322607)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322707);
	
	ОИК.П000100322008 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322108)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322208)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322308)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322408)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322508)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322608)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100322708);
	
	ОИК.П000100320008 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100320003)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100320004)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100320005)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100320006)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100320007);
	
	ОИК.П000100331108 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331107);
	
	ОИК.П000100331208 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331207);
	
	ОИК.П000100331308 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331305)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331307);
	
	ОИК.П000100331408 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331403)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331404)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331405);
	
	ОИК.П000100331608 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331603)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331604)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331605)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331606)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331607);
	
	ОИК.П000100331003 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331403)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331503)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331603);
	
	ОИК.П000100331004 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331404)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331504)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331604);
	
	ОИК.П000100331005 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331305)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331405)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331505)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331605);
	
	ОИК.П000100331006 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331606);
	
	ОИК.П000100331007 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331107)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331207)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331307)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331507)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331607);
	
	ОИК.П000100331008 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331108)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331208)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331308)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331408)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100331608);
	
	ОИК.П000100332108 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332107);
	
	ОИК.П000100332208 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332207);
	
	ОИК.П000100332308 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332305)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332307);
	
	ОИК.П000100332408 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332403)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332404)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332405)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332407);
	
	ОИК.П000100332508 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332503)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332504)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332505)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332507);
	
	ОИК.П000100332608 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332603)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332604)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332605)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332606)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332607);
	
	ОИК.П000100332708 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332707);
	
	ОИК.П000100332003 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332403)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332503)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332603);
	
	ОИК.П000100332004 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332404)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332504)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332604);
	
	ОИК.П000100332005 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332305)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332405)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332505)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332605);
	
	ОИК.П000100332006 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332606);
	
	ОИК.П000100332007 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332107)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332207)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332307)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332407)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332507)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332607)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332707);
	
	ОИК.П000100332008 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332108)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332208)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332308)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332408)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332508)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332608)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100332708);
	
	ОИК.П000100334007 =
	  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100334006);
	
	ОИК.П000100330008 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100330003)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100330004)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100330005)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100330006)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100330007);
	
	ОИК.П000100340105 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340106)
	- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340103)
	- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340104);
	
	ОИК.П000100341106 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341103)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341104)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341105);
	
	ОИК.П000100342106 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342103)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342104)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342105);
	
	ОИК.П000100350103 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340103)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341103)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342103);
	
	ОИК.П000100350104 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340104)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341104)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342104);
	
	ОИК.П000100350105 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340105)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341105)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342105);
	
	ОИК.П000100350106 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100350103)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100350104)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100350105);
	
	ОИК.П000100340206 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340203)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340204)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340205);
	
	ОИК.П000100341206 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341203)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341204)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341205);
	
	ОИК.П000100342206 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342203)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342204)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342205);
	
	ОИК.П000100350203 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340203)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341203)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342203);
	
	ОИК.П000100350204 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340204)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341204)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342204);
	
	ОИК.П000100350205 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341205)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342205);
	
	ОИК.П000100350206 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100350203)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100350204)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100350205);
	
	ОИК.П000100341003 = ОИК.П000100341103 + ОИК.П000100341203;
	
	ОИК.П000100341004 = ОИК.П000100341104 + ОИК.П000100341204;
	
	ОИК.П000100341005 = ОИК.П000100341105 + ОИК.П000100341205;
	
	ОИК.П000100342003 = ОИК.П000100342103 + ОИК.П000100342203;
	
	ОИК.П000100342004 = ОИК.П000100342104 + ОИК.П000100342204;
	
	ОИК.П000100342005 = ОИК.П000100342105 + ОИК.П000100342205;
	
	ОИК.П000100340005 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340006)
	- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340003)
	- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340004);
	
	ОИК.П000100341006 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341003)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341004)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341005);
	
	ОИК.П000100342006 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342003)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342004)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342005);
	
	ОИК.П000100350003 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340003)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341003)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342003);
	
	ОИК.П000100350004 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340004)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341004)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342004);
	
	ОИК.П000100350005 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100340005)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100341005)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100342005);
	
	ОИК.П000100350006 =
	  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100350003)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100350004)
	+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла, ОИК.П000100350005);
	
	// ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ
	//
	
	ОДДС = РазделыОтчета.ОДДС.Данные;
	
	ОДДС.П000100411003 =
	  ОДДС.П000100411103
	+ ОДДС.П000100411203
	+ ОДДС.П000100411303
	+ ОДДС.П000100411903;
	
	ОДДС.П000100411004 =
	  ОДДС.П000100411104
	+ ОДДС.П000100411204
	+ ОДДС.П000100411304
	+ ОДДС.П000100411904;
	
	ОДДС.П000100412003 =
	  ОДДС.П000100412103
	+ ОДДС.П000100412203
	+ ОДДС.П000100412303
	+ ОДДС.П000100412403
	+ ОДДС.П000100412903;
	
	ОДДС.П000100412004 =
	  ОДДС.П000100412104
	+ ОДДС.П000100412204
	+ ОДДС.П000100412304
	+ ОДДС.П000100412404
	+ ОДДС.П000100412904;
	
	ОДДС.П000100410003 = ОДДС.П000100411003	+ ОДДС.П000100412003;
	
	ОДДС.П000100410004 = ОДДС.П000100411004	+ ОДДС.П000100412004;
	
	ОДДС.П000100421003 =
	  ОДДС.П000100421103
	+ ОДДС.П000100421203
	+ ОДДС.П000100421303
	+ ОДДС.П000100421403
	+ ОДДС.П000100421903;
	
	ОДДС.П000100421004 =
	  ОДДС.П000100421104
	+ ОДДС.П000100421204
	+ ОДДС.П000100421304
	+ ОДДС.П000100421404
	+ ОДДС.П000100421904;
	
	ОДДС.П000100422003 =
	  ОДДС.П000100422103
	+ ОДДС.П000100422203
	+ ОДДС.П000100422303
	+ ОДДС.П000100422403
	+ ОДДС.П000100422903;
	
	ОДДС.П000100422004 =
	  ОДДС.П000100422104
	+ ОДДС.П000100422204
	+ ОДДС.П000100422304
	+ ОДДС.П000100422404
	+ ОДДС.П000100422904;
	
	ОДДС.П000100420003 = ОДДС.П000100421003	+ ОДДС.П000100422003;
	
	ОДДС.П000100420004 = ОДДС.П000100421004	+ ОДДС.П000100422004;
	
	ОДДС.П000100431003 = 
	  ОДДС.П000100431103
	+ ОДДС.П000100431203
	+ ОДДС.П000100431303
	+ ОДДС.П000100431403
	+ ОДДС.П000100431903;
	
	ОДДС.П000100431004 = 
	  ОДДС.П000100431104
	+ ОДДС.П000100431204
	+ ОДДС.П000100431304
	+ ОДДС.П000100431404
	+ ОДДС.П000100431904;
	
	ОДДС.П000100432003 = 
	  ОДДС.П000100432103
	+ ОДДС.П000100432203
	+ ОДДС.П000100432303
	+ ОДДС.П000100432903;
	
	ОДДС.П000100432004 = 
	  ОДДС.П000100432104
	+ ОДДС.П000100432204
	+ ОДДС.П000100432304
	+ ОДДС.П000100432904;
	
	ОДДС.П000100430003 = ОДДС.П000100431003	+ ОДДС.П000100432003;
	
	ОДДС.П000100430004 = ОДДС.П000100431004	+ ОДДС.П000100432004;
	
	ОДДС.П000100440003 = 
	  ОДДС.П000100410003
	+ ОДДС.П000100420003
	+ ОДДС.П000100430003;
	
	ОДДС.П000100440004 = 
	  ОДДС.П000100410004
	+ ОДДС.П000100420004
	+ ОДДС.П000100430004;
	
	ОДДС.П000100450003 = 
	  ОДДС.П000100440003
	+ ОДДС.П000100445003
	+ ОДДС.П000100449003;
	
	ОДДС.П000100450004 = 
	  ОДДС.П000100440004
	+ ОДДС.П000100445004
	+ ОДДС.П000100449004;
	
	// ОТЧЕТ О ЦЕЛЕВОМ ИСПОЛЬЗОВАНИИ СРЕДСТВ
	//
	
	ОЦИС = РазделыОтчета.ОЦИС.Данные;
		
	ОЦИС.П000100640003 = ОЦИС.П000100610003 + (ОЦИС.П000100620103
	+ ОЦИС.П000100624003 + ОЦИС.П000100625003) + (ОЦИС.П000100631003
	+ ОЦИС.П000100632003 + ОЦИС.П000100633003 + ОЦИС.П000100635003);
	
	ОЦИС.П000100640004 = ОЦИС.П000100610004 + (ОЦИС.П000100620104
	+ ОЦИС.П000100624004 + ОЦИС.П000100625004) + (ОЦИС.П000100631004
	+ ОЦИС.П000100632004 + ОЦИС.П000100633004 + ОЦИС.П000100635004);
		  	
КонецПроцедуры

Процедура ИнициализироватьНастройкиСоставаПоказателейОтчетов(ИмяФормы,
															 НастройкиСоставаПоказателейОтчета,
															 НастройкиОтчета) Экспорт
	
	НастройкиСоставаПоказателейОтчета = Новый Структура;
	
	ТекстXML = ЭтотОбъект.ПолучитьМакет(ИмяМакетаНастройкиСоставаОтчетов(ИмяФормы)).ПолучитьТекст();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	ПостроительDOM = Новый ПостроительDOM;
	
	КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		Если Узел.ИмяУзла = "НастройкиРазделов" Тогда
			Для Каждого УзелРаздела Из Узел.ДочерниеУзлы Цикл
				Если УзелРаздела.ИмяУзла <> "Раздел" Тогда
					Продолжить;
				КонецЕсли;
				
				НаименованиеРаздела = ПолучитьАтрибутКакСтроку(ИмяФормы, УзелРаздела, "Идентификатор");
				
				НастройкаСоставаОтчета(ИмяФормы, УзелРаздела, НастройкиОтчета);
				НастройкиСоставаПоказателейОтчета.Вставить(НаименованиеРаздела, "Настройки" + НаименованиеРаздела);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьАтрибутКакСтроку(ИмяФормы, Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = "";
	Иначе
		Значение = Атрибут.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Процедура НастройкаСоставаОтчета(ИмяФормы, УзелРаздела, НастройкиОтчета)
	
	НаименованиеРаздела = ПолучитьАтрибутКакСтроку(ИмяФормы, УзелРаздела, "Идентификатор");
		
	Для Каждого Узел Из УзелРаздела.ДочерниеУзлы Цикл
		ИмяУзла = Узел.ИмяУзла;
		Если ИмяУзла = "Показатель" Тогда
			РазобратьНастройкуПоказателя(ИмяФормы, Узел, НастройкиОтчета[НаименованиеРаздела]);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура РазобратьНастройкуПоказателя(ИмяФормы, УзелПоказателя, Настройка)
	
	НастройкаПоказателя = Настройка.Строки.Добавить();
	
	Если НастройкаПоказателя.ОбластиЗатенения.Колонки.Количество() = 0 Тогда
	
		НастройкаПоказателя.ОбластиЗатенения.Колонки.Добавить("ГоризонтальнаяЧасть",
			Новый ОписаниеТипов("Строка"));
		НастройкаПоказателя.ОбластиЗатенения.Колонки.Добавить("Лево",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
		НастройкаПоказателя.ОбластиЗатенения.Колонки.Добавить("ПолнаяОбласть",
			Новый ОписаниеТипов("Строка"));	
		НастройкаПоказателя.ОбластиЗатенения.Колонки.Добавить("Право",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));	
			
	КонецЕсли;		
	          	
	НастройкаПоказателя.Идентификатор  = ПолучитьАтрибутКакСтроку(ИмяФормы, УзелПоказателя, "Идентификатор");
	НастройкаПоказателя.Наименование   = ПолучитьАтрибутКакСтроку(ИмяФормы, УзелПоказателя, "Наименование");
	НастройкаПоказателя.Отключаемость  = ПолучитьАтрибутКакБулево(ИмяФормы, УзелПоказателя, "Отключаемость");
	НастройкаПоказателя.ВключатьВОтчет = Истина;
			
	Для Каждого Узел Из УзелПоказателя.ДочерниеУзлы Цикл
		ИмяУзла = Узел.ИмяУзла;
		Если ИмяУзла = "Показатель" Тогда
			РазобратьНастройкуПоказателя(ИмяФормы, Узел, НастройкаПоказателя);
		ИначеЕсли ИмяУзла = "ОбластьЗатенения" Тогда
			ОбластьЗатенения = НастройкаПоказателя.ОбластиЗатенения.Добавить();
			ОбластьЗатенения.ПолнаяОбласть       = ПолучитьАтрибутКакСтроку(ИмяФормы, Узел, "ПолнаяОбласть");
			ОбластьЗатенения.ГоризонтальнаяЧасть = ПолучитьАтрибутКакСтроку(ИмяФормы, Узел, "ГоризонтальнаяЧасть");
			ОбластьЗатенения.Лево  = ПолучитьАтрибутКакЧисло(ИмяФормы, Узел, "Лево");
			ОбластьЗатенения.Право = ПолучитьАтрибутКакЧисло(ИмяФормы, Узел, "Право");
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьАтрибутКакБулево(ИмяФормы, Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = Истина;
	ИначеЕсли ВРег(Атрибут.Значение) = "FALSE" ИЛИ ВРег(Атрибут.Значение) = "ЛОЖЬ" Тогда
		Значение = Ложь;
	Иначе
		Значение = Истина;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьАтрибутКакЧисло(ИмяФормы, Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = 0;
	Иначе
		Значение = Число(Атрибут.Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв4") Тогда
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/05/2015");
	КонецЕсли;
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Бухгалтерская отчетность упрощенная");
	СтруктураРеквизитовФормы.Вставить("СпособСозданияОрганизации", "ВновьСозданная");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят",  "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят2", "");
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ЭтоБалансНекоммерческойОрганизации", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация", Истина);
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДелительПредставления", 1000);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения", 0);
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("ТипАдреса");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетная");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПозапрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериодаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("ЗаголовкиОтчетов");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("АдресВФормате9Запятых");
	СтруктураРеквизитовФормы.Вставить("СтрокаФорматаПредставления");
	СтруктураРеквизитовФормы.Вставить("ИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("СоответствиеПоказателейМногострочныхЧастейИхОписанию");
	СтруктураРеквизитовФормы.Вставить("мАдресДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ФайлПояснительнойЗаписки");
	СтруктураРеквизитовФормы.Вставить("ФайлАудиторскогоЗаключения");
	СтруктураРеквизитовФормы.Вставить("ФайлЗаявленияСоюзаСельхозпроизводителей");
	СтруктураРеквизитовФормы.Вставить("ДатаСозданияОрганизации");
	СтруктураРеквизитовФормы.Вставить("ДатаАктуальностиДанных");
	
	// Параметр используется для открытия формы длительной операции
	// при автоматическом заполнении отчета при создании.
	//   Значения:
	//     Неопределено - задание не запускалось.
	//     Структура    - параметры запуска и результат.
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	
КонецПроцедуры

Функция ТипАдресаПоУмолчанию(ИмяФормы, СтруктураРеквизитовФормы, ДатаПодписи) Экспорт
	
	Результат = "АдрФакт";
	
	Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
		Адреса.АдрФакт = "";
	Иначе
		Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
		Адреса.АдрЮР = "";
	Иначе
		Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
		Адреса.АдрПочт = "";
	Иначе
		Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(Адреса.АдрФакт) Тогда
		Результат = "АдрФакт";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрЮР) Тогда
		Результат = "АдрЮР";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрПочт) Тогда
		Результат = "АдрПочт";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
			
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Данные.Количество() = 0
		   И НЕ Раздел.Ключ = "ДополнительныеФайлы" Тогда
			
			ТабличныйДокумент.Очистить();
			
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Раздел.Ключ));
		
			Раздел.Значение.Данные = СобратьДанные(ИмяФормы, ТабличныйДокумент);
			
			Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
				
				Если ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("Структура") Тогда
					
					Для Каждого ДопСтрока Из Раздел.Значение.ДанныеДопСтрок Цикл
						
						ДопСтрока.Значение.Добавить();
						
					КонецЦикла;
										
				Иначе
					
					Раздел.Значение.ДанныеДопСтрок.Добавить();
					
				КонецЕсли;	
				
			КонецЕсли;	
							
		КонецЕсли;
	
	КонецЦикла;
			
КонецПроцедуры

Функция СобратьДанные(ИмяФормы, ТабличныйДокумент)

	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		Если НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ТекущаяОбласть.СодержитЗначение = Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	// Пример.
	Приемник.Баланс.ОргКодОКВЭД = Источник.Баланс.ОргКодОКВЭД;
					 	 	
КонецПроцедуры

Процедура СформироватьВариантыЗаполнения(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураВариантыЗаполнения,
										 ТаблицаСоставПоказателей = Неопределено) Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(ИмяМакетаСоставаПоказателей(ИмяФормы));
			
	Для Каждого Отчет Из МакетСоставаПоказателей.Области Цикл
		
		Если Отчет.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСтраницы = Отчет.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
			
		Для Ном = Отчет.Верх По Отчет.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;			
					
			КодПоказателяПоФорме 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита	     = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
								   	МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный  = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если ИмяСтраницы = "ОЦИС" И чВариантЗаполнения = 3 Тогда
				чВариантЗаполнения = 0;
			КонецЕсли;
			
			Если ТипЗнч(ТаблицаСоставПоказателей) = Тип("ТаблицаЗначений") Тогда
				
				НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
				НоваяСтрока.ИмяПоляТаблДокумента   	 = ИмяСтраницы;
				НоваяСтрока.КодПоказателяПоСоставу 	 = КодПоказателя;
				НоваяСтрока.КодПоказателяПоФорме   	 = КодПоказателяПоФорме;
				НоваяСтрока.ПризнМногострочности   	 = ПризнМногострочность;
				НоваяСтрока.ТипДанныхПоказателя 	 = ТипДанныхРеквизита;
				
			КонецЕсли;	
						
			Если чВариантЗаполнения <> 0 Тогда
				
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ?(НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			СтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяМакетаСоставаПоказателей(ИмяФормы)
			
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв4") Тогда
		Возврат "СоставПоказателей2015Кв4";
	КонецЕсли;	
	
КонецФункции

Функция ИмяМакетаНастройкиСоставаОтчетов(ИмяФормы)
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв4") Тогда
		Возврат "НастройкиСоставаОтчетов2015Кв4";
	КонецЕсли;	
	
КонецФункции

Процедура ПоказатьПериод(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы, НаимТекущегоРаздела) Экспорт
	
	Если НаимТекущегоРаздела = "Баланс"
	 ИЛИ НаимТекущегоРаздела = "БалансНКО" Тогда
		
		// Период в заголовке отчета.
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
		  <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,
				"ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
				"ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 1 Тогда
				СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
					"ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтруктураРеквизитовФормы.СтрПериодОтчета = "Январь - "
					+ Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
		КонецЕсли;
						
		ДатаКонцаПрошлогоГода 	  = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная 				= "На "
			+ Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода 	= "На "
			+ Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На "
			+ Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			          			
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
			// Период в заголовке баланса.
			СтруктураДанныхТитульный.Области.ДатаБаланса.Значение
				= "на "	+ Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
			
			СтруктураДанныхТитульный.Области.ДатаОтчетная.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
			СтруктураДанныхТитульный.Области.ДатаКонцаПрошлогоГода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
			СтруктураДанныхТитульный.Области.ДатаКонцаПозапрошлогоГода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
			
			// Период в списке кодов в форме баланса
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаГод.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаМесяц.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаЧисло.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
				
			// Период в заголовке баланса.
			СтруктураДанныхТитульный.ДатаБаланса
				= "на "	+ Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
			
			СтруктураДанныхТитульный.ДатаОтчетная
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
			СтруктураДанныхТитульный.ДатаКонцаПрошлогоГода
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
			СтруктураДанныхТитульный.ДатаКонцаПозапрошлогоГода
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
			
			// Период в списке кодов в форме баланса
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаГод
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаМесяц
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаЧисло
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
    	КонецЕсли;	
			    		
	ИначеЕсли НаимТекущегоРаздела = "ОПУ" Тогда
		
		//ОТЧЕТ О ФИНАНСОВЫХ РЕЗУЛЬТАТАХ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
		  <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - "
					  + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
			   = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		//Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			// Период в заголовке.
			СтруктураДанныхТитульный.Области.ПериодОтчета.Значение = ПериодОтчета;
			
			// Период в списке кодов в форме отчета.
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаГод.Значение 
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаМесяц.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаЧисло.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
			СтруктураДанныхТитульный.Области.ДатаОтчетногоПериода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
			
			СтруктураДанныхТитульный.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
				
			// Период в заголовке.
			СтруктураДанныхТитульный.ПериодОтчета = ПериодОтчета;
			
			// Период в списке кодов в форме отчета.
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаГод
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаМесяц
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаЧисло
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
			СтруктураДанныхТитульный.ДатаОтчетногоПериода
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
			
			СтруктураДанныхТитульный.ДатаОтчетногоПериодаПрошлогоГода
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;	
			
		КонецЕсли;
		
	ИначеЕсли НаимТекущегоРаздела = "ОИК" Тогда
		
		//ОТЧЕТ ОБ ИЗМЕНЕНИЯХ КАПИТАЛА
		ДатаКонцаПериодаОтчета 		= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		ДатаКонцаПрошлогоГода 		= Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода 	= Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
		  <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - "
					  + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
			   = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная
			= "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода
			= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода
			= "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
			// Период в заголовке.
			СтруктураДанныхТитульный.Области.ПериодОтчета.Значение = ПериодОтчета;
			
			// Период в списке кодов в форме отчета.
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаГод.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаМесяц.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаЧисло.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
			//Заголовки таблиц.
			СтруктураДанныхТитульный.Области.ДатаВеличиныКапиталаПозапрошлогоГода.Значение
				= "Величина капитала на " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураДанныхТитульный.Области.ДатаВеличиныКапиталаПрошлогоГода.Значение
				= "Величина капитала на " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураДанныхТитульный.Области.ДатаВеличиныКапиталаПериодаОтчета.Значение
				= "Величина капитала на " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
			
			СтруктураДанныхТитульный.Области.ПериодИзмененияКапиталаПрошлогоГода.Значение
				= "За " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
			СтруктураДанныхТитульный.Области.ПериодИзмененияКапиталаПериодаОтчета.Значение
				= "За " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'гггг'")+ " г.";
			
			СтруктураДанныхТитульный.Области.ДатаКорректировокПозапрошлогоГода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
			СтруктураДанныхТитульный.Области.ДатаКорректировокПрошлогоГода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
			СтруктураДанныхТитульный.Области.ПериодКорректировокПрошлогоГода.Значение
				= "Изменения капитала за " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
			
			СтруктураДанныхТитульный.Области.ДатаАктивовПозапрошлогоГода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
			СтруктураДанныхТитульный.Области.ДатаАктивовПрошлогоГода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
			СтруктураДанныхТитульный.Области.ДатаАктивовПериодаОтчета.Значение 
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
				
				// Период в заголовке.
			СтруктураДанныхТитульный.ПериодОтчета = ПериодОтчета;
			
			// Период в списке кодов в форме отчета.
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаГод
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаМесяц
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаЧисло
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
			//Заголовки таблиц.
			СтруктураДанныхТитульный.ДатаВеличиныКапиталаПозапрошлогоГода
				= "Величина капитала на " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураДанныхТитульный.ДатаВеличиныКапиталаПрошлогоГода
				= "Величина капитала на " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураДанныхТитульный.ДатаВеличиныКапиталаПериодаОтчета
				= "Величина капитала на " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
			
			СтруктураДанныхТитульный.ПериодИзмененияКапиталаПрошлогоГода
				= "За " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
			СтруктураДанныхТитульный.ПериодИзмененияКапиталаПериодаОтчета
				= "За " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'гггг'")+ " г.";
			
			СтруктураДанныхТитульный.ДатаКорректировокПозапрошлогоГода
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
			СтруктураДанныхТитульный.ДатаКорректировокПрошлогоГода
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
			СтруктураДанныхТитульный.ПериодКорректировокПрошлогоГода
				= "Изменения капитала за " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
			
			СтруктураДанныхТитульный.ДатаАктивовПозапрошлогоГода
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
			СтруктураДанныхТитульный.ДатаАктивовПрошлогоГода
				= СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
			СтруктураДанныхТитульный.ДатаАктивовПериодаОтчета
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
			
		КонецЕсли;	
		
	ИначеЕсли НаимТекущегоРаздела = "ОДДС" Тогда
		
		//ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
		  <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - "
					  + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
			   = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		//Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
			// Период в заголовке.
			СтруктураДанныхТитульный.Области.ПериодОтчета.Значение = ПериодОтчета;
			
			// Период в списке кодов в форме отчета.
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаГод.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаМесяц.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаЧисло.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
			СтруктураДанныхТитульный.Области.ДатаОтчетногоПериода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
			СтруктураДанныхТитульный.Области.ДатаОтчетногоПериода2.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
			
			СтруктураДанныхТитульный.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
			СтруктураДанныхТитульный.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
				
			// Период в заголовке.
			СтруктураДанныхТитульный.ПериодОтчета = ПериодОтчета;
			
			// Период в списке кодов в форме отчета.
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаГод
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаМесяц
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаЧисло
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
			СтруктураДанныхТитульный.ДатаОтчетногоПериода = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
			СтруктураДанныхТитульный.ДатаОтчетногоПериода2 = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
			
			СтруктураДанныхТитульный.ДатаОтчетногоПериодаПрошлогоГода
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
			СтруктураДанныхТитульный.ДатаОтчетногоПериодаПрошлогоГода2
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
			
		КонецЕсли;
				
	ИначеЕсли НаимТекущегоРаздела = "ОЦИС" Тогда
		
		//ОТЧЕТ О ЦЕЛЕВОМ ИСПОЛЬЗОВАНИИ ПОЛУЧЕННЫХ СРЕДСТВ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
		  <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - "
					  + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
			   = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		//Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
			// Период в заголовке.
			СтруктураДанныхТитульный.Области.ПериодОтчета.Значение = ПериодОтчета;
			
			// Период в списке кодов в форме отчета.
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаГод.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаМесяц.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.Области.ДатаКонцаПериодаОтчетаЧисло.Значение
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
			СтруктураДанныхТитульный.Области.ДатаОтчетногоПериода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
			
			СтруктураДанныхТитульный.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
				
			// Период в заголовке.
			СтруктураДанныхТитульный.ПериодОтчета = ПериодОтчета;
			
			// Период в списке кодов в форме отчета.
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаГод
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаМесяц
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
			СтруктураДанныхТитульный.ДатаКонцаПериодаОтчетаЧисло
				= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
			
			СтруктураДанныхТитульный.ДатаОтчетногоПериода = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
			
			СтруктураДанныхТитульный.ДатаОтчетногоПериодаПрошлогоГода
				= СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураДанныхТитульный,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 ВПрограммеИзмененаДатаПодписи = Ложь,
										 СведенияОбОрганизации = Неопределено) Экспорт
										 
	Если СтруктураРеквизитовФормы.Организация = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(
	 		"СправочникСсылка.Организации") Тогда
		Возврат
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в декларацию.
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "ОргПравФорм");
		Сведения.Добавить("", СтруктураРеквизитовФормы.ТипАдреса);
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	      	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ = "";
		НаимЮЛПол = "";
		ОКПО = "";
		ПолныйАдрЮР = "";
		ФормСобств = "";
		ОКОПФ = "";
		ОКФС = "";
		ОргПравФорм = "";
		ПолныйАдрес = "";
	КонецЕсли;
	
	ФИОРук = "";
	ФИОБух = "";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ПолныйАдрЮР", ПолныйАдрЮР);
		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм);
		ОргСведения.Свойство(СтруктураРеквизитовФормы.ТипАдреса, ПолныйАдрес);
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	
	КодОКВЭД = "";
	НаименованиеОКВЭД = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		РезультатПоискаКодаОКВЭД = СтруктураДанныхТитульный.Области.Найти("ОргКодОКВЭД");
		Если НЕ РезультатПоискаКодаОКВЭД = Неопределено Тогда
			КодОКВЭД = СтруктураДанныхТитульный.Области.ОргКодОКВЭД.Значение;
		КонецЕсли;	
		
		РезультатПоискаНаименованияОКВЭД = СтруктураДанныхТитульный.Области.Найти("ОргОтрасль");
		Если НЕ РезультатПоискаНаименованияОКВЭД = Неопределено Тогда
			НаименованиеОКВЭД = СтруктураДанныхТитульный.Области.ОргОтрасль.Значение;
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		Если СтруктураДанныхТитульный.Свойство("ОргКодОКВЭД", РезультатПоискаКодаОКВЭД) Тогда
			КодОКВЭД = СтруктураДанныхТитульный.ОргКодОКВЭД;
		КонецЕсли;	
		
		Если СтруктураДанныхТитульный.Свойство("ОргОтрасль", РезультатПоискаНаименованияОКВЭД) Тогда
			НаименованиеОКВЭД = СтруктураДанныхТитульный.ОргОтрасль;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если НЕ РезультатПоискаКодаОКВЭД = Неопределено
		 И (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
		 ИЛИ ВПрограммеИзмененаДатаПодписи
		 ИЛИ НЕ ЗначениеЗаполнено(КодОКВЭД)) Тогда
																						 
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 	 СтруктураРеквизитовФормы,
									?(ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент"),
								 		  	СтруктураДанныхТитульный.Области.ОргКодОКВЭД.Значение,
											       	   	   СтруктураДанныхТитульный.ОргКодОКВЭД));																	 
																		 
		
	КонецЕсли;
		
	Если НЕ РезультатПоискаНаименованияОКВЭД = Неопределено
		 И (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
		 ИЛИ ВПрограммеИзмененаДатаПодписи
		 ИЛИ НЕ ЗначениеЗаполнено(НаименованиеОКВЭД)) Тогда	
																												 
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 	 			СтруктураРеквизитовФормы,
											   ?(ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент"),
								 			  	  		СтруктураДанныхТитульный.Области.ОргОтрасль.Значение,
											  			   	  	 	   СтруктураДанныхТитульный.ОргОтрасль));
		
	КонецЕсли;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
			Если НЕ СтруктураДанныхТитульный.Области.Найти("ОргДиректор") = Неопределено Тогда
				СтруктураДанныхТитульный.Области.ОргДиректор.Значение = ФИОРук;
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			Если СтруктураДанныхТитульный.Свойство("ОргДиректор") Тогда
				СтруктураДанныхТитульный.ОргДиректор = ФИОРук;
			КонецЕсли
		
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		Если НЕ СтруктураДанныхТитульный.Области.Найти("ОргИНН") = Неопределено Тогда
			СтруктураДанныхТитульный.Области.ОргИНН.Значение = ИННЮЛ;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхТитульный.Области.Найти("ОргНазв") = Неопределено
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.Области.ОргНазв.Значение))) Тогда
			СтруктураДанныхТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхТитульный.Области.Найти("ОргКодОКПО") = Неопределено
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.Области.ОргКодОКПО.Значение))) Тогда
			
			Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
						СтруктураРеквизитовФормы.Организация) Тогда
				СтруктураДанныхТитульный.Области.ОргКодОКПО.Значение = "";
			Иначе
				СтруктураДанныхТитульный.Области.ОргКодОКПО.Значение = ОКПО;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтруктураДанныхТитульный.Области.Найти("ОргФорма") = Неопределено
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.Области.ОргФорма.Значение))) Тогда	
			СтруктураДанныхТитульный.Области.ОргФорма.Значение = ОргПравФорм;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхТитульный.Области.Найти("ОргКодОКОПФ") = Неопределено
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.Области.ОргКодОКОПФ.Значение))) Тогда
			СтруктураДанныхТитульный.Области.ОргКодОКОПФ.Значение = ОКОПФ;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхТитульный.Области.Найти("ОргКодОКФС") = Неопределено
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.Области.ОргКодОКФС.Значение))) Тогда	
			СтруктураДанныхТитульный.Области.ОргКодОКФС.Значение = ОКФС;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхТитульный.Области.Найти("ОргФормаСобств") = Неопределено
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.Области.ОргФормаСобств.Значение))) Тогда	
			СтруктураДанныхТитульный.Области.ОргФормаСобств.Значение = ФормСобств;
		КонецЕсли;
		
		Если (НЕ СтруктураДанныхТитульный.Области.Найти("ОргПочтАдрес") = Неопределено)
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.Области.ОргПочтАдрес.Значение))) Тогда	
			
			СтруктураДанныхТитульный.Области.ОргПочтАдрес.Значение
				= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес);
			СтруктураРеквизитовФормы.мАдресДляВыгрузки = ПолныйАдрес;
			
		КонецЕсли;
		
		Если НЕ СтруктураДанныхТитульный.Области.Найти("ОргДиректор") = Неопределено
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.Области.ОргДиректор.Значение))) Тогда	
			СтруктураДанныхТитульный.Области.ОргДиректор.Значение = ФИОРук;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		Если СтруктураДанныхТитульный.Свойство("ОргИНН") Тогда
			СтруктураДанныхТитульный.ОргИНН = ИННЮЛ;
		КонецЕсли;
		
		Если СтруктураДанныхТитульный.Свойство("ОргНазв")
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.ОргНазв))) Тогда
			СтруктураДанныхТитульный.ОргНазв = НаимЮЛПол;
		КонецЕсли;
		
		Если СтруктураДанныхТитульный.Свойство("ОргКодОКПО")
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.ОргКодОКПО))) Тогда
			
			Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
						СтруктураРеквизитовФормы.Организация) Тогда
				СтруктураДанныхТитульный.ОргКодОКПО = "";
			Иначе
				СтруктураДанныхТитульный.ОргКодОКПО = ОКПО;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураДанныхТитульный.Свойство("ОргФорма")
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.ОргФорма))) Тогда	
			СтруктураДанныхТитульный.ОргФорма = ОргПравФорм;
		КонецЕсли;
		
		Если СтруктураДанныхТитульный.Свойство("ОргКодОКОПФ")
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.ОргКодОКОПФ))) Тогда
			СтруктураДанныхТитульный.ОргКодОКОПФ = ОКОПФ;
		КонецЕсли;
		
		Если СтруктураДанныхТитульный.Свойство("ОргКодОКФС")
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.ОргКодОКФС))) Тогда	
			СтруктураДанныхТитульный.ОргКодОКФС = ОКФС;
		КонецЕсли;
		
		Если СтруктураДанныхТитульный.Свойство("ОргФормаСобств")
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.ОргФормаСобств))) Тогда	
			СтруктураДанныхТитульный.ОргФормаСобств = ФормСобств;
		КонецЕсли;
		
		Если СтруктураДанныхТитульный.Свойство("ОргПочтАдрес")
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.ОргПочтАдрес))) Тогда	
			
			СтруктураДанныхТитульный.ОргПочтАдрес
				= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес);
			СтруктураРеквизитовФормы.мАдресДляВыгрузки = ПолныйАдрес;
			
		КонецЕсли;
		
		Если СтруктураДанныхТитульный.Свойство("ОргДиректор")
			И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			ИЛИ (ПустаяСтрока(СтруктураДанныхТитульный.ОргДиректор))) Тогда	
			СтруктураДанныхТитульный.ОргДиректор = ФИОРук;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(СведенияОбОрганизации) = Тип("Структура") Тогда
		
		СведенияОбОрганизации.Вставить("ОргДиректор", ФИОРук);
		СведенияОбОрганизации.Вставить("ОргИНН", ИННЮЛ);
		СведенияОбОрганизации.Вставить("ОргНазв", НаимЮЛПол);
		СведенияОбОрганизации.Вставить("ОргКодОКПО", ОКПО);
		СведенияОбОрганизации.Вставить("ОргФорма", ОргПравФорм);
		СведенияОбОрганизации.Вставить("ОргКодОКОПФ", ОКОПФ);
		СведенияОбОрганизации.Вставить("ОргКодОКФС", ОКФС);
		СведенияОбОрганизации.Вставить("ОргФормаСобств", ФормСобств);
		СведенияОбОрганизации.Вставить("ОргПочтАдрес",
			РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес));
			
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			СведенияОбОрганизации.Вставить("ОргКодОКВЭД", СтруктураДанныхТитульный.Области.ОргКодОКВЭД.Значение);
			СведенияОбОрганизации.Вставить("ОргОтрасль", СтруктураДанныхТитульный.Области.ОргОтрасль.Значение);
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			СведенияОбОрганизации.Вставить("ОргКодОКВЭД", СтруктураДанныхТитульный.ОргКодОКВЭД);
			СведенияОбОрганизации.Вставить("ОргОтрасль", СтруктураДанныхТитульный.ОргОтрасль);
		КонецЕсли;		
		
	КонецЕсли;						 
			  		              	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы, СтруктураРеквизитовФормы, ДатаПодписи) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("АвторасчетПоказателей",
		Новый ОписаниеТипов("Булево"));	
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	                           			
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтрокаУровня1.ИмяСтраницы = "БалансНКО";
	Иначе
		СтрокаУровня1.ИмяСтраницы = "Баланс";
	КонецЕсли;
	СтрокаУровня1.Представление         = "Бухгалтерский баланс";
	СтрокаУровня1.ОриентацияСтраницы    = "Портрет";
	СтрокаУровня1.ВыводНаПечать         = 1;
	СтрокаУровня1.ПоказатьСтраницу      = 1;
	СтрокаУровня1.ВыгрузитьСтраницу     = 2;
	СтрокаУровня1.АвторасчетПоказателей = Истина;

	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОПУ";
	СтрокаУровня1.Представление            = НазваниеОПУ(ИмяФормы, ДатаПодписи);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ?(СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации, 0, 1);
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОИК";
	СтрокаУровня1.Представление            = "Отчет об изменениях" + Символы.ПС + "капитала";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 0;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОДДС";
	СтрокаУровня1.Представление            = "Отчет о движении" + Символы.ПС + "денежных средств";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 0;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОЦИС";
	СтрокаУровня1.Представление            = НазваниеОЦИС(ИмяФормы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ?(СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации, 1, 0);
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДополнительныеФайлы";
	СтрокаУровня1.Представление            = "Дополнительные файлы";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = Ложь;
	СтрокаУровня1.ПоказатьСтраницу         = 0;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Ложь;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция НазваниеОПУ(ИмяФормы, ДатаПодписи) Экспорт
	
	Если ДатаПодписи >= '2013-01-01' Тогда
		Возврат "Отчет о финансовых" + Символы.ПС + "результатах";
	Иначе
		Возврат "Отчет о прибылях" + Символы.ПС + "и убытках";
	КонецЕсли;
	
КонецФункции

Функция НазваниеОЦИС(ИмяФормы) Экспорт
	
	Возврат "Отчет о целевом" + Символы.ПС + "использовании средств";
	
КонецФункции

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
			
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
		   И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
						ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет),  ПараметрыЗаписи.НаименованиеОтчета));
						
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
		
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
		
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
				
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.
															   ПредставлениеВидаДокумента(
															   ДокументРегламентированныйОтчет.Вид);
																   
	Если НЕ ПараметрыЗаписи.Организация = Справочники.Организации.ПустаяСсылка() Тогда
		ДокументРегламентированныйОтчет.КодНалоговогоОргана = ПараметрыЗаписи.Организация.КодНалоговогоОргана;
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура;
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из ПараметрыЗаписи.РазделыОтчета Цикл
		Если НЕ Раздел.Значение.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.Ключ, Раздел.Значение.Данные);
		КонецЕсли;
	КонецЦикла;
			
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);
		
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ПараметрыЗаписи.СтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ПараметрыЗаписи.ВерсияФормы);
	СписокСохранения.Вставить("СохранятьРасшифровку", ПараметрыЗаписи.СохранятьРасшифровку);
	
	Если ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки);

		Если ПараметрыЗаписи.СохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ГруппаОрганизаций", ПараметрыЗаписи.ГруппаОрганизаций);
	СписокСохранения.Вставить("ТипАдреса", ПараметрыЗаписи.ТипАдреса);
	СписокСохранения.Вставить("Адрес9Запятых", ПараметрыЗаписи.Адрес9Запятых);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("АвторасчетПоказателей", ПараметрыЗаписи.АвторасчетПоказателей);
	СписокСохранения.Вставить("БалансНекоммерческойОрганизации", ПараметрыЗаписи.БалансНекоммерческойОрганизации);
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки",
		ПараметрыЗаписи.ПроверятьСоотношенияПриПечатиИВыгрузки);
		
	СохрСтруктураМногострочныхЧастей = Новый Структура;
	
	Для Каждого МногострочнаяЧасть Из ПараметрыЗаписи.СтруктураМногострочныхЧастей Цикл
		
		НовыйЭлементСтруктуры = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из МногострочнаяЧасть.Значение Цикл
			
			Если ЭлементСтруктуры.Ключ = "ИмяПоляТабличногоДокумента" Тогда
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, "ПолеТабличногоДокумента" + ЭлементСтруктуры.Значение);
				
			ИначеЕсли ЭлементСтруктуры.Ключ = "Состав" Тогда	
				
				ТаблЗнач = Новый ТаблицаЗначений;
				
				Колонки = ЭлементСтруктуры.Значение[0];
				
				Для Каждого Колонка Из Колонки Цикл
					
					ТаблЗнач.Колонки.Добавить(Колонка.Ключ);
					
				КонецЦикла;
				
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					
					СтрТаблЗнач = ТаблЗнач.Добавить();
					
					Для Каждого ЗначениеКолонки Из Элемент Цикл
						
						СтрТаблЗнач[ЗначениеКолонки.Ключ] = ЗначениеКолонки.Значение;
						
					КонецЦикла;
					
				КонецЦикла;
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ТаблЗнач);
				
			Иначе 
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СохрСтруктураМногострочныхЧастей.Вставить(МногострочнаяЧасть.Ключ, НовыйЭлементСтруктуры);
		
	КонецЦикла;
			
	СписокСохранения.Вставить("СтруктураМногострочныхЧастей", СохрСтруктураМногострочныхЧастей);
	СписокСохранения.Вставить("НастройкиСоставаПоказателейОтчета", ПараметрыЗаписи.НастройкиСоставаПоказателейОтчета);
	СписокСохранения.Вставить("ВидСдачиОтчетности", ПараметрыЗаписи.ВидСдачиОтчетности);
	СписокСохранения.Вставить("ОтчетностьВРосстат", ПараметрыЗаписи.ОтчетностьВРосстат);
	СписокСохранения.Вставить("НастройкиФормыВыбораПечати", ПараметрыЗаписи.НастройкиФормыВыбораПечати);
	
	СписокДополнительныхФайлов = Новый Структура;
	СписокДополнительныхФайлов.Вставить("ИмяФайлаПояснительнойЗаписки",
		ПараметрыЗаписи.ИмяФайлаПояснительнойЗаписки);
	СписокДополнительныхФайлов.Вставить("ИмяФайлаАудиторскогоЗаключения",
		ПараметрыЗаписи.ИмяФайлаАудиторскогоЗаключения);
	СписокДополнительныхФайлов.Вставить("ИмяФайлаЗаявленияРевизионногоСоюза",
		ПараметрыЗаписи.ИмяФайлаЗаявленияРевизионногоСоюза);
	
	СписокСохранения.Вставить("СписокДополнительныхФайлов", СписокДополнительныхФайлов);
	СписокСохранения.Вставить("СпособСозданияОрганизации", ПараметрыЗаписи.СпособСозданияОрганизации);
	СписокСохранения.Вставить("ДатаСозданияОрганизации", ПараметрыЗаписи.ДатаСозданияОрганизации);
	СписокСохранения.Вставить("ДатаАктуальностиДанных", ПараметрыЗаписи.ДатаАктуальностиДанных);
	СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение", "");
	
	Если ПараметрыЗаписи.ВиднаПанельПроверкиАктуальностиДанных Тогда
		
		СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение",
			ПараметрыЗаписи.ПроверкаАктуализацииДанныхПредупреждение);
		
	КонецЕсли;
			 		
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(
												 ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
						
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы          = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	РеглОтчетВыгружаетсяВБанк = Ложь;
	
	Если Параметры.Свойство("РеглОтчетВыгружаетсяВБанк")
	   И НЕ Параметры.РеглОтчетВыгружаетсяВБанк = Неопределено Тогда
		РеглОтчетВыгружаетсяВБанк = Параметры.РеглОтчетВыгружаетсяВБанк;
	КонецЕсли;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета(
		ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета, РеглОтчетВыгружаетсяВБанк);
	
	ОтчетыЗаполненыКорректно = ПроверитьВозможностьВыгрузки(ИмяФормы, СтруктураРеквизитовФормы,
		ДанныеОтчета, ПараметрыВыгрузки, РезультатВыгрузки);
		
	Если НЕ ОтчетыЗаполненыКорректно Тогда
		ДанныеОтчета = Неопределено;
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	КешСхемВыгрузки = Неопределено;
	Параметры.Свойство("КешСхемВыгрузки", КешСхемВыгрузки);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы, СтруктураРеквизитовФормы, КешСхемВыгрузки);
	
	ЗаполнитьДанными(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки, РезультатВыгрузки,
		ДанныеОтчета, СтруктураРеквизитовФормы);
	
	Если НЕ ПроверитьДанные(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Тогда
		ДанныеОтчета = Неопределено;
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "БухОтчетностьМП");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	ДанныеОтчета = Неопределено;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СохрСтруктура.Свойство("БалансНекоммерческойОрганизации") Тогда
		СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации
			= СохрСтруктура.БалансНекоммерческойОрганизации;
	КонецЕсли;
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
				
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		ДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	// Виртуальные показатели "ОЦИС".
	ОЦИС = ДанныеОтчета.ПолеТабличногоДокументаОЦИС;
	ОЦИС.Вставить("П100100620003", ОЦИС.П000100620103 + ОЦИС.П000100624003 + ОЦИС.П000100625003);
	ОЦИС.Вставить("П100100620004", ОЦИС.П000100620104 + ОЦИС.П000100624004 + ОЦИС.П000100625004);
	
	ОбработатьПоказателиПередВыгрузкой(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	АдресДляВыгрузки = "";
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		
		Если СохрСтруктура.Свойство("ОкружениеСохранения") Тогда
			ОргПочтАдрес = ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес;
		Иначе
			ОргПочтАдрес = ПоказателиОтчета.ПолеТабличногоДокументаБалансНКО.ОргПочтАдрес;
		КонецЕсли;
		
	Иначе
		
		ОргПочтАдрес = ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ОргПочтАдрес) Тогда
		
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
			  
	ИначеЕсли (НЕ СохрСтруктура.Свойство("Адрес9Запятых", АдресДляВыгрузки)
		     И НЕ СохрСтруктура.Свойство("АдресВФормате9Запятых", АдресДляВыгрузки))
		  ИЛИ НЕ ЗначениеЗаполнено(АдресДляВыгрузки) Тогда	  
		
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация,
			СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи,
			"АдрФакт, АдрЮР, АдрПочт");
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			АдрФакт = "";
		Иначе
			АдрФакт = Адреса.АдрФакт;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			АдрЮР = "";
		Иначе
			АдрЮР = Адреса.АдрЮР;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			АдрПочт = "";
		Иначе
			АдрПочт = Адреса.АдрПочт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдрФакт) Тогда
			АдресДляВыгрузки = АдрФакт;
		ИначеЕсли ЗначениеЗаполнено(АдрЮР) Тогда
			АдресДляВыгрузки = АдрЮР;
		Иначе
			АдресДляВыгрузки = АдрПочт;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОтчета.Вставить("АдресДляВыгрузки", АдресДляВыгрузки);
	
	ДанныеОтчета.Вставить("СтруктураМногострочныхЧастей", СохрСтруктура.СтруктураМногострочныхЧастей);
						
КонецПроцедуры

Процедура ОбработатьПоказателиПередВыгрузкой(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Перем ЗначениеПоказателя, Индекс, ИндексСтр;
	
	ИменаПоказателейСоЗнакомПлюс = ПолучитьСписокВычитаемыхПоказателей(ИмяФормы);
	
	Разделы = Новый Массив;
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		Если СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().Свойство("ОкружениеСохранения") Тогда
			Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаБаланс);
		Иначе
			Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаБалансНКО);
		КонецЕсли;
	Иначе
		Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаБаланс);
	КонецЕсли;
	
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОПУ);
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОИК);
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОДДС);
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОЦИС);
	
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		
		Для Каждого ПоказателиТекущегоРаздела Из Разделы Цикл
			
			Если ПоказателиТекущегоРаздела.Свойство(Пок + "_1") Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				
				Пока ПоказателиТекущегоРаздела.Свойство(Пок + "_" + ИндексСтр, ЗначениеПоказателя) Цикл
					
					Если ЗначениеПоказателя < 0 Тогда
						ПоказателиТекущегоРаздела.Вставить(Пок + "_" + ИндексСтр, -ЗначениеПоказателя);
					КонецЕсли;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
			ИначеЕсли ПоказателиТекущегоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
				ПоказателиТекущегоРаздела.Вставить(Пок, -ЗначениеПоказателя);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокВычитаемыхПоказателей(ИмяФормы) Экспорт
	
	ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	
	// Отчет о прибылях и убытках.
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000203");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000204");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000303");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000304");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000504");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000603");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000604");
	
	// Отчет об изменениях капитала.
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100310004");

	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100320004");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100330004");
	
	// Отчет о движении денежных средств.
	СписокВычитаемыхСтрок = "4120, 4121, 4122, 4123, 4124, 4129"
	                      + ", 4220, 4221, 4222, 4223, 4224, 4229"
	                      + ", 4320, 4321, 4322, 4323, 4329";
	МассивВычитаемыхСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
	КонецЦикла;
	СписокВычитаемыхДопСтрок = "4120, 4220, 4320";
	МассивВычитаемыхДопСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяДопСтрока ИЗ МассивВычитаемыхДопСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "04");
	КонецЦикла;
	
	// Отчет о целевом использовании средств.
	СписокВычитаемыхСтрок = "6310, 6320, 6330, 6350";
	МассивВычитаемыхСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
	КонецЦикла;
	
	Возврат ИменаПоказателейСоЗнакомПлюс;
	
КонецФункции

Функция ПараметрыВыгрузкиОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								ДанныеОтчета,
								РеглОтчетВыгружаетсяВБанк = Ложь) Экспорт
	
	Перем ВидСдачиОтчетности;
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		Если СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().Свойство("ОкружениеСохранения") Тогда
			Титульный = ДанныеОтчета.ПолеТабличногоДокументаБаланс;
		Иначе
			Титульный = ДанныеОтчета.ПолеТабличногоДокументаБалансНКО;
		КонецЕсли;
	Иначе
		Титульный = ДанныеОтчета.ПолеТабличногоДокументаБаланс;
	КонецЕсли;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	
	Если РеглОтчетВыгружаетсяВБанк Тогда
		
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(1,  "01");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(2,  "02");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3,  "03");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(4,  "04");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(5,  "05");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6,  "06");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(7,  "07");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(8,  "08");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9,  "09");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(10, "10");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(11, "11");
		
	КонецЕсли;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12, "34");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПериодОтчетности = "";
	
	Если СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности) Тогда
		Если ВидСдачиОтчетности = 2 Тогда
			// Промежуточная отчетность при ликвидации/реорганизации.
			ПериодОтчетности = "94";
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			// Ликвидационная отчетность.
			ПериодОтчетности = "90";
		Иначе
			// Обычная отчетность.
			ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[
				Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
				
			Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2019-01-01'
			   И НачалоГода(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала)
			  <> НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала) Тогда
				// 94 – первый отчетный год, отличный по продолжительности от календарного.
				ПериодОтчетности = "94";
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[
			Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
			
	КонецЕсли;
	
	Если СписокСохранения.Свойство("БалансНекоммерческойОрганизации")
	   И СписокСохранения.БалансНекоммерческойОрганизации = Истина Тогда
		ПараметрыВыгрузки.Вставить("ЭтоБалансНекоммерческойОрганизации", Истина);
	Иначе
		ПараметрыВыгрузки.Вставить("ЭтоБалансНекоммерческойОрганизации", Ложь);
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("Период", ПериодОтчетности);
	
	ПараметрыВыгрузки.Вставить("ДатаУтвОтч", "");
	Если Титульный.Свойство("ДатаУтвОтчетности") Тогда
		Если ЗначениеЗаполнено(Титульный.ДатаУтвОтчетности) Тогда
			ПараметрыВыгрузки.Вставить("ДатаУтвОтч", Формат(Титульный.ДатаУтвОтчетности, "ДФ=дд.ММ.гггг"));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ОтчетГод",
		Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ВидДок",            Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("НаимОрг",           СокрЛП(Титульный.ОргНазв));
	ПараметрыВыгрузки.Вставить("ИННОрг",            СокрЛП(Титульный.ОргИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",            СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНС",
		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОргана));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ОКПО",  СокрЛП(Титульный.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОКВЭД", СокрЛП(Титульный.ОргКодОКВЭД));
	ПараметрыВыгрузки.Вставить("ОКОПФ", СокрЛП(Титульный.ОргКодОКОПФ));
	ПараметрыВыгрузки.Вставить("ОКФС",  СокрЛП(Титульный.ОргКодОКФС));
	
	ПараметрКодЕИ = "";
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения
		= Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		ПараметрКодЕИ = "383";
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения
		= Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		ПараметрКодЕИ = "384";
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения
		= Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ПараметрКодЕИ = "385";
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ОКЕИ", ПараметрКодЕИ);
	
	ПараметрыВыгрузки.Вставить("ФорматВывода", "ЧДЦ=0; ЧН=0; ЧС="
		+ СоответствиеЕдиницыИзмеренияСдвигу[СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения]);
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета, ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ТелОрг",
		РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация,
			СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи,
			"ТелОрганизации").ТелОрганизации);
	
	ПараметрыВыгрузки.Вставить("АдрМН", СокрЛП(Титульный.ОргПочтАдрес));
	
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ДанныеОтчета.АдресДляВыгрузки);
	ПараметрыВыгрузки.Вставить("АдрИндекс",     СокрЛП(СтруктураАдреса.Индекс));
	ПараметрыВыгрузки.Вставить("АдрКодРегион",
		РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	ПараметрыВыгрузки.Вставить("АдрРегион",     СокрЛП(СтруктураАдреса.Регион));
	ПараметрыВыгрузки.Вставить("АдрРайон",      СокрЛП(СтруктураАдреса.Район));
	ПараметрыВыгрузки.Вставить("АдрГород",      СокрЛП(СтруктураАдреса.Город));
	ПараметрыВыгрузки.Вставить("АдрНаселПункт", СокрЛП(СтруктураАдреса.НаселенныйПункт));
	ПараметрыВыгрузки.Вставить("АдрУлица",      СокрЛП(СтруктураАдреса.Улица));
	ПараметрыВыгрузки.Вставить("АдрДом",        СокрЛП(СтруктураАдреса.Дом));
	ПараметрыВыгрузки.Вставить("АдрКорпус",     СокрЛП(СтруктураАдреса.Корпус));
	ПараметрыВыгрузки.Вставить("АдрКварт",      СокрЛП(СтруктураАдреса.Квартира));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_BOUPR");
	
	Если РеглОтчетВыгружаетсяВБанк Тогда
		ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "BANK_BOUPR");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки, РеглОтчетВыгружаетсяВБанк));
	
	// Условия включения узлов и элементов в выгрузку.
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	ВключитьОФР = Истина;
	
	СписокОКОПФ = "71,74,76,77,78,80,81,82,83,84,85,86,88,89,93,94,96,97
		|20101,20102,20103,20104,20105,20106,20107,20108,20109,20110,20111,20112,20113,20114,20115,20120,20121,
		|20200,20201,20202,20210,20211,20217,20601,20603,20604,20605,20606,20607,20608,20611,20612,20613,20614,
		|20617,20618,20619,20620,20701,20716,20900,20902,20904,20905,20906,20908,21001,21002,21003,21100,21200";
	
	Если ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ОКОПФ, СписокОКОПФ) Тогда
		ВключитьОФР = РазделВключенВОтчет(ИмяФормы, "ОПУ", ДеревоНастройкиСтраниц);
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ВключитьОФР",  ВключитьОФР);
	
	ПараметрыВыгрузки.Вставить("ВключитьОИК",
		РазделВключенВОтчет(ИмяФормы, "ОИК", ДеревоНастройкиСтраниц));
	ПараметрыВыгрузки.Вставить("ВключитьОДДС",
		РазделВключенВОтчет(ИмяФормы, "ОДДС", ДеревоНастройкиСтраниц));
	ПараметрыВыгрузки.Вставить("ВключитьОЦИС",
		РазделВключенВОтчет(ИмяФормы, "ОЦИС", ДеревоНастройкиСтраниц));
		
	НастройкиОтчета = НастройкиРеглОтчета(ИмяФормы);
	НастройкиСоставаПоказателейОтчета = Неопределено;
	
	ИнициализироватьНастройкиСоставаПоказателейОтчетов(
		ИмяФормы, НастройкиСоставаПоказателейОтчета, НастройкиОтчета);
	
	СохраненныеНастройкиСоставаПоказателейОтчета = Неопределено;
	Если СписокСохранения.Свойство("НастройкиСоставаПоказателейОтчета",
								   СохраненныеНастройкиСоставаПоказателейОтчета) Тогда
		Для Каждого РазделОтчета Из СохраненныеНастройкиСоставаПоказателейОтчета Цикл
			ИмяРаздела = РазделОтчета.Ключ;
			НастройкиРаздела = РазделОтчета.Значение;
			Если НастройкиСоставаПоказателейОтчета.Свойство(ИмяРаздела) Тогда
				СписокНастроек = "";
				Если НастройкиРаздела.Колонки.Найти("ВключатьВОтчет") <> Неопределено Тогда
					СписокНастроек = СписокНастроек + ?(ПустаяСтрока(СписокНастроек), "", ", ") + "ВключатьВОтчет";
				КонецЕсли;
				Если НЕ ПустаяСтрока(СписокНастроек) Тогда
					ВосстановитьСохраненныеНастройкиСоставаПоказателей(ИмяФормы, ИмяРаздела, НастройкиРаздела, СписокНастроек);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого РазделОтчета Из СохраненныеНастройкиСоставаПоказателейОтчета Цикл
		НастройкиРаздела = РазделОтчета.Значение;
		ЗаполнитьПараметрыНастройкамиПоказателей(ИмяФормы, ПараметрыВыгрузки, НастройкиРаздела);
	КонецЦикла;
	
	ИмяФайлаПЗ  = "";
	ИмяФайлаАЗ  = "";
	ИмяФайлаЗРС = "";
	
	Если РазделВключенВОтчет(ИмяФормы, "ДополнительныеФайлы", ДеревоНастройкиСтраниц) Тогда
		
		ПояснительнаяЗаписка = ИсходноеИмяДополнительногоФайла(
			ИмяФормы, "Пояснительная записка", СтруктураРеквизитовФормы);
			
		Если ПустаяСтрока(ПояснительнаяЗаписка)
		   И СписокСохранения.Свойство("СписокДополнительныхФайлов") Тогда
			ПояснительнаяЗаписка = СокрЛП(СписокСохранения.СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки);
		КонецЕсли;
		ИмяФайлаПЗ = ?(ПустаяСтрока(ПояснительнаяЗаписка),
			"", ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHPZ", ПараметрыВыгрузки, ПояснительнаяЗаписка));
		
		АудиторскоеЗаключение = ИсходноеИмяДополнительногоФайла(
			ИмяФормы, "Аудиторское заключение", СтруктураРеквизитовФормы);
			
		Если ПустаяСтрока(АудиторскоеЗаключение)
		   И СписокСохранения.Свойство("СписокДополнительныхФайлов") Тогда
			АудиторскоеЗаключение = СписокСохранения.СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
		КонецЕсли;
		ИмяФайлаАЗ = ?(ПустаяСтрока(АудиторскоеЗаключение),
			"", ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHAZ", ПараметрыВыгрузки, АудиторскоеЗаключение));
		
		ЗаявлениеРевизионногоСоюза = ИсходноеИмяДополнительногоФайла(
			ИмяФормы, "Заявление союза сельхозпроизводителей", СтруктураРеквизитовФормы);
			
		Если ПустаяСтрока(ЗаявлениеРевизионногоСоюза)
		   И СписокСохранения.Свойство("СписокДополнительныхФайлов") Тогда
			ЗаявлениеРевизионногоСоюза = СписокСохранения.СписокДополнительныхФайлов.ИмяФайлаЗаявленияРевизионногоСоюза;
		КонецЕсли;
		ИмяФайлаЗРС = ?(ПустаяСтрока(ЗаявлениеРевизионногоСоюза),
			"", ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHZSHP", ПараметрыВыгрузки, ЗаявлениеРевизионногоСоюза));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаПояснительнойЗаписки",       ИмяФайлаПЗ);
	ПараметрыВыгрузки.Вставить("ИмяФайлаАудиторскогоЗаключения",     ИмяФайлаАЗ);
	ПараметрыВыгрузки.Вставить("ИмяФайлаЗаявленияРевизионногоСоюза", ИмяФайлаЗРС);
	
	ПараметрыВыгрузки.Вставить("СтруктураМногострочныхЧастей", ДанныеОтчета.СтруктураМногострочныхЧастей);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки, РеглОтчетВыгружаетсяВБанк)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(РеглОтчетВыгружаетсяВБанк, "",
					  ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
					  					  ПараметрыВыгрузки.КодИФНСПосредника,
										  ПараметрыВыгрузки.КодИФНС)
					  + "_" + ПараметрыВыгрузки.КодИФНС + "_")
			+ ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
					  СокрЛП(ПараметрыВыгрузки.ИННОрг),
					  СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки;
	
КонецФункции

Функция ЗначениеСодержитсяВСписке(ИмяФормы, ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция РазделВключенВОтчет(ИмяФормы, ИмяРаздела, Знач СписокРазделов)
			
	Результат = Ложь;
			
	НайденнаяСтраницаОтчета = СписокРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы");
	
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу <> 0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВосстановитьСохраненныеНастройкиСоставаПоказателей(ИмяФормы,
															 ИмяРаздела,
															 НастройкиРаздела,
															 СписокНастроек) Экспорт
	
	Для Каждого СтрокаНастройки Из НастройкиРаздела.Строки Цикл
		Идентификатор = СтрокаНастройки.Идентификатор;
		СтрокаНастроекОтчета = НастройкиРаздела.Строки.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
		Если СтрокаНастроекОтчета.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНастроекОтчета[0], СтрокаНастройки, СписокНастроек);
		КонецЕсли;
		ВосстановитьСохраненныеНастройкиСоставаПоказателей(ИмяФормы, ИмяРаздела, СтрокаНастройки, СписокНастроек);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыНастройкамиПоказателей(ИмяФормы, ПараметрыВыгрузки, Настройки)
	
	Для Каждого СтрокаНастройки Из Настройки.Строки Цикл
		
		Если СтрокаНастройки.Отключаемость Тогда
			ПараметрыВыгрузки.Вставить("Вкл" + СтрокаНастройки.Идентификатор,
				?(СтрокаНастройки.ВключатьВОтчет = 2, 1, СтрокаНастройки.ВключатьВОтчет));
		КонецЕсли;
		
		ЗаполнитьПараметрыНастройкамиПоказателей(ИмяФормы, ПараметрыВыгрузки, СтрокаНастройки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИсходноеИмяДополнительногоФайла(ИмяФормы, ВидДополнительногоФайла, СтруктураРеквизитовФормы)
	
	ИсходноеИмя = "";
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если НЕ ПустаяСтрока(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		ИсходноеИмя = ЗаписьРегистраСведений.ИмяФайла;
	КонецЕсли;
	
	Возврат ИсходноеИмя;
	
КонецФункции

Функция ПолучитьИмяДополнительногоФайла(ИмяФормы, ПрефиксФайла, ПараметрыВыгрузки, ИсходноеИмяФайла)
	
	ИмяФайла = ПрефиксФайла
	         + "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			 		   ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
	         + "_" + ПараметрыВыгрузки.КодИФНС
	         + "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
			 		   СокрЛП(ПараметрыВыгрузки.ИННОрг),
					   СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	         + "_" + ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки
	         + "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	         + "_" + Строка(Новый УникальныйИдентификатор)
	         + ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИсходноеИмяФайла).Расширение;
	
	Возврат ИмяФайла;
	
КонецФункции

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета, ПараметрыВыгрузки)
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		Если СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().Свойство("ОкружениеСохранения") Тогда
			Титульный = ДанныеОтчета.ПолеТабличногоДокументаБаланс;
		Иначе
			Титульный = ДанныеОтчета.ПолеТабличногоДокументаБалансНКО;
		КонецЕсли;
	Иначе
		Титульный = ДанныеОтчета.ПолеТабличногоДокументаБаланс;
	КонецЕсли;
	
	КодНО = СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОргана);
	КПП = СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КПП);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.мСохраненныйДок.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Руководитель организации.
		ПараметрыВыгрузки.Вставить("ПрПодп", "1");
		
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
		ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОРук.Фамилия));
		ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОРук.Имя));
		ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОРук.Отчество));
		
		ПараметрыВыгрузки.Вставить("ПодпНаимДок", "");
	Иначе
		// Уполномоченный представитель.
		ПараметрыВыгрузки.Вставить("ПрПодп", "2");
		
		ФИОПредставителя = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
		ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОПредставителя.Фамилия));
		ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОПредставителя.Имя));
		ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОПредставителя.Отчество));
		
		ПараметрыВыгрузки.Вставить("ПодпНаимДок", СведенияОПредставителе.ДокументПредставителя);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
									 СтруктураРеквизитовФормы,
							 		 ДанныеОтчета,
									 ПараметрыВыгрузки,
									 РезультатВыгрузки) Экспорт
							
	СтатусПроверки = Истина;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2019-01-01' Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Выгрузка и отправка упрощенной бухгалтерской отчетности в редакции приказа Минфина России от 19.04.2019 № 61н будет реализована в будущих версиях отчета",
			"Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
		
		Возврат СтатусПроверки;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Выгрузка за указанный период не предусмотрена по формату представления в электронной форме!",
			"Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!",
			"Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!",
			"Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На указано полное наименование организации!", "Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не задан ИНН организации!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			ПараметрыВыгрузки.ИННОрг, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Задан некорректный ИНН юридического лица!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "1" Тогда
		// Руководитель организации.
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		// Уполномоченный представитель.
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не удалось определить фамилию уполномоченного представителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не удалось определить имя уполномоченного представителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не задано наименование документа, удостоверяющего полномочия представителя!", "Баланс", "");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ОКПО)
		  И (СтрДлина(ПараметрыВыгрузки.ОКПО) < 8
		ИЛИ СтрДлина(ПараметрыВыгрузки.ОКПО) > 10
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКПО)) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе задан некорректный код по ОКПО!", "Баланс", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не указано значение кода вида деятельности по ОКВЭД!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!",
			"Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКОПФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не задан код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли (СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 2
		    И СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 5)
		  ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКОПФ) Тогда	
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Задан некорректный код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не задан код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКФС) <> 2
		  ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Задан некорректный код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не задан код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКЕИ) <> 3
		  ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Задан некорректный код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрКодРегион) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Требуется указание как минимум кода региона в адресе!", "Баланс", "ОргПочтАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Коды строк в бухгалтерском балансе.
	ПроверитьКодСтрокиБаланс(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 ДанныеОтчета,
							 РезультатВыгрузки,
							 СтатусПроверки,
							 "П0000100001",
							 "Материальные внеоборотные активы");
	ПроверитьКодСтрокиБаланс(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 ДанныеОтчета,
							 РезультатВыгрузки,
							 СтатусПроверки,
							 "П0000100002",
							 "Нематериальные, финансовые и другие внеоборотные активы");
	ПроверитьКодСтрокиБаланс(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 ДанныеОтчета,
							 РезультатВыгрузки,
							 СтатусПроверки,
							 "П0000100005",
							 "Финансовые и другие оборотные активы");
	ПроверитьКодСтрокиБаланс(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 ДанныеОтчета,
							 РезультатВыгрузки,
							 СтатусПроверки,
							 "П0000100007",
							 "Капитал и резервы");
	ПроверитьКодСтрокиБаланс(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 ДанныеОтчета,
							 РезультатВыгрузки,
							 СтатусПроверки,
							 "П0000100071",
							 "Целевые средства");
	ПроверитьКодСтрокиБаланс(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 ДанныеОтчета,
							 РезультатВыгрузки,
							 СтатусПроверки,
							 "П0000100072",
							 "Фонд недвижимого и особо ценного движимого имущества и иные целевые фонды");
	ПроверитьКодСтрокиБаланс(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 ДанныеОтчета,
							 РезультатВыгрузки,
							 СтатусПроверки,
							 "П0000100009",
							 "Другие долгосрочные обязательства");
	ПроверитьКодСтрокиБаланс(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 ДанныеОтчета,
							 РезультатВыгрузки,
							 СтатусПроверки,
							 "П0000100012",
							 "Другие краткосрочные обязательства");
	
	// Коды строк в отчете о финансовых результатах.
	Если ПараметрыВыгрузки.ВключитьОФР Тогда
		ПроверитьКодСтрокиОПУ(ИмяФормы,
							  ДанныеОтчета,
							  РезультатВыгрузки,
							  СтатусПроверки,
							  "П0000200002",
							  "Расходы по обычной деятельности");
		ПроверитьКодСтрокиОПУ(ИмяФормы,
							  ДанныеОтчета,
							  РезультатВыгрузки,
							  СтатусПроверки,
							  "П0000200004",
							  "Прочие доходы");
		ПроверитьКодСтрокиОПУ(ИмяФормы,
							  ДанныеОтчета,
							  РезультатВыгрузки,
							  СтатусПроверки,
							  "П0000200006",
							  "Налоги на прибыль (доходы)");
	КонецЕсли;
	
	// Коды строк в отчете об использованных средствах.
	Если ПараметрыВыгрузки.ВключитьОЦИС Тогда
		ПроверитьКодСтрокиОЦИС(ИмяФормы,
							   ДанныеОтчета,
							   РезультатВыгрузки,
							   СтатусПроверки,
							   "П0001006201",
							   "Взносы и иные целевые поступления");
	КонецЕсли;
	
	Возврат СтатусПроверки;
														
КонецФункции

Процедура ПроверитьКодСтрокиБаланс(ИмяФормы,
								   СтруктураРеквизитовФормы,
								   ДанныеОтчета,
								   РезультатВыгрузки,
								   СтатусПроверки,
								   ИмяПоказателя,
								   НаименованиеСтроки)
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ДанныеРеглОтчета = ДанныеОтчета.ПолеТабличногоДокументаБалансНКО;
	Иначе
		ДанныеРеглОтчета = ДанныеОтчета.ПолеТабличногоДокументаБаланс;
	КонецЕсли;
	
	Если НЕ ДанныеРеглОтчета.Свойство(ИмяПоказателя + "02") Тогда
		Возврат;
	КонецЕсли;
	
	КодСтроки = СокрЛП(ДанныеРеглОтчета[ИмяПоказателя + "02"]);
	Графа03 = ДанныеРеглОтчета[ИмяПоказателя + "03"];
	Графа04 = ДанныеРеглОтчета[ИмяПоказателя + "04"];
	Графа05 = ДанныеРеглОтчета[ИмяПоказателя + "05"];
	
	Если ЗначениеЗаполнено(КодСтроки)
	 ИЛИ ЗначениеЗаполнено(Графа03)
	 ИЛИ ЗначениеЗаполнено(Графа04)
	 ИЛИ ЗначениеЗаполнено(Графа05) Тогда
	 
		Если ПустаяСтрока(КодСтроки) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не указан код строки """ + НаименованиеСтроки + """ бухгалтерского баланса", "Баланс", ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(КодСтроки) <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Неверно указан код строки """ + НаименованиеСтроки + """ бухгалтерского баланса", "Баланс", ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКодСтрокиОПУ(ИмяФормы,
								ДанныеОтчета,
								РезультатВыгрузки,
								СтатусПроверки,
								ИмяПоказателя,
								НаименованиеСтроки)
	
	ДанныеРеглОтчета = ДанныеОтчета.ПолеТабличногоДокументаОПУ;
	
	КодСтроки = СокрЛП(ДанныеРеглОтчета[ИмяПоказателя + "02"]);
	Графа03 = ДанныеРеглОтчета[ИмяПоказателя + "03"];
	Графа04 = ДанныеРеглОтчета[ИмяПоказателя + "04"];
	
	Если ЗначениеЗаполнено(КодСтроки) ИЛИ ЗначениеЗаполнено(Графа03) ИЛИ ЗначениеЗаполнено(Графа04) Тогда
		Если ПустаяСтрока(КодСтроки) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не указан код строки """ + НаименованиеСтроки + """ отчета о прибылях и убытках", "ОПУ", ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(КодСтроки) <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Неверно указан код строки """ + НаименованиеСтроки + """ отчета о прибылях и убытках", "ОПУ",
				ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКодСтрокиОЦИС(ИмяФормы,
								 ДанныеОтчета,
								 РезультатВыгрузки,
								 СтатусПроверки,
								 ИмяПоказателя,
								 НаименованиеСтроки)
	
	ДанныеРеглОтчета = ДанныеОтчета.ПолеТабличногоДокументаОЦИС;
	
	КодСтроки = СокрЛП(ДанныеРеглОтчета[ИмяПоказателя + "02"]);
	Графа03 = ДанныеРеглОтчета[ИмяПоказателя + "03"];
	Графа04 = ДанныеРеглОтчета[ИмяПоказателя + "04"];
	
	Если ЗначениеЗаполнено(КодСтроки) ИЛИ ЗначениеЗаполнено(Графа03) ИЛИ ЗначениеЗаполнено(Графа04) Тогда
		Если ПустаяСтрока(КодСтроки) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не указан код строки """ + НаименованиеСтроки + """ отчета о целевом использовании средств",
				"ОЦИС", ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(КодСтроки) <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Неверно указан код строки """ + НаименованиеСтроки + """ отчета о целевом использовании средств",
				"ОЦИС", ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML(ИмяФормы, СтруктураРеквизитовФормы, КешСхем = Неопределено) Экспорт
	
	ИмяКешаОтчета  = "БухОтчетностьМП";
	ИмяМакетаСхемы = ИмяМакетаСтруктурыВыгрузки(ИмяФормы, СтруктураРеквизитовФормы);
	
	Если КешСхем <> Неопределено И КешСхем.Свойство(ИмяКешаОтчета) И КешСхем[ИмяКешаОтчета].Свойство(ИмяМакетаСхемы) Тогда
		ДеревоСтруктуры = КешСхем[ИмяКешаОтчета][ИмяМакетаСхемы];
		
	Иначе
		ДеревоСтруктуры = Новый ДеревоЗначений;
		ДеревоСтруктуры.Колонки.Добавить("Код");
		ДеревоСтруктуры.Колонки.Добавить("Тип");
		ДеревоСтруктуры.Колонки.Добавить("Формат");
		ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
		ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
		ДеревоСтруктуры.Колонки.Добавить("Обязательность");
		ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
		ДеревоСтруктуры.Колонки.Добавить("Многострочность");
		ДеревоСтруктуры.Колонки.Добавить("Раздел");
		ДеревоСтруктуры.Колонки.Добавить("Ключ");
		ДеревоСтруктуры.Колонки.Добавить("Условие");
		ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
		ДеревоСтруктуры.Колонки.Добавить("Значение");
		ДеревоСтруктуры.Колонки.Добавить("Представление");
		ДеревоСтруктуры.Колонки.Добавить("Показатели");
		
		Макет = ЭтотОбъект.ПолучитьМакет(ИмяМакетаСхемы);
		
		ВысотаТаблицы = Макет.ВысотаТаблицы;
		
		УчтенныеГруппы = Новый Соответствие;
		
		Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
			Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
			Для НомерСтроки = 2 По ВысотаТаблицы Цикл
				НомСтр = ВысотаТаблицы - НомерСтроки + 2;
				Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
					
					РодительскийУзел = ДеревоСтруктуры;
					Если Уровень <> 0 Тогда
						Для Инд = 1 По НомСтр - 2 Цикл
							Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
							Если Узел <> Неопределено Тогда
								РодительскийУзел = Узел;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					НовСтр = РодительскийУзел.Строки.Вставить(0);
					НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
					НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
					НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
					НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
					НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
					МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
					НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
					МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
					НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
					НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
					НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
					НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
					НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
					НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
					НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
					
					УчтенныеГруппы.Вставить(НомСтр, НовСтр);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если КешСхем <> Неопределено Тогда
			Если НЕ КешСхем.Свойство(ИмяКешаОтчета) Тогда
				КешСхем.Вставить(ИмяКешаОтчета, Новый Структура);
			КонецЕсли;
			КешСхем[ИмяКешаОтчета].Вставить(ИмяМакетаСхемы, ДеревоСтруктуры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ИмяМакетаСтруктурыВыгрузки(ИмяФормы, СтруктураРеквизитовФормы)
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2019-01-01' Тогда
		Возврат "СхемаВыгрузки503_2019Кв1";
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2016-01-01' Тогда
		Возврат "СхемаВыгрузки502_2016Кв1";
	Иначе
		Возврат "СхемаВыгрузки501_2015Кв4";
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
					 	   ДанныеОтчета,
						   СтруктураРеквизитовФормы) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки,
							   ДанныеОтчета,
							   СтруктураРеквизитовФормы);
												  
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
											
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
		
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы)
									 
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		ДополнитьСтруктуруПараметровПрочиеОтчеты(ИмяФормы,
												 СтруктураРеквизитовФормы,
												 ДанныеОтчета,
												 ПараметрыВыгрузки,
												 Узел);
	КонецЕсли;								 
									 
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки,
						ПараметрыВыгрузки, ТекСтр.Условие, "Баланс") Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки,
								   ДанныеОтчета,
								   СтруктураРеквизитовФормы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПараметровПрочиеОтчеты(ИмяФормы,
												   СтруктураРеквизитовФормы,
												   ДанныеОтчета,
												   ПараметрыВыгрузки,
												   Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		
		Если Узел.Раздел = "Баланс"
			И СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации
			И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				ДанныеОтчета, "ПолеТабличногоДокументаБалансНКО") Тогда
			ПоказателиРаздела = ДанныеОтчета["ПолеТабличногоДокументаБалансНКО"];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				ДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = ДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = ДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(ИмяФормы, Узел);
		Если УзелПуст Тогда
			Если СтрНайти(Узел.Обязательность, "Н") <> 0
			 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
				   ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			         И ?(СтрНайти(Узел.Обязательность, "О") <> 0
					 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
					 РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел)
	
	ПустойУзел = ?(Узел.Формат = "N",
	               Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение),
	               НЕ ЗначениеЗаполнено(Узел.Значение) ИЛИ Узел.Код = "ОКУД");
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(ИмяФормы, ПараметрыВыгрузки, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, НовыйУзел, НомСтр);
				КонецЦикла;
				
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, Стр, НомерСтроки);
				
			КонецЕсли;
			
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + Формат(НомерСтроки, "ЧГ="));
					Если ПараметрыВыгрузки.Свойство(ИмяСвойства) Тогда
						ЗначениеСвойства = ПараметрыВыгрузки[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(ИмяФормы, Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(ИмяФормы, Стр,
								ЗначениеПриведенноеКЕдиницеИзмерения(ИмяФормы, ЗначениеСвойства, ПараметрыВыгрузки));
						КонецЕсли;
						
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
						
					КонецЕсли;
					
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
					
				КонецЕсли;
				
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
				
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьКоличествоСтрокМногострочнойЧасти(ИмяФормы, ПараметрыВыгрузки, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(ИмяФормы, Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока ПараметрыВыгрузки.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйКлючВПодчиненииКУзлу(ИмяФормы, Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(ИмяФормы, Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел)
	
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ЗначениеПриведенноеКЕдиницеИзмерения(ИмяФормы, Значение, ПараметрыВыгрузки)
	
	Возврат Число(Формат(Значение, ПараметрыВыгрузки.ФорматВывода));
	
КонецФункции

Функция ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)),
			СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьДанные(ИмяФормы, Узел, РезультатВыгрузки) Экспорт
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(ИмяФормы, Узел, РезультатВыгрузки) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(ИмяФормы, Стр, РезультатВыгрузки) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(ИмяФормы, Стр, РезультатВыгрузки)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				РезультатВыгрузки, "Формирование XML: Длина значения показателя """
				+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """ (" + АдресПоказателя(ИмяФормы, Стр)+ ") меньше минимально возможной ("
				+ ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				РезультатВыгрузки, "Формирование XML: Длина значения показателя """
				+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """  (" + АдресПоказателя(ИмяФормы, Стр)+ ") больше максимально возможной ("
				+ ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция АдресПоказателя(ИмяФормы, СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки)
		
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>"
		+ Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
		
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML)

	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли