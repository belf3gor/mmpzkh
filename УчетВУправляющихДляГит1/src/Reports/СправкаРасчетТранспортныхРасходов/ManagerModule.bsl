#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Возврат СправкиРасчетыКлиентСервер.ВсеНаборыСуммовыхПоказателей();
	
КонецФункции

#КонецОбласти

#Область ТонкаяНастройка

Процедура УстановитьВариантОтчета(КомпоновщикНастроек, ПараметрыОтчета)
	
	// Отчет формируется в двух вариантах:
	// - "Первичный", где остаток расходов определяется изменениями в движении товаров
	// - "Вторичный", где остаток расходов в бухгалтерском учете определяется процентом, рассчитанном в "Первичном" варианте.
	//
	// Второй вариант применяется для отображения данных бухгалтерского учета,
	// если предприятие ведет налоговый учет по налогу на прибыль.
	//
	// У него есть два подварианта:
	// - краткий - только бухгалтерский учет
	// - полный  - бухгалтерский учет и разницы.
	
	Вариант = "Первичный";
	
	Если ПараметрыОтчета.ПоказательБУ 
		И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода) Тогда
		
		Если ПараметрыОтчета.ПоказательВР Тогда
		    Вариант = "ВторичныйПолный";
		Иначе
			Вариант = "ВторичныйКраткий";
		КонецЕсли;
		
	КонецЕсли;
	
	ВключитьГруппировкуТаблицы(КомпоновщикНастроек.Настройки.Структура, Вариант);
	
КонецПроцедуры

Процедура ВключитьГруппировкуТаблицы(Группировки, ИмяГруппировки, Включена = Ложь)
	
	Для Каждого Группировка Из Группировки Цикл
		
		ТипЭлемента = ТипЗнч(Группировка);
		
		Если ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			
			Если Группировка.Имя = ИмяГруппировки Тогда
				
				Группировка.Использование = Истина;
				Включена = Истина;
				Возврат;
				
			КонецЕсли;
			
			ВложенныеГруппировки = Группировка.Структура;
			
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			ВложенныеГруппировки = Группировка.Строки;
			
		ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			ВложенныеГруппировки = Группировка.Структура;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не Группировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ВключитьГруппировкуТаблицы(ВложенныеГруппировки, ИмяГруппировки, Включена);
		
		Если Включена Тогда
			Возврат;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт 
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	УстановитьВариантОтчета(КомпоновщикНастроек, ПараметрыОтчета);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
		
	ИтогиГруппировкиТаблица = МакетКомпоновки.Тело[0].Тело[1].Строки[0].Тело[1];
	МакетКомпоновки.Тело[0].Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
		
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	ПоляПоВидамУчета = Новый Массив;
	
	ПоляПоВидамУчета.Добавить(Новый Структура("Имя, Представление","ТранспортныеРасходы", "Транспортные расходы"));
	
	Возврат ПоляПоВидамУчета;
	
КонецФункции

#КонецЕсли