&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания,
	  ФормаДлительнойОперации;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2018";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы100");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы110");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы120");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы121");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьОбычныеРазделы();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьМногострочныеЧасти();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Элементы.НаименованиеЭтапа.Заголовок = "В работе";
	Иначе
		Статус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиРеглОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		Если Статус <> Неопределено Тогда
			Элементы.НаименованиеЭтапа.Заголовок
			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), Статус);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы100 = "П10000";
	СтруктураРеквизитовФормы.мИдГруппы110 = "П11000";
	СтруктураРеквизитовФормы.мИдГруппы120 = "П12000";
	СтруктураРеквизитовФормы.мИдГруппы121 = "П12100";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 6;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы = 8;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П10000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1000001");
	ИменаГраф.Добавить("П1000002");
	ИменаГраф.Добавить("П1000003");
	ИменаГраф.Добавить("П1000004");
	ИменаГраф.Добавить("П1000005");
	ИменаГраф.Добавить("П1000006");
	ИменаГраф.Добавить("П1000007");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы110);
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы120);
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы100, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П11000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1100008");
	ИменаГраф.Добавить("П1100009");
	ИменаГраф.Добавить("П1100010");
	ИменаГраф.Добавить("П1100011");
	ИменаГраф.Добавить("П1100012");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы110, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П12000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1200013");
	ИменаГраф.Добавить("П1200014");
	ИменаГраф.Добавить("П1200015");
	ИменаГраф.Добавить("П1200016");
	ИменаГраф.Добавить("П1200017");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы121);
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы120, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П12100.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1210018");
	ИменаГраф.Добавить("П1210019");
	ИменаГраф.Добавить("П1210020");
	ИменаГраф.Добавить("П1210021");
	ИменаГраф.Добавить("П1210022");
	ИменаГраф.Добавить("П1210023");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы121, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 2, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Структура содержит имена и число уровней многоуровневых разделов.
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Реестр", 1);
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	ДеревоДанных.Колонки.Добавить("АдресТабличногоДокумента");
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		
		ИмяРаздела = Элем.Ключ;
		КолУровней = Элем.Значение;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для ТекУровень = 0 По КолУровней - 1 Цикл
			ТекВетка = ТекВетка.Строки.Добавить();
			ТекВетка.Данные = Новый Структура;
			ТекВетка.ДанныеМногострочныхЧастей = Новый Структура;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы()
	
	СтруктураДанныхТитульный = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		// Многоуровневый раздел.
		Если мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			
			ДеревоДанныхРазделУровень0 = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.ИмяСтраницы]);
			
			Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
				Если ДеревоДанныхРазделУровень0.Строки[0].Данные.Количество() = 0 Тогда
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
					ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
					УдалитьСекцииПодчиненныхГрупп(СтруктураРеквизитовФормы.мИдГруппы100);
					СпрятатьЗначкиУдалитьСтроку();
					СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
					СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
					СохранитьДанныеРаздела(Раздел.ИмяСтраницы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Реестр";
	СтрокаУровня1.Представление            = "Реестр";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц()

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Титульный";
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Реестр";
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета
	= ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСекцииПодчиненныхГрупп(ИмяГруппы, ТаблДокумент = Неопределено)
	
	Если ТаблДокумент = Неопределено Тогда
		ТаблДокумент = ТабличныйДокумент;
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		Обл = ТаблДокумент.Области.Найти("Секция" + ИмяПодчГруппы);
		Если Обл <> Неопределено Тогда
			ТаблДокумент.УдалитьОбласть(Обл, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = 0;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		СохранитьТабличныеДокументыСтраниц();
		ВосстановитьТабличныеДокументыСтраниц();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьТабличныеДокументыСтраниц()
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство("Реестр") Тогда
			
			Рег = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов;
			Ном = 1;
			ЗаписьВыбрана = Истина;
			Пока ЗаписьВыбрана Цикл
				Зап = Рег.СоздатьМенеджерЗаписи();
				Зап.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Зап.ВидДополнительногоФайла = "РеестрСтраница" + Формат(Ном, "ЧГ=");
				Если Зап.Выбран() Тогда
					Зап.Удалить();
					Ном = Ном + 1;
				Иначе
					ЗаписьВыбрана = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ДеревоРеестра = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
			
			Для Ном = 1 По ДеревоРеестра.Строки.Количество() Цикл
				ВеткаРеестра = ДеревоРеестра.Строки[Ном - 1];
				Зап = Рег.СоздатьМенеджерЗаписи();
				Зап.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Зап.ВидДополнительногоФайла = "РеестрСтраница" + Формат(Ном, "ЧГ=");
				Зап.СодержимоеФайла = Новый ХранилищеЗначения(
					ПолучитьИзВременногоХранилища(ВеткаРеестра.АдресТабличногоДокумента));
				Зап.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области[ЭлСтруктуры.Ключ];
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ВосстановитьТабличныеДокументыСтраниц();
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТабличныеДокументыСтраниц()
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство("Реестр") Тогда
			
			Рег = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов;
			
			ДеревоРеестра = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
			
			Для Ном = 1 По ДеревоРеестра.Строки.Количество() Цикл
				ВеткаРеестра = ДеревоРеестра.Строки[Ном - 1];
				Зап = Рег.СоздатьМенеджерЗаписи();
				Зап.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Зап.ВидДополнительногоФайла = "РеестрСтраница" + Формат(Ном, "ЧГ=");
				Зап.Прочитать();
				Если ВеткаРеестра.АдресТабличногоДокумента <> Неопределено Тогда
					УдалитьИзВременногоХранилища(ВеткаРеестра.АдресТабличногоДокумента);
				КонецЕсли;
				ВеткаРеестра.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
					Зап.СодержимоеФайла.Получить(), УникальныйИдентификатор);
			КонецЦикла;
			
			УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]
				= ПоместитьВоВременноеХранилище(ДеревоРеестра, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "ВключитьСтроку") Тогда
		ВключитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П1000002") Тогда
		ИНН = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаИНН = СтрДлина(ИНН);
		Если ДлинаИНН = 10 ИЛИ ДлинаИНН = 12 ИЛИ ДлинаИНН = 0 Тогда
			Область.Значение = ИНН;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='ИНН должен состоять из 10 или 12 цифр. Значение очищено.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	Если Лев(Элемент.ТекущаяОбласть.Имя, 13) = "УдалитьСтроку" Тогда
		ИмяГруппы = Неопределено;
	Иначе
		ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииОтключенииСтрок(ИмяГруппы);
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок = ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок = ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииОтключенииСтрок(Знач ИмяГруппы)
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы100 Тогда
		Подстрока = "счет-фактуру";
		ТекстВопросаПередУдалениемСтроки = НСтр("ru='Удалить выбранный счет-фактуру?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы110 Тогда
		Подстрока = "исправление в счете-фактуре";
		ТекстВопросаПередУдалениемСтроки = НСтр("ru='Удалить выбранное исправление в счете-фактуре?'");
		ТекстВопросаПередОтключениемСтроки = НСтр("ru='Будут удалены исправления в счете-фактуре.
		|
		|Продолжить?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы120 Тогда
		Подстрока = "корректировочный счет-фактуру";
		ТекстВопросаПередУдалениемСтроки = НСтр("ru='Удалить выбранный корректировочный счет-фактуру?'");
		ТекстВопросаПередОтключениемСтроки = НСтр("ru='Будут удалены корректировочные счета-фактуры.
		|
		|Продолжить?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы121 Тогда
		Подстрока = "исправление в корректировочном счете-фактуре";
		ТекстВопросаПередУдалениемСтроки = НСтр("ru='Удалить выбранное исправление в корректировочном счете-фактуре?'");
		ТекстВопросаПередОтключениемСтроки = НСтр("ru='Будут удалены исправления в корректировочном счете-фактуре.
		|
		|Продолжить?'");
	КонецЕсли;
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопросаПередУдалениемСтроки);
	ДопТекст.Вставить("ТекстВопросаПередОтключениемСтроки", ТекстВопросаПередОтключениемСтроки);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяТекРаздела)
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		ОблНомерКорректировки   = Форма.ТабличныйДокумент.Область("НомерКорректировки");
		ОблРегистрационныйНомер = Форма.ТабличныйДокумент.Область("РегистрационныйНомер");
		ОблДатаРегистрации      = Форма.ТабличныйДокумент.Область("ДатаРегистрации");
		
		Если ОблНомерКорректировки.Значение > 0 Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблРегистрационныйНомер);
			РазрешитьВводДанныхВОбласть(Форма, ОблДатаРегистрации);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблРегистрационныйНомер);
			ЗапретитьВводДанныхВОбласть(Форма, ОблДатаРегистрации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела)
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + НаимРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		Если ТекВетка.АдресТабличногоДокумента <> Неопределено Тогда
			УдалитьИзВременногоХранилища(ТекВетка.АдресТабличногоДокумента);
		КонецЕсли;
		ТекВетка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
			ТабличныйДокумент.ПолучитьОбласть(), УникальныйИдентификатор);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + НаимРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		ДанныеТаблДокумента.Вставить("Данные", Новый Структура());
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			
			Если ЭлемСтруктуры.Значение["УровеньПодчинения"] = 0 Тогда
				ДеревоДанных = Новый ДеревоЗначений;
				ДеревоДанных.Колонки.Добавить("Данные");
				ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
				ДеревоДанных.Колонки.Добавить("АдресТабличногоДокумента");
				
				СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ЭлемСтруктуры.Ключ, ДеревоДанных);
				
				СтруктураДанныхМногострочныхЧастей.Вставить(ЭлемСтруктуры.Ключ, ДеревоДанных);
			КонецЕсли;
			
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если Тип(ТекОбласть) = Тип("РисунокТабличногоДокумента")
				ИЛИ ТекОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				ИЛИ ТекОбласть.СодержитЗначение <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + "_1") = Неопределено Тогда
		
		// Случай отключенной подчиненнной многострочной части.
		//
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		Данные = Новый Структура;
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Если ИмяГрафы = "П1000001"
				ИЛИ ИмяГрафы = "П1000002"
				ИЛИ ИмяГрафы = "П1000003"
				ИЛИ ИмяГрафы = "П1200013"
				ИЛИ ИмяГрафы = "П1210019" Тогда
				Данные.Вставить(ИмяГрафы, "");
			ИначеЕсли ИмяГрафы = "П1000004"
				ИЛИ ИмяГрафы = "П1100009"
				ИЛИ ИмяГрафы = "П1200014"
				ИЛИ ИмяГрафы = "П1210020" Тогда
				Данные.Вставить(ИмяГрафы, '00010101');
			Иначе
				Данные.Вставить(ИмяГрафы, 0);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ДеревоПодчСтрок.Колонки.Добавить("АдресТабличногоДокумента");
			ПодчКоординаты = Координаты + "_1";
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Возврат;
		
	КонецЕсли;
	
	// Случай включенной подчиненнной многострочной части.
	//
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ДеревоПодчСтрок.Колонки.Добавить("АдресТабличногоДокумента");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		Если ТекВетка.АдресТабличногоДокумента = Неопределено Тогда
			УдалитьСекцииПодчиненныхГрупп(СтруктураРеквизитовФормы.мИдГруппы100);
		Иначе
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолучитьИзВременногоХранилища(ТекВетка.АдресТабличногоДокумента));
		КонецЕсли;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ДобавитьСтраницуНаСервере(ИмяРаздела);
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуНаСервере(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Ветка = ДеревоДанных.Строки.Добавить();
	Ветка.Данные = Новый Структура;
	Ветка.ДанныеМногострочныхЧастей = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанных.Строки.Количество();
	
	// Сохранение данных предыдущей страницы.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ПредыдущаяВетка = ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	ПредыдущаяВетка.Данные = ДанныеТаблДокумента.Данные;
	ПредыдущаяВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	Если ПредыдущаяВетка.АдресТабличногоДокумента <> Неопределено Тогда
		УдалитьИзВременногоХранилища(ПредыдущаяВетка.АдресТабличногоДокумента);
	КонецЕсли;
	ПредыдущаяВетка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
		ТабличныйДокумент.ПолучитьОбласть(), УникальныйИдентификатор);
	
	// Вывод данных новой страницы.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	УдалитьСекцииПодчиненныхГрупп(СтруктураРеквизитовФормы.мИдГруппы100);
	
	СпрятатьЗначкиУдалитьСтроку();
	
	// Сохранение данных новой страницы.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	Ветка.Данные = ДанныеТаблДокумента.Данные;
	Ветка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	Ветка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
		ТабличныйДокумент.ПолучитьОбласть(), УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	УдалитьСтраницуНаСервере(ИмяРаздела, НомУдаляемойСтраницы);
	
	УправлениеВидимостьюСсылкиУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуНаСервере(ИмяРаздела, НомерУдаляемойСтраницы)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	КолСтраниц = ДеревоДанных.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомерУдаляемойСтраницы = КолСтраниц,
		НомерУдаляемойСтраницы - 1, НомерУдаляемойСтраницы);
	
	Если ДеревоДанных.Строки[НомерУдаляемойСтраницы - 1].АдресТабличногоДокумента <> Неопределено Тогда
		УдалитьИзВременногоХранилища(ДеревоДанных.Строки[НомерУдаляемойСтраницы - 1].АдресТабличногоДокумента);
	КонецЕсли;
	
	ДеревоДанных.Строки.Удалить(НомерУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ВключитьСтроку(Команда)
	
	ТекОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	
	Если СтрНачинаетсяС(ТекОбласть.Имя, "ВключитьСтрокуЗначок") Тогда
		ОбластьВключитьСтрокуЗначокИмя = ТекОбласть.Имя;
		ОбластьВключитьСтрокуЗначок = ТекОбласть;
	Иначе
		ОбластьВключитьСтрокуЗначокИмя = СтрЗаменить(ТекОбласть.Имя, "ВключитьСтроку", "ВключитьСтрокуЗначок");
		ОбластьВключитьСтрокуЗначок = ТабличныйДокумент.Область(ОбластьВключитьСтрокуЗначокИмя);
	КонецЕсли;
	
	ПостфиксВИмениОбластиВключения = СтрЗаменить(ОбластьВключитьСтрокуЗначокИмя, "ВключитьСтроку", "");
	ПостфиксВИмениОбластиВключения = СтрЗаменить(ПостфиксВИмениОбластиВключения, "Значок", "");
	
	ИмяГруппы = Лев(ПостфиксВИмениОбластиВключения, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ОбластьВключитьСтрокуЗначокТекст = НРег(СокрЛП(ОбластьВключитьСтрокуЗначок.Текст));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяГруппы", ИмяГруппы);
	ДопПараметры.Вставить("ОбластьВключитьСтрокуЗначокИмя", ОбластьВключитьСтрокуЗначокИмя);
	
	Если ОбластьВключитьСтрокуЗначокТекст = ">" Тогда
		
		ВключитьДопСтрокуНаСервере(ДопПараметры);
		
		Модифицированность = Истина;
		
	ИначеЕсли НРег(ОбластьВключитьСтрокуЗначокТекст) = "v" Тогда
		
		ДопПараметры.Вставить("ПостфиксВИмениОбластиВключения", ПостфиксВИмениОбластиВключения);
		Оп = Новый ОписаниеОповещения("ОтключитьДопСтроку", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = ДополнительныйТекстПриДобавленииУдаленииОтключенииСтрок(ИмяГруппы).ТекстВопросаПередОтключениемСтроки;
		
		ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьДопСтрокуНаСервере(СтруктураПараметров)
	
	ИмяГруппы = СтруктураПараметров["ИмяГруппы"];
	ОбластьВключитьСтрокуЗначок = ТабличныйДокумент.Область(СтруктураПараметров["ОбластьВключитьСтрокуЗначокИмя"]);
	
	ОбластьВключитьСтрокуЗначок.Текст = "v";
	
	// Формирование включаемой секции во временном табличном документе.
	//
	ВремТаблДок = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы,
	"ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела).ПолучитьОбласть("Секция" + ИмяГруппы);
	
	ВремТаблДок.Область("Секция" + ИмяГруппы).Имя = "";
	ВремТаблДок.Область("МногострочнаяЧасть" + ИмяГруппы).Имя = "";
	
	УдалитьСекцииПодчиненныхГрупп(ИмяГруппы, ВремТаблДок);
	
	// Реиндексация имен областей.
	//
	НачИндекс = "_1";
	НовКоординаты = СтрЗаменить(ОбластьВключитьСтрокуЗначок.Имя, "ВключитьСтрокуЗначок" + ИмяГруппы, "");
	КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
	НачКоординаты = "";
	Для НомУр = 1 По КолУровнейПодчиненности Цикл
		НачКоординаты = НачКоординаты + НачИндекс;
	КонецЦикла;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	Для каждого ИмяГрафы Из МассивИменГраф Цикл
		НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
		НовИмяОбл = ИмяГрафы + НовКоординаты + НачИндекс;
		ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
		ОбластьЯчейки.Имя = НовИмяОбл;
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
	НовПостфикс = ИмяГруппы + НовКоординаты + НачИндекс;
	Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
	Если Обл <> Неопределено Тогда
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЕсли;
	Обл = ВремТаблДок.Области.Найти("ДобавитьСтроку" + НачПостфикс);
	Если Обл <> Неопределено Тогда
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	КонецЕсли;
	Обл = ВремТаблДок.Области.Найти("ДобавитьСтрокуЗначок" + НачПостфикс);
	Если Обл <> Неопределено Тогда
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	КонецЕсли;
	Обл = ВремТаблДок.Области.Найти("ДобавлениеСтроки" + НачПостфикс);
	Если Обл <> Неопределено Тогда
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
	
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		ВклНачПостфикс = ИмяПодчГруппы + НачКоординаты + НачИндекс;
		ВклНовПостфикс = ИмяПодчГруппы + НовКоординаты + НачИндекс;
		Обл = ВремТаблДок.Области.Найти("ВключитьСтроку" + ВклНачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ВключитьСтроку" + ВклНовПостфикс;
		КонецЕсли;
		Обл = ВремТаблДок.Области.Найти("ВключитьСтрокуЗначок" + ВклНачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ВключитьСтрокуЗначок" + ВклНовПостфикс;
		КонецЕсли;
		Обл = ВремТаблДок.Области.Найти("ВключениеСтроки" + ВклНачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ВключениеСтроки" + ВклНовПостфикс;
		КонецЕсли;
	КонецЦикла;
	
	// Включение секции в табличный документ.
	//
	ВысотаСекцииГруппы = ВремТаблДок.ВысотаТаблицы;
	
	ОбластьПреемникВерх = ОбластьВключитьСтрокуЗначок.Низ + 1;
	ОбластьПреемникНиз = ОбластьПреемникВерх + ВысотаСекцииГруппы - 1;
	
	ОбластьПреемник = ТабличныйДокумент.Область(ОбластьПреемникВерх, , ОбластьПреемникНиз, );
	
	ТабличныйДокумент.ВставитьОбласть(
	ВремТаблДок.Область(), ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(МассивИменГраф[0] + НовКоординаты + НачИндекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьДопСтроку(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьДопСтрокуНаСервере(ДополнительныеПараметры);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьДопСтрокуНаСервере(СтруктураПараметров)
	
	ИмяГруппы = СтруктураПараметров["ИмяГруппы"];
	ОбластьВключитьСтрокуЗначок = ТабличныйДокумент.Область(СтруктураПараметров["ОбластьВключитьСтрокуЗначокИмя"]);
	ПостфиксВИмениОбластиВключения = СтруктураПараметров["ПостфиксВИмениОбластиВключения"];
	
	НизУдаляемойОбласти = Неопределено;
	
	Для каждого Эл Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		МассивИменПодчГрупп = Эл.Значение["ИменаПодчиненныхГрупп"];
		ИндексПодчГруппы = МассивИменПодчГрупп.Найти(ИмяГруппы);
		Если ИндексПодчГруппы <> Неопределено Тогда
			
			Если ИндексПодчГруппы + 1 = МассивИменПодчГрупп.Количество() Тогда
				Для каждого Обл Из ТабличныйДокумент.Области Цикл
					Если СтрНачинаетсяС(Обл.Имя, "ДобавлениеСтроки" + ПостфиксВИмениОбластиВключения + "_") Тогда
						НизУдаляемойОбласти = Обл.Низ;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ИмяСледующейПодчГруппы = МассивИменПодчГрупп[ИндексПодчГруппы + 1];
				ПостфиксИскомойОбласти = СтрЗаменить(ОбластьВключитьСтрокуЗначок.Имя, "ВключитьСтрокуЗначок" + ИмяГруппы, "");
				ИмяИскомойОбласти = "ВключениеСтроки" + ИмяСледующейПодчГруппы + ПостфиксИскомойОбласти;
				НизУдаляемойОбласти = ТабличныйДокумент.Область(ИмяИскомойОбласти).Верх - 1;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НизУдаляемойОбласти) Тогда
		
		ОбластьВключитьСтрокуЗначок.Текст = ">";
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ОбластьВключитьСтрокуЗначок.Низ + 1, , НизУдаляемойОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если ПревышеноДопустимоеКоличествоСтрокТабличногоДокумента(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Превышено допустимое количество строк табличного документа. Необходимо добавить страницу и продолжить ввод данных.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ВременныйТаблДок = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
		СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		ИскомаяОбласть = ВременныйТаблДок.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		ВремТаблДок = ВременныйТаблДок.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ПреИндекс_Число + 1;
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Если НовИндекс_Число = 2 Тогда
				Если Обл <> Неопределено Тогда
					Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
					Обл.Гиперссылка = Истина;
					Обл.Текст = "х";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ВставляемаяОбласть.Низ - ВставляемаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Если ИменаПодчиненныхГрупп.Количество() > 0 Тогда
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ВклНачПостфикс = ИмяПодчГруппы + НачКоординаты + НачИндекс;
				ВклНовПостфикс = ИмяПодчГруппы + НовКоординаты + НовИндекс;
				Обл = ВременныйТаблДок.Области.Найти("ВключитьСтроку" + ВклНачПостфикс);
				Если Обл <> Неопределено Тогда
					Обл.Имя = "ВключитьСтроку" + ВклНовПостфикс;
				КонецЕсли;
				Обл = ВременныйТаблДок.Области.Найти("ВключитьСтрокуЗначок" + ВклНачПостфикс);
				Если Обл <> Неопределено Тогда
					Обл.Имя = "ВключитьСтрокуЗначок" + ВклНовПостфикс;
				КонецЕсли;
				Обл = ВременныйТаблДок.Области.Найти("ВключениеСтроки" + ВклНачПостфикс);
				Если Обл <> Неопределено Тогда
					Обл.Имя = "ВключениеСтроки" + ВклНовПостфикс;
				КонецЕсли;
				ОблПреемник = ТабличныйДокумент.Область("ДобавитьСтроку" + НовПостфикс);
				ОблПреемник = ТабличныйДокумент.Область(ОблПреемник.Верх, , ОблПреемник.Низ, );
				ТабличныйДокумент.ВставитьОбласть(Обл, ОблПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЦикла;
		КонецЕсли;
		
		// Установка текущей области после добавления строки.
		НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
		НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
		Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = ДополнительныйТекстПриДобавленииУдаленииОтключенииСтрок(ИмяГруппы).ТекстВопросаПередУдалениемСтроки;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ОблВерхнейСтрокиУдаляемогоБлокаМнЧ = ТабличныйДокумент.Область("УдалитьСтроку" + ТекПостфикс);
		
		ВерхУдОбласти = ОблВерхнейСтрокиУдаляемогоБлокаМнЧ.Верх;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблВерхнейСтрокиУдаляемогоБлокаМнЧ = ТабличныйДокумент.Область("УдалитьСтроку" + ТекПостфикс);
		ОблВерхнейСтрокиСледующегоБлокаМнЧ
		= ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблВерхнейСтрокиУдаляемогоБлокаМнЧ.Верх;
		НизУдОбласти  = ОблВерхнейСтрокиСледующегоБлокаМнЧ.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		//
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				
				ВклПреПостфикс = ИмяПодчГруппы + ТекКоординаты + ПреИндекс;
				ВклНовПостфикс = ИмяПодчГруппы + ТекКоординаты + НовИндекс;
				
				Обл = ТабличныйДокумент.Области.Найти("ВключитьСтроку" + ВклПреПостфикс);
				Если Обл <> Неопределено Тогда
					Обл.Имя = "ВключитьСтроку" + ВклНовПостфикс;
				КонецЕсли;
				Обл = ТабличныйДокумент.Области.Найти("ВключитьСтрокуЗначок" + ВклПреПостфикс);
				Если Обл <> Неопределено Тогда
					Обл.Имя = "ВключитьСтрокуЗначок" + ВклНовПостфикс;
				КонецЕсли;
				Обл = ТабличныйДокумент.Области.Найти("ВключениеСтроки" + ВклПреПостфикс);
				Если Обл <> Неопределено Тогда
					Обл.Имя = "ВключениеСтроки" + ВклНовПостфикс;
				КонецЕсли;
				
				// Обновление координат в именах областей подчиненных многострочных частей.
				//
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				
				РеиндексироватьПодчиненныеДопСтрокиПриУдалении(ПарамРеинд);
				
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		Если НовИндекс = "_1" Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпрятатьЗначкиУдалитьСтроку()
	
	Для каждого Обл Из ТабличныйДокумент.Области Цикл
		Если Лев(Обл.Имя, 13) = "УдалитьСтроку" Тогда
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПревышеноДопустимоеКоличествоСтрокТабличногоДокумента(ИмяГруппы)
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["УровеньПодчинения"] > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТабличныйДокумент.ВысотаТаблицы > 5000;
	
КонецФункции

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтрокиПриУдалении(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ПреКоординаты + "_1") = Неопределено Тогда
		// Случай отключенной подчиненнной многострочной части.
		Возврат;
	КонецЕсли;
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			
			ВклПреПостфикс = ИмяПодчГруппы + ПреКоординаты + Инд;
			ВклНовПостфикс = ИмяПодчГруппы + НовКоординаты + Инд;
			
			Обл = ТабличныйДокумент.Области.Найти("ВключитьСтроку" + ВклПреПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Имя = "ВключитьСтроку" + ВклНовПостфикс;
			КонецЕсли;
			Обл = ТабличныйДокумент.Области.Найти("ВключитьСтрокуЗначок" + ВклПреПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Имя = "ВключитьСтрокуЗначок" + ВклНовПостфикс;
			КонецЕсли;
			Обл = ТабличныйДокумент.Области.Найти("ВключениеСтроки" + ВклПреПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Имя = "ВключениеСтроки" + ВклНовПостфикс;
			КонецЕсли;
			
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
			ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			
			РеиндексироватьПодчиненныеДопСтрокиПриУдалении(ПарамРеинд);
			
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Реестр" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	Если ИмяСтраницы = "Реестр" Тогда
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		УдалитьСекцииПодчиненныхГрупп(СтруктураРеквизитовФормы.мИдГруппы100);
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	ИначеЕсли ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
		СохранитьДанныеРаздела(ИмяСтраницы);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Реестр" Тогда
		УправлениеВидимостьюСсылкиУдалитьСтраницу();
		СпрятатьЗначкиУдалитьСтроку();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ДополнительныеПараметрыПечати = Новый Структура;
	ДополнительныеПараметрыПечати.Вставить("ВидПечати", Команда.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтотОбъект, ДополнительныеПараметрыПечати);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
						
	Иначе
		
		СохранитьНаКлиенте(, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Печать(ДополнительныеПараметры.ВидПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьСтарыеПечатныеБланкиРегламентированныхОтчетов();
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок,
	ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")));
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ВыбранныеСтраницы = Новый Массив();
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбранныеСтраницы.Добавить(СтрокаУровня1.ИмяСтраницы);
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Реестр счетов-фактур");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Реестр");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ТабличныйДокумент");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля);
	
	ЗафиксироватьТранзакцию();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля = Неопределено)
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
	
	ИмяМакета = "ПечатныйБланк2018Кв1";
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ПечФорма = Макет.Получитьобласть();
	ПечФорма.ПолеСверху = 5;
	ПечФорма.ПолеСправа = 5;
	ПечФорма.ПолеСнизу  = 5;
	ПечФорма.ПолеСлева  = 5;
	ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ПечФорма.Автомасштаб = Истина;
	
	РазделительВНачалеСтраницы = ПечФорма.Получитьобласть("РазделительВНачалеСтраницы");
	
	Шапка = ПечФорма.Получитьобласть("Шапка");
	Шапка.Параметры.Заполнить(СтруктураДанныхТитульный);
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.ДатаРегистрации) Тогда
		Шапка.Параметры.ДатаРегистрацииДень = Формат(День(СтруктураДанныхТитульный.ДатаРегистрации), "ЧЦ=2;ЧВН=");
		Шапка.Параметры.ДатаРегистрацииМесяц = Формат(Месяц(СтруктураДанныхТитульный.ДатаРегистрации), "ЧЦ=2;ЧВН=");
		Шапка.Параметры.ДатаРегистрацииГод = Формат(Год(СтруктураДанныхТитульный.ДатаРегистрации), "ЧГ=");
	КонецЕсли;
	
	Подвал = ПечФорма.Получитьобласть("Подвал");
	Подвал.Параметры.Заполнить(СтруктураДанныхТитульный);
	
	ШапкаДокумент    = ПечФорма.Получитьобласть("ШапкаДокумент");
	ПодШапкаДокумент = ПечФорма.Получитьобласть("ПодШапкаДокумент");
	СтрокаДокумент   = ПечФорма.Получитьобласть("СтрокаДокумент");
	
	ШапкаИсправление    = ПечФорма.Получитьобласть("ШапкаИсправление");
	ПодШапкаИсправление = ПечФорма.Получитьобласть("ПодШапкаИсправление");
	СтрокаИсправление   = ПечФорма.Получитьобласть("СтрокаИсправление");
	
	Разделитель = ПечФорма.Получитьобласть("Разделитель");
	ВывестиРазделитель = Ложь;
	
	НомерСтраницы = 2;
	ПечФорма.Очистить();
	МассивПроверки = Новый Массив;
	МассивДанныхИсправленийСФ = Новый Массив;
	МассивДанныхИсправленийКоррСФ = Новый Массив;
	
	Для каждого СтраницаРеестра Из ДеревоДанныхРаздела.Строки Цикл
		
		СтраницаРеестраИндекс = ДеревоДанныхРаздела.Строки.Индекс(СтраницаРеестра);
		
		Если СтраницаРеестраИндекс = 0 Тогда
			
			// Вывод секции "Шапка".
			ПечФорма.Вывести(Шапка);
			
		КонецЕсли;
		
		Для каждого СтрокаУр0 Из СтраницаРеестра.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы100].Строки Цикл
			
			ВывестиРазделитель = НЕ (СтраницаРеестраИндекс = 0
			И СтраницаРеестра.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы100].Строки.Индекс(СтрокаУр0) = 0);
			
			// Вывод данных счета-фактуры и относящихся к нему корректировочных счетов-фактур.
			//
			Для ИндПараметра = 0 По СтрокаДокумент.Параметры.Количество() - 1 Цикл
				СтрокаДокумент.Параметры[ИндПараметра] = Неопределено;
			КонецЦикла;
			
			ПерваяПодчСтрокаВторойМнЧУр1 = СтрокаУр0.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы120].Строки[0];
			
			СтрокаДокумент.Параметры.Заполнить(СтрокаУр0.Данные);
			
			Если СтруктураЗаполнена(ПерваяПодчСтрокаВторойМнЧУр1.Данные) Тогда
				СтрокаДокумент.Параметры.Заполнить(ПерваяПодчСтрокаВторойМнЧУр1.Данные);
			Иначе
				Для каждого Пок Из ПерваяПодчСтрокаВторойМнЧУр1.Данные Цикл
					СтрокаДокумент.Параметры[Пок.Ключ] = "-";
				КонецЦикла;
			КонецЕсли;
			
			МассивПроверки.Очистить();
			Если ВывестиРазделитель Тогда
				МассивПроверки.Добавить(Разделитель);
			КонецЕсли;
			МассивПроверки.Добавить(ШапкаДокумент);
			МассивПроверки.Добавить(ПодШапкаДокумент);
			МассивПроверки.Добавить(СтрокаДокумент);
			МассивПроверки.Добавить(Подвал);
			
			Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
				
				ПечФорма.Вывести(Подвал);
				
				СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
				ЭтаФорма.Заголовок, СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ПечФорма.Очистить();
				
				ВывестиРазделитель = Ложь;
				
				НомерСтраницы = НомерСтраницы + 1;
				
				ПечФорма.Вывести(РазделительВНачалеСтраницы);
				
			КонецЕсли;
			
			Если ВывестиРазделитель Тогда
				// Вывод секции "Разделитель".
				ПечФорма.Вывести(Разделитель);
				ПечФормаОблРазделитель = ПечФорма.Область("Разделитель");
				ПечФормаОблРазделитель.Имя = "_" + Формат(ПечФормаОблРазделитель.Верх, "ЧГ=");
			КонецЕсли;
			
			// Вывод секции "ШапкаДокумент".
			ПечФорма.Вывести(ШапкаДокумент);
			ПечФормаОблШапкаДокумент = ПечФорма.Область("ШапкаДокумент");
			ПечФормаОблШапкаДокумент.Имя = "_" + Формат(ПечФормаОблШапкаДокумент.Верх, "ЧГ=");
			
			// Вывод секции "ПодШапкаДокумент".
			ПечФорма.Вывести(ПодШапкаДокумент);
			ПечФормаОблПодШапкаДокумент = ПечФорма.Область("ПодШапкаДокумент");
			ПечФормаОблПодШапкаДокумент.Имя = "_" + Формат(ПечФормаОблПодШапкаДокумент.Верх, "ЧГ=");
			
			// Вывод секции "СтрокаДокумент".
			ПечФорма.Вывести(СтрокаДокумент);
			ПечФормаОблСтрокаДокумент = ПечФорма.Область("СтрокаДокумент");
			ПечФормаОблСтрокаДокумент.Имя = "_" + Формат(ПечФормаОблСтрокаДокумент.Верх, "ЧГ=");
			
			МассивДанныхИсправленийКоррСФ.Очистить();
			
			Для каждого ПодчСтрокаВторойМнЧУр1 Из СтрокаУр0.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы120].Строки Цикл
				
				// Подготовка данных исправлений в корректировочных счетах-фактурах.
				Для каждого ПодчСтрокаМнЧУр2 Из ПодчСтрокаВторойМнЧУр1.ДанныеМногострочныхЧастей[
					СтруктураРеквизитовФормы.мИдГруппы121].Строки Цикл
					Если СтруктураЗаполнена(ПодчСтрокаМнЧУр2.Данные) Тогда
						МассивДанныхИсправленийКоррСФ.Добавить(
						ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПодчСтрокаМнЧУр2.Данные));
					КонецЕсли;
				КонецЦикла;
				
				Если ПодчСтрокаВторойМнЧУр1 = ПерваяПодчСтрокаВторойМнЧУр1 Тогда
					Продолжить;
				КонецЕсли;
				
				Для ИндПараметра = 0 По СтрокаДокумент.Параметры.Количество() - 1 Цикл
					СтрокаДокумент.Параметры[ИндПараметра] = Неопределено;
				КонецЦикла;
				
				Если СтруктураЗаполнена(ПодчСтрокаВторойМнЧУр1.Данные) Тогда
					СтрокаДокумент.Параметры.Заполнить(ПодчСтрокаВторойМнЧУр1.Данные);
				Иначе
					Для каждого Пок Из ПодчСтрокаВторойМнЧУр1.Данные Цикл
						СтрокаДокумент.Параметры[Пок.Ключ] = "-";
					КонецЦикла;
				КонецЕсли;
				
				МассивПроверки.Очистить();
				МассивПроверки.Добавить(СтрокаДокумент);
				МассивПроверки.Добавить(Подвал);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					
					ПечФорма.Вывести(Подвал);
					
					СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
					ЭтаФорма.Заголовок, СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ПечФорма.Очистить();
					
					ПечФорма.Вывести(РазделительВНачалеСтраницы);
					
					// Вывод секции "ПодШапкаДокумент".
					ПечФорма.Вывести(ПодШапкаДокумент);
					ПечФормаОблПодШапкаДокумент = ПечФорма.Область("ПодШапкаДокумент");
					ПечФормаОблПодШапкаДокумент.Имя = "_" + Формат(ПечФормаОблПодШапкаДокумент.Верх, "ЧГ=");
					
					НомерСтраницы = НомерСтраницы + 1;
					
				КонецЕсли;
				
				// Вывод секции "СтрокаДокумент".
				ПечФорма.Вывести(СтрокаДокумент);
				ПечФормаОблСтрокаДокумент = ПечФорма.Область("СтрокаДокумент");
				ПечФормаОблСтрокаДокумент.Имя = "_" + Формат(ПечФормаОблСтрокаДокумент.Верх, "ЧГ=");
				
			КонецЦикла;
			
			Если МассивДанныхИсправленийКоррСФ.Количество() = 0 Тогда
				МассивДанныхИсправленийКоррСФ.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
				ПодчСтрокаВторойМнЧУр1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы121].Строки[0].Данные));
			КонецЕсли;
			
			МассивДанныхИсправленийСФ.Очистить();
			
			// Подготовка данных исправлений в счетах-фактурах.
			Для каждого ПодчСтрокаПервойМнЧУр1 Из СтрокаУр0.ДанныеМногострочныхЧастей[
				СтруктураРеквизитовФормы.мИдГруппы110].Строки Цикл
				МассивДанныхИсправленийСФ.Добавить(
				ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПодчСтрокаПервойМнЧУр1.Данные));
			КонецЦикла;
			
			// Вывод данных исправлений в счете-фактуре и исправлений в относящихся к нему корректировочных счетах-фактурах.
			//
			КоличествоСтрокИсправлений
			= Макс(МассивДанныхИсправленийСФ.Количество(), МассивДанныхИсправленийКоррСФ.Количество());
			
			Для НомИсправления = 1 По КоличествоСтрокИсправлений Цикл
				
				Для ИндПараметра = 0 По СтрокаИсправление.Параметры.Количество() - 1 Цикл
					СтрокаИсправление.Параметры[ИндПараметра] = Неопределено;
				КонецЦикла;
				
				Если НомИсправления <= МассивДанныхИсправленийСФ.Количество()
					И СтруктураЗаполнена(МассивДанныхИсправленийСФ[НомИсправления - 1]) Тогда
					СтрокаИсправление.Параметры.Заполнить(МассивДанныхИсправленийСФ[НомИсправления - 1]);
				Иначе
					Для каждого Пок Из МассивДанныхИсправленийСФ[0] Цикл
						СтрокаИсправление.Параметры[Пок.Ключ] = "-";
					КонецЦикла;
				КонецЕсли;
				
				Если НомИсправления <= МассивДанныхИсправленийКоррСФ.Количество()
					И СтруктураЗаполнена(МассивДанныхИсправленийКоррСФ[НомИсправления - 1]) Тогда
					СтрокаИсправление.Параметры.Заполнить(МассивДанныхИсправленийКоррСФ[НомИсправления - 1]);
				Иначе
					Для каждого Пок Из МассивДанныхИсправленийКоррСФ[0] Цикл
						СтрокаИсправление.Параметры[Пок.Ключ] = "-";
					КонецЦикла;
				КонецЕсли;
				
				МассивПроверки.Очистить();
				Если НомИсправления = 1 Тогда
					МассивПроверки.Добавить(ШапкаИсправление);
					МассивПроверки.Добавить(ПодШапкаИсправление);
				КонецЕсли;
				МассивПроверки.Добавить(СтрокаИсправление);
				МассивПроверки.Добавить(Подвал);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					
					ПечФорма.Вывести(Подвал);
					
					СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
					ЭтаФорма.Заголовок, СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ПечФорма.Очистить();
					
					ПечФорма.Вывести(РазделительВНачалеСтраницы);
					
					Если НомИсправления = 1 Тогда
						
						// Вывод секции "ШапкаИсправление".
						ПечФорма.Вывести(ШапкаИсправление);
						ПечФормаОблШапкаИсправление = ПечФорма.Область("ШапкаИсправление");
						ПечФормаОблШапкаИсправление.Имя = "_" + Формат(ПечФормаОблШапкаИсправление.Верх, "ЧГ=");
						
					КонецЕсли;
					
					// Вывод секции "ПодШапкаИсправление".
					ПечФорма.Вывести(ПодШапкаИсправление);
					ПечФормаОблПодШапкаИсправление = ПечФорма.Область("ПодШапкаИсправление");
					ПечФормаОблПодШапкаИсправление.Имя = "_" + Формат(ПечФормаОблПодШапкаИсправление.Верх, "ЧГ=");
					
					НомерСтраницы = НомерСтраницы + 1;
					
				Иначе
					
					Если НомИсправления = 1 Тогда
						
						// Вывод секции "ШапкаИсправление".
						ПечФорма.Вывести(ШапкаИсправление);
						ПечФормаОблШапкаИсправление = ПечФорма.Область("ШапкаИсправление");
						ПечФормаОблШапкаИсправление.Имя = "_" + Формат(ПечФормаОблШапкаИсправление.Верх, "ЧГ=");
						
						// Вывод секции "ПодШапкаИсправление".
						ПечФорма.Вывести(ПодШапкаИсправление);
						ПечФормаОблПодШапкаИсправление = ПечФорма.Область("ПодШапкаИсправление");
						ПечФормаОблПодШапкаИсправление.Имя = "_" + Формат(ПечФормаОблПодШапкаИсправление.Верх, "ЧГ=");
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Вывод секции "СтрокаИсправление".
				ПечФорма.Вывести(СтрокаИсправление);
				ПечФормаОблСтрокаИсправление = ПечФорма.Область("СтрокаИсправление");
				ПечФормаОблСтрокаИсправление.Имя = "_" + Формат(ПечФормаОблСтрокаИсправление.Верх, "ЧГ=");
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПечФорма.Вывести(Подвал);
	
	СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	ЭтаФорма.Заголовок, СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Функция СтруктураЗаполнена(ПроверяемаяСтруктура)
	
	Для каждого Пок Из ПроверяемаяСтруктура Цикл
		Если ЗначениеЗаполнено(Пок.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		Форма.ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	ДокументПредставителя = "";
	
	// Выяснение, есть ли представитель.
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		Иначе
			Подписант = ТабличныйДокумент.Области.НаимОрг.Значение;
		КонецЕсли;
	Иначе
		// Представитель есть, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			Если ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Реестр" Тогда
				
				ДеревоДанныхРеестр = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
				
				КолСтрокВДеревеДанныхРеестр = Макс(ДеревоДанныхРеестр.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРеестр = 1 По КолСтрокВДеревеДанныхРеестр Цикл
					
					ЭлементРеестр = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРеестр.КолонкаРазделыОтчета              = "Стр. " + Формат(НомерСтраницыРеестр, "ЧГ=");
					ЭлементРеестр.КолонкаРазделыОтчетаСокрНаим      = "Реестр";
					ЭлементРеестр.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРеестр;
					ЭлементРеестр.ИндексКартинки                    = 0;
					ЭлементРеестр.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРеестр.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Реестр" Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		#КонецЕсли
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
		
		#Если ВебКлиент Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
		#КонецЕсли
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	УправлениеВидимостьюСсылкиУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСсылкиУдалитьСтраницу()
	
	Обл1 = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Обл2 = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	
	Если Обл1 <> Неопределено И Обл2 <> Неопределено Тогда
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Обл1.Текст = "";
			Обл1.Гиперссылка = Ложь;
			Обл2.Текст = "";
			Обл2.Гиперссылка = Ложь;
		Иначе
			БолееОднойСтраницыВРазделе
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1;
			Обл1.Текст = ?(БолееОднойСтраницыВРазделе, "х", "");
			Обл1.Гиперссылка = ?(БолееОднойСтраницыВРазделе, Истина, Ложь);
			Обл2.Текст = ?(БолееОднойСтраницыВРазделе, "Удалить страницу", "");
			Обл2.Гиперссылка = ?(БолееОднойСтраницыВРазделе, Истина, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеСтатусаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции