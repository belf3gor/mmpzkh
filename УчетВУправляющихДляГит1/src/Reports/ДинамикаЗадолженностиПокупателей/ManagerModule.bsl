#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);

	Возврат Результат;

КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат "Динамика задолженности покупателей" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ПросроченнаяЗадолженность = Новый ТаблицаЗначений;
	КолонкиЗадолженности = ПросроченнаяЗадолженность.Колонки;
	КолонкиЗадолженности.Добавить("Период");
	КолонкиЗадолженности.Добавить("Организация");
	КолонкиЗадолженности.Добавить("Подразделение");
	КолонкиЗадолженности.Добавить("Контрагент");
	КолонкиЗадолженности.Добавить("Договор");
	КолонкиЗадолженности.Добавить("ПросроченнаяЗадолженность");
	КолонкиЗадолженности.Добавить("ПросроченнаяЗадолженностьНачальныйОстаток");
	
	ВнешниеНаборыДанных = Новый Структура("ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	Если Не ПараметрыОтчета.ПоказательПросроченнаяЗадолженность Тогда
		Возврат ВнешниеНаборыДанных;
	КонецЕсли;
	
	ТаблицаПериоды = Новый ТаблицаЗначений;
	ТаблицаПериоды.Колонки.Добавить("ПериодНачало");
	ТаблицаПериоды.Колонки.Добавить("ПериодКонец");
	
	НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
	КонецПериода  = КонецДня(?(ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода), ПараметрыОтчета.КонецПериода, Дата(3999, 1, 1)));
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(
									ПараметрыОтчета.Организация,
									ПараметрыОтчета.ВключатьОбособленныеПодразделения);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Хозрасчетный.Период) КАК НачалоПериода,
	|	МАКСИМУМ(Хозрасчетный.Период) КАК КонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Организация В(&СписокОрганизаций)";
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий()
	   И ЗначениеЗаполнено(Выборка.НачалоПериода) Тогда
		НачалоПериода = Макс(НачалоПериода, Выборка.НачалоПериода);
		КонецПериода  = Мин(КонецПериода, Выборка.КонецПериода);
	КонецЕсли;
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	КонецПериода  = БухгалтерскиеОтчетыКлиентСервер.КонецПериода(КонецПериода, Периодичность);
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода)
	   И КонецПериода < ПараметрыОтчета.КонецПериода Тогда
		КонецПериода = ПараметрыОтчета.КонецПериода;
	КонецЕсли;
	
	ТекущаяДата = НачалоПериода;
	
	Пока ТекущаяДата <= КонецПериода Цикл
		НоваяСтрока = ТаблицаПериоды.Добавить();
		Если Периодичность = 6 Тогда // День
			НоваяСтрока.ПериодНачало = НачалоДня(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецДня(ТекущаяДата);
			
			ТекущаяДата = ТекущаяДата + 86400;
		ИначеЕсли Периодичность = 7 Тогда // Неделя
			НоваяСтрока.ПериодНачало = НачалоНедели(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецНедели(ТекущаяДата);
			
			ТекущаяДата = КонецНедели(ТекущаяДата) + 86400 * 7;
		ИначеЕсли Периодичность = 9 Тогда // Месяц
			НоваяСтрока.ПериодНачало = НачалоМесяца(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецМесяца(ТекущаяДата);
			
			ТекущаяДата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), 1);
		ИначеЕсли Периодичность = 10 Тогда // Квартал
			НоваяСтрока.ПериодНачало = НачалоКвартала(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецКвартала(ТекущаяДата);
			
			ТекущаяДата = ДобавитьМесяц(НачалоКвартала(ТекущаяДата), 3);
		ИначеЕсли Периодичность = 11 Тогда // Полугодие
			Если Месяц(ТекущаяДата) > 6 Тогда
				НоваяСтрока.ПериодНачало = НачалоДня(Дата(Год(ТекущаяДата), 7, 1));
				НоваяСтрока.ПериодКонец  = КонецГода(ТекущаяДата);
			Иначе
				НоваяСтрока.ПериодНачало = НачалоДня(Дата(Год(ТекущаяДата), 1, 1));
				НоваяСтрока.ПериодКонец  = КонецМесяца(Дата(Год(ТекущаяДата), 6, 1));
			КонецЕсли;
			
			ТекущаяДата = ДобавитьМесяц(ТекущаяДата, 6);
		ИначеЕсли Периодичность = 12 Тогда // Год
			НоваяСтрока.ПериодНачало = НачалоГода(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецГода(ТекущаяДата);
			
			ТекущаяДата = ДобавитьМесяц(НачалоГода(ТекущаяДата), 12);
		КонецЕсли;			
	КонецЦикла;
	
	ПараметрыЗадолженности = Новый Структура;
	ПараметрыЗадолженности.Вставить("Организация", СписокДоступныхОрганизаций);
	
	// Получаем список счетов с субконто контрагенты и договора.
	ИсключенныеСчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключенныеСчета", ИсключенныеСчета);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетаКонтрагентов.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаДоговоров
	|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	|ГДЕ
	|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И СчетаДоговоров.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И НЕ СчетаКонтрагентов.Ссылка.Забалансовый
	|	И НЕ СчетаКонтрагентов.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)";
	ПараметрыЗадолженности.Вставить("СчетаКД", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ПараметрыЗадолженности.Вставить("ВидыСубконтоКД", ВидыСубконтоКД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Период Из ТаблицаПериоды Цикл
		ВременнаяТаблица = ПолучитьПросроченнуюЗадолженность(ПараметрыЗадолженности, Период.ПериодКонец);			
		Для Каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
			НоваяСтрока = ПросроченнаяЗадолженность.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Период = Период.ПериодНачало;
			НоваяСтрока.ПросроченнаяЗадолженностьНачальныйОстаток = НоваяСтрока.ПросроченнаяЗадолженность;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВнешниеНаборыДанных;
		                                
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконтоКД", ВидыСубконтоКД);
	
	ИсключенныеСчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ИсключенныеСчета", ИсключенныеСчета);
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		НачалоПериода = БухгалтерскиеОтчетыКлиентСервер.НачалоПериода(ПараметрыОтчета.НачалоПериода, Периодичность);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
		ПараметрыОтчета.НачалоПериода = НачалоПериода;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		КонецПериода = БухгалтерскиеОтчетыКлиентСервер.КонецПериода(ПараметрыОтчета.КонецПериода, Периодичность);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецПериода);
		ПараметрыОтчета.КонецПериода = КонецПериода;
	КонецЕсли;
	
	Период   = Неопределено;
	Диаграмма = Неопределено;
	
	ВыводитьДиаграмму = Неопределено;
	
	Если НЕ ПараметрыОтчета.Свойство("ВыводитьДиаграмму", ВыводитьДиаграмму) Тогда
		
		ВыводитьДиаграмму = Истина;
		
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл		
		Если ЭлементСтруктуры.Имя = "Период" Тогда
			Период = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "Диаграмма" Тогда
			Диаграмма = ЭлементСтруктуры;
		КонецЕсли;		
	КонецЦикла;
	
	Если Диаграмма <> Неопределено Тогда
		
		Если ВыводитьДиаграмму Тогда
			
			Диаграмма.Точки.Очистить();
			ГруппировкаПериод = Диаграмма.Точки.Добавить();
			ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
			ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
			ПолеГруппировки.НачалоПериода =	НачалоДня(ПараметрыОтчета.НачалоПериода);
			ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
			
			ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
		Иначе
			
			Диаграмма.Использование = ВыводитьДиаграмму;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Период <> Неопределено Тогда
		Период.ПоляГруппировки.Элементы.Очистить();
		ПолеГруппировки = Период.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
		ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
		ПолеГруппировки.НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
		ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
		
		Период.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Период.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	Если ПараметрыОтчета.ПоказательЗадолженность Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Задолженность");
	КонецЕсли;
	Если ПараметрыОтчета.ПоказательПросроченнаяЗадолженность Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПросроченнаяЗадолженность");
	КонецЕсли;
		
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	ВывестиПримечания(ПараметрыОтчета, Результат);	
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаЗадолженностиПокупателей").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.РасчетыСПокупателями, "");
	
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
		
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
   	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("Организация", ОтчетОбъект.Организация);
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		
	Раздел        = Неопределено;
	Период        = Неопределено;
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ОтчетОбъект.Периодичность, ОтчетОбъект.НачалоПериода, ОтчетОбъект.КонецПериода);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);

 	Для Каждого Отбор Из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
			Если Отбор.Значение = NULL тогда
				Продолжить;
			КонецЕсли;
			
			Если Отбор.Поле = "Подразделение" Тогда
				Если ЗначениеЗаполнено(Отбор.Значение) Тогда
					ДополнительныеСвойства.Вставить("Подразделение", Отбор.Значение);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				КонецЕсли;
			ИначеЕсли Отбор.Поле = "Организация" Тогда
				ДополнительныеСвойства.Вставить("Организация", Отбор.Значение);
			ИначеЕсли Отбор.Поле = "Период" Тогда
				Период = Отбор.Значение;
			ИначеЕсли  Отбор.Поле = "Раздел" Тогда
				Раздел = Отбор.Значение;
			Иначе
				Если Отбор.Иерархия Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
				Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
					Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
						ДополнительныеСвойства.Вставить("Организация"                      , ЭлементОтбора.ПравоеЗначение);
						ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
				ДополнительныеСвойства.Вставить("Организация"                      , Отбор.ПравоеЗначение);
				ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
			ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
				И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ДополнительныеСвойства.Вставить("Подразделение", Отбор.ПравоеЗначение);
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
 	Если Период <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("Период", БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, Периодичность));
	Иначе
		ДополнительныеСвойства.Вставить("Период", ОтчетОбъект.КонецПериода);
	КонецЕсли;
	ДополнительныеСвойства.Вставить("КлючВарианта", "ЗадолженностьПокупателейПоСрокамДолга");
	
	СписокПунктовМеню = Новый СписокЗначений;
	СписокПунктовМеню.Добавить("ЗадолженностьПокупателейПоСрокамДолга", "Задолженность покупателей по срокам долга");
	
	НастройкиРасшифровки = Новый Структура("ЗадолженностьПокупателейПоСрокамДолга", ПользовательскиеНастройки);
	
	ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("Задолженность");
	НаборПоказателей.Добавить("ПросроченнаяЗадолженность");

	Возврат НаборПоказателей;
	
КонецФункции

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	Для Каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Вставить("Показатель" + Показатель, Ложь);
	КонецЦикла;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("Периодичность"                    , 0);
	КоллекцияНастроек.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	КоллекцияНастроек.Вставить("ВыводитьДиаграмму"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПримечания"               , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"        , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"         , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	
	Возврат ПараметрыОтчета;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьПросроченнуюЗадолженность(ПараметрыЗадолженности, КонДата)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                      ПараметрыЗадолженности.Организация);
	Запрос.УстановитьПараметр("СчетаКД",                          ПараметрыЗадолженности.СчетаКД);
	Запрос.УстановитьПараметр("ВидыСубконтоКД",                   ПараметрыЗадолженности.ВидыСубконтоКД);
	Запрос.УстановитьПараметр("ГраницаОстатков",                  Новый Граница(КонецДня(КонДата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СтандартныйСрокОплатыПокупателей", Константы.СрокОплатыПокупателей.Получить());
	Запрос.УстановитьПараметр("КонецИнтервала",                   КонецДня(КонДата));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Договор КАК Договор,
	|	ЕСТЬNULL(ВложенныйЗапрос.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
	|	ВложенныйЗапрос.СуммаОстаток КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолга
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыОстатки.Организация КАК Организация,
	|		ВзаиморасчетыОстатки.Подразделение КАК Подразделение,
	|		ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
	|		ВзаиморасчетыОстатки.Субконто2 КАК Договор,
	|		ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|				ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|			ИНАЧЕ &СтандартныйСрокОплатыПокупателей
	|		КОНЕЦ КАК СрокОплаты,
	|		ВзаиморасчетыОстатки.Счет КАК Счет,
	|		ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокДт КАК СуммаОстаток
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ГраницаОстатков,
	|				Счет В (&СчетаКД),
	|				&ВидыСубконтоКД,
	|				ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку))
	|					И Организация В (&Организация)) КАК ВзаиморасчетыОстатки) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиДолга.СрокОплаты КАК СрокОплаты
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга
	|
	|УПОРЯДОЧИТЬ ПО
	|	СрокОплаты";
	
	МассивСроковОплаты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СрокОплаты");
	Если МассивСроковОплаты.Количество() = 0 Тогда
		МассивСроковОплаты.Добавить(0);
	КонецЕсли;
	
	ТекстОборотыПоСроку = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация КАК Организация,
	|	ЕСТЬNULL(ВзаиморасчетыОбороты.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга
	|ПОМЕСТИТЬ Обороты1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала,
	|			,
	|			Счет В (&СчетаКД),
	|			&ВидыСубконтоКД,
	|			(Субконто1, Субконто2) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОстаткиДолга.Контрагент,
	|						ОстаткиДолга.Договор
	|					ИЗ
	|						ОстаткиДолга КАК ОстаткиДолга
	|					ГДЕ
	|						ОстаткиДолга.СрокОплаты = &СрокОплаты1)
	|				И Организация В (&Организация),
	|			,
	|			) КАК ВзаиморасчетыОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация,
	|	ЕСТЬNULL(ВзаиморасчетыОбороты.Подразделение, НЕОПРЕДЕЛЕНО),
	|	ВзаиморасчетыОбороты.Субконто1,
	|	ВзаиморасчетыОбороты.Субконто2,
	|	-(ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала,
	|			,
	|			Счет В (&СчетаКД),
	|			&ВидыСубконтоКД,
	|			(Субконто1, Субконто2) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОстаткиДолга.Контрагент,
	|						ОстаткиДолга.Договор
	|					ИЗ
	|						ОстаткиДолга КАК ОстаткиДолга
	|					ГДЕ
	|						ОстаткиДолга.СрокОплаты = &СрокОплаты1)
	|				И Организация В (&Организация),
	|			,
	|			&ВидыСубконтоКД) КАК ВзаиморасчетыОбороты
	|ГДЕ
	|	ВзаиморасчетыОбороты.Субконто1 = ВзаиморасчетыОбороты.КорСубконто1
	|	И ВзаиморасчетыОбороты.Субконто2 = ВзаиморасчетыОбороты.КорСубконто2";
		
	МаксКоличествоЧастей = 10;
	КоличествоСроковОплаты = МассивСроковОплаты.Количество();
	ОстатокОтДеления = КоличествоСроковОплаты % МаксКоличествоЧастей;
	
	КоличествоЧастей = (КоличествоСроковОплаты - ОстатокОтДеления) / МаксКоличествоЧастей + ?(ОстатокОтДеления > 0, 1, 0);
	ТекстОборотыПоВсемСрокам = "";
	ТекстВсеОбороты = "";
	Для ИндексЧасти = 1 По КоличествоЧастей Цикл
		НачальныйИндекс = МаксКоличествоЧастей * (ИндексЧасти - 1) + 1;
		КонечныйИндекс  = Мин(КоличествоСроковОплаты, МаксКоличествоЧастей * ИндексЧасти);
		ТекстОбороты = "";
		
		Для ИндексЗапроса = НачальныйИндекс По КонечныйИндекс Цикл
			СрокОплаты = МассивСроковОплаты[ИндексЗапроса - 1];
			Запрос.УстановитьПараметр("НачалоИнтервала" + ИндексЗапроса, НачалоДня(КонДата - (СрокОплаты - 1)* 60*60*24));
			Запрос.УстановитьПараметр("СрокОплаты" + ИндексЗапроса, СрокОплаты);
			
			ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСроку, "&НачалоИнтервала1", "&НачалоИнтервала" + ИндексЗапроса);
			ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "&СрокОплаты1", "&СрокОплаты" + ИндексЗапроса);
			Если ИндексЗапроса = НачальныйИндекс Тогда
				ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "ПОМЕСТИТЬ Обороты1", "ПОМЕСТИТЬ Обороты" + ИндексЧасти);
			Иначе
				ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "ПОМЕСТИТЬ Обороты1", "");
			КонецЕсли;
			
			ТекстОбороты = ТекстОбороты
			+ ?(ПустаяСтрока(ТекстОбороты), "", "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|") 
			+ ТекстОборотыПоСрокуНом;
			
		КонецЦикла;
		
		ТекстВсеОбороты = ТекстВсеОбороты + ТекстОбороты + " 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Подразделение,
		|	Контрагент,
		|	Договор"
		+ ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ТекстОборотыПоВсемСрокам = ТекстОборотыПоВсемСрокам
		+ ?(ИндексЧасти = 1, "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|")	+
		"ВЫБРАТЬ
		|	Обороты" + ИндексЧасти + ".Организация КАК Организация,
		|	Обороты" + ИндексЧасти + ".Подразделение КАК Подразделение,
		|	Обороты" + ИндексЧасти + ".Контрагент КАК Контрагент,
		|	Обороты" + ИндексЧасти + ".Договор КАК Договор,
		|	Обороты" + ИндексЧасти + ".УвеличениеДолга КАК УвеличениеДолга"
		+ ?(ИндексЧасти = 1, "
		|ПОМЕСТИТЬ ОборотыПоВсемСрокам", "") + "
		|ИЗ
		|	Обороты" + ИндексЧасти + " КАК Обороты" + ИндексЧасти;
		
	КонецЦикла;
	
	ТекстОборотыПоВсемСрокам = ТекстОборотыПоВсемСрокам + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	Контрагент,
	|	Договор"
	+ ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ТекстПросрочено =
	"ВЫБРАТЬ
	|	ОстаткиИОбороты.Организация,
	|	ОстаткиИОбороты.Подразделение,
	|	ОстаткиИОбороты.Контрагент,
	|	ОстаткиИОбороты.Договор,
	|	ОстаткиИОбороты.СрокОплаты,
	|	ОстаткиИОбороты.ОстатокДолга,
	|	ОстаткиИОбороты.ОстатокДолга - ВЫБОР
	|		КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|			ТОГДА ОстаткиИОбороты.ОстатокДолга
	|		ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|	КОНЕЦ КАК ПросроченнаяЗадолженность
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиДолга.Организация КАК Организация,
	|		ОстаткиДолга.Подразделение КАК Подразделение,
	|		ОстаткиДолга.Контрагент КАК Контрагент,
	|		ОстаткиДолга.Договор КАК Договор,
	|		ОстаткиДолга.СрокОплаты КАК СрокОплаты,
	|		ОстаткиДолга.ОстатокДолга КАК ОстатокДолга,
	|		СУММА(ЕСТЬNULL(ОборотыПоВсемСрокам.УвеличениеДолга, 0)) КАК УвеличениеДолга
	|	ИЗ
	|		ОстаткиДолга КАК ОстаткиДолга
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОборотыПоВсемСрокам КАК ОборотыПоВсемСрокам
	|			ПО ОстаткиДолга.Организация = ОборотыПоВсемСрокам.Организация
	|				И ОстаткиДолга.Подразделение = ОборотыПоВсемСрокам.Подразделение
	|				И ОстаткиДолга.Контрагент = ОборотыПоВсемСрокам.Контрагент
	|				И ОстаткиДолга.Договор = ОборотыПоВсемСрокам.Договор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОстаткиДолга.Организация,
	|		ОстаткиДолга.Подразделение,
	|		ОстаткиДолга.Контрагент,
	|		ОстаткиДолга.Договор,
	|		ОстаткиДолга.ОстатокДолга,
	|		ОстаткиДолга.СрокОплаты) КАК ОстаткиИОбороты
	|ГДЕ
	|	ОстаткиИОбороты.ОстатокДолга - ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ > 0";
	
	Запрос.Текст = ТекстВсеОбороты + ТекстОборотыПоВсемСрокам + ТекстПросрочено;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВывестиПримечания(ПараметрыОтчета, Результат)
	
	Если НЕ ПараметрыОтчета.ВыводитьПримечания Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьПодвал Тогда
		ОбластьПодписи = Результат.Области.Найти("Подписи");
		ЗавершениеТаблицы = ОбластьПодписи.Верх;
	Иначе
		ЗавершениеТаблицы = Результат.ВысотаТаблицы;
	КонецЕсли;
	
	СрокОплаты = Константы.СрокОплатыПокупателей.Получить();
	
	Примечания = ПолучитьМакет("Примечания");
	Примечания.Параметры.СрокОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 дн.'"), СрокОплаты);
	Примечания.Параметры.Ссылка = "e1cib/command/ОбщаяКоманда.СрокиОплатыПокупателями";
	
	Примечание = Примечания.Область(?(СрокОплаты = 0, "СрокОплатыНеУстановлен", "УстановленСрокОплаты"));
		
	Результат.ВставитьОбласть(Примечание, Результат.Область("R" + Строка(ЗавершениеТаблицы)),, Истина);
	
КонецПроцедуры

#КонецЕсли