#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв4") Тогда
		
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/10/2018");
		
		СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел4", "П00004000");
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв3") Тогда
		
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/07/2018");
		
		СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел4", "П00004000");
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв1") Тогда
		
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/2018");
		
		СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
		СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
		
		СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел4", "П00004000");
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2017Кв1") Тогда
		
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/2017");
		
		СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
		СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей", "СоставПоказателей" + Прав(СокрЛП(ИмяФормы), 7));
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Декларация по ЕНВД");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел1",   "П00001000");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел2_1", "П0000200062");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел2_2", "П0000200065");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("СообщатьОНезаполненномКодеПоОКТМОВРазделе2", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчетаДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("МногострочныеИсключения");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("ОбязРазделов");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("РегистрацияВНалОргане");
	СтруктураРеквизитовФормы.Вставить("ПеречисленияЮрФизЛицо");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ПолноеНаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияОтчета");
	СтруктураРеквизитовФормы.Вставить("мДанныеОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЕстьВыбранные");
	СтруктураРеквизитовФормы.Вставить("мИнтервалАвтосохранения");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("ОпределятьТрудНаемныхРабочих");
	СтруктураРеквизитовФормы.Вставить("ИПИспользуетТрудНаемныхРаботников");
	СтруктураРеквизитовФормы.Вставить("РасчетныйКалендарь");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
			
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем СтруктураРеквизитовФормы;
		
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы	      = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	ПроверятьБлокировки = Неопределено;
	Параметры.Свойство("ПроверятьБлокировки", ПроверятьБлокировки);
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
																  
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
															  
	СформироватьСтруктуруПоказателей(ИмяФормы, СтруктураРеквизитовФормы);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы, СтруктураРеквизитовФормы);
		
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ВыгрузкаВозможна(ИмяФормы,
							 ПараметрыВыгрузки,
							 РезультатВыгрузки,
							 СтруктураРеквизитовФормы) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы);
										
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(РезультатВыгрузки, ДеревоВыгрузки) Тогда
											
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
												
	КодировкаФайлаВыгрузки = "windows-1251";									
										
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки);
																
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ЕНВД");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв1")
		И ПроверятьБлокировки <> Ложь
		И ЗаполненРаздел4(ИмяФормы, СтруктураРеквизитовФормы)
		И ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		
		ТекстВыгрузки = Новый Массив;
		ТекстВыгрузки.Добавить(РезультатВыгрузки);
		ТекстВыгрузки.Добавить(ВыгрузкаПояснительнойЗаписки(ИмяФормы, СтруктураРеквизитовФормы));
		Возврат ТекстВыгрузки;
		
	Иначе
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
КонецФункции

Функция ВыгрузкаПояснительнойЗаписки(ИмяФормы, СтруктураРеквизитовФормы)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеТитульногоЛиста",
	СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаТитульный);
	СтруктураПараметров.Вставить("ДанныеРаздела4",
	СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел4);
	
	ТабличныйДокументПояснительнойЗаписки = ТабличныйДокументПояснительнойЗаписки(ИмяФормы, СтруктураПараметров);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ТабличныйДокументПояснительнойЗаписки.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	СтруктПараметров = Новый Структура;
	СтруктПараметров.Вставить("ДатаНачала", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала);
	СтруктПараметров.Вставить("ДатаОкончания", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	СтруктПараметров.Вставить("НаимОрганизации", СтруктураРеквизитовФормы.мСохраненныйДок.Организация.Наименование);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИмяФайлаПояснительнойЗаписки(ИмяФормы, СтруктПараметров));
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ПояснительнаяЗапискаКЕНВД");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ТабличныйДокументПояснительнойЗаписки(ИмяФормы, СтруктураПараметров) Экспорт
	
	ДанныеРаздела4 = СтруктураПараметров.ДанныеРаздела4;
	
	ПечФорма = ЭтотОбъект.ПолучитьМакет("ПечатныйБланк2018Кв1_ПояснительнаяЗаписка");
	ПечФорма.ПолеСверху = 5;
	ПечФорма.ПолеСправа = 5;
	ПечФорма.ПолеСнизу  = 5;
	ПечФорма.ПолеСлева  = 5;
	ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечФорма.Автомасштаб = Истина;
	
	Шапка = ПечФорма.Получитьобласть("Шапка");
	Шапка.Параметры.Заполнить(СтруктураПараметров.ДанныеТитульногоЛиста);
	
	Подвал = ПечФорма.Получитьобласть("Подвал");
	Подвал.Параметры.П000040015003 = ДанныеРаздела4.П000040015003;
	
	СтрокаДокумент = ПечФорма.Получитьобласть("СтрокаДокумент");
	
	МассивПроверки = Новый Массив;
	
	ПечФорма.Очистить();
	
	ПечФорма.Вывести(Шапка);
	
	Ном = 1;
	Постфикс = "_1";
	
	Пока ДанныеРаздела4.Свойство("П000040001003" + Постфикс) Цикл
		
		ПоследняяСтрока = НЕ ДанныеРаздела4.Свойство("П000040001003" + "_" + Формат(Ном + 1, "ЧГ="));
		
		СтрокаДокумент.Параметры.П000040001003 = ДанныеРаздела4["П000040001003" + Постфикс];
		СтрокаДокумент.Параметры.П000040002003 = ДанныеРаздела4["П000040002003" + Постфикс];
		СтрокаДокумент.Параметры.П000040003003 = ДанныеРаздела4["П000040003003" + Постфикс];
		СтрокаДокумент.Параметры.П000040004003 = ДанныеРаздела4["П000040004003" + Постфикс];
		СтрокаДокумент.Параметры.П000040005003 = ДанныеРаздела4["П000040005003" + Постфикс];
		
		МассивПроверки.Очистить();
		
		Если ПоследняяСтрока Тогда
			МассивПроверки.Добавить(СтрокаДокумент);
			МассивПроверки.Добавить(Подвал);
		Иначе
			МассивПроверки.Добавить(СтрокаДокумент);
		КонецЕсли;
		
		Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
			ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПечФорма.Вывести(СтрокаДокумент);
		
		Ном = Ном + 1;
		Постфикс = "_" + Формат(Ном, "ЧГ=");
		
	КонецЦикла;
	
	ПечФорма.Вывести(Подвал);
	
	Возврат ПечФорма;
	
КонецФункции

Функция ЗаполненРаздел4(ИмяФормы, СтруктураРеквизитовФормы, ИмяЗаполненногоПоказателя = "")
	
	Для каждого Пок Из СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел4 Цикл
		Если ЗначениеЗаполнено(Пок.Значение)
			И НЕ (СтрНачинаетсяС(Пок.Ключ, "ИНН1") ИЛИ СтрНачинаетсяС(Пок.Ключ, "КПП1")) Тогда // версия данных старого образца
			ИмяЗаполненногоПоказателя = Пок.Ключ;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИмяФайлаПояснительнойЗаписки(ИмяФормы, СтруктураПараметров) Экспорт
	
	Возврат СформироватьИмяФайла("Пояснительная записка к декларации по ЕНВД за "
	+ ПредставлениеПериода(НачалоДня(СтруктураПараметров.ДатаНачала),
	КонецДня(СтруктураПараметров.ДатаОкончания), "ФП = Истина")
	+ " (" + СтруктураПараметров.НаимОрганизации + ").pdf");
	
КонецФункции

Функция СформироватьИмяФайла(ИсходноеИмяФайла)
	
	ИмяФайла = СтрЗаменить(ИсходноеИмяФайла, "/", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, """","_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");
	
	ИмяФайла = СтрЗаменить(ИмяФайла, Символы.ПС, " ");
	
	Возврат СтрЗаменить(ИмяФайла, "|", "_");
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы.мДанныеОтчета = Новый Структура;
			
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
						
		СтруктураРеквизитовФормы.мДанныеОтчета.Вставить(Раздел.Ключ,
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
	КонецЦикла;
				
	Для Каждого Раздел Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
						
		Для Каждого Лист Из Раздел.Значение Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		
		СтруктураРеквизитовФормы.мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
		
	КонецЦикла;	
						
КонецПроцедуры

Функция СформироватьСтруктуруПараметров(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
														   
	Титульный = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2017Кв1") Тогда
		ПараметрыВыгрузки.Вставить("ОКВЭДОрг", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ВерсПрог",	   РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",	   Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",	   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",	   СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",	   Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",	   СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ТелОрг",	   СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",	   СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",	   СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",	   СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(
		СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ФормаРеорганизации",   СокрЛП(Титульный.ФормаРеорганизации));
	ПараметрыВыгрузки.Вставить("РеорганизацияИНН",     СокрЛП(Титульный.РеорганизацияИНН));
	ПараметрыВыгрузки.Вставить("РеорганизацияКПП",     СокрЛП(Титульный.РеорганизацияКПП));
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	       СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",	 ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",	     ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.мСохраненныйДок.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.мСохраненныйДок.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",	  "Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",	  ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",	  ?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",	  "Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",	  ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",	  СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",	 ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",		 ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_ENVD");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ЕНВД");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
					  ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
					  СокрЛП(ПараметрыВыгрузки.ИННОрг),
					  СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции
		
Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв4") Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки508");
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв3") Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки509");
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2017Кв1") Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки507");
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость
			   И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность),
										?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ВыгрузкаВозможна(ИмяФормы,
						 ПараметрыВыгрузки,
						 РезультатВыгрузки,
						 СтруктураРеквизитовФормы) Экспорт
						 
	СтатусПроверки = Истина;
	
	СочетаниеРазделов = Новый ТаблицаЗначений;
	СочетаниеРазделов.Колонки.Добавить("ОКТМО");
	СочетаниеРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Страница", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("ИмяОбласти");
	СочетаниеРазделов.Колонки.Добавить("Счетчик1", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик2", Новый ОписаниеТипов("Число"));
	
	ПроверитьЗаполнение_ТитульныйЛист(ИмяФормы, РезультатВыгрузки, ПараметрыВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1(ИмяФормы, РезультатВыгрузки, СтруктураРеквизитовФормы, СочетаниеРазделов, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел2(ИмяФормы, РезультатВыгрузки, СтруктураРеквизитовФормы, СочетаниеРазделов, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел3(ИмяФормы, РезультатВыгрузки, СтруктураРеквизитовФормы, ПараметрыВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел4(ИмяФормы, РезультатВыгрузки, СтруктураРеквизитовФормы, ПараметрыВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_СочетаниеРазделов(ИмяФормы, РезультатВыгрузки, СочетаниеРазделов, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьЗаполнение_ТитульныйЛист(ИмяФормы, РезультатВыгрузки, ПараметрыВыгрузки, СтатусПроверки)
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда 
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ТекстОписанияОшибки = "Не задан ИНН индивидуального предпринимателя.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			ТекстОписанияОшибки = "Неверно задан ИНН индивидуального предпринимателя.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ТекстОписанияОшибки = "Не задан ИНН организации.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			ТекстОписанияОшибки = "Неверно задан ИНН организации.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		КонецЕсли;
		
		КПП = ПараметрыВыгрузки.КППОрг;
		ПричинаПостановки = Сред(КПП, 5, 2);
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			ТекстОписанияОшибки = "Не задан КПП организации.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		ИначеЕсли СтрДлина(КПП) <> 9 Тогда
			ТекстОписанияОшибки = "Неверно задан КПП организации.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		ИначеЕсли НЕ ЗначениеСодержитсяВСписке(ИмяФормы, ПричинаПостановки, "35, 77") Тогда
			ТекстОписанияОшибки = "Код причины постановки на учет в КПП организации должен быть равен 35 или 77.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПериодОтч) Тогда
		ТекстОписанияОшибки = "На титульном листе не задан код отчетного периода.";
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "Период1");
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ПериодОтч, "21, 22, 23, 24, 51, 54, 55, 56, 50")
		Тогда
		ТекстОписанияОшибки = "На титульном листе задан некорректный код отчетного периода.";
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "Период1");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		ТекстОписанияОшибки = "Не задан код налогового органа.";
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный",
								   "КодИМНС1");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		ТекстОписанияОшибки = "На титульном листе не задан код по месту учета.";
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ПоМесту");
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ПоМесту, "120, 214, 215, 245, 310, 320, 331") Тогда
		ТекстОписанияОшибки = "На титульном листе задан некорректный код по месту учета.";
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ПоМесту");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		ТекстОписанияОшибки = "Не указано полное наименование налогоплательщика";
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "НаимОрг");
	КонецЕсли;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2017Кв1") Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
			ТекстОписанияОшибки = "На титульном листе не задано значение кода вида деятельности по ОКВЭД.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОКВЭД");
		ИначеЕсли НЕ ОКВЭДСоответствуетТребованиям(ИмяФормы, ПараметрыВыгрузки.ОКВЭДОрг) Тогда
			ТекстОписанияОшибки = "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОКВЭД");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ФормаРеорганизации, "1, 2, 3, 5, 6") Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.РеорганизацияИНН) Тогда
			ТекстОписанияОшибки = "Не задан ИНН реорганизованной организации.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный",
									   "РеорганизацияИНН");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.РеорганизацияИНН) <> 10 Тогда
			ТекстОписанияОшибки = "Неверно задан ИНН реорганизованной организации.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный",
									   "РеорганизацияИНН");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.РеорганизацияКПП) Тогда
			ТекстОписанияОшибки = "Не задан КПП реорганизованной организации.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный",
									   "РеорганизацияКПП");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.РеорганизацияКПП) <> 9 Тогда
			ТекстОписанияОшибки = "Неверно задан КПП реорганизованной организации.";
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, ТекстОписанияОшибки, "Титульный",
									   "РеорганизацияКПП");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "Не задана фамилия подписанта.",
																   "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "Не задано имя подписанта.",
																   "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не задано наименование документа, удостоверяющего полномочия представителя.", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел1(ИмяФормы,
									  РезультатВыгрузки,
									  СтруктураРеквизитовФормы,
									  СочетаниеРазделов,
									  СтатусПроверки)
	
	ДанныеРаздела = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	
	НомерСтроки = 1;
	Постфикс = "_" + Формат(НомерСтроки, "ЧН=; ЧГ=0");
	
	Пока ДанныеРаздела.Свойство("П000010001003" + Постфикс) Цикл
		
		БлокЗаполнен = ЗначениеЗаполнено(ДанныеРаздела["П000010001003" + Постфикс])
			ИЛИ ЗначениеСуммыЗаполнено(ИмяФормы, ДанныеРаздела["П000010002003" + Постфикс]);
		
		Если БлокЗаполнен Тогда
			
			ИмяОбластиОКТМО = "П000010001003" + Постфикс;
			ОКТМО = СокрЛП(ДанныеРаздела[ИмяОбластиОКТМО]);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				ТекстОписанияОшибки = "В строке " + Формат(НомерСтроки, "ЧН=; ЧГ=0")
									+ " раздела 1 не" + ?(ДлинаОКТМО = 0, "", "верно")
									+ " задан код по ОКТМО.";
				СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки,
										   ТекстОписанияОшибки, "Раздел1", ИмяОбластиОКТМО);
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.Раздел     = 1;
			Сочетание.Страница   = 1;
			Сочетание.ИмяОбласти = ИмяОбластиОКТМО;
			Сочетание.Счетчик1   = 1;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + Формат(НомерСтроки, "ЧН=; ЧГ=0");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел2(ИмяФормы,
									  РезультатВыгрузки,
									  СтруктураРеквизитовФормы,
									  СочетаниеРазделов,
									  СтатусПроверки)
	
	ДанныеРаздела = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		Если ТипЗнч(ЛистРаздела.Данные) = Тип("Структура") Тогда
			ДанныеЛиста = ЛистРаздела.Данные;
		Иначе
			ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		КонецЕсли;
		
		НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
		
		Если ЗначениеЗаполнено(ДанныеЛиста.П000020001000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002001)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002002) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002004) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002005)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002006) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002007)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002008) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002009)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020003000) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020004003)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020007002) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020007003)
		 ИЛИ ЗначениеСуммыЗаполнено(ИмяФормы, ДанныеЛиста.П000020007004)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020008002) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020008003)
		 ИЛИ ЗначениеСуммыЗаполнено(ИмяФормы, ДанныеЛиста.П000020008004)
		 ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020009002) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020009003)
		 ИЛИ ЗначениеСуммыЗаполнено(ИмяФормы, ДанныеЛиста.П000020009004)
		 ИЛИ ЗначениеСуммыЗаполнено(ИмяФормы, ДанныеЛиста.П000020010003)
		 ИЛИ ЗначениеСуммыЗаполнено(ИмяФормы, ДанныеЛиста.П000020011003) Тогда
			
			П000020001000 = СокрЛП(ДанныеЛиста.П000020001000);
			ДлинаП000020001000 = СтрДлина(П000020001000);
			Если ДлинаП000020001000 <> 2 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020001000 = 0, "", "верно")
					+ " указано значение кода вида предпринимательской деятельности.", "Раздел2",
					"П000020001000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			П000020002002 = СокрЛП(ДанныеЛиста.П000020002002);
			ДлинаП000020002002 = СтрДлина(П000020002002);
			Если ДлинаП000020002002 <> 2 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(П000020002002) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаП000020002002 = 0, "", "верно")
					+ " указан код субъекта в адресе места осуществления предпринимательской деятельности.",
					"Раздел2", "П000020002002", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеЛиста.П000020003000);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаОКТМО = 0, "", "верно")
					+ " указан код по ОКТМО.", "Раздел2", "П000020003000", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ТаблЗначРаздел2 = ДанныеРаздела;
			
			Если НЕ ТипЗнч(ДанныеРаздела) = Тип("ТаблицаЗначений") Тогда
				ТаблЗначРаздел2 = ДанныеРаздела.Выгрузить();
			КонецЕсли;	
			
			// Анализ дат постановки/снятия с учета.
			Если НЕ ТаблЗначРаздел2.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
				
				ТаблицаПроверки = Новый ТаблицаЗначений;
				ТаблицаПроверки.Колонки.Добавить("ДатаСобытия", ОписаниеТиповДата);
				ТаблицаПроверки.Колонки.Добавить("ВидСобытия");
				
				ТаблицаПроверки.Индексы.Добавить("ДатаСобытия");
				
				Если ТипЗнч(ЛистРаздела.ДанныеДопстрок) = Тип("Структура") Тогда
					ДатыПостановкиНаУчет = ЛистРаздела.ДанныеДопстрок[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1];
				Иначе
					ДатыПостановкиНаУчет = ЛистРаздела.ДанныеДопстрок[0].Значение[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_1];
				КонецЕсли;
				
				Для Каждого ДатаПостановки Из ДатыПостановкиНаУчет Цикл
					ЗначениеДаты = ДатаПостановки["П000020006201"];
					Если ЗначениеЗаполнено(ЗначениеДаты) Тогда
						СтрокаПроверки = ТаблицаПроверки.Добавить();
						СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
						СтрокаПроверки.ВидСобытия  = "Постановка";
						
						Если НЕ (НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала) <= ЗначениеДаты
						   И ЗначениеДаты <= КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)) Тогда
							НомерСтроки = Формат(ДатыПостановкиНаУчет.Индекс(ДатаПостановки) + 1, "ЧН=; ЧГ=0");
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
								"На странице " + НомерЛиста
							  	+ " раздела 2 дата постановки на учет выходит за границы отчетного периода.",
							  	"Раздел2", "П000020006201_" + НомерСтроки, НомерЛиста);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
												
				Если ТипЗнч(ЛистРаздела.ДанныеДопстрок) = Тип("Структура") Тогда
					ДатыСнятияСУчета = ЛистРаздела.ДанныеДопстрок[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2];
				Иначе
					ДатыСнятияСУчета = ЛистРаздела.ДанныеДопстрок[0].Значение[СтруктураРеквизитовФормы.ИдМСЧ_Раздел2_2];
				КонецЕсли;
				
				Для Каждого ДатаСнятия Из ДатыСнятияСУчета Цикл
					ЗначениеДаты = ДатаСнятия["П000020006501"];
					Если ЗначениеЗаполнено(ЗначениеДаты) Тогда
						СтрокаПроверки = ТаблицаПроверки.Добавить();
						СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
						СтрокаПроверки.ВидСобытия  = "Снятие";
						
						Если НЕ (НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала) <= ЗначениеДаты
						   И ЗначениеДаты <= КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)) Тогда
							НомерСтроки = Формат(ДатыСнятияСУчета.Индекс(ДатаСнятия) + 1, "ЧН=; ЧГ=0");
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
								"На странице " + НомерЛиста
								+ " раздела 2 дата снятия с учета выходит за границы отчетного периода.",
								"Раздел2", "П000020006501_" + НомерСтроки, НомерЛиста);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаПроверки.Сортировать("ДатаСобытия");
				
				Если ТаблицаПроверки.Количество() > 1 Тогда
					ПредыдущееСобытие = ТаблицаПроверки[0].ВидСобытия;
					Для Инд = 1 По ТаблицаПроверки.Количество() - 1 Цикл
						ТекущееСобытие = ТаблицаПроверки[Инд].ВидСобытия;
						Если ПредыдущееСобытие = ТекущееСобытие Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
								"На странице " + НомерЛиста
								+ " раздела 2 задана некорректная последовательность событий постановки/снятия с учета.",
								"Раздел2", "П000020006201_1", НомерЛиста);
							СтатусПроверки = Ложь;
							Прервать;
						КонецЕсли;
						ПредыдущееСобытие = ТекущееСобытие;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			Ставка = ДанныеЛиста.П000020010503;
			Если НЕ (Ставка >= 7.5 И Ставка <= 15) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерЛиста + " раздела 2 не" + ?(Ставка = 0, "", "верно")
					+ " задана ставка налога. Возможные значения: от 7.5 до 15 процентов.",
					"Раздел2", "П000020010503", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.Раздел     = 2;
			Сочетание.Страница   = НомерЛиста;
			Сочетание.ИмяОбласти = "П000020003000";
			Сочетание.Счетчик2   = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел3(ИмяФормы, РезультатВыгрузки, СтруктураРеквизитовФормы, ПараметрыВыгрузки, СтатусПроверки)
	
	ИмяОбластиПризнакаНП = "П000030000503";
	
	ПризнакНП = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3[ИмяОбластиПризнакаНП];
	
	Если НЕ ЗначениеЗаполнено(ПризнакНП) Тогда
		ТекстОписанияОшибки = "В разделе 3 не задан признак налогоплательщика.";
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки,
		ТекстОписанияОшибки, "Раздел3", ИмяОбластиПризнакаНП);
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(ИмяФормы, ПризнакНП, "1, 2") Тогда
		ТекстОписанияОшибки = "В разделе 3 задан некорректный признак налогоплательщика.";
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки,
		ТекстОписанияОшибки, "Раздел3", ИмяОбластиПризнакаНП);
	КонецЕсли;
	
	Если (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв3"))
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3["П000030004003"])
		И НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки,
		"В разделе 3 строка 040 не должна быть заполнена, если налогоплательщик не является индивидуальным предпринимателем.",
		"Раздел3", "П000030004003");
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв1")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3["П000030003503"])
		И НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки,
		"В разделе 3 строка 035 не должна быть заполнена, если налогоплательщик не является индивидуальным предпринимателем.",
		"Раздел3", "П000030003503");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел4(ИмяФормы, РезультатВыгрузки, СтруктураРеквизитовФормы, ПараметрыВыгрузки, СтатусПроверки)
	
	ИмяЗаполненногоПоказателя = "";
	
	Если (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв3"))
		И ЗаполненРаздел4(ИмяФормы, СтруктураРеквизитовФормы, ИмяЗаполненногоПоказателя) Тогда
		
		Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
			
			СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки,
			"Раздел 4 не должен быть заполнен, если налогоплательщик не является индивидуальным предпринимателем.",
			"Раздел4", ИмяЗаполненногоПоказателя);
			
		Иначе
			
			ДанныеРаздела = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
			
			НомерСтроки = 1;
			Постфикс = "_" + Формат(НомерСтроки, "ЧН=; ЧГ=0");
			
			Пока ДанныеРаздела.Свойство("П000040001003" + Постфикс) Цикл
				
				БлокЗаполнен
				= ЗначениеЗаполнено(ДанныеРаздела["П000040001003" + Постфикс])
				ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000040002003" + Постфикс])
				ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000040003003" + Постфикс])
				ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000040004003" + Постфикс])
				ИЛИ ЗначениеСуммыЗаполнено(ИмяФормы, ДанныеРаздела["П000040005003" + Постфикс]);
				
				Если БлокЗаполнен Тогда
					
					ИмяОбл = "П000040001003" + Постфикс;
					Если НЕ ЗначениеЗаполнено(СокрЛП(ДанныеРаздела[ИмяОбл])) Тогда
						СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, "В строке " + Формат(НомерСтроки, "ЧГ=")
						+ " раздела 4 не задано наименование модели контрольно-кассовой техники.", "Раздел4", ИмяОбл);
					КонецЕсли;
					
					ИмяОбл = "П000040002003" + Постфикс;
					Если НЕ ЗначениеЗаполнено(СокрЛП(ДанныеРаздела[ИмяОбл])) Тогда
						СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, "В строке " + Формат(НомерСтроки, "ЧГ=")
						+ " раздела 4 не задан заводской номер экземпляра модели контрольно-кассовой техники.", "Раздел4", ИмяОбл);
					КонецЕсли;
					
					ИмяОбл = "П000040003003" + Постфикс;
					Если НЕ ЗначениеЗаполнено(СокрЛП(ДанныеРаздела[ИмяОбл])) Тогда
						СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, "В строке " + Формат(НомерСтроки, "ЧГ=")
						+ " раздела 4 не задан регистрационный номер контрольно-кассовой техники, присвоенный налоговым органом.",
						"Раздел4", ИмяОбл);
					ИначеЕсли СтрДлина(СокрЛП(ДанныеРаздела[ИмяОбл])) <> 16 Тогда
						СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, "В строке " + Формат(НомерСтроки, "ЧГ=")
						+ " раздела 4 задан регистрационный номер контрольно-кассовой техники, присвоенный налоговым органом, не состоящий из 16 символов.",
						"Раздел4", ИмяОбл);
					КонецЕсли;
					
					ИмяОбл = "П000040004003" + Постфикс;
					Если НЕ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбл]) Тогда
						СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, "В строке " + Формат(НомерСтроки, "ЧГ=")
						+ " раздела 4 не задана дата регистрации контрольно-кассовой техники в налоговом органе.", "Раздел4", ИмяОбл);
					ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ДанныеРаздела[ИмяОбл]) Тогда
						СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки, "В строке " + Формат(НомерСтроки, "ЧГ=")
						+ " раздела 4 задана дата регистрации контрольно-кассовой техники в налоговом органе, выходящая за пределы периода с 01.01.1900 по 31.12.2099.",
						"Раздел4", ИмяОбл);
					КонецЕсли;
					
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧН=; ЧГ=0");
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв1")
		И ЗаполненРаздел4(ИмяФормы, СтруктураРеквизитовФормы, ИмяЗаполненногоПоказателя)
		И НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		
		СообщитьОбОшибкеЗаполнения(ИмяФормы, РезультатВыгрузки, СтатусПроверки,
		"Пояснительная записка к налоговой декларации не должна быть заполнена, если налогоплательщик не является индивидуальным предпринимателем.",
		"Раздел4", ИмяЗаполненногоПоказателя);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_СочетаниеРазделов(ИмяФормы, РезультатВыгрузки, СочетаниеРазделов, СтатусПроверки)
	
	СочетанияРаздела1 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 1));
	СочетанияРаздела2 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 2));
	
	СокращеннаяПроверка = Ложь;
	
	Если СочетанияРаздела1.Количество() = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"В разделе 1 не заполнен ни один блок с информацией о суммах налога.", "Раздел1", "П000010001003_1");
		СтатусПроверки = Ложь;
		
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СочетанияРаздела2.Количество() = 0 Тогда
		СообщениеОбОшибке = "В декларации отсутствуют заполненные листы раздела 2.";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			СообщениеОбОшибке, "Раздел2", "П000020001000", 1);
		СтатусПроверки = Ложь;
		
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СокращеннаяПроверка Тогда
		Возврат;
	КонецЕсли;
	
	ПовторенияРаздела1 = СочетаниеРазделов.Скопировать(СочетанияРаздела1);
	ПовторенияРаздела1.Свернуть("ОКТМО", "Счетчик1");
	
	Для Каждого СтрокаПроверки Из ПовторенияРаздела1 Цикл
		Если СтрокаПроверки.Счетчик1 > 1 И ЗначениеЗаполнено(СтрокаПроверки.ОКТМО) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, Раздел", СтрокаПроверки.ОКТМО, 1);
			СтрокиДубликатов = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			ТаблицаДубликатов = СочетаниеРазделов.Скопировать(СтрокиДубликатов);
			ТаблицаДубликатов.Сортировать("ИмяОбласти");
			
			ПозицияПерехода = ТаблицаДубликатов[0].ИмяОбласти;
			
			СообщениеОбОшибке = "Обнаружены дублирующиеся значения кода по ОКТМО " + СтрокаПроверки.ОКТМО + " в разделе 1.";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				СообщениеОбОшибке, "Раздел1", ПозицияПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СочетаниеРазделовСвернутое = СочетаниеРазделов.Скопировать();
	СочетаниеРазделовСвернутое.Свернуть("ОКТМО", "Счетчик1, Счетчик2");
	
	Для Каждого Сочетание Из СочетаниеРазделовСвернутое Цикл
		// Связи раздела 1.
		Если Сочетание.Счетчик1 <> 0 И Сочетание.Счетчик2 = 0 И ЗначениеЗаполнено(Сочетание.ОКТМО) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, Раздел", Сочетание.ОКТМО, 1);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			ПозицияПерехода = НесвязанныеСтроки[0].ИмяОбласти;
			СообщениеОбОшибке = "Для кода по ОКТМО " + Сочетание.ОКТМО
			                  + " раздела 1 не обнаружены заполненые листы разделов определения налоговой базы.";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				СообщениеОбОшибке, "Раздел1", ПозицияПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Связи раздела 2.
		Если Сочетание.Счетчик1 = 0 И Сочетание.Счетчик2 <> 0 И ЗначениеЗаполнено(Сочетание.ОКТМО) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, Раздел", Сочетание.ОКТМО, 2);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			СтраницаПерехода = НесвязанныеСтроки[0].Страница;
			ПозицияПерехода = "П000020001001";
			
			СообщениеОбОшибке = "Для кода по ОКТМО " + НесвязанныеСтроки[0].ОКТМО + " на листе "
							  + Формат(СтраницаПерехода, "ЧН=; ЧГ=0")
			                  + " раздела 2 не найдены соответствующие значения кода по ОКТМО в разделе 1.";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				СообщениеОбОшибке, "Раздел2", ПозицияПерехода, СтраницаПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкеЗаполнения(ИмяФормы,
									 РезультатВыгрузки,
									 СтатусПроверки,
									 ТекстОписанияОшибки,
									 Раздел,
									 Показатель,
									 ЛистРаздела = Неопределено)
	
	СтатусПроверки = Ложь;
	
	Если ЛистРаздела = Неопределено Тогда
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
															   ТекстОписанияОшибки,
															   Раздел,
															   Показатель);
															   
	Иначе
															   
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
															   ТекстОписанияОшибки,
															   Раздел,
															   Показатель,
															   ЛистРаздела);
															   
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСодержитсяВСписке(ИмяФормы, ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231')
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Функция ОКВЭДСоответствуетТребованиям(ИмяФормы, Знач ОКВЭД)
	
	ОКВЭД = СокрЛП(ОКВЭД);
	Для Инд = 1 По СтрДлина(ОКВЭД) Цикл
		ТекСимв = Сред(ОКВЭД, Инд, 1);
		Если ТекСимв >= "0" И ТекСимв <= "8" Тогда
			ОКВЭД = Лев(ОКВЭД, Инд - 1) + "9" + Сред(ОКВЭД, Инд + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОКВЭД = "99" ИЛИ ОКВЭД = "99.9" ИЛИ ОКВЭД = "99.99" ИЛИ ОКВЭД = "99.99.9" ИЛИ ОКВЭД = "99.99.99";
	
КонецФункции

Функция ЗначениеСуммыЗаполнено(ИмяФормы, ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
					 	   СтруктураРеквизитовФормы) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки,
							   СтруктураРеквизитовФормы);
												  
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 ПараметрыВыгрузки,
						 СтруктураРеквизитовФормы,
						 ДеревоВыгрузки);
											
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
		
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки,
									 СтруктураРеквизитовФормы)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(
			СтруктураРеквизитовФормы.мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
		
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(
						РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы, ПараметрыВыгрузки, ТекСтр, РезультатВыгрузки, СтруктураРеквизитовФормы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, СтруктураРеквизитовФормы, Узел)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
					ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти")
			   И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы, СтруктураРеквизитовФормы, Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, СтруктураРеквизитовФормы, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ)
				   И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы, СтруктураРеквизитовФормы, УзелРодитель)
		
	Раздел1 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = СтруктураРеквизитовФормы.мДанныеОтчета.Раздел2;
	Раздел3 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	Узел_СумНалПУВД = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СумНалПУВД");
	
	ПрототипУзла_СумПУВД = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_СумНалПУВД, "СумПУВД");
	
	НомерСтрокиМСЧ = 1;
	Постфикс = "_" + Формат(НомерСтрокиМСЧ, "ЧН=; ЧГ=0");
	Пока Раздел1.Свойство("П000010001003" + Постфикс) Цикл
		ОКТМО = СокрЛП(Раздел1["П000010001003" + Постфикс]);
		НалПУ = Раздел1["П000010002003" + Постфикс];
		
		Если ЗначениеЗаполнено(ОКТМО) Тогда
			Узел_СумПУВД = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СумПУВД);
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумПУВД, "ОКТМО", ОКТМО);
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумПУВД, "НалПУ", НалПУ);
			
			ПрототипУзла_РасчНалВД = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_СумПУВД, "РасчНалВД");
			
			Для Каждого ЛистРаздела2 Из Раздел2 Цикл
				
				Если ТипЗнч(ЛистРаздела2.Данные) = Тип("Структура") Тогда
					ДанныеЛистаРаздела2 = ЛистРаздела2.Данные;
				Иначе
					ДанныеЛистаРаздела2 = ЛистРаздела2.Данные[0].Значение;
				КонецЕсли;
				
				Если ОКТМО <> СокрЛП(ДанныеЛистаРаздела2.П000020003000) Тогда
					Продолжить;
				КонецЕсли;
				
				Узел_РасчНалВД = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_РасчНалВД);
				
				ЗаполнитьДаннымиУзел(ИмяФормы, ДанныеЛистаРаздела2, СтруктураРеквизитовФормы, Узел_РасчНалВД);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РасчНалВД);
			
		КонецЕсли;
		
		НомерСтрокиМСЧ = НомерСтрокиМСЧ + 1;
		Постфикс = "_" + Формат(НомерСтрокиМСЧ, "ЧН=; ЧГ=0");
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумПУВД);
	
	Узел_СумНалПУ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СумНалПУ");
	ЗаполнитьДаннымиУзел(ИмяФормы, Раздел3, СтруктураРеквизитовФормы, Узел_СумНалПУ);
	
	Если (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2018Кв3")) Тогда
		
		Раздел4 = СтруктураРеквизитовФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
		
		Узел_СумККТУм = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СумККТУм");
		
		ПрототипУзла_СумККТУмМод = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_СумККТУм, "СумККТУмМод");
		
		НомерСтрокиМСЧ = 1;
		Постфикс = "_" + Формат(НомерСтрокиМСЧ, "ЧГ=");
		
		Пока Раздел4.Свойство("П000040001003" + Постфикс) Цикл
			
			Узел_СумККТУмМод = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СумККТУмМод);
			
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумККТУмМод, "НаимККТ",    СокрЛП(Раздел4["П000040001003" + Постфикс]));
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумККТУмМод, "НомККТ",     СокрЛП(Раздел4["П000040002003" + Постфикс]));
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумККТУмМод, "РегНомККТ",  СокрЛП(Раздел4["П000040003003" + Постфикс]));
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумККТУмМод, "ДатаРегККТ", Раздел4["П000040004003" + Постфикс]);
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумККТУмМод, "СумРасхККТ", Раздел4["П000040005003" + Постфикс]);
			
			НомерСтрокиМСЧ = НомерСтрокиМСЧ + 1;
			Постфикс = "_" + Формат(НомерСтрокиМСЧ, "ЧН=; ЧГ=0");
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумККТУмМод);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
			
КонецФункции

Функция НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла)
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(ИмяФормы, Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ИмяФормы, ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=дд.ММ.гггг");
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)),
						  СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)),
						  СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		  ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(ИмяФормы, Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			   ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(ИмяФормы, Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0
		ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
		РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0"
			  ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
			       НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
		
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли