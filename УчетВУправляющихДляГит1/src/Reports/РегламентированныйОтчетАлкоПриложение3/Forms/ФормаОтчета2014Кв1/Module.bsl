// Переменные используются для передачи данных из ПроверитьПоказатели()
// чтобы не дублировать формирование информации при выгрузке.
&НаСервере
Перем ПараметрыВыгрузки, ДеревоВыгрузки;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
	    Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2014Кв1";
	                                     	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0000100001"; 
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0000100003"; 
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	КолИсхСтрокИдГруппы2 = 1;
	
	КолКолонокИдГруппы1 = 19;
	КолКолонокИдГруппы2 = 19;
	
	СтруктураДанныхТитульный = Новый Структура;
	                        	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,    Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,    Новый СписокЗначений);

	ИнициализацияМногостраничныхРазделов();
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Лицензии",   "ТаблицаСтраницыЛицензии");
	мСтруктураМногостраничныхРазделов.Вставить("Декларация", "ТаблицаСтраницыДекларация");
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, "МногострочнаяЧасть2");
		
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "08/04/2014"; // Первый вариант
		
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ТабличныйДокумент.Вывести(ПолучитьМакетФормыОтчета(ИмяРаздела));
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НРег(ИмяСобытия) = НРег("ОбновитьЗаявлениеОКорректировке") Тогда
	
		ЗаявлениеОКорректировке = Параметр.ЗаявлениеОКорректировке;
	    СданныйАлкоОтчет 		= Параметр.СданныйАлкоОтчет;
		
		Если СданныйАлкоОтчет = СтруктураРеквизитовФормы.мСохраненныйДок Тогда
		
			ЗаявлениеОКорректировке = ЗаявлениеОКорректировке;
			
			// Чтобы при отработке ВывестиМакетВТаблДокНаСервере() перезаполнилось ЗаявлениеОКорректировкеПредставление.
			ЗаявлениеОКорректировкеПредставление = "";
			
			// Инициируем заполнение Титульного.
			Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
				НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
			Иначе
				НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
			КонецЕсли;
			
			// Обновление Заявления о корректировке.
			Если НаименованиеТекущегоРаздела = "Титульный" Тогда
			    ВывестиМакетВТаблДокНаСервере("Титульный", 0, Истина);		
			КонецЕсли; 
					
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВидДеят");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мСтараяВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
	СтруктураРеквизитовФормы.Вставить("мТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ФИОИсп");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("Руководитель");
	СтруктураРеквизитовФормы.Вставить("Бухгалтер");
	СтруктураРеквизитовФормы.Вставить("Исполнитель");
	СтруктураРеквизитовФормы.Вставить("ТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мСоответствияМнгЧ");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
																                                  
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыЛицензии.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыДекларация.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьДополнительныеДанные(ЭтаФорма);
	ЗаполнитьНачальныеНастройки();
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	ФормироватьСтруктуруСвойствСтраниц();
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	СтруктураРеквизитовФормы.мРежимПечати                   = Ложь;
	СтруктураРеквизитовФормы.мАвтоВыборКодов                = Ложь;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мСтараяВерсияФормы             = СтруктураРеквизитовФормы.мВерсияФормы;
	СтруктураРеквизитовФормы.мДокументВосстановлен          = Ложь;
	СтруктураРеквизитовФормы.ВидДокумента                   = 0;
	СтруктураРеквизитовФормы.мВидДеят                       = "";
	
	СформироватьСпискиВыбора();
		
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НачальныеОперацииСМногострочнымиБлоками();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // Документ скопирован.
			ВосстановитьСохраненныеДанные();
		Иначе // Это новый документ. Установим реквизиты формы по умолчанию.
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		ЗаполнитьДатуВЯчейкахНаСервере();
		Модифицированность = Истина;
	Иначе
		
		Если НЕ БезОткрытияФормы Тогда
			НачальныеОперацииСМногострочнымиБлоками();
		КонецЕсли;
		
		// При открытии или при копировании сохраненного отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			// Из-за смены формата выгрузки изменились коды видов деятельности
			ДатаКопируемогоОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
			ДатаЭтогоОтчета = СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета;
			РазныеСпискиВидовДеятельности = (ДатаКопируемогоОтчета >= '20131101' И ДатаЭтогоОтчета < '20131101')
			                            Или (ДатаКопируемогоОтчета < '20131101' И ДатаЭтогоОтчета >= '20131101');
			Если РазныеСпискиВидовДеятельности Тогда
				Для Каждого Страница Из ТаблицаСтраницыЛицензии Цикл
					Страница.Данные[0].Значение.П000000000105 = "";
					Страница.ДополнительныеДанные[0].Значение.П000000000105 = "";
				КонецЦикла;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='При копировании были очищены виды деятельности в разделе лицензий.'");
				Сообщение.Сообщить();
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;
	
	ТабличныйДокумент.Области.Прил.Маска = "999";
	
	ТабличныйДокумент.Области.НомКорр.Значение     = ?(НомерКорректировки = 0, "0", Формат(НомерКорректировки, "ЧЦ=2; ЧВН="));
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	
	СохранитьДанныеРаздела("Титульный", Ложь);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСРАР");
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20150901' Тогда		
		СтруктураРеквизитовФормы.мВерсияФормата = "430_2014Кв1";
	Иначе		
		СтруктураРеквизитовФормы.мВерсияФормата = "431";
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0, Истина);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
	    ОбновитьНаСервере();	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьДополнительныеДанные(Форма)
	
	Если ТипЗнч(Форма.ДополнительныеДанные) <> Тип("Структура") Тогда
		Форма.ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	Если НЕ Форма.ДополнительныеДанные.Свойство("Титульный")
	 ИЛИ ТипЗнч(Форма.ДополнительныеДанные.Титульный) <> Тип("Структура") Тогда
		Форма.ДополнительныеДанные.Вставить("Титульный", Новый Структура);
	КонецЕсли;
	
	АдресОрганизации = Новый Структура;
	АдресОрганизации.Вставить("КодСтраны",       "");
	АдресОрганизации.Вставить("Индекс",          "");
	АдресОрганизации.Вставить("КодРегиона",      "");
	АдресОрганизации.Вставить("Район",           "");
	АдресОрганизации.Вставить("Город",           "");
	АдресОрганизации.Вставить("НаселенныйПункт", "");
	АдресОрганизации.Вставить("Улица",           "");
	АдресОрганизации.Вставить("Дом",             "");
	АдресОрганизации.Вставить("Корпус",          "");
	АдресОрганизации.Вставить("Квартира",        "");
	
	Если Форма.ДополнительныеДанные.Титульный.Свойство("АдресОрганизации") Тогда
		ЗаполнитьЗначенияСвойств(АдресОрганизации, Форма.ДополнительныеДанные.Титульный.АдресОрганизации);
	КонецЕсли;
	Форма.ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВосстановитьСтруктуруДополнительныхДанных(Форма)
	
	ИнициализироватьДополнительныеДанные(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;        
	
	//Многострочная часть 1
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000113", "П000010000108;П000010000109;П000010000110;П000010000111;П000010000112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000117", "П000010000104;П000010000105;П000010000106;П000010000107;П000010000108;П000010000109;П000010000110;П000010000111;П000010000112;П000010000114;П000010000115;П000010000116");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000204", "П000010000104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000205", "П000010000105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000206", "П000010000106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000207", "П000010000107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000208", "П000010000108;П000010000109;П000010000110;П000010000111");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000212", "П000010000112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000213", "П000010000108;П000010000109;П000010000110;П000010000111;П000010000112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000214", "П000010000114");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000215", "П000010000115");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000216", "П000010000116");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000217", "П000010000104;П000010000105;П000010000106;П000010000107;П000010000108;П000010000109;П000010000110;П000010000111;П000010000112;П000010000114;П000010000115;П000010000116");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000218", "П000010000118");
	
	//Многострочная часть 2
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000313", "П000010000308;П000010000309;П000010000310;П000010000311;П000010000312");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000317", "П000010000304;П000010000305;П000010000306;П000010000307;П000010000308;П000010000309;П000010000310;П000010000311;П000010000312;П000010000314;П000010000315;П000010000316");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000404", "П000010000304");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000405", "П000010000305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000406", "П000010000306");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000407", "П000010000307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000408", "П000010000308;П000010000309;П000010000310;П000010000311");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000412", "П000010000312");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000413", "П000010000308;П000010000309;П000010000310;П000010000311;П000010000312");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000414", "П000010000314");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000415", "П000010000315");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000416", "П000010000316");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000417", "П000010000304;П000010000305;П000010000306;П000010000307;П000010000308;П000010000309;П000010000310;П000010000311;П000010000312;П000010000314;П000010000315;П000010000316");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000418", "П000010000318");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
		
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
			
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента     = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу   = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме     = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности     = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя      = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
	ФормироватьСтруктуруСтраницОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Лицензии";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь; // Не инициализировать элементы  управления корректировкой автозаполняемых значений
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПолейДекларация(Форма)
	
	СтраницыРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство("Декларация", СтраницыРаздела);
	СтраницыРаздела = Форма[СтраницыРаздела];
	АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если АктивнаяСтраница.Количество() > 0 Тогда
		АктивнаяСтраница = АктивнаяСтраница[0];
        ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
	Иначе
		Возврат;
	КонецЕсли;
	
	РазрешитьВвод = (ИндексСтраницы = 0);
	
	ВариантРучногоВвода = ?(РазрешитьВвод, 0, 5);
	ВариантАвторасчета = ?(РазрешитьВвод, ?(Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, 0, 4), 5);
	
	НомерСтроки = 1;
	Постфикс = Формат(НомерСтроки, "ЧГ=0");
	Пока Форма.ТабличныйДокумент.Области.Найти("П000010000101_" + Постфикс) <> Неопределено Цикл
		
		УстановитьЦветФонаЯчейки(Форма, "П000010000101_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000102_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000103_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000104_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000105_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000106_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000107_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000108_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000109_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000110_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000111_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000112_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000113_" + Постфикс, ВариантАвторасчета,  "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000114_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000115_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000116_" + Постфикс, ВариантРучногоВвода, "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000117_" + Постфикс, ВариантАвторасчета,  "Декларация");
		УстановитьЦветФонаЯчейки(Форма, "П000010000118_" + Постфикс, ВариантРучногоВвода, "Декларация");
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = Формат(НомерСтроки, "ЧГ=0");
	КонецЦикла;
	
	УстановитьЦветФонаЯчейки(Форма, "П000010000204", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000205", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000206", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000207", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000209", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000210", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000211", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000212", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000213", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000214", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000215", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000216", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000217", ВариантАвторасчета, "Декларация");
	УстановитьЦветФонаЯчейки(Форма, "П000010000218", ВариантАвторасчета, "Декларация");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПронумероватьТаблицыДекларация(Форма)
	
	Если Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
		
	ЭтоПерваяСтраница = Форма[Форма.мСтруктураМногостраничныхРазделов.Декларация][0].АктивнаяСтраница;
	
	Если ЭтоПерваяСтраница Тогда
		ПроставитьНомераВТаблицеДекларация(Форма, "П0000100001");
	КонецЕсли;
	
	ПроставитьНомераВТаблицеДекларация(Форма, "П0000100003");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьНомераВТаблицеДекларация(Форма, ПрефиксИменТаблицы)
	
	ИмяГрафыНомераПП = ПрефиксИменТаблицы + "00";
	
	НомерСтроки = 1;
	Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
	Пока Форма.ТабличныйДокумент.Области.Найти(ИмяГрафыНомераПП + Постфикс) <> Неопределено Цикл
		Форма.ТабличныйДокумент.Области[ИмяГрафыНомераПП + Постфикс].Значение = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	ДатаПериодаОтчета = СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета;
	
	// С 3-го квартала 2015 года действует новый список.
	// Отчет квартальный, поэтому можно указать 01.09 как границу
	ИмяМакета = ?(ДатаПериодаОтчета < '20150901', "Списки2014Кв1", "Списки2015Кв3");
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000000000105", 3, , "Выбор вида деятельности", КоллекцияСписковВыбора["ВидыДеятельности"]);
		
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000101", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["КодыВидовПродукции"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000102", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["КодыВидовПродукции"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000301", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["КодыВидовПродукции"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000302", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["КодыВидовПродукции"]);
	
	СубъектыРФТаблица = КоллекцияСписковВыбора["КодыСубъектовРФ"];
	СубъектыРФ.Очистить();
	СубъектыРФ.Загрузить(СубъектыРФТаблица);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()

	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
    
	Если (СтруктураРеквизитовФормы.мДокументВосстановлен) И (СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;
    
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображение на титульном листе отчетного периода.
	Значение1Кв = ?(НомерКвартала = "1", "V", "");
	ТабличныйДокумент.Области.ОтчетныйПериод1Кв.Значение = Значение1Кв;
	
	Значение2Кв = ?(НомерКвартала = "2", "V", "");
	ТабличныйДокумент.Области.ОтчетныйПериод2Кв.Значение = Значение2Кв;
	
	Значение3Кв = ?(НомерКвартала = "3", "V", "");
	ТабличныйДокумент.Области.ОтчетныйПериод3Кв.Значение = Значение3Кв;
	
	Значение4Кв = ?(НомерКвартала = "4", "V", "");
	ТабличныйДокумент.Области.ОтчетныйПериод4Кв.Значение = Значение4Кв;
	
	ТабличныйДокумент.Области.ОтчетныйГод.Значение = НомерГода;
	    
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лицензии";
	СтрокаУровня1.Представление            = "Сведения" + Символы.ПС + "о лицензиях";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = "Декларация";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (СтруктураРеквизитовФормы.Организация = Неопределено) Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ТелОрганизации, АдресЭлектроннойПочтыОрганизации, ФИОРук, ФИОБух, АдрПрописки, АдрЮР";
	
	Результат = РегламентированнаяОтчетностьВызовСервера.ЗаполнитьСведенияОбОрганизацииНаСервере(ЭтаФорма, Сведения);
	
	ИНН = СокрЛП(Результат.ИННЮЛ);
	КПП = ?(ЭтоПБОЮЛ, "", СокрЛП(Результат.КППЮЛ));
	
	СтруктураРеквизитовФормы.мИННЮЛ = ИНН;
	СтруктураРеквизитовФормы.мКППЮЛ = КПП;
	СтруктураРеквизитовФормы.ТелОрганизации = Результат.ТелОрганизации;
	
	ТабличныйДокумент.Области.ИНН1.Значение = ИНН;
	ТабличныйДокумент.Области.КПП1.Значение = КПП;
	ТабличныйДокумент.Области.ТелОрганизации.Значение = Результат.ТелОрганизации;
	ТабличныйДокумент.Области.ЭлектроннаяПочта.Значение = Результат.АдресЭлектроннойПочтыОрганизации;

	Если ЭтоПБОЮЛ Тогда
	    Если ПустаяСтрока(СтрЗаменить(Результат.АдрЮр, ",", "")) Тогда
		    ЮридическийАдрес = Результат.АдрПрописки;
		Иначе	
		    ЮридическийАдрес = Результат.АдрЮр;
		КонецЕсли; 
	Иначе	
	    ЮридическийАдрес = Результат.АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = Неопределено;
	Если НЕ ПустаяСтрока(ЮридическийАдрес) Тогда
		СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ЮридическийАдрес);
	КонецЕсли;

	АдресОрганизации = ДополнительныеДанные.Титульный.АдресОрганизации;
	ОчиститьСтруктуру(АдресОрганизации);

	АдресОрганизации = Новый Структура;
	Если Не СтруктураАдреса = Неопределено Тогда
		АдресОрганизации.Вставить("КодСтраны",       СокрЛП(СтруктураАдреса.Страна));
		АдресОрганизации.Вставить("Индекс",          СокрЛП(СтруктураАдреса.Индекс));
		АдресОрганизации.Вставить("КодРегиона",      РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
		АдресОрганизации.Вставить("Район",           СокрЛП(СтруктураАдреса.Район));
		АдресОрганизации.Вставить("Город",           СокрЛП(СтруктураАдреса.Город));
		АдресОрганизации.Вставить("НаселенныйПункт", СокрЛП(СтруктураАдреса.НаселенныйПункт));
		АдресОрганизации.Вставить("Улица",           СокрЛП(СтруктураАдреса.Улица));
		АдресОрганизации.Вставить("Дом",             СокрЛП(СтруктураАдреса.Дом));
		АдресОрганизации.Вставить("Корпус",          СокрЛП(СтруктураАдреса.Корпус));
		АдресОрганизации.Вставить("Квартира",        СокрЛП(СтруктураАдреса.Квартира));
		ЗаполнитьПоляАдресаОрганизации(АдресОрганизации);
	КонецЕсли;
	
	
	ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);
		
	Если Результат <> Неопределено Тогда
		
		Если ЭтоПБОЮЛ Тогда
			СтруктураРеквизитовФормы.Руководитель = СтруктураРеквизитовФормы.Организация.ИндивидуальныйПредприниматель.Наименование;			
		Иначе
			СтруктураРеквизитовФормы.Руководитель = Результат.ФИОРук;			
		КонецЕсли;
		СтруктураРеквизитовФормы.Бухгалтер = Результат.ФИОБух;
		
		ТабличныйДокумент.Области.ОргДиректор.Значение = СтруктураРеквизитовФормы.Руководитель;
		ТабличныйДокумент.Области.ОргБухгалтер.Значение = СтруктураРеквизитовФормы.Бухгалтер;
		
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляАдресаОрганизации(Адрес)
	
	ТабличныйДокумент.Области.ПочтовыйИндекс.Значение = Адрес.Индекс;
	ТабличныйДокумент.Области.КодРегиона.Значение = Адрес.КодРегиона;      
	ТабличныйДокумент.Области.АдресРайон.Значение = Адрес.Район;
	ТабличныйДокумент.Области.АдресГород.Значение = ?(ПустаяСтрока(Адрес.Город), Адрес.НаселенныйПункт, Адрес.Город);
	ТабличныйДокумент.Области.АдресУлица.Значение = Адрес.Улица;
	
	СтрокаДома = Адрес.Дом;
	СтрокаДома = СтрокаДома + ?(ПустаяСтрока(Адрес.Корпус), "", ", " + Адрес.Корпус);
	СтрокаДома = СтрокаДома + ?(ПустаяСтрока(Адрес.Квартира), "", ", " + Адрес.Квартира);
	ТабличныйДокумент.Области.АдресДом.Значение = СтрокаДома;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	РазделОтчета = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, РазделОтчета);
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101'
		   И Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лицензии" 
		   И Не ЛицензируемаяДеятельность(ЭтаФорма) Тогда
			ТабличныйДокумент.Области.П000000000101.ЦветФона = мСтруктураЦветовРаскраски._5;
			ТабличныйДокумент.Области.П000000000101.Защита = Истина;
			ТабличныйДокумент.Области.П000000000102.ЦветФона = мСтруктураЦветовРаскраски._5;
			ТабличныйДокумент.Области.П000000000102.Защита = Истина;
			ТабличныйДокумент.Области.П000000000103.ЦветФона = мСтруктураЦветовРаскраски._5;
			ТабличныйДокумент.Области.П000000000103.Защита = Истина;
			ТабличныйДокумент.Области.П000000000104.ЦветФона = мСтруктураЦветовРаскраски._5;
			ТабличныйДокумент.Области.П000000000104.Защита = Истина;
		КонецЕсли;
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Истина;
		
		Если РазделОтчета Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
			КонецЕсли;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Декларация" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость = Ложь;
	КонецЕсли;
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	ИмяТекущейОбласти = "R1C1";
	ЭтаФорма.Элементы["ТабличныйДокумент"].ТекущаяОбласть = ТекТабличноеПоле.Область(ИмяТекущейОбласти);
	ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы["ТабличныйДокумент"];
	
	Элементы.Обновить.Доступность = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный";
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, РазделОтчета = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, РазделОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Лицензии" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		СтруктураДанных = СобратьДанныеТекущегоТаблПоляНаСервере("ТабличныйДокумент");
					
		НаимТаблицыСтраницы = "ТаблицаСтраницыЛицензии";
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			ОпределитьПредставлениеДопСтраниц(НаимРаздела);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
						
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Декларация" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ОпределитьПредставлениеДопСтраниц(НаимРаздела);

			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
							
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
						
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы)
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "Декларация" Тогда

		// Так как Таблица 1 содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы1);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы2);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы1 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы1].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы1);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы1, ТаблицаДопСтрокГруппы1);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы2 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы2].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы2);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаДопСтрокГруппы2);

	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, РазделОтчета = Ложь)
	
	ТабличныйДокумент.Очистить();
	
	МакетФормыОтчета = ПолучитьМакетФормыОтчета(ИмяТекРаздела);
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок)
			И СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета >= '20170701' Тогда		
			
			ОбластьЗаявлениеОКорректировке = МакетФормыОтчета.ПолучитьОбласть("ЗаявлениеОКорректировке");
		    ТабличныйДокумент.Вывести(ОбластьЗаявлениеОКорректировке);
			
			Если НЕ ЗначениеЗаполнено(ЗаявлениеОКорректировкеПредставление) Тогда
			
				ЗаявлениеОКорректировке = РегламентированнаяОтчетностьАЛКО.ПолучитьЗаявлениеОКорректировкеПоЖурналу(
																	СтруктураРеквизитовФормы.мСохраненныйДок);
								
				Если ЗначениеЗаполнено(ЗаявлениеОКорректировке) Тогда			
					ЗаявлениеОКорректировкеПредставление = Строка(ЗаявлениеОКорректировке);
				Иначе
					ЗаявлениеОКорректировкеПредставление = "Заполнить";			
				КонецЕсли; 
			
			КонецЕсли;
			
			ТабличныйДокумент.Области.ЗаявлениеОКорректировкеПредставление.Текст = ЗаявлениеОКорректировкеПредставление;
			
		КонецЕсли;
		
		ОбластьОсновнаяЧасть = МакетФормыОтчета.ПолучитьОбласть("ОсновнаяЧасть");
		ТабличныйДокумент.Вывести(ОбластьОсновнаяЧасть);
		
	Иначе	
	    ТабличныйДокумент.Вывести(МакетФормыОтчета);
	КонецЕсли;
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Лицензии" Тогда
		
		НаимТаблицыСтраницы = "ТаблицаСтраницыЛицензии";

	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или РазделОтчета Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Декларация" Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Для Каждого Область Из ТабличныйДокумент.Области Цикл
				Если (СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДопЛиния") > 0)
				   И НЕ СтрЧислоВхождений(Область.Имя, "ДобавитьСтрокуЗначок") > 0 Тогда
					Линия2пт = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
					Область.ГраницаСнизу = Линия2пт;
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или РазделОтчета Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НомерСтраницыРазделаОтчета <> 1 Тогда
				ДобавитьСтрокуЗначокТ1Верх = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначокТ1").Верх;
				ОбластьТД = ТабличныйДокумент.Область("R" + Формат(ДобавитьСтрокуЗначокТ1Верх, "ЧГ=0"));
				НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				ОбластьТД.ВысотаСтроки = 1;
				ОбластьТД.ГраницаСверху = НетЛинии;
				ОбластьТД.ГраницаСнизу  = НетЛинии;
				ОбластьТД.ГраницаСлева  = НетЛинии;
				ОбластьТД.ГраницаСправа = НетЛинии;
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;

		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если ИмяТекРаздела = "Титульный"
	 ИЛИ ИмяТекРаздела = "Лицензии" Тогда
						
	Иначе
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		 
		ТабличныйДокумент.Области.НомСтр1.Значение = "0";
		ТабличныйДокумент.Области.НомСтр2.Значение = "0";
		ТабличныйДокумент.Области.НомСтр3.Значение = "0";
		ТабличныйДокумент.Области.Руководитель.Значение         = СтруктураРеквизитовФормы.Руководитель;
		ТабличныйДокумент.Области.Бухгалтер.Значение            = СтруктураРеквизитовФормы.Бухгалтер;
						
	КонецЕсли;
	
	Если ИмяТекРаздела = "Декларация" Тогда
		УстановитьДоступностьПолейДекларация(ЭтаФорма);
		ПронумероватьТаблицыДекларация(ЭтаФорма);
	КонецЕсли;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		ТабличныйДокумент.Области.Прил.Маска = "999";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВставитьОбластьВТабличныйДокументНаСервере(ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];

	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
		
		НомИсходнойСтроки = Формат(НомНовойСтроки - 1, "ЧГ=");
		НомНовойСтрокиСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		НомерГрафы = 1;
		
		КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// определяем имя первой ячейки последней из исходных строк
		ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + НомИсходнойСтроки;
		
		// область первой ячейки последней из исходных строк
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
		
		// номера строк исходной области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
		
		// номера строк вставляемой области
		НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
		НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		                            		
		// переопределяем имена вставленной области
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			// переопределяем имена вставленной области
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяОбластиЯчейки    = КолонкаТаблицыИмя + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = КолонкаТаблицыИмя + "_" + НомНовойСтрокиСтр;
				
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				
				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				
				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					
					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ИмяОбласти = СтруктураРеквизитовФормы.мСоответствияМнгЧ[ИмяГруппы];
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(ИмяОбласти);
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области[ИмяОбласти].Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ИмяОбласти].Верх, , ТекТабличноеПоле.Области[ИмяОбласти].Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = ИмяОбласти;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		НСтрСуфф = Формат(НСтр, "ЧГ=");
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСуфф;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда				
					ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);				
				КонецЕсли; 
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено, ИмяОбласти = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп, ИмяОбласти);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено, ИмяОбласти = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп, ИмяОбласти);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп, ИмяОбласти = Неопределено)
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		ИмяГруппы = ?(СтрЧислоВхождений(ИмяОбласти, "Т1") > 0
					ИЛИ СтрЧислоВхождений(ИмяОбласти, "П0000100001") > 0, ИдГрупп.мИдГруппы1, ИдГрупп.мИдГруппы2);
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Каждого ТекущаяОбласть Из Форма[ИмяТабличногоПоля].Области Цикл
		
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
						
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

    ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если ВыбТабличноеПолеИмя <> "Титульный"
		   И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Область.СодержитЗначение
		   И Область.Защита
		   И СтрНайти(Область.Имя, "НомСтр") = 0 
	       И Область.Имя <> "Руководитель" 
		   И Область.Имя <> "Бухгалтер" Тогда
		   
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьСлужебныеДанныеРаздела(Форма, ВыбТабличноеПолеИмя);
			
	Если ВыбТабличноеПолеИмя = "Декларация" Тогда
		УстановитьДоступностьПолейДекларация(Форма);
		ПронумероватьТаблицыДекларация(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСлужебныеДанныеРаздела(Форма, ИмяСтраницыПанели)
	
	Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда

		СтраницыРаздела = Неопределено;
		
		Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, СтраницыРаздела);
		СтраницыРаздела = Форма[СтраницыРаздела];
		
		АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() = 0 Тогда
			Возврат;
		Иначе
			АктивнаяСтраница = АктивнаяСтраница[0];
		КонецЕсли;
		
		Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
			
		АктивнаяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
		АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
		
	Иначе 
		
		Форма.ДополнительныеДанные[ИмяСтраницыПанели] = Неопределено;
		ВосстановитьСтруктуруДополнительныхДанных(Форма);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСтруктуру(ОчищаемаяСтруктура)
	
	Если ТипЗнч(ОчищаемаяСтруктура) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ОчищаемаяСтруктура Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
			ОчиститьСтруктуру(ОчищаемаяСтруктура[ЭлементСтруктуры.Ключ]);
		Иначе
			ОчищаемаяСтруктура[ЭлементСтруктуры.Ключ] = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(ЭлементСтруктуры.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок) Экспорт
	
	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
	
	ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
	
	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
	
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		// Имеются дополнительные строки.
		// Удаляем их.
		
		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
			
			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
			
			ИмяПервойКолонки = ИмяГруппыДопСтрок + "00_";
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + Формат(НСтр, "ЧГ=0");
			
			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			
			РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			
			// удаляем из структуры многострочного раздела соответствующую строку
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
			
			НСтр = НСтр - 1;
						
		КонецЦикла;	
		
		Если ВыбТабличноеПоле.Области.Найти("МногострочнаяЧасть") = Неопределено Тогда
			
			ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти - 1, , НомерНижнЯчейкиОбласти - 1).Имя = "МногострочнаяЧасть";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", Знач ОбластьИмя = "") Экспорт

	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		
		НомПоз = СтрНайти(ОбластьИмя, "_");
		ДлинаСтроки = СтрДлина(ОбластьИмя);
		
		Если НомПоз > 0 Тогда
			ПостфиксСтроки = "_" + Прав(ОбластьИмя, ДлинаСтроки - НомПоз);
			ОбластьИмя = Лев(ОбластьИмя, НомПоз - 1);
		КонецЕсли;
		
		МестоРазмещенияДанных = Форма.ТабличныйДокумент;
		
		//Многострочная часть 1
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				
				ПостфиксСтроки = "_" + Формат(Инд, "ЧГ=0");

				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000113, ОбластьИмя) > 0 Тогда
					
					СтраницыРаздела = Неопределено;
					Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, СтраницыРаздела);
					СтраницыРаздела = Форма[СтраницыРаздела];
					
					АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
					Если АктивнаяСтраница.Количество() = 0 Тогда
						Возврат;
					Иначе
						АктивнаяСтраница = АктивнаяСтраница[0];
					КонецЕсли;
					
					Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
						ДополнительныеДанныеЛиста = Неопределено;
					ИначеЕсли ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) <> Тип("Структура") Тогда
						ДополнительныеДанныеЛиста = Неопределено;
					Иначе
						ДополнительныеДанныеЛиста = АктивнаяСтраница.ДополнительныеДанные[0].Значение;
					КонецЕсли;
					
					Графа09 = 0;
					Графа10 = 0;
					Графа11 = 0;
					
					Отгрузка = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеЛиста, "П0000100001" + "08" + ПостфиксСтроки);
					Если Отгрузка <> Неопределено Тогда
						Графа09 = Отгрузка.Итог("Розничные");
						Графа10 = Отгрузка.Итог("Оптовые");
						Графа11 = Отгрузка.Итог("Другие");
					КонецЕсли;
					
					Графа12 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "12" + ПостфиксСтроки);
					
					ЗначениеГрафы13 = Графа09 + Графа10 + Графа11 + Графа12;
					ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100001" + "13" + ПостфиксСтроки, ЗначениеГрафы13);

				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000117, ОбластьИмя) > 0 Тогда
				
					Графа04 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "04" + ПостфиксСтроки);
					Графа05 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "05" + ПостфиксСтроки);
					Графа06 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "06" + ПостфиксСтроки);
					Графа07 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "07" + ПостфиксСтроки);
					Графа13 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "13" + ПостфиксСтроки);
					Графа15 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "15" + ПостфиксСтроки);
					Графа16 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "16" + ПостфиксСтроки);
					
					ЗначениеГрафы17 = Графа04 + Графа05 + Графа06 + Графа07 - Графа13 - Графа15 - Графа16;
					ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100001" + "17" + ПостфиксСтроки, ЗначениеГрафы17);
				
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000113, ОбластьИмя) > 0 Тогда
				
				СтраницыРаздела = Неопределено;
				Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, СтраницыРаздела);
				СтраницыРаздела = Форма[СтраницыРаздела];
				
				АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				Если АктивнаяСтраница.Количество() = 0 Тогда
					Возврат;
				Иначе
					АктивнаяСтраница = АктивнаяСтраница[0];
				КонецЕсли;
				
				Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
					ДополнительныеДанныеЛиста = Неопределено;
				ИначеЕсли ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) <> Тип("Структура") Тогда
					ДополнительныеДанныеЛиста = Неопределено;
				Иначе
					ДополнительныеДанныеЛиста = АктивнаяСтраница.ДополнительныеДанные[0].Значение;
				КонецЕсли;
				
				Графа09 = 0;
				Графа10 = 0;
				Графа11 = 0;
				
				Отгрузка = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеЛиста, "П0000100001" + "08" + ПостфиксСтроки);
				Если Отгрузка <> Неопределено Тогда
					Графа09 = Отгрузка.Итог("Розничные");
					Графа10 = Отгрузка.Итог("Оптовые");
					Графа11 = Отгрузка.Итог("Другие");
				КонецЕсли;
				
				Графа12 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "12" + ПостфиксСтроки);
				
				ЗначениеГрафы13 = Графа09 + Графа10 + Графа11 + Графа12;
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100001" + "13" + ПостфиксСтроки, ЗначениеГрафы13);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000117, ОбластьИмя) > 0 Тогда
				
				Графа04 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "04" + ПостфиксСтроки);
				Графа05 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "05" + ПостфиксСтроки);
				Графа06 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "06" + ПостфиксСтроки);
				Графа07 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "07" + ПостфиксСтроки);
				Графа13 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "13" + ПостфиксСтроки);
				Графа15 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "15" + ПостфиксСтроки);
				Графа16 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100001" + "16" + ПостфиксСтроки);
				
				ЗначениеГрафы17 = Графа04 + Графа05 + Графа06 + Графа07 - Графа13 - Графа15 - Графа16;
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100001" + "17" + ПостфиксСтроки, ЗначениеГрафы17);
				
			КонецЕсли;
				
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000204, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000204.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000204.Значение = Форма.ТабличныйДокумент.Области.П000010000204.Значение + Форма.ТабличныйДокумент.Области["П000010000104" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;			
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000205, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000205.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000205.Значение = Форма.ТабличныйДокумент.Области.П000010000205.Значение + Форма.ТабличныйДокумент.Области["П000010000105" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000206, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000206.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000206.Значение = Форма.ТабличныйДокумент.Области.П000010000206.Значение + Форма.ТабличныйДокумент.Области["П000010000106" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000207, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000207.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000207.Значение = Форма.ТабличныйДокумент.Области.П000010000207.Значение + Форма.ТабличныйДокумент.Области["П000010000107" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000208, ОбластьИмя) > 0 Тогда
			
			ИтогПоГрафе09 = 0;
			ИтогПоГрафе10 = 0;
			ИтогПоГрафе11 = 0;
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				
				СтраницыРаздела = Неопределено;
				Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, СтраницыРаздела);
				СтраницыРаздела = Форма[СтраницыРаздела];
				
				АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				Если АктивнаяСтраница.Количество() = 0 Тогда
					Возврат;
				Иначе
					АктивнаяСтраница = АктивнаяСтраница[0];
				КонецЕсли;
				
				Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
					ДополнительныеДанныеЛиста = Неопределено;
				ИначеЕсли ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) <> Тип("Структура") Тогда
					ДополнительныеДанныеЛиста = Неопределено;
				Иначе
					ДополнительныеДанныеЛиста = АктивнаяСтраница.ДополнительныеДанные[0].Значение;
				КонецЕсли;
				
				Графа09 = 0;
				Графа10 = 0;
				Графа11 = 0;
				
				Отгрузка = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеЛиста, "П0000100001" + "08" + Постфикс);
				Если Отгрузка <> Неопределено Тогда
					Графа09 = Отгрузка.Итог("Розничные");
					Графа10 = Отгрузка.Итог("Оптовые");
					Графа11 = Отгрузка.Итог("Другие");
				КонецЕсли;
				
				ИтогПоГрафе09 = ИтогПоГрафе09 + Графа09;
				ИтогПоГрафе10 = ИтогПоГрафе10 + Графа10;
				ИтогПоГрафе11 = ИтогПоГрафе11 + Графа11;
				
			КонецЦикла;
			
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100002" + "09", ИтогПоГрафе09);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100002" + "10", ИтогПоГрафе10);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100002" + "11", ИтогПоГрафе11);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000212, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000212.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000212.Значение = Форма.ТабличныйДокумент.Области.П000010000212.Значение + Форма.ТабличныйДокумент.Области["П000010000112" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000213, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000213.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000213.Значение = Форма.ТабличныйДокумент.Области.П000010000213.Значение + Форма.ТабличныйДокумент.Области["П000010000113" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000214, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000214.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000214.Значение = Форма.ТабличныйДокумент.Области.П000010000214.Значение + Форма.ТабличныйДокумент.Области["П000010000114" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000215, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000215.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000215.Значение = Форма.ТабличныйДокумент.Области.П000010000215.Значение + Форма.ТабличныйДокумент.Области["П000010000115" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000216, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000216.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000216.Значение = Форма.ТабличныйДокумент.Области.П000010000216.Значение + Форма.ТабличныйДокумент.Области["П000010000116" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000217, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000217.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000217.Значение = Форма.ТабличныйДокумент.Области.П000010000217.Значение + Форма.ТабличныйДокумент.Области["П000010000117" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000218, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000218.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000218.Значение = Форма.ТабличныйДокумент.Области.П000010000218.Значение + Форма.ТабличныйДокумент.Области["П000010000118" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		//Многострочная часть 2
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				
				ПостфиксСтроки = "_" + Формат(Инд, "ЧГ=0");

				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000313, ОбластьИмя) > 0 Тогда
					
					СтраницыРаздела = Неопределено;
					Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, СтраницыРаздела);
					СтраницыРаздела = Форма[СтраницыРаздела];
					
					АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
					Если АктивнаяСтраница.Количество() = 0 Тогда
						Возврат;
					Иначе
						АктивнаяСтраница = АктивнаяСтраница[0];
					КонецЕсли;
					
					Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
						ДополнительныеДанныеЛиста = Неопределено;
					ИначеЕсли ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) <> Тип("Структура") Тогда
						ДополнительныеДанныеЛиста = Неопределено;
					Иначе
						ДополнительныеДанныеЛиста = АктивнаяСтраница.ДополнительныеДанные[0].Значение;
					КонецЕсли;
					
					Графа09 = 0;
					Графа10 = 0;
					Графа11 = 0;
					
					Отгрузка = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеЛиста, "П0000100003" + "08" + ПостфиксСтроки);
					Если Отгрузка <> Неопределено Тогда
						Графа09 = Отгрузка.Итог("Розничные");
						Графа10 = Отгрузка.Итог("Оптовые");
						Графа11 = Отгрузка.Итог("Другие");
					КонецЕсли;
					
					Графа12 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "12" + ПостфиксСтроки);
					
					ЗначениеГрафы13 = Графа09 + Графа10 + Графа11 + Графа12;
					ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100003" + "13" + ПостфиксСтроки, ЗначениеГрафы13);
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000317, ОбластьИмя) > 0 Тогда
					
					Графа04 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "04" + ПостфиксСтроки);
					Графа05 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "05" + ПостфиксСтроки);
					Графа06 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "06" + ПостфиксСтроки);
					Графа07 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "07" + ПостфиксСтроки);
					Графа13 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "13" + ПостфиксСтроки);
					Графа15 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "15" + ПостфиксСтроки);
					Графа16 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "16" + ПостфиксСтроки);
					
					ЗначениеГрафы17 = Графа04 + Графа05 + Графа06 + Графа07 - Графа13 - Графа15 - Графа16;
					ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100003" + "17" + ПостфиксСтроки, ЗначениеГрафы17);
					
				КонецЕсли;
				
			КонецЦикла;
				
		Иначе
				
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000313, ОбластьИмя) > 0 Тогда
				
				СтраницыРаздела = Неопределено;
				Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, СтраницыРаздела);
				СтраницыРаздела = Форма[СтраницыРаздела];
				
				АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				Если АктивнаяСтраница.Количество() = 0 Тогда
					Возврат;
				Иначе
					АктивнаяСтраница = АктивнаяСтраница[0];
				КонецЕсли;
				
				Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
					ДополнительныеДанныеЛиста = Неопределено;
				ИначеЕсли ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) <> Тип("Структура") Тогда
					ДополнительныеДанныеЛиста = Неопределено;
				Иначе
					ДополнительныеДанныеЛиста = АктивнаяСтраница.ДополнительныеДанные[0].Значение;
				КонецЕсли;
				
				Графа09 = 0;
				Графа10 = 0;
				Графа11 = 0;
				
				Отгрузка = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеЛиста, "П0000100003" + "08" + ПостфиксСтроки);
				Если Отгрузка <> Неопределено Тогда
					Графа09 = Отгрузка.Итог("Розничные");
					Графа10 = Отгрузка.Итог("Оптовые");
					Графа11 = Отгрузка.Итог("Другие");
				КонецЕсли;
				
				Графа12 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "12" + ПостфиксСтроки);
				
				ЗначениеГрафы13 = Графа09 + Графа10 + Графа11 + Графа12;
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100003" + "13" + ПостфиксСтроки, ЗначениеГрафы13);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000317, ОбластьИмя) > 0 Тогда
				
				Графа04 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "04" + ПостфиксСтроки);
				Графа05 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "05" + ПостфиксСтроки);
				Графа06 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "06" + ПостфиксСтроки);
				Графа07 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "07" + ПостфиксСтроки);
				Графа13 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "13" + ПостфиксСтроки);
				Графа15 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "15" + ПостфиксСтроки);
				Графа16 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П0000100003" + "16" + ПостфиксСтроки);
				
				ЗначениеГрафы17 = Графа04 + Графа05 + Графа06 + Графа07 - Графа13 - Графа15 - Графа16;
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100003" + "17" + ПостфиксСтроки, ЗначениеГрафы17);
				
			КонецЕсли;

		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000404, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000404.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000404.Значение = Форма.ТабличныйДокумент.Области.П000010000404.Значение + Форма.ТабличныйДокумент.Области["П000010000304" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;			
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000405, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000405.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000405.Значение = Форма.ТабличныйДокумент.Области.П000010000405.Значение + Форма.ТабличныйДокумент.Области["П000010000305" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000406, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000406.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000406.Значение = Форма.ТабличныйДокумент.Области.П000010000406.Значение + Форма.ТабличныйДокумент.Области["П000010000306" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000407, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000407.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000407.Значение = Форма.ТабличныйДокумент.Области.П000010000407.Значение + Форма.ТабличныйДокумент.Области["П000010000307" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000408, ОбластьИмя) > 0 Тогда
			
			ИтогПоГрафе09 = 0;
			ИтогПоГрафе10 = 0;
			ИтогПоГрафе11 = 0;
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				
				СтраницыРаздела = Неопределено;
				Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, СтраницыРаздела);
				СтраницыРаздела = Форма[СтраницыРаздела];
				
				АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				Если АктивнаяСтраница.Количество() = 0 Тогда
					Возврат;
				Иначе
					АктивнаяСтраница = АктивнаяСтраница[0];
				КонецЕсли;
				
				Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
					ДополнительныеДанныеЛиста = Неопределено;
				ИначеЕсли ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) <> Тип("Структура") Тогда
					ДополнительныеДанныеЛиста = Неопределено;
				Иначе
					ДополнительныеДанныеЛиста = АктивнаяСтраница.ДополнительныеДанные[0].Значение;
				КонецЕсли;
				
				Графа09 = 0;
				Графа10 = 0;
				Графа11 = 0;
				
				Отгрузка = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеЛиста, "П0000100003" + "08" + Постфикс);
				Если Отгрузка <> Неопределено Тогда
					Графа09 = Отгрузка.Итог("Розничные");
					Графа10 = Отгрузка.Итог("Оптовые");
					Графа11 = Отгрузка.Итог("Другие");
				КонецЕсли;
				
				ИтогПоГрафе09 = ИтогПоГрафе09 + Графа09;
				ИтогПоГрафе10 = ИтогПоГрафе10 + Графа10;
				ИтогПоГрафе11 = ИтогПоГрафе11 + Графа11;
				
			КонецЦикла;
			
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100004" + "09", ИтогПоГрафе09);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100004" + "10", ИтогПоГрафе10);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П0000100004" + "11", ИтогПоГрафе11);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000412, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000412.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000412.Значение = Форма.ТабличныйДокумент.Области.П000010000412.Значение + Форма.ТабличныйДокумент.Области["П000010000312" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000413, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000413.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000413.Значение = Форма.ТабличныйДокумент.Области.П000010000413.Значение + Форма.ТабличныйДокумент.Области["П000010000313" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000414, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000414.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000414.Значение = Форма.ТабличныйДокумент.Области.П000010000414.Значение + Форма.ТабличныйДокумент.Области["П000010000314" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000415, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000415.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000415.Значение = Форма.ТабличныйДокумент.Области.П000010000415.Значение + Форма.ТабличныйДокумент.Области["П000010000315" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000416, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000416.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000416.Значение = Форма.ТабличныйДокумент.Области.П000010000416.Значение + Форма.ТабличныйДокумент.Области["П000010000316" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000417, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000417.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000417.Значение = Форма.ТабличныйДокумент.Области.П000010000417.Значение + Форма.ТабличныйДокумент.Области["П000010000317" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000418, ОбластьИмя) > 0 Тогда
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = Форма[СтруктураГруппы];
			
			КоличествоСтрок = СтруктураГруппы.Количество();
			Форма.ТабличныйДокумент.Области.П000010000418.Значение = 0;
			Для Инд = 1 По КоличествоСтрок Цикл
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Форма.ТабличныйДокумент.Области.П000010000418.Значение = Форма.ТабличныйДокумент.Области.П000010000418.Значение + Форма.ТабличныйДокумент.Области["П000010000318" + Постфикс].Значение;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, АдресДанных)
	
	Возврат МестоРазмещенияДанных.Области[АдресДанных].Значение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, АдресДанных, ЗначениеДанных)
	
	МестоРазмещенияДанных.Области[АдресДанных].Значение = ЗначениеДанных;
	
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда, ИмяОбласти = "")
	
	ИмяОбласти = ЭтаФорма["ТабличныйДокумент"].ТекущаяОбласть.Имя;
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИмяОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим, ИмяОбласти = Неопределено)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим, ИмяОбласти);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница, ИмяОбласти = Неопределено)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы, которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница, ИмяОбласти);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница, ИмяОбласти);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтраница = "Декларация" И ИмяГруппы = "П0000100001" Тогда
		
		СтраницыРаздела = Неопределено;
		Форма.мСтруктураМногостраничныхРазделов.Свойство("Декларация", СтраницыРаздела);
		СтраницыРаздела = Форма[СтраницыРаздела];
		АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
	        ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ИндексСтраницы <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
    	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "00_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "00" Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "00" Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из Форма.ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из Форма.ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПронумероватьТаблицыДекларация(Форма);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда, ИмяОбласти = "")
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяОбласти     = ТекТабличноеПоле.ТекущаяОбласть.Имя;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяОбласти);
	
	Если ИмяГруппы = Неопределено
	 ИЛИ ((ИмяГруппы = "П0000100001" ИЛИ ИмяГруппы = "П0000200001")
	   И Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета > 1) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");

	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект, Новый Структура("ИмяГруппы", ИмяГруппы));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяГруппы = ДополнительныеПараметры.ИмяГруппы;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИмяГруппы);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИмяГруппы);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница, ИмяГруппы)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница, ИмяГруппы)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница, ИмяГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомУдаляемойСтрокиСтр = Формат(НомУдаляемойСтроки, "ЧГ=");
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// Удаление дополнительных данных.
	СтраницыРаздела = Неопределено;
	РазделМногостраничный = Форма.мСтруктураМногостраничныхРазделов.Свойство(ТекущаяСтраница, СтраницыРаздела);
	АктивнаяСтраница = Неопределено;
	ДопДанные = Ложь;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Если РазделМногостраничный Тогда
		СтраницыРаздела = Форма[СтраницыРаздела];
		АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			Если АктивнаяСтраница.ДополнительныеДанные.Количество() > 0 Тогда 
				Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
					ДопДанные = Истина;
					Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
						Если НомерГрафы = 1 Тогда
							КолонкаТаблицыИмя = "УдалитьСтроку" + СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
							ИмяДополнительныхДанных = КолонкаТаблицыИмя + "_" + НомУдаляемойСтрокиСтр;
							Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяДополнительныхДанных) Тогда
								АктивнаяСтраница.ДополнительныеДанные[0].Значение.Удалить(ИмяДополнительныхДанных);
								АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
							КонецЕсли;
						КонецЕсли;
						КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
						ИмяДополнительныхДанных = КолонкаТаблицыИмя + "_" + НомУдаляемойСтрокиСтр;
						Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяДополнительныхДанных) Тогда
							АктивнаяСтраница.ДополнительныеДанные[0].Значение.Удалить(ИмяДополнительныхДанных);
							АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			Если НомерГрафы = 1 Тогда
				КолонкаТаблицыИмя = "УдалитьСтроку" + СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				ИмяДополнительныхДанных = КолонкаТаблицыИмя + "_" + НомУдаляемойСтрокиСтр;
				Если Форма.ДополнительныеДанные[ТекущаяСтраница].Свойство(ИмяДополнительныхДанных) Тогда
					Форма.ДополнительныеДанные[ТекущаяСтраница].Удалить(ИмяДополнительныхДанных);
				КонецЕсли;
			КонецЕсли;
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			ИмяДополнительныхДанных = КолонкаТаблицыИмя + "_" + НомУдаляемойСтрокиСтр;
			Если Форма.ДополнительныеДанные[ТекущаяСтраница].Свойство(ИмяДополнительныхДанных) Тогда
				Форма.ДополнительныеДанные[ТекущаяСтраница].Удалить(ИмяДополнительныхДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "00_" + НомУдаляемойСтрокиСтр;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				НСтрСуфф = Формат(НСтр, "ЧГ=");
				НПредСуфф = Формат(НСтр - 1, "ЧГ=");
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					Если НомерГрафы = 1 Тогда
						
						КолонкаИмя = "УдалитьСтроку" + СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСуфф;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НПредСуфф;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						// Изменение имени ячейки в дополнительных сведениях многострочной части.
						Если РазделМногостраничный Тогда
							Если ДопДанные Тогда
								Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяСдвинутойЯчейки) Тогда
									АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(НовоеИмяСдвинутойЯчейки, АктивнаяСтраница.ДополнительныеДанные[0].Значение[ИмяСдвинутойЯчейки]);
									АктивнаяСтраница.ДополнительныеДанные[0].Значение.Удалить(ИмяСдвинутойЯчейки);
									АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Если Форма.ДополнительныеДанные[ТекущаяСтраница].Свойство(ИмяСдвинутойЯчейки) Тогда
								Форма.ДополнительныеДанные[ТекущаяСтраница].Вставить(НовоеИмяСдвинутойЯчейки, Форма.ДополнительныеДанные[ТекущаяСтраница][ИмяСдвинутойЯчейки]);
								Форма.ДополнительныеДанные[ТекущаяСтраница].Удалить(ИмяСдвинутойЯчейки);
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						                        						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСуфф;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НПредСуфф;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						// Изменение имени ячейки в дополнительных сведениях многострочной части.
						Если РазделМногостраничный Тогда
							Если ДопДанные Тогда 
								Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяСдвинутойЯчейки) Тогда
									АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(НовоеИмяСдвинутойЯчейки, АктивнаяСтраница.ДополнительныеДанные[0].Значение[ИмяСдвинутойЯчейки]);
									АктивнаяСтраница.ДополнительныеДанные[0].Значение.Удалить(ИмяСдвинутойЯчейки);
									АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Если Форма.ДополнительныеДанные[ТекущаяСтраница].Свойство(ИмяСдвинутойЯчейки) Тогда
								Форма.ДополнительныеДанные[ТекущаяСтраница].Вставить(НовоеИмяСдвинутойЯчейки, Форма.ДополнительныеДанные[ТекущаяСтраница][ИмяСдвинутойЯчейки]);
								Форма.ДополнительныеДанные[ТекущаяСтраница].Удалить(ИмяСдвинутойЯчейки);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		
		ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы);
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "00_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	ПронумероватьТаблицыДекларация(Форма);
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из Форма.ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из Форма.ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
					
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ТекстВопроса =  НСтр("ru='Удалить текущую страницу?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	УдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
					
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);

		// очищаем редактируемые ячейки удаляемой страницы
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);

		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			//
			Если (ИмяТекущейСтраницыПанели = "Декларация") Тогда

				// Предварительно проверим, содержит ли страница многострочные части
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок[0].Значение;

				Если ДанныеДопСтрокРаздела <> Неопределено Тогда
					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;
											
						ПромТаблицаГруппыСтрок = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
						КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);

						// Заменяем таблицу значений с данными текущей страницы.
						КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, Форма[ИмяГруппыДопСтрок]);
						// Выводим в табличный документ строки многострочной группы
						ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;

			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл

				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Попытка
					Форма[ИмяТекТабличногоПоля].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			КонецЦикла;

			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;

		Расчет(Форма, ИмяТекущейСтраницыПанели);
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		УстановитьДоступностьПолейДекларация(Форма);
		ПронумероватьТаблицыДекларация(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	// Сначала сохраним данные текущей страницы.
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТекТабличногоПоля);

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, ИмяТекущейСтраницыПанели);	
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
	КонецЕсли;
	
	ОпределитьПредставлениеДопСтраниц(ИмяТекущейСтраницыПанели);
	
	Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
		СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
	Иначе
		СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
	КонецЕсли;
	
	Если (ИмяТекущейСтраницыПанели = "Декларация") Тогда
		
		Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
			СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
		Иначе
			СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		УстановитьДоступностьПолейДекларация(ЭтаФорма);
		ПронумероватьТаблицыДекларация(ЭтаФорма);
	КонецЕсли;

	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПредставлениеДопСтраниц(ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);
	
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = ЭтаФорма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим ее представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = "Лист N " + Строка(НомерСтраницы);
					Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
						СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
					Иначе
						СтрокаТаблицы.Представление = "Новая страница";
					КонецЕсли;

				КонецЕсли; // ТолькоАктивная

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Лицензии" 
		И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101' 
		И Не ЛицензируемаяДеятельность(ЭтаФорма) Тогда
		ПерваяСтраница = ТаблицаСтраницыЛицензии[0];
		ПоследняяСтраница = ТаблицаСтраницыЛицензии[ТаблицаСтраницыЛицензии.Количество() - 1];
		СтруктураДопДанных = 
		    Новый Структура("П000000000105", ПерваяСтраница.ДополнительныеДанные[0].Значение.П000000000105);
		ПоследняяСтраница.ДополнительныеДанные.Добавить(СтруктураДопДанных); 
		ТабличныйДокумент.Область("П000000000105").Значение = ПерваяСтраница.Данные[0].Значение.П000000000105;
	КонецЕсли;
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		ЭтаФорма.НомерКорректировки                = 0;
		ТабличныйДокумент.Области.НомКорр.Значение = 0;
		СтруктураРеквизитовФормы.ВидДокумента      = 0;
		
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
		
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя,ПеременныеМодуля) Экспорт
		
	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Возврат ИзмененияПроизошли;	
		
КонецФункции

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(Истина);

	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;

	ЗаполнитьДатуВЯчейкахНаСервере();

	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	Модифицированность = Истина;
	
Конецпроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
				
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт

	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		
		ЭтаФорма[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
		
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделов();
		
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	СохрНаимТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолучитьМакетФормыОтчета(Раздел.ИмяСтраницы));
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = Раздел.ИмяСтраницы;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолучитьМакетФормыОтчета(Раздел.ИмяСтраницы));
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = Раздел.ИмяСтраницы;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		КонецЕсли;
		
		Если Раздел.ИмяСтраницы = "Лицензии" ИЛИ Раздел.ИмяСтраницы = "Декларация" Тогда
			Для Каждого Страница Из ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]] Цикл
		   		Если Страница.ДополнительныеДанные.Количество() = 0 Тогда
					Страница.ДополнительныеДанные.Очистить();
					Страница.ДополнительныеДанные.Добавить(Новый Структура);
					Страница.ДополнительныеДанные[0].Пометка = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = СохрНаимТекущегоРаздела;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
	ИмяОбласти = Область.Имя;
	ЭтоКППМестаДеятельности = (СтрНайти(ИмяОбласти, "П000000000201") = 1);
	
	Если ЭтоКППМестаДеятельности Тогда
		
		КППМестаДеятельности = Область.Значение;
		Если КППМестаДеятельности = ""
			ИЛИ (СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КППМестаДеятельности) И СтрДлина(КППМестаДеятельности) = 9) Тогда
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='КПП должен состоять из 9 цифр.'");
			Сообщение.Сообщить();
			Область.Значение = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяОбласти = "НомКорр" Тогда
		
		НомерКорректировки = Область.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяОбласти = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
		ДатаПодписиПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Элемент.ТекущаяОбласть.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФормыОбъекта(Ссылка)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьИмяФормыОбъекта(Ссылка);
	
КонецФункции

&НаКлиенте
Процедура НажатиеГиперссылки(Значение, РежимОткрытияОкна, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
		
	ИмяФормыОбъекта = ПолучитьИмяФормыОбъекта(Значение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Значение);
	ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкна);
	
КонецПроцедуры
																						
&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ИмяОбласти = Область.Имя;
	
	Если ИмяОбласти = "ЗаявлениеОКорректировкеПредставление" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Значениезаполнено(ЗаявлениеОКорректировке) Тогда			
			// Открываем документ Заявления.
			НажатиеГиперссылки(ЗаявлениеОКорректировке, РежимОткрытияОкнаФормы.Независимый,
																						СтандартнаяОбработка);			
		Иначе
			
			// Формируем параметры создания отчета Заявление о корректировке.
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Неопределено);
			ПараметрыФормы.Вставить("мСкопированаФорма",        Неопределено);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
			ПараметрыФормы.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
			
			
			ПараметрыФормы.Вставить("НомерПриложения",          "3");
			ПараметрыФормы.Вставить("СданныйАлкоОтчет",    		СтруктураРеквизитовФормы.мСохраненныйДок);
			
			ИмяФормыЗаявления = "Отчет.РегламентированныйОтчетАлкоЗаявлениеОКорректировке.Форма.ОсновнаяФорма";
			ОткрытьФорму(ИмяФормыЗаявления, ПараметрыФормы, ЭтаФорма.ВладелецФормы, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтраницу") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтроку") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("", ИмяОбласти);
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("", ИмяОбласти);
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ИмяОбласти = "ОбособленноеПодразделение") Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиСведенияОбОП();
	КонецЕсли;
	
	ЭтоПоляОтгрузкиПоРФ = (СтрНайти(ИмяОбласти, "П000010000108") = 1
	                  ИЛИ СтрНайти(ИмяОбласти, "П000010000109") = 1
	                  ИЛИ СтрНайти(ИмяОбласти, "П000010000110") = 1
	                  ИЛИ СтрНайти(ИмяОбласти, "П000010000111") = 1
	                  ИЛИ СтрНайти(ИмяОбласти, "П000010000308") = 1
	                  ИЛИ СтрНайти(ИмяОбласти, "П000010000309") = 1
	                  ИЛИ СтрНайти(ИмяОбласти, "П000010000310") = 1
	                  ИЛИ СтрНайти(ИмяОбласти, "П000010000311") = 1);
	
	Если (ЭтоПоляОтгрузкиПоРФ) Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиСведенияОбОтгрузкахПоРФ(ИмяОбласти);
	КонецЕсли;
	
	ЭтоАдресМестаДеятельности = СтрНайти(ИмяОбласти, "П000000000202") = 1
							ИЛИ СтрНайти(ИмяОбласти, "П000000000203") = 1
							ИЛИ СтрНайти(ИмяОбласти, "П000000000204") = 1
							ИЛИ СтрНайти(ИмяОбласти, "П000000000205") = 1
							ИЛИ СтрНайти(ИмяОбласти, "П000000000206") = 1
							ИЛИ СтрНайти(ИмяОбласти, "П000000000207") = 1;
	
	Если ЭтоАдресМестаДеятельности Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиАдресМестаДеятельности(ИмяОбласти, Элемент);
	КонецЕсли;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрВводаПоля.Количество() = 0 Тогда
		
		ПараметрВводаПоля = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ПараметрВводаПоля = ПараметрВводаПоля[0];
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		ИмяПоказателя = ?(РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяОбласти) > 0, ИмяОбласти, ПараметрВводаПоля.Показатель);
		ВвестиПоказатель(Элемент, Область, ИмяПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
	КонецЕсли;
			
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте    
Процедура ВвестиСведенияОбОтгрузкахПоРФ(ИмяОбласти)
		
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	СтраницыРаздела = мСтруктураМногостраничныхРазделов[ИмяРаздела];
	СтраницыРаздела = ЭтаФорма[СтраницыРаздела];
	
	АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если АктивнаяСтраница.Количество() = 0 Тогда
		Возврат;
	Иначе
		АктивнаяСтраница = АктивнаяСтраница[0];
	КонецЕсли;
	
	Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
		АктивнаяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
	
	ИмяДополнительныхДанных = Лев(ИмяОбласти, 11) + "08" + Сред(ИмяОбласти, 14);
	
	ИндексАктивнойСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИндексАктивнойСтраницы", ИндексАктивнойСтраницы);
	ПараметрыФормы.Вставить("ИмяДополнительныхДанных", ИмяДополнительныхДанных);
	
	ФормаВводаРеквизитов = ПолучитьФорму("Отчет.РегламентированныйОтчетАлкоПриложение3.Форма.ВводОтгрузокПоРФ", ПараметрыФормы, ЭтаФорма);
	РезультатВвода = Неопределено;
	ДополнительныеПараметры = Новый Структура("АктивнаяСтраница, ИмяДополнительныхДанных, ИмяОбласти", АктивнаяСтраница, ИмяДополнительныхДанных, ИмяОбласти);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиСведенияОбОтгрузкахПоРФЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаВводаРеквизитов.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВводаРеквизитов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВводаРеквизитов.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСведенияОбОтгрузкахПоРФЗавершение(РезультатВвода, ДополнительныеПараметры) Экспорт
	
	АктивнаяСтраница = ДополнительныеПараметры.АктивнаяСтраница;
	ИмяДополнительныхДанных = ДополнительныеПараметры.ИмяДополнительныхДанных;
	ИмяОбласти = ДополнительныеПараметры.ИмяОбласти;
	
	Если РезультатВвода <> Неопределено Тогда
		АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(ИмяДополнительныхДанных, РезультатВвода);
		АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
		
		Для Каждого Отгрузка Из РезультатВвода Цикл
			Если РезультатВвода.Индекс(Отгрузка) = 0 Тогда
				Коды      = Отгрузка.КодСубъектаРФ + ?(ЗначениеЗаполнено(Отгрузка.КодСубъектаРФ),"", " ");
				Розничные = Формат(Отгрузка.Розничные, "ЧДЦ=5") + ?(ЗначениеЗаполнено(Отгрузка.Розничные),"", " ");
				Оптовые   = Формат(Отгрузка.Оптовые, "ЧДЦ=5") + ?(ЗначениеЗаполнено(Отгрузка.Оптовые),"", " ");
				Другие    = Формат(Отгрузка.Другие, "ЧДЦ=5") + ?(ЗначениеЗаполнено(Отгрузка.Другие),"", " ");
			Иначе
				Коды      = Коды + Символы.ПС + Отгрузка.КодСубъектаРФ + ?(ЗначениеЗаполнено(Отгрузка.КодСубъектаРФ),"", " ");
				Розничные = Розничные + Символы.ПС + Формат(Отгрузка.Розничные, "ЧДЦ=5") + ?(ЗначениеЗаполнено(Отгрузка.Розничные),"", " ");
				Оптовые   = Оптовые + Символы.ПС + Формат(Отгрузка.Оптовые, "ЧДЦ=5") + ?(ЗначениеЗаполнено(Отгрузка.Оптовые),"", " ");
				Другие    = Другие + Символы.ПС + Формат(Отгрузка.Другие, "ЧДЦ=5") + ?(ЗначениеЗаполнено(Отгрузка.Другие),"", " ");
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.Области[Лев(ИмяОбласти, 11) + "08" + Сред(ИмяОбласти, 14)].Значение = Коды;
		ТабличныйДокумент.Области[Лев(ИмяОбласти, 11) + "09" + Сред(ИмяОбласти, 14)].Значение = Розничные;
		ТабличныйДокумент.Области[Лев(ИмяОбласти, 11) + "10" + Сред(ИмяОбласти, 14)].Значение = Оптовые;
		ТабличныйДокумент.Области[Лев(ИмяОбласти, 11) + "11" + Сред(ИмяОбласти, 14)].Значение = Другие;
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяОбласти);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.АдресМестаДеятельности, Параметры.ПорядковыйНомер, Параметры.АктивнаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, АдресМестаДеятельности, ПорядковыйНомер = Неопределено, АктивнаяСтраница = Неопределено)
	
	АдресМестаДеятельности_ = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "АдресМестаДеятельности", передаваемого в качестве параметра.
		АдресМестаДеятельности_ = АдресМестаДеятельности;
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			АдресМестаДеятельности_.Вставить("КодСтраны",       "");
			АдресМестаДеятельности_.Вставить("Индекс",          "");
			АдресМестаДеятельности_.Вставить("КодРегиона",      "");
			АдресМестаДеятельности_.Вставить("Регион",          "");
			АдресМестаДеятельности_.Вставить("Район",           "");
			АдресМестаДеятельности_.Вставить("Город",           "");
			АдресМестаДеятельности_.Вставить("НаселенныйПункт", "");
			АдресМестаДеятельности_.Вставить("Улица",           "");
			АдресМестаДеятельности_.Вставить("Дом",             "");
			АдресМестаДеятельности_.Вставить("Корпус",          "");
			АдресМестаДеятельности_.Вставить("Квартира",        "");
			АдресМестаДеятельности_.Вставить("ТипДома",         "");
			АдресМестаДеятельности_.Вставить("ТипКорпуса",      "");
			АдресМестаДеятельности_.Вставить("ТипКвартиры",     "");
			
			РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, АдресМестаДеятельности_);
			
			Если Результат.ВведеноВСвободнойФорме 
				и ( (АдресМестаДеятельности_.Страна = "643") 
					или (ВРег(АдресМестаДеятельности_.Страна) = "РОССИЯ")
					или (АдресМестаДеятельности_.Страна = "") ) Тогда
			
				// для России ввод адресов в свободной форме запрещен
			    Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Российские адреса нельзя вводить в свободной форме!'");
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
			АдресМестаДеятельности_.Удалить("Регион");

			Модифицированность = Истина;

		КонецЕсли;
		
		ИмяОбластиДляВывода = "П000000000202_" + ПорядковыйНомер;
		ТабличныйДокумент.Области[ИмяОбластиДляВывода].Значение = АдресМестаДеятельности_.Индекс;
		
		ИмяОбластиДляВывода = "П000000000203_" + ПорядковыйНомер;
		ТабличныйДокумент.Области[ИмяОбластиДляВывода].Значение = АдресМестаДеятельности_.КодРегиона;
		
		ТабличныйДокумент.Области["П000000000204_" + ПорядковыйНомер].Значение = АдресМестаДеятельности_.Район;
		ТабличныйДокумент.Области["П000000000205_" + ПорядковыйНомер].Значение = ?(ПустаяСтрока(АдресМестаДеятельности_.Город), АдресМестаДеятельности_.НаселенныйПункт, АдресМестаДеятельности_.Город);
		ТабличныйДокумент.Области["П000000000206_" + ПорядковыйНомер].Значение = АдресМестаДеятельности_.Улица;
		
		СтрокаДома = АдресМестаДеятельности_.Дом;
		СтрокаДома = СтрокаДома + ?(ПустаяСтрока(АдресМестаДеятельности_.Корпус), "", ", " + АдресМестаДеятельности_.Корпус);
		СтрокаДома = СтрокаДома + ?(ПустаяСтрока(АдресМестаДеятельности_.Квартира), "", ", " + АдресМестаДеятельности_.Квартира);
		ТабличныйДокумент.Области["П000000000207_" + ПорядковыйНомер].Значение = СтрокаДома;
		
	КонецЕсли;
	
	АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить("АдресМестаДеятельности" + ПорядковыйНомер,
		?(АдресМестаДеятельности_ <> Неопределено, АдресМестаДеятельности_, АдресМестаДеятельности));
	АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСведенияОбОП()
		
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	СтраницыРаздела = Неопределено;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, СтраницыРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	СтраницыРаздела = ЭтаФорма[СтраницыРаздела];
	
	АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если АктивнаяСтраница.Количество() = 0 Тогда
		Возврат;
	Иначе
		АктивнаяСтраница = АктивнаяСтраница[0];
	КонецЕсли;
	
	Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
		АктивнаяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
		
	СведенияОбОП = Новый Структура;
	
	СведенияОбОП.Вставить("Наименование", "");
	СведенияОбОП.Вставить("ИНН",          "");
	СведенияОбОП.Вставить("КПП",          "");
	
	СведенияОбОП.Вставить("Страна",          "РОССИЯ");
	СведенияОбОП.Вставить("Индекс",          "");
	СведенияОбОП.Вставить("КодРегиона",      "");
	СведенияОбОП.Вставить("Район",           "");
	СведенияОбОП.Вставить("Город",           "");
	СведенияОбОП.Вставить("НаселенныйПункт", "");
	СведенияОбОП.Вставить("Улица",           "");
	СведенияОбОП.Вставить("Дом",             "");
	СведенияОбОП.Вставить("Корпус",          "");
	СведенияОбОП.Вставить("Квартира",        "");
	
	СведенияОбОП.Вставить("ТипДома",         "");
	СведенияОбОП.Вставить("ТипКорпуса",      "");
	СведенияОбОП.Вставить("ТипКвартиры",     "");
	
	СведенияОбОП.Вставить("ПредставлениеАдреса", "");
	
	СохраненныеСведения = Неопределено;
	ИмяЭлементаСтруктуры = "СведенияОбОП";
	
	Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненныеСведения) Тогда
    	ЗаполнитьЗначенияСвойств(СведенияОбОП, СохраненныеСведения);
	КонецЕсли;
	
	Если ПустаяСтрока(СведенияОбОП.ИНН) Тогда
		СведенияОбОП.ИНН = СтруктураДанныхТитульный.ИНН1;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СведенияОбОП", СведенияОбОП);	
	
	ФормаВводаРеквизитов = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВводРеквизитовОП", ПараметрыФормы);
	ДополнительныеПараметры = Новый Структура("АктивнаяСтраница, ИмяЭлементаСтруктуры, СведенияОбОП", АктивнаяСтраница, ИмяЭлементаСтруктуры, СведенияОбОП);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиСведенияОбОПЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаВводаРеквизитов.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВводаРеквизитов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВводаРеквизитов.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСведенияОбОПЗавершение(РезультатВвода, ДополнительныеПараметры) Экспорт
	
	АктивнаяСтраница = ДополнительныеПараметры.АктивнаяСтраница;
	ИмяЭлементаСтруктуры = ДополнительныеПараметры.ИмяЭлементаСтруктуры;
	СведенияОбОП = ДополнительныеПараметры.СведенияОбОП;
	
	Если РезультатВвода <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СведенияОбОП, РезультатВвода);
		АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(ИмяЭлементаСтруктуры, СведенияОбОП);
		
		ВыводитьРеквизиты = (НЕ ПустаяСтрока(РезультатВвода.Наименование) 
		ИЛИ НЕ ПустаяСтрока(РезультатВвода.ИНН) 
		ИЛИ НЕ ПустаяСтрока(РезультатВвода.КПП)
		ИЛИ НЕ ПустаяСтрока(РезультатВвода.ПредставлениеАдреса));
		
		Если ВыводитьРеквизиты Тогда
			НаименованиеОП = "";
			Если НЕ ПустаяСтрока(РезультатВвода.Наименование) Тогда
				НаименованиеОП = РезультатВвода.Наименование;
			КонецЕсли;
			Если НЕ ПустаяСтрока(РезультатВвода.ИНН) Тогда
				НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "ИНН " + РезультатВвода.ИНН;
			КонецЕсли;
			Если НЕ ПустаяСтрока(РезультатВвода.КПП) Тогда
				НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "КПП " + РезультатВвода.КПП;
			КонецЕсли;
			Если НЕ ПустаяСтрока(РезультатВвода.ПредставлениеАдреса) Тогда
				НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", Символы.ПС) + РезультатВвода.ПредставлениеАдреса;
			КонецЕсли;
		Иначе
			НаименованиеОП = "";
		КонецЕсли;
		
		ТабличныйДокумент.Области.ОбособленноеПодразделение.Значение = НаименованиеОП;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАдресМестаДеятельности(ИмяОбласти, Элемент);
	
	ПорядковыйНомер = Прав(ИмяОбласти, 1);
	
	СтраницыРазделаЛицензии = Неопределено;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство("Лицензии", СтраницыРазделаЛицензии) Тогда
		Возврат;
	КонецЕсли;
	
	СтраницыРазделаЛицензии = ЭтаФорма[СтраницыРазделаЛицензии];
	
	АктивнаяСтраница = СтраницыРазделаЛицензии.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если АктивнаяСтраница.Количество() = 0 Тогда
		Возврат;
	Иначе
		АктивнаяСтраница = АктивнаяСтраница[0];
	КонецЕсли;
	
	Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
		АктивнаяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
		
	АдресМестаДеятельности = Новый Структура;
	АдресМестаДеятельности.Вставить("Страна",          "РОССИЯ");
	АдресМестаДеятельности.Вставить("Индекс",          "");
	АдресМестаДеятельности.Вставить("КодРегиона",      "");
	АдресМестаДеятельности.Вставить("Регион",          "");
	АдресМестаДеятельности.Вставить("Район",           "");
	АдресМестаДеятельности.Вставить("Город",           "");
	АдресМестаДеятельности.Вставить("НаселенныйПункт", "");
	АдресМестаДеятельности.Вставить("Улица",           "");
	АдресМестаДеятельности.Вставить("Дом",             "");
	АдресМестаДеятельности.Вставить("Корпус",          "");
	АдресМестаДеятельности.Вставить("Квартира",        "");
	АдресМестаДеятельности.Вставить("ТипДома",         "");
	АдресМестаДеятельности.Вставить("ТипКорпуса",      "");
	АдресМестаДеятельности.Вставить("ТипКвартиры",     "");

	ИмяЭлементаСтруктуры = "АдресМестаДеятельности" + ПорядковыйНомер;
	СохраненныйАдресМестаДеятельности = Неопределено;

	Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненныйАдресМестаДеятельности) Тогда
		ЗаполнитьЗначенияСвойств(АдресМестаДеятельности, СохраненныйАдресМестаДеятельности);
	КонецЕсли;
	
	АдресМестаДеятельности.Регион = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(АдресМестаДеятельности.КодРегиона);
	
	ЗначенияПолей = Новый СписокЗначений;

	ЗначенияПолей.Добавить(АдресМестаДеятельности.Страна,          "Страна");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.Индекс,          "Индекс");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.Регион,          "Регион");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.КодРегиона,      "КодРегиона");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.Район,           "Район");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.Город,           "Город");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.НаселенныйПункт, "НаселенныйПункт");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.Улица,           "Улица");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.Дом,             "Дом");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.Корпус,          "Корпус");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.Квартира,        "Квартира");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.ТипДома,         "ТипДома");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.ТипКорпуса,      "ТипКорпуса");
	ЗначенияПолей.Добавить(АдресМестаДеятельности.ТипКвартиры,     "ТипКвартиры");

	Представление = "";
	
	ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтуктуры("Индекс", АдресМестаДеятельности)),             ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтуктуры("Регион", АдресМестаДеятельности)),             ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтуктуры("Район", АдресМестаДеятельности)),              ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтуктуры("Город", АдресМестаДеятельности)),              ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтуктуры("НаселенныйПункт", АдресМестаДеятельности)),    ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтуктуры("Улица", АдресМестаДеятельности)),              ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтуктуры("Дом", АдресМестаДеятельности)),                ", " + ЗначениеПоКлючуСтуктуры("ТипДома", АдресМестаДеятельности)    + " № ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтуктуры("Корпус", АдресМестаДеятельности)),             ", " + ЗначениеПоКлючуСтуктуры("ТипКорпуса ", АдресМестаДеятельности)+ " ",	Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтуктуры("Квартира", АдресМестаДеятельности)),           ", " + ЗначениеПоКлючуСтуктуры("ТипКвартиры", АдресМестаДеятельности) + " ",	Представление);
	
	Если СтрДлина(Представление) > 2 Тогда
		Представление = Сред(Представление, 3);
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
	ПараметрыФормы.Вставить("Представление", 		   Представление);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресМестаДеятельности", АдресМестаДеятельности);
	ДополнительныеПараметры.Вставить("ПорядковыйНомер",        ПорядковыйНомер);
	ДополнительныеПараметры.Вставить("АктивнаяСтраница",       АктивнаяСтраница);
	
	ТипЗначения = Тип("ОписаниеОповещения");
	ПараметрыКонструктора = Новый Массив(3);
	ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
	ПараметрыКонструктора[1] = ЭтаФорма;
	ПараметрыКонструктора[2] = ДополнительныеПараметры;
	
	Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПоКлючуСтуктуры(Ключ, Структура)
	
	Значение = Неопределено;
	
	Если Структура.Свойство(Ключ, Значение) Тогда 
		Возврат Строка(Значение);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ДополнитьПредставлениеАдреса(Дополнение, СтрокаКонкатенации, Представление)
	
	Если Дополнение <> "" Тогда
		Представление = Представление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантДляЯчеекЛицензии(Вариант)
	Цвет = мСтруктураЦветовРаскраски["_" + Вариант];
	Защита = Вариант > 0;
	
	ТабличныйДокумент.Области.П000000000101.ЦветФона = Цвет;
	ТабличныйДокумент.Области.П000000000101.Защита = Защита;
	ТабличныйДокумент.Области.П000000000102.ЦветФона = Цвет;
	ТабличныйДокумент.Области.П000000000102.Защита = Защита;
	ТабличныйДокумент.Области.П000000000103.ЦветФона = Цвет;
	ТабличныйДокумент.Области.П000000000103.Защита = Защита;
	ТабличныйДокумент.Области.П000000000104.ЦветФона = Цвет;
	ТабличныйДокумент.Области.П000000000104.Защита = Защита;
	
	Если Защита Тогда
		ТабличныйДокумент.Области.П000000000101.Значение = "";
		ТабличныйДокумент.Области.П000000000102.Значение = "";
		ТабличныйДокумент.Области.П000000000103.Значение = '00010101';
		ТабличныйДокумент.Области.П000000000104.Значение = '00010101';
	КонецЕсли;
КонецПроцедуры

// Эта функция вызывается на сервере, чтобы обойти ошибку на сервере, из-за которой
// на сервер не приходит информация об изменениях данных хранимых в списках значений.
&НаСервере
Процедура ЗаменитьВидДеятельностиНаВсехСтраницах(Код, Название)

    ИмяТекущейСтраницыПанели = "ТаблицаСтраницыЛицензии";
	ТаблицаСтраницРаздела = ЭтаФорма.ТаблицаСтраницыЛицензии;

	Для Каждого СтрТаблицаСтраницы Из ТаблицаСтраницРаздела Цикл
		Если СтрТаблицаСтраницы.Данные.Количество() < 1 Или СтрТаблицаСтраницы.АктивнаяСтраница Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрТаблицаСтраницы.Данные.Количество() = 0 Тогда
			Структ = Новый Структура;
			Структ.Вставить("П000000000101");
			Структ.Вставить("П000000000102");
			Структ.Вставить("П000000000103");
			Структ.Вставить("П000000000104");
			Структ.Вставить("П000000000105");
			СтрТаблицаСтраницы.Данные.Добавить(Структ);
		КонецЕсли;
		СтрТаблицаСтраницы.Данные[0].Значение.П000000000101 = "";
		СтрТаблицаСтраницы.Данные[0].Значение.П000000000102 = "";
		СтрТаблицаСтраницы.Данные[0].Значение.П000000000103 = '00010101';
		СтрТаблицаСтраницы.Данные[0].Значение.П000000000104 = '00010101';
		СтрТаблицаСтраницы.Данные[0].Значение.П000000000105 = Название;
		
		Если СтрТаблицаСтраницы.ДополнительныеДанные.Количество() = 0 Тогда
			Структ = Новый Структура;
			Структ.Вставить("П000000000105");
			СтрТаблицаСтраницы.ДополнительныеДанные.Добавить(Структ);
		ИначеЕсли СтрТаблицаСтраницы.ДополнительныеДанные[0].Значение.Количество() = 0 Тогда
			СтрТаблицаСтраницы.ДополнительныеДанные[0].Значение.Вставить("П000000000105");
		КонецЕсли;
		
		СтрТаблицаСтраницы.ДополнительныеДанные[0].Значение.П000000000105 = Код;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЛицензируемаяДеятельность(Форма)
	Если Форма.ТаблицаСтраницыЛицензии.Количество() < 1
		Или Форма.ТаблицаСтраницыЛицензии[0].Данные.Количество() < 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Данные = Форма.ТаблицаСтраницыЛицензии[0].Данные;
	
	ИмяОбласти = "П000000000105";
	Для Каждого КлючЗначение Из Данные[0].Значение Цикл
		Если КлючЗначение.Ключ = ИмяОбласти Тогда
			Если ПустаяСтрока(КлючЗначение.Значение) Тогда
				Код = 0;
			Иначе
				ТаблицаЗначений = Форма.СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти))[0].ТаблицаЗначений;
			    КодСтр = ТаблицаЗначений.НайтиСтроки(Новый Структура("Название", КлючЗначение.Значение))[0].Код;
				Код = ?(ПустаяСтрока(КодСтр), 0, Число(КодСтр));
			КонецЕсли;
			Возврат Код < 8;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	// Показатели спаренные по списку выбора.
	Если СтрНайти(КодПоказателя, "П000000000105") = 1
	 ИЛИ СтрНайти(КодПоказателя, "П000010000101") = 1
	 ИЛИ СтрНайти(КодПоказателя, "П000010000301") = 1 Тогда
		КолонкаПоиска = "Название";
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Если КодПоказателя = "П000000000105" И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101' Тогда
			БылаЛицензируемая = ЛицензируемаяДеятельность(ЭтаФорма);
			СталаЛицензируемая = ?(ПустаяСтрока(РезультатВыбора.Код), Истина, Число(РезультатВыбора.Код) < 8);
			
			// В отчете нельзя совмещать лицензионную или нелицензионную деятельность
			Если Не СталаЛицензируемая 
				И СталаЛицензируемая <> БылаЛицензируемая 
				И ЭтаФорма.ТаблицаСтраницыЛицензии.Количество() > 1 Тогда
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Выбор этого вида деятельности приведет к очистке сведений о лицензиях организации со всех страниц этого раздела. Если в отчете есть нелицензионный вид деятельности, он должен быть единственным.%1Продолжить?'"), 
					Символы.ПС);
					
				ДополнительныеПараметры = Новый Структура("БылаЛицензируемая, КолонкаПоиска, Область, РезультатВыбора, СталаЛицензируемая", БылаЛицензируемая, КолонкаПоиска, Область, РезультатВыбора, СталаЛицензируемая);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросИзменениеВидаДеятельностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе
				ЛицензируемаяДеятельностьИзменение(БылаЛицензируемая, РезультатВыбора, СталаЛицензируемая);
				УстановитьЗначениеИРассчитатьНаКлиенте(КолонкаПоиска, Область, РезультатВыбора);
			КонецЕсли;
		Иначе
			УстановитьЗначениеИРассчитатьНаКлиенте(КолонкаПоиска, Область, РезультатВыбора);
		КонецЕсли;
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
		Модифицированность = Истина;
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменениеВидаДеятельностиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	БылаЛицензируемая = ДополнительныеПараметры.БылаЛицензируемая;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	РезультатВыбора = ДополнительныеПараметры.РезультатВыбора;
	СталаЛицензируемая = ДополнительныеПараметры.СталаЛицензируемая;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЛицензируемаяДеятельностьИзменение(БылаЛицензируемая, РезультатВыбора, СталаЛицензируемая);
	УстановитьЗначениеИРассчитатьНаКлиенте(КолонкаПоиска, Область, РезультатВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицензируемаяДеятельностьИзменение(БылаЛицензируемая, РезультатВыбора, СталаЛицензируемая)
	
	Код = РезультатВыбора.Код;
	Название = ?(ПустаяСтрока(Код), "", РезультатВыбора.Название);
	
	Если СталаЛицензируемая И НЕ БылаЛицензируемая Тогда
		ЗаменитьВидДеятельностиНаВсехСтраницах("", "");
	ИначеЕсли Не СталаЛицензируемая Тогда
		ЗаменитьВидДеятельностиНаВсехСтраницах(Код, Название);
	КонецЕсли;
	
	Если СталаЛицензируемая Тогда
		УстановитьВариантДляЯчеекЛицензии(0);
	Иначе
		УстановитьВариантДляЯчеекЛицензии(5);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеИРассчитатьНаКлиенте(КолонкаПоиска, Область, РезультатВыбора)
	
	Область.Значение = РезультатВыбора[КолонкаПоиска];
	ЗаполнитьСвязанныеПоказатели(Область.Имя, РезультатВыбора);
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвязанныеПоказатели(ИмяОбласти, РезультатВыбора)
	
	Если СтрНайти(ИмяОбласти, "П000000000105") = 1 Тогда
		ИмяДополнительныхДанных = "П000000000105";
		
		ТаблицаСтраницЛицензии = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство("Лицензии", ТаблицаСтраницЛицензии);
		ТаблицаСтраницЛицензии = ЭтаФорма[ТаблицаСтраницЛицензии];
		
		АктивнаяСтраница = ТаблицаСтраницыЛицензии.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() = 0 Тогда
			Возврат;
		Иначе
			АктивнаяСтраница = АктивнаяСтраница[0];
		КонецЕсли;
		
		Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
			АктивнаяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;

		АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(ИмяДополнительныхДанных, РезультатВыбора.Код);
		АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;

		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ТабличныйДокумент.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяОбласти, "П000010000101") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000102" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ТабличныйДокумент.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = РезультатВыбора.Код;
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ТабличныйДокумент.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяОбласти, "П000010000102") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000101" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ТабличныйДокумент.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = ?(ПустаяСтрока(РезультатВыбора.Код), "", РезультатВыбора.Название);
		
	ИначеЕсли СтрНайти(ИмяОбласти, "П000010000301") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000302" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ТабличныйДокумент.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = РезультатВыбора.Код;
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ТабличныйДокумент.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяОбласти, "П000010000302") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000301" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ТабличныйДокумент.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = ?(ПустаяСтрока(РезультатВыбора.Код), "", РезультатВыбора.Название);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	КодИФНС = "";
	КПП = "";
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
			НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		Иначе
			НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаявлениеОКорректировке) Тогда
				
			ПараметрОповещения = новый Структура;
			ПараметрОповещения.Вставить("ЗаявлениеОКорректировке", ЗаявлениеОКорректировке);
			ПараметрОповещения.Вставить("СданныйАлкоОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
			
			Оповестить("ОбновитьЗаявлениеОКорректировкеИзДекларации", ПараметрОповещения);
			
		КонецЕсли;
		
		// Обновление Заявления о корректировке.
		Если НаименованиеТекущегоРаздела = "Титульный" Тогда
		    ВывестиМакетВТаблДокНаСервере("Титульный", 0, Истина);		
		КонецЕсли; 
	 
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Процедура ОчиститьХранилищеОтПробелов(ИдГруппы)
	
	Хранилище = ЭтаФорма["Хранилище" + ИдГруппы];
	Шаблон    = ЭтаФорма[ИдГруппы].Выгрузить().СкопироватьКолонки();
	
	Для Каждого СтраницаХранилища Из Хранилище Цикл
	
		ТаблЗнач = СтраницаХранилища.Таблица;
		КолонкиТаблЗнач = Шаблон.Колонки;
		
		Для Каждого СтрокаТаб Из ТаблЗнач Цикл
		    Для Каждого Колонка Из КолонкиТаблЗнач Цикл
			
				ИмяКолонки = Колонка.Имя;
				Если ТипЗнч(СтрокаТаб[ИмяКолонки]) = Тип("Строка") Тогда
				
					СтрокаТаб[ИмяКолонки] = СокрЛП(СтрокаТаб[ИмяКолонки]);
				
				КонецЕсли; 
			
			КонецЦикла;		
		КонецЦикла; 
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьХранилищаОтПробелов()

	ОчиститьХранилищеОтПробелов(СтруктураРеквизитовФормы.мИдГруппы2);
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант 								  = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// Очистка хранилищ от пробелов в строковых значениях
	ОчиститьХранилищаОтПробелов();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив;
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
		
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтруктураДопДанных = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение Цикл
						
						Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("ДанныеФормыКоллекция") Тогда
							
							СтруктураДопДанных.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
							
						Иначе
							
							СтруктураДопДанных.Вставить(ЭлСтруктуры.Ключ, ЭлСтруктуры.Значение);	
							
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаТаблЗнач.ДополнительныеДанные = СтруктураДопДанных;
						
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
						
						СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
						
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
		
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	// Для корректной работы в режиме Сохранить с новой корректировкой как новый и переписать.
	ЗаявлениеОКорректировке = Неопределено;
	ЗаявлениеОКорректировкеПредставление = "";
	
	Если СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета >= '20170701' Тогда
 	
		ЗаявлениеОКорректировке = РегламентированнаяОтчетностьАЛКО.ПолучитьЗаявлениеОКорректировкеПоЖурналу(
																	СтруктураРеквизитовФормы.мСохраненныйДок);
		
		Если ЗначениеЗаполнено(ЗаявлениеОКорректировке) Тогда			
			ЗаявлениеОКорректировкеПредставление = Строка(ЗаявлениеОКорректировке);
		Иначе
			ЗаявлениеОКорректировкеПредставление = "Заполнить";			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
			
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
									 				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
										
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("Структура") Тогда
							
							СтруктураДопДанных = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДополнительныеДанные Цикл
								
								ДопДанные = ЭлСтруктуры.Значение;
								
								Если ТипЗнч(ДопДанные) = Тип("ТаблицаЗначений") Тогда
								
									ДопДанныеНаФорме = ЭтаФорма["ХранилищеОтгрузокПоРФ"].Добавить().Таблица;
								
									ЗначениеВДанныеФормы(ДопДанные, ДопДанныеНаФорме);
								
									СтруктураДопДанных.Вставить(ЭлСтруктуры.Ключ, ДопДанныеНаФорме);
									
								Иначе
									
									СтруктураДопДанных.Вставить(ЭлСтруктуры.Ключ, ДопДанные);
									
								КонецЕсли;
                                								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДополнительныеДанные.Добавить(СтруктураДопДанных);
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
                                								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ДополнительныеДанные", ДополнительныеДанные);
	ВосстановитьСтруктуруДополнительныхДанных(ЭтаФорма);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
    Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	ВосстановитьСведенияОЛицензияхИзЛистаЛицензииСтарогоОбразца();
			
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
		
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность   = Ложь;

	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
		
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
		
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетныйГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетныйГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетныйГод = СокрЛП(СтруктураДанныхТитульный.ОтчетныйГод) + ПоказателиТаблПоле["ОтчетныйГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетныйГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомКорр1" Тогда
			СтруктураДанныхТитульный.Вставить("НомКорр");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.НомКорр = СокрЛП(СтруктураДанныхТитульный.НомКорр) + ПоказателиТаблПоле["НомКорр" + Ном];
				СтруктураДанныхТитульный.Удалить("НомКорр" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПочтовыйИндекс1" Тогда
			СтруктураДанныхТитульный.Вставить("ПочтовыйИндекс");
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.ПочтовыйИндекс = СокрЛП(СтруктураДанныхТитульный.ПочтовыйИндекс) + ПоказателиТаблПоле["ПочтовыйИндекс" + Ном];
				СтруктураДанныхТитульный.Удалить("ПочтовыйИндекс" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодРегиона1" Тогда
			СтруктураДанныхТитульный.Вставить("КодРегиона");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.КодРегиона = СокрЛП(СтруктураДанныхТитульный.КодРегиона) + ПоказателиТаблПоле["КодРегиона" + Ном];
				СтруктураДанныхТитульный.Удалить("КодРегиона" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЦикла;
		
	СтруктураРеквизитовФормы.Руководитель   = ПоказателиТаблПоле.ОргДиректор;
	СтруктураРеквизитовФормы.Бухгалтер      = ПоказателиТаблПоле.ОргБухгалтер;
	СтруктураРеквизитовФормы.ТелОрганизации = ПоказателиТаблПоле.ТелОрганизации;
	
	ЗаполнитьДатуВЯчейкахНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОЛицензияхИзЛистаЛицензииСтарогоОбразца()
	
	Для Каждого ЭлементТабл Из ЭтаФорма[мСтруктураМногостраничныхРазделов.Лицензии] Цикл
		
		ЭлементТабл.АктивнаяСтраница = Ложь;
		
		ПоказателиТаблПоле = ЭлементТабл.Данные[0].Значение;
		
		СтруктураДанныхЛицензии = ЭлементТабл.Данные[0].Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			
			ИмяПоказателя = Показатель.Ключ;
			
			Для Инд = 1 По 6 Цикл
			
				Если ИмяПоказателя = "П000000000201_1_" + Инд Тогда
					СтруктураДанныхЛицензии.Вставить("П000000000201_" + Инд);
					Для Ном = 1 По 9 Цикл
						СтруктураДанныхЛицензии["П000000000201_" + Инд] = СокрЛП(СтруктураДанныхЛицензии["П000000000201_" + Инд]) + ПоказателиТаблПоле["П000000000201_" + Ном + "_" + Инд];
						СтруктураДанныхЛицензии.Удалить("П000000000201_" + Ном + "_" + Инд);
					КонецЦикла;
					
				ИначеЕсли ИмяПоказателя = "П000000000202_1_" + Инд Тогда
					СтруктураДанныхЛицензии.Вставить("П000000000202_" + Инд);
					Для Ном = 1 По 6 Цикл
						СтруктураДанныхЛицензии["П000000000202_" + Инд] = СокрЛП(СтруктураДанныхЛицензии["П000000000202_" + Инд]) + ПоказателиТаблПоле["П000000000202_" + Ном + "_" + Инд];
						СтруктураДанныхЛицензии.Удалить("П000000000202_" + Ном + "_" + Инд);
					КонецЦикла;
					
     			ИначеЕсли ИмяПоказателя = "П000000000203_1_" + Инд Тогда
					СтруктураДанныхЛицензии.Вставить("П000000000203_" + Инд);
					Для Ном = 1 По 2 Цикл
						СтруктураДанныхЛицензии["П000000000203_" + Инд] = СокрЛП(СтруктураДанныхЛицензии["П000000000203_" + Инд]) + ПоказателиТаблПоле["П000000000203_" + Ном + "_" + Инд];
						СтруктураДанныхЛицензии.Удалить("П000000000203_" + Ном + "_" + Инд);
					КонецЦикла;	
		
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("Выгрузка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
		
		Если ТекущийРазделОтчетаСокрНаим = "Декларация" Тогда
			УстановитьДоступностьПолейДекларация(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ПараметрыОтчета = СформироватьСтруктуруПоказателейИСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(Текст) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(Текст)
	
	// проверяем показатели (алгоритм проверки оставлен из режима выгрузки в формате 3.05)
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Текст = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	СтрокаИмениФайла = "<!-- ИдФайл=""" + ПараметрыВыгрузки.ИдФайл + """ -->";
	Текст = Текст + Символы.ПС + СтрокаИмениФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПараметрыВыгрузки = СформироватьСтруктуруПоказателейИСтруктуруПараметров();
	
	Если НЕ ОтчетЗаполненКорректно(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОтчетЗаполненКорректно(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнениеТитульный(ПараметрыВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеЛицензии(ПараметрыВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеДекларация(ПараметрыВыгрузки, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеТитульный(ПараметрыВыгрузки, СтатусПроверки)
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		
		УказаныФИО = НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительФамилия) И НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительИмя);
		Если НЕ УказаныФИО Тогда
			ТекстОписанияОшибки = "На Титульном листе не указаны фамилия, имя и отчество индивидуального предпринимателя!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОргДиректор");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИННФЛ) Тогда
			ТекстОписанияОшибки = "На Титульном листе не задан ИНН индивидуального предпринимателя!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.ИННФЛ))<> 12 Тогда
			ТекстОписанияОшибки = "На Титульном листе неверно задан ИНН индивидуального предпринимателя!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		КонецЕсли;

	Иначе
		
		УказаныФИО = НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительФамилия) И НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительИмя);
		Если НЕ УказаныФИО Тогда
			ТекстОписанияОшибки = "На Титульном листе не указаны фамилия, имя и отчество (при наличии) руководителя!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОргДиректор");
		КонецЕсли;
		УказаныФИО = НЕ ПустаяСтрока(ПараметрыВыгрузки.ГлавбухФамилия) И НЕ ПустаяСтрока(ПараметрыВыгрузки.ГлавбухИмя);
		Если НЕ УказаныФИО Тогда
			ТекстОписанияОшибки = "На Титульном листе не указаны фамилия, имя и отчество (при наличии) главного бухгалтера!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОргБухгалтер");
		КонецЕсли;
		
		ИНН = СокрЛП(ПараметрыВыгрузки.ИННЮЛ);
		КПП = СокрЛП(ПараметрыВыгрузки.КППЮЛ);
		
		Если ПустаяСтрока(ИНН) Тогда
			ТекстОписанияОшибки = "На Титульном листе не задан ИНН организации!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(ИНН) <> 10 Тогда
			ТекстОписанияОшибки = "На Титульном листе неверно задан ИНН организации!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		КонецЕсли;
		
		Если ПустаяСтрока(КПП) Тогда
			ТекстОписанияОшибки = "На Титульном листе не задан КПП организации!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		ИначеЕсли СтрДлина(КПП)<> 9 Тогда
			ТекстОписанияОшибки = "На Титульном листе неверно задан КПП организации!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		КонецЕсли;
		
	КонецЕсли;	
		
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимЮЛ) Тогда
		ТекстОписанияОшибки = "На Титульном листе не указано полное наименование организации!";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОргНазв");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодРегион) Тогда
		ТекстОписанияОшибки = "На Титульном листе в адресе организации не указан код региона!";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КодРегиона1");
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.КодРегион))<> 2 Тогда
		ТекстОписанияОшибки = "На Титульном листе в адресе организации неверно указан код региона!";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КодРегиона1");
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеЛицензии(ПараметрыВыгрузки, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.Лицензии;
	
	ЕстьЗаполненныйЛистРаздела = Ложь;
	
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		ДополнительныеДанныеРаздела = ЛистРаздела.ДополнительныеДанные[0].Значение;
		
		Если НЕ УказанаЛицензия(ДанныеЛиста) Тогда
			Продолжить;
		КонецЕсли;
		ЕстьЗаполненныйЛистРаздела = Истина;
		
		НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
		НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
		
		Если ЛицензируемаяДеятельность(ЭтаФорма) Или СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20131101' Тогда
			
			ТекстОписанияОшибки = "Не указан номер лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000000000102) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000102", НомерЛиста);
			КонецЕсли;
			
			ТекстОписанияОшибки = "Не указана дата начала действия лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000000000103) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000103", НомерЛиста);
			КонецЕсли;
			
			ТекстОписанияОшибки = "Не указана дата окончания действия лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000000000104) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000104", НомерЛиста);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЛиста.П000000000103) И ЗначениеЗаполнено(ДанныеЛиста.П000000000104) Тогда
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела лицензий указана дата окончания действия лицензии предшествующая дате начала действия лицензии!";
				Если ДанныеЛиста.П000000000103 > ДанныеЛиста.П000000000104 Тогда
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000104", НомерЛиста);
				КонецЕсли;
			КонецЕсли;
				
			ВидДеятельности = ДанныеЛиста.П000000000105;
			КодВидаДеятельности = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеРаздела, "П000000000105");
			Если ЗначениеЗаполнено(ВидДеятельности) И НЕ ЗначениеЗаполнено(КодВидаДеятельности) Тогда
				ТекстОписанияОшибки = "Нарушена внутренняя структура данных вида деятельности по лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий. Требуется повторный выбор значения из списка!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000105", НомерЛиста);
			ИначеЕсли НЕ ЗначениеЗаполнено(ВидДеятельности) Тогда
				ТекстОписанияОшибки = "Не указан вид деятельности по лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000105", НомерЛиста);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
			
	ТекстОписанияОшибки = "Не введено ни одной лицензии!";
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  >= '20131101' И НЕ ЕстьЗаполненныйЛистРаздела Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000102", 1);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УказанаЛицензия(ДанныеЛиста)
	
	ЕстьСведения = ЗначениеЗаполнено(ДанныеЛиста.П000000000101)
	           ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000000000102)
	           ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000000000103)
	           ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000000000104)
	           ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000000000105);
	
	Возврат ЕстьСведения;
	
КонецФункции

&НаКлиенте
Функция ДополнительныеДанныеПоАдресуНаКлиенте(Данные, Адрес) Экспорт
	
	Возврат ДополнительныеДанныеПоАдресу(Данные, Адрес)

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДополнительныеДанныеПоАдресу(Данные, Адрес)
	
	Перем ЗначениеДанных;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПозицияРазделителя = СтрНайти(Адрес, ".");
		Если ПозицияРазделителя = 0 Тогда
			АдресВерхнегоУровня = СокрЛП(Адрес);
			Данные.Свойство(АдресВерхнегоУровня, ЗначениеДанных);
		Иначе
			АдресВерхнегоУровня = СокрЛП(Лев(Адрес, ПозицияРазделителя - 1));
			ДанныеВерхнегоУровня = Неопределено;
			Если Данные.Свойство(АдресВерхнегоУровня, ДанныеВерхнегоУровня) Тогда
				АдресСледующегоУровня = СокрЛП(Сред(Адрес, ПозицияРазделителя + 1));
				ЗначениеДанных = ДополнительныеДанныеПоАдресу(ДанныеВерхнегоУровня, АдресСледующегоУровня);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеДанных;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеОП(СтатусПроверки, ЛистРаздела, НомерЛиста, ИмяРаздела, 
								КПП_НеОбязателен = Ложь, ПроверятьНаПустоту = Истина)

	ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
	НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
	
	ТекстОписанияОшибки = "";
	
	Если ПустаяСтрока(ДанныеЛиста.ОбособленноеПодразделение) и ПроверятьНаПустоту Тогда
		ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
								+ """ не указаны реквизиты обособленного подразделения!";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
	Иначе
		СведенияОбОП = Неопределено;
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда
			
			ИНН = СокрЛП(СведенияОбОП.ИНН);
			КПП = СокрЛП(СведенияОбОП.КПП);
			
			ДлинаИНН = СтрДлина(ИНН);
			ДлинаКПП = СтрДлина(КПП);
			
			Если ДлинаИНН = 0 Тогда
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
										+ """ не указан ИНН обособленного подразделения!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			ИначеЕсли (ДлинаИНН <> 10) и (ДлинаИНН <> 12) Тогда					
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
										+ """ неверно указан ИНН обособленного подразделения!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			Иначе
				Если (ДлинаИНН = 12) и (НЕ КПП_НеОбязателен) Тогда
				    ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ неверно указан ИНН обособленного подразделения!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);					
				КонецЕсли; 
			КонецЕсли; 				
			
			Если ДлинаИНН = 10 Тогда
				Если ДлинаКПП = 0 Тогда
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ не указан КПП обособленного подразделения!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
				ИначеЕсли ДлинаКПП <> 9 Тогда
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ неверно указан КПП обособленного подразделения!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
				КонецЕсли; 
			ИначеЕсли (ДлинаИНН = 12) и КПП_НеОбязателен Тогда
				Если НЕ ДлинаКПП = 0 Тогда
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ КПП обособленного подразделения должен быть пуст!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
				КонецЕсли;	
			КонецЕсли;
			
			// Контроль на цифры ИНН
			Если ДлинаИНН > 2 Тогда
		
				Если НЕ ВСтрокеВсеЦифры(ИНН) Тогда
					
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ строка ИНН обособленного подразделения должна состоять только из цифр!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
					
				КонецЕсли; 
				
				// первые 2 цифры ИНН не могут быть "00" для российского ИНН
				Если Лев(СокрЛП(ИНН), 2) = "00" Тогда
					
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ строка ИНН обособленного подразделения не должна начинаться с ""00""!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
					
				КонецЕсли;

			КонецЕсли;
			
			// Контроль на цифры КПП
			Если ДлинаКПП > 2 Тогда
			
				Если НЕ ВСтрокеВсеЦифры(КПП) Тогда
				
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ строка КПП обособленного подразделения должна состоять только из цифр!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
					
				КонецЕсли; 
				
				// первые 2 цифры КПП не могут быть "00", КПП может быть только Российским
				Если Лев(СокрЛП(КПП), 2) = "00" Тогда
					
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ строка КПП обособленного подразделения не должна начинаться с ""00""!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
					
				КонецЕсли;
			
			КонецЕсли;
			
			ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела + """ не указано наименование обособленного подразделения!";
			Если ПустаяСтрока(СведенияОбОП.Наименование) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			КонецЕсли;
			
			Если ПустаяСтрока(СведенияОбОП.ПредставлениеАдреса) Тогда
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела + """ не указан адрес обособленного подразделения!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			ИначеЕсли ПустаяСтрока(СведенияОбОП.КодРегиона) Тогда
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела + """ в адресе обособленного подразделения не указан регион!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела + """ нарушена внутренняя структура реквизитов обособленного подразделения, требуется повторный ввод данных!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
		КонецЕсли;
	КонецЕсли;
	
	Возврат (ТекстОписанияОшибки = "");

КонецФункции

&НаСервере
Функция ВСтрокеВсеЦифры(ПроверяемаяСтрока)
	
	Если ПустаяСтрока(ПроверяемаяСтрока) = 1 Тогда
		// пустая строка не является строкой цифр
		Возврат Ложь;
	КонецЕсли;
	
	//Добавим цифру "1" для обработки ситуаций
	// - наличие лидирующих нулей
	// - введен один единственный символ не цифра 
	Попытка
		ДлинаПроверяемойСтроки = СтрДлина(Формат(Цел(Число("1" + СокрЛП(ПроверяемаяСтрока))), "ЧГ=0;ЧВН"));
	Исключение
		// если возникло исключение - значит не смогли преобразовать к числу "1" + СокрЛП(ПроверяемаяСтрока)
		Возврат Ложь;
	КонецПопытки;
	
	Возврат  ДлинаПроверяемойСтроки = (СтрДлина(ПроверяемаяСтрока) + 1);
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеДекларация(ПараметрыВыгрузки, СтатусПроверки)
	
	КПП_НеОбязателен = Истина;
	ИмяРаздела = "Декларация";
	
	ДанныеРаздела = мДанныеОтчета.Декларация;
	
	ЕстьЗаполненныйЛистРаздела = Ложь;
	
	КоличествоСтрокТаблицыПоОрганизации = 0;
	ОбщееКоличествоСтрокПоОП = 0;
	
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
		НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		Если НЕ ЗаполненЛистДекларация(ДанныеЛиста) Тогда
			Продолжить;
		КонецЕсли;
		ЕстьЗаполненныйЛистРаздела = Истина;
		
		ПроверитьЗаполнениеОП(СтатусПроверки, ЛистРаздела, НомерЛиста, ИмяРаздела, КПП_НеОбязателен);
				
		// Проверка заполнения таблиц декларации.
		ДанныеДопСтрок = Неопределено;
		Если НомерЛиста = 1 Тогда
			
			ЛистРаздела.ДанныеДопСтрок[0].Значение.Свойство(СтруктураРеквизитовФормы.мИдГруппы1, ДанныеДопСтрок);
			ДополнительныеДанныеЛиста = Неопределено;
			Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
				ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство(СтруктураРеквизитовФормы.мИдГруппы1, ДополнительныеДанныеЛиста);
			КонецЕсли;
			КоличЗаполненных = 0;
			ПроверитьЗаполнениеТаблицыДекларации(СтатусПроверки, СтруктураРеквизитовФормы.мИдГруппы1, ДанныеДопСтрок, ДополнительныеДанныеЛиста, НомерЛиста, КоличЗаполненных);
			
			КоличествоСтрокТаблицыПоОрганизации = КоличЗаполненных;		
			
		КонецЕсли; 
		
		ДанныеДопСтрок = Неопределено;
		ДополнительныеДанныеЛиста = Неопределено;
				
		ЛистРаздела.ДанныеДопСтрок[0].Значение.Свойство(СтруктураРеквизитовФормы.мИдГруппы2, ДанныеДопСтрок);
		
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
			ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство(СтруктураРеквизитовФормы.мИдГруппы2, ДополнительныеДанныеЛиста);
		КонецЕсли;
		КоличЗаполненных = 0;
		ПроверитьЗаполнениеТаблицыДекларации(СтатусПроверки, СтруктураРеквизитовФормы.мИдГруппы2, ДанныеДопСтрок, ДополнительныеДанныеЛиста, НомерЛиста, КоличЗаполненных);
		
		ОбщееКоличествоСтрокПоОП = ОбщееКоличествоСтрокПоОП + КоличЗаполненных;		
		
	КонецЦикла;
	
	ТекстОписанияОшибки = "Не заполнен ни один лист раздела ""Декларация""!
			|Если сдается ""пустая"" декларация, нужно заполнить данные организации (головного офиса) в поле 
			|""Сведения по обособленному подразделению"". 
			|Табличные данные при этом не вносятся.";
	Если НЕ ЕстьЗаполненныйЛистРаздела Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", "ОбособленноеПодразделение", 1);
	КонецЕсли;
	
	Если КоличествоСтрокТаблицыПоОрганизации > ОбщееКоличествоСтрокПоОП Тогда
	    ТекстОписанияОшибки = "В разделе ""Декларация"" в верхней таблице ""Сведения по организации/индивидуальному предпринимателю"" " 
							+ "заполнено больше строк, чем во всех нижних таблицах ""Сведения по обособленному подразделению""!";		
	    СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", "ОбособленноеПодразделение", 1);
	КонецЕсли; 
		
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания > '20140901' Тогда
		
		// Контроль записей на уникальность ("КПП ОП" + "Наименование ОП").
		//
		ДанныеОПТЗ = Новый ТаблицаЗначений;
		
		ДанныеОПТЗ.Колонки.Добавить("НаимОП");
		ДанныеОПТЗ.Колонки.Добавить("КППОП");
		ДанныеОПТЗ.Колонки.Добавить("НомерЛиста");
		ДанныеОПТЗ.Колонки.Добавить("Колво");
		
		Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
			
			ДанныеОП   = ЛистРаздела.Данные[0].Значение.ОбособленноеПодразделение;
			НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
			
			Если НЕ СтрНайти(ДанныеОП, ", ИНН") > 0 ИЛИ НЕ СтрНайти(ДанныеОП, ", КПП") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НаимОП = СокрЛП(Лев(ДанныеОП, СтрНайти(ДанныеОП, ", ИНН") - 1));
			
			Если ПустаяСтрока(НаимОП) Тогда
				Продолжить;
			КонецЕсли;
			
			КППОП = Сред(ДанныеОП, СтрНайти(ДанныеОП, ", КПП") + 6, 9);
			
			НоваяСтрокаТЗ = ДанныеОПТЗ.Добавить();
			НоваяСтрокаТЗ.КППОП      = КППОП;
			НоваяСтрокаТЗ.НаимОП     = НаимОП;
			НоваяСтрокаТЗ.Колво      = 1;
			НоваяСтрокаТЗ.НомерЛиста = НомерЛиста;
			
		КонецЦикла;
		
		КопияДанныеОПТЗ = ДанныеОПТЗ.Скопировать();
		КопияДанныеОПТЗ.Свернуть("НаимОП, КППОП", "Колво");
		КопияДанныеОПТЗ.Сортировать("Колво Убыв");
		
		Для Каждого СтрокаТЗ Из КопияДанныеОПТЗ Цикл
			
			Если СтрокаТЗ.Колво > 1 Тогда
				
				ОтборПовторов = Новый Структура;
				ОтборПовторов.Вставить("НаимОП", СтрокаТЗ.НаимОП);
				ОтборПовторов.Вставить("КППОП",  СтрокаТЗ.КППОП);
				
				НайденныеОП = ДанныеОПТЗ.НайтиСтроки(ОтборПовторов);
				
				Если НайденныеОП.Количество() > 0 Тогда
					ПерваяИтерация = Истина;
					ЛистыПовторы = "";
					Для Каждого ЭлНайденныеОП Из НайденныеОП Цикл
						ЛистыПовторы = ЛистыПовторы + ?(ПерваяИтерация, "", ", ") + ЭлНайденныеОП.НомерЛиста;
						ПерваяИтерация = Ложь;
					КонецЦикла;
					ТекстОписанияОшибки = "Страницы № " + ЛистыПовторы + " раздела ""Декларация"" заполнены по одному и тому же предприятию " + ЭлНайденныеОП.НаимОП + ", (КПП " + ЭлНайденныеОП.КППОП + ")";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", "ОбособленноеПодразделение", ЭлНайденныеОП.НомерЛиста);
				КонецЕсли;
				
			Иначе
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТаблицыДекларации(СтатусПроверки, ИдГруппы, ДанныеДопСтрок, ДополнительныеДанные, НомерЛиста, КоличЗаполненных)
	
	КоличЗаполненных = 0;
	ВерхняяТаблица = Ложь;
	
	НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
	
	ПрефиксИмени = ИдГруппы;
	
	Если ПрефиксИмени = "П0000100001" Тогда
		ИмяТаблицы = """Сведения по организации/индивидуальному предпринимателю""";
		ВерхняяТаблица = Истина;
	Иначе
		ИмяТаблицы = """Сведения по обособленному подразделению""";
	КонецЕсли;
	
	Для Каждого СтрокаДекларации Из ДанныеДопСтрок Цикл
		
		НомерСтроки = ДанныеДопСтрок.Индекс(СтрокаДекларации) + 1;
		НомерСтрокиСтроковый = ФОрмат(НомерСтроки, "ЧГ=0");
		
		СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "01"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "02"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "03"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "08"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "09"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "10"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "11"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "12"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "13"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "14"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "15"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "16"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "17"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "18"]);
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		КоличЗаполненных = КоличЗаполненных + 1;
		Если ВерхняяТаблица Тогда
			// не проверяем - только считаем заполненные
			Продолжить;
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "01";
		ИмяПоказателя = ПрефиксИмени + "01_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
				
		ИмяГрафы = ПрефиксИмени + "02";
		ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		Если ПустаяСтрока(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" не задан код вида продукции!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		ИначеЕсли СтрДлина(ЗначениеГрафы) <> 3 Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" неверно задан код вида продукции!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "03";
		ИмяПоказателя = ПрефиксИмени + "03_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" не указано содержание этилового спирта!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка на дублирование по ключевым полям.
	ТаблицаДубликатов = ДанныеДопСтрок.Выгрузить();
	ИмяКодаВидаПродукции = ПрефиксИмени + "02";
	ИмяСодержанияЭтиловогоСпирта = ПрефиксИмени + "03";
	
	ТаблицаДубликатов.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10)));
	ТаблицаДубликатов.ЗаполнитьЗначения(1, "Счетчик");
	ТаблицаДубликатов.Свернуть(ИмяКодаВидаПродукции + ", " + ИмяСодержанияЭтиловогоСпирта, "Счетчик");
	
	КорректныеСтроки = ТаблицаДубликатов.НайтиСтроки(Новый Структура("Счетчик", 1));
	Для Каждого КорректнаяСтрока Из КорректныеСтроки Цикл
		ТаблицаДубликатов.Удалить(КорректнаяСтрока);
	КонецЦикла;
	
	Для Каждого Дубликат Из ТаблицаДубликатов Цикл
		
		Если НЕ(ЗначениеЗаполнено(Дубликат[ИмяКодаВидаПродукции]) И ЗначениеЗаполнено(Дубликат[ИмяСодержанияЭтиловогоСпирта])) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборДубликатов = Новый Структура;
		ОтборДубликатов.Вставить(ИмяКодаВидаПродукции, Дубликат[ИмяКодаВидаПродукции]);
		ОтборДубликатов.Вставить(ИмяСодержанияЭтиловогоСпирта, Дубликат[ИмяСодержанияЭтиловогоСпирта]);
		СтрокиДубликатов = ДанныеДопСтрок.НайтиСтроки(ОтборДубликатов);
		
		ПереченьСтрок = "";
		АдресДубликата = "";
		Для Каждого СтрокаДубликата Из СтрокиДубликатов Цикл
			НомерСтроки = ДанныеДопСтрок.Индекс(СтрокаДубликата) + 1;
			НомерСтрокиСтроковый = Формат(НомерСтроки, "ЧГ=0");
		
			Если ПустаяСтрока(АдресДубликата) Тогда
				АдресДубликата = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;
			КонецЕсли;
			
			ПереченьСтрок = ПереченьСтрок + ?(ПустаяСтрока(ПереченьСтрок), "", ", ") + НомерСтрокиСтроковый;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(АдресДубликата) Тогда
			ТекстОписанияОшибки = "В таблице "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" повторяются сочетания кода вида продукции и содержания этилового спирта в строках " + ПереченьСтрок + "!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", АдресДубликата, НомерЛиста);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, Раздел, Показатель, ЛистРаздела = Неопределено)
	
	СтатусПроверки = Ложь;
	Если ЛистРаздела = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, Раздел, Показатель);
	Иначе
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, Раздел, Показатель, ЛистРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполненЛистДекларация(ДанныеЛиста)
	
	Заполнен = НЕ ПустаяСтрока(ДанныеЛиста.ОбособленноеПодразделение);
	
	Для Каждого Показатель Из ДанныеЛиста Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если СтрНайти(ИмяПоказателя, "П00001") = 1 И Сред(ИмяПоказателя, 12, 2) <> "00" Тогда
			Заполнен = (Заполнен ИЛИ ЗначениеЗаполнено(Показатель.Значение));
			Если Заполнен Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Заполнен;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателейИСтруктуруПараметров()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("Структура") Тогда
						
						СтруктураДопДанных = Новый Структура;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДополнительныеДанные Цикл
							
							ДопДанные = ЭлСтруктуры.Значение;
							
							Если ТипЗнч(ДопДанные) = Тип("ТаблицаЗначений") Тогда
								
								ДопДанныеНаФорме = ЭтаФорма["ХранилищеОтгрузокПоРФ"].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ДопДанные, ДопДанныеНаФорме);
								
								СтруктураДопДанных.Вставить(ЭлСтруктуры.Ключ, ДопДанныеНаФорме);
								
							Иначе
								
								СтруктураДопДанных.Вставить(ЭлСтруктуры.Ключ, ДопДанные);
								
							КонецЕсли;
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДополнительныеДанные.Добавить(СтруктураДопДанных);
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						СтруктураДопСтрок = Новый Структура;
																		
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							
							СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");

					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлементСтруктуры.Ключ].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	// Формируем параметры выгрузки.
	Данные = СохрСтруктура;
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	
	ПоказателиОтчета = Данные.ПоказателиОтчета;
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	НомерГода     = Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг");
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("НаимПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	КодКвартала = ПолучитьКодКвартала(ПоказателиТитульный);
	ПараметрыВыгрузки.Вставить("ПризПериодОтч", КодКвартала);
	
	Вариант = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	ЭтоПервичнаяОтчетность = (Вариант = 0);
	
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", НомерГода);
	
	ПараметрыВыгрузки.Вставить("Первичная",      ЭтоПервичнаяОтчетность);
	ПараметрыВыгрузки.Вставить("Корректирующая", НЕ ЭтоПервичнаяОтчетность);
	ПараметрыВыгрузки.Вставить("НомерКорр", Вариант);
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Орг);

	НазваниеОрганизации = СокрЛП(ПоказателиТитульный.ОргНазв);
	ИНН = СокрЛП(ПоказателиТитульный.ИНН1);
	Если НЕ ЭтоПБОЮЛ И Лев(ИНН, 2) = "00" Тогда
		ИНН = Сред (ИНН, 3); // Удаление нулей, добавленных в соответствии с порядком заполнения.
	КонецЕсли;
	КПП = СокрЛП(ПоказателиТитульный.КПП1);
	
	ТелефонОрганизации  = СокрЛП(ПоказателиТитульный.ТелОрганизации);
	ЭлектроннаяПочтаОрганизации = СокрЛП(ПоказателиТитульный.ЭлектроннаяПочта);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ПараметрыВыгрузки.Вставить("НаимЮЛ",    НазваниеОрганизации);
	
	Если ЭтоПБОЮЛ Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ",     ИНН);
	Иначе
		ПараметрыВыгрузки.Вставить("ИННЮЛ",     ИНН);
		ПараметрыВыгрузки.Вставить("КППЮЛ",     КПП);
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ТелОрг",    ТелефонОрганизации);
	ПараметрыВыгрузки.Вставить("EmailОтпр", ЭлектроннаяПочтаОрганизации);
	
	СтруктураАдреса = Данные.ДополнительныеДанные.Титульный.АдресОрганизации;
	ПараметрыВыгрузки.Вставить("КодСтраны",  СтруктураАдреса.КодСтраны);
	ПараметрыВыгрузки.Вставить("Индекс",     СтруктураАдреса.Индекс);
	ПараметрыВыгрузки.Вставить("КодРегион",  СтруктураАдреса.КодРегиона);
	ПараметрыВыгрузки.Вставить("Район",      СтруктураАдреса.Район);
	ПараметрыВыгрузки.Вставить("Город",      СтруктураАдреса.Город);
	ПараметрыВыгрузки.Вставить("НаселПункт", СтруктураАдреса.НаселенныйПункт);
	ПараметрыВыгрузки.Вставить("Улица",      СтруктураАдреса.Улица);
	ПараметрыВыгрузки.Вставить("Дом",        СтруктураАдреса.Дом);
	ПараметрыВыгрузки.Вставить("Корпус",     СтруктураАдреса.Корпус);
	ПараметрыВыгрузки.Вставить("Литера",     "");
	ПараметрыВыгрузки.Вставить("Кварт",      СтруктураАдреса.Квартира);
	
	ФИОРуководителя = РегламентированнаяОтчетность.РазложитьФИО(ПоказателиТитульный.ОргДиректор);
	ПараметрыВыгрузки.Вставить("РуководительФамилия",  ФИОРуководителя.Фамилия);
	ПараметрыВыгрузки.Вставить("РуководительИмя",      ФИОРуководителя.Имя);
	ПараметрыВыгрузки.Вставить("РуководительОтчество", ФИОРуководителя.Отчество);
	
	ФИОГлавбуха = РегламентированнаяОтчетность.РазложитьФИО(ПоказателиТитульный.ОргБухгалтер);
	ПараметрыВыгрузки.Вставить("ГлавбухФамилия",  ФИОГлавбуха.Фамилия);
	ПараметрыВыгрузки.Вставить("ГлавбухИмя",      ФИОГлавбуха.Имя);
	ПараметрыВыгрузки.Вставить("ГлавбухОтчество", ФИОГлавбуха.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
		
КонецФункции

&НаСервере
Функция ПолучитьКодКвартала(ПоказателиТитульногоЛиста)
	
	Если НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод1Кв) Тогда
		Возврат "3";
		
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод2Кв) Тогда
		Возврат "6";
		
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод3Кв) Тогда
		Возврат "9";
		
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод4Кв) Тогда
		Возврат "0";
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	ИмяМакета = "СхемаВыгрузки" + СтруктураРеквизитовФормы.мВерсияФормата;
		
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	ПрефиксИмениФайлаВыгрузки = "D3";
	
	ИдентификаторОтправителя = ?(ПараметрыВыгрузки.Свойство("ИННФЛ"), ПараметрыВыгрузки.ИННФЛ, ПараметрыВыгрузки.ИННЮЛ);
	ПериодДекларации = "0" + ПараметрыВыгрузки.ПризПериодОтч + Прав(ПараметрыВыгрузки.ГодПериодОтч, 1);
	ДеньФормированияДекларации = Формат(ТекущаяДатаСеанса(), "ДФ=ддММгггг");
	УникальныйИдентификаторФайла = Врег(Строка(Новый УникальныйИдентификатор));
	
	Возврат ПрефиксИмениФайлаВыгрузки
	        + "_" + ИдентификаторОтправителя
	        + "_" + ПериодДекларации
	        + "_" + ДеньФормированияДекларации
	        + "_" + УникальныйИдентификаторФайла;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)

	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел, Параметры)
	
	Узел_Документ = УзелРодитель;
	
	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20131101' Тогда
		// Формат Выгрузки 4.20
		Узел_Лицензии = ПолучитьПодчиненныйЭлемент(Узел_Организация, "Лицензии");
		
		ПрототипУзла_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензии, "Лицензия");
		Для Каждого Страница Из мДанныеОтчета.Лицензии Цикл
			ДанныеСтраницы = Страница.Данные[0].Значение;
			ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные[0].Значение;
			Узел_Лицензия = НовыйУзелИзПрототипа(ПрототипУзла_Лицензия);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ВидДеят", ДополнительныеДанныеПоАдресу(ДополнительныеДанныеСтраницы, "П000000000105"));
			УстановитьЗначениеЭлемента(Узел_Лицензия, "СерЛиц",      ДанныеСтраницы.П000000000101);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "НомерЛиц",    ДанныеСтраницы.П000000000102);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаНачЛиц",  ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000103), ДанныеСтраницы.П000000000103, ""));
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОконЛиц", ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000104), ДанныеСтраницы.П000000000104, ""));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Лицензия);
	Иначе
		// Формат Выгрузки 4.30
		Узел_Деятельность = ПолучитьПодчиненныйЭлемент(Узел_Организация, "Деятельность");
		Узел_Лицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Лицензируемая");
		Узел_Нелицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Нелицензируемая");
		ДопДанные = мДанныеОтчета.Лицензии[0].ДополнительныеДанные[0].Значение;
		Если ЛицензируемаяДеятельность(ЭтаФорма) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Нелицензируемая);
			ПрототипУзла_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензируемая, "Лицензия");
			Для Каждого Страница Из мДанныеОтчета.Лицензии Цикл
				ДанныеСтраницы = Страница.Данные[0].Значение;
				Если Не УказанаЛицензия(ДанныеСтраницы) Тогда
					Продолжить;
				КонецЕсли;
				ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные[0].Значение;
				Узел_Лицензия = НовыйУзелИзПрототипа(ПрототипУзла_Лицензия);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ВидДеят", ДополнительныеДанныеПоАдресу(ДополнительныеДанныеСтраницы, "П000000000105"));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "СерНомЛиц", СокрЛП(ДанныеСтраницы.П000000000101 + " " + ДанныеСтраницы.П000000000102));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаНачЛиц",  ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000103), ДанныеСтраницы.П000000000103, ""));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОконЛиц", ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000104), ДанныеСтраницы.П000000000104, ""));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Лицензия);
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Лицензируемая);
			УстановитьЗначениеЭлемента(Узел_Нелицензируемая, "ВидДеят", ДополнительныеДанныеПоАдресу(ДопДанные, "П000000000105"));
		КонецЕсли;
	КонецЕсли;
	
	ПрототипУзла_ОбъемПрОб = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ОбъемПрОб");
	
	// Сведения обособленных подразделений;
	Для Каждого Страница Из мДанныеОтчета.Декларация Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		
		СведенияОбОП = ДополнительныеДанныеПоАдресу(Страница.ДополнительныеДанные[0].Значение, "СведенияОбОП");
		Если СведенияОбОП = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НазваниеОрганизации = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;
		
		Если ПустаяСтрока(НазваниеОрганизации) И ПустаяСтрока(КПП) Тогда
			Продолжить;
		КонецЕсли;
		
		Узел_ОбъемПрОб = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемПрОб);
		
		Если Число(Лев(СтруктураРеквизитовФормы.мВерсияФормата, 3)) >= 431 Тогда		
			// формат 4.31
			УстановитьЗначениеЭлемента(Узел_ОбъемПрОб, "Наим", НазваниеОрганизации);			
		Иначе			
			// формат 4.30
			УстановитьЗначениеЭлемента(Узел_ОбъемПрОб, "НаимЮЛ", НазваниеОрганизации);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(КПП) Тогда
		    УстановитьЗначениеЭлемента(Узел_ОбъемПрОб, "КППЮЛ", КПП);		
		КонецЕсли; 
				
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемПрОб, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  "643");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      СведенияОбОП.Квартира);
		
		ЗаполнитьСведенияПоСтранице(Страница, Узел_ОбъемПрОб);
		
		Узел_ПрОбор = ПолучитьПодчиненныйЭлемент(Узел_ОбъемПрОб, "ПрОбор");
		ЕстьПроизводствоОборот = (Узел_ПрОбор <> Неопределено);
		УстановитьЗначениеЭлемента(Узел_ОбъемПрОб, "НаличиеПроизвОбор", ?(ЕстьПроизводствоОборот, "true", "false"));
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ОбъемПрОб);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияПоСтранице(Страница, УзелСведений)
	
	ДанныеСтраницы = Страница.Данные[0].Значение;
	ДанныеДопСтрок = Страница.ДанныеДопСтрок[0].Значение;
	ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные[0].Значение;
	
	ПрототипУзла_ПрОбор = ПолучитьПодчиненныйЭлемент(УзелСведений, "ПрОбор");
	
	ТаблицаПродукции = ДанныеДопСтрок[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	
	НомерПП_ПрОбор = 0;
	Для Каждого Продукция Из ТаблицаПродукции Цикл
		Если ПустаяСтрока(Продукция.П000010000302) Тогда
			Продолжить;
		КонецЕсли;
		
		Постфикс = "_" + Формат(ТаблицаПродукции.Индекс(Продукция) + 1, "ЧГ=0");
		
		Узел_ПрОбор = НовыйУзелИзПрототипа(ПрототипУзла_ПрОбор);
		
		НомерПП_ПрОбор = НомерПП_ПрОбор + 1;
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "ПN", НомерПП_ПрОбор);
		
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000003", Продукция.П000010000302);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000004", Продукция.П000010000303);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000005", Продукция.П000010000304);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000006", Продукция.П000010000305);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000007", Продукция.П000010000306);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000008", Продукция.П000010000307);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000013", Продукция.П000010000312);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000014", Продукция.П000010000313);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000015", Продукция.П000010000314);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000016", Продукция.П000010000315);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000017", Продукция.П000010000316);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000018", Продукция.П000010000317);
		УстановитьЗначениеЭлемента(Узел_ПрОбор, "П000000000019", Продукция.П000010000318);
		
		ТаблицаОтгрузокПоРФ = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеСтраницы, "П000010000308" + Постфикс);
		
		Если ТаблицаОтгрузокПоРФ <> Неопределено Тогда
			
			ПрототипУзла_ОтгруженоРФ = ПолучитьПодчиненныйЭлемент(Узел_ПрОбор, "ОтгруженоРФ");
			
			НомерПП_ОтгруженоРФ = 0;
			Для Каждого Отгрузка Из ТаблицаОтгрузокПоРФ Цикл
				Узел_ОтгруженоРФ = НовыйУзелИзПрототипа(ПрототипУзла_ОтгруженоРФ);
				
				НомерПП_ОтгруженоРФ = НомерПП_ОтгруженоРФ + 1;
				УстановитьЗначениеЭлемента(Узел_ОтгруженоРФ, "ПN", НомерПП_ОтгруженоРФ);
				
				УстановитьЗначениеЭлемента(Узел_ОтгруженоРФ, "П000000000009", Отгрузка.КодСубъектаРФ);
				УстановитьЗначениеЭлемента(Узел_ОтгруженоРФ, "П000000000010", Отгрузка.Розничные);
				УстановитьЗначениеЭлемента(Узел_ОтгруженоРФ, "П000000000011", Отгрузка.Оптовые);
				УстановитьЗначениеЭлемента(Узел_ОтгруженоРФ, "П000000000012", Отгрузка.Другие);
				
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ОтгруженоРФ);
			
		КонецЕсли;
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ПрОбор);
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
		
КонецФункции 

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	УстановитьДоступностьПолейДекларация(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
        	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СтруктураПараметров = Новый Структура;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		СохрТЗМногострочнойГруппы1 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Выгрузить();
		СохрТЗМногострочнойГруппы2 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
		
	ВывестиМакетВТаблДокНаСервере("Титульный", 1);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
		Иначе // Вывод на печать страниц многостраничного раздела.
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Загрузить(СохрТЗМногострочнойГруппы1);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы2);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",  "ПечатнаяФормаОтчета2014Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Лицензии",   "ПечатнаяФормаОтчета2014Кв1_Лицензии");
		
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
		
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
		
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		
		Если ИмяСтраницы = "Декларация" Тогда // Особая печать раздела "Декларация".
			
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				
				Если ОбластьТД.Имя = "ТипСведенийПоОрганизации" Тогда				
					ОбластьТД.Текст = "Сведения по организации";				
				КонецЕсли; 
				
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Очистить();
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД.Примечание.Текст = "";
				ИначеЕсли СтрЧислоВхождений(ОбластьТД.Имя, "ДобавитьСтроку") > 0
					  ИЛИ СтрЧислоВхождений(ОбластьТД.Имя, "ДопЛиния") > 0 Тогда
						НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
						ОбластьТД.Очистить();
						ОбластьТД.ВысотаСтроки = 1;
						ОбластьТД.ГраницаСверху = НетЛинии;
						ОбластьТД.ГраницаСнизу  = НетЛинии;
						ОбластьТД.ГраницаСлева  = НетЛинии;
						ОбластьТД.ГраницаСправа = НетЛинии;
				КонецЕсли;
			КонецЦикла;
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
				СтруктураПараметровСтраницы, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		Иначе
			ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписиРук = Новый Массив(8);
	МассивДатаПодписиБух = Новый Массив(8);
				
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = "00" + СтрИНН;
		КонецЕсли;
				
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		СтрДатаПодписи = ?(СтрДатаПодписи = "01010001", "        ", СтрДатаПодписи);
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргДиректор.Значение) Тогда
				МассивДатаПодписиРук[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргБухгалтер.Значение) Тогда
				МассивДатаПодписиБух[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук", МассивДатаПодписиРук);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух", МассивДатаПодписиБух);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ИНН") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КПП") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ОтчетныйГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "Прил") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ПочтовыйИндекс") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "КодРегиона") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомКорр") > 0 Тогда
					
					НомерКорр = Формат(Область.Значение, "ЧЦ=2; ЧН=00; ЧВН=");
					
					Если НомерКорр = "00" Тогда
						НомерКорр = СтрЗаменить(НомерКорр, 0, " ");
					КонецЕсли;
					
					Для Ном = 1 По СтрДлина(НомерКорр) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(НомерКорр, Ном, 1);
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ВидДокументаПервичный") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ВидДокументаКорректирующий") > 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЭтоКоррДокумент = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, Ложь, Истина);
				
				МакетПечатнойФормы.Области.ВидДокументаПервичный.Значение = ?(ЭтоКоррДокумент, "", "V");
				МакетПечатнойФормы.Области.ВидДокументаКорректирующий.Значение = ?(ЭтоКоррДокумент, "V", "");
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Лицензии" Тогда
				
				Если (СтрЧислоВхождений(Область.Имя, "П000000000201") > 0  
					ИЛИ СтрЧислоВхождений(Область.Имя, "П000000000202") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "П000000000203") > 0) Тогда
					
					Если Не ПустаяСтрока(Область.Значение) Тогда
						Для Ном = 1 По СтрДлина(Область.Значение) Цикл
							МакетПечатнойФормы.Области[Лев(Область.Имя, 14) + Ном + "_" + Прав(Область.Имя, 1)].Значение = Сред(Область.Значение, Ном, 1);
						КонецЦикла;
					КонецЕсли;
					
					Продолжить;     				
					
				КонецЕсли;

			КонецЕсли;
			
			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		Если Реквизит.Ключ = "ДатаПодписиРук" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиРук";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиБух" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиБух";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		Иначе
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
		КонецЕсли;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Цикл
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				НомСтр = Формат(Ном, "ЧГ=");
				Если ЗначениеЗаполнено(Реквизит.Значение[Ном - 1]) Тогда
					МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + НомСтр].Значение = Реквизит.Значение[Ном - 1];
				КонецЕсли;
			КонецЦикла;
			
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
			
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы1
	 ИЛИ ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "Декларация";
		
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ОставитьВТаблицеТребуемыйКодПродукции(ТаблицаИсточник, ТаблицаПриемник, Поле, Условие, КолонкаИНН) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		Если (СтрокаТаблицыИсточника[Поле] = Условие) Тогда
			СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакет(Команда)
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекста", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВФСРАР(ЭтаФорма, ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекстаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	ИмяВременногоФайлаПакета = Результат.РезультатВыгрузки;
	Если ЗначениеЗаполнено(ИмяВременногоФайлаПакета) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.СохранитьФайлНаКлиенте(ИмяВременногоФайлаПакета, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при выгрузке пакета'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетФормыОтчета(ИмяРаздела)
	
	Возврат ОбъектОтчета(ЭтаФорма.ИмяФормы)
	    .ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ОТЧЕТА В ФСРАР

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСРАР");
	
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСРАР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСРАР");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	ПерваяСтраница = Истина;
	
	Если ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначокТ1") <> Неопределено Тогда
		ДобавитьСтрокуЗначокТ1Верх = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначокТ1").Верх;
		ПерваяСтраница = ТабличныйДокумент.Область("R" + Формат(ДобавитьСтрокуЗначокТ1Верх, "ЧГ=0")).ВысотаСтроки <> 1;
	КонецЕсли;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100003") > 0
	 ИЛИ (СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100001") > 0 И ПерваяСтраница) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			Иначе
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции