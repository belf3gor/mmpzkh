&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "27/12/2013";
	// Код отчета, равен коду по ОКУД.
	СтруктураРеквизитовФормы.мКодОтчета   = "0607080";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(
	ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2013Кв1_ФормаОтчета"));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации
	= Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	ФормироватьСтруктуруСвойствСтраниц();
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// Документ скопирован.
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ТекТабличноеПоле.Области.НомерКорректировки.Значение = НомерКорректировки;
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе
	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// 6. Обязательный раздел для выгрузки или нет
	// 7. Обязательный раздел для выгрузки или нет
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                    = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                    = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем версию формы.
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			
			// Установим значение в таблице.
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// Значение показателя с префиксом "ЧН" содержит формат представления нуля.
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение
	= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	// Период в шапке и заголовке отчета.
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение
	= "за " + НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	СтруктураРеквизитовФормы.СтрПериодОтчета = НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	
	ПолеТабличногоДокументаФормаОтчета.Области.ГодПериодаОтчета1.Значение
	= Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'") + " г.";
	ПолеТабличногоДокументаФормаОтчета.Области.ГодПериодаОтчета2.Значение
	= ПолеТабличногоДокументаФормаОтчета.Области.ГодПериодаОтчета1.Значение;
	
	ПолеТабличногоДокументаФормаОтчета.Области.ГодСледующийЗаПериодомОтчета1.Значение
	= Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, 1), "ДФ = 'гггг'") + " г.";
	ПолеТабличногоДокументаФормаОтчета.Области.ГодСледующийЗаПериодомОтчета2.Значение
	= ПолеТабличногоДокументаФормаОтчета.Области.ГодСледующийЗаПериодомОтчета1.Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 1 Тогда
			
			ФорматПредставленияНуля = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0.0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДополнительныеПараметры = Новый Структура("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
			// обход ошибок платформы: в тонком клиенте не работает ПоказатьВыборИзСписка (ПоказатьВыборИзМеню не работает в веб-клиенте 
			// и в событии ПриИзмененииСодержимогоОбласти табличного документа - где мы его и хотим использовать прежде всего)
			# Если ВебКлиент Тогда
			
				Если НайденнаяСтрока = Неопределено Тогда
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
				Иначе
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НайденнаяСтрока);
				КонецЕсли;
				
			#Иначе
				
				Список.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите значение", Элемент);
					
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	РасчетНаКлиенте(, Область.Имя);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
	
	РасчетНаКлиенте(, Область.Имя);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	
	Области = Форма.ПолеТабличногоДокументаФормаОтчета.Области;
	
	// Для Раздела 2.
	// Данные по графе 3 должны быть равны сумме данных граф 4, 6, 8 по соответствующим строкам.
	// Данные по графе 9 должны быть равны (гр.3 раздела 1 + гр.4 раздела 1 - гр.3 раздела 2)
	// по соответствующим строкам.
	Для НомСтр = 1 По 2 Цикл
		НомСтрСтр = Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=");
		Области["П00020102" + НомСтрСтр + "03"].Значение
		= Области["П00020102" + НомСтрСтр + "04"].Значение
		+ Области["П00020102" + НомСтрСтр + "06"].Значение
		+ Области["П00020102" + НомСтрСтр + "08"].Значение;
		Области["П00020102" + НомСтрСтр + "09"].Значение
		= Области["П00010102" + НомСтрСтр + "03"].Значение
		+ Области["П00010102" + НомСтрСтр + "04"].Значение
		- Области["П00020102" + НомСтрСтр + "03"].Значение;
	КонецЦикла;
	Для НомСтр = 100 По 106 Цикл
		НомСтрСтр = Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=");
		Области["П0002" + НомСтрСтр + "0003"].Значение
		= Области["П0002" + НомСтрСтр + "0004"].Значение
		+ Области["П0002" + НомСтрСтр + "0006"].Значение
		+ Области["П0002" + НомСтрСтр + "0008"].Значение;
		Области["П0002" + НомСтрСтр + "0009"].Значение
		= Области["П0001" + НомСтрСтр + "0003"].Значение
		+ Области["П0001" + НомСтрСтр + "0004"].Значение
		- Области["П0002" + НомСтрСтр + "0003"].Значение;
	КонецЦикла;
	Для НомСтр = 1 По 3 Цикл
		НомСтрСтр = Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=");
		Области["П00020201" + НомСтрСтр + "03"].Значение
		= Области["П00020201" + НомСтрСтр + "04"].Значение
		+ Области["П00020201" + НомСтрСтр + "06"].Значение
		+ Области["П00020201" + НомСтрСтр + "08"].Значение;
		Области["П00020201" + НомСтрСтр + "09"].Значение
		= Области["П00010201" + НомСтрСтр + "03"].Значение
		+ Области["П00010201" + НомСтрСтр + "04"].Значение
		- Области["П00020201" + НомСтрСтр + "03"].Значение;
	КонецЦикла;
	Для НомСтр = 1 По 2 Цикл
		НомСтрСтр = Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=");
		Области["П00020202" + НомСтрСтр + "03"].Значение
		= Области["П00020202" + НомСтрСтр + "04"].Значение
		+ Области["П00020202" + НомСтрСтр + "06"].Значение
		+ Области["П00020202" + НомСтрСтр + "08"].Значение;
		Области["П00020202" + НомСтрСтр + "09"].Значение
		= Области["П00010202" + НомСтрСтр + "03"].Значение
		+ Области["П00010202" + НомСтрСтр + "04"].Значение
		- Области["П00020202" + НомСтрСтр + "03"].Значение;
	КонецЦикла;
	Для НомСтр = 1 По 4 Цикл
		НомСтрСтр = Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=");
		Области["П00020203" + НомСтрСтр + "03"].Значение
		= Области["П00020203" + НомСтрСтр + "04"].Значение
		+ Области["П00020203" + НомСтрСтр + "06"].Значение
		+ Области["П00020203" + НомСтрСтр + "08"].Значение;
		Области["П00020203" + НомСтрСтр + "09"].Значение
		= Области["П00010203" + НомСтрСтр + "03"].Значение
		+ Области["П00010203" + НомСтрСтр + "04"].Значение
		- Области["П00020203" + НомСтрСтр + "03"].Значение;
	КонецЦикла;
	Для НомСтр = 200 По 207 Цикл
		НомСтрСтр = Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=");
		Области["П0002" + НомСтрСтр + "0003"].Значение
		= Области["П0002" + НомСтрСтр + "0004"].Значение
		+ Области["П0002" + НомСтрСтр + "0006"].Значение
		+ Области["П0002" + НомСтрСтр + "0008"].Значение;
		Области["П0002" + НомСтрСтр + "0009"].Значение
		= Области["П0001" + НомСтрСтр + "0003"].Значение
		+ Области["П0001" + НомСтрСтр + "0004"].Значение
		- Области["П0002" + НомСтрСтр + "0003"].Значение;
	КонецЦикла;
	
	// Для Разделов 1 и 2.
	// Данные по строке 10200 должны быть равны сумме данных строк 10201, 10202.
	Для НомКол = 3 По 10 Цикл
		ТекСумма = 0;
		Для НомСтр = 201 По 202 Цикл
			ТекСумма = ТекСумма + Области["П000101"
			+ Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=")
			+ Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
		КонецЦикла;
		Области["П00010102" + Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение = ТекСумма;
	КонецЦикла;
	Для НомКол = 3 По 9 Цикл
		ТекСумма = 0;
		Для НомСтр = 201 По 202 Цикл
			ТекСумма = ТекСумма + Области["П000201"
			+ Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=")
			+ Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
		КонецЦикла;
		Области["П00020102" + Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение = ТекСумма;
	КонецЦикла;
	// Данные по строке 10000 должны быть равны сумме данных строк 10100, 10200, 10300, 10400, 10500, 10600
	// по соответствующим графам.
	Для НомКол = 3 По 10 Цикл
		ТекСумма = 0;
		Для НомСтр = 101 По 106 Цикл
			ТекСумма = ТекСумма + Области["П0001"
			+ Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=")
			+ Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение;
		КонецЦикла;
		Области["П00010100" + Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение = ТекСумма;
	КонецЦикла;
	Для НомКол = 3 По 9 Цикл
		ТекСумма = 0;
		Для НомСтр = 101 По 106 Цикл
			ТекСумма = ТекСумма + Области["П0002"
			+ Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=")
			+ Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение;
		КонецЦикла;
		Области["П00020100" + Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение = ТекСумма;
	КонецЦикла;
	// Данные по строке 20301 должны быть равны сумме данных строк 20302 и 20303 по соответствующим графам.
	Для НомКол = 3 По 10 Цикл
		Области["П0001020301" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		= Области["П0001020302" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0001020303" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	Для НомКол = 3 По 9 Цикл
		Области["П0002020301" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		= Области["П0002020302" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0002020303" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	// Данные по строке 20100 должны быть равны сумме данных строк 20101, 20102, 20103 по соответствующим графам.
	Для НомКол = 3 По 10 Цикл
		Области["П0001020100" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		= Области["П0001020101" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0001020102" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0001020103" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	Для НомКол = 3 По 9 Цикл
		Области["П0002020100" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		= Области["П0002020101" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0002020102" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0002020103" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	// Данные по строке 20200 должны быть равны сумме данных строк 20201 и 20202 по соответствующим графам.
	Для НомКол = 3 По 10 Цикл
		Области["П0001020200" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		= Области["П0001020201" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0001020202" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	Для НомКол = 3 По 9 Цикл
		Области["П0002020200" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		= Области["П0002020201" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0002020202" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	// Данные по строке 20300 должны быть равны сумме данных строк 20301 и 20304 по соответствующим графам.
	Для НомКол = 3 По 10 Цикл
		Области["П0001020300" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		= Области["П0001020301" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0001020304" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	Для НомКол = 3 По 9 Цикл
		Области["П0002020300" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		= Области["П0002020301" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		+ Области["П0002020304" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	// Данные по строке 20000 должны быть равны сумме данных строк 20100, 20200, 20300, 20400, 20500, 20600, 20700
	// по соответствующим графам.
	Для НомКол = 3 По 10 Цикл
		ТекСумма = 0;
		Для НомСтр = 201 По 207 Цикл
			ТекСумма = ТекСумма + Области["П0001"
			+ Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=")
			+ Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение;
		КонецЦикла;
		Области["П00010200" + Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение = ТекСумма;
	КонецЦикла;
	Для НомКол = 3 По 9 Цикл
		ТекСумма = 0;
		Для НомСтр = 201 По 207 Цикл
			ТекСумма = ТекСумма + Области["П0002"
			+ Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=")
			+ Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение;
		КонецЦикла;
		Области["П00020200" + Формат(НомКол, "ЧЦ=4; ЧВН=; ЧГ=")].Значение = ТекСумма;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда    
		Возврат;     
	Иначе   
		Очистить();    
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПолеНаСервере();
	
	// Устанавливаем флаг модифицированности формы.
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	ОчиститьТабличноеПоле(ЭтаФорма);
	РасчетНаСервере();
	
КонецПроцедуры

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма)
	
	// Список ячеек, очищать которые не нужно.
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	ВыбТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Код1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Код2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Код3");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Код4");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдресЭлектроннойПочты");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаСоставленияОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКорректировки");
	
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		// Ячейки, не подлежащие очистке.
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
		ТекущаяОбласть.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, "ЧН=' '");
	КонецЦикла;
	
	Расчет(Форма, "", "");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	
	КодВозврата = Результат;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// Установим текущие значения реквизитов документа.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);	
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура();
	
	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многострочных разделов.
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);
	
	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	
	// Вставляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма 14-МЕТ (лом)");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "14МЕТлом");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ПолеТабличногоДокументаФормаОтчета");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	РегламентированнаяОтчетность.УдалитьНомерКорректировки(СтруктураРеквизитовФормы.мПечатныеФормы[0].Значение);
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	// Процедура "заглушка", для роОчистить.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru='В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущийФорматВыгрузки(Организация)
	
	Возврат РегламентированнаяОтчетность.ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если ТекущийФорматВыгрузки(СтруктураРеквизитовФормы.Организация) = Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(
			СтруктураРеквизитовФормы.Организация, Ложь, Истина);
			
		Возврат "НеВыбранФормат";
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	// Проверка показателей раздела.
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКПО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ЭтаФорма, "Не задан код ОКПО организации!",
		ИмяПоляТаблДокумента, "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргНазв) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ЭтаФорма, "Не задано наименование организации!",
		ИмяПоляТаблДокумента, "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ЭтаФорма, "Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ЭтаФорма, "Не указана должность лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ЭтаФорма, "Не указан телефон должностного лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка на незаполненный отчет.
	Если НЕ РегламентированнаяОтчетность.ПроверитьРазделыНаНаличиеИнформации(ЭтаФорма, ДеревоВыгрузки, ИмяПоляТаблДокумента) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Отчет не заполнен!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// КОНТРОЛЬ показателей формы (Указания по заполнению Формы 14-МЕТ (лом)).
	// Для Раздела 1.
	// Данные по графе 4 должны быть больше или равны сумме данных граф 5, 6, 7, 8, 10 по соответствующим строкам.
	// Данные по графе 8 должны быть больше или равны данных по графе 9 по соответствующим строкам.
	// Для Раздела 2.
	// Данные по графе 4 должны быть больше или равны данных по графе 5 по соответствующим строкам.
	// Данные по графе 6 должны быть больше или равны данных по графе 7 по соответствующим строкам.
	Для НомСтр = 100 По 106 Цикл
		Если Не (ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0004"]
			>= ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0005"]
			+ ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0006"]
			+ ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0007"]
			+ ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0008"]
			+ ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0010"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "00"
			+ " раздела 1 данные по графе 4 должны быть больше или равны сумме данных по графам 5, 6, 7, 8, 10!",
			ИмяПоляТаблДокумента, "П0001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0004");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0008"]
			>= ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0009"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "00"
			+ " раздела 1 данные по графе 8 должны быть больше или равны данным по графе 9!",
			ИмяПоляТаблДокумента, "П0001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0008");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0004"]
			>= ПараметрыВыгрузки["ПР002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0005"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "00"
			+ " раздела 2 данные по графе 4 должны быть больше или равны данным по графе 5!",
			ИмяПоляТаблДокумента, "П0002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0004");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0006"]
			>= ПараметрыВыгрузки["ПР002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0007"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "00"
			+ " раздела 2 данные по графе 6 должны быть больше или равны данным по графе 7!",
			ИмяПоляТаблДокумента, "П0002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0006");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для НомСтр = 1 По 2 Цикл
		Если Не (ПараметрыВыгрузки["ПР0010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04"]
			>= ПараметрыВыгрузки["ПР0010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "05"]
			+ ПараметрыВыгрузки["ПР0010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06"]
			+ ПараметрыВыгрузки["ПР0010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "07"]
			+ ПараметрыВыгрузки["ПР0010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08"]
			+ ПараметрыВыгрузки["ПР0010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "10"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 1 данные по графе 4 должны быть больше или равны сумме данных по графам 5, 6, 7, 8, 10!",
			ИмяПоляТаблДокумента, "П00010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08"]
			>= ПараметрыВыгрузки["ПР0010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "09"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 1 данные по графе 8 должны быть больше или равны данным по графе 9!",
			ИмяПоляТаблДокумента, "П00010102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0020102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04"]
			>= ПараметрыВыгрузки["ПР0020102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "05"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 2 данные по графе 4 должны быть больше или равны данным по графе 5!",
			ИмяПоляТаблДокумента, "П00020102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0020102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06"]
			>= ПараметрыВыгрузки["ПР0020102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "07"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 2 данные по графе 6 должны быть больше или равны данным по графе 7!",
			ИмяПоляТаблДокумента, "П00020102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для НомСтр = 200 По 207 Цикл
		Если Не (ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0004"]
			>= ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0005"]
			+ ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0006"]
			+ ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0007"]
			+ ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0008"]
			+ ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0010"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "00"
			+ " раздела 1 данные по графе 4 должны быть больше или равны сумме данных по графам 5, 6, 7, 8, 10!",
			ИмяПоляТаблДокумента, "П0001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0004");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0008"]
			>= ПараметрыВыгрузки["ПР001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0009"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "00"
			+ " раздела 1 данные по графе 8 должны быть больше или равны данным по графе 9!",
			ИмяПоляТаблДокумента, "П0001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0008");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0004"]
			>= ПараметрыВыгрузки["ПР002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0005"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "00"
			+ " раздела 2 данные по графе 4 должны быть больше или равны данным по графе 5!",
			ИмяПоляТаблДокумента, "П0002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0004");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0006"]
			>= ПараметрыВыгрузки["ПР002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0007"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "00"
			+ " раздела 2 данные по графе 6 должны быть больше или равны данным по графе 7!",
			ИмяПоляТаблДокумента, "П0002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "0006");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для НомСтр = 1 По 3 Цикл
		Если Не (ПараметрыВыгрузки["ПР0010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04"]
			>= ПараметрыВыгрузки["ПР0010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "05"]
			+ ПараметрыВыгрузки["ПР0010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06"]
			+ ПараметрыВыгрузки["ПР0010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "07"]
			+ ПараметрыВыгрузки["ПР0010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08"]
			+ ПараметрыВыгрузки["ПР0010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "10"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 1 данные по графе 4 должны быть больше или равны сумме данных по графам 5, 6, 7, 8, 10!",
			ИмяПоляТаблДокумента, "П00010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08"]
			>= ПараметрыВыгрузки["ПР0010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "09"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 1 данные по графе 8 должны быть больше или равны данным по графе 9!",
			ИмяПоляТаблДокумента, "П00010201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0020201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04"]
			>= ПараметрыВыгрузки["ПР0020201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "05"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма,	"Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 2 данные по графе 4 должны быть больше или равны данным по графе 5!",
			ИмяПоляТаблДокумента, "П00020201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0020201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06"]
			>= ПараметрыВыгрузки["ПР0020201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "07"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 2 данные по графе 6 должны быть больше или равны данным по графе 7!",
			ИмяПоляТаблДокумента, "П00020201" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для НомСтр = 1 По 2 Цикл
		Если Не (ПараметрыВыгрузки["ПР0010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04"]
			>= ПараметрыВыгрузки["ПР0010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "05"]
			+ ПараметрыВыгрузки["ПР0010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06"]
			+ ПараметрыВыгрузки["ПР0010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "07"]
			+ ПараметрыВыгрузки["ПР0010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08"]
			+ ПараметрыВыгрузки["ПР0010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "10"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 1 данные по графе 4 должны быть больше или равны сумме данных по графам 5, 6, 7, 8, 10!",
			ИмяПоляТаблДокумента, "П00010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08"]
			>= ПараметрыВыгрузки["ПР0010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "09"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 1 данные по графе 8 должны быть больше или равны данным по графе 9!",
			ИмяПоляТаблДокумента, "П00010202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0020202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04"]
			>= ПараметрыВыгрузки["ПР0020202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "05"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 2 данные по графе 4 должны быть больше или равны данным по графе 5!",
			ИмяПоляТаблДокумента, "П00020202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0020202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06"]
			>= ПараметрыВыгрузки["ПР0020202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "07"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 2 данные по графе 6 должны быть больше или равны данным по графе 7!",
			ИмяПоляТаблДокумента, "П00020202" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для НомСтр = 1 По 4 Цикл
		Если Не (ПараметрыВыгрузки["ПР0010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04"]
			>= ПараметрыВыгрузки["ПР0010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "05"]
			+ ПараметрыВыгрузки["ПР0010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06"]
			+ ПараметрыВыгрузки["ПР0010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "07"]
			+ ПараметрыВыгрузки["ПР0010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08"]
			+ ПараметрыВыгрузки["ПР0010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "10"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 1 данные по графе 4 должны быть больше или равны сумме данных по графам 5, 6, 7, 8, 10!",
			ИмяПоляТаблДокумента, "П00010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08"]
			>= ПараметрыВыгрузки["ПР0010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "09"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 1 данные по графе 8 должны быть больше или равны данным по графе 9!",
			ИмяПоляТаблДокумента, "П00010203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "08");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0020203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04"]
			>= ПараметрыВыгрузки["ПР0020203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "05"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 2 данные по графе 4 должны быть больше или равны данным по графе 5!",
			ИмяПоляТаблДокумента, "П00020203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "04");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР0020203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06"]
			>= ПараметрыВыгрузки["ПР0020203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "07"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не выполнено условие контроля: в стр. " + "102" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=")
			+ " раздела 2 данные по графе 6 должны быть больше или равны данным по графе 7!",
			ИмяПоляТаблДокумента, "П00020203" + Формат(НомСтр, "ЧЦ=2; ЧВН=; ЧГ=") + "06");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(ЭтаФорма, ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты)
	
	Перем ПолученноеЗначение;
	
	КодОКУД        = ДопАтрибуты.OKUD;
	КодФормы       = ДопАтрибуты.idf;
	Периодичность  = ДопАтрибуты.idp;
	КодОКПО        = ПараметрыВыгрузки.ОКПО;
	РасчетныйГод   = ПараметрыВыгрузки.РасчПериод;
	ОтчетныйПериод = ПараметрыВыгрузки.ОтчПериод;
	
	ПараметрыВыгрузки.Свойство("ОКФС", ПолученноеЗначение);
	КодОКФС = ПолученноеЗначение;
	ПараметрыВыгрузки.Свойство("ОКВЭД", ПолученноеЗначение);
	КодОКВЭД = СтрЗаменить(ПолученноеЗначение, ".", "-");
	
	// Преобразование кодов - составляющих имени файла.
	КодыИФ = Новый Структура;
	КодыИФ.Вставить("Документ",       СтруктураРеквизитовФормы.мСохраненныйДок);
	КодыИФ.Вставить("КодФормы",       КодФормы);
	КодыИФ.Вставить("Периодичность",  Периодичность);
	КодыИФ.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	КодыИФ.Вставить("ДатаВыгрузки",   "");
	
	РегламентированнаяОтчетность.КодыДляИмениФайлаВФорматеВыгрузки(КодыИФ);
	
	// Формирование имени файла, в зависимости
	// от формата выгрузки статотчетности.
	Если ПустаяСтрока(КодыИФ.ДатаВыгрузки) Тогда // "старый" формат
		ИмяФайлаXML = КодОКУД + "_"
		+ КодФормы + "_"
		+ Периодичность + "_"
		+ КодОКПО + "_"
		+ РасчетныйГод + "_"
		+ ОтчетныйПериод
		+ ?(ПустаяСтрока(КодОКФС), "", "_" + КодОКФС)
		+ ?(ПустаяСтрока(КодОКВЭД), "", "_" + КодОКВЭД) + ".xml";
	Иначе										 // "новый" формат
		ИмяФайлаXML = КодОКУД + "_"
		+ КодыИФ.КодФормы + "_"
		+ КодыИФ.Периодичность + "_"
		+ КодОКПО + "_"
		+ РасчетныйГод + "_"
		+ КодыИФ.ОтчетныйПериод + "__"
		+ КодыИФ.ДатаВыгрузки + ".xml";
	КонецЕсли;
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ЭтаФорма.ИмяФормы, "АтрибВыгрузкиXML2013Кв1");
	
	СтрокаСведений = "ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ШифрФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("format_version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ПолученноеЗначение);
	
	ОтчПериод  = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	РасчПериод = Формат(Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	ПараметрыВыгрузки.Вставить("ОКПО", СокрЛП(ТабДокумент.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(РасчПериод));
	ПараметрыВыгрузки.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	
	// Преобразование выгружаемых атрибутов, в соответствии
	// с форматом выгрузки статотчетности.
	ДопАтрибуты.Свойство("idp", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодПериодичности", Число(СокрЛП(ПолученноеЗначение)));
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Для Каждого ЭлемСтруктуры Из ТабДокумент Цикл
		
		ПараметрыВыгрузки.Вставить(СтрЗаменить(ЭлемСтруктуры.Ключ, "П0", "ПР"), ЭлемСтруктуры.Значение);
		
	КонецЦикла;
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры