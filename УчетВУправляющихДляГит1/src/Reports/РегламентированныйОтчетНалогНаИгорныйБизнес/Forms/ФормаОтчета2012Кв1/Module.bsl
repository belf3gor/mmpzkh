&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2012Кв1";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ 	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
		
	СтруктураДанныхТитульный  = Новый Структура;
	СтруктураДанныхРаздел1    = Новый Структура;
	СтруктураДанныхРаздел2    = Новый Структура;
	СтруктураДанныхраздел3    = Новый Структура;
	СтруктураДанныхраздел32   = Новый Структура;
 	
	ИнициализацияМногостраничныхРазделов();
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел21", "ТаблицаСтраницыРаздел21");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел31", "ТаблицаСтраницыРаздел31");
		
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/02/2012";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1152011";
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.01", Истина);
	                     	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;

	ОбъектОтчет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)];
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;

	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	                 
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мКБК");
	СтруктураРеквизитовФормы.Вставить("мКодОКАТО");
	СтруктураРеквизитовФормы.Вставить("НеПоказыватьСтраницуМногостраничногоРазделаНаСервере");
	СтруктураРеквизитовФормы.Вставить("мСтруктураМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мИнтервалАвтосохранения");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мСумНалогДопл");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
					                                  
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел21.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел31.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
   	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	// При печати, расчет выполнятся не должен при любых обстоятельствах.
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СформироватьСпискиВыбора();
	
	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	НастроитьПоляВвода(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	мДокументВосстановлен = Ложь;

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;                

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
		
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
	
			// документ скопирован
			ВосстановитьСохраненныеДанные();
			
		Иначе

			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;			
			ОтобразитьНомерКорректировки(ЭтаФорма);
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			ЗаполнитьДанныеРаздела1();
			
		КонецЕсли;

		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;

	КонецЕсли;
	
    СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	ПоказатьПериод();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
			
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
		УстановитьДоступностьОбластей(ЭтаФорма);
	КонецЕсли;
			
	НомерКорректировки = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;	
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРаздела1();
		
	СтруктураДанныхРаздел1.Вставить("П000100001003", "18210605000021000110");
	СтруктураДанныхРаздел1.Вставить("П000100002003", "");
	СтруктураДанныхРаздел1.Вставить("П000100003003", 0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100003003",  "П000200007004;П000200008004;П000200009004;П000200010004;П000210009003;П000210005003;П000210002003;П000210006003;П000210007003;П000210003003;П000210008003;П000210001003;П000210002003;П000200003004;П000200008003;П000200004004;П000300001004;П000300002004;П000300005004;П000300004004;П000300005004;П000200003005;П000200009003;П000200004005;П000300001005;П000300002005;П000300005005;П000300004005;П000300005005;П000200003006;П000200010003;П000200004006;П000300001006;П000300002006;П000300005006;П000300004006;П000300005006;П000300001007;П000300002007;П000300003007;П000300004007;П000300005007;П000300006007;П000300001008;П000300002008;П000300003008;;П000300004008;П000300005008;П000300006008;П000200002007;П000200003007;П000200004007;П000200002008;П000200003008;П000200004008;П000200011003;П000200012003;П000200011004;П000200012004");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200002003", "П000210004003;П000210005003;П000210006003;П000210007003;П000210008003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200003003", "П000210005003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200004003", "П000210006003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200005003", "П000210007003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200006003", "П000210008003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200007004", "П000210009003;П000210005003;П000210002003;П000210006003;П000210007003;П000210003003;П000210008003;П000210001003;П000210002003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200003004", "П000300001004;П000300002004;П000300005004");	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200004004", "П000300004004;П000300005004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200003005", "П000300001005;П000300002005;П000300005005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200004005", "П000300004005;П000300005005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200003006", "П000300001006;П000300002006;П000300005006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200004006", "П000300004006;П000300005006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200003007", "П000300001007;П000300002007;П000300005007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200004007", "П000300004007;П000300005007");
    СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200003008", "П000300001008;П000300002008;П000300005008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200004008", "П000300004008;П000300005008");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200002004", "П000200003004;П000200004004;П000300001004;П000300002004;П000300005004;П000300004004;П000300005004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200002005", "П000200003005;П000200004005;П000300001005;П000300002005;П000300005005;П000300004005;П000300005005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200002006", "П000200003006;П000200004006;П000300001006;П000300002006;П000300005006;П000300004006;П000300005006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200002007", "П000200003007;П000200004007;П000300001007;П000300002007;П000300005007;П000300004007;П000300005007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200002008", "П000200003008;П000200004008;П000300001008;П000300002008;П000300005008;П000300004008;П000300005008");

	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200008004", "П000200003004;П000200008003;П000200004004;П000300001004;П000300002004;П000300005004;П000300004004;П000300005004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200009004", "П000200003005;П000200009003;П000200004005;П000300001005;П000300002005;П000300005005;П000300004005;П000300005005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200010004", "П000200003006;П000200010003;П000200004006;П000300001006;П000300002006;П000300005006;П000300004006;П000300005006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200011004", "П000200003007;П000200011003;П000200004007;П000300001007;П000300002007;П000300005007;П000300004007;П000300005007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200012004", "П000200003008;П000200012003;П000200004008;П000300001008;П000300002008;П000300005008;П000300004008;П000300005008");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210003003", "П000210001003;П000210002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210009003", "П000210005003;П000210002003;П000210006003;П000210007003;П000210003003;П000210008003;П000210001003;П000210002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000210004003", "П000210005003;П000210006003;П000210007003;П000210008003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300001003", "П000310002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300002003", "П000310003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300003003", "П000310004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004003", "П000310005003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300005003", "П000310006003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300006003", "П000310007003;П000310002003;П000310003003;П000310004003;П000310005003;П000310006003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300006004", "П000300001004;П000300002004;П000300003004;П000300004004;П000300005004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300006005", "П000300001005;П000300002005;П000300003005;П000300004005;П000300005005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300006006", "П000300001006;П000300002006;П000300003006;П000300004006;П000300005006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300006007", "П000300001007;П000300002007;П000300003007;П000300004007;П000300005007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300006008", "П000300001008;П000300002008;П000300003008;П000300004008;П000300005008");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310007003", "П000310002003;П000310003003;П000310004003;П000310005003;П000310006003");
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
			
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2012Кв1");
	
	ЗначениеОтбораПоПериоду = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=M");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код");
			ТаблСписка.Колонки.Добавить("Название");
			
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				НазваниеПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				ОтборПоказателя = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				
				ПоказательПроходитОтбор = (ПустаяСтрока(ОтборПоказателя) ИЛИ (ОтборПоказателя = ЗначениеОтбораПоПериоду));
				
				Если КодПоказателя <> "###" И ПоказательПроходитОтбор Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = НазваниеПоказателя;
				КонецЕсли;
			КонецЦикла;
			
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
			
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "НалоговыйПериод", 2, , "Выбор налогового периода", КоллекцияСписковВыбора["НалоговыеПериоды"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "МестоНахожденияУчета", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ФормаРеорганизации", 1, , "Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100001003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100002003", 11, "ОКАТО");		
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел31";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
			
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;	

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела2.1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
		
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела3.1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел31";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
 	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма)
	
	ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области.ФормаРеорганизации;
	ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.РеорганизацияИНН;
	ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.РеорганизацияКПП;
	Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
	 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
		ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
		ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
	Иначе
		РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
		РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
	   
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;

	Иначе

		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
		
	КонецЕсли;

	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий		   	                              = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
		
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
    	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
			
	Префикс = "ПолеТабличногоДокумента";

    Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл    

        Если НЕ Раздел.МногостраничностьВРазделе Тогда
            ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
        КонецЕсли;

    КонецЦикла;

    ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);

    ИмяТекРаздела = "Титульный";

    Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
        Попытка
            ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
        Исключение
        КонецПопытки;
    КонецЦикла;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	ОтобразитьНомерКорректировки(ЭтаФорма);

	Модифицированность   = Ложь;

	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	КодПериода = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=MM");
	ТабличныйДокумент.Области.НалоговыйПериод.Значение = КодПериода;
	
	ТабличныйДокумент.Области.МестоНахожденияУчета.Значение = "214";

	// выводим год на титульный лист
	ТабличныйДокумент.Области.ОтчетныйГод.Значение = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
			
    Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКАТО";
    Результат = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи И (Результат <> Неопределено) Тогда
		
		Раздел = ТабличныйДокумент; 
		
		Раздел.Области.КодИМНС.Значение 	= Результат.КодНО;
		Раздел.Области.ИНН.Значение    		= Результат.ИННЮЛ;
		Раздел.Области.КПП.Значение    		= Результат.КППЮЛ;
				
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(Результат.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(Результат.НаимЮлПол);
		КонецЕсли;
		
		Раздел.Области.Налогоплательщик.Значение = НаименованиеОрганизации;
						
		Раздел.Области.Телефон.Значение = СокрЛП(Результат.ТелОрганизации);
				
		ЗаполнитьОКАТО(ЭтаФорма, Результат.ОКАТО);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	ЗаполнитьСведенияОПодписантах();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ТипПодписанта.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.Подписант.Значение = Подписант;
	ТабличныйДокумент.Области.НаименованиеОрганизацииПредставителя.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.НаименованиеДокументаПредставителя.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	 
 КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
	 КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , ПоказателиОтчета);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
		
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	
	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);

    ЗаполнитьПустыеСтруктурыДанных();

    // формируем данные редактируемых ячеек таблицы
    ПоказателиОтчета = Новый Структура();

    ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
		
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив;
	
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
    	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
		
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
    
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                  = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел21"
	 ИЛИ НаимРаздела = "Раздел31" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел21" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздел21";
			
		ИначеЕсли НаимРаздела = "Раздел31" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздел31";
								
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
					
	// Обычные разделы.
	//
	Иначе
				
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
		
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел21"
	 ИЛИ ИмяТекРаздела = "Раздел31" Тогда
	 
	  	Если ИмяТекРаздела = "Раздел21" Тогда
	    	НаимТаблицыСтраницы = "ТаблицаСтраницыРаздел21";
	    ИначеЕсли ИмяТекРаздела = "Раздел31" Тогда
	    	НаимТаблицыСтраницы = "ТаблицаСтраницыРаздел31";
	    КонецЕсли;
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
			
	// Обычные разделы.
	//	
	Иначе

		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма);

	Иначе
		
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);				
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
				
	КонецЕсли;
	
	НастроитьПоляВвода(ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоляВвода(ИмяТекРаздела)
	
	МаскаКБК   = "99999999999999999999";
	МаскаОКАТО = "99999999999";
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		ТабличныйДокумент.Области["НалоговыйПериод"].Маска = "99";		
		ТабличныйДокумент.Области["КодИМНС"].Маска = "9999";		
		ТабличныйДокумент.Области["МестоНахожденияУчета"].Маска = "999";		
		ТабличныйДокумент.Области["ФормаРеорганизации"].Маска = "9";
		ТабличныйДокумент.Области["РеорганизацияИНН"].Маска = "9999999999";
		ТабличныйДокумент.Области["РеорганизацияКПП"].Маска = "999999999";
		
	ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда 
		
		ТабличныйДокумент.Области["П000100001003"].Маска = МаскаКБК;
		ТабличныйДокумент.Области["П000100002003"].Маска = МаскаОКАТО;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьСведенияОПредставителеОрганизацииКлиент() Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	Если Область.Имя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизации(Истина);
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		НомерКорректировки = Область.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
		Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения+1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "ОКВЭД" Тогда
		
		Если НЕ ПустаяСтрока(Область.Значение) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "ФормаРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма);
	КонецЕсли;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Модифицированность = Истина;
 	
КонецПроцедуры 

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "")
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;
	
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100003003, ОбластьИмя) > 0 Тогда													   
			
			// Сумма налога, исчисленная к уплате в бюджет.
						
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
				
				СумНалогДопл = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200007004.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200008004.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200009004.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200010004.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200011004.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200012004.Значение);
				
			ИначеЕсли Форма.СтруктураДанныхРаздел2.Свойство("П000200007004")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200008004")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200009004")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200010004")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200011004")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200012004") Тогда

								
				СумНалогДопл = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200007004)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200008004)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200009004)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200010004)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200011004)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200012004);

				
			КонецЕсли;
			
			Форма.СтруктураДанныхРаздел1.Вставить("П000100003003", СумНалогДопл);
			
		КонецЕсли;
		
		
		
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда	
			
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200008004, ОбластьИмя) > 0 Тогда													   
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
				
				ОкрП000200008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200008003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000200008004.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200003004.Значение
				* ОкрП000200008003
				+ Форма.ТабличныйДокумент.Области.П000200004004.Значение
				* ОкрП000200008003
				* 0.5);
				
			ИначеЕсли Форма.СтруктураДанныхРаздел2.Свойство("П000200008003")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200003004")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200004004") Тогда
				
				ОкрП000200008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200008003);
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200008004", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200003004
				* ОкрП000200008003
				+ Форма.СтруктураДанныхРаздел2.П000200004004
				* ОкрП000200008003
				* 0.5));
				
			КонецЕсли;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200009004, ОбластьИмя) > 0 Тогда													   
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
				
				ОкрП000200009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200009003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000200009004.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200003005.Значение
				* ОкрП000200009003
				+ Форма.ТабличныйДокумент.Области.П000200004005.Значение
				* ОкрП000200009003
				* 0.5);
				
			ИначеЕсли Форма.СтруктураДанныхРаздел2.Свойство("П000200009003")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200003005")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200004005") Тогда
				
				ОкрП000200009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200009003);
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200009004", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200003005
				* ОкрП000200009003
				+ Форма.СтруктураДанныхРаздел2.П000200004005
				* ОкрП000200009003
				* 0.5));
				
			КонецЕсли;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200010004, ОбластьИмя) > 0 Тогда													   
			    			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
				
				ОкрП000200010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200010003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000200010004.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200003006.Значение
				* ОкрП000200010003
				+ Форма.ТабличныйДокумент.Области.П000200004006.Значение
				* ОкрП000200010003
				* 0.5);
				
			ИначеЕсли Форма.СтруктураДанныхРаздел2.Свойство("П000200010003")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200003006")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200004006") Тогда
				
				ОкрП000200010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200010003);
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200010004", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200003006
				* ОкрП000200010003
				+ Форма.СтруктураДанныхРаздел2.П000200004006
				* ОкрП000200010003
				* 0.5));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200011004, ОбластьИмя) > 0 Тогда													   
			    			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
				
				ОкрП000200011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200011003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000200011004.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200003007.Значение
				* ОкрП000200011003
				+ Форма.ТабличныйДокумент.Области.П000200004007.Значение
				* ОкрП000200011003
				* 0.5);
				
			ИначеЕсли Форма.СтруктураДанныхРаздел2.Свойство("П000200011003")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200003007")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200004007") Тогда
				
				ОкрП000200011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200011003);
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200011004", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200003007
				* ОкрП000200011003
				+ Форма.СтруктураДанныхРаздел2.П000200004007
				* ОкрП000200011003
				* 0.5));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200012004, ОбластьИмя) > 0 Тогда													   
			    			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
				
				ОкрП000200012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200012003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000200012004.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000200003008.Значение
				* ОкрП000200012003
				+ Форма.ТабличныйДокумент.Области.П000200004008.Значение
				* ОкрП000200012003
				* 0.5);
				
			ИначеЕсли Форма.СтруктураДанныхРаздел2.Свойство("П000200012003")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200003008")
					И Форма.СтруктураДанныхРаздел2.Свойство("П000200004008") Тогда
				
				ОкрП000200012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200012003);
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200012004", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел2.П000200003008
				* ОкрП000200012003
				+ Форма.СтруктураДанныхРаздел2.П000200004008
				* ОкрП000200012003
				* 0.5));
				
			КонецЕсли;
			
		КонецЕсли;

		Расчет(Форма, "Раздел1", ОбластьИмя);
		
		
		
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210003003, ОбластьИмя) > 0 Тогда
			
			П000210002003 = Форма.ТабличныйДокумент.Области.П000210002003.Значение;
			
			// Строка 030
			Форма.ТабличныйДокумент.Области.П000210003003.Значение = Форма.ТабличныйДокумент.Области.П000210001003.Значение * П000210002003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210009003, ОбластьИмя) > 0 Тогда
			
			П000210002003 = Форма.ТабличныйДокумент.Области.П000210002003.Значение;
			
			Если Форма.ТабличныйДокумент.Области.П000210001003.Значение = 1 Тогда
				
				// Вычисляем сумму налога
				Форма.ТабличныйДокумент.Области.П000210009003.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210005003.Значение * П000210002003 + Форма.ТабличныйДокумент.Области.П000210006003.Значение * П000210002003 * 0.5);
				
			ИначеЕсли Форма.ТабличныйДокумент.Области.П000210001003.Значение > 1 Тогда
				
				// Вычисляем сумму налога
				Форма.ТабличныйДокумент.Области.П000210009003.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210007003.Значение * Форма.ТабличныйДокумент.Области.П000210003003.Значение + Форма.ТабличныйДокумент.Области.П000210008003.Значение * Форма.ТабличныйДокумент.Области.П000210003003.Значение * 0.5);
				
			Иначе
				
				Форма.ТабличныйДокумент.Области.П000210009003.Значение = 0;
				
			КонецЕсли;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000210004003, ОбластьИмя) > 0 Тогда
			
			// Строка 040
			Форма.ТабличныйДокумент.Области.П000210004003.Значение = Форма.ТабличныйДокумент.Области.П000210005003.Значение
			+ Форма.ТабличныйДокумент.Области.П000210006003.Значение
			+ Форма.ТабличныйДокумент.Области.П000210007003.Значение
			+ Форма.ТабличныйДокумент.Области.П000210008003.Значение;
			
		КонецЕсли;	
		

		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200002003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000210004003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел21", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200002003", СумПоказатели.П000210004003);
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200003003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000210005003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел21", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200003003", СумПоказатели.П000210005003);
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200004003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000210006003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел21", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200004003", СумПоказатели.П000210006003);
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200005003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000210007003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел21", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200005003", СумПоказатели.П000210007003);
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200006003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000210008003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел21", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200006003", СумПоказатели.П000210008003);
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200007004, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000210009003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел21", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200007004", СумПоказатели.П000210009003);
			
		КонецЕсли;													   
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
		
		
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
        
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000300006004.Значение = Форма.ТабличныйДокумент.Области.П000300001004.Значение
			+ Форма.ТабличныйДокумент.Области.П000300002004.Значение
			- Форма.ТабличныйДокумент.Области.П000300003004.Значение
			+ Форма.ТабличныйДокумент.Области.П000300004004.Значение
			- Форма.ТабличныйДокумент.Области.П000300005004.Значение;
			
		КонецЕсли;													   

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000300006005.Значение = Форма.ТабличныйДокумент.Области.П000300001005.Значение
			+ Форма.ТабличныйДокумент.Области.П000300002005.Значение
			- Форма.ТабличныйДокумент.Области.П000300003005.Значение
			+ Форма.ТабличныйДокумент.Области.П000300004005.Значение
			- Форма.ТабличныйДокумент.Области.П000300005005.Значение;
			
		КонецЕсли;													   

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006006, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000300006006.Значение = Форма.ТабличныйДокумент.Области.П000300001006.Значение
			+ Форма.ТабличныйДокумент.Области.П000300002006.Значение
			- Форма.ТабличныйДокумент.Области.П000300003006.Значение
			+ Форма.ТабличныйДокумент.Области.П000300004006.Значение
			- Форма.ТабличныйДокумент.Области.П000300005006.Значение;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006007, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000300006007.Значение = Форма.ТабличныйДокумент.Области.П000300001007.Значение
			+ Форма.ТабличныйДокумент.Области.П000300002007.Значение
			- Форма.ТабличныйДокумент.Области.П000300003007.Значение
			+ Форма.ТабличныйДокумент.Области.П000300004007.Значение
			- Форма.ТабличныйДокумент.Области.П000300005007.Значение;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006008, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000300006008.Значение = Форма.ТабличныйДокумент.Области.П000300001008.Значение
			+ Форма.ТабличныйДокумент.Области.П000300002008.Значение
			- Форма.ТабличныйДокумент.Области.П000300003008.Значение
			+ Форма.ТабличныйДокумент.Области.П000300004008.Значение
			- Форма.ТабличныйДокумент.Области.П000300005008.Значение;
			
		КонецЕсли;
		
			
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200003004, ОбластьИмя) > 0 Тогда
			
			КолвоАвтоматовПоСтр010Раздела3 = Форма.ТабличныйДокумент.Области.П000300001004.Значение;
			КолвоАвтоматовПоСтр020Раздела3 = Форма.ТабличныйДокумент.Области.П000300002004.Значение;
			КолвоАвтоматовПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005004.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200003004", КолвоАвтоматовПоСтр010Раздела3 + КолвоАвтоматовПоСтр020Раздела3 - КолвоАвтоматовПоСтр050Раздела3);
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200004004, ОбластьИмя) > 0 Тогда
			
			КолвоАвтоматовПоСтр040Раздела3 = Форма.ТабличныйДокумент.Области.П000300004004.Значение;
			КолвоАвтоматовПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005004.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200004004", КолвоАвтоматовПоСтр040Раздела3 + КолвоАвтоматовПоСтр050Раздела3);
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200003005, ОбластьИмя) > 0 Тогда
			
			КолвоТотализатПоСтр010Раздела3 = Форма.ТабличныйДокумент.Области.П000300001005.Значение;
			КолвоТотализатПоСтр020Раздела3 = Форма.ТабличныйДокумент.Области.П000300002005.Значение;
			КолвоТотализатПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005005.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200003005", КолвоТотализатПоСтр010Раздела3 + КолвоТотализатПоСтр020Раздела3 - КолвоТотализатПоСтр050Раздела3);										
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200004005, ОбластьИмя) > 0 Тогда
			
			КолвоТотализатПоСтр040Раздела3 = Форма.ТабличныйДокумент.Области.П000300004005.Значение;
			КолвоТотализатПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005005.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200004005", КолвоТотализатПоСтр040Раздела3 + КолвоТотализатПоСтр050Раздела3);																				
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200003006, ОбластьИмя) > 0 Тогда
			
			КолвоБукмекерыПоСтр010Раздела3 = Форма.ТабличныйДокумент.Области.П000300001006.Значение;
			КолвоБукмекерыПоСтр020Раздела3 = Форма.ТабличныйДокумент.Области.П000300002006.Значение;
			КолвоБукмекерыПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005006.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200003006", КолвоБукмекерыПоСтр010Раздела3 + КолвоБукмекерыПоСтр020Раздела3 - КолвоБукмекерыПоСтр050Раздела3);																				
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200004006, ОбластьИмя) > 0 Тогда
			
			КолвоБукмекерыПоСтр040Раздела3 = Форма.ТабличныйДокумент.Области.П000300004006.Значение;
			КолвоБукмекерыПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005006.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200004006", КолвоБукмекерыПоСтр040Раздела3 + КолвоБукмекерыПоСтр050Раздела3);																				
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200003007, ОбластьИмя) > 0 Тогда
			
			КолвоБукмекерыПоСтр010Раздела3 = Форма.ТабличныйДокумент.Области.П000300001007.Значение;
			КолвоБукмекерыПоСтр020Раздела3 = Форма.ТабличныйДокумент.Области.П000300002007.Значение;
			КолвоБукмекерыПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005007.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200003007", КолвоБукмекерыПоСтр010Раздела3 + КолвоБукмекерыПоСтр020Раздела3 - КолвоБукмекерыПоСтр050Раздела3);																				
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200004007, ОбластьИмя) > 0 Тогда
			
			КолвоБукмекерыПоСтр040Раздела3 = Форма.ТабличныйДокумент.Области.П000300004007.Значение;
			КолвоБукмекерыПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005007.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200004007", КолвоБукмекерыПоСтр040Раздела3 + КолвоБукмекерыПоСтр050Раздела3);																				
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200003008, ОбластьИмя) > 0 Тогда
			
			КолвоБукмекерыПоСтр010Раздела3 = Форма.ТабличныйДокумент.Области.П000300001008.Значение;
			КолвоБукмекерыПоСтр020Раздела3 = Форма.ТабличныйДокумент.Области.П000300002008.Значение;
			КолвоБукмекерыПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005008.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200003008", КолвоБукмекерыПоСтр010Раздела3 + КолвоБукмекерыПоСтр020Раздела3 - КолвоБукмекерыПоСтр050Раздела3);																				
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200004008, ОбластьИмя) > 0 Тогда
			
			КолвоБукмекерыПоСтр040Раздела3 = Форма.ТабличныйДокумент.Области.П000300004008.Значение;
			КолвоБукмекерыПоСтр050Раздела3 = Форма.ТабличныйДокумент.Области.П000300005008.Значение;
			
			Форма.СтруктураДанныхРаздел2.Вставить("П000200004008", КолвоБукмекерыПоСтр040Раздела3 + КолвоБукмекерыПоСтр050Раздела3);																				
			
		КонецЕсли;
		
		
			
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200002004, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураДанныхРаздел2.Свойство("П000200003004") И Форма.СтруктураДанныхРаздел2.Свойство("П000200004004") Тогда
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200002004", Форма.СтруктураДанныхРаздел2.П000200003004 + Форма.СтруктураДанныхРаздел2.П000200004004);
				
			КонецЕсли;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200002005, ОбластьИмя) > 0 Тогда													   
			
			Если Форма.СтруктураДанныхРаздел2.Свойство("П000200003005") И Форма.СтруктураДанныхРаздел2.Свойство("П000200004005") Тогда
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200002005", Форма.СтруктураДанныхРаздел2.П000200003005 + Форма.СтруктураДанныхРаздел2.П000200004005);
				
			КонецЕсли;
			
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200002006, ОбластьИмя) > 0 Тогда													   
			
			Если Форма.СтруктураДанныхРаздел2.Свойство("П000200003006") И Форма.СтруктураДанныхРаздел2.Свойство("П000200004006") Тогда
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200002006", Форма.СтруктураДанныхРаздел2.П000200003006 + Форма.СтруктураДанныхРаздел2.П000200004006);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200002007, ОбластьИмя) > 0 Тогда													   
			
			Если Форма.СтруктураДанныхРаздел2.Свойство("П000200003007") И Форма.СтруктураДанныхРаздел2.Свойство("П000200004007") Тогда
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200002007", Форма.СтруктураДанныхРаздел2.П000200003007 + Форма.СтруктураДанныхРаздел2.П000200004007);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200002008, ОбластьИмя) > 0 Тогда													   
			
			Если Форма.СтруктураДанныхРаздел2.Свойство("П000200003008") И Форма.СтруктураДанныхРаздел2.Свойство("П000200004008") Тогда
				
				Форма.СтруктураДанныхРаздел2.Вставить("П000200002008", Форма.СтруктураДанныхРаздел2.П000200003008 + Форма.СтруктураДанныхРаздел2.П000200004008);
				
			КонецЕсли;
			
		КонецЕсли;
	
		Расчет(Форма, "Раздел2", ОбластьИмя);	
		
		

		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел31" Тогда

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310007003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000310007003.Значение = Макс(Форма.ТабличныйДокумент.Области.П000310002003.Значение
																   + Форма.ТабличныйДокумент.Области.П000310003003.Значение
																   - Форма.ТабличныйДокумент.Области.П000310004003.Значение
																   + Форма.ТабличныйДокумент.Области.П000310005003.Значение
																   - Форма.ТабличныйДокумент.Области.П000310006003.Значение, 0);
			
		КонецЕсли;										 
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300001003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000310002003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел31", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел3.Вставить("П000300001003", СумПоказатели.П000310002003);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300002003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000310003003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел31", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел3.Вставить("П000300002003", СумПоказатели.П000310003003);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300003003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000310004003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел31", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел3.Вставить("П000300003003", СумПоказатели.П000310004003);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000310005003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел31", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел3.Вставить("П000300004003", СумПоказатели.П000310005003);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300005003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000310006003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел31", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел3.Вставить("П000300005003", СумПоказатели.П000310006003);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006003, ОбластьИмя) > 0 Тогда
			
			СумПоказатели = Новый Структура;
			СумПоказатели.Вставить("П000310007003", 0);
			
			РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел31", СумПоказатели);
			
			Форма.СтруктураДанныхРаздел3.Вставить("П000300006003", СумПоказатели.П000310007003);
			
		КонецЕсли;
		
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
												 
		Расчет(Форма, "Раздел31", ОбластьИмя);
		Расчет(Форма, "Раздел3",  ОбластьИмя);
		Расчет(Форма, "Раздел21", ОбластьИмя);
		Расчет(Форма, "Раздел2",  ОбластьИмя);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, ИмяСтраницы, СумПоказатели)
	
	ТаблицаРаздела = Неопределено;
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	
	Если ТаблицаРаздела <> Неопределено Тогда
		
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			
			ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные;
			
			Если ДанныеТаблПоле.Количество() = 0 Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31"
				 ИЛИ Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
					
					Для Каждого СумПоказатель Из СумПоказатели Цикл
						
						СумПоказатели.Вставить(СумПоказатель.Ключ, СумПоказатель.Значение + Форма.ТабличныйДокумент.Области[СумПоказатель.Ключ].Значение);
						
					КонецЦикла;
										
				КонецЕсли;
								
				Прервать;
				
			КонецЕсли;
			
			Если Инд = Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы - 1
			   И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31"
			  ИЛИ Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21") Тогда
			   
			   Для Каждого СумПоказатель Из СумПоказатели Цикл
				   
				   СумПоказатели.Вставить(СумПоказатель.Ключ, СумПоказатель.Значение + Форма.ТабличныйДокумент.Области[СумПоказатель.Ключ].Значение);
				   
			   КонецЦикла;
												
			Иначе
				
				Для Каждого СумПоказатель Из СумПоказатели Цикл
					
					СумПоказатели.Вставить(СумПоказатель.Ключ, СумПоказатель.Значение + ДанныеТаблПоле[0].Значение[СумПоказатель.Ключ]);
					
				КонецЦикла;
			
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(Область.Имя, 7) = "КодИМНС" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
	
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() = 0 Тогда
		
		ПараметрВводаПоля = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
	Иначе
		Если Область.Имя = "ФормаРеорганизации" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");

		Сообщение.Сообщить();	
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["КодИМНС"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.области["КПП"].Значение= РезультатВыбора.КПП ;
		
		ЗаполнитьСведенияОПодписантахИКодПоОКАТО(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантахИКодПоОКАТО(Ссылка)
	
	ЗаполнитьОКАТО(ЭтаФорма, Ссылка.КодПоОКАТО);
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт	
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда	
		
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения =  Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Тогда	
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Если Область.Имя = "ФормаРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ДатаПодписи = Неопределено;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
		ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
		СтруктураРеквизитовФормы.ВидДокумента = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел2.Очистить();
	СтруктураДанныхРаздел3.Очистить();
		
	ТаблицаСтраницыРаздел21.Очистить();
	ТаблицаСтраницыРаздел31.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

    ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт	
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
		
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);	
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)

КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;	

	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;	

	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
		
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета + 1;
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);

	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;
    
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
															
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
									
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
                      		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;//НомерКорректировкиСтрока;
			
Конецпроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	                                       	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
		
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
    	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры 

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",		"МЧБ_2012Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",			"МЧБ_2012Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",			"МЧБ_2012Кв1_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел21",		"МЧБ_2012Кв1_Раздел21");
	СоответствиеРазделовМакетам.Вставить("Раздел3",			"МЧБ_2012Кв1_Раздел3");
	СоответствиеРазделовМакетам.Вставить("Раздел31",		"МЧБ_2012Кв1_Раздел31");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу = 5;
	МакетМЧБ.ПолеСлева = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
		
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("Подписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
				ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДообнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатныеЛисты[0].Значение, СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=dd.MM.yyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
	
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, Дополнять_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;
	
	ТаблДок = ЭтаФорма[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(СтруктураПараметровЛиста.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции 

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции 

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Сред(Раздел.Ключ, 24), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",  РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",   Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ОтчетГод",  Титульный.ОтчетныйГод);
	ПараметрыВыгрузки.Вставить("Период",    СокрЛП(Титульный.НалоговыйПериод));
	ПараметрыВыгрузки.Вставить("КодНО",     СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("НомКорр",   Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",   СокрЛП(Титульный.МестоНахожденияУчета));
	ПараметрыВыгрузки.Вставить("ОКВЭД",     СокрЛП(Титульный.ОКВЭД));
	ПараметрыВыгрузки.Вставить("Тлф",       СокрЛП(Титульный.Телефон));
	ПараметрыВыгрузки.Вставить("НаимОрг",   СокрЛП(Титульный.Налогоплательщик));
	ПараметрыВыгрузки.Вставить("ИННОрг",    СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",    СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ТипПодписанта));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.НаименованиеОрганизацииПредставителя));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.НаименованиеДокументаПредставителя));
	ПараметрыВыгрузки.Вставить("ФормРеорг",  СокрЛП(Титульный.ФормаРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг", СокрЛП(Титульный.РеорганизацияИНН));
	ПараметрыВыгрузки.Вставить("КППРеорг",   СокрЛП(Титульный.РеорганизацияКПП));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.Подписант);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",             "NO_IGBISND_1_021_00_05_01_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_IGBISND");
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	ПараметрыВыгрузки.Вставить("ИдФайл",            СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового периода!", "Титульный", "НалоговыйПериод");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОтчетГод) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан отчетный год!", "Титульный", "ОтчетныйГод");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по месту учета!", "Титульный", "МестоНахожденияУчета");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан налогоплательщик!", "Титульный", "Налогоплательщик");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ФормаРеорганизации = ПараметрыВыгрузки.ФормРеорг;
	ПроверяемыеКодыРеорганизации = "1|2|3|5|6";
	ТребуетсяУказаниеИННКППРеорганизации = (НЕ ПустаяСтрока(ФормаРеорганизации) И СтрНайти(ПроверяемыеКодыРеорганизации, ФормаРеорганизации) <> 0);
	Если ТребуетсяУказаниеИННКППРеорганизации Тогда
		ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННЮЛРеорг);
		Если ДлинаИННРеорг <> 10 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации!", "Титульный", "РеорганизацияИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
		Если ДлинаКППРеорг <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации!", "Титульный", "РеорганизацияКПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ТипПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан признак лица, подписавшего документ!", "Титульный", "ТипПодписанта");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "Подписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "Подписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "НаименованиеДокументаПредставителя");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДанныеРаздела1 =  мДанныеОтчета.Раздел1;
	
	ДлинаКБК = СтрДлина(ДанныеРаздела1.П000100001003);
	Если ДлинаКБК <> 20 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаКБК = 0, "", "верно") + " задан КБК!", "Раздел1", "П000100001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДлинаОКАТО = СтрДлина(ДанныеРаздела1.П000100002003);
	Если ДлинаОКАТО <> 11 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаОКАТО = 0, "", "верно") + " задан код по ОКАТО!", "Раздел1", "П000100002003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДанныеРаздела21 = мДанныеОтчета.Раздел21;
	ДанныеРаздела31 = мДанныеОтчета.Раздел31;
	
	ОписаниеТиповЧисла15 = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15));
	
	ТаблицаПроверкиПоИгровымПолям = Новый ТаблицаЗначений;
	ТаблицаПроверкиПоИгровымПолям.Колонки.Добавить("ИгровыеПоля",       ОписаниеТиповЧисла15);
	ТаблицаПроверкиПоИгровымПолям.Колонки.Добавить("СтраницаРаздела21", ОписаниеТиповЧисла15);
	ТаблицаПроверкиПоИгровымПолям.Колонки.Добавить("СтраницаРаздела31", ОписаниеТиповЧисла15);
	
	ИндексЛиста = 0;	
	Для Каждого Лист21 Из ДанныеРаздела21 Цикл
		ДанныеЛиста = Лист21.Данные[0].Значение;
		ИндексЛиста = ИндексЛиста + 1;
		
		ВРазделеЕстьДанные = (ДанныеЛиста.П000210002003 <> 0
		                 ИЛИ ДанныеЛиста.П000210003003 <> 0
		                 ИЛИ ДанныеЛиста.П000210004003 <> 0
		                 ИЛИ ДанныеЛиста.П000210005003 <> 0
		                 ИЛИ ДанныеЛиста.П000210006003 <> 0
		                 ИЛИ ДанныеЛиста.П000210007003 <> 0
		                 ИЛИ ДанныеЛиста.П000210008003 <> 0
		                 ИЛИ Окр(ДанныеЛиста.П000210009003,0) <> 0);
		Если ВРазделеЕстьДанные И ДанныеЛиста.П000210001003 = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.1 на странице " + ИндексЛиста + " не указано количество игровых полей на игровом столе!", "Раздел21", "П000210001003", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЗаписьОЛисте = ТаблицаПроверкиПоИгровымПолям.Добавить();
		ЗаписьОЛисте.ИгровыеПоля = ДанныеЛиста.П000210001003;
		ЗаписьОЛисте.СтраницаРаздела21 = ИндексЛиста;
	КонецЦикла;
	
	ИндексЛиста = 0;
	Для Каждого Лист31 Из ДанныеРаздела31 Цикл
		ДанныеЛиста = Лист31.Данные[0].Значение;
		ИндексЛиста = ИндексЛиста + 1;
		
		ВРазделеЕстьДанные = (ДанныеЛиста.П000310002003 <> 0
		                 ИЛИ ДанныеЛиста.П000310003003 <> 0
		                 ИЛИ ДанныеЛиста.П000310004003 <> 0
		                 ИЛИ ДанныеЛиста.П000310005003 <> 0
		                 ИЛИ ДанныеЛиста.П000310006003 <> 0
		                 ИЛИ ДанныеЛиста.П000310007003 <> 0);
		Если ВРазделеЕстьДанные И ДанныеЛиста.П000310001003 = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1 на странице " + ИндексЛиста + " не указано количество игровых полей на игровом столе!", "Раздел31", "П000310001003", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЗаписьОЛисте = ТаблицаПроверкиПоИгровымПолям.Добавить();
		ЗаписьОЛисте.ИгровыеПоля = ДанныеЛиста.П000310001003;
		ЗаписьОЛисте.СтраницаРаздела31 = ИндексЛиста;
	КонецЦикла;
	
	ТаблицаКоличестваИгровыхПолей = ТаблицаПроверкиПоИгровымПолям.Скопировать(, "ИгровыеПоля");
	ТаблицаКоличестваИгровыхПолей.Свернуть("ИгровыеПоля");
	
	Для Каждого СтрокаКоличестваИгровыхПолей Из ТаблицаКоличестваИгровыхПолей Цикл
		КоличествоИгровыхПолей = СтрокаКоличестваИгровыхПолей.ИгровыеПоля;
		Если КоличествоИгровыхПолей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборРаздела21 = Новый Структура("ИгровыеПоля, СтраницаРаздела31", КоличествоИгровыхПолей, 0);
		СтрокиПоКоличеству = ТаблицаПроверкиПоИгровымПолям.НайтиСтроки(ОтборРаздела21);
		Если СтрокиПоКоличеству.Количество() > 1 Тогда
			ИндексПервогоЛиста = СтрокиПоКоличеству[0].СтраницаРаздела21;
			СписокСтраниц = "";
			Для Инд = 0 По СтрокиПоКоличеству.ВГраница() Цикл
				ЭтоПоследняяСтрока = (Инд = СтрокиПоКоличеству.ВГраница());
				Разделитель = ?(ЭтоПоследняяСтрока, " и ",  ", ");
				СтрокаПоКоличеству = СтрокиПоКоличеству[Инд];
				СписокСтраниц = СписокСтраниц + ?(ПустаяСтрока(СписокСтраниц), "", Разделитель) + СтрокаПоКоличеству.СтраницаРаздела21;
			КонецЦикла;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.1 на страницах " + СписокСтраниц + " совпадает количество игровых полей на игровом столе!", "Раздел21", "П000210001003", ИндексПервогоЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКоличестваИгровыхПолей Из ТаблицаКоличестваИгровыхПолей Цикл
		КоличествоИгровыхПолей = СтрокаКоличестваИгровыхПолей.ИгровыеПоля;
		Если КоличествоИгровыхПолей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборРаздела31 = Новый Структура("ИгровыеПоля, СтраницаРаздела21", КоличествоИгровыхПолей, 0);
		СтрокиПоКоличеству = ТаблицаПроверкиПоИгровымПолям.НайтиСтроки(ОтборРаздела31);
		Если СтрокиПоКоличеству.Количество() > 1 Тогда
			ИндексПервогоЛиста = СтрокиПоКоличеству[0].СтраницаРаздела31;
			СписокСтраниц = "";
			Для Инд = 0 По СтрокиПоКоличеству.ВГраница() Цикл
				ЭтоПоследняяСтрока = (Инд = СтрокиПоКоличеству.ВГраница());
				Разделитель = ?(ЭтоПоследняяСтрока, " и ",  ", ");
				СтрокаПоКоличеству = СтрокиПоКоличеству[Инд];
				СписокСтраниц = СписокСтраниц + ?(ПустаяСтрока(СписокСтраниц), "", Разделитель) + СтрокаПоКоличеству.СтраницаРаздела31;
			КонецЦикла;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1 на страницах " + СписокСтраниц + " совпадает количество игровых полей на игровом столе!", "Раздел31", "П000310001003", ИндексПервогоЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПроверкиПоИгровымПолям.Свернуть("ИгровыеПоля", "СтраницаРаздела21, СтраницаРаздела31");
	Для Каждого СтрокаПроверкиИгровыхПолей Из ТаблицаПроверкиПоИгровымПолям Цикл
		КоличествоИгровыхПолей = СтрокаПроверкиИгровыхПолей.ИгровыеПоля;
		Если КоличествоИгровыхПолей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПроверкиИгровыхПолей.СтраницаРаздела21 = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.1 нет листов соответствующих количеству игровых полей " + КоличествоИгровыхПолей + ", указанному в разделе 3.1!", "Раздел21", "П000210001003", 1);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаПроверкиИгровыхПолей Из ТаблицаПроверкиПоИгровымПолям Цикл
		КоличествоИгровыхПолей = СтрокаПроверкиИгровыхПолей.ИгровыеПоля;
		Если КоличествоИгровыхПолей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПроверкиИгровыхПолей.СтраницаРаздела31 = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1 нет листов соответствующих количеству игровых полей " + КоличествоИгровыхПолей + ", указанному в разделе 2.1!", "Раздел31", "П000310001003", 1);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("СтруктураXML501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел)
	
	МассивДобавленныхСтрок = Новый Массив();
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если МассивДобавленныхСтрок.Найти(Стр) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ЛистыМногостраничногоРаздела = Неопределено;
				Если Не ПустаяСтрока(Стр.Раздел) И мДанныеОтчета.Свойство(Стр.Раздел, ЛистыМногостраничногоРаздела) Тогда
					Для Каждого Лист Из ЛистыМногостраничногоРаздела Цикл
						УзелМногостраничногоРаздела = СкопироватьУзел(Узел, Стр);
						МассивДобавленныхСтрок.Добавить(УзелМногостраничногоРаздела);
						ДанныеЛиста = Лист.Данные[0].Значение;
						Для Каждого УзелПоказателя Из УзелМногостраничногоРаздела.Строки Цикл
							Если НЕ ПустаяСтрока(УзелПоказателя.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, УзелПоказателя.Ключ) Тогда
								ВывестиПоказательВXML(УзелПоказателя, ДанныеЛиста[УзелПоказателя.Ключ]);
							Иначе
								Стр.Значение = "";
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				Иначе
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				КонецЕсли;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
		
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			  
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

            ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		  ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН = СокрЛП(СтруктураДанныхТитульный.ИНН) + ПоказателиТаблПоле["ИНН" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН = Сред(СтруктураДанныхТитульный.ИНН, 3);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП = СокрЛП(СтруктураДанныхТитульный.КПП) + ПоказателиТаблПоле["КПП" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП" + Ном);
			КонецЦикла;
			
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;	
			
		ИначеЕсли ИмяПоказателя = "НалоговыйПериод1" Тогда
			СтруктураДанныхТитульный.Вставить("НалоговыйПериод");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.НалоговыйПериод = СокрЛП(СтруктураДанныхТитульный.НалоговыйПериод) + ПоказателиТаблПоле["НалоговыйПериод" + Ном];
				СтруктураДанныхТитульный.Удалить("НалоговыйПериод" + Ном);
			КонецЦикла;
			
		ИначеЕсли ИмяПоказателя = "ОтчетныйГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетныйГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетныйГод = СокрЛП(СтруктураДанныхТитульный.ОтчетныйГод) + ПоказателиТаблПоле["ОтчетныйГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетныйГод" + Ном);
			КонецЦикла;	
			
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
			
		ИначеЕсли ИмяПоказателя = "МестоНахожденияУчета1" Тогда
			СтруктураДанныхТитульный.Вставить("МестоНахожденияУчета");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.МестоНахожденияУчета = СокрЛП(СтруктураДанныхТитульный.МестоНахожденияУчета) + ПоказателиТаблПоле["МестоНахожденияУчета" + Ном];
				СтруктураДанныхТитульный.Удалить("МестоНахожденияУчета" + Ном);
			КонецЦикла;	
			
		ИначеЕсли ИмяПоказателя = "КоличествоЛистовКопий1" Тогда
			СтруктураДанныхТитульный.Вставить("КоличествоЛистовКопий");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.КоличествоЛистовКопий = СокрЛП(СтруктураДанныхТитульный.КоличествоЛистовКопий) + ПоказателиТаблПоле["КоличествоЛистовКопий" + Ном];
				СтруктураДанныхТитульный.Удалить("КоличествоЛистовКопий" + Ном);
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);		
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОКАТО(Форма, Знач ОКАТО)
	
	ДополнятьСправа = 1;
	
	ОКАТО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКАТО, 11, "0", ДополнятьСправа);
	
	Форма.СтруктураДанныхРаздел1.Вставить("П000100002003", ОКАТО);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ СООТНООШЕНИЙ В ДЕКЛАРАЦИИ

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
			
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда 
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда 
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверкаКС_1_1(СтруктураРезультата);
	ПроверкаКС_1_2(СтруктураРезультата);
	ПроверкаКС_1_3(СтруктураРезультата);
	ПроверкаКС_1_4(СтруктураРезультата);
	ПроверкаКС_1_5(СтруктураРезультата);
	ПроверкаКС_1_6(СтруктураРезультата);
	ПроверкаКС_1_7(СтруктураРезультата);
	ПроверкаКС_1_8(СтруктураРезультата);
	ПроверкаКС_1_9(СтруктураРезультата);
	ПроверкаКС_1_10(СтруктураРезультата);
	ПроверкаКС_1_11(СтруктураРезультата);
	ПроверкаКС_1_12(СтруктураРезультата);
	ПроверкаКС_1_13(СтруктураРезультата);
	ПроверкаКС_1_14(СтруктураРезультата);
	ПроверкаКС_1_15(СтруктураРезультата);
	ПроверкаКС_1_16(СтруктураРезультата);
	ПроверкаКС_1_17(СтруктураРезультата);
	ПроверкаКС_1_18(СтруктураРезультата);
	ПроверкаКС_1_19(СтруктураРезультата);
	ПроверкаКС_1_20(СтруктураРезультата);
	ПроверкаКС_1_21(СтруктураРезультата);
	ПроверкаКС_1_22(СтруктураРезультата);
	ПроверкаКС_1_23(СтруктураРезультата);
	ПроверкаКС_1_24(СтруктураРезультата);
	ПроверкаКС_1_25(СтруктураРезультата);
	ПроверкаКС_1_26(СтруктураРезультата);
	ПроверкаКС_1_27(СтруктураРезультата);
	ПроверкаКС_1_28(СтруктураРезультата);
	ПроверкаКС_1_29(СтруктураРезультата);
	ПроверкаКС_1_30(СтруктураРезультата);
	ПроверкаКС_1_31(СтруктураРезультата);
	ПроверкаКС_1_32(СтруктураРезультата);
	ПроверкаКС_1_33(СтруктураРезультата);
	ПроверкаКС_1_34(СтруктураРезультата);
	ПроверкаКС_1_35(СтруктураРезультата);
	ПроверкаКС_1_36(СтруктураРезультата);
	ПроверкаКС_1_37(СтруктураРезультата);
	ПроверкаКС_1_38(СтруктураРезультата);
	ПроверкаКС_1_39(СтруктураРезультата);
	ПроверкаКС_1_40(СтруктураРезультата);
	ПроверкаКС_1_41(СтруктураРезультата);
	
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
		ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы", 
		ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор));
	
	Возврат СтруктураРезультата;

КонецФункции

&НаСервере
Процедура ПроверкаКС_1_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела1 = мДанныеОтчета.Раздел1;
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Сумма налога, подлежащая уплате в бюджет (строка 030 Раздела 1) должна быть равна сумме значений по строкам 070, 080, 090, 100, 110, 120 графы 4 Раздела 2";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
		
	// Зарегистрируем левую часть соотношения.
	ИмяР1Ст030 = "П000100003003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела1[ИмяР1Ст030]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР1Ст030 = "Сумма налога, подлежащая уплате в бюджет";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР1Ст030, НаименованиеР1Ст030, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел1", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст070 = "П000200007004";
	ЗначениеР2Ст070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст070]);
	ЗначениеР2Ст070Стр = Формат(ЗначениеР2Ст070, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст070 = "Игровые столы, всего";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст070, НаименованиеР2Ст070, ЗначениеР2Ст070, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст080 = "П000200008004";
	ЗначениеР2Ст080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст080]);
	ЗначениеР2Ст080Стр = Формат(ЗначениеР2Ст080, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст080 = "Игровые автоматы";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст080, НаименованиеР2Ст080, ЗначениеР2Ст080, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст090 = "П000200009004";
	ЗначениеР2Ст090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст090]);
	ЗначениеР2Ст090Стр = Формат(ЗначениеР2Ст090, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст090 = "Процессинговые центры тотализаторов";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст090, НаименованиеР2Ст090, ЗначениеР2Ст090, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст100 = "П000200010004";
	ЗначениеР2Ст100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст100]);
	ЗначениеР2Ст100Стр = Формат(ЗначениеР2Ст100, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст100 = "Процессинговые центры букмекерских контор";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст100, НаименованиеР2Ст100, ЗначениеР2Ст100, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст110 = "П000200011004";
	ЗначениеР2Ст110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст110]);
	ЗначениеР2Ст110Стр = Формат(ЗначениеР2Ст110, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст110 = "Пункты приема ставок тотализаторов";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст110, НаименованиеР2Ст110, ЗначениеР2Ст110, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст120 = "П000200012004";
	ЗначениеР2Ст120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст120]);
	ЗначениеР2Ст120Стр = Формат(ЗначениеР2Ст120, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст120 = "Пункты приема ставок букмекерских контор";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст120, НаименованиеР2Ст120, ЗначениеР2Ст120, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст070 + ЗначениеР2Ст080 + ЗначениеР2Ст090 + ЗначениеР2Ст100 + ЗначениеР2Ст110 + ЗначениеР2Ст120;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст070Стр + " + " + ЗначениеР2Ст080Стр + " + " + ЗначениеР2Ст090Стр + " + "
	+ ЗначениеР2Ст100Стр + " + " + ЗначениеР2Ст110Стр + " + " + ЗначениеР2Ст120Стр + " Итог [" + ПраваяЧасть + "]";
	Описание = "Неверно исчислена сумма налога, подлежащая уплате в бюджет (возможна арифметическая ошибка)";
	Нарушение = "ст. 370 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина по строке 020 графы 3 Раздела 2 должна быть равна сумме значений по строке 040 всех Разделов 2.1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);	
		
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст020 = "П000200002003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст020]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст020 = "Количество объектов, подлежащих налогообложению";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст020, НаименованиеР2Ст020, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	
	// Зарегистрируем правую часть соотношения.
	ПраваяЧасть = 0;
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
						
		НомерСтраницы = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		ИмяР21Ст040 = "П000210004003";
		ЗначениеР21Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст040]);
		ЗначениеР21Ст040Стр = Формат(ЗначениеР21Ст040, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст040 = "Количество игровых столов, имеющих количество полей, указанное в стр.010, подлежащих налогообложению";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст040, НаименованиеР21Ст040, ЗначениеР21Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР21Ст040;
		Расшифровка = Расшифровка + ЗначениеР21Ст040Стр + " + ";
		
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела1 = мДанныеОтчета.Раздел1;
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина по строке 020 графы 3 Раздела 2 должна быть равна сумме значений по строкам 030, 040, 050, 060 графы 3 Раздела 2";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
		
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст020 = "П000200002003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст020]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст020 = "Количество объектов, подлежащих налогообложению";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст020, НаименованиеР2Ст020, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст030 = "П000200003003";
	ЗначениеР2Ст030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст030]);
	ЗначениеР2Ст030Стр = Формат(ЗначениеР2Ст030, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст030 = "в т.ч. по ставке налога, установленной в соответствии с п.1 ст.369 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст030, НаименованиеР2Ст030, ЗначениеР2Ст030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст040 = "П000200004003";
	ЗначениеР2Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст040]);
	ЗначениеР2Ст040Стр = Формат(ЗначениеР2Ст040, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст040 = "Количество объектов, подлежащих налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст. 370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст040, НаименованиеР2Ст040, ЗначениеР2Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст050 = "П000200005003";
	ЗначениеР2Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст050]);
	ЗначениеР2Ст050Стр = Формат(ЗначениеР2Ст050, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст050 = "по ставке налога, установленной в соответствии с п.1 ст. 369 НК с учетом аб.2 п.1 ст. 370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст050, НаименованиеР2Ст050, ЗначениеР2Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст060 = "П000200006003";
	ЗначениеР2Ст060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст060]);
	ЗначениеР2Ст060Стр = Формат(ЗначениеР2Ст060, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст060 = "по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК с учетом аб.2 п.1 ст.370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст060, НаименованиеР2Ст060, ЗначениеР2Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст030 + ЗначениеР2Ст040 + ЗначениеР2Ст050 + ЗначениеР2Ст060;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст030Стр + " + " + ЗначениеР2Ст040Стр + " + " + ЗначениеР2Ст050Стр + " + "
	+ ЗначениеР2Ст060Стр + " Итог [" + ПраваяЧасть + "]";
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Значения граф 4-8 по строке 020 Раздела 2 должны быть равны сумме строк 030 и 040 Раздела 2 по соответствующим графам";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// с 4 графы по 8
	Для Графа = 4 По 8 Цикл 
		// Зарегистрируем левую часть соотношения.
		ИмяР2Ст020 = "П00020000200" + Графа;
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст020]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР2Ст020 = "Количество объектов, подлежащих налогообложению, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст020, НаименованиеР2Ст020, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР2Ст030 = "П00020000300" + Графа;
		ЗначениеР2Ст030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст030]);
		ЗначениеР2Ст030Стр = Формат(ЗначениеР2Ст030, "ЧРД=.;ЧН=0");
		НаименованиеР2Ст030 = "в т.ч. по ставке налога, установленной в соответствии с п.1 ст.369 НК, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст030, НаименованиеР2Ст030, ЗначениеР2Ст030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ИмяР2Ст040 = "П00020000400" + Графа;
		ЗначениеР2Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст040]);
		ЗначениеР2Ст040Стр = Формат(ЗначениеР2Ст040, "ЧРД=.;ЧН=0");
		НаименованиеР2Ст040 = "Количество объектов, подлежащих налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст040, НаименованиеР2Ст040, ЗначениеР2Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР2Ст030 + ЗначениеР2Ст040;
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст030Стр + " + " + ЗначениеР2Ст040Стр + " Итог [" + ПраваяЧастьСтр + "]";
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значения граф 4-8 по строке 020 Раздела 2 должны быть равны сумме строк 010, 020, 040 Раздела 3 по соответствующим графам";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// с 4 графы по 8
	Для Графа = 4 По 8 Цикл 
		// Зарегистрируем левую часть соотношения.
		ИмяР2Ст020 = "П00020000200" + Графа;
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст020]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР2Ст020 = "Количество объектов, подлежащих налогообложению, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст020, НаименованиеР2Ст020, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР3Ст010 = "П00030000100" + Графа;
		ЗначениеР3Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010]);
		ЗначениеР3Ст010Стр = Формат(ЗначениеР3Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР3Ст010 = "Количество объектов налогообложения, зарегистрированных на начало налогового периода, графа № "
			+ Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010, НаименованиеР3Ст010, ЗначениеР3Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ИмяР3Ст020 = "П00030000200" + Графа;
		ЗначениеР3Ст020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст020]);
		ЗначениеР3Ст020Стр = Формат(ЗначениеР3Ст020, "ЧРД=.;ЧН=0");
		НаименованиеР3Ст020 = "Количество объектов налогообложения, установленных до 15 числа , графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст020, НаименованиеР3Ст020, ЗначениеР3Ст020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ИмяР3Ст040 = "П00030000400" + Графа;
		ЗначениеР3Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст040]);
		ЗначениеР3Ст040Стр = Формат(ЗначениеР3Ст040, "ЧРД=.;ЧН=0");
		НаименованиеР3Ст040 = "Количество объектов налогообложения, установленных после 15 числа, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст040, НаименованиеР3Ст040, ЗначениеР3Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР3Ст010 + ЗначениеР3Ст020 + ЗначениеР3Ст040;
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР3Ст010Стр + " + " + ЗначениеР3Ст020Стр + " + " + ЗначениеР3Ст040Стр + " Итог ["
		+ ПраваяЧастьСтр + "]";
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина по строке 030 графы 3 Раздела 2 должна быть равна сумме значений по строке 050 всех Разделов 2.1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст030 = "П000200003003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст030]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст030 = "Количество объектов, подлежащих налогообложению по ставке налога, установленной в соответствии с п.1 ст.369 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст030, НаименованиеР2Ст030, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	
	// Зарегистрируем правую часть соотношения.
	ПраваяЧасть = 0;
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницы = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		ИмяР21Ст050 = "П000210005003";
		ЗначениеР21Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст050]);
		ЗначениеР21Ст050Стр = Формат(ЗначениеР21Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст050 = "Количество игровых столов, подлежащих налогообложению по ставке налога, установленной в соответствии с п.1 ст.369 НК";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст050, НаименованиеР21Ст050, ЗначениеР21Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР21Ст050;
		Расшифровка = Расшифровка + ЗначениеР21Ст050Стр + " + ";
		
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значения граф 4-8 по строке 030 Раздела 2 должны быть равны значению строки 020 Раздела 2 за минусом суммы строк 040 и 050 Раздела 3 по соответствующим графам";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// с 4 графы по 8
	Для Графа = 4 По 8 Цикл 
		// Зарегистрируем левую часть соотношения.
		ИмяР2Ст030 = "П00020000300" + Графа;
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст030]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР2Ст030 = "Количество объектов, подлежащих налогообложению по ставке налога, установленной в соответствии с п.1 ст.369 НК, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст030, НаименованиеР2Ст030, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР2Ст020 = "П00020000200" + Графа;
		ЗначениеР2Ст020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст020]);
		ЗначениеР2Ст020Стр = Формат(ЗначениеР2Ст020, "ЧРД=.;ЧН=0");
		НаименованиеР2Ст020 = "Количество объектов, подлежащих налогообложению, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст020, НаименованиеР2Ст020, ЗначениеР2Ст020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ИмяР3Ст040 = "П00030000400" + Графа;
		ЗначениеР3Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст040]);
		ЗначениеР3Ст040Стр = Формат(ЗначениеР3Ст040, "ЧРД=.;ЧН=0");
		НаименованиеР3Ст040 = "Количество объектов налогообложения, установленных после 15 числа, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст040, НаименованиеР3Ст040, ЗначениеР3Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ИмяР3Ст050 = "П00030000500" + Графа;
		ЗначениеР3Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст050]);
		ЗначениеР3Ст050Стр = Формат(ЗначениеР3Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР3Ст050 = "Количество объектов налогообложения, выбывших до 15 числа, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст050, НаименованиеР3Ст050, ЗначениеР3Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР2Ст020 - (ЗначениеР3Ст040 + ЗначениеР3Ст050);
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст020Стр + " - (" + ЗначениеР3Ст040Стр + " + " + ЗначениеР3Ст050Стр
		+ ") Итог [" + ПраваяЧастьСтр + "]";
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина по строке 040 графы 3 Раздела 2 должна быть равна сумме значений по строке 060 всех Разделов 2.1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст040 = "П000200004003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст040]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст040 = "Количество объектов, подлежащих налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст. 370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст040, НаименованиеР2Ст040, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	
	// Зарегистрируем правую часть соотношения.
	ПраваяЧасть = 0;
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницы = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		ИмяР21Ст060 = "П000210006003";
		ЗначениеР21Ст060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст060]);
		ЗначениеР21Ст060Стр = Формат(ЗначениеР21Ст060, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст060 = "Количество игровых столов, подлежащих налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст060, НаименованиеР21Ст060, ЗначениеР21Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР21Ст060;
		Расшифровка = Расшифровка + ЗначениеР21Ст060Стр + " + ";
		
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значения граф 4-8 по строке 040 Раздела 2 должны быть равны сумме строк 040 и 050 Раздела 3 по соответствующим графам";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// с 4 графы по 8
	Для Графа = 4 По 8 Цикл 
		
		// Зарегистрируем левую часть соотношения.
		ИмяР2Ст040 = "П00020000400" + Графа;
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст040]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР2Ст040 = "Количество объектов, подлежащих налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст. 370 НК, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст040, НаименованиеР2Ст040, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР3Ст040 = "П00030000400" + Графа;
		ЗначениеР3Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст040]);
		ЗначениеР3Ст040Стр = Формат(ЗначениеР3Ст040, "ЧРД=.;ЧН=0");
		НаименованиеР3Ст040 = "Количество объектов налогообложения, установленных после 15 числа, графа № " + Графа;;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст040, НаименованиеР3Ст040, ЗначениеР3Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ИмяР3Ст050 = "П00030000500" + Графа;
		ЗначениеР3Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст050]);
		ЗначениеР3Ст050Стр = Формат(ЗначениеР3Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР3Ст050 = "Количество объектов налогообложения, выбывших до 15 числа, графа № " + Графа;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст050, НаименованиеР3Ст050, ЗначениеР3Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР3Ст040 + ЗначениеР3Ст050;
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР3Ст040Стр + " + " + ЗначениеР3Ст050Стр + " Итог [" + ПраваяЧастьСтр + "]";
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина по строке 050 графы 3 Раздела 2 должна быть равна сумме значений по строке 070 всех Разделов 2.1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст050 = "П000200005003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст050]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст050 = "Количество объектов, подлежащих налогообложению по ставке налога, установленной в соответствии с п.1 ст. 369 НК с учетом аб.2 п.1 ст. 370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст050, НаименованиеР2Ст050, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	
	// Зарегистрируем правую часть соотношения.
	ПраваяЧасть = 0;
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницы = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		ИмяР21Ст070 = "П000210007003";
		ЗначениеР21Ст070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст070]);
		ЗначениеР21Ст070Стр = Формат(ЗначениеР21Ст070, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст070 = "Количество игровых столов, подлежащих налогообложению по ставке налога, установленной в соответствии с п.1 ст.369 НК с учетом аб.2 п.1 ст.370 НК";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст070, НаименованиеР21Ст070, ЗначениеР21Ст070, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР21Ст070;
		Расшифровка = Расшифровка + ЗначениеР21Ст070Стр + " + ";
		
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина по строке 060 графы 3 Раздела 2 должна быть равна сумме значений по строке 080 всех Разделов 2.1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст060 = "П000200006003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст060]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст060 = "Количество объектов, подлежащих налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК с учетом аб.2 п.1 ст.370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст060, НаименованиеР2Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	
	// Зарегистрируем правую часть соотношения.
	ПраваяЧасть = 0;
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницы = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		ИмяР21Ст080 = "П000210008003";
		ЗначениеР21Ст080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст080]);
		ЗначениеР21Ст080Стр = Формат(ЗначениеР21Ст080, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст080 = "Количество игровых столов, подлежащих налогообложениюпо по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК с учетом аб.2 п.1 ст.370 НК";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст080, НаименованиеР21Ст080, ЗначениеР21Ст080, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР21Ст080;
		Расшифровка = Расшифровка + ЗначениеР21Ст080Стр + " + ";
		
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_12(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина по строке 070 графы 4 Раздела 2 должна быть равна сумме значений по строке 090 всех Разделов 2.1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст070 = "П000200007004";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст070]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст070 = "Игровые столы, всего";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст070, НаименованиеР2Ст070, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	
	// Зарегистрируем правую часть соотношения.
	ПраваяЧасть = 0;
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницы = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		ИмяР21Ст090 = "П000210009003";
		ЗначениеР21Ст090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст090]);
		ЗначениеР21Ст090Стр = Формат(ЗначениеР21Ст090, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст090 = "Сумма исчисленного налога на игорный бизнес";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст090, НаименованиеР21Ст090, ЗначениеР21Ст090, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР21Ст090;
		Расшифровка = Расшифровка + ЗначениеР21Ст090Стр + " + ";
		
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Описание = "Неправильно исчислена сумма налога";
	Нарушение = "ст. 370 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_13(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина строки 080 графы 4 Раздела 2 должна быть равна результату суммирования произведения значения строки 080 графы 3 Раздела 2 на значение строки 030 графы 4 Раздела 2 и половины произведения значения строки 080 графы 3 Раздела 2 на значение строки 040 графы 4 Раздела 2";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст080Гр4 = "П000200008004";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст080Гр4]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст080Гр4 = "Игровые автоматы. Сумма исчисленного налога";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст080Гр4, НаименованиеР2Ст080Гр4, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст080Гр3 = "П000200008003";
	ЗначениеР2Ст080Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст080Гр3]);
	ЗначениеР2Ст080Гр3Стр = Формат(ЗначениеР2Ст080Гр3, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст080Гр3 = "Игровые автоматы. Ставка налога";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст080Гр3, НаименованиеР2Ст080Гр3, ЗначениеР2Ст080Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст030Гр4 = "П000200003004";
	ЗначениеР2Ст030Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст030Гр4]);
	ЗначениеР2Ст030Гр4Стр = Формат(ЗначениеР2Ст030Гр4, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст030Гр4 = "Игровые автоматы, подлежащие налогообложению по ставке налога, установленной в соответствии с п.1 ст. 369 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст030Гр4, НаименованиеР2Ст030Гр4, ЗначениеР2Ст030Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст040Гр4 = "П000200004004";
	ЗначениеР2Ст040Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст040Гр4]);
	ЗначениеР2Ст040Гр4Стр = Формат(ЗначениеР2Ст040Гр4, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст040Гр4 = "Игровые автоматы, подлежащие налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст040Гр4, НаименованиеР2Ст040Гр4, ЗначениеР2Ст040Гр4, "", 
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст080Гр3 * ЗначениеР2Ст030Гр4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 1/2 * ЗначениеР2Ст080Гр3 
	* ЗначениеР2Ст040Гр4);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст080Гр3 + " * " + ЗначениеР2Ст030Гр4 + " + 1/2 * " + ЗначениеР2Ст080Гр3
	+ " * " + ЗначениеР2Ст040Гр4 + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно исчислена сумма налога";
	Нарушение = "ст. 370 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина строки 090 графы 4 Раздела 2 должна быть равна результату суммирования произведения значения строки 090 графы 3 Раздела 2 на значение строки 030 графы 5 Раздела 2 и половины произведения значения строки 090 графы 3 Раздела 2 на значение строки 040 графы 5 Раздела 2";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст090Гр4 = "П000200009004";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст090Гр4]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст090Гр4 = "Процессинговые центры тотализаторов. Сумма исчисленного налога на игорный бизнес";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст090Гр4, НаименованиеР2Ст090Гр4, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст090Гр3 = "П000200009003";
	ЗначениеР2Ст090Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст090Гр3]);
	ЗначениеР2Ст090Гр3Стр = Формат(ЗначениеР2Ст090Гр3, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст090Гр3 = "Процессинговые центры тотализаторов. Ставка налога";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст090Гр3, НаименованиеР2Ст090Гр3, ЗначениеР2Ст090Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст030Гр5 = "П000200003005";
	ЗначениеР2Ст030Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст030Гр5]);
	ЗначениеР2Ст030Гр5Стр = Формат(ЗначениеР2Ст030Гр5, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст030Гр5 = "Процессинговые центры тотализаторов, подлежащие налогообложению по ставке налога, установленной в соответствии с п.1 ст. 369 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст030Гр5, НаименованиеР2Ст030Гр5, ЗначениеР2Ст030Гр5, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст040Гр5 = "П000200004005";
	ЗначениеР2Ст040Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст040Гр5]);
	ЗначениеР2Ст040Гр5Стр = Формат(ЗначениеР2Ст040Гр5, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст040Гр5 = "Процессинговые центры тотализаторов, подлежащие налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст040Гр5, НаименованиеР2Ст040Гр5, ЗначениеР2Ст040Гр5, "", 
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст090Гр3 * ЗначениеР2Ст030Гр5 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 1/2 * ЗначениеР2Ст090Гр3
	* ЗначениеР2Ст040Гр5);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст090Гр3Стр + " * " + ЗначениеР2Ст030Гр5Стр + " + 1/2 * " + ЗначениеР2Ст090Гр3
	+ " * " + ЗначениеР2Ст040Гр5Стр + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно исчислена сумма налога";
	Нарушение = "ст. 370 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина строки 100 графы 4 Раздела 2 должна быть равна результату суммирования произведения значения строки 100 графы 3 Раздела 2 на значение строки 030 графы 6 Раздела 2 и половины произведения значения строки 100 графы 3 Раздела 2 на значение строки 040 графы 6 Раздела 2";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст100Гр4 = "П000200010004";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст100Гр4]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст100Гр4 = "Процессинговые центры букмекерских контор. Сумма исчисленного налога на игорный бизнес";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст100Гр4, НаименованиеР2Ст100Гр4, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст100Гр3 = "П000200010003";
	ЗначениеР2Ст100Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст100Гр3]);
	ЗначениеР2Ст100Гр3Стр = Формат(ЗначениеР2Ст100Гр3, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст100Гр3 = "Процессинговые центры букмекерских контор. Ставка налога";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст100Гр3, НаименованиеР2Ст100Гр3, ЗначениеР2Ст100Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст030Гр6 = "П000200003006";
	ЗначениеР2Ст030Гр6 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст030Гр6]);
	ЗначениеР2Ст030Гр6Стр = Формат(ЗначениеР2Ст030Гр6, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст030Гр6 = "Процессинговые центры букмекерских контор, подлежащие налогообложению по ставке налога, установленной в соответствии с п.1 ст. 369 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст030Гр6, НаименованиеР2Ст030Гр6, ЗначениеР2Ст030Гр6, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст040Гр6 = "П000200004006";
	ЗначениеР2Ст040Гр6 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст040Гр6]);
	ЗначениеР2Ст040Гр6Стр = Формат(ЗначениеР2Ст040Гр6, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст040Гр6 = "Процессинговые центры букмекерских контор, подлежащие налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст040Гр6, НаименованиеР2Ст040Гр6, ЗначениеР2Ст040Гр6, "", 
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст100Гр3 * ЗначениеР2Ст030Гр6 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 1/2 * ЗначениеР2Ст100Гр3
	* ЗначениеР2Ст040Гр6);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст100Гр3Стр + " * " + ЗначениеР2Ст030Гр6Стр + " + 1/2 * " + ЗначениеР2Ст100Гр3
	+ " * " + ЗначениеР2Ст040Гр6Стр + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно исчислена сумма налога";
	Нарушение = "ст. 370 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина строки 110 графы 4 Раздела 2 должна быть равна результату суммирования произведения значения строки 110 графы 3 Раздела 2 на значение строки 030 графы 7 Раздела 2 и половины произведения значения строки 110 графы 3 Раздела 2 на значение строки 040 графы 7 Раздела 2";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст110Гр4 = "П000200011004";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст110Гр4]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст110Гр4 = "Пункты приема ставок тотализаторов. Сумма исчисленного налога на игорный бизнес";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст110Гр4, НаименованиеР2Ст110Гр4, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст110Гр3 = "П000200011003";
	ЗначениеР2Ст110Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст110Гр3]);
	ЗначениеР2Ст110Гр3Стр = Формат(ЗначениеР2Ст110Гр3, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст110Гр3 = "Пункты приема ставок тотализаторов. Ставка налога";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст110Гр3, НаименованиеР2Ст110Гр3, ЗначениеР2Ст110Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст030Гр7 = "П000200003007";
	ЗначениеР2Ст030Гр7 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст030Гр7]);
	ЗначениеР2Ст030Гр7Стр = Формат(ЗначениеР2Ст030Гр7, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст030Гр7 = "Пункты приема ставок тотализаторов, подлежащие налогообложению по ставке налога, установленной в соответствии с п.1 ст. 369 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст030Гр7, НаименованиеР2Ст030Гр7, ЗначениеР2Ст030Гр7, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст040Гр7 = "П000200004007";
	ЗначениеР2Ст040Гр7 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст040Гр7]);
	ЗначениеР2Ст040Гр7Стр = Формат(ЗначениеР2Ст040Гр7, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст040Гр7 = "Пункты приема ставок тотализаторов, подлежащие налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст040Гр7, НаименованиеР2Ст040Гр7, ЗначениеР2Ст040Гр7, "", 
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст110Гр3 * ЗначениеР2Ст030Гр7 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 1/2 * ЗначениеР2Ст110Гр3
	* ЗначениеР2Ст040Гр7);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст110Гр3Стр + " * " + ЗначениеР2Ст030Гр7Стр + " + 1/2 * " + ЗначениеР2Ст110Гр3
	+ " * " + ЗначениеР2Ст040Гр7Стр + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно исчислена сумма налога";
	Нарушение = "ст. 370 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела2 = мДанныеОтчета.Раздел2;
	
	ОписаниеКС = "Величина строки 120 графы 4 Раздела 2 должна быть равна результату суммирования произведения значения строки 120 графы 3 Раздела 2 на значение строки 030 графы 8 Раздела 2 и половины произведения значения строки 120 графы 3 Раздела 2 на значение строки 040 графы 8 Раздела 2";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР2Ст120Гр4 = "П000200012004";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст120Гр4]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст120Гр4 = "Пункты приема ставок букмекерских контор. Сумма исчисленного налога на игорный бизнес";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст120Гр4, НаименованиеР2Ст120Гр4, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР2Ст120Гр3 = "П000200012003";
	ЗначениеР2Ст120Гр3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст120Гр3]);
	ЗначениеР2Ст120Гр3Стр = Формат(ЗначениеР2Ст120Гр3, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст120Гр3 = "Пункты приема ставок букмекерских контор. Ставка налога";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст120Гр3, НаименованиеР2Ст120Гр3, ЗначениеР2Ст120Гр3, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст030Гр8 = "П000200003008";
	ЗначениеР2Ст030Гр8 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст030Гр8]);
	ЗначениеР2Ст030Гр8Стр = Формат(ЗначениеР2Ст030Гр8, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст030Гр8 = "Пункты приема ставок букмекерских контор, подлежащие налогообложению по ставке налога, установленной в соответствии с п.1 ст. 369 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст030Гр8, НаименованиеР2Ст030Гр8, ЗначениеР2Ст030Гр8, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР2Ст040Гр8 = "П000200004008";
	ЗначениеР2Ст040Гр8 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела2[ИмяР2Ст040Гр8]);
	ЗначениеР2Ст040Гр8Стр = Формат(ЗначениеР2Ст040Гр8, "ЧРД=.;ЧН=0");
	НаименованиеР2Ст040Гр8 = "Пункты приема ставок букмекерских контор, подлежащие налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР2Ст040Гр8, НаименованиеР2Ст040Гр8, ЗначениеР2Ст040Гр8, "", 
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР2Ст120Гр3 * ЗначениеР2Ст030Гр8 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 1/2 * ЗначениеР2Ст120Гр3
	* ЗначениеР2Ст040Гр8);
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР2Ст120Гр3Стр + " * " + ЗначениеР2Ст030Гр8Стр + " + 1/2 * " + ЗначениеР2Ст120Гр3
	+ " * " + ЗначениеР2Ст040Гр8Стр + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно исчислена сумма налога";
	Нарушение = "ст. 370 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_18(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницы = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		ОписаниеКС = "Значение размера ставки налога на игорный бизнес (строка  030 Раздела 2.1) должна быть равна произведению значения строки 020 Раздела 2.1 на значение строки 010 Раздела 2.1, если значение строки 010 Раздела 2.1 больше 1";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ИмяР21Ст030 = "П000210003003";
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст030]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст030 = "Размер ставки налога на игорный бизнес в месяц, установленный в соответствии с п.1 ст.369 НК с учетом аб.2 п.1 ст.370 НК";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст030, НаименованиеР21Ст030, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР21Ст020 = "П000210002003";
		ЗначениеР21Ст020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст020]);
		ЗначениеР21Ст020Стр = Формат(ЗначениеР21Ст020, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст020 = "Размер ставки налога на игорный бизнес в месяц, установленный законом субъекта РФ в соответствии с п.1 ст.369 НК";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст020, НаименованиеР21Ст020, ЗначениеР21Ст020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ИмяР21Ст010 = "П000210001003";
		ЗначениеР21Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст010]);
		ЗначениеР21Ст010Стр = Формат(ЗначениеР21Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст010 = "Количество имеющихся игровых полей на игровом столе";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст010, НаименованиеР21Ст010, ЗначениеР21Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеР21Ст020 * ЗначениеР21Ст010);
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР21Ст020Стр + " * " + ЗначениеР21Ст010Стр + " Итог [" + ПраваяЧастьСтр 
		+ "], когда " + ЗначениеР21Ст010Стр + " > 1";
		
		Если НЕ (ЗначениеР21Ст010 > 1) Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		ИначеЕсли ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Описание = "Неправильно применена налоговая ставка";
		Нарушение = "п. 1 ст. 370 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницыР21 = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		// Вычислим условие выполнения проверки КС
		ИмяР21Ст010 = "П000210001003";
		ЗначениеР21Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст010]);
		УсловиеПроверкиВыполнено = Ложь;
		Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
			НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
			
			ИмяР31Ст010 = "П000310001003";
			ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
			Если ЗначениеР21Ст010 = ЗначениеР31Ст010 Тогда 
				УсловиеПроверкиВыполнено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ УсловиеПроверкиВыполнено Тогда 
			Прервать;
		КонецЕсли;
		
		ОписаниеКС = "Значение строки 040 Раздела 2.1 должно быть равно сумме значений строк 020, 030, 050 Раздела 3.1, если значение строки 010 Раздела 2.1 равно значению строки 010 Раздела 3.1";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		//
		ЗначениеР21Ст010Стр = Формат(ЗначениеР21Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст010, НаименованиеР21Ст010, ЗначениеР21Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ИмяР21Ст040 = "П000210004003";
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст040]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст040 = "Количество игровых столов, имеющих количество полей, указанное в стр.010, подлежащих налогообложению, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст040, НаименованиеР21Ст040, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР31Ст020 = "П000310002003";
		ЗначениеР31Ст020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст020]);
		ЗначениеР31Ст020Стр = Формат(ЗначениеР31Ст020, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст020 = "Количество игровых столов, зарегистрированных в налоговом органе на начало налогового периода, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст020, НаименованиеР31Ст020, ЗначениеР31Ст020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ИмяР31Ст030 = "П000310003003";
		ЗначениеР31Ст030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст030]);
		ЗначениеР31Ст030Стр = Формат(ЗначениеР31Ст030, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст030 = "Количество игровых столов, зарегистрированных в налоговом органе установлено до 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст030, НаименованиеР31Ст030, ЗначениеР31Ст030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ИмяР31Ст050 = "П000310005003";
		ЗначениеР31Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст050]);
		ЗначениеР31Ст050Стр = Формат(ЗначениеР31Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст050 = "Количество игровых столов, зарегистрированных в налоговом органе установлено после 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст050, НаименованиеР31Ст050, ЗначениеР31Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР31Ст020 + ЗначениеР31Ст030 + ЗначениеР31Ст050;
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР31Ст020Стр + " + " + ЗначениеР31Ст030Стр + "+ " + ЗначениеР31Ст050Стр
		+ " Итог [" + ПраваяЧастьСтр + "], когда " + ЗначениеР21Ст010Стр + " = " + ЗначениеР31Ст010Стр;
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_20(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницыР21 = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		// Вычислим условие выполнения проверки КС
		ИмяР21Ст010 = "П000210001003";
		ЗначениеР21Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст010]);
		УсловиеПроверкиВыполнено = Ложь;
		Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
			НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
			
			ИмяР31Ст010 = "П000310001003";
			ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
			Если (ЗначениеР21Ст010 = ЗначениеР31Ст010) И (ЗначениеР21Ст010 = 1) Тогда 
				УсловиеПроверкиВыполнено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ УсловиеПроверкиВыполнено Тогда 
			Прервать;
		КонецЕсли;
		
		ОписаниеКС = "Значение строки 050 Раздела 2.1 должно быть равно результату вычитания суммы значений по строкам 050 и 060 Раздела 3.1 из значения строки 040 раздела 2.1, если значение строки 010 Раздела 2.1 равно значению строки 010 Раздела 3.1 и равно 1";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		//
		ЗначениеР21Ст010Стр = Формат(ЗначениеР21Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст010, НаименованиеР21Ст010, ЗначениеР21Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ИмяР21Ст050 = "П000210005003";
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст050]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст050 = "Количество игровых столов, подлежащих налогообложению по ставке налога, установленной в соответствии с п.1 ст.369 НК, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст050, НаименованиеР21Ст050, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР21Ст040 = "П000210004003";
		ЗначениеР21Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст040]);
		ЗначениеР21Ст040Стр = Формат(ЗначениеР21Ст040, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст040 = "Количество игровых столов, имеющих количество полей, указанное в стр.010, подлежащих налогообложению, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст040, НаименованиеР21Ст040, ЗначениеР21Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ИмяР31Ст050 = "П000310005003";
		ЗначениеР31Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст050]);
		ЗначениеР31Ст050Стр = Формат(ЗначениеР31Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст050 = "Количество игровых столов, зарегистрированных в налоговом органе установлено после 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст050, НаименованиеР31Ст050, ЗначениеР31Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ИмяР31Ст060 = "П000310006003";
		ЗначениеР31Ст060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст060]);
		ЗначениеР31Ст060Стр = Формат(ЗначениеР31Ст060, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст060 = "Количество игровых столов, зарегистрированных в налоговом органе выбыло до 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст060, НаименованиеР31Ст060, ЗначениеР31Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР21Ст040 - (ЗначениеР31Ст050 + ЗначениеР31Ст060);
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР21Ст040Стр + " - (" + ЗначениеР31Ст050Стр + " + " + ЗначениеР31Ст060Стр
		+ ") Итог [" + ПраваяЧастьСтр + "], когда " + ЗначениеР21Ст010Стр + " = " + ЗначениеР31Ст010Стр + " = 1";
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_21(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницыР21 = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		// Вычислим условие выполнения проверки КС
		ИмяР21Ст010 = "П000210001003";
		ЗначениеР21Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст010]);
		УсловиеПроверкиВыполнено = Ложь;
		Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
			НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
			
			ИмяР31Ст010 = "П000310001003";
			ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
			Если (ЗначениеР21Ст010 = ЗначениеР31Ст010) И (ЗначениеР21Ст010 = 1) Тогда 
				УсловиеПроверкиВыполнено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ УсловиеПроверкиВыполнено Тогда 
			Прервать;
		КонецЕсли;
		
		ОписаниеКС = "Значение строки 060 Раздела 2.1 должно быть равно сумме значений по строкам 050 и 060 Раздела 3.1, если значение строки 010 Раздела 2.1 равно значению строки 010 Раздела 3.1 и равно 1";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		//
		ЗначениеР21Ст010Стр = Формат(ЗначениеР21Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст010, НаименованиеР21Ст010, ЗначениеР21Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ИмяР21Ст060 = "П000210006003";
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст060]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст060 = "Количество игровых столов, подлежащих налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст060, НаименованиеР21Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР31Ст050 = "П000310005003";
		ЗначениеР31Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст050]);
		ЗначениеР31Ст050Стр = Формат(ЗначениеР31Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст050 = "Количество игровых столов, зарегистрированных в налоговом органе установлено после 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст050, НаименованиеР31Ст050, ЗначениеР31Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ИмяР31Ст060 = "П000310006003";
		ЗначениеР31Ст060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст060]);
		ЗначениеР31Ст060Стр = Формат(ЗначениеР31Ст060, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст060 = "Количество игровых столов, зарегистрированных в налоговом органе выбыло до 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст060, НаименованиеР31Ст060, ЗначениеР31Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР31Ст050 + ЗначениеР31Ст060;
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР31Ст050Стр + " + " + ЗначениеР31Ст060Стр + " Итог [" + ПраваяЧастьСтр
		+ "], когда " + ЗначениеР21Ст010Стр + " = " + ЗначениеР31Ст010Стр + " = 1";
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_22(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницыР21 = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		// Вычислим условие выполнения проверки КС
		ИмяР21Ст010 = "П000210001003";
		ЗначениеР21Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст010]);
		УсловиеПроверкиВыполнено = Ложь;
		Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
			НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
			
			ИмяР31Ст010 = "П000310001003";
			ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
			Если (ЗначениеР21Ст010 = ЗначениеР31Ст010) И (ЗначениеР21Ст010 > 1) Тогда 
				УсловиеПроверкиВыполнено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ УсловиеПроверкиВыполнено Тогда 
			Прервать;
		КонецЕсли;
		
		ОписаниеКС = "Значение строки 070 Раздела 2.1 должно быть равно результату вычитания суммы значений по строкам 050 и 060 Раздела 3.1 из значения строки 040 Раздела 2.1, если значение строки 010 Раздела 2.1 равно значению строки 010 Раздела 3.1 и больше 1";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		//
		ЗначениеР21Ст010Стр = Формат(ЗначениеР21Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст010, НаименованиеР21Ст010, ЗначениеР21Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ИмяР21Ст070 = "П000210007003";
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст070]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст070 = "Количество игровых столов, подлежащих налогообложению по ставке налога, установленной в соответствии с п.1 ст.369 НК с учетом аб.2 п.1 ст.370 НК, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст070, НаименованиеР21Ст070, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР21Ст040 = "П000210004003";
		ЗначениеР21Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст040]);
		ЗначениеР21Ст040Стр = Формат(ЗначениеР21Ст040, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст040 = "Количество игровых столов, имеющих количество полей, указанное в стр.010, подлежащих налогообложению, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст040, НаименованиеР21Ст040, ЗначениеР21Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ИмяР31Ст050 = "П000310005003";
		ЗначениеР31Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст050]);
		ЗначениеР31Ст050Стр = Формат(ЗначениеР31Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст050 = "Количество игровых столов, зарегистрированных в налоговом органе установлено после 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст050, НаименованиеР31Ст050, ЗначениеР31Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ИмяР31Ст060 = "П000310006003";
		ЗначениеР31Ст060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст060]);
		ЗначениеР31Ст060Стр = Формат(ЗначениеР31Ст060, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст060 = "Количество игровых столов, зарегистрированных в налоговом органе выбыло до 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст060, НаименованиеР31Ст060, ЗначениеР31Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР21Ст040 - (ЗначениеР31Ст050 + ЗначениеР31Ст060);
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР21Ст040Стр + " - (" + ЗначениеР31Ст050Стр + " + " + ЗначениеР31Ст060Стр
		+ ") Итог [" + ПраваяЧастьСтр + "], когда " + ЗначениеР21Ст010Стр + " = " + ЗначениеР31Ст010Стр + " > 1";
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницыР21 = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		// Вычислим условие выполнения проверки КС
		ИмяР21Ст010 = "П000210001003";
		ЗначениеР21Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст010]);
		УсловиеПроверкиВыполнено = Ложь;
		Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
			НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
			
			ИмяР31Ст010 = "П000310001003";
			ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
			Если (ЗначениеР21Ст010 = ЗначениеР31Ст010) И (ЗначениеР21Ст010 > 1) Тогда 
				УсловиеПроверкиВыполнено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ УсловиеПроверкиВыполнено Тогда 
			Прервать;
		КонецЕсли;
		
		ОписаниеКС = "Значение строки 080 Раздела 2.1 должно быть равно сумме значений по строкам 050 и 060 Раздела 3.1, если значение строки 010 Раздела 2.1 равно значению строки 010 Раздела 3.1 и больше 1";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		//
		ЗначениеР21Ст010Стр = Формат(ЗначениеР21Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст010, НаименованиеР21Ст010, ЗначениеР21Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ИмяР21Ст080 = "П000210008003";
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст080]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст080 = "Количество игровых столов, подлежащих налогообложениюпо по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК с учетом аб.2 п.1 ст.370 НК, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст080, НаименованиеР21Ст080, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР21Ст040 = "П000210004003";
		ЗначениеР21Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст040]);
		ЗначениеР21Ст040Стр = Формат(ЗначениеР21Ст040, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст040 = "Количество игровых столов, имеющих количество полей, указанное в стр.010, подлежащих налогообложению, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст040, НаименованиеР21Ст040, ЗначениеР21Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ИмяР31Ст050 = "П000310005003";
		ЗначениеР31Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст050]);
		ЗначениеР31Ст050Стр = Формат(ЗначениеР31Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст050 = "Количество игровых столов, зарегистрированных в налоговом органе установлено после 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст050, НаименованиеР31Ст050, ЗначениеР31Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ИмяР31Ст060 = "П000310006003";
		ЗначениеР31Ст060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст060]);
		ЗначениеР31Ст060Стр = Формат(ЗначениеР31Ст060, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст060 = "Количество игровых столов, зарегистрированных в налоговом органе выбыло до 15 числа, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст060, НаименованиеР31Ст060, ЗначениеР31Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР21Ст040 - (ЗначениеР31Ст050 + ЗначениеР31Ст060);
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР21Ст040Стр + " - (" + ЗначениеР31Ст050Стр + " + " + ЗначениеР31Ст060Стр
		+ ") Итог [" + ПраваяЧастьСтр + "], когда " + ЗначениеР21Ст010Стр + " = " + ЗначениеР31Ст010Стр + " > 1";
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_24(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницыР21 = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		ОписаниеКС = "Сумма исчисленного налога на игорный бизнес (строка 090 Раздел 2.1) должна быть равна результату суммирования произведения значения строки 050  Раздела 2.1 на значение строки 020 Раздела 2.1 и произведения значения строки 060 Раздела 2.1 на половину значения строки 020 Раздела 2.1, если значение строки 010 Раздела 2.1 равно 1";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		// Вычислим условие выполнения проверки КС
		ИмяР21Ст010 = "П000210001003";
		ЗначениеР21Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст010]);
		ЗначениеР21Ст010Стр = Формат(ЗначениеР21Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст010, НаименованиеР21Ст010, ЗначениеР21Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ИмяР21Ст090 = "П000210009003";
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст090]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст090 = "Сумма исчисленного налога на игорный бизнес, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст090, НаименованиеР21Ст090, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР21Ст050 = "П000210005003";
		ЗначениеР21Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст050]);
		ЗначениеР21Ст050Стр = Формат(ЗначениеР21Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст050 = "Количество игровых столов, подлежащих налогообложению по ставке налога, установленной в соответствии с п.1 ст.369 НК, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст050, НаименованиеР21Ст050, ЗначениеР21Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ИмяР21Ст020 = "П000210002003";
		ЗначениеР21Ст020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст020]);
		ЗначениеР21Ст020Стр = Формат(ЗначениеР21Ст020, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст020 = "Размер ставки налога на игорный бизнес в месяц, установленный законом субъекта РФ в соответствии с п.1 ст.369 НК";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст020, НаименованиеР21Ст020, ЗначениеР21Ст020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ИмяР21Ст060 = "П000210006003";
		ЗначениеР21Ст060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст060]);
		ЗначениеР21Ст060Стр = Формат(ЗначениеР21Ст060, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст060 = "Количество игровых столов, подлежащих налогообложению по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК";
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст060, НаименованиеР21Ст060, ЗначениеР21Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР21Ст050 * ЗначениеР21Ст020 + ЗначениеР21Ст060 * 1/2 * ЗначениеР21Ст020;
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР21Ст050Стр + " * " + ЗначениеР21Ст020Стр + " + " + ЗначениеР21Ст060Стр
		+ " * 1/2 * " + ЗначениеР21Ст020Стр + " Итог [" + ПраваяЧастьСтр + "], когда " + ЗначениеР21Ст010Стр + " = 1";
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_25(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	Для каждого СтраницаР21 Из мДанныеОтчета.Раздел21 Цикл
		НомерСтраницыР21 = Строка(мДанныеОтчета.Раздел21.Индекс(СтраницаР21) + 1);
		
		ОписаниеКС = "Сумма исчисленного налога на игорный бизнес (строка 090 Раздел 2.1) должна быть равна результату суммирования произведения значения строки 070  Раздела 2.1 на значение строки 030 Раздела 2.1 и произведения значения строки 080 Раздела 2.1 на половину значения строки 030 Раздела 2.1, если значение строки 010 Раздела 2.1 больше 1";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
			СчетчикФормулДляРасшифровок);
		
		// Вычислим условие выполнения проверки КС
		ИмяР21Ст010 = "П000210001003";
		ЗначениеР21Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст010]);
		ЗначениеР21Ст010Стр = Формат(ЗначениеР21Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст010 = "Количество имеющихся игровых полей на игровом столе, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст010, НаименованиеР21Ст010, ЗначениеР21Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем левую часть соотношения.
		ИмяР21Ст090 = "П000210009003";
		ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст090]);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст090 = "Сумма исчисленного налога на игорный бизнес, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст090, НаименованиеР21Ст090, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР21Ст070 = "П000210007003";
		ЗначениеР21Ст070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст070]);
		ЗначениеР21Ст070Стр = Формат(ЗначениеР21Ст070, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст070 = "Количество игровых столов, подлежащих налогообложению по ставке налога, установленной в соответствии с п.1 ст.369 НК с учетом аб.2 п.1 ст.370 НК, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст070, НаименованиеР21Ст070, ЗначениеР21Ст070, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ИмяР21Ст030 = "П000210003003";
		ЗначениеР21Ст030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст030]);
		ЗначениеР21Ст030Стр = Формат(ЗначениеР21Ст030, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст030 = "Размер ставки налога на игорный бизнес в месяц, установленный в соответствии с п.1 ст.369 НК с учетом аб.2 п.1 ст.370 НК, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст030, НаименованиеР21Ст030, ЗначениеР21Ст030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ИмяР21Ст080 = "П000210008003";
		ЗначениеР21Ст080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР21.Данные[0].Значение[ИмяР21Ст080]);
		ЗначениеР21Ст080Стр = Формат(ЗначениеР21Ст080, "ЧРД=.;ЧН=0");
		НаименованиеР21Ст080 = "Количество игровых столов, подлежащих налогообложениюпо по 1/2 ставки налога, установленной в соответствии с п.3 и 4 ст.370 НК с учетом аб.2 п.1 ст.370 НК, Раздел 2.1, Страница " + НомерСтраницыР21;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР21Ст080, НаименованиеР21Ст080, ЗначениеР21Ст080, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел21", Неопределено, НомерСтраницыР21, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ЗначениеР21Ст070 * ЗначениеР21Ст030 + ЗначениеР21Ст080 * 1/2 * ЗначениеР21Ст030;
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
		
		Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР21Ст070Стр + " * " + ЗначениеР21Ст030Стр + " + " + ЗначениеР21Ст080Стр
		+ " * 1/2 * " + ЗначениеР21Ст030Стр + " Итог [" + ПраваяЧастьСтр + "], когда " + ЗначениеР21Ст010Стр + " > 1";
		
		Если НЕ ЗначениеР21Ст010 > 1 Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		ИначеЕсли (ЗначениеР21Ст010 > 1) И (ЛеваяЧасть = ПраваяЧасть) Тогда 
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе 
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		Описание = "Неправильно определена налоговая база";
		Нарушение = "ст. 367 НК РФ";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
		Расшифровка, ЭтоОшибка, Описание, Нарушение);
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_26(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 010 графы 3 Раздела 3 должно быть равно значению строки 020 всех Разделов 3.1 и равно значению строки 060 графы 3 Раздела 3 предыдущего налогового периода, если значение строки 010 Раздела 3.1 больше либо равно ""1""";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст010Гр3 = "П000300001003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр3]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010 = "Количество игровых столов, установленных на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр3, НаименованиеР3Ст010, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
		
	// Механизм ПНП
	ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
		
	Если ДокументПНП = Неопределено Тогда 
		
		ЗначениеР3Ст060ПНП		 = Неопределено;
		ЗначениеР3Ст060ПНПСтр	 = Неопределено;
		
	Иначе 
		
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Раздел3ПНП = Неопределено;
		ИмяР3Ст060Гр3ПНП = "П000300006003";
		
		Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел3", Раздел3ПНП) Тогда 
			ЗначениеР3Ст060ПНП = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Раздел3ПНП[ИмяР3Ст060Гр3ПНП]);
			ЗначениеР3Ст060ПНПСтр = Формат(ЗначениеР3Ст060ПНП, "ЧРД=.;ЧН=0");
			НаименованиеР3Ст060ПНП = "Количество игровых столов, на конец предыдущего налогового периода";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр3ПНП,
				НаименованиеР3Ст060ПНП, ЗначениеР3Ст060ПНП, "", ДокументПНП, "Раздел3",
				Неопределено, , СчетчикФормулДляРасшифровок);
		КонецЕсли;
		
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
		НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
		
		ИмяР31Ст010 = "П000310001003";
		ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
		
		Если НЕ (ЗначениеР31Ст010 >= 1) Тогда 
			Продолжить; // Условие не выполнено
		КонецЕсли;
		
		// Зарегистрируем левую часть условия
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР31Ст020 = "П000310002003";
		ЗначениеР31Ст020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст020]);
		ЗначениеР31Ст020Стр = Формат(ЗначениеР31Ст020, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст020 = "Количество игровых столов, зарегистрированных в налоговом органе на начало налогового периода, Раздел 3.1, Страница " + НомерСтраницыР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст020, НаименованиеР31Ст020, ЗначениеР31Ст020, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР31Ст020;
		Расшифровка = Расшифровка + ЗначениеР31Ст020Стр + " + ";
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если (ЛеваяЧасть = ПраваяЧасть) И ?(ЗначениеР3Ст060ПНП = Неопределено, Истина, ЗначениеР3Ст060ПНП = ЛеваяЧасть) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	Если ЗначениеР3Ст060ПНПСтр <> Неопределено Тогда 
		Расшифровка = Расшифровка + " и " + ЛеваяЧастьСтр + " = " + ЗначениеР3Ст060ПНПСтр;
	КонецЕсли;
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_27(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 020 графа 3 Раздел 3 должно быть равно значению суммы строк 030 всех Разделов 3.1, если значение строки 010 Раздела 3.1 больше либо равно 1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст020Гр3 = "П000300002003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст020Гр3]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст020 = "Количество игровых столов, установленных до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст020Гр3, НаименованиеР3Ст020, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
		НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
		
		ИмяР31Ст010 = "П000310001003";
		ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
		
		Если НЕ (ЗначениеР31Ст010 >= 1) Тогда 
			Продолжить; // Условие не выполнено
		КонецЕсли;
		
		// Зарегистрируем левую часть условия
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР31Ст030 = "П000310003003";
		ЗначениеР31Ст030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст030]);
		ЗначениеР31Ст030Стр = Формат(ЗначениеР31Ст030, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст030 = "Количество игровых столов, установлено до 15 числа, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст030, НаименованиеР31Ст030, ЗначениеР31Ст030, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР31Ст030;
		Расшифровка = Расшифровка + ЗначениеР31Ст030Стр + " + ";
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_28(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 030 графа 3 Раздел 3 должно быть равно значению суммы строк 040 всех Разделов 3.1, если значение строки 010 Раздела 3.1 больше либо равно 1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст030Гр3 = "П000300003003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст030Гр3]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст030 = "Количество игровых столов, выбыло после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст030Гр3, НаименованиеР3Ст030, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
		НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
		
		ИмяР31Ст010 = "П000310001003";
		ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
		
		Если НЕ (ЗначениеР31Ст010 >= 1) Тогда 
			Продолжить; // Условие не выполнено
		КонецЕсли;
		
		// Зарегистрируем левую часть условия
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР31Ст040 = "П000310004003";
		ЗначениеР31Ст040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст040]);
		ЗначениеР31Ст040Стр = Формат(ЗначениеР31Ст040, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст040 = "Количество игровых столов, выбыло после 15 числа, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст040, НаименованиеР31Ст040, ЗначениеР31Ст040, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР31Ст040;
		Расшифровка = Расшифровка + ЗначениеР31Ст040Стр + " + ";
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_29(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 040 графа 3 Раздел 3 должно быть равно значению суммы строк 050 всех Разделов 3.1, если значение строки 010 Раздела 3.1 больше либо равно 1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст040Гр3 = "П000300004003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст040Гр3]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст040 = "Количество игровых столов, установлено после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст040Гр3, НаименованиеР3Ст040, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
		НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
		
		ИмяР31Ст010 = "П000310001003";
		ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
		
		Если НЕ (ЗначениеР31Ст010 >= 1) Тогда 
			Продолжить; // Условие не выполнено
		КонецЕсли;
		
		// Зарегистрируем левую часть условия
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР31Ст050 = "П000310005003";
		ЗначениеР31Ст050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст050]);
		ЗначениеР31Ст050Стр = Формат(ЗначениеР31Ст050, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст050 = "Количество игровых столов, установлено после 15 числа, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст050, НаименованиеР31Ст050, ЗначениеР31Ст050, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР31Ст050;
		Расшифровка = Расшифровка + ЗначениеР31Ст050Стр + " + ";
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_30(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 050 графа 3 Раздел 3 должно быть равно значению суммы строк 060 всех Разделов 3.1, если значение строки 010 Раздела 3.1 больше либо равно 1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст050Гр3 = "П000300005003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст050Гр3]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст050 = "Количество игровых столов, выбыло до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст050Гр3, НаименованиеР3Ст050, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
		НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
		
		ИмяР31Ст010 = "П000310001003";
		ЗначениеР31Ст010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст010]);
		
		Если НЕ (ЗначениеР31Ст010 >= 1) Тогда 
			Продолжить; // Условие не выполнено
		КонецЕсли;
		
		// Зарегистрируем левую часть условия
		ЗначениеР31Ст010Стр = Формат(ЗначениеР31Ст010, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст010 = "Количество имеющихся игровых полей на игровом столе, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст010, НаименованиеР31Ст010, ЗначениеР31Ст010, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР31Ст060 = "П000310006003";
		ЗначениеР31Ст060 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст060]);
		ЗначениеР31Ст060Стр = Формат(ЗначениеР31Ст060, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст060 = "Количество игровых столов, выбыло до 15 числа, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст060, НаименованиеР31Ст060, ЗначениеР31Ст060, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР31Ст060;
		Расшифровка = Расшифровка + ЗначениеР31Ст060Стр + " + ";
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_31(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 060 графа 3 Раздел 3 должно быть равно значению строки 070 всех разделов 3.1";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст060Гр3 = "П000300006003";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст060Гр3]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст060 = "Количество игровых столов, на конец налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр3, НаименованиеР3Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	Для каждого СтраницаР31 Из мДанныеОтчета.Раздел31 Цикл
		НомерСтраницыР31 = Строка(мДанныеОтчета.Раздел31.Индекс(СтраницаР31) + 1);
		
		// Зарегистрируем правую часть соотношения.
		ИмяР31Ст070 = "П000310007003";
		ЗначениеР31Ст070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтраницаР31.Данные[0].Значение[ИмяР31Ст070]);
		ЗначениеР31Ст070Стр = Формат(ЗначениеР31Ст070, "ЧРД=.;ЧН=0");
		НаименованиеР31Ст070 = "Количество игровых столов, на конец налогового периода, Страница " + СтраницаР31;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР31Ст070, НаименованиеР31Ст070, ЗначениеР31Ст070, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел31", Неопределено, НомерСтраницыР31, СчетчикФормулДляРасшифровок);
		
		ПраваяЧасть = ПраваяЧасть + ЗначениеР31Ст070;
		Расшифровка = Расшифровка + ЗначениеР31Ст070Стр + " + ";
	КонецЦикла;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3) + " Итог [" + ПраваяЧастьСтр + "]";
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_32(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 010 графы 4 Раздела 3 отчетного налогового периода должно быть равно значению строки 060 графы 4 Раздела 3 предыдущего налогового периода";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст010Гр4 = "П000300001004";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр4]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010Гр4 = "Количество игровых автоматов, на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр4,
		НаименованиеР3Ст010Гр4, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , 
		СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	
	// Механизм ПНП
	ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
		
	Если ДокументПНП = Неопределено Тогда 
		
		ПроверятьКС = Ложь;
		
	Иначе 
		
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Раздел3ПНП = Неопределено;
		ИмяР3Ст060Гр4ПНП = "П000300006004";
		
		Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел3", Раздел3ПНП) Тогда 
			ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Раздел3ПНП[ИмяР3Ст060Гр4ПНП]);
			НаименованиеР3Ст060Гр4ПНП = "Количество игровых автоматов, на конец предыдущего налогового периода";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр4ПНП,
				НаименованиеР3Ст060Гр4ПНП, ПраваяЧасть, "", ДокументПНП, "Раздел3",
				Неопределено, , СчетчикФормулДляРасшифровок);
			ПроверятьКС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если НЕ ПроверятьКС ИЛИ (ПроверятьКС И (ЛеваяЧасть = ПраваяЧасть)) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_33(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 060 графа 4 Раздел 3 должно быть равно сумме значений по строкам 010, 020, 040 графы 4 Раздела 3 за минусом значений по строкам 030 и 050 графы 4 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст060Гр4 = "П000300006004";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст060Гр4]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст060 = "Количество игровых автоматов, зарегистрированных в налоговом органе на конец налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр4, НаименованиеР3Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР3Ст010Гр4 = "П000300001004";
	ЗначениеР3Ст010Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр4]);
	ЗначениеР3Ст010Гр4Стр = Формат(ЗначениеР3Ст010Гр4, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010 = "Количество игровых автоматов, зарегистрированных в налоговом органе на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр4, НаименованиеР3Ст010, ЗначениеР3Ст010Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст020Гр4 = "П000300002004";
	ЗначениеР3Ст020Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст020Гр4]);
	ЗначениеР3Ст020Гр4Стр = Формат(ЗначениеР3Ст020Гр4, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст020 = "Количество игровых автоматов, зарегистрированных в налоговом органе установлено до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст020Гр4, НаименованиеР3Ст020, ЗначениеР3Ст020Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст030Гр4 = "П000300003004";
	ЗначениеР3Ст030Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст030Гр4]);
	ЗначениеР3Ст030Гр4Стр = Формат(ЗначениеР3Ст030Гр4, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст030 = "Количество игровых автоматов, зарегистрированных в налоговом органе выбыло после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст030Гр4, НаименованиеР3Ст030, ЗначениеР3Ст030Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст040Гр4 = "П000300004004";
	ЗначениеР3Ст040Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст040Гр4]);
	ЗначениеР3Ст040Гр4Стр = Формат(ЗначениеР3Ст040Гр4, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст040 = "Количество игровых автоматов, зарегистрированных в налоговом органе установлено после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст040Гр4, НаименованиеР3Ст040, ЗначениеР3Ст040Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст050Гр4 = "П000300005004";
	ЗначениеР3Ст050Гр4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст050Гр4]);
	ЗначениеР3Ст050Гр4Стр = Формат(ЗначениеР3Ст050Гр4, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст050 = "Количество игровых автоматов, зарегистрированных в налоговом органе выбыло до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст050Гр4, НаименованиеР3Ст050, ЗначениеР3Ст050Гр4, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР3Ст010Гр4 + ЗначениеР3Ст020Гр4 - ЗначениеР3Ст030Гр4 + ЗначениеР3Ст040Гр4 - ЗначениеР3Ст050Гр4;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР3Ст010Гр4Стр + " + " + ЗначениеР3Ст020Гр4Стр + " - " + ЗначениеР3Ст030Гр4Стр
	+ " + " + ЗначениеР3Ст040Гр4Стр + " - " + ЗначениеР3Ст050Гр4Стр + " Итог [" + ПраваяЧастьСтр + "]";
	
	Описание = "Арифметическая ошибка";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, );
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_34(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 010 графы 5 Раздела 3 отчетного налогового периода должно быть равно значению строки 060 графы 5 Раздела 3 предыдущего налогового периода";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст010Гр5 = "П000300001005";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр5]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010Гр5 = "Количество процессинговых центров тотализаторов, на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр5,
		НаименованиеР3Ст010Гр5, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , 
		СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	
	// Механизм ПНП
	ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
		
	Если ДокументПНП = Неопределено Тогда 
		
		ПроверятьКС = Ложь;
		
	Иначе 
		
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Раздел3ПНП = Неопределено;
		ИмяР3Ст060Гр5ПНП = "П000300006005";
		
		Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел3", Раздел3ПНП) Тогда 
			ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Раздел3ПНП[ИмяР3Ст060Гр5ПНП]);
			НаименованиеР3Ст060Гр5ПНП = "Количество процессинговых центров тотализаторов, на конец предыдущего налогового периода";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр5ПНП,
				НаименованиеР3Ст060Гр5ПНП, ПраваяЧасть, "", ДокументПНП, "Раздел3",
				Неопределено, , СчетчикФормулДляРасшифровок);
			ПроверятьКС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если НЕ ПроверятьКС ИЛИ (ПроверятьКС И (ЛеваяЧасть = ПраваяЧасть)) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_35(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 060 графа 5 Раздел 3 должно быть равно сумме значений по строкам 010, 020,040 графы 5 Раздела 3 за минусом значений по строкам 030 и 050 графы 5 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст060Гр5 = "П000300006005";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст060Гр5]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст060 = "Количество процессинговых центров тотализаторов, зарегистрированных в налоговом органе на конец налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр5, НаименованиеР3Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР3Ст010Гр5 = "П000300001005";
	ЗначениеР3Ст010Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр5]);
	ЗначениеР3Ст010Гр5Стр = Формат(ЗначениеР3Ст010Гр5, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010 = "Количество процессинговых центров тотализаторов, зарегистрированных в налоговом органе на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр5, НаименованиеР3Ст010, ЗначениеР3Ст010Гр5, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст020Гр5 = "П000300002005";
	ЗначениеР3Ст020Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст020Гр5]);
	ЗначениеР3Ст020Гр5Стр = Формат(ЗначениеР3Ст020Гр5, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст020 = "Количество процессинговых центров тотализаторов, зарегистрированных в налоговом органе установлено до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст020Гр5, НаименованиеР3Ст020, ЗначениеР3Ст020Гр5, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст030Гр5 = "П000300003005";
	ЗначениеР3Ст030Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст030Гр5]);
	ЗначениеР3Ст030Гр5Стр = Формат(ЗначениеР3Ст030Гр5, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст030 = "Количество процессинговых центров тотализаторов, зарегистрированных в налоговом органе выбыло после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст030Гр5, НаименованиеР3Ст030, ЗначениеР3Ст030Гр5, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст040Гр5 = "П000300004005";
	ЗначениеР3Ст040Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст040Гр5]);
	ЗначениеР3Ст040Гр5Стр = Формат(ЗначениеР3Ст040Гр5, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст040 = "Количество процессинговых центров тотализаторов, зарегистрированных в налоговом органе установлено после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст040Гр5, НаименованиеР3Ст040, ЗначениеР3Ст040Гр5, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст050Гр5 = "П000300005005";
	ЗначениеР3Ст050Гр5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст050Гр5]);
	ЗначениеР3Ст050Гр5Стр = Формат(ЗначениеР3Ст050Гр5, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст050 = "Количество процессинговых центров тотализаторов, зарегистрированных в налоговом органе выбыло до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст050Гр5, НаименованиеР3Ст050, ЗначениеР3Ст050Гр5, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР3Ст010Гр5 + ЗначениеР3Ст020Гр5 - ЗначениеР3Ст030Гр5 + ЗначениеР3Ст040Гр5 - ЗначениеР3Ст050Гр5;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР3Ст010Гр5Стр + " + " + ЗначениеР3Ст020Гр5Стр + " - " + ЗначениеР3Ст030Гр5Стр
	+ " + " + ЗначениеР3Ст040Гр5Стр + " - " + ЗначениеР3Ст050Гр5Стр + " Итог [" + ПраваяЧастьСтр + "]";
	
	Описание = "Арифметическая ошибка";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, );
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_36(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 010 графы 6 Раздела 3 отчетного налогового периода должно быть равно значению строки 060 графы 6 Раздела 3 предыдущего налогового периода";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст010Гр6 = "П000300001006";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр6]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010Гр6 = "Количество процессинговых центров букмекерских контор, на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр6,
		НаименованиеР3Ст010Гр6, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , 
		СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	
	// Механизм ПНП
	ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
		
	Если ДокументПНП = Неопределено Тогда 
		
		ПроверятьКС = Ложь;
		
	Иначе 
		
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Раздел3ПНП = Неопределено;
		ИмяР3Ст060Гр6ПНП = "П000300006006";
		
		Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел3", Раздел3ПНП) Тогда 
			ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Раздел3ПНП[ИмяР3Ст060Гр6ПНП]);
			НаименованиеР3Ст060Гр6ПНП = "Количество процессинговых центров букмекерских контор, на конец предыдущего налогового периода";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр6ПНП,
				НаименованиеР3Ст060Гр6ПНП, ПраваяЧасть, "", ДокументПНП, "Раздел3",
				Неопределено, , СчетчикФормулДляРасшифровок);
			ПроверятьКС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если НЕ ПроверятьКС ИЛИ (ПроверятьКС И (ЛеваяЧасть = ПраваяЧасть)) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_37(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 060 графа 6 Раздел 3 должно быть равно сумме значений по строкам 010, 020,040 графы 6 Раздела 3 за минусом значений по строкам 030 и 050 графы 6 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст060Гр6 = "П000300006006";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст060Гр6]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст060 = "Количество процессинговых центров букмекерских контор, зарегистрированных в налоговом органе на конец налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр6, НаименованиеР3Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР3Ст010Гр6 = "П000300001006";
	ЗначениеР3Ст010Гр6 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр6]);
	ЗначениеР3Ст010Гр6Стр = Формат(ЗначениеР3Ст010Гр6, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010 = "Количество процессинговых центров букмекерских контор, зарегистрированных в налоговом органе на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр6, НаименованиеР3Ст010, ЗначениеР3Ст010Гр6, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст020Гр6 = "П000300002006";
	ЗначениеР3Ст020Гр6 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст020Гр6]);
	ЗначениеР3Ст020Гр6Стр = Формат(ЗначениеР3Ст020Гр6, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст020 = "Количество процессинговых центров букмекерских контор, зарегистрированных в налоговом органе установлено до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст020Гр6, НаименованиеР3Ст020, ЗначениеР3Ст020Гр6, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст030Гр6 = "П000300003006";
	ЗначениеР3Ст030Гр6 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст030Гр6]);
	ЗначениеР3Ст030Гр6Стр = Формат(ЗначениеР3Ст030Гр6, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст030 = "Количество процессинговых центров букмекерских контор, зарегистрированных в налоговом органе выбыло после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст030Гр6, НаименованиеР3Ст030, ЗначениеР3Ст030Гр6, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст040Гр6 = "П000300004006";
	ЗначениеР3Ст040Гр6 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст040Гр6]);
	ЗначениеР3Ст040Гр6Стр = Формат(ЗначениеР3Ст040Гр6, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст040 = "Количество процессинговых центров букмекерских контор, зарегистрированных в налоговом органе установлено после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст040Гр6, НаименованиеР3Ст040, ЗначениеР3Ст040Гр6, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст050Гр6 = "П000300005006";
	ЗначениеР3Ст050Гр6 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст050Гр6]);
	ЗначениеР3Ст050Гр6Стр = Формат(ЗначениеР3Ст050Гр6, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст050 = "Количество процессинговых центров букмекерских контор, зарегистрированных в налоговом органе выбыло до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст050Гр6, НаименованиеР3Ст050, ЗначениеР3Ст050Гр6, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР3Ст010Гр6 + ЗначениеР3Ст020Гр6 - ЗначениеР3Ст030Гр6 + ЗначениеР3Ст040Гр6 - ЗначениеР3Ст050Гр6;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР3Ст010Гр6Стр + " + " + ЗначениеР3Ст020Гр6Стр + " - " + ЗначениеР3Ст030Гр6Стр
	+ " + " + ЗначениеР3Ст040Гр6Стр + " - " + ЗначениеР3Ст050Гр6Стр + " Итог [" + ПраваяЧастьСтр + "]";
	
	Описание = "Арифметическая ошибка";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, );
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_38(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 010 графы 7 Раздела 3 отчетного налогового периода должно быть равно значению строки 060 графы 7 Раздела 3 предыдущего налогового периода";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст010Гр7 = "П000300001007";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр7]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010Гр7 = "Количество пунктов приема ставок тотализаторов, на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр7,
		НаименованиеР3Ст010Гр7, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , 
		СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	
	// Механизм ПНП
	ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
		
	Если ДокументПНП = Неопределено Тогда 
		
		ПроверятьКС = Ложь;
		
	Иначе 
		
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Раздел3ПНП = Неопределено;
		ИмяР3Ст060Гр7ПНП = "П000300006007";
		
		Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел3", Раздел3ПНП) Тогда 
			ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Раздел3ПНП[ИмяР3Ст060Гр7ПНП]);
			НаименованиеР3Ст060Гр7ПНП = "Количество пунктов приема ставок тотализаторов, на конец предыдущего налогового периода";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр7ПНП,
				НаименованиеР3Ст060Гр7ПНП, ПраваяЧасть, "", ДокументПНП, "Раздел3",
				Неопределено, , СчетчикФормулДляРасшифровок);
			ПроверятьКС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если НЕ ПроверятьКС ИЛИ (ПроверятьКС И (ЛеваяЧасть = ПраваяЧасть)) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_39(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 060 графа 7 Раздел 3 должно быть равно сумме значений по строкам 010, 020,040 графы 7 Раздела 3 за минусом значений по строкам 030 и 050 графы 7 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст060Гр7 = "П000300006007";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст060Гр7]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст060 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе на конец налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр7, НаименованиеР3Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР3Ст010Гр7 = "П000300001007";
	ЗначениеР3Ст010Гр7 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр7]);
	ЗначениеР3Ст010Гр7Стр = Формат(ЗначениеР3Ст010Гр7, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр7, НаименованиеР3Ст010, ЗначениеР3Ст010Гр7, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст020Гр7 = "П000300002007";
	ЗначениеР3Ст020Гр7 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст020Гр7]);
	ЗначениеР3Ст020Гр7Стр = Формат(ЗначениеР3Ст020Гр7, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст020 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе установлено до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст020Гр7, НаименованиеР3Ст020, ЗначениеР3Ст020Гр7, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст030Гр7 = "П000300003007";
	ЗначениеР3Ст030Гр7 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст030Гр7]);
	ЗначениеР3Ст030Гр7Стр = Формат(ЗначениеР3Ст030Гр7, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст030 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе выбыло после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст030Гр7, НаименованиеР3Ст030, ЗначениеР3Ст030Гр7, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст040Гр7 = "П000300004007";
	ЗначениеР3Ст040Гр7 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст040Гр7]);
	ЗначениеР3Ст040Гр7Стр = Формат(ЗначениеР3Ст040Гр7, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст040 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе установлено после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст040Гр7, НаименованиеР3Ст040, ЗначениеР3Ст040Гр7, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст050Гр7 = "П000300005007";
	ЗначениеР3Ст050Гр7 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст050Гр7]);
	ЗначениеР3Ст050Гр7Стр = Формат(ЗначениеР3Ст050Гр7, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст050 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе выбыло до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст050Гр7, НаименованиеР3Ст050, ЗначениеР3Ст050Гр7, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР3Ст010Гр7 + ЗначениеР3Ст020Гр7 - ЗначениеР3Ст030Гр7 + ЗначениеР3Ст040Гр7 - ЗначениеР3Ст050Гр7;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР3Ст010Гр7Стр + " + " + ЗначениеР3Ст020Гр7Стр + " - " + ЗначениеР3Ст030Гр7Стр
	+ " + " + ЗначениеР3Ст040Гр7Стр + " - " + ЗначениеР3Ст050Гр7Стр + " Итог [" + ПраваяЧастьСтр + "]";
	
	Описание = "Арифметическая ошибка";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, );
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_40(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 010 графы 8 Раздела 3 отчетного налогового периода должно быть равно значению строки 060 графы 8 Раздела 3 предыдущего налогового периода";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст010Гр8 = "П000300001008";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр8]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010Гр8 = "Количество пунктов приема ставок букмекерских контор, на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр8,
		НаименованиеР3Ст010Гр8, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел3", Неопределено, , 
		СчетчикФормулДляРасшифровок);
	
	Расшифровка = ЛеваяЧастьСтр + " = ";
	ПраваяЧасть = 0;
	
	// Механизм ПНП
	ДокументПНП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
		
	Если ДокументПНП = Неопределено Тогда 
		
		ПроверятьКС = Ложь;
		
	Иначе 
		
		ДанныеПНП = РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДокументПНП);
		
		Раздел3ПНП = Неопределено;
		ИмяР3Ст060Гр8ПНП = "П000300006008";
		
		Если ДанныеПНП.ДанныеРазделовРеглОтчета.Свойство("Раздел3", Раздел3ПНП) Тогда 
			ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Раздел3ПНП[ИмяР3Ст060Гр8ПНП]);
			НаименованиеР3Ст060Гр8ПНП = "Количество пунктов приема ставок букмекерских контор, на конец предыдущего налогового периода";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр8ПНП,
				НаименованиеР3Ст060Гр8ПНП, ПраваяЧасть, "", ДокументПНП, "Раздел3",
				Неопределено, , СчетчикФормулДляРасшифровок);
			ПроверятьКС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если НЕ ПроверятьКС ИЛИ (ПроверятьКС И (ЛеваяЧасть = ПраваяЧасть)) Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ПраваяЧастьСтр;
	Описание = "Неправильно определена налоговая база";
	Нарушение = "ст. 367 НК РФ";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, Нарушение);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_41(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы = "";
	
	СтруктураРаздела3 = мДанныеОтчета.Раздел3;
	
	ОписаниеКС = "Значение строки 060 графа 8 Раздел 3 должно быть равно сумме значений по строкам 010, 020,040 графы 8 Раздела 3 за минусом значений по строкам 030 и 050 графы 8 Раздела 3";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , 
		СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем левую часть соотношения.
	ИмяР3Ст060Гр8 = "П000300006008";
	ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст060Гр8]);
	ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст060 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе на конец налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст060Гр8, НаименованиеР3Ст060, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	// Зарегистрируем правую часть соотношения.
	ИмяР3Ст010Гр8 = "П000300001008";
	ЗначениеР3Ст010Гр8 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст010Гр8]);
	ЗначениеР3Ст010Гр8Стр = Формат(ЗначениеР3Ст010Гр8, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст010 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе на начало налогового периода";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст010Гр8, НаименованиеР3Ст010, ЗначениеР3Ст010Гр8, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст020Гр8 = "П000300002008";
	ЗначениеР3Ст020Гр8 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст020Гр8]);
	ЗначениеР3Ст020Гр8Стр = Формат(ЗначениеР3Ст020Гр8, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст020 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе установлено до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст020Гр8, НаименованиеР3Ст020, ЗначениеР3Ст020Гр8, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст030Гр8 = "П000300003008";
	ЗначениеР3Ст030Гр8 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст030Гр8]);
	ЗначениеР3Ст030Гр8Стр = Формат(ЗначениеР3Ст030Гр8, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст030 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе выбыло после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст030Гр8, НаименованиеР3Ст030, ЗначениеР3Ст030Гр8, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст040Гр8 = "П000300004008";
	ЗначениеР3Ст040Гр8 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст040Гр8]);
	ЗначениеР3Ст040Гр8Стр = Формат(ЗначениеР3Ст040Гр8, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст040 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе установлено после 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст040Гр8, НаименованиеР3Ст040, ЗначениеР3Ст040Гр8, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ИмяР3Ст050Гр8 = "П000300005008";
	ЗначениеР3Ст050Гр8 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураРаздела3[ИмяР3Ст050Гр8]);
	ЗначениеР3Ст050Гр8Стр = Формат(ЗначениеР3Ст050Гр8, "ЧРД=.;ЧН=0");
	НаименованиеР3Ст050 = "Количество пунктов приема ставок тотализаторов, зарегистрированных в налоговом органе выбыло до 15 числа";
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяР3Ст050Гр8, НаименованиеР3Ст050, ЗначениеР3Ст050Гр8, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел3", Неопределено, , СчетчикФормулДляРасшифровок);
	
	ПраваяЧасть = ЗначениеР3Ст010Гр8 + ЗначениеР3Ст020Гр8 - ЗначениеР3Ст030Гр8 + ЗначениеР3Ст040Гр8 - ЗначениеР3Ст050Гр8;
	ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0");
	
	Если ЛеваяЧасть = ПраваяЧасть Тогда 
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	Иначе 
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	КонецЕсли;
	
	Расшифровка = ЛеваяЧастьСтр + " = " + ЗначениеР3Ст010Гр8Стр + " + " + ЗначениеР3Ст020Гр8Стр + " - " + ЗначениеР3Ст030Гр8Стр
	+ " + " + ЗначениеР3Ст040Гр8Стр + " - " + ЗначениеР3Ст050Гр8Стр + " Итог [" + ПраваяЧастьСтр + "]";
	
	Описание = "Арифметическая ошибка";
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
	Расшифровка, ЭтоОшибка, Описание, );
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Описание);
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Нарушение);
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстовоеПредставлениеФормулы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры