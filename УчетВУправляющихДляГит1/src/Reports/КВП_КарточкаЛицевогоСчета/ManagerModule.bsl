
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ПараметрыОтчета.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Укажите организацию.");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ЛицевойСчет.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Укажите лицевой счет.");
		Возврат;
	КонецЕсли;
	
	Если КонецМесяца(ПараметрыОтчета.ДатаКон) < КонецМесяца(ПараметрыОтчета.ДатаНач) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Начало периода не может быть позже окончания периода.");
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Отчеты.КВП_КарточкаЛицевогоСчета.ПолучитьМакет("Макет");
	
	НачалоПериода = НачалоМесяца(ПараметрыОтчета.ДатаНач);
	КонецПериода  = КонецМесяца(ПараметрыОтчета.ДатаКон);
	
	ТабличныйДокумент.Очистить();
	
	ДанныеПоЛС = СформироватьДанныеПоЛицевомуСчету(ПараметрыОтчета.ЛицевойСчет, КонецПериода,, ПараметрыОтчета.Организация);
	
	// Вывод общих сведений о лицевом счете.
	ОбластьШапка1 = Макет.ПолучитьОбласть("Шапка1");
	
	ОбластьШапка1.Параметры.НомерЛицевогоСчета = НомерЛицевогоСчета(ПараметрыОтчета.ЛицевойСчет);
	ОбластьШапка1.Параметры.Заполнить(ДанныеПоЛС);
	Если НЕ ДанныеПоЛС = Неопределено Тогда
		ВидСобственности = ДанныеПоЛС.ТипСобственностиКвартиры;
		Если ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная Тогда
			ВидСобственности = "" + ВидСобственности + ", " + ДанныеПоЛС.ПодвидЧастнойСобственности;
		КонецЕсли;
		ОбластьШапка1.Параметры.ТипСобственности = ВидСобственности;
	КонецЕсли;
	
	ОбластьШапка1.Параметры.МесяцКон = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ПараметрыОтчета.ДатаКон);
	
	ТабличныйДокумент.Вывести(ОбластьШапка1);
	
	ВысотаЗаголовка = ОбластьШапка1.ВысотаТаблицы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет", ПараметрыОтчета.ЛицевойСчет);
	Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецПериода);
	Запрос.Текст = ПолучитьТекстЗапроса(ПараметрыОтчета);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ПервУровень = Результат.Строки[0];
	ИтогоНачисленоТекМес = 0;
	ИтогоЛьготыТекМес    = 0;
	ИтогоКОплатеТекМес   = 0;
	ИтогоОплаченоТекМес  = 0;
	
	ТаблицаНачисленийТекМес = ПервУровень.Строки.Найти(КонецПериода, "МесяцНачисления");
	Если НЕ ТаблицаНачисленийТекМес = Неопределено Тогда
		// Вывод сведений о начислениях за последний месяц выбранного периода в разрезе услуг.
		ОбластьСтрокаТаблицы1 = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		Для Каждого ТекСтрока Из ТаблицаНачисленийТекМес.Строки Цикл
			Начислено = ТекСтрока.Начислено;
			Льготы    = ТекСтрока.Льготы;
			Если Начислено = 0 И Льготы = 0 Тогда
			Иначе
				ОбластьСтрокаТаблицы1.Параметры.Услуга = ТекСтрока.ВидУслуги;
				Если ТекСтрока.СпособРасчетаУслуги = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
					ИЛИ ТекСтрока.СпособРасчетаУслуги = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
					ТекТариф = ПолучитьТарифПоЛицевомуСчету(КонецПериода, 
															ПараметрыОтчета.Организация, 
															ТекСтрока.Услуга,
															ПараметрыОтчета.ЛицевойСчет, 
															Перечисления.КВП_ВидыТарифов.Дневной);
				Иначе
					ТекТариф = ПолучитьТарифПоЛицевомуСчету(КонецПериода, ПараметрыОтчета.Организация, ТекСтрока.Услуга, ПараметрыОтчета.ЛицевойСчет);
				КонецЕсли;
				ОбластьСтрокаТаблицы1.Параметры.Тариф = ТекТариф;
				ОбластьСтрокаТаблицы1.Параметры.Начислено = Начислено;
				ОбластьСтрокаТаблицы1.Параметры.Льготы = Льготы;
				ОбластьСтрокаТаблицы1.Параметры.КОплате = Начислено - Льготы;
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы1);
			КонецЕсли;
		КонецЦикла;
		ИтогоНачисленоТекМес = ТаблицаНачисленийТекМес.Строки.Итог("Начислено");
		ИтогоЛьготыТекМес = ТаблицаНачисленийТекМес.Строки.Итог("Льготы");
		ИтогоОплаченоТекМес = ТаблицаНачисленийТекМес.Строки.Итог("Оплачено");
		ИтогоКОплатеТекМес = ИтогоНачисленоТекМес - ИтогоЛьготыТекМес;
	КонецЕсли;
	
	// вывод итогов по начислениям за последний месяц выбранного периода.
	ОбластьПодвал1 = Макет.ПолучитьОбласть("Подвал1");
	ОбластьПодвал1.Параметры.ИтогоНачислено = ИтогоНачисленоТекМес;
	ОбластьПодвал1.Параметры.ИтогоЛьготы    = ИтогоЛьготыТекМес;
	ОбластьПодвал1.Параметры.ИтогоКОплате   = ИтогоКОплатеТекМес;
	ТабличныйДокумент.Вывести(ОбластьПодвал1);
	
	ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");
	ОбластьШапка2.Параметры.МесяцНач  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ПараметрыОтчета.ДатаНач);
	ОбластьШапка2.Параметры.МесяцКон  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ПараметрыОтчета.ДатаКон);
	НачСальдо = ПервУровень.Строки[0].Начислено;
	ОбластьШапка2.Параметры.НачСальдо = НачСальдо;
	ТабличныйДокумент.Вывести(ОбластьШапка2);
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ПараметрыОтчета.ДатаВыдачи,
																									ПараметрыОтчета.Организация);
	
	// вывод таблицы начислений по месяцам выбранного периода.
	ОбластьСтрокаТаблицы2 = Макет.ПолучитьОбласть("СтрокаТаблицы2");
	ТекПериод = КонецМесяца(НачалоПериода);
	Пока НЕ ТекПериод > КонецПериода Цикл
		
		ОбластьСтрокаТаблицы2.Параметры.ТекМесяц = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ТекПериод);
		ТекСтрока = ПервУровень.Строки.Найти(КонецМесяца(ТекПериод), "МесяцНачисления");
		Если ТекСтрока = Неопределено Тогда
			ОбластьСтрокаТаблицы2.Параметры.Начислено = 0;
			ОбластьСтрокаТаблицы2.Параметры.Оплачено = 0;
			ОбластьСтрокаТаблицы2.Параметры.Корректировка = 0;
		Иначе
			ОбластьСтрокаТаблицы2.Параметры.Начислено = ТекСтрока.Начислено - ТекСтрока.Льготы;
			ОбластьСтрокаТаблицы2.Параметры.Оплачено = ТекСтрока.Оплачено;
			ОбластьСтрокаТаблицы2.Параметры.Корректировка = ТекСтрока.Корректировка;
		КонецЕсли;
		ТекПериод = ДобавитьМесяц(ТекПериод, 1);
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы2);
		
	КонецЦикла;
	
	// вывод итогов таблицы начислений по месяцам.
	ОбластьПодвал2 = Макет.ПолучитьОбласть("Подвал2");
	ИтогоНачислено = (ПервУровень.Строки.Итог("Начислено") - ПервУровень.Строки.Итог("Льготы"));
	ИтогоОплачено  = ПервУровень.Строки.Итог("Оплачено");
	ИтогоКорректировка = ПервУровень.Строки.Итог("Корректировка");
	Если ПараметрыОтчета.ПараметрВыводаЗадолженности = 0 Тогда
		ЗадолженностьНачалоМесяцКон = (ИтогоНачислено - (ИтогоНачисленоТекМес - ИтогоЛьготыТекМес))
									- (ИтогоОплачено - ИтогоОплаченоТекМес);
		ОбластьПодвал2.Параметры.НачалоМесяцКон = Формат(НачалоМесяца(ПараметрыОтчета.ДатаКон), "ДЛФ=ДД");
	ИначеЕсли ПараметрыОтчета.ПараметрВыводаЗадолженности = 1 Тогда
		ЗадолженностьНачалоМесяцКон = ИтогоНачислено - ИтогоОплачено;
		ОбластьПодвал2.Параметры.НачалоМесяцКон = Формат(КонецМесяца(ПараметрыОтчета.ДатаКон), "ДЛФ=ДД");
	ИначеЕсли ПараметрыОтчета.ПараметрВыводаЗадолженности = 2 Тогда
		
		СписокЛС = Новый СписокЗначений;
		СписокЛС.Добавить(ПараметрыОтчета.ЛицевойСчет);
		СтруктураДанныхДляЗапроса = Новый Структура("Организация, МинимальнаяСуммаЗадолженности, МинимальныйСрокЗадолженности, Здание", 
									ПараметрыОтчета.Организация, 0, 0, Неопределено);
		ТаблицаЗадолженностей = УПЖКХ_РаботаСДолжниками.ПолучитьТаблицуДолжников(ПараметрыОтчета.ДатаВыдачи, СписокЛС, СтруктураДанныхДляЗапроса, мНастройкиУчетнойПолитикиТСЖ);
		
		ЗадолженностьНачалоМесяцКон = ТаблицаЗадолженностей.Итог("ОбщаяСумма");
		ОбластьПодвал2.Параметры.НачалоМесяцКон = Формат(ПараметрыОтчета.ДатаВыдачи, "ДЛФ=ДД");
		
	КонецЕсли;
	ОбластьПодвал2.Параметры.ИтогоНачислено = ИтогоНачислено;
	ОбластьПодвал2.Параметры.ИтогоОплачено  = ИтогоОплачено;
	ОбластьПодвал2.Параметры.ИтогоКорректировка = ИтогоКорректировка;
	
	ОбластьПодвал2.Параметры.ЗадолженностьНачалоМесяцКон = Формат(ЗадолженностьНачалоМесяцКон, "ЧДЦ=2; ЧРД=.; ЧН=");
	ТабличныйДокумент.Вывести(ОбластьПодвал2);
	
	// Вывод шапки таблицы о проживающих.
	ОбластьШапка3 = Макет.ПолучитьОбласть("Шапка3");
	ОбластьШапка3.Параметры.МесяцКон  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ПараметрыОтчета.ДатаКон);
	ТабличныйДокумент.Вывести(ОбластьШапка3);
	
	ОбластьСтрокаТаблицы3 = Макет.ПолучитьОбласть("СтрокаТаблицы3");
	// Получим таблицу проживающих со сведениями о льготниках.
	ТаблицаПроживающих = ПолучитьТаблицуПроживающих(ПараметрыОтчета);
	Индекс = 1;
	Для Каждого ТекСтрока Из ТаблицаПроживающих Цикл
		ОбластьСтрокаТаблицы3.Параметры.Проживающий       = Строка(Индекс) + ". " + ТекСтрока.Проживающий;
		ОбластьСтрокаТаблицы3.Параметры.ЛьготнаяКатегория = ТекСтрока.ЛьготнаяКатегория;
		Если ТекСтрока.ВидДокумента = Null Тогда
			ОбластьСтрокаТаблицы3.Параметры.Документ = "-";
		Иначе
			Если ТекСтрока.ОкончаниеДействия = Null Тогда
				ОкончаниеДействияДокумента = "  .  .  ";
			Иначе
				ОкончаниеДействияДокумента = СокрЛП(Формат(ТекСтрока.ОкончаниеДействия, "ДЛФ=Д"));
			КонецЕсли;
			ОбластьСтрокаТаблицы3.Параметры.Документ = СокрЛП(ТекСтрока.ВидДокумента) 
													 + " Серия " 
													 + СокрЛП(ТекСтрока.СерияДокумента) 
													 + " Номер " 
													 + СокрЛП(ТекСтрока.НомерДокумента) 
													 + ", с " 
													 + СокрЛП(Формат(ТекСтрока.НачалоДействия, "ДЛФ=Д")) 
													 + " по " 
													 + ОкончаниеДействияДокумента;
		  КонецЕсли;
		Индекс = Индекс + 1;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы3);
	КонецЦикла;
	
	// Зафиксируем заголовок отчета и колонки.
	ТабличныйДокумент.ФиксацияСверху = ВысотаЗаголовка - 3;
	
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область(ВысотаЗаголовка + 2, , ВысотаЗаголовка + 2, );
	
	// Первую колонку не печатаем.
	ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(1, 2,
	                                  ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа.
	ТабличныйДокумент.ИмяПараметровПечати = "КарточкаЛицевогоСчетаКВП";
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

// Возвращает текст запроса в зависимости от выбранного типа объектов.
Функция ПолучитьТекстЗапроса(ПараметрыОтчета)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И (НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|				ТОГДА ЕСТЬNULL(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Начислено,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				ТОГДА ЕСТЬNULL(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Льготы,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|				ТОГДА ЕСТЬNULL(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Корректировка,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА ЕСТЬNULL(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Оплачено,
	|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК СпособРасчетаУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ) КАК МесяцНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ЕСТЬNULL(СУММА(КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияОстаток), 0),
	|	0,
	|	0,
	|	0,
	|	ДОБАВИТЬКДАТЕ(&ДатаНач, МЕСЯЦ, -1),
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНач,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет) КАК КВП_НачисленияНаЛицевыеСчетаОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцНачисления,
	|	Услуга
	|ИТОГИ
	|	СУММА(Начислено),
	|	СУММА(Льготы),
	|	СУММА(Корректировка),
	|	СУММА(Оплачено)
	|ПО
	|	ОБЩИЕ,
	|	МесяцНачисления,
	|	Услуга";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапроса()

// Формирует таблицу проживающих со сведениями о льготниках.
Функция ПолучитьТаблицуПроживающих(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец КАК Объект
	|ПОМЕСТИТЬ ВрПроживающие
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &НачалоМесяца) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающих.Жилец
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих КАК УПЖКХ_СведенияОПроживающих
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающих.ДатаИзменения МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И УПЖКХ_СведенияОПроживающих.Проживает
	|	И УПЖКХ_СведенияОПроживающих.ЛицевойСчет = &ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Льготник,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготыСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента КАК СерияДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента КАК НомерДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаИзменения КАК НачалоДействия
	|ПОМЕСТИТЬ ВрЛьготники
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&НачалоМесяца,
	|			Проживающий.Владелец = &ЛицевойСчет
	|				И ДатаИзменения <= &НачалоМесяца) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготы.Проживающий,
	|	КВП_НазначенныеЛьготы.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготы.ВидДокумента,
	|	КВП_НазначенныеЛьготы.СерияДокумента,
	|	КВП_НазначенныеЛьготы.НомерДокумента,
	|	КВП_НазначенныеЛьготы.ДатаИзменения
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.ДатаИзменения МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И КВП_НазначенныеЛьготы.Проживающий.Владелец = &ЛицевойСчет
	|	И КВП_НазначенныеЛьготы.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготы.Проживающий КАК Льготник,
	|	КВП_НазначенныеЛьготы.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготы.ДатаИзменения КАК ОкончаниеДействия
	|ПОМЕСТИТЬ ВрОкончаниеДействияЛьгот
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.ДатаИзменения > &НачалоМесяца
	|	И КВП_НазначенныеЛьготы.Проживающий.Владелец = &ЛицевойСчет
	|	И НЕ КВП_НазначенныеЛьготы.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проживающие.Объект КАК Проживающий,
	|	Льготники.ВидДокумента,
	|	Льготники.СерияДокумента,
	|	Льготники.НомерДокумента,
	|	Льготники.ЛьготнаяКатегория,
	|	Льготники.НачалоДействия,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ОкончаниеДействияЛьгот.ОкончаниеДействия >= Льготники.НачалоДействия
	|				ТОГДА ОкончаниеДействияЛьгот.ОкончаниеДействия
	|		КОНЕЦ) КАК ОкончаниеДействия
	|ИЗ
	|	ВрПроживающие КАК Проживающие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрЛьготники КАК Льготники
	|		ПО Проживающие.Объект = Льготники.Льготник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрОкончаниеДействияЛьгот КАК ОкончаниеДействияЛьгот
	|		ПО (ОкончаниеДействияЛьгот.Льготник = Льготники.Льготник)
	|			И (ОкончаниеДействияЛьгот.ЛьготнаяКатегория = Льготники.ЛьготнаяКатегория)
	|			И (ОкончаниеДействияЛьгот.ОкончаниеДействия > Льготники.НачалоДействия)
	|
	|СГРУППИРОВАТЬ ПО
	|	Проживающие.Объект,
	|	Льготники.ВидДокумента,
	|	Льготники.СерияДокумента,
	|	Льготники.НомерДокумента,
	|	Льготники.ЛьготнаяКатегория,
	|	Льготники.НачалоДействия";
	
	Запрос.УстановитьПараметр("ЛицевойСчет",  ПараметрыОтчета.ЛицевойСчет);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(ПараметрыОтчета.ДатаКон));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции  //ПолучитьТаблицуПроживающих()

#КонецОбласти

#КонецЕсли