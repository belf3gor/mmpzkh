
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания,
      ФормаДлительнойОперации;

&НаСервере
Перем СохраненныеДанныеОтчета;

#Область ПеременныеКонтрольныхСоотношений

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2018";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_1", Новый Цвет(192, 192, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилищеКонтракты");
	СтруктураРеквизитовФормы.Вставить("СообщенияПослеАвтозаполнения");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилищеСообщенияПослеАвтозаполнения");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ОчиститьВыбранныеКонтракты();
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			ТабличныйДокумент.Области.Найти("ПрПоВсемКонтрактам").Значение = "Х";
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "Минобороны");
	
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = ТабличныйДокумент.Области.ДатаОконч.Значение;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ТабличныйДокумент.Области.ДатаОконч.Значение;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаданиеВыполнено = ЗаполнитьАвтоНаСервере();
		Если ЗаданиеВыполнено Тогда
			Если Элементы.Расшифровать.Видимость Тогда
				Элементы.Расшифровать.Доступность = Истина;
				Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Элементы.НаименованиеЭтапа.Заголовок = "В работе";
	Иначе
		Статус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиРеглОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		Если Статус <> Неопределено Тогда
			Элементы.НаименованиеЭтапа.Заголовок
			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), Статус);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
	ИДОтчета(ЭтаФорма.ИмяФормы), ИДРедакцииОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		
		Если Показатель.Ключ = "ВыборКонтрактов" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 0;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Исполнение контрактов ГОЗ, контрактов";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 0;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	ТабличныйДокумент.Области.ДатаОконч.Значение = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением( , КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КПП)
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , КПП, Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[ИДОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[ИДОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала    = НачалоДня(ТабличныйДокумент.Области.ДатаОконч.Значение);
		СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания = КонецДня(ТабличныйДокумент.Области.ДатаОконч.Значение);
	Иначе
		СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала    = НачалоДня(СтруктураДанныхТитульный.ДатаОконч);
		СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания = КонецДня(СтруктураДанныхТитульный.ДатаОконч);
	КонецЕсли;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	СписокСохранения.Вставить("Контракты", ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВременномХранилищеКонтракты"]));
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
		
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ЭтаФорма, "Минобороны");
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
	КонецЕсли;
	
	ДеревоРаздела = СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов["Раздел1"];
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если СтраницаРаздела.Данные.Свойство("ТипКонтракта") Тогда
			СтраницаРаздела.Данные.Удалить("ТипКонтракта");
		КонецЕсли;
		Если СтраницаРаздела.Данные.Свойство("ТипСведений") Тогда
			СтраницаРаздела.Данные.Удалить("ТипСведений");
		КонецЕсли;
		Если СтраницаРаздела.Данные.Свойство("ПорядковыйНомерКорректировки") Тогда
			СтраницаРаздела.Данные.Удалить("ПорядковыйНомерКорректировки");
		КонецЕсли;
		Если СтраницаРаздела.Данные.Свойство("ПериодОтчетаНачало") Тогда
			СтраницаРаздела.Данные.Удалить("ПериодОтчетаНачало");
		КонецЕсли;
		Если СтраницаРаздела.Данные.Свойство("ПериодОтчетаОкончание") Тогда
			СтраницаРаздела.Данные.Удалить("ПериодОтчетаОкончание");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем Контракты;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СписокСохранения.Свойство("Контракты", Контракты);
	Если Контракты <> Неопределено Тогда
		СтруктураРеквизитовФормы["АдресВоВременномХранилищеКонтракты"]
		= ПоместитьВоВременноеХранилище(СписокСохранения.Контракты, УникальныйИдентификатор);
	КонецЕсли;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки
		= ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	// Данные вариантов автозаполнения.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения") Тогда
		СписокСохранения.Удалить("ДанныеВариантовАвтоЗаполнения");
	КонецЕсли;
	
	// Титульный лист.
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	ДанныеТит.Вставить("ДатаПодписи", ЭтаФорма.ДатаПодписи);
	
	// Сохранение с последующим восстановлением номеров строк многоуровнего раздела.
	// (На случай выгрузки отчета, сохраненного в 2.0, без сохранения в 3.0.)
	СохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = СохрНомераСтрокМногоуровнегоРаздела;
	
	// Раздел 1.
	ИмяРаздела = "Раздел1";
	СтарТаблица = СписокСохранения.ДанныеМногостраничныхРазделов[ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	Для Инд = 0 По СтарТаблица.Количество() - 1 Цикл
		СтарСтраница = СтарТаблица[Инд];
		СтарДанные = СтарСтраница.Данные;
		Если Инд > 0 Тогда
			ДеревоРаздела.Строки.Добавить();
			ДеревоРаздела.Строки[Инд].Данные = Новый Структура;
			ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей = Новый Структура;
		КонецЕсли;
		Для каждого Пок Из СтарДанные Цикл
			ДеревоРаздела.Строки[Инд].Данные.Вставить(Пок.Ключ, Пок.Значение);
		КонецЦикла;
	КонецЦикла;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Удалить("ДанныеМногострочныхРазделов");
	СписокСохранения.Удалить("ДанныеМногостраничныхРазделов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если Область.Имя = "ПрПоВсемКонтрактам" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ПрПоВыбраннымКонтрактам.Значение = "";
			
			ОчиститьВыбранныеКонтракты();
			
			Модифицированность = Истина;
			
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "ПрПоВыбраннымКонтрактам" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ПрПоВсемКонтрактам.Значение = "";
			
			Модифицированность = Истина;
			
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "Контракты" И Область.Гиперссылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДопПарам = Новый Структура;
		ДопПарам.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
		ДопПарам.Вставить("ДатаСоставленияОтчета",        КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		ДопПарам.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
		ДопПарам.Вставить("АдресВоВременномХранилищеКонтракты", СтруктураРеквизитовФормы.АдресВоВременномХранилищеКонтракты);
		
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораСпискаКонтрактов(ДопПарам);
		
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ИНН" Тогда
		ИНН = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаИНН = СтрДлина(ИНН);
		Если СтруктураРеквизитовФормы.ИП Тогда
			КорректнаяДлинаЗаполненногоИНН = ДлинаИНН = 12;
			ТекстЧейИНН = "индивидуального предпринимателя";
			ТекстДлинаИНН = "12";
		Иначе
			КорректнаяДлинаЗаполненногоИНН = ДлинаИНН = 10;
			ТекстЧейИНН = "организации";
			ТекстДлинаИНН = "10";
		КонецЕсли;
		Если КорректнаяДлинаЗаполненногоИНН ИЛИ ДлинаИНН = 0 Тогда
			Область.Значение = ИНН;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru='ИНН %1 должен состоять из %2 цифр. Значение очищено.'"),
			ТекстЧейИНН, ТекстДлинаИНН);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "КПП" Тогда
		КПП = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКПП = СтрДлина(КПП);
		Если ДлинаКПП = 9 ИЛИ ДлинаКПП = 0 Тогда
			Область.Значение = КПП;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='КПП должен состоять из 9 символов. Значение очищено.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "ИГК" ИЛИ ИмяПоказателя = "НомерКонтракта" Тогда
		
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("ИГК", ТабличныйДокумент.Область("ИГК").Значение);
		СтруктПарам.Вставить("НомерКонтракта", ТабличныйДокумент.Область("НомерКонтракта").Значение);
		СтруктПарам.Вставить("НомерСтраницы",
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= ПредставлениеСтраницыРаздела1(СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета
			= ПредставлениеСтраницыРаздела1(СтруктПарам);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтраницыРаздела1(СтруктураПараметров)
	
	ИГК = СокрЛП(СтруктураПараметров.ИГК);
	НомерКонтракта = СокрЛП(СтруктураПараметров.НомерКонтракта);
	
	ПредстСтр = "";
	Если ЗначениеЗаполнено(ИГК) Тогда
		ПредстСтр = "ИГК " + ИГК;
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерКонтракта) Тогда
		ПредстСтр = ?(ЗначениеЗаполнено(ПредстСтр), ПредстСтр + " № " + НомерКонтракта, "№ " + НомерКонтракта);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПечатьСтраницы") Тогда
		
		Если ПредстСтр = "" Тогда
			Возврат "Исполнение контрактов ГОЗ";
		Иначе
			Возврат ПредстСтр;
		КонецЕсли;
		
	Иначе // представление страницы в форме отчета
		
		Если ПредстСтр = "" Тогда
			Возврат "Стр. " + Формат(СтруктураПараметров.НомерСтраницы, "ЧГ=");
		Иначе
			Возврат ПредстСтр;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОчиститьВыбранныеКонтракты()
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилищеКонтракты",
	ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Если ИмяРаздела = "Титульный" Тогда
		
		Форма.ТабличныйДокумент.Области.Найти("СекцияНомерКорректировки").Видимость = Ложь;
		Форма.ТабличныйДокумент.Области.Найти("СекцияДатаПодписи").Видимость = Ложь;
		
		Форма.ТабличныйДокумент.Области.Найти("СекцияКПП").Видимость = НЕ Форма.СтруктураРеквизитовФормы.ИП;
		
		Форма.ТабличныйДокумент.Области.Найти("ТекстНаимОрг").Текст = ?(Форма.СтруктураРеквизитовФормы.ИП,
		"Фамилия, имя, отчество индивидуального предпринимателя", "Наименование организации");
		
		СекцияНастройкаЗаполнения = Форма.ТабличныйДокумент.Области.Найти("СекцияНастройкаЗаполнения");
		ОблКонтракты = Форма.ТабличныйДокумент.Области.Найти("Контракты");
		
		Если РеализованВыборКонтрактов(Форма) Тогда
			Если ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.Найти("ПрПоВыбраннымКонтрактам").Значение) Тогда
				ОблКонтракты.Текст = "Контракты";
				ОблКонтракты.Гиперссылка = Истина;
			Иначе
				ОблКонтракты.Текст = "";
				ОблКонтракты.Гиперссылка = Ложь;
			Конецесли;
		Иначе
			СекцияНастройкаЗаполнения = Форма.ТабличныйДокумент.Области.Найти("СекцияНастройкаЗаполнения");
			Если СекцияНастройкаЗаполнения <> Неопределено Тогда
				СекцияНастройкаЗаполнения.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.Найти("ТекстОргПодписант").Текст
		= "Фамилия, имя, отчество " + ?(Форма.СтруктураРеквизитовФормы.ИП,
		"уполномоченного лица", "руководителя организации или иного уполномоченного лица");
		
	ИначеЕсли ИмяРаздела = "Раздел1" Тогда
		
		Структ = Форма.СтруктураЗависимыхЯчеекДляАвторасчета["Раздел1"];
		
		Для каждого Пок Из Структ Цикл
			Обл = Форма.ТабличныйДокумент.Область(Пок.Ключ);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела)
	
	Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Истина
			И НЕ Обл.Защита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"]
		 ИЛИ Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"] Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = МногострочнаяЧастьТекущейОбласти(Форма, Обл.Имя);
		Если ИмяГруппы = Неопределено Тогда
			ИмяПоиска = Обл.Имя;
		Иначе
			ИмяПоиска = Лев(Обл.Имя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска) Тогда
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИДОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		ИДРедакцииОтчета(ЭтаФорма.ИмяФормы) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ДобавитьСтраницуУровня0(ИмяРаздела);
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
		Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	УдалитьСтраницуУровня0(ИмяРаздела);
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОкрПоФормату(Форма, ЗначПоказателя)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЗначПоказателя)
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И СтрНачинаетсяС(ОбластьИмя, "П0") Тогда
				
				ОбластиТД = Форма.ТабличныйДокумент.Области;
				
				Стр1_1_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000001100004"].Значение);
				Стр1_1_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000001100006"].Значение);
				Стр1_1_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000001100007"].Значение);
				Стр1_1_Гр3 = Стр1_1_Гр7 - (Стр1_1_Гр4 + Стр1_1_Гр6);
				ОбластиТД["П000001100003"].Значение = Стр1_1_Гр3;
				
				Стр1_1_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000001100001"].Значение);
				Стр1_1_Гр2 = ?(Стр1_1_Гр1 = 0, 0, Окр(Стр1_1_Гр3 * 100 / Стр1_1_Гр1, 2));
				ОбластиТД["П000001100002"].Значение = Стр1_1_Гр2;
				
				Стр1_2_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000001200004"].Значение);
				Стр1_2_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000001200006"].Значение);
				Стр1_2_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000001200007"].Значение);
				Стр1_2_Гр3 = Стр1_2_Гр7 - (Стр1_2_Гр4 + Стр1_2_Гр6);
				ОбластиТД["П000001200003"].Значение = Стр1_2_Гр3;
				
				Стр1_2_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000001200001"].Значение);
				Стр1_2_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000001200007"].Значение);
				Стр1_2_Гр2 = ?(Стр1_2_Гр1 = 0, 0, Окр(Стр1_2_Гр7 * 100 / Стр1_2_Гр1, 2));
				ОбластиТД["П000001200002"].Значение = Стр1_2_Гр2;
				
				Стр1_3_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000001300004"].Значение);
				Стр1_3_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000001300006"].Значение);
				Стр1_3_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000001300007"].Значение);
				Стр1_3_Гр3 = Стр1_3_Гр7 - (Стр1_3_Гр4 + Стр1_3_Гр6);
				ОбластиТД["П000001300003"].Значение = Стр1_3_Гр3;
				
				Стр1_4_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000001400004"].Значение);
				Стр1_4_Гр5 = ОкрПоФормату(Форма, ОбластиТД["П000001400005"].Значение);
				Стр1_4_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000001400006"].Значение);
				Стр1_4_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000001400007"].Значение);
				Стр1_4_Гр3 = Стр1_4_Гр7 - (Стр1_4_Гр4 + Стр1_4_Гр5 + Стр1_4_Гр6);
				ОбластиТД["П000001400003"].Значение = Стр1_4_Гр3;
				
				Стр1_Гр3 = Стр1_1_Гр3 + Стр1_2_Гр3 + Стр1_3_Гр3 + Стр1_4_Гр3;
				ОбластиТД["П000001000003"].Значение = Стр1_Гр3;
				
				Стр1_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000001000001"].Значение);
				Стр1_Гр2 = ?(Стр1_Гр1 = 0, 0, Окр(Стр1_Гр3 * 100 / Стр1_Гр1, 2));
				ОбластиТД["П000001000002"].Значение = Стр1_Гр2;
				
				Стр2_1_1_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002110004"].Значение);
				Стр2_1_2_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002120004"].Значение);
				Стр2_1_3_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002130004"].Значение);
				Стр2_1_Гр4 = Стр2_1_1_Гр4 + Стр2_1_2_Гр4 + Стр2_1_3_Гр4;
				ОбластиТД["П000002100004"].Значение = Стр2_1_Гр4;
				
				Стр2_1_3_Гр5 = ОкрПоФормату(Форма, ОбластиТД["П000002130005"].Значение);
				Стр2_1_Гр5 = Стр2_1_3_Гр5;
				ОбластиТД["П000002100005"].Значение = Стр2_1_Гр5;
				
				Стр2_1_1_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002110006"].Значение);
				Стр2_1_3_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002130006"].Значение);
				Стр2_1_Гр6 = Стр2_1_1_Гр6 + Стр2_1_3_Гр6;
				ОбластиТД["П000002100006"].Значение = Стр2_1_Гр6;
				
				Стр2_1_1_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002110007"].Значение);
				Стр2_1_2_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002120007"].Значение);
				Стр2_1_3_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002130007"].Значение);
				Стр2_1_Гр7 = Стр2_1_1_Гр7 + Стр2_1_2_Гр7 + Стр2_1_3_Гр7;
				ОбластиТД["П000002100007"].Значение = Стр2_1_Гр7;
				
				Стр2_1_1_Гр8 = ОкрПоФормату(Форма, ОбластиТД["П000002110008"].Значение);
				Стр2_1_Гр8 = Стр2_1_1_Гр8;
				ОбластиТД["П000002100008"].Значение = Стр2_1_Гр8;
				
				Стр2_1_1_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002110009"].Значение);
				Стр2_1_3_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002130009"].Значение);
				Стр2_1_Гр9 = Стр2_1_1_Гр9 + Стр2_1_3_Гр9;
				ОбластиТД["П000002100009"].Значение = Стр2_1_Гр9;
				
				Стр2_1_Гр3 = (Стр2_1_Гр4 + Стр2_1_Гр5 + Стр2_1_Гр6) - (Стр2_1_Гр7 + Стр2_1_Гр8 + Стр2_1_Гр9);
				ОбластиТД["П000002100003"].Значение = Стр2_1_Гр3;
				
				Стр2_1_1_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002110004"].Значение);
				Стр2_1_1_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002110006"].Значение);
				Стр2_1_1_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002110007"].Значение);
				Стр2_1_1_Гр8 = ОкрПоФормату(Форма, ОбластиТД["П000002110008"].Значение);
				Стр2_1_1_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002110009"].Значение);
				Стр2_1_1_Гр3 = (Стр2_1_1_Гр4 + Стр2_1_1_Гр6) - (Стр2_1_1_Гр7 + Стр2_1_1_Гр8 + Стр2_1_1_Гр9);
				ОбластиТД["П000002110003"].Значение = Стр2_1_1_Гр3;
				
				Стр2_1_2_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002120004"].Значение);
				Стр2_1_2_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002120007"].Значение);
				Стр2_1_2_Гр3 = Стр2_1_2_Гр4 - Стр2_1_2_Гр7;
				ОбластиТД["П000002120003"].Значение = Стр2_1_2_Гр3;
				
				Стр2_1_3_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002130004"].Значение);
				Стр2_1_3_Гр5 = ОкрПоФормату(Форма, ОбластиТД["П000002130005"].Значение);
				Стр2_1_3_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002130006"].Значение);
				Стр2_1_3_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002130007"].Значение);
				Стр2_1_3_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002130009"].Значение);
				Стр2_1_3_Гр3 = (Стр2_1_3_Гр4 + Стр2_1_3_Гр5 + Стр2_1_3_Гр6) - (Стр2_1_3_Гр7 + Стр2_1_3_Гр9);
				ОбластиТД["П000002130003"].Значение = Стр2_1_3_Гр3;
				
				Стр2_2_1_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002210004"].Значение);
				Стр2_2_2_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002220004"].Значение);
				Стр2_2_3_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002230004"].Значение);
				Стр2_2_4_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002240004"].Значение);
				Стр2_2_5_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002250004"].Значение);
				Стр2_2_6_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002260004"].Значение);
				Стр2_2_Гр4 = Стр2_2_1_Гр4 + Стр2_2_2_Гр4 + Стр2_2_3_Гр4 + Стр2_2_4_Гр4 + Стр2_2_5_Гр4 + Стр2_2_6_Гр4;
				ОбластиТД["П000002200004"].Значение = Стр2_2_Гр4;
				
				Стр2_2_1_Гр5 = ОкрПоФормату(Форма, ОбластиТД["П000002210005"].Значение);
				Стр2_2_3_Гр5 = ОкрПоФормату(Форма, ОбластиТД["П000002230005"].Значение);
				Стр2_2_6_Гр5 = ОкрПоФормату(Форма, ОбластиТД["П000002260005"].Значение);
				Стр2_2_Гр5 = Стр2_2_1_Гр5 + Стр2_2_3_Гр5 + Стр2_2_6_Гр5;
				ОбластиТД["П000002200005"].Значение = Стр2_2_Гр5;
				
				Стр2_2_1_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002210006"].Значение);
				Стр2_2_3_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002230006"].Значение);
				Стр2_2_6_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002260006"].Значение);
				Стр2_2_Гр6 = Стр2_2_1_Гр6 + Стр2_2_3_Гр6 + Стр2_2_6_Гр6;
				ОбластиТД["П000002200006"].Значение = Стр2_2_Гр6;
				
				Стр2_2_1_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002210007"].Значение);
				Стр2_2_2_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002220007"].Значение);
				Стр2_2_3_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002230007"].Значение);
				Стр2_2_4_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002240007"].Значение);
				Стр2_2_5_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002250007"].Значение);
				Стр2_2_6_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002260007"].Значение);
				Стр2_2_Гр7 = Стр2_2_1_Гр7 + Стр2_2_2_Гр7 + Стр2_2_3_Гр7 + Стр2_2_4_Гр7 + Стр2_2_5_Гр7 + Стр2_2_6_Гр7;
				ОбластиТД["П000002200007"].Значение = Стр2_2_Гр7;
				
				Стр2_2_1_Гр8 = ОкрПоФормату(Форма, ОбластиТД["П000002210008"].Значение);
				Стр2_2_3_Гр8 = ОкрПоФормату(Форма, ОбластиТД["П000002230008"].Значение);
				Стр2_2_6_Гр8 = ОкрПоФормату(Форма, ОбластиТД["П000002260008"].Значение);
				Стр2_2_Гр8 = Стр2_2_1_Гр8 + Стр2_2_3_Гр8 + Стр2_2_6_Гр8;
				ОбластиТД["П000002200008"].Значение = Стр2_2_Гр8;
				
				Стр2_2_1_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002210009"].Значение);
				Стр2_2_2_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002220009"].Значение);
				Стр2_2_3_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002230009"].Значение);
				Стр2_2_4_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002240009"].Значение);
				Стр2_2_6_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002260009"].Значение);
				Стр2_2_Гр9 = Стр2_2_1_Гр9 + Стр2_2_2_Гр9 + Стр2_2_3_Гр9 + Стр2_2_4_Гр9 + Стр2_2_6_Гр9;
				ОбластиТД["П000002200009"].Значение = Стр2_2_Гр9;
				
				Стр2_2_Гр3 = (Стр2_2_Гр4 + Стр2_2_Гр5 + Стр2_2_Гр6) - (Стр2_2_Гр7 + Стр2_2_Гр8 + Стр2_2_Гр9);
				ОбластиТД["П000002200003"].Значение = Стр2_2_Гр3;
				
				Стр2_2_1_Гр3 = (Стр2_2_1_Гр4 + Стр2_2_1_Гр5 + Стр2_2_1_Гр6) - (Стр2_2_1_Гр7 + Стр2_2_1_Гр8 + Стр2_2_1_Гр9);
				ОбластиТД["П000002210003"].Значение = Стр2_2_1_Гр3;
				
				Стр2_2_2_Гр3 = Стр2_2_2_Гр4 - (Стр2_2_2_Гр7 + Стр2_2_2_Гр9);
				ОбластиТД["П000002220003"].Значение = Стр2_2_2_Гр3;
				
				Стр2_2_3_Гр3 = (Стр2_2_3_Гр4 + Стр2_2_3_Гр5 + Стр2_2_3_Гр6) - (Стр2_2_3_Гр7 + Стр2_2_3_Гр8 + Стр2_2_3_Гр9);
				ОбластиТД["П000002230003"].Значение = Стр2_2_3_Гр3;
				
				Стр2_2_4_Гр3 = Стр2_2_4_Гр4 - (Стр2_2_4_Гр7 + Стр2_2_4_Гр9);
				ОбластиТД["П000002240003"].Значение = Стр2_2_4_Гр3;
				
				Стр2_2_5_Гр3 = Стр2_2_5_Гр4 - Стр2_2_5_Гр7;
				ОбластиТД["П000002250003"].Значение = Стр2_2_5_Гр3;
				
				Стр2_2_6_Гр3 = (Стр2_2_6_Гр4 + Стр2_2_6_Гр5 + Стр2_2_6_Гр6) - (Стр2_2_6_Гр7 + Стр2_2_6_Гр8 + Стр2_2_6_Гр9);
				ОбластиТД["П000002260003"].Значение = Стр2_2_6_Гр3;
				
				Стр2_3_1_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002310004"].Значение);
				Стр2_3_3_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002330004"].Значение);
				Стр2_3_6_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002360004"].Значение);
				Стр2_3_Гр4 = Стр2_3_1_Гр4 + Стр2_3_3_Гр4 + Стр2_3_6_Гр4;
				ОбластиТД["П000002300004"].Значение = Стр2_3_Гр4;
				
				Стр2_3_1_Гр5 = ОкрПоФормату(Форма, ОбластиТД["П000002310005"].Значение);
				Стр2_3_3_Гр5 = ОкрПоФормату(Форма, ОбластиТД["П000002330005"].Значение);
				Стр2_3_Гр5 = Стр2_3_1_Гр5 + Стр2_3_3_Гр5;
				ОбластиТД["П000002300005"].Значение = Стр2_3_Гр5;
				
				Стр2_3_1_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002310006"].Значение);
				Стр2_3_2_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002320006"].Значение);
				Стр2_3_3_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002330006"].Значение);
				Стр2_3_4_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002340006"].Значение);
				Стр2_3_5_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002350006"].Значение);
				Стр2_3_Гр6 = Стр2_3_1_Гр6 + Стр2_3_2_Гр6 + Стр2_3_3_Гр6 + Стр2_3_4_Гр6 + Стр2_3_5_Гр6;
				ОбластиТД["П000002300006"].Значение = Стр2_3_Гр6;
				
				Стр2_3_1_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002310007"].Значение);
				Стр2_3_3_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002330007"].Значение);
				Стр2_3_7_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002370007"].Значение);
				Стр2_3_8_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002380007"].Значение);
				Стр2_3_Гр7 = Стр2_3_1_Гр7 + Стр2_3_3_Гр7 + Стр2_3_7_Гр7 + Стр2_3_8_Гр7;
				ОбластиТД["П000002300007"].Значение = Стр2_3_Гр7;
				
				Стр2_3_1_Гр8 = ОкрПоФормату(Форма, ОбластиТД["П000002310008"].Значение);
				Стр2_3_3_Гр8 = ОкрПоФормату(Форма, ОбластиТД["П000002330008"].Значение);
				Стр2_3_Гр8 = Стр2_3_1_Гр8 + Стр2_3_3_Гр8;
				ОбластиТД["П000002300008"].Значение = Стр2_3_Гр8;
				
				Стр2_3_1_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002310009"].Значение);
				Стр2_3_3_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002330009"].Значение);
				Стр2_3_Гр9 = Стр2_3_1_Гр9 + Стр2_3_3_Гр9;
				ОбластиТД["П000002300009"].Значение = Стр2_3_Гр9;
				
				Стр2_3_Гр3 = (Стр2_3_Гр4 + Стр2_3_Гр5 + Стр2_3_Гр6) - (Стр2_3_Гр7 + Стр2_3_Гр8 + Стр2_3_Гр9);
				ОбластиТД["П000002300003"].Значение = Стр2_3_Гр3;
				
				Стр2_3_1_Гр3 = (Стр2_3_1_Гр4 + Стр2_3_1_Гр5 + Стр2_3_1_Гр6) - (Стр2_3_1_Гр7 + Стр2_3_1_Гр8 + Стр2_3_1_Гр9);
				ОбластиТД["П000002310003"].Значение = Стр2_3_1_Гр3;
				
				Стр2_3_1_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000002310001"].Значение);
				Стр2_3_1_Гр2 = ?(Стр2_3_1_Гр1 = 0, 0, Окр(Стр2_3_1_Гр3 * 100 / Стр2_3_1_Гр1, 2));
				ОбластиТД["П000002310002"].Значение = Стр2_3_1_Гр2;
				
				Стр2_3_2_Гр3 = Стр2_3_2_Гр6;
				ОбластиТД["П000002320003"].Значение = Стр2_3_2_Гр3;
				
				Стр2_3_2_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000002320001"].Значение);
				Стр2_3_2_Гр2 = ?(Стр2_3_2_Гр1 = 0, 0, Окр(Стр2_3_2_Гр3 * 100 / Стр2_3_2_Гр1, 2));
				ОбластиТД["П000002320002"].Значение = Стр2_3_2_Гр2;
				
				Стр2_3_3_Гр3 = (Стр2_3_3_Гр4 + Стр2_3_3_Гр5 + Стр2_3_3_Гр6) - (Стр2_3_3_Гр7 + Стр2_3_3_Гр8 + Стр2_3_3_Гр9);
				ОбластиТД["П000002330003"].Значение = Стр2_3_3_Гр3;
				
				Стр2_3_3_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000002330001"].Значение);
				Стр2_3_3_Гр2 = ?(Стр2_3_3_Гр1 = 0, 0, Окр(Стр2_3_3_Гр3 * 100 / Стр2_3_3_Гр1, 2));
				ОбластиТД["П000002330002"].Значение = Стр2_3_3_Гр2;
				
				Стр2_3_4_Гр3 = Стр2_3_4_Гр6;
				ОбластиТД["П000002340003"].Значение = Стр2_3_4_Гр3;
				
				Стр2_3_4_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000002340001"].Значение);
				Стр2_3_4_Гр2 = ?(Стр2_3_4_Гр1 = 0, 0, Окр(Стр2_3_4_Гр3 * 100 / Стр2_3_4_Гр1, 2));
				ОбластиТД["П000002340002"].Значение = Стр2_3_4_Гр2;
				
				Стр2_3_5_Гр3 = Стр2_3_5_Гр6;
				ОбластиТД["П000002350003"].Значение = Стр2_3_5_Гр3;
				
				Стр2_3_5_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000002350001"].Значение);
				Стр2_3_5_Гр2 = ?(Стр2_3_5_Гр1 = 0, 0, Окр(Стр2_3_5_Гр3 * 100 / Стр2_3_5_Гр1, 2));
				ОбластиТД["П000002350002"].Значение = Стр2_3_5_Гр2;
				
				Стр2_3_6_Гр3 = Стр2_3_6_Гр4;
				ОбластиТД["П000002360003"].Значение = Стр2_3_6_Гр3;
				
				Стр2_3_7_Гр3 = - Стр2_3_7_Гр7;
				ОбластиТД["П000002370003"].Значение = Стр2_3_7_Гр3;
				
				Стр2_3_8_Гр3 = - Стр2_3_8_Гр7;
				ОбластиТД["П000002380003"].Значение = Стр2_3_8_Гр3;
				
				Стр2_4_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000002400004"].Значение);
				Стр2_4_Гр5 = ОкрПоФормату(Форма, ОбластиТД["П000002400005"].Значение);
				Стр2_4_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000002400006"].Значение);
				Стр2_4_Гр7 = ОкрПоФормату(Форма, ОбластиТД["П000002400007"].Значение);
				Стр2_4_Гр8 = ОкрПоФормату(Форма, ОбластиТД["П000002400008"].Значение);
				Стр2_4_Гр9 = ОкрПоФормату(Форма, ОбластиТД["П000002400009"].Значение);
				Стр2_4_Гр3 = (Стр2_4_Гр4 + Стр2_4_Гр5 + Стр2_4_Гр6) - (Стр2_4_Гр7 + Стр2_4_Гр8 + Стр2_4_Гр9);
				ОбластиТД["П000002400003"].Значение = Стр2_4_Гр3;
				
				Стр3_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000003000001"].Значение);
				Стр3_Гр3 = ОкрПоФормату(Форма, ОбластиТД["П000003000003"].Значение);
				Стр3_Гр2 = ?(Стр3_Гр1 = 0, 0, Окр(Стр3_Гр3 * 100 / Стр3_Гр1, 2));
				ОбластиТД["П000003000002"].Значение = Стр3_Гр2;
				
				Стр3_1_Гр1 = Стр2_3_1_Гр1 + Стр2_3_2_Гр1 + Стр2_3_3_Гр1 + Стр2_3_4_Гр1 + Стр2_3_5_Гр1;
				ОбластиТД["П000003100001"].Значение = Стр3_1_Гр1;
				
				Стр3_1_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000003100004"].Значение);
				Стр3_1_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000003100006"].Значение);
				Стр3_1_Гр3 = Стр3_1_Гр4 + Стр3_1_Гр6;
				ОбластиТД["П000003100003"].Значение = Стр3_1_Гр3;
				
				Стр3_1_Гр2 = ?(Стр3_1_Гр1 = 0, 0, Окр(Стр3_1_Гр3 * 100 / Стр3_1_Гр1, 2));
				ОбластиТД["П000003100002"].Значение = Стр3_1_Гр2;
				
				Стр3_2_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000003200006"].Значение);
				Стр3_2_Гр3 = Стр3_2_Гр6;
				ОбластиТД["П000003200003"].Значение = Стр3_2_Гр3;
				
				Стр3_2_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000003200001"].Значение);
				Стр3_2_Гр2 = ?(Стр3_2_Гр1 = 0, 0, Окр(Стр3_2_Гр3 * 100 / Стр3_2_Гр1, 2));
				ОбластиТД["П000003200002"].Значение = Стр3_2_Гр2;
				
				Стр3_3_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000003300004"].Значение);
				Стр3_3_Гр3 = Стр3_3_Гр4;
				ОбластиТД["П000003300003"].Значение = Стр3_3_Гр3;
				
				Стр3_3_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000003300001"].Значение);
				Стр3_3_Гр2 = ?(Стр3_3_Гр1 = 0, 0, Окр(Стр3_3_Гр3 * 100 / Стр3_3_Гр1, 2));
				ОбластиТД["П000003300002"].Значение = Стр3_3_Гр2;
				
				Стр3_4_Гр4 = ОкрПоФормату(Форма, ОбластиТД["П000003400004"].Значение);
				Стр3_4_Гр3 = Стр3_4_Гр4;
				ОбластиТД["П000003400003"].Значение = Стр3_4_Гр3;
				
				Стр3_4_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000003400001"].Значение);
				Стр3_4_Гр2 = ?(Стр3_4_Гр1 = 0, 0, Окр(Стр3_4_Гр3 * 100 / Стр3_4_Гр1, 2));
				ОбластиТД["П000003400002"].Значение = Стр3_4_Гр2;
				
				Стр3_5_Гр6 = ОкрПоФормату(Форма, ОбластиТД["П000003500006"].Значение);
				Стр3_5_Гр3 = Стр3_5_Гр6;
				ОбластиТД["П000003500003"].Значение = Стр3_5_Гр3;
				
				Стр5_Гр3 = ОкрПоФормату(Форма, ОбластиТД["П000005000003"].Значение);
				Стр2_Гр3 = Стр2_1_Гр3 + Стр2_2_Гр3 + Стр2_3_Гр3 + Стр2_4_Гр3
				+ Стр3_1_Гр3 + Стр3_2_Гр3 + Стр3_3_Гр3 + Стр3_4_Гр3 + Стр3_5_Гр3 + Стр5_Гр3;
				ОбластиТД["П000002000003"].Значение = Стр2_Гр3;
				
				Стр3_6_Гр3 = Стр3_Гр3 - (Стр3_1_Гр3 + Стр3_2_Гр3 + Стр3_3_Гр3 + Стр3_4_Гр3 + Стр3_5_Гр3);
				ОбластиТД["П000003600003"].Значение = Стр3_6_Гр3;
				
				Стр3_6_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000003600001"].Значение);
				Стр3_6_Гр2 = ?(Стр3_6_Гр1 = 0, 0, Окр(Стр3_6_Гр3 * 100 / Стр3_6_Гр1, 2));
				ОбластиТД["П000003600002"].Значение = Стр3_6_Гр2;
				
				Стр4_Гр5 = Стр1_4_Гр5 + Стр2_1_Гр5 + Стр2_2_Гр5 + Стр2_3_Гр5 + Стр2_4_Гр5;
				ОбластиТД["П000004000005"].Значение = Стр4_Гр5;
				
				Стр4_Гр6 = Стр1_1_Гр6 + Стр1_2_Гр6 + Стр1_3_Гр6 + Стр1_4_Гр6
				+ Стр2_1_Гр6 + Стр2_2_Гр6 + Стр2_3_Гр6 + Стр2_4_Гр6 + Стр3_1_Гр6 + Стр3_2_Гр6 + Стр3_5_Гр6;
				ОбластиТД["П000004000006"].Значение = Стр4_Гр6;
				
				Стр4_Гр8 = Стр2_1_Гр8 + Стр2_2_Гр8 + Стр2_3_Гр8 + Стр2_4_Гр8;
				ОбластиТД["П000004000008"].Значение = Стр4_Гр8;
				
				Стр4_Гр9 = Стр2_1_Гр9 + Стр2_2_Гр9 + Стр2_3_Гр9 + Стр2_4_Гр9;
				ОбластиТД["П000004000009"].Значение = Стр4_Гр9;
				
				Стр4_Гр3 = (Стр4_Гр5 + Стр4_Гр6) - (Стр4_Гр8 + Стр4_Гр9);
				ОбластиТД["П000004000003"].Значение = Стр4_Гр3;
				
				Стр5_Гр1 = ОкрПоФормату(Форма, ОбластиТД["П000005000001"].Значение);
				Стр5_Гр2 = ?(Стр5_Гр1 = 0, 0, Окр(Стр5_Гр3 * 100 / Стр5_Гр1, 2));
				ОбластиТД["П000005000002"].Значение = Стр5_Гр2;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого ВеткаР Из ДеревоДанных.Строки Цикл
			
			Если ВеткаР = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР.Данные Цикл
					ВеткаР.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			Стр1_1_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001100004"]);
			Стр1_1_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001100006"]);
			Стр1_1_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001100007"]);
			Стр1_1_Гр3 = Стр1_1_Гр7 - (Стр1_1_Гр4 + Стр1_1_Гр6);
			ВеткаР.Данные.Вставить("П000001100003", Стр1_1_Гр3);
			
			Стр1_1_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001100001"]);
			Стр1_1_Гр2 = ?(Стр1_1_Гр1 = 0, 0, Окр(Стр1_1_Гр3 * 100 / Стр1_1_Гр1, 2));
			ВеткаР.Данные.Вставить("П000001100002", Стр1_1_Гр2);
			
			Стр1_2_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001200004"]);
			Стр1_2_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001200006"]);
			Стр1_2_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001200007"]);
			Стр1_2_Гр3 = Стр1_2_Гр7 - (Стр1_2_Гр4 + Стр1_2_Гр6);
			ВеткаР.Данные.Вставить("П000001200003", Стр1_2_Гр3);
			
			Стр1_2_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001200001"]);
			Стр1_2_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001200007"]);
			Стр1_2_Гр2 = ?(Стр1_2_Гр1 = 0, 0, Окр(Стр1_2_Гр7 * 100 / Стр1_2_Гр1, 2));
			ВеткаР.Данные.Вставить("П000001200002", Стр1_2_Гр2);
			
			Стр1_3_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001300004"]);
			Стр1_3_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001300006"]);
			Стр1_3_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001300007"]);
			Стр1_3_Гр3 = Стр1_3_Гр7 - (Стр1_3_Гр4 + Стр1_3_Гр6);
			ВеткаР.Данные.Вставить("П000001300003", Стр1_3_Гр3);
			
			Стр1_4_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001400004"]);
			Стр1_4_Гр5 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001400005"]);
			Стр1_4_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001400006"]);
			Стр1_4_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001400007"]);
			Стр1_4_Гр3 = Стр1_4_Гр7 - (Стр1_4_Гр4 + Стр1_4_Гр5 + Стр1_4_Гр6);
			ВеткаР.Данные.Вставить("П000001400003", Стр1_4_Гр3);
			
			Стр1_Гр3 = Стр1_1_Гр3 + Стр1_2_Гр3 + Стр1_3_Гр3 + Стр1_4_Гр3;
			ВеткаР.Данные.Вставить("П000001000003", Стр1_Гр3);
			
			Стр1_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000001000001"]);
			Стр1_Гр2 = ?(Стр1_Гр1 = 0, 0, Окр(Стр1_Гр3 * 100 / Стр1_Гр1, 2));
			ВеткаР.Данные.Вставить("П000001000002", Стр1_Гр2);
			
			Стр2_1_1_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110004"]);
			Стр2_1_2_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002120004"]);
			Стр2_1_3_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130004"]);
			Стр2_1_Гр4 = Стр2_1_1_Гр4 + Стр2_1_2_Гр4 + Стр2_1_3_Гр4;
			ВеткаР.Данные.Вставить("П000002100004", Стр2_1_Гр4);
			
			Стр2_1_3_Гр5 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130005"]);
			Стр2_1_Гр5 = Стр2_1_3_Гр5;
			ВеткаР.Данные.Вставить("П000002100005", Стр2_1_Гр5);
			
			Стр2_1_1_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110006"]);
			Стр2_1_3_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130006"]);
			Стр2_1_Гр6 = Стр2_1_1_Гр6 + Стр2_1_3_Гр6;
			ВеткаР.Данные.Вставить("П000002100006", Стр2_1_Гр6);
			
			Стр2_1_1_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110007"]);
			Стр2_1_2_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002120007"]);
			Стр2_1_3_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130007"]);
			Стр2_1_Гр7 = Стр2_1_1_Гр7 + Стр2_1_2_Гр7 + Стр2_1_3_Гр7;
			ВеткаР.Данные.Вставить("П000002100007", Стр2_1_Гр7);
			
			Стр2_1_1_Гр8 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110008"]);
			Стр2_1_Гр8 = Стр2_1_1_Гр8;
			ВеткаР.Данные.Вставить("П000002100008", Стр2_1_Гр8);
			
			Стр2_1_1_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110009"]);
			Стр2_1_3_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130009"]);
			Стр2_1_Гр9 = Стр2_1_1_Гр9 + Стр2_1_3_Гр9;
			ВеткаР.Данные.Вставить("П000002100009", Стр2_1_Гр9);
			
			Стр2_1_Гр3 = (Стр2_1_Гр4 + Стр2_1_Гр5 + Стр2_1_Гр6) - (Стр2_1_Гр7 + Стр2_1_Гр8 + Стр2_1_Гр9);
			ВеткаР.Данные.Вставить("П000002100003", Стр2_1_Гр3);
			
			Стр2_1_1_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110004"]);
			Стр2_1_1_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110006"]);
			Стр2_1_1_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110007"]);
			Стр2_1_1_Гр8 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110008"]);
			Стр2_1_1_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002110009"]);
			Стр2_1_1_Гр3 = (Стр2_1_1_Гр4 + Стр2_1_1_Гр6) - (Стр2_1_1_Гр7 + Стр2_1_1_Гр8 + Стр2_1_1_Гр9);
			ВеткаР.Данные.Вставить("П000002110003", Стр2_1_1_Гр3);
			
			Стр2_1_2_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002120004"]);
			Стр2_1_2_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002120007"]);
			Стр2_1_2_Гр3 = Стр2_1_2_Гр4 - Стр2_1_2_Гр7;
			ВеткаР.Данные.Вставить("П000002120003", Стр2_1_2_Гр3);
			
			Стр2_1_3_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130004"]);
			Стр2_1_3_Гр5 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130005"]);
			Стр2_1_3_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130006"]);
			Стр2_1_3_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130007"]);
			Стр2_1_3_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002130009"]);
			Стр2_1_3_Гр3 = (Стр2_1_3_Гр4 + Стр2_1_3_Гр5 + Стр2_1_3_Гр6) - (Стр2_1_3_Гр7 + Стр2_1_3_Гр9);
			ВеткаР.Данные.Вставить("П000002130003", Стр2_1_3_Гр3);
			
			Стр2_2_1_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002210004"]);
			Стр2_2_2_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002220004"]);
			Стр2_2_3_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002230004"]);
			Стр2_2_4_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002240004"]);
			Стр2_2_5_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002250004"]);
			Стр2_2_6_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002260004"]);
			Стр2_2_Гр4 = Стр2_2_1_Гр4 + Стр2_2_2_Гр4 + Стр2_2_3_Гр4 + Стр2_2_4_Гр4 + Стр2_2_5_Гр4 + Стр2_2_6_Гр4;
			ВеткаР.Данные.Вставить("П000002200004", Стр2_2_Гр4);
			
			Стр2_2_1_Гр5 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002210005"]);
			Стр2_2_3_Гр5 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002230005"]);
			Стр2_2_6_Гр5 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002260005"]);
			Стр2_2_Гр5 = Стр2_2_1_Гр5 + Стр2_2_3_Гр5 + Стр2_2_6_Гр5;
			ВеткаР.Данные.Вставить("П000002200005", Стр2_2_Гр5);
			
			Стр2_2_1_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002210006"]);
			Стр2_2_3_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002230006"]);
			Стр2_2_6_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002260006"]);
			Стр2_2_Гр6 = Стр2_2_1_Гр6 + Стр2_2_3_Гр6 + Стр2_2_6_Гр6;
			ВеткаР.Данные.Вставить("П000002200006", Стр2_2_Гр6);
			
			Стр2_2_1_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002210007"]);
			Стр2_2_2_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002220007"]);
			Стр2_2_3_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002230007"]);
			Стр2_2_4_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002240007"]);
			Стр2_2_5_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002250007"]);
			Стр2_2_6_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002260007"]);
			Стр2_2_Гр7 = Стр2_2_1_Гр7 + Стр2_2_2_Гр7 + Стр2_2_3_Гр7 + Стр2_2_4_Гр7 + Стр2_2_5_Гр7 + Стр2_2_6_Гр7;
			ВеткаР.Данные.Вставить("П000002200007", Стр2_2_Гр7);
			
			Стр2_2_1_Гр8 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002210008"]);
			Стр2_2_3_Гр8 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002230008"]);
			Стр2_2_6_Гр8 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002260008"]);
			Стр2_2_Гр8 = Стр2_2_1_Гр8 + Стр2_2_3_Гр8 + Стр2_2_6_Гр8;
			ВеткаР.Данные.Вставить("П000002200008", Стр2_2_Гр8);
			
			Стр2_2_1_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002210009"]);
			Стр2_2_2_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002220009"]);
			Стр2_2_3_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002230009"]);
			Стр2_2_4_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002240009"]);
			Стр2_2_6_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002260009"]);
			Стр2_2_Гр9 = Стр2_2_1_Гр9 + Стр2_2_2_Гр9 + Стр2_2_3_Гр9 + Стр2_2_4_Гр9 + Стр2_2_6_Гр9;
			ВеткаР.Данные.Вставить("П000002200009", Стр2_2_Гр9);
			
			Стр2_2_Гр3 = (Стр2_2_Гр4 + Стр2_2_Гр5 + Стр2_2_Гр6) - (Стр2_2_Гр7 + Стр2_2_Гр8 + Стр2_2_Гр9);
			ВеткаР.Данные.Вставить("П000002200003", Стр2_2_Гр3);
			
			Стр2_2_1_Гр3 = (Стр2_2_1_Гр4 + Стр2_2_1_Гр5 + Стр2_2_1_Гр6) - (Стр2_2_1_Гр7 + Стр2_2_1_Гр8 + Стр2_2_1_Гр9);
			ВеткаР.Данные.Вставить("П000002210003", Стр2_2_1_Гр3);
			
			Стр2_2_2_Гр3 = Стр2_2_2_Гр4 - (Стр2_2_2_Гр7 + Стр2_2_2_Гр9);
			ВеткаР.Данные.Вставить("П000002220003", Стр2_2_2_Гр3);
			
			Стр2_2_3_Гр3 = (Стр2_2_3_Гр4 + Стр2_2_3_Гр5 + Стр2_2_3_Гр6) - (Стр2_2_3_Гр7 + Стр2_2_3_Гр8 + Стр2_2_3_Гр9);
			ВеткаР.Данные.Вставить("П000002230003", Стр2_2_3_Гр3);
			
			Стр2_2_4_Гр3 = Стр2_2_4_Гр4 - (Стр2_2_4_Гр7 + Стр2_2_4_Гр9);
			ВеткаР.Данные.Вставить("П000002240003", Стр2_2_4_Гр3);
			
			Стр2_2_5_Гр3 = Стр2_2_5_Гр4 - Стр2_2_5_Гр7;
			ВеткаР.Данные.Вставить("П000002250003", Стр2_2_5_Гр3);
			
			Стр2_2_6_Гр3 = (Стр2_2_6_Гр4 + Стр2_2_6_Гр5 + Стр2_2_6_Гр6) - (Стр2_2_6_Гр7 + Стр2_2_6_Гр8 + Стр2_2_6_Гр9);
			ВеткаР.Данные.Вставить("П000002260003", Стр2_2_6_Гр3);
			
			Стр2_3_1_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002310004"]);
			Стр2_3_3_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002330004"]);
			Стр2_3_6_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002360004"]);
			Стр2_3_Гр4 = Стр2_3_1_Гр4 + Стр2_3_3_Гр4 + Стр2_3_6_Гр4;
			ВеткаР.Данные.Вставить("П000002300004", Стр2_3_Гр4);
			
			Стр2_3_1_Гр5 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002310005"]);
			Стр2_3_3_Гр5 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002330005"]);
			Стр2_3_Гр5 = Стр2_3_1_Гр5 + Стр2_3_3_Гр5;
			ВеткаР.Данные.Вставить("П000002300005", Стр2_3_Гр5);
			
			Стр2_3_1_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002310006"]);
			Стр2_3_2_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002320006"]);
			Стр2_3_3_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002330006"]);
			Стр2_3_4_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002340006"]);
			Стр2_3_5_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002350006"]);
			Стр2_3_Гр6 = Стр2_3_1_Гр6 + Стр2_3_2_Гр6 + Стр2_3_3_Гр6 + Стр2_3_4_Гр6 + Стр2_3_5_Гр6;
			ВеткаР.Данные.Вставить("П000002300006", Стр2_3_Гр6);
			
			Стр2_3_1_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002310007"]);
			Стр2_3_3_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002330007"]);
			Стр2_3_7_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002370007"]);
			Стр2_3_8_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002380007"]);
			Стр2_3_Гр7 = Стр2_3_1_Гр7 + Стр2_3_3_Гр7 + Стр2_3_7_Гр7 + Стр2_3_8_Гр7;
			ВеткаР.Данные.Вставить("П000002300007", Стр2_3_Гр7);
			
			Стр2_3_1_Гр8 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002310008"]);
			Стр2_3_3_Гр8 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002330008"]);
			Стр2_3_Гр8 = Стр2_3_1_Гр8 + Стр2_3_3_Гр8;
			ВеткаР.Данные.Вставить("П000002300008", Стр2_3_Гр8);
			
			Стр2_3_1_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002310009"]);
			Стр2_3_3_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002330009"]);
			Стр2_3_Гр9 = Стр2_3_1_Гр9 + Стр2_3_3_Гр9;
			ВеткаР.Данные.Вставить("П000002300009", Стр2_3_Гр9);
			
			Стр2_3_Гр3 = (Стр2_3_Гр4 + Стр2_3_Гр5 + Стр2_3_Гр6) - (Стр2_3_Гр7 + Стр2_3_Гр8 + Стр2_3_Гр9);
			ВеткаР.Данные.Вставить("П000002300003", Стр2_3_Гр3);
			
			Стр2_3_1_Гр3 = (Стр2_3_1_Гр4 + Стр2_3_1_Гр5 + Стр2_3_1_Гр6) - (Стр2_3_1_Гр7 + Стр2_3_1_Гр8 + Стр2_3_1_Гр9);
			ВеткаР.Данные.Вставить("П000002310003", Стр2_3_1_Гр3);
			
			Стр2_3_1_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002310001"]);
			Стр2_3_1_Гр2 = ?(Стр2_3_1_Гр1 = 0, 0, Окр(Стр2_3_1_Гр3 * 100 / Стр2_3_1_Гр1, 2));
			ВеткаР.Данные.Вставить("П000002310002", Стр2_3_1_Гр2);
			
			Стр2_3_2_Гр3 = Стр2_3_2_Гр6;
			ВеткаР.Данные.Вставить("П000002320003", Стр2_3_2_Гр3);
			
			Стр2_3_2_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002320001"]);
			Стр2_3_2_Гр2 = ?(Стр2_3_2_Гр1 = 0, 0, Окр(Стр2_3_2_Гр3 * 100 / Стр2_3_2_Гр1, 2));
			ВеткаР.Данные.Вставить("П000002320002", Стр2_3_2_Гр2);
			
			Стр2_3_3_Гр3 = (Стр2_3_3_Гр4 + Стр2_3_3_Гр5 + Стр2_3_3_Гр6) - (Стр2_3_3_Гр7 + Стр2_3_3_Гр8 + Стр2_3_3_Гр9);
			ВеткаР.Данные.Вставить("П000002330003", Стр2_3_3_Гр3);
			
			Стр2_3_3_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002330001"]);
			Стр2_3_3_Гр2 = ?(Стр2_3_3_Гр1 = 0, 0, Окр(Стр2_3_3_Гр3 * 100 / Стр2_3_3_Гр1, 2));
			ВеткаР.Данные.Вставить("П000002330002", Стр2_3_3_Гр2);
			
			Стр2_3_4_Гр3 = Стр2_3_4_Гр6;
			ВеткаР.Данные.Вставить("П000002340003", Стр2_3_4_Гр3);
			
			Стр2_3_4_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002340001"]);
			Стр2_3_4_Гр2 = ?(Стр2_3_4_Гр1 = 0, 0, Окр(Стр2_3_4_Гр3 * 100 / Стр2_3_4_Гр1, 2));
			ВеткаР.Данные.Вставить("П000002340002", Стр2_3_4_Гр2);
			
			Стр2_3_5_Гр3 = Стр2_3_5_Гр6;
			ВеткаР.Данные.Вставить("П000002350003", Стр2_3_5_Гр3);
			
			Стр2_3_5_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002350001"]);
			Стр2_3_5_Гр2 = ?(Стр2_3_5_Гр1 = 0, 0, Окр(Стр2_3_5_Гр3 * 100 / Стр2_3_5_Гр1, 2));
			ВеткаР.Данные.Вставить("П000002350002", Стр2_3_5_Гр2);
			
			Стр2_3_6_Гр3 = Стр2_3_6_Гр4;
			ВеткаР.Данные.Вставить("П000002360003", Стр2_3_6_Гр3);
			
			Стр2_3_7_Гр3 = - Стр2_3_7_Гр7;
			ВеткаР.Данные.Вставить("П000002370003", Стр2_3_7_Гр3);
			
			Стр2_3_8_Гр3 = - Стр2_3_8_Гр7;
			ВеткаР.Данные.Вставить("П000002380003", Стр2_3_8_Гр3);
			
			Стр2_4_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002400004"]);
			Стр2_4_Гр5 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002400005"]);
			Стр2_4_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002400006"]);
			Стр2_4_Гр7 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002400007"]);
			Стр2_4_Гр8 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002400008"]);
			Стр2_4_Гр9 = ОкрПоФормату(Форма, ВеткаР.Данные["П000002400009"]);
			Стр2_4_Гр3 = (Стр2_4_Гр4 + Стр2_4_Гр5 + Стр2_4_Гр6) - (Стр2_4_Гр7 + Стр2_4_Гр8 + Стр2_4_Гр9);
			ВеткаР.Данные.Вставить("П000002400003", Стр2_4_Гр3);
			
			Стр3_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003000001"]);
			Стр3_Гр3 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003000003"]);
			Стр3_Гр2 = ?(Стр3_Гр1 = 0, 0, Окр(Стр3_Гр3 * 100 / Стр3_Гр1, 2));
			ВеткаР.Данные.Вставить("П000003000002", Стр3_Гр2);
			
			Стр3_1_Гр1 = Стр2_3_1_Гр1 + Стр2_3_2_Гр1 + Стр2_3_3_Гр1 + Стр2_3_4_Гр1 + Стр2_3_5_Гр1;
			ВеткаР.Данные.Вставить("П000003100001", Стр3_1_Гр1);
			
			Стр3_1_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003100004"]);
			Стр3_1_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003100006"]);
			Стр3_1_Гр3 = Стр3_1_Гр4 + Стр3_1_Гр6;
			ВеткаР.Данные.Вставить("П000003100003", Стр3_1_Гр3);
			
			Стр3_1_Гр2 = ?(Стр3_1_Гр1 = 0, 0, Окр(Стр3_1_Гр3 * 100 / Стр3_1_Гр1, 2));
			ВеткаР.Данные.Вставить("П000003100002", Стр3_1_Гр2);
			
			Стр3_2_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003200006"]);
			Стр3_2_Гр3 = Стр3_2_Гр6;
			ВеткаР.Данные.Вставить("П000003200003", Стр3_2_Гр3);
			
			Стр3_2_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003200001"]);
			Стр3_2_Гр2 = ?(Стр3_2_Гр1 = 0, 0, Окр(Стр3_2_Гр3 * 100 / Стр3_2_Гр1, 2));
			ВеткаР.Данные.Вставить("П000003200002", Стр3_2_Гр2);
			
			Стр3_3_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003300004"]);
			Стр3_3_Гр3 = Стр3_3_Гр4;
			ВеткаР.Данные.Вставить("П000003300003", Стр3_3_Гр3);
			
			Стр3_3_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003300001"]);
			Стр3_3_Гр2 = ?(Стр3_3_Гр1 = 0, 0, Окр(Стр3_3_Гр3 * 100 / Стр3_3_Гр1, 2));
			ВеткаР.Данные.Вставить("П000003300002", Стр3_3_Гр2);
			
			Стр3_4_Гр4 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003400004"]);
			Стр3_4_Гр3 = Стр3_4_Гр4;
			ВеткаР.Данные.Вставить("П000003400003", Стр3_4_Гр3);
			
			Стр3_4_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003400001"]);
			Стр3_4_Гр2 = ?(Стр3_4_Гр1 = 0, 0, Окр(Стр3_4_Гр3 * 100 / Стр3_4_Гр1, 2));
			ВеткаР.Данные.Вставить("П000003400002", Стр3_4_Гр2);
			
			Стр3_5_Гр6 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003500006"]);
			Стр3_5_Гр3 = Стр3_5_Гр6;
			ВеткаР.Данные.Вставить("П000003500003", Стр3_5_Гр3);
			
			Стр5_Гр3 = ОкрПоФормату(Форма, ВеткаР.Данные["П000005000003"]);
			Стр2_Гр3 = Стр2_1_Гр3 + Стр2_2_Гр3 + Стр2_3_Гр3 + Стр2_4_Гр3
			+ Стр3_1_Гр3 + Стр3_2_Гр3 + Стр3_3_Гр3 + Стр3_4_Гр3 + Стр3_5_Гр3 + Стр5_Гр3;
			ВеткаР.Данные.Вставить("П000002000003", Стр2_Гр3);
			
			Стр3_6_Гр3 = Стр3_Гр3 - (Стр3_1_Гр3 + Стр3_2_Гр3 + Стр3_3_Гр3 + Стр3_4_Гр3 + Стр3_5_Гр3);
			ВеткаР.Данные.Вставить("П000003600003", Стр3_6_Гр3);
			
			Стр3_6_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000003600001"]);
			Стр3_6_Гр2 = ?(Стр3_6_Гр1 = 0, 0, Окр(Стр3_6_Гр3 * 100 / Стр3_6_Гр1, 2));
			ВеткаР.Данные.Вставить("П000003600002", Стр3_6_Гр2);
			
			Стр4_Гр5 = Стр1_4_Гр5 + Стр2_1_Гр5 + Стр2_2_Гр5 + Стр2_3_Гр5 + Стр2_4_Гр5;
			ВеткаР.Данные.Вставить("П000004000005", Стр4_Гр5);
			
			Стр4_Гр6 = Стр1_1_Гр6 + Стр1_2_Гр6 + Стр1_3_Гр6 + Стр1_4_Гр6
			+ Стр2_1_Гр6 + Стр2_2_Гр6 + Стр2_3_Гр6 + Стр2_4_Гр6 + Стр3_1_Гр6 + Стр3_2_Гр6 + Стр3_5_Гр6;
			ВеткаР.Данные.Вставить("П000004000006", Стр4_Гр6);
			
			Стр4_Гр8 = Стр2_1_Гр8 + Стр2_2_Гр8 + Стр2_3_Гр8 + Стр2_4_Гр8;
			ВеткаР.Данные.Вставить("П000004000008", Стр4_Гр8);
			
			Стр4_Гр9 = Стр2_1_Гр9 + Стр2_2_Гр9 + Стр2_3_Гр9 + Стр2_4_Гр9;
			ВеткаР.Данные.Вставить("П000004000009", Стр4_Гр9);
			
			Стр4_Гр3 = (Стр4_Гр5 + Стр4_Гр6) - (Стр4_Гр8 + Стр4_Гр9);
			ВеткаР.Данные.Вставить("П000004000003", Стр4_Гр3);
			
			Стр5_Гр1 = ОкрПоФормату(Форма, ВеткаР.Данные["П000005000001"]);
			Стр5_Гр2 = ?(Стр5_Гр1 = 0, 0, Окр(Стр5_Гр3 * 100 / Стр5_Гр1, 2));
			ВеткаР.Данные.Вставить("П000005000002", Стр5_Гр2);
			
			Если ВеткаР = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 1.
	Структ = Новый Структура;
	
	Структ.Вставить("П000001100003");
	Структ.Вставить("П000001100002");
	Структ.Вставить("П000001200003");
	Структ.Вставить("П000001200002");
	Структ.Вставить("П000001300003");
	Структ.Вставить("П000001400003");
	Структ.Вставить("П000001000003");
	Структ.Вставить("П000001000002");
	Структ.Вставить("П000002100004");
	Структ.Вставить("П000002100005");
	Структ.Вставить("П000002100006");
	Структ.Вставить("П000002100007");
	Структ.Вставить("П000002100008");
	Структ.Вставить("П000002100009");
	Структ.Вставить("П000002100003");
	Структ.Вставить("П000002110003");
	Структ.Вставить("П000002120003");
	Структ.Вставить("П000002130003");
	Структ.Вставить("П000002200004");
	Структ.Вставить("П000002200005");
	Структ.Вставить("П000002200006");
	Структ.Вставить("П000002200007");
	Структ.Вставить("П000002200008");
	Структ.Вставить("П000002200009");
	Структ.Вставить("П000002200003");
	Структ.Вставить("П000002210003");
	Структ.Вставить("П000002220003");
	Структ.Вставить("П000002230003");
	Структ.Вставить("П000002240003");
	Структ.Вставить("П000002250003");
	Структ.Вставить("П000002260003");
	Структ.Вставить("П000002300004");
	Структ.Вставить("П000002300005");
	Структ.Вставить("П000002300006");
	Структ.Вставить("П000002300007");
	Структ.Вставить("П000002300008");
	Структ.Вставить("П000002300009");
	Структ.Вставить("П000002300003");
	Структ.Вставить("П000002310003");
	Структ.Вставить("П000002310002");
	Структ.Вставить("П000002320003");
	Структ.Вставить("П000002320002");
	Структ.Вставить("П000002330003");
	Структ.Вставить("П000002330002");
	Структ.Вставить("П000002340003");
	Структ.Вставить("П000002340002");
	Структ.Вставить("П000002350003");
	Структ.Вставить("П000002350002");
	Структ.Вставить("П000002360003");
	Структ.Вставить("П000002370003");
	Структ.Вставить("П000002380003");
	Структ.Вставить("П000002400003");
	Структ.Вставить("П000003000002");
	Структ.Вставить("П000003100001");
	Структ.Вставить("П000003100003");
	Структ.Вставить("П000003100002");
	Структ.Вставить("П000003200003");
	Структ.Вставить("П000003200002");
	Структ.Вставить("П000003300003");
	Структ.Вставить("П000003300002");
	Структ.Вставить("П000003400003");
	Структ.Вставить("П000003400002");
	Структ.Вставить("П000003500003");
	Структ.Вставить("П000002000003");
	Структ.Вставить("П000003600003");
	Структ.Вставить("П000003600002");
	Структ.Вставить("П000004000005");
	Структ.Вставить("П000004000006");
	Структ.Вставить("П000004000008");
	Структ.Вставить("П000004000009");
	Структ.Вставить("П000004000003");
	Структ.Вставить("П000005000002");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 2 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""2"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда 
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " на " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(Титульный.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ДатаФормирования = ТекущаяДатаСеанса();
	Смещение_ЧетвертиЧаса = Окр(Число(ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата()) / 900);
	Смещение_Часы = Цел(Смещение_ЧетвертиЧаса / 4);
	ДобавкаЧасов = ?(Смещение_Часы >= 0, "+", "") + Формат(Смещение_Часы, "ЧГ=;ЧЦ=2;ЧВН=;ЧН=00");
	ДобавкаМинут = СтрЗаменить(Формат((Смещение_ЧетвертиЧаса - Смещение_Часы * 4) * 15, "ЧГ=;ЧЦ=2;ЧВН=;ЧН=00"), "-", "");
	ПараметрыВыгрузки.Вставить("ДатаФормирования",
	Формат(ДатаФормирования, "ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""") + ДобавкаЧасов + ":" + ДобавкаМинут);
	
	ПараметрыВыгрузки.Вставить("ДатаСоставленияОтчета",  СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("ДатаФормированияОтчета", НачалоДня(ДатаФормирования));
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Контракт");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки());
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ДеревоРаздела1 = ДанныеМногоуровневыхРазделов.Раздел1;
	
	// Проверка титульного листа.
	//
	Если СтруктураРеквизитовФормы.ИП Тогда
		СообщитьВТС("Формирование электронного представления отчета предусмотрено только для организаций.",
		"Титульный", "НаимОрг");
		Возврат Ложь;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("На титульном листе не задан ИНН организации.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС("На титульном листе задан ИНН организации, не состоящий из 10 цифр.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		Иначе
			ТекстСообщения = "";
			Если НЕ ИННСоответствуетТребованиям(ПараметрыВыгрузки.ИННОрг, ТекстСообщения) Тогда
				СообщитьВТС("На титульном листе неверно задан ИНН организации."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ИНН");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС("На титульном листе не задан КПП организации.", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС("На титульном листе задан КПП организации, не состоящий из 9 символов.", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		Иначе
			ТекстСообщения = "";
			Если НЕ КППСоответствуетТребованиям(ПараметрыВыгрузки.КПП, ТекстСообщения) Тогда
				СообщитьВТС("На титульном листе неверно задан КПП организации."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "КПП");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("На титульном листе не задано наименование организации.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ДатаСоставленияОтчета > ПараметрыВыгрузки.ДатаФормированияОтчета Тогда
		СообщитьВТС("На титульном листе дата составления отчета должна быть не больше даты формирования электронного представления отчета (текущей даты).",
		"Титульный", "ДатаОконч");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ДатаСоставленияОтчета <= '19700101' Тогда
		СообщитьВТС("Дата составления отчета должна быть больше 01.01.1970.", "Титульный", "ДатаОконч");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если День(ПараметрыВыгрузки.ДатаСоставленияОтчета) <> День(КонецМесяца(ПараметрыВыгрузки.ДатаСоставленияОтчета)) Тогда
		СообщитьВТС("Указанный в дате составления отчета день должен быть последним днем месяца в году.",
		"Титульный", "ДатаОконч");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка сведений об исполнении контрактов ГОЗ, контрактов.
	//
	ЗаполненаХотяБыОднаСтраницаРаздела = Ложь;
	
	ВозможныеСимволы1_5ВНомереОтдельногоСчета = СтрРазделить("40506,40606,40706", ",", Ложь);
	
	ВозможныеСимволы8ВИГК  = СтрРазделить("1,2,3,4,5,6,7,8,9", ",", Ложь);
	ВозможныеСимволы13ВИГК = СтрРазделить("1,2,3", ",", Ложь);
	
	Для каждого СтраницаРаздела Из ДеревоРаздела1.Строки Цикл
		ЗаполненаСтраницаРаздела = Ложь;
		
		Для каждого Пок Из СтраницаРаздела.Данные Цикл
			Если ЗначениеЗаполнено(Пок.Значение) Тогда
				ЗаполненаСтраницаРаздела = Истина;
				ЗаполненаХотяБыОднаСтраницаРаздела = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненаСтраницаРаздела Тогда
			НомСтраницы = Формат(ДеревоРаздела1.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			ИГКСостоитИз25Цифр = Истина;
			ИГК = СокрЛП(СтраницаРаздела.Данные["ИГК"]);
			ДлинаИГК = СтрДлина(ИГК);
			Если НЕ ЗначениеЗаполнено(ИГК) Тогда
				ИГКСостоитИз25Цифр = Ложь;
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" не задан идентификатор государственного контракта.",
				"Раздел1", "ИГК", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИГК <> 25 Тогда
				ИГКСостоитИз25Цифр = Ложь;
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" задан идентификатор государственного контракта, не состоящий из 25 цифр.",
				"Раздел1", "ИГК", НомСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Для ПозицияСимвола = 1 По ДлинаИГК Цикл
					ТекущийСимвол = Сред(ИГК, ПозицияСимвола, 1);
					Если СтрНайти("0123456789", ТекущийСимвол) = 0 Тогда
						ИГКСостоитИз25Цифр = Ложь;
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" задан идентификатор государственного контракта, не состоящий из 25 цифр.",
						"Раздел1", "ИГК", НомСтраницы);
						СтатусПроверки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ИГКСостоитИз25Цифр Тогда
				Если ВозможныеСимволы8ВИГК.Найти(Сред(ИГК, 8, 1)) = Неопределено Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" указано некорректное значение 8-го разряда идентификатора государственного контракта. Возможны значения: ""1"" - ""9"".",
					"Раздел1", "ИГК", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ВозможныеСимволы13ВИГК.Найти(Сред(ИГК, 13, 1)) = Неопределено Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" указано некорректное значение 13-го разряда идентификатора государственного контракта. Возможны значения: ""1"" - ""3"".",
					"Раздел1", "ИГК", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(СтраницаРаздела.Данные["НомерКонтракта"])) Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" не задан номер контракта.",
				"Раздел1", "НомерКонтракта", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные["ДатаЗаключенияКонтракта"]) Тогда
				Если СтраницаРаздела.Данные["ДатаЗаключенияКонтракта"] <= '19700101' Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" дата заключения контракта должна быть больше 01.01.1970.",
					"Раздел1", "ДатаЗаключенияКонтракта", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если СтраницаРаздела.Данные["ДатаЗаключенияКонтракта"] > ПараметрыВыгрузки.ДатаФормированияОтчета Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" дата заключения контракта должна быть не больше даты формирования электронного представления отчета (текущей даты).",
					"Раздел1", "ДатаЗаключенияКонтракта", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			Иначе
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" не задана дата заключения контракта.",
				"Раздел1", "ДатаЗаключенияКонтракта", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные["ПлановаяДатаИсполнения"]) Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" не задана плановая дата исполнения контракта.",
				"Раздел1", "ПлановаяДатаИсполнения", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные["ДатаЗаключенияКонтракта"])
				И ЗначениеЗаполнено(СтраницаРаздела.Данные["ПлановаяДатаИсполнения"])
				И СтраницаРаздела.Данные["ДатаЗаключенияКонтракта"] > СтраницаРаздела.Данные["ПлановаяДатаИсполнения"] Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" дата заключения контракта должна быть не больше плановой даты исполнения контракта.",
				"Раздел1", "ДатаЗаключенияКонтракта", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСчетаСостоитИз25Цифр = Истина;
			НомерОтдельногоСчета = СокрЛП(СтраницаРаздела.Данные["НомерОтдельногоСчета"]);
			ДлинаНомерОтдельногоСчета = СтрДлина(НомерОтдельногоСчета);
			Если НЕ ЗначениеЗаполнено(НомерОтдельногоСчета) Тогда
				НомерСчетаСостоитИз25Цифр = Ложь;
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" не задан номер отдельного счета, открытого для целей исполнения контракта.",
				"Раздел1", "НомерОтдельногоСчета", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаНомерОтдельногоСчета <> 20 Тогда
				НомерСчетаСостоитИз25Цифр = Ложь;
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" задан номер отдельного счета, открытого для целей исполнения контракта, не состоящий из 20 цифр.",
				"Раздел1", "НомерОтдельногоСчета", НомСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Для ПозицияСимвола = 1 По ДлинаНомерОтдельногоСчета Цикл
					ТекущийСимвол = Сред(НомерОтдельногоСчета, ПозицияСимвола, 1);
					Если СтрНайти("0123456789", ТекущийСимвол) = 0 Тогда
						НомерСчетаСостоитИз25Цифр = Ложь;
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" задан номер отдельного счета, открытого для целей исполнения контракта, не состоящий из 20 цифр.",
						"Раздел1", "НомерОтдельногоСчета", НомСтраницы);
						СтатусПроверки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НомерСчетаСостоитИз25Цифр
				И ВозможныеСимволы1_5ВНомереОтдельногоСчета.Найти(Лев(НомерОтдельногоСчета, 5)) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела ""Исполнение контрактов ГОЗ, контрактов"" неверно указаны первые пять цифр в номере отдельного счета, открытого для целей исполнения контракта. Возможны значения: ""40506"", ""40606"", ""40706"".",
				"Раздел1", "НомерОтдельногоСчета", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗаполненаХотяБыОднаСтраницаРаздела Тогда
		СообщитьВТС("Должен быть заполнен раздел ""Исполнение контрактов ГОЗ, контрактов"".", "Раздел1", "ИГК", "1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ИННСоответствуетТребованиям(Знач ИНН, ТекстСообщения)
	
	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Истина, ТекстСообщения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Символы12 = Лев(ИНН, 2);
	
	Если Символы12 = "00" Тогда
		
		ТекстСообщения = НСтр("ru = 'Не допустимо значение ""00"" в двух первых разрядах ИНН.'");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция КППСоответствуетТребованиям(Знач КПП, ТекстСообщения)
	
	Если НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Символы12 = Лев(КПП, 2);
	
	Если Символы12 = "00" Тогда
		
		ТекстСообщения = НСтр("ru = 'Не допустимо значение ""00"" в двух первых разрядах КПП.'");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти")
				И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти  Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ДатаСоставленияОтчета_Стр = Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг-ММ-дд");
	
	// Раздел 1 (многостраничный, без многострочных частей).
	ДеревоДанныхРаздел1 = ДанныеМногоуровневыхРазделов["Раздел1"];
	Для каждого Ветка Из ДеревоДанныхРаздел1.Строки Цикл
		ЗаполненаСтраницаРаздела = Ложь;
		Для каждого Пок Из Ветка.Данные Цикл
			Если ЗначениеЗаполнено(Пок.Значение) Тогда
				ЗаполненаСтраницаРаздела = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненаСтраницаРаздела Тогда
			ЭкзРаздел1 = СкопироватьУзел(УзелРодитель.Родитель, УзелРодитель);
			ЗаполнитьДаннымиУзел(Ветка.Данные, ЭкзРаздел1);
			АтрибутДатаСоставленияОтчета = ПолучитьПодчиненныйЭлемент(ЭкзРаздел1, "ДатаСоставленияОтчета");
			АтрибутДатаСоставленияОтчета.Значение = ДатаСоставленияОтчета_Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=гггг-ММ-дд");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0.00;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки()
	
	Возврат "message";
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "utf-8";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	РегламентированнаяОтчетность.УдалитьСигнатуруBOM(ФайлВыгрузки);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ИсполнениеКонтрактовГОЗ");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ДатаСоставленияОтчета",  ПараметрыВыгрузки.ДатаСоставленияОтчета);
	РезультатВыгрузки.Вставить("ДатаФормированияОтчета", ПараметрыВыгрузки.ДатаФормированияОтчета);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("utf-8"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		//ПотокXML.ЗаписатьНачалоЭлемента("ДанныеРаздельногоУчета");
		//ПотокXML.ЗаписатьАтрибут("xmlns", "http://tecforce.ru/discreteAccounting");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		//ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаПакета

&НаКлиенте
Процедура ВыгрузитьПакет(Команда)

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(
			"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВМинобороны") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохранения", ЭтотОбъект);
		Если Модифицированность Тогда
			СохранитьНаКлиенте(, ОписаниеОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru='Отсутствует необходимая подсистема.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СообщенияОбОшибках = Новый Массив;
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн, СообщенияОбОшибках);
	Если СообщенияОбОшибках.Количество() > 0 Тогда
		ТекстСообщения = "В ходе проверки были найдены ошибки, препятствующие выгрузке.";
		Если СообщенияОбОшибках.Количество() <> 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Для исправления ошибок используйте специальное окно навигации по ошибкам.";
		КонецЕсли;
		
		#Если НЕ ВебКлиент Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		#КонецЕсли
		
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(СообщенияОбОшибках);
		
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьПакетПослеВыполненияПроверки", ЭтотОбъект);
	МодульДокументооборотСМинобороныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиент");
	МодульДокументооборотСМинобороныКлиент.ПроверитьВозможностьВыполненияОперации(Оповещение, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеВыполненияПроверки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И Результат.ВыполнениеРазрешено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЭДО", ЭтотОбъект);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	ИначеЕсли Результат.Выполнено И НЕ Результат.ВыполнениеРазрешено Тогда
		
		Если Результат.СтатусПроверки = "ОтсутствуетРегистрацияПродукта" Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Продукт не зарегистрирован. Выполнение операции невозможно.'"));
		ИначеЕсли Результат.СтатусПроверки = "ОтсутствуетПодпискаИТС" Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Отсутствует подписка на ИТС. Выполнение операции невозможно.'"));
		ИначеЕсли Результат.СтатусПроверки = "НеОбнаруженоКриптопровайдеров" ИЛИ
			Результат.СтатусПроверки = "НеОбнаруженоКриптопровайдеровГОСТ2012" Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("НеОбнаруженоКриптопровайдеровГОСТ2012",
				Результат.СтатусПроверки = "НеОбнаруженоКриптопровайдеровГОСТ2012");
			ОписаниеОповещения = 
				Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЭДОПоказатьФормуУстановкиКриптопровайдера",
					ЭтотОбъект,
					ДополнительныеПараметры);
			ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		ИначеЕсли Результат.СтатусПроверки = "ОшибкаВыполненияЗапроса" Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Произошла ошибка выполнения запроса к серверу интернет-поддержки. Выполнение операции невозможно.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не выполнены условия поддержки продукта. Выполнение операции невозможно.'"));
		КонецЕсли;
		
	ИначеЕсли НЕ Результат.Выполнено Тогда
		
		Если Результат.СтатусПроверки = "ОшибкаСоединенияССервером" Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Невозможно установить связь с сервером интернет-поддержки. Выполнение операции невозможно.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'При проверке доступа к интернет-поддержке пользователя возникла неизвестная ошибка. Выполнение операции невозможно.'"));
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекстаЭДОПоказатьФормуУстановкиКриптопровайдера(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент 	 = Результат.КонтекстЭДО;
	Если ДополнительныеПараметры.НеОбнаруженоКриптопровайдеровГОСТ2012 Тогда
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ОтсуствиеКриптопровайдеровГОСТ2012ДляМинобороны");
	Иначе
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ОтсуствиеКриптопровайдеровДляМинобороны");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВМинобороны(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Если Результат.РезультатВыгрузки = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При выгрузке пакета произошла ошибка.'"));
	Иначе
		Элементы.НаименованиеЭтапа.Заголовок = НСтр("ru='Передано'", "ru");
		СохранитьСтатус();
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ЭтаФорма, "Минобороны");

КонецПроцедуры

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("ПараметрыОтображенияСумм", Ложь);
	мПараметры.Вставить("Печать", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИДОтчета(ЭтаФорма.ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	УстановитьФорматВыводаНаСервере(ИмяРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	ИменаМногострочныхПоказателей   = Новый Массив;
	ИменаНемногострочныхПоказателей = Новый Массив;
	
	Если ИмяРаздела = "Раздел1" Тогда
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрНачинаетсяС(Обл.Имя, "П0") И НЕ СтрЗаканчиваетсяНа(Обл.Имя, "02") Тогда
				ИменаНемногострочныхПоказателей.Добавить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ИмяПоказателя Из ИменаНемногострочныхПоказателей Цикл
		ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
		ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя];
		ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
		Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
			ЧислоЕЗнак = Новый ОписаниеТипов("Число",
			Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
			ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
		КонецЕсли;
		ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
		ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
	КонецЦикла;
	
	Для каждого ИмяПоказателя Из ИменаМногострочныхПоказателей Цикл
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Пока ТабличныйДокумент.Области.Найти(ИмяПоказателя + "_" + ИндексСтр) <> Неопределено Цикл
			ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
			ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя + "_" + ИндексСтр];
			ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
			Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
				ЧислоЕЗнак = Новый ОписаниеТипов("Число",
				Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
				ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
			КонецЕсли;
			ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
			ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[
			ИДОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
			ИДРедакцииОтчета(ЭтаФорма.ИмяФормы) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("ИГК", ТабличныйДокумент.Область("ИГК").Значение);
			СтруктПарам.Вставить("НомерКонтракта", ТабличныйДокумент.Область("НомерКонтракта").Значение);
			СтруктПарам.Вставить("НомерСтраницы",
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницыРаздела1(СтруктПарам);
		КонецЕсли;
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ДополнительныеПараметрыПечати = Новый Структура;
	ДополнительныеПараметрыПечати.Вставить("ВидПечати", Команда.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтотОбъект, ДополнительныеПараметрыПечати);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
						
	Иначе
		
		СохранитьНаКлиенте(, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Печать(ДополнительныеПараметры.ВидПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 2 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""2"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьСтарыеПечатныеБланкиРегламентированныхОтчетов();
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок,
	ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")));
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ВыбранныеСтраницы = Новый Массив();
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбранныеСтраницы.Добавить(СтрокаУровня1.ИмяСтраницы);
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Исполнение контрактов ГОЗ");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Раздел1");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ТабличныйДокумент");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля);
	
	ЗафиксироватьТранзакцию();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля = Неопределено)
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	ИмяМакета = "ПечатныйБланк2018Кв1";
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ОбщиеРеквизиты = Новый Структура;
	
	ЗначПок = СокрЛП(СтруктураДанныхТитульный.ИНН);
	ДлинаЗначПок = СтрДлина(ЗначПок);
	Для Ном = 1 По ДлинаЗначПок Цикл
		ОбщиеРеквизиты.Вставить("ИНН" + Формат(Ном, "ЧГ="), Сред(ЗначПок, Ном, 1));
	КонецЦикла;
	
	ЗначПок = СокрЛП(СтруктураДанныхТитульный.КПП);
	ДлинаЗначПок = СтрДлина(ЗначПок);
	Для Ном = 1 По ДлинаЗначПок Цикл
		ОбщиеРеквизиты.Вставить("КПП" + Формат(Ном, "ЧГ="), Сред(ЗначПок, Ном, 1));
	КонецЦикла;
	
	ЗначПок = СокрЛП(СтруктураДанныхТитульный.НаимОрг);
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "НаимЮЛСокр");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НаимЮЛСокр) Тогда
			ЗначПок = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
		КонецЕсли;
	КонецЕсли;
	ДлинаЗначПок = СтрДлина(ЗначПок);
	Для Ном = 1 По ДлинаЗначПок Цикл
		ОбщиеРеквизиты.Вставить("НаимОрг" + Формат(Ном, "ЧГ="), Сред(ЗначПок, Ном, 1));
	КонецЦикла;
	
	ЗначПок = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=дд.ММ.гггг");
	ДлинаЗначПок = СтрДлина(ЗначПок);
	Для Ном = 1 По ДлинаЗначПок Цикл
		ОбщиеРеквизиты.Вставить("ДатаСоставленияОтчета" + Формат(Ном, "ЧГ="), Сред(ЗначПок, Ном, 1));
	КонецЦикла;
	
	ОбщиеРеквизиты.Вставить("ОргПодписант", СокрЛП(СтруктураДанныхТитульный.ОргПодписант));
	
	Для каждого СтраницаРаздела Из ДеревоДанныхРаздела.Строки Цикл
		
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("ПечатьСтраницы");
		СтруктПарам.Вставить("ИГК", СтраницаРаздела.Данные.ИГК);
		СтруктПарам.Вставить("НомерКонтракта", СтраницаРаздела.Данные.НомерКонтракта);
		СтруктПарам.Вставить("НомерСтраницы", Формат(ДеревоДанныхРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ="));
		ПредстСтраницы = ПредставлениеСтраницыРаздела1(СтруктПарам);
		
		ПечФорма = Макет.Получитьобласть("Лист1");
		ПечФорма.ПолеСверху = 5;
		ПечФорма.ПолеСправа = 5;
		ПечФорма.ПолеСнизу  = 5;
		ПечФорма.ПолеСлева  = 5;
		ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПечФорма.Автомасштаб = Истина;
		
		РеквизитыТекущейСтраницы = Новый Структура;
		
		ЗначПок = СокрЛП(СтраницаРаздела.Данные.ИГК);
		ДлинаЗначПок = СтрДлина(ЗначПок);
		Для Ном = 1 По ДлинаЗначПок Цикл
			РеквизитыТекущейСтраницы.Вставить("ИГК" + Формат(Ном, "ЧГ="), Сред(ЗначПок, Ном, 1));
		КонецЦикла;
		
		ЗначПок = ?(ЗначениеЗаполнено(СтраницаРаздела.Данные.ПлановаяДатаИсполнения),
		Формат(СтраницаРаздела.Данные.ПлановаяДатаИсполнения, "ДФ=дд.ММ.гггг"), "");
		ДлинаЗначПок = СтрДлина(ЗначПок);
		Для Ном = 1 По ДлинаЗначПок Цикл
			РеквизитыТекущейСтраницы.Вставить("ПлановаяДатаИсполнения" + Формат(Ном, "ЧГ="), Сред(ЗначПок, Ном, 1));
		КонецЦикла;
		
		ЗначПок = СокрЛП(СтраницаРаздела.Данные.НомерКонтракта);
		ДлинаЗначПок = СтрДлина(ЗначПок);
		Для Ном = 1 По ДлинаЗначПок Цикл
			РеквизитыТекущейСтраницы.Вставить("НомерКонтракта" + Формат(Ном, "ЧГ="), Сред(ЗначПок, Ном, 1));
		КонецЦикла;
		
		ЗначПок = ?(ЗначениеЗаполнено(СтраницаРаздела.Данные.ДатаЗаключенияКонтракта),
		Формат(СтраницаРаздела.Данные.ДатаЗаключенияКонтракта, "ДФ=дд.ММ.гггг"), "");
		ДлинаЗначПок = СтрДлина(ЗначПок);
		Для Ном = 1 По ДлинаЗначПок Цикл
			РеквизитыТекущейСтраницы.Вставить("ДатаЗаключенияКонтракта" + Формат(Ном, "ЧГ="), Сред(ЗначПок, Ном, 1));
		КонецЦикла;
		
		ЗначПок = СокрЛП(СтраницаРаздела.Данные.НомерОтдельногоСчета);
		ДлинаЗначПок = СтрДлина(ЗначПок);
		Для Ном = 1 По ДлинаЗначПок Цикл
			РеквизитыТекущейСтраницы.Вставить("НомерОтдельногоСчета" + Формат(Ном, "ЧГ="), Сред(ЗначПок, Ном, 1));
		КонецЦикла;
		
		ПечФорма.Параметры.Заполнить(ОбщиеРеквизиты);
		ПечФорма.Параметры.Заполнить(РеквизитыТекущейСтраницы);
		ПечФорма.Параметры.Заполнить(СтраницаРаздела.Данные);
		
		СтруктураПараметров.Вставить("НомерСтраницы", Формат(ДеревоДанныхРаздела.Строки.Индекс(СтраницаРаздела) * 2 + 2, "ЧГ="));
		
		СтруктураПараметров.Вставить("НаименованиеЛиста", ПредстСтраницы);
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
		ЭтаФорма.Заголовок, СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
		
		ПечФорма = Макет.Получитьобласть("Лист2");
		ПечФорма.ПолеСверху = 5;
		ПечФорма.ПолеСправа = 5;
		ПечФорма.ПолеСнизу  = 5;
		ПечФорма.ПолеСлева  = 5;
		ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПечФорма.Автомасштаб = Истина;
		
		ПечФорма.Параметры.Заполнить(ОбщиеРеквизиты);
		ПечФорма.Параметры.Заполнить(СтраницаРаздела.Данные);
		
		СтруктураПараметров.Вставить("НомерСтраницы", Формат(ДеревоДанныхРаздела.Строки.Индекс(СтраницаРаздела) * 2 + 3, "ЧГ="));
		
		СтруктураПараметров.Вставить("НаименованиеЛиста", ПредстСтраницы);
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
		ЭтаФорма.Заголовок, СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Автозаполнение

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РеализованВыборКонтрактов(ЭтаФорма) Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			ЗаполнятьПоВыбраннымКонтрактам = ЗначениеЗаполнено(ТабличныйДокумент.Область("ПрПоВыбраннымКонтрактам").Значение);
		Иначе
			ЗаполнятьПоВыбраннымКонтрактам = ЗначениеЗаполнено(СтруктураДанныхТитульный["ПрПоВыбраннымКонтрактам"]);
		КонецЕсли;
		
		Если ЗаполнятьПоВыбраннымКонтрактам И НЕ ВыбраныКонтракты() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Нет выбранных контрактов при заданном на Титульном листе признаке заполнения отчета данными ""по выбранным контрактам"". Заполнение отчета прервано.'");
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаданиеВыполнено = ЗаполнитьАвтоНаСервере();
	
	Если ЗаданиеВыполнено Тогда
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
		ВывестиСообщенияПослеАвтозаполнения();
		
		Возврат;
		
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ПараметрыОбработчикаОжидания = Новый Структура;
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура("ИдентификаторЗадания", СтруктураРеквизитовФормы.ИдентификаторЗадания), ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаСоставленияОтчета",        КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ПараметрыОтчета.Вставить("Контракты",
	ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилищеКонтракты));
	ПараметрыОтчета.Вставить("АдресВоВременномХранилищеСообщенияПослеАвтозаполнения",
	СтруктураРеквизитовФормы.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения);
	
	// Помещение данных в контейнер.
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	ЗаданиеВыполнено = Ложь;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыЗаполнения = Новый Массив;
	ПараметрыЗаполнения.Добавить(ИДОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаполнения.Добавить(ИДРедакцииОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаполнения.Добавить(ПараметрыОтчета);
	ПараметрыЗаполнения.Добавить(Контейнер);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет",
	ПараметрыЗаполнения, , НаименованиеЗадания);
	
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	СтруктураРеквизитовФормы.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		
		ЗаданиеВыполнено = Истина;
		
		ЗагрузитьПодготовленныеДанные();
		
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ПроверитьВыполнениеЗадания() Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Если Элементы.Расшифровать.Видимость Тогда
				Элементы.Расшифровать.Доступность = Истина;
				Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
			КонецЕсли;
			ВывестиСообщенияПослеАвтозаполнения();
			Возврат;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеЗадания()
	
	Если ДлительныеОперации.ЗаданиеВыполнено(СтруктураРеквизитовФормы.ИдентификаторЗадания) Тогда 
		ЗагрузитьПодготовленныеДанные();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные() Экспорт
	
	СтруктураРеквизитовФормы.Вставить("СообщенияПослеАвтозаполнения",
	ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения));
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения);
	
	Контейнер = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Получение данных из контейнера.
	СтруктураДанныхТитульный = Контейнер["Титульный"];
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ,
			ПоместитьВоВременноеХранилище(Контейнер[Раздел.Ключ], УникальныйИдентификатор));
		КонецЕсли;
	КонецЦикла;
	
	Контейнер = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	НомерТекущейСтраницы = 0;
	Если мСтруктураМногоуровневыхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела) Тогда
		СтруктураМногоуровневогоРаздела
		= мСтруктураМногоуровневыхРазделов[СтруктураРеквизитовФормы.НаимТекущегоРаздела];
		Если СтруктураМногоуровневогоРаздела.Свойство("Многостраничность") Тогда
			НомерТекущейСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаСоставленияОтчета",               КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("НомерТекущейСтраницы",                НомерТекущейСтраницы);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилищеКонтракты",  СтруктураРеквизитовФормы.АдресВоВременномХранилищеКонтракты);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИДОтчета(ЭтаФорма.ИмяФормы),
	ИДРедакцииОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеализованВыборКонтрактов(Форма)
	
	Возврат Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство("ВыборКонтрактов");
	
КонецФункции

&НаСервере
Функция ВыбраныКонтракты()
	
	Возврат ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВременномХранилищеКонтракты"]) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВывестиСообщенияПослеАвтозаполнения()
	
	Если ТипЗнч(СтруктураРеквизитовФормы.СообщенияПослеАвтозаполнения) = Тип("Массив") Тогда
		
		ОчиститьСообщения();
		
		Для каждого ТекстСообщения Из СтруктураРеквизитовФормы.СообщенияПослеАвтозаполнения Цикл
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru='%1'"), ТекстСообщения);
			Сообщение.Сообщить();
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("СообщенияПослеАвтозаполнения", Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(
			"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВМинобороны") Тогда
	
		Ссылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(ЭтаФорма);
		МодульМинобороныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиент");
		ТекущееСостояние = МодульМинобороныКлиент.ТекущееСостояниеОтправки(Ссылка);
		ТекущийЭтап = ТекущееСостояние.ТекущийЭтапОтправки;
		Если ТекущийЭтап <> Неопределено Тогда
			Протокол = ТекущийЭтап.Протокол;
			// загружаем ответную квитанции по гиперссылке на протокол, если протокол равен заданной строке
			Если Протокол = "ЗагрузитьОтветнуюКвитанцию" Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьОтправкуИзПанелиОтправкиПослеПолученияКонтекстаЭДО", ЭтотОбъект);
				ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		
		АдресДереваПротокола = МодульМинобороныКлиент.ПолучитьАдресДереваПротоколаСдачи(Ссылка);
		СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилищеОтветноеСообщение", АдресДереваПротокола);
		
		СостояниеПротокола = Неопределено;
		ОбработатьПротоколСдачиОтчета(СостояниеПротокола, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправкуИзПанелиОтправкиПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьОтправкуИзПанелиОтправкиЗавершение", ЭтотОбъект);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(
			"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВМинобороны") Тогда
		
		МодульДокументооборотСМинобороныКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиентСервер");
		КонтекстЭДОКлиент.ЗагрузитьОтветыИзМинобороны(
			СтруктураРеквизитовФормы.Организация,
			ОписаниеОповещения,
			МодульДокументооборотСМинобороныКлиентСервер.СсылкаНаОтчетПоФорме(ЭтаФорма),
			ЭтаФорма);
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусНаСервере(Отправка)
	
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВМинобороны") Тогда
		
		МодульДокументооборотСМинобороныКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСМинобороныКлиентСервер");
		Элементы.НаименованиеЭтапа.Заголовок =
			МодульДокументооборотСМинобороныКлиентСервер.СтатусИзПеречисленияВСтроку(Отправка.СтатусОтправки);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправкуИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(
			"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВМинобороны") Тогда
	
		Если Результат.Выполнено Тогда
			
			МодульДокументооборотСМинобороныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиент");
			МодульДокументооборотСМинобороныКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиентСервер");
			
			Отправка = МодульДокументооборотСМинобороныКлиент.ПолучитьПоследнююОтправкуОтчета(
				МодульДокументооборотСМинобороныКлиентСервер.СсылкаНаОтчетПоФорме(ЭтаФорма));
				
			Если Отправка <> Неопределено Тогда
				ОбновитьСтатусНаСервере(Отправка);
				СохранитьСтатус();
				РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ЭтаФорма, "Минобороны");
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПротоколСдачиОтчета(СостояниеПротокола, ВыводитьСообщенияОбОшибках = Ложь, СообщенияОбОшибкахВыведены = Ложь) Экспорт
	
	СостояниеПротокола = Неопределено;
	
	ОбработатьПротоколСдачиОтчетаНаСервере(СостояниеПротокола, ВыводитьСообщенияОбОшибках);
	
	ЭтаФорма.СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилищеОтветноеСообщение",
	ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	
	Если ВыводитьСообщенияОбОшибках Тогда
		Если СостояниеПротокола = Неопределено Тогда
			НовСтр = ТаблицаСообщений.Добавить();
			НовСтр.Описание = "При открытии протокола возникла неизвестная ошибка.";
		ИначеЕсли ТаблицаСообщений.Количество() = 0 Тогда
			СообщенияОбОшибкахВыведены = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		СообщенияОбОшибкахВыведены = Ложь;
		Возврат;
	КонецЕсли;
	
	ПредставлениеОтчета = "Исполнение контрактов ГОЗ на "
	+ ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП=Истина");
	
	Для Каждого СтрСообщения Из ТаблицаСообщений Цикл
		СтрСообщения.ОтчетДок = СтруктураРеквизитовФормы.мСохраненныйДок;
		СтрСообщения.Отчет = ПредставлениеОтчета;
	КонецЦикла;
	
	ТаблицаСообщенийСтруктура = Новый Структура("ТаблицаСообщений", ТаблицаСообщений);
	
	ПараметрыФормы = Новый Структура("ВладелецТС", ТаблицаСообщенийСтруктура);
	
	ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
	
	Если ФормаНавигацииПоОшибкам.Открыта() Тогда
		
		ФормаНавигацииПоОшибкам.Закрыть();
		
		ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
		
	КонецЕсли;
	
	ФормаНавигацииПоОшибкам.Открыть();
	
	ТаблицаСообщений.Очистить();
	
	СообщенияОбОшибкахВыведены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПротоколСдачиОтчетаНаСервере(СостояниеПротокола, ВыводитьСообщенияОбОшибках)
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВременномХранилищеОтветноеСообщение") Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПротокола = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВременномХранилищеОтветноеСообщение"]);
	
	Если ДеревоПротокола = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПротоколСдачиОтчета = (ДеревоПротокола.Строки.Количество() > 0 И ДеревоПротокола.Строки[0].Имя = "ДРУОтвет");
	
	Если НЕ ЭтоПротоколСдачиОтчета Тогда
		
		ПервичнаяВалидация = Новый Структура;
		ПервичнаяВалидация.Вставить("ЭтоПротоколСдачиОтчета", Ложь);
		
		СостояниеПротокола = Новый Структура;
		СостояниеПротокола.Вставить("ПервичнаяВалидация", ПервичнаяВалидация);
		
		Возврат;
		
	КонецЕсли;
	
	ПервичнаяВалидностьПакета = Истина;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", "СообщениеВалидно");
	ОшибкиПервичнойВалидации = ДеревоПротокола.Строки.НайтиСтроки(Отбор, Истина);
	Если ОшибкиПервичнойВалидации.Количество() = 1 Тогда
		ПервичнаяВалидностьПакета = НРег(СокрЛП(ОшибкиПервичнойВалидации[0].Значение)) = "true";
		Если ВыводитьСообщенияОбОшибках И НЕ ПервичнаяВалидностьПакета Тогда
			СообщитьВТС("Первичная валидация -> Переданный пакет не прошел проверку в Минобороны РФ.", "Титульный", "R1C1");
		КонецЕсли;
	КонецЕсли;
	
	ПервичнаяВалидностьФайлаОтчета = Истина;
	ПервичнаяВалидностьЭлектроннойПодписи = Истина;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", "Валидность");
	ЗафиксированаОшибка_ФайлСообщения_XSD_ЗаголовокОтчета = Ложь;
	ОшибкиПервичнойВалидации = ДеревоПротокола.Строки.НайтиСтроки(Отбор, Истина);
	Для каждого СтрокаОшибки Из ОшибкиПервичнойВалидации Цикл
		Валидно = НРег(СокрЛП(СтрокаОшибки.Значение)) = "true";
		Если НЕ Валидно Тогда
			ТекстОшибки = "";
			Если СтрокаОшибки.Родитель.Имя = "ФайлСообщения"
			 ИЛИ СтрокаОшибки.Родитель.Имя = "XSD"
			 ИЛИ СтрокаОшибки.Родитель.Имя = "ЗаголовокОтчета"
			   И НЕ ЗафиксированаОшибка_ФайлСообщения_XSD_ЗаголовокОтчета Тогда
				ПервичнаяВалидностьФайлаОтчета = Ложь;
				ТекстОшибки = "Файл электронного представления отчета не прошел проверку в Минобороны РФ";
				ЗафиксированаОшибка_ФайлСообщения_XSD_ЗаголовокОтчета = Истина;
			ИначеЕсли СтрокаОшибки.Родитель.Имя = "ЭлектроннаяПодпись" Тогда
				ПервичнаяВалидностьЭлектроннойПодписи = Ложь;
				ТекстОшибки = "Электронная подпись переданного файла электронного представления отчета не прошла проверку в Минобороны РФ";
			КонецЕсли;
			Если ВыводитьСообщенияОбОшибках И ЗначениеЗаполнено(ТекстОшибки) Тогда
				СообщитьВТС("Первичная валидация -> " + ТекстОшибки + ".", "Титульный", "R1C1");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПервичнаяВалидностьЕстьКритичныеОшибки = Ложь;
	ПервичнаяВалидностьЕстьНеКритичныеОшибки = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", "ОшибкаПервичнойВалидации");
	ОшибкиПервичнойВалидации = ДеревоПротокола.Строки.НайтиСтроки(Отбор, Истина);
	Для каждого СтрокаОшибки Из ОшибкиПервичнойВалидации Цикл
		СтрокаТекстОшибки = СтрокаОшибки.Строки.Найти("Сообщение", "Имя");
		СтрокаКритичность = СтрокаОшибки.Строки.Найти("КритичнаяОшибка", "Имя");
		Если СтрокаТекстОшибки = Неопределено
		 ИЛИ СтрокаКритичность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекстОшибки = СокрЛП(СтрокаТекстОшибки.Значение);
		Критичность = НРег(СокрЛП(СтрокаКритичность.Значение)) = "true";
		Если Критичность Тогда
			ПервичнаяВалидностьЕстьКритичныеОшибки = Истина;
		Иначе
			ПервичнаяВалидностьЕстьНеКритичныеОшибки = Истина;
		КонецЕсли;
		Если ВыводитьСообщенияОбОшибках Тогда
			СообщитьВТС("Первичная валидация -> " + ?(Критичность, "Критичная ошибка",
			"Ошибка") + " -> " + ТекстОшибки + ".", "Титульный", "R1C1");
		КонецЕсли;
	КонецЦикла;
	
	КонтрактыЕстьПринятые = Неопределено;
	КонтрактыЕстьНеПринятые = Неопределено;
	КонтрактыЕстьКритичныеОшибки = Неопределено;
	КонтрактыЕстьНеКритичныеОшибки = Неопределено;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", "Контракт");
	Контракты = ДеревоПротокола.Строки.НайтиСтроки(Отбор, Истина);
	
	Если Контракты.Количество() > 0 Тогда
		
		СочетанияИндексаСтраницыРаздела1ИГКиНомераКонтракта
		= СочетанияИндексаСтраницыРаздела1ИГКиНомераКонтракта();
		
		ДеревоПоСхемеВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки");
		
		КонтрактыЕстьПринятые = Истина;
		КонтрактыЕстьНеПринятые = Ложь;
		КонтрактыЕстьКритичныеОшибки = Ложь;
		КонтрактыЕстьНеКритичныеОшибки = Ложь;
		
	КонецЕсли;
	
	Для каждого Контракт Из Контракты Цикл
		
		СтрокаНомер = Контракт.Строки.Найти("Номер", "Имя");
		СтрокаИГК = Контракт.Строки.Найти("ИГК", "Имя");
		СтрокаДанныеКонтрактаПриняты = Контракт.Строки.Найти("ДанныеКонтрактаПриняты", "Имя");
		
		Если СтрокаНомер = Неопределено
			ИЛИ СтрокаИГК = Неопределено
			ИЛИ СтрокаДанныеКонтрактаПриняты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номер = СокрЛП(СтрокаНомер.Значение);
		ИГК = СокрЛП(СтрокаИГК.Значение);
		КонтрактПринят = НРег(СокрЛП(СтрокаДанныеКонтрактаПриняты.Значение)) = "true";
		
		Если НЕ КонтрактПринят Тогда
			КонтрактыЕстьНеПринятые = Истина;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Имя", "ОшибкаКонтракта");
		ОшибкиКонтракта = Контракт.Строки.НайтиСтроки(Отбор, Истина);
		
		Если ВыводитьСообщенияОбОшибках Тогда
			
			СтраницыРаздела1 = СочетанияИндексаСтраницыРаздела1ИГКиНомераКонтракта.НайтиСтроки(
			Новый Структура("ИГК,НомерКонтракта", ИГК, Номер));
			
			Если СтраницыРаздела1.Количество() = 1 Тогда
				НомерСтраницы = Формат(СтраницыРаздела1[0].ИндексСтраницы + 1, "ЧГ=");
			Иначе
				НомерСтраницы = "НайденоСтраниц_" + Формат(СтраницыРаздела1.Количество(), "ЧГ=;ЧН=");
			КонецЕсли;
			
			ЕстьХотяБыОднаОшибкаПоТекущемуКонтракту = Ложь;
			
		КонецЕсли;
		
		Для каждого ОшибкаКонтракта Из ОшибкиКонтракта Цикл
			
			ТекстОшибки = "";
			Критичность = Ложь;
			Позиция_Тег = "";
			Позиция_Атр = "";
			Позиция_Знч = "";
			
			СтрокаТекстОшибки = ОшибкаКонтракта.Строки.Найти("Сообщение", "Имя");
			СтрокаКритичность = ОшибкаКонтракта.Строки.Найти("КритичнаяОшибка", "Имя");
			СтрокаПозиция_Тег = ОшибкаКонтракта.Строки.Найти("Тег", "Имя");
			СтрокаПозиция_Атр = ОшибкаКонтракта.Строки.Найти("Атрибут", "Имя");
			СтрокаПозиция_Знч = ОшибкаКонтракта.Строки.Найти("Значение", "Имя");
			
			Если СтрокаТекстОшибки = Неопределено
			 ИЛИ СтрокаКритичность = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОшибки = СокрЛП(СтрокаТекстОшибки.Значение);
			Критичность = НРег(СокрЛП(СтрокаКритичность.Значение)) = "true";
			
			Если Критичность Тогда
				КонтрактыЕстьКритичныеОшибки = Истина;
			Иначе
				КонтрактыЕстьНеКритичныеОшибки = Истина;
			КонецЕсли;
			
			Если ВыводитьСообщенияОбОшибках Тогда
				ИмяПоказателя = "R1C1";
				Если СтрокаПозиция_Тег <> Неопределено
					И СтрокаПозиция_Атр <> Неопределено
					И СтрокаПозиция_Знч <> Неопределено Тогда
					СтрокаТегПоСхемеВыгрузки = ДеревоПоСхемеВыгрузки.Строки.Найти(СокрЛП(СтрокаПозиция_Тег.Значение), "Код", Истина);
					Если СтрокаТегПоСхемеВыгрузки <> Неопределено Тогда
						СтрокаАтрибутПоСхемевыгрузки = СтрокаТегПоСхемеВыгрузки.Строки.Найти(СокрЛП(СтрокаПозиция_Атр.Значение), "Код");
						Если СтрокаАтрибутПоСхемевыгрузки <> Неопределено Тогда
							ИмяПоказателя = СокрЛП(СтрокаАтрибутПоСхемевыгрузки.Ключ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЕстьХотяБыОднаОшибкаПоТекущемуКонтракту = Истина;
				
				СообщитьВТС("Контракт № " + Номер + ", ИГК " + ИГК + " -> " + ?(Критичность, "Критичная ошибка", "Ошибка")
				+ " -> " + ТекстОшибки + ".", "Раздел1", ИмяПоказателя, НомерСтраницы);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПервичнаяВалидация = Новый Структура;
	ПервичнаяВалидация.Вставить("ЭтоПротоколСдачиОтчета",       ЭтоПротоколСдачиОтчета);
	ПервичнаяВалидация.Вставить("ВалидностьПакета",             ПервичнаяВалидностьПакета);
	ПервичнаяВалидация.Вставить("ВалидностьФайлаОтчета",        ПервичнаяВалидностьФайлаОтчета);
	ПервичнаяВалидация.Вставить("ВалидностьЭлектроннойПодписи", ПервичнаяВалидностьЭлектроннойПодписи);
	ПервичнаяВалидация.Вставить("ЕстьКритичныеОшибки",          ПервичнаяВалидностьЕстьКритичныеОшибки);
	ПервичнаяВалидация.Вставить("ЕстьНеКритичныеОшибки",        ПервичнаяВалидностьЕстьНеКритичныеОшибки);
	
	СостояниеКонтрактов = Новый Структура;
	Если КонтрактыЕстьПринятые <> Неопределено
		И КонтрактыЕстьНеПринятые <> Неопределено
		И КонтрактыЕстьКритичныеОшибки <> Неопределено
		И КонтрактыЕстьНеКритичныеОшибки <> Неопределено Тогда
		СостояниеКонтрактов.Вставить("ЕстьПринятые",          КонтрактыЕстьПринятые);
		СостояниеКонтрактов.Вставить("ЕстьНеПринятые",        КонтрактыЕстьНеПринятые);
		СостояниеКонтрактов.Вставить("ЕстьКритичныеОшибки",   КонтрактыЕстьКритичныеОшибки);
		СостояниеКонтрактов.Вставить("ЕстьНеКритичныеОшибки", КонтрактыЕстьНеКритичныеОшибки);
	КонецЕсли;
	
	СостояниеПротокола = Новый Структура;
	
	СостояниеПротокола.Вставить("ПервичнаяВалидация", ПервичнаяВалидация);
	
	Если СостояниеКонтрактов.Количество() > 0 Тогда
		СостояниеПротокола.Вставить("СостояниеКонтрактов", СостояниеКонтрактов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СочетанияИндексаСтраницыРаздела1ИГКиНомераКонтракта()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИГК");
	ТЗ.Колонки.Добавить("НомерКонтракта");
	ТЗ.Колонки.Добавить("ИндексСтраницы");
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		НовСтрТЗ = ТЗ.Добавить();
		НовСтрТЗ.ИГК = Ветка.Данные.ИГК;
		НовСтрТЗ.НомерКонтракта = Ветка.Данные.НомерКонтракта;
		НовСтрТЗ.ИндексСтраницы = ДеревоРаздела.Строки.Индекс(Ветка);
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "Минобороны");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "Минобороны");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.Минобороны"));
	ПараметрыИзменения.Вставить("ОписаниеОповещения", 
		Новый ОписаниеОповещения("ПослеИзмененияСтатусаОтправки", ЭтотОбъект));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти 
		= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС", Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	мДанныеОтчета = СохраненныеДанныеОтчета();
	ЗаполнитьНастройкиОтчета();
	
	ПроверитьКС_01(СтруктураРезультата);
	ПроверитьКС_02(СтруктураРезультата);
	ПроверитьКС_03(СтруктураРезультата);
	ПроверитьКС_04(СтруктураРезультата);
	ПроверитьКС_05(СтруктураРезультата);
	ПроверитьКС_06(СтруктураРезультата);
	ПроверитьКС_07(СтруктураРезультата);
	ПроверитьКС_08(СтруктураРезультата);
	ПроверитьКС_09(СтруктураРезультата);
	ПроверитьКС_10(СтруктураРезультата);
	ПроверитьКС_11(СтруктураРезультата);
	ПроверитьКС_12(СтруктураРезультата);
	ПроверитьКС_13(СтруктураРезультата);
	ПроверитьКС_14(СтруктураРезультата);
	ПроверитьКС_15(СтруктураРезультата);
	ПроверитьКС_16(СтруктураРезультата);
	ПроверитьКС_17(СтруктураРезультата);
	ПроверитьКС_18(СтруктураРезультата);
	ПроверитьКС_19(СтруктураРезультата);
	ПроверитьКС_20(СтруктураРезультата);
	ПроверитьКС_21(СтруктураРезультата);
	ПроверитьКС_22(СтруктураРезультата);
	ПроверитьКС_23(СтруктураРезультата);
	ПроверитьКС_24(СтруктураРезультата);
	ПроверитьКС_25(СтруктураРезультата);
	ПроверитьКС_26(СтруктураРезультата);
	ПроверитьКС_27(СтруктураРезультата);
	ПроверитьКС_28(СтруктураРезультата);
	ПроверитьКС_29(СтруктураРезультата);
	ПроверитьКС_30(СтруктураРезультата);
	ПроверитьКС_31(СтруктураРезультата);
	ПроверитьКС_32(СтруктураРезультата);
	ПроверитьКС_33(СтруктураРезультата);
	ПроверитьКС_34(СтруктураРезультата);
	ПроверитьКС_35(СтруктураРезультата);
	ПроверитьКС_36(СтруктураРезультата);
	ПроверитьКС_37(СтруктураРезультата);
	ПроверитьКС_38(СтруктураРезультата);
	ПроверитьКС_39(СтруктураРезультата);
	ПроверитьКС_40(СтруктураРезультата);
	ПроверитьКС_41(СтруктураРезультата);
	ПроверитьКС_42(СтруктураРезультата);
	ПроверитьКС_43(СтруктураРезультата);
	ПроверитьКС_44(СтруктураРезультата);
	ПроверитьКС_45(СтруктураРезультата);
	ПроверитьКС_46(СтруктураРезультата);
	ПроверитьКС_47(СтруктураРезультата);
	ПроверитьКС_48(СтруктураРезультата);
	ПроверитьКС_49(СтруктураРезультата);
	ПроверитьКС_50(СтруктураРезультата);
	ПроверитьКС_51(СтруктураРезультата);
	ПроверитьКС_52(СтруктураРезультата);
	ПроверитьКС_53(СтруктураРезультата);
	ПроверитьКС_54(СтруктураРезультата);
	ПроверитьКС_55(СтруктураРезультата);
	ПроверитьКС_56(СтруктураРезультата);
	ПроверитьКС_57(СтруктураРезультата);
	ПроверитьКС_58(СтруктураРезультата);
	ПроверитьКС_59(СтруктураРезультата);
	ПроверитьКС_60(СтруктураРезультата);
	ПроверитьКС_61(СтруктураРезультата);
	ПроверитьКС_62(СтруктураРезультата);
	ПроверитьКС_63(СтруктураРезультата);
	ПроверитьКС_64(СтруктураРезультата);
	ПроверитьКС_65(СтруктураРезультата);
	ПроверитьКС_66(СтруктураРезультата);
	ПроверитьКС_67(СтруктураРезультата);
	ПроверитьКС_68(СтруктураРезультата);
	ПроверитьКС_69(СтруктураРезультата);
	ПроверитьКС_70(СтруктураРезультата);
	ПроверитьКС_71(СтруктураРезультата);
	ПроверитьКС_72(СтруктураРезультата);
	ПроверитьКС_73(СтруктураРезультата);
	ПроверитьКС_74(СтруктураРезультата);
	ПроверитьКС_75(СтруктураРезультата);
	ПроверитьКС_76(СтруктураРезультата);
	ПроверитьКС_77(СтруктураРезультата);
	ПроверитьКС_78(СтруктураРезультата);
	ПроверитьКС_79(СтруктураРезультата);
	ПроверитьКС_80(СтруктураРезультата);
	
	мДанныеОтчета = Неопределено;
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	АдресФормул			= ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы	, Новый УникальныйИдентификатор);
	АдресПоказателей	= ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей"	, АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_ПроверкиГруппыФинансированиеКонтракта

&НаСервере
Процедура ПроверитьКС_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.1 стр.1 = гр.1 стр.1.1. ""Целевые параметры Контракта"" по группе ""Финансирование Контракта"" должны с"
		+ "овпадать с показателем строки ""Денежные средства, полученные от заказчика""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С001Г1"	, "П000001000001");
	ИменаПоказателей.Вставить("С011Г1"	, "П000001100001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С001Г1.Значение = Показатели.С011Г1.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.С001Г1.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.С011Г1.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.1 = гр.3 стр.1 / гр.1 стр.1. ""Выполнено,%"" по группе ""Финансирование Контракта"" должно совпад"
		+ "ать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С001Г2"	, "П000001000002");
	ИменаПоказателей.Вставить("С001Г3"	, "П000001000003");
	ИменаПоказателей.Вставить("С001Г1"	, "П000001000001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С001Г1.Значение = 0, 0, Окр(Показатели.С001Г3.Значение * 100 / 
			Показатели.С001Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С001Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С001Г2.Значение, Показатели.С001Г3.Значение, Показатели.С001Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 3)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.1 = гр.3 стр.1.1 + гр.3 стр.1.2 + гр.3 стр.1.3 + гр.3 стр.1.4. ""Сальдо операций"" по группе ""Фи"
		+ "нансирование Контракта"" должно совпадать с суммой показателей указанной группы по графе ""Сальдо операций""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 Итог [%6]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С001Г3"	, "П000001000003");
	ИменаПоказателей.Вставить("С011Г3"	, "П000001100003");
	ИменаПоказателей.Вставить("С012Г3"	, "П000001200003");
	ИменаПоказателей.Вставить("С013Г3"	, "П000001300003");
	ИменаПоказателей.Вставить("С014Г3"	, "П000001400003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С011Г3.Значение + Показатели.С012Г3.Значение + Показатели.С013Г3.Значение 
			+ Показатели.С014Г3.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С001Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С001Г3.Значение, Показатели.С011Г3.Значение, Показатели.С012Г3.Значение, Показатели.С013Г3.Значение, 
			Показатели.С014Г3.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 4)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.1 стр.1.1 + гр.1 стр.1.2 >= 0. Сумма ""Целевые параметры Контракта"" показателей ""Денежные средства, п"
		+ "олученные от заказчика"" и ""Кредиты банка"" не может быть отрицательной'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 + %2 Итог [%3] >= 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С011Г1"	, "П000001100001");
	ИменаПоказателей.Вставить("С012Г1"	, "П000001200001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С011Г1.Значение + Показатели.С012Г1.Значение;
		Настройки.ЭтоОшибка = НЕ РасчетнаяСумма >= 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.С011Г1.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.С012Г1.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%3", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 5)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.1.1 = гр.3 стр.1.1 / гр.1 стр.1.1. ""Выполнено,%"" показателя ""Денежные средства, полученные от "
		+ "заказчика"" должно совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракт"
		+ "а""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С011Г2"	, "П000001100002");
	ИменаПоказателей.Вставить("С011Г3"	, "П000001100003");
	ИменаПоказателей.Вставить("С011Г1"	, "П000001100001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С011Г1.Значение = 0, 0, Окр(Показатели.С011Г3.Значение * 100 / 
			Показатели.С011Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С011Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С011Г2.Значение, Показатели.С011Г3.Значение, Показатели.С011Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 6)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.1.1 = гр.7 стр.1.1 - (гр.4 стр.1.1 + гр.6 стр.1.1). ""Сальдо операций"" показателя ""Денежные сре"
		+ "дства, полученные от заказчика"" должно совпадать со значением ""Списание в рамках Контракта"" за вычетом всех зн"
		+ "ачений граф группы ""Движение ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С011Г3"	, "П000001100003");
	ИменаПоказателей.Вставить("С011Г7"	, "П000001100007");
	ИменаПоказателей.Вставить("С011Г4"	, "П000001100004");
	ИменаПоказателей.Вставить("С011Г6"	, "П000001100006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С011Г7.Значение - (Показатели.С011Г4.Значение + Показатели.С011Г6.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С011Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С011Г3.Значение, Показатели.С011Г7.Значение, Показатели.С011Г4.Значение, Показатели.С011Г6.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 7)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.1.2 = гр.7 стр.1.2 - (гр.4 стр.1.2 + гр.6 стр.1.2). ""Сальдо операций"" показателя ""Кредиты банк"
		+ "а"" должно совпадать со значением ""Списание в рамках Контракта"" за вычетом всех значений граф группы ""Движение"
		+ " ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С012Г3"	, "П000001200003");
	ИменаПоказателей.Вставить("С012Г7"	, "П000001200007");
	ИменаПоказателей.Вставить("С012Г4"	, "П000001200004");
	ИменаПоказателей.Вставить("С012Г6"	, "П000001200006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С012Г7.Значение - (Показатели.С012Г4.Значение + Показатели.С012Г6.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С012Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С012Г3.Значение, Показатели.С012Г7.Значение, Показатели.С012Г4.Значение, Показатели.С012Г6.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 8)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.1.3 = гр.7 стр.1.3 - (гр.4 стр.1.3 + гр.6 стр.1.3). ""Сальдо операций"" показателя ""Задолженност"
		+ "ь по процентам по кредитам"" должно совпадать со значением ""Списание в рамках Контракта"" за вычетом всех значен"
		+ "ий граф группы ""Движение ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С013Г3"	, "П000001300003");
	ИменаПоказателей.Вставить("С013Г7"	, "П000001300007");
	ИменаПоказателей.Вставить("С013Г4"	, "П000001300004");
	ИменаПоказателей.Вставить("С013Г6"	, "П000001300006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С013Г7.Значение - (Показатели.С013Г4.Значение + Показатели.С013Г6.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С013Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С013Г3.Значение, Показатели.С013Г7.Значение, Показатели.С013Г4.Значение, Показатели.С013Г6.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_09(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 9)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.1.4 = гр.7 стр.1.4 - (гр.4 стр.1.4 + гр.5 стр.1.4 + гр.6 стр.1.4). ""Сальдо операций"" показателя"
		+ " ""Задолженность перед поставщиками"" должно совпадать со значением ""Списание в рамках Контракта"" за вычетом вс"
		+ "ех значений граф группы ""Движение ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - (%3 + %4 + %5) Итог [%6]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С014Г3"	, "П000001400003");
	ИменаПоказателей.Вставить("С014Г7"	, "П000001400007");
	ИменаПоказателей.Вставить("С014Г4"	, "П000001400004");
	ИменаПоказателей.Вставить("С014Г5"	, "П000001400005");
	ИменаПоказателей.Вставить("С014Г6"	, "П000001400006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С014Г7.Значение - (Показатели.С014Г4.Значение + Показатели.С014Г5.Значение 
			+ Показатели.С014Г6.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С014Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С014Г3.Значение, Показатели.С014Г7.Значение, Показатели.С014Г4.Значение, Показатели.С014Г5.Значение, 
			Показатели.С014Г6.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиГруппыРаспределениеРесурсов

&НаСервере
Процедура ПроверитьКС_10(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 10)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2 = гр.3 стр.2.1 + гр.3 стр.2.2 + гр.3 стр.2.3 + гр.3 стр.2.4 + гр.3 стр.3.1 + гр.3 стр.3.2 + гр."
		+ "3 стр.3.3 + гр.3 стр.3.4 + гр.3 стр.3.5 + гр.3 стр.5. ""Сальдо операций"" по группе ""Распределение ресурсов Конт"
		+ "ракта"" должно совпадать с суммой показателей графы ""Сальдо операций"" групп показателей: ""Денежные средства"","
		+ " ""Запасы"", ""Производство"" и показателей ""Готовый товар на складе"", ""Себестоимость реализованной продукци"
		+ "и"", ""Административно-управленческие расходы"", ""Коммерческие расходы"", ""Проценты по кредитам банка"", ""НДС "
		+ "с выручки от продаж"", ""Списание денежных средств с отдельного счета Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 + %7 + %8 +%9 + %_10 + %_11 Итог [%_12]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С002Г3"	, "П000002000003");
	ИменаПоказателей.Вставить("С021Г3"	, "П000002100003");
	ИменаПоказателей.Вставить("С022Г3"	, "П000002200003");
	ИменаПоказателей.Вставить("С023Г3"	, "П000002300003");
	ИменаПоказателей.Вставить("С024Г3"	, "П000002400003");
	ИменаПоказателей.Вставить("С031Г3"	, "П000003100003");
	ИменаПоказателей.Вставить("С032Г3"	, "П000003200003");
	ИменаПоказателей.Вставить("С033Г3"	, "П000003300003");
	ИменаПоказателей.Вставить("С034Г3"	, "П000003400003");
	ИменаПоказателей.Вставить("С035Г3"	, "П000003500003");
	ИменаПоказателей.Вставить("С005Г3"	, "П000005000003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С021Г3.Значение + Показатели.С022Г3.Значение + Показатели.С023Г3.Значение 
			+ Показатели.С024Г3.Значение + Показатели.С031Г3.Значение + Показатели.С032Г3.Значение 
			+ Показатели.С033Г3.Значение + Показатели.С034Г3.Значение + Показатели.С035Г3.Значение 
			+ Показатели.С005Г3.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С002Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С002Г3.Значение, Показатели.С021Г3.Значение, Показатели.С022Г3.Значение, Показатели.С023Г3.Значение, 
			Показатели.С024Г3.Значение, Показатели.С031Г3.Значение, Показатели.С032Г3.Значение, Показатели.С033Г3.Значение, 
			Показатели.С034Г3.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%_10", Показатели.С035Г3.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%_11", Показатели.С005Г3.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%_12", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_11(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 11)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.1 = (гр.4 стр.2.1 + гр.5 стр.2.1 + гр.6 стр.2.1) - (гр.7 стр.2.1 + гр.8 стр.2.1 + гр.9 стр.2.1)"
		+ ". ""Сальдо операций"" по группе ""Денежные средства"" должно совпадать с суммой всех значений граф группы ""Движе"
		+ "ние ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С021Г3"	, "П000002100003");
	ИменаПоказателей.Вставить("С021Г4"	, "П000002100004");
	ИменаПоказателей.Вставить("С021Г5"	, "П000002100005");
	ИменаПоказателей.Вставить("С021Г6"	, "П000002100006");
	ИменаПоказателей.Вставить("С021Г7"	, "П000002100007");
	ИменаПоказателей.Вставить("С021Г8"	, "П000002100008");
	ИменаПоказателей.Вставить("С021Г9"	, "П000002100009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С021Г4.Значение + Показатели.С021Г5.Значение + Показатели.С021Г6.Значение) 
			- (Показатели.С021Г7.Значение + Показатели.С021Г8.Значение + Показатели.С021Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С021Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С021Г3.Значение, Показатели.С021Г4.Значение, Показатели.С021Г5.Значение, Показатели.С021Г6.Значение, 
			Показатели.С021Г7.Значение, Показатели.С021Г8.Значение, Показатели.С021Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_12(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 12)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.1 = гр.3 стр.2.1.1 + гр.3 стр.2.1.2 + гр.3 стр.2.1.3. ""Сальдо операций"" по группе ""Денежные "
		+ "средства"" должно совпадать с суммой показателей указанной группы по графе ""Сальдо операций""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С021Г3"	, "П000002100003");
	ИменаПоказателей.Вставить("С211Г3"	, "П000002110003");
	ИменаПоказателей.Вставить("С212Г3"	, "П000002120003");
	ИменаПоказателей.Вставить("С213Г3"	, "П000002130003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С211Г3.Значение + Показатели.С212Г3.Значение + Показатели.С213Г3.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С021Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С021Г3.Значение, Показатели.С211Г3.Значение, Показатели.С212Г3.Значение, Показатели.С213Г3.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_13(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 13)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.4 стр.2.1 = гр.4 стр.2.1.1 + гр.4 стр.2.1.2 + гр.4 стр.2.1.3. ""Движение в рамках Контракта"" по группе"
		+ " ""Денежные средства"" должно совпадать с суммой показателей указанной группы по графе ""Движение в рамках Контра"
		+ "кта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С021Г4"	, "П000002100004");
	ИменаПоказателей.Вставить("С211Г4"	, "П000002110004");
	ИменаПоказателей.Вставить("С212Г4"	, "П000002120004");
	ИменаПоказателей.Вставить("С213Г4"	, "П000002130004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С211Г4.Значение + Показатели.С212Г4.Значение + Показатели.С213Г4.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С021Г4.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С021Г4.Значение, Показатели.С211Г4.Значение, Показатели.С212Г4.Значение, Показатели.С213Г4.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_14(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 14)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.2.1 = гр.5 стр.2.1.3. ""Привлечение ресурсов с других Контрактов"" по группе ""Денежные средства"
		+ """ должно совпадать с показателем строки ""Авансы, выданные поставщикам"" по графе ""Привлечение ресурсов с други"
		+ "х Контрактов""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С021Г5"	, "П000002100005");
	ИменаПоказателей.Вставить("С213Г5"	, "П000002130005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С021Г5.Значение = Показатели.С213Г5.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С021Г5.Значение, Показатели.С213Г5.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_15(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 15)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.6 стр.2.1 = гр.6 стр.2.1.1 + гр.6 стр.2.1.3. ""Привлечение ресурсов Организации"" по группе ""Денежные "
		+ "средства"" должно совпадать с суммой показателей указанной группы по графе ""Привлечение ресурсов Организации"
		+ """'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С021Г6"	, "П000002100006");
	ИменаПоказателей.Вставить("С211Г6"	, "П000002110006");
	ИменаПоказателей.Вставить("С213Г6"	, "П000002130006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С211Г6.Значение + Показатели.С213Г6.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С021Г6.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С021Г6.Значение, Показатели.С211Г6.Значение, Показатели.С213Г6.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_16(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 16)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.7 стр.2.1 = гр.7 стр.2.1.1 + гр.7 стр.2.1.2 + гр.7 стр.2.1.3. ""Списание в рамках Контракта"" по группе"
		+ " ""Денежные средства"" должно совпадать с суммой показателей указанной группы по графе ""Списание в рамках Контра"
		+ "кта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С021Г7"	, "П000002100007");
	ИменаПоказателей.Вставить("С211Г7"	, "П000002110007");
	ИменаПоказателей.Вставить("С212Г7"	, "П000002120007");
	ИменаПоказателей.Вставить("С213Г7"	, "П000002130007");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С211Г7.Значение + Показатели.С212Г7.Значение + Показатели.С213Г7.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С021Г7.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С021Г7.Значение, Показатели.С211Г7.Значение, Показатели.С212Г7.Значение, Показатели.С213Г7.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_17(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 17)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.8 стр.2.1 = гр.8 стр.2.1.1. ""Использование ресурсов на другие Контракты"" по группе ""Денежные средств"
		+ "а"" должно совпадать с показателем ""Денежные средства на отдельном счете""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С021Г8"	, "П000002100008");
	ИменаПоказателей.Вставить("С211Г8"	, "П000002110008");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С021Г8.Значение = Показатели.С211Г8.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С021Г8.Значение, Показатели.С211Г8.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_18(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 18)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.9 стр.2.1 = гр.9 стр.2.1.1 + гр.9 стр.2.1.3. ""Использование ресурсов на нужды Организации"" по группе "
		+ """Денежные средства"" должно совпадать с суммой показателей указанной группы по графе ""Использование ресурсов на"
		+ " нужды Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С021Г9"	, "П000002100009");
	ИменаПоказателей.Вставить("С211Г9"	, "П000002110009");
	ИменаПоказателей.Вставить("С213Г9"	, "П000002130009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С211Г9.Значение + Показатели.С213Г9.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С021Г9.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С021Г9.Значение, Показатели.С211Г9.Значение, Показатели.С213Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_19(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 19)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.1.1 = (гр.4 стр.2.1.1 + гр.6 стр.2.1.1) - (гр.7 стр.2.1.1 + гр.8 стр.2.1.1 + гр.9 стр.2.1.1). "
		+ """Сальдо операций"" показателя ""Денежные средства на отдельном счете"" должно совпадать с суммой всех значений г"
		+ "раф группы ""Движение ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контракт"
		+ "а""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3) - (%4 + %5 + %6) Итог [%7]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С211Г3"	, "П000002110003");
	ИменаПоказателей.Вставить("С211Г4"	, "П000002110004");
	ИменаПоказателей.Вставить("С211Г6"	, "П000002110006");
	ИменаПоказателей.Вставить("С211Г7"	, "П000002110007");
	ИменаПоказателей.Вставить("С211Г8"	, "П000002110008");
	ИменаПоказателей.Вставить("С211Г9"	, "П000002110009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С211Г4.Значение + Показатели.С211Г6.Значение) 
			- (Показатели.С211Г7.Значение + Показатели.С211Г8.Значение + Показатели.С211Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С211Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С211Г3.Значение, Показатели.С211Г4.Значение, Показатели.С211Г6.Значение, 
			Показатели.С211Г7.Значение, Показатели.С211Г8.Значение, Показатели.С211Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_20(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 20)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.1.2 = гр.4 стр.2.1.2 - гр.7 стр.2.1.2. ""Сальдо операций"" показателя ""Денежные средства на де"
		+ "позитах в банке"" должно совпадать со значением ""Движение в рамках Контракта"" за вычетом ""Списание в рамках Ко"
		+ "нтракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С212Г3"	, "П000002120003");
	ИменаПоказателей.Вставить("С212Г4"	, "П000002120004");
	ИменаПоказателей.Вставить("С212Г7"	, "П000002120007");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С212Г4.Значение - Показатели.С212Г7.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С212Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С212Г3.Значение, Показатели.С212Г4.Значение, Показатели.С212Г7.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_21(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 21)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.1.3 = (гр.4 стр.2.1.3 + гр.5 стр.2.1.3 + гр.6 стр.2.1.3) - (гр.7 стр.2.1.3 + гр.9 стр.2.1.3). "
		+ """Сальдо операций"" показателя ""Авансы, выданные поставщикам"" должно совпадать с суммой всех значений граф груп"
		+ "пы ""Движение ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6) Итог [%7]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С213Г3"	, "П000002130003");
	ИменаПоказателей.Вставить("С213Г4"	, "П000002130004");
	ИменаПоказателей.Вставить("С213Г5"	, "П000002130005");
	ИменаПоказателей.Вставить("С213Г6"	, "П000002130006");
	ИменаПоказателей.Вставить("С213Г7"	, "П000002130007");
	ИменаПоказателей.Вставить("С213Г9"	, "П000002130009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С213Г4.Значение + Показатели.С213Г5.Значение + Показатели.С213Г6.Значение) 
			- (Показатели.С213Г7.Значение + Показатели.С213Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С213Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С213Г3.Значение, Показатели.С213Г4.Значение, Показатели.С213Г5.Значение, Показатели.С213Г6.Значение, 
			Показатели.С213Г7.Значение, Показатели.С213Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_22(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 22)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.2 = гр.3 стр.2.2.1 + гр.3 стр.2.2.2 + гр.3 стр.2.2.3 + гр.3 стр.2.2.4 + гр.3 стр.2.2.5 + гр.3 с"
		+ "тр.2.2.6. ""Сальдо операций"" по группе ""Запасы"" должно совпадать с суммой показателей указанной группы'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 + %7 Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С022Г3"	, "П000002200003");
	ИменаПоказателей.Вставить("С221Г3"	, "П000002210003");
	ИменаПоказателей.Вставить("С222Г3"	, "П000002220003");
	ИменаПоказателей.Вставить("С223Г3"	, "П000002230003");
	ИменаПоказателей.Вставить("С224Г3"	, "П000002240003");
	ИменаПоказателей.Вставить("С225Г3"	, "П000002250003");
	ИменаПоказателей.Вставить("С226Г3"	, "П000002260003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С221Г3.Значение + Показатели.С222Г3.Значение + Показатели.С223Г3.Значение 
			+ Показатели.С224Г3.Значение + Показатели.С225Г3.Значение + Показатели.С226Г3.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С022Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С022Г3.Значение, Показатели.С221Г3.Значение, Показатели.С222Г3.Значение, Показатели.С223Г3.Значение, 
			Показатели.С224Г3.Значение, Показатели.С225Г3.Значение, Показатели.С226Г3.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_23(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 23)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.2 = (гр.4 стр.2.2 + гр.5 стр.2.2 + гр.6 стр.2.2) - (гр.7 стр.2.2 + гр.8 стр.2.2 + гр.9 стр.2.2)"
		+ ". ""Сальдо операций"" показателя ""Запасы"" должно совпадать с суммой всех значений граф группы ""Движение ресурс"
		+ "ов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С022Г3"	, "П000002200003");
	ИменаПоказателей.Вставить("С022Г4"	, "П000002200004");
	ИменаПоказателей.Вставить("С022Г5"	, "П000002200005");
	ИменаПоказателей.Вставить("С022Г6"	, "П000002200006");
	ИменаПоказателей.Вставить("С022Г7"	, "П000002200007");
	ИменаПоказателей.Вставить("С022Г8"	, "П000002200008");
	ИменаПоказателей.Вставить("С022Г9"	, "П000002200009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С022Г4.Значение + Показатели.С022Г5.Значение + Показатели.С022Г6.Значение) 
			- (Показатели.С022Г7.Значение + Показатели.С022Г8.Значение + Показатели.С022Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С022Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С022Г3.Значение, Показатели.С022Г4.Значение, Показатели.С022Г5.Значение, Показатели.С022Г6.Значение, 
			Показатели.С022Г7.Значение, Показатели.С022Г8.Значение, Показатели.С022Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_24(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 24)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.4 стр.2.2 = гр.4 стр.2.2.1 + гр.4 стр.2.2.2 + гр.4 стр.2.2.3 + гр.4 стр.2.2.4 + гр.4 стр.2.2.5 + гр.4 с"
		+ "тр.2.2.6. ""Движение в рамках Контракта"" по группе""Запасы"" должно совпадать с суммой показателей указанной гру"
		+ "ппы по графе ""Движение в рамках Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 + %7 Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С022Г4"	, "П000002200004");
	ИменаПоказателей.Вставить("С221Г4"	, "П000002210004");
	ИменаПоказателей.Вставить("С222Г4"	, "П000002220004");
	ИменаПоказателей.Вставить("С223Г4"	, "П000002230004");
	ИменаПоказателей.Вставить("С224Г4"	, "П000002240004");
	ИменаПоказателей.Вставить("С225Г4"	, "П000002250004");
	ИменаПоказателей.Вставить("С226Г4"	, "П000002260004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С221Г4.Значение + Показатели.С222Г4.Значение + Показатели.С223Г4.Значение 
			+ Показатели.С224Г4.Значение + Показатели.С225Г4.Значение + Показатели.С226Г4.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С022Г4.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С022Г4.Значение, Показатели.С221Г4.Значение, Показатели.С222Г4.Значение, Показатели.С223Г4.Значение, 
			Показатели.С224Г4.Значение, Показатели.С225Г4.Значение, Показатели.С226Г4.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_25(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 25)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.2.2 = гр.5 стр.2.2.1 + гр.5 стр.2.2.3 + гр.5 стр.2.2.6. ""Привлечение ресурсов с других Контракто"
		+ "в"" по группе ""Запасы"" должно совпадать с суммой показателей указанной группы по графе ""Привлечение ресурсов с"
		+ " других Контрактов""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С022Г5"	, "П000002200005");
	ИменаПоказателей.Вставить("С221Г5"	, "П000002210005");
	ИменаПоказателей.Вставить("С223Г5"	, "П000002230005");
	ИменаПоказателей.Вставить("С226Г5"	, "П000002260005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С221Г5.Значение + Показатели.С223Г5.Значение + Показатели.С226Г5.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С022Г5.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С022Г5.Значение, Показатели.С221Г5.Значение, Показатели.С223Г5.Значение, Показатели.С226Г5.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_26(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 26)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.6 стр.2.2 = гр.6 стр.2.2.1 + гр.6 стр.2.2.3 + гр.6 стр.2.2.6. ""Привлечение ресурсов Организации"" по г"
		+ "руппе ""Запасы"" должно совпадать с суммой показателей указанной группы по графе ""Привлечение ресурсов Организац"
		+ "ии""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С022Г6"	, "П000002200006");
	ИменаПоказателей.Вставить("С221Г6"	, "П000002210006");
	ИменаПоказателей.Вставить("С223Г6"	, "П000002230006");
	ИменаПоказателей.Вставить("С226Г6"	, "П000002260006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С221Г6.Значение + Показатели.С223Г6.Значение + Показатели.С226Г6.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С022Г6.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С022Г6.Значение, Показатели.С221Г6.Значение, Показатели.С223Г6.Значение, Показатели.С226Г6.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_27(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 27)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.7 стр.2.2 = гр.7 стр.2.2.1 + гр.7 стр.2.2.2 + гр.7 стр.2.2.3 + гр.7 стр.2.2.4 + гр.7 стр.2.2.5 + гр.7 с"
		+ "тр.2.2.6. ""Списание в рамках Контракта"" по группе ""Запасы"" должно совпадать с суммой показателей указанной гр"
		+ "уппы по графе ""Списание в рамках Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 + %7 Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С022Г7"	, "П000002200007");
	ИменаПоказателей.Вставить("С221Г7"	, "П000002210007");
	ИменаПоказателей.Вставить("С222Г7"	, "П000002220007");
	ИменаПоказателей.Вставить("С223Г7"	, "П000002230007");
	ИменаПоказателей.Вставить("С224Г7"	, "П000002240007");
	ИменаПоказателей.Вставить("С225Г7"	, "П000002250007");
	ИменаПоказателей.Вставить("С226Г7"	, "П000002260007");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С221Г7.Значение + Показатели.С222Г7.Значение + Показатели.С223Г7.Значение 
			+ Показатели.С224Г7.Значение + Показатели.С225Г7.Значение + Показатели.С226Г7.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С022Г7.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С022Г7.Значение, Показатели.С221Г7.Значение, Показатели.С222Г7.Значение, Показатели.С223Г7.Значение, 
			Показатели.С224Г7.Значение, Показатели.С225Г7.Значение, Показатели.С226Г7.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_28(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 28)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.8 стр.2.2 = гр.8 стр.2.2.1 + гр.8 стр.2.2.3 + гр.8 стр.2.2.6. ""Использование ресурсов на другие Контра"
		+ "кты"" по группе ""Запасы"" должно совпадать с суммой показателей указанной группы по графе ""Использование ресурс"
		+ "ов на другие Контракты""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С022Г8"	, "П000002200008");
	ИменаПоказателей.Вставить("С221Г8"	, "П000002210008");
	ИменаПоказателей.Вставить("С223Г8"	, "П000002230008");
	ИменаПоказателей.Вставить("С226Г8"	, "П000002260008");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С221Г8.Значение + Показатели.С223Г8.Значение + Показатели.С226Г8.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С022Г8.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С022Г8.Значение, Показатели.С221Г8.Значение, Показатели.С223Г8.Значение, Показатели.С226Г8.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_29(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 29)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.9 стр.2.2 = гр.9 стр.2.2.1 + гр.9 стр.2.2.2 + гр.9 стр.2.2.3 + гр.9 стр.2.2.4 + гр.9 стр.2.2.6. ""Испол"
		+ "ьзование ресурсов на нужды Организации"" по группе ""Запасы"" должно совпадать с суммой показателей указанной гру"
		+ "ппы по графе ""Использование ресурсов на нужды Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 Итог [%7]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С022Г9"	, "П000002200009");
	ИменаПоказателей.Вставить("С221Г9"	, "П000002210009");
	ИменаПоказателей.Вставить("С222Г9"	, "П000002220009");
	ИменаПоказателей.Вставить("С223Г9"	, "П000002230009");
	ИменаПоказателей.Вставить("С224Г9"	, "П000002240009");
	ИменаПоказателей.Вставить("С226Г9"	, "П000002260009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С221Г9.Значение + Показатели.С222Г9.Значение + Показатели.С223Г9.Значение 
			+ Показатели.С224Г9.Значение + Показатели.С226Г9.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С022Г9.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С022Г9.Значение, Показатели.С221Г9.Значение, Показатели.С222Г9.Значение, Показатели.С223Г9.Значение, 
			Показатели.С224Г9.Значение, Показатели.С226Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_30(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 30)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.2.1 = (гр.4 стр.2.2.1 + гр.5 стр.2.2.1 + гр.6 стр.2.2.1) - (гр.7 стр.2.2.1 + гр.8 стр.2.2.1 + г"
		+ "р.9 стр.2.2.1). ""Сальдо операций"" показателя ""Материалы на складах"" должно совпадать с суммой всех значений г"
		+ "раф группы ""Движение ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контракт"
		+ "а""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С221Г3"	, "П000002210003");
	ИменаПоказателей.Вставить("С221Г4"	, "П000002210004");
	ИменаПоказателей.Вставить("С221Г5"	, "П000002210005");
	ИменаПоказателей.Вставить("С221Г6"	, "П000002210006");
	ИменаПоказателей.Вставить("С221Г7"	, "П000002210007");
	ИменаПоказателей.Вставить("С221Г8"	, "П000002210008");
	ИменаПоказателей.Вставить("С221Г9"	, "П000002210009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С221Г4.Значение + Показатели.С221Г5.Значение + Показатели.С221Г6.Значение) 
			- (Показатели.С221Г7.Значение + Показатели.С221Г8.Значение + Показатели.С221Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С221Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С221Г3.Значение, Показатели.С221Г4.Значение, Показатели.С221Г5.Значение, Показатели.С221Г6.Значение, 
			Показатели.С221Г7.Значение, Показатели.С221Г8.Значение, Показатели.С221Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_31(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 31)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.2.2 = гр.4 стр.2.2.2 - (гр.7 стр.2.2.2 + гр.9 стр.2.2.2). ""Сальдо операций"" показателя ""НДС "
		+ "входящий"" должно совпадать со значением ""Движение в рамках Контракта"" за вычетом всех значений граф группы ""И"
		+ "спользование ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С222Г3"	, "П000002220003");
	ИменаПоказателей.Вставить("С222Г4"	, "П000002220004");
	ИменаПоказателей.Вставить("С222Г7"	, "П000002220007");
	ИменаПоказателей.Вставить("С222Г9"	, "П000002220009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С222Г4.Значение - (Показатели.С222Г7.Значение + Показатели.С222Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С222Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С222Г3.Значение, Показатели.С222Г4.Значение, Показатели.С222Г7.Значение, Показатели.С222Г9.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_32(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 32)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.2.3 = (гр.4 стр.2.2.3 + гр.5 стр.2.2.3 + гр.6 стр.2.2.3) - (гр.7 стр.2.2.3 + гр.8 стр.2.2.3 + г"
		+ "р.9 стр.2.2.3). ""Сальдо операций"" показателя ""Полуфабрикаты на складах"" должно совпадать с суммой всех значен"
		+ "ий граф группы ""Движение ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Конт"
		+ "ракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С223Г3"	, "П000002230003");
	ИменаПоказателей.Вставить("С223Г4"	, "П000002230004");
	ИменаПоказателей.Вставить("С223Г5"	, "П000002230005");
	ИменаПоказателей.Вставить("С223Г6"	, "П000002230006");
	ИменаПоказателей.Вставить("С223Г7"	, "П000002230007");
	ИменаПоказателей.Вставить("С223Г8"	, "П000002230008");
	ИменаПоказателей.Вставить("С223Г9"	, "П000002230009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С223Г4.Значение + Показатели.С223Г5.Значение + Показатели.С223Г6.Значение) 
			- (Показатели.С223Г7.Значение + Показатели.С223Г8.Значение + Показатели.С223Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С223Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С223Г3.Значение, Показатели.С223Г4.Значение, Показатели.С223Г5.Значение, Показатели.С223Г6.Значение, 
			Показатели.С223Г7.Значение, Показатели.С223Г8.Значение, Показатели.С223Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_33(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 33)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.2.4 = гр.4 стр.2.2.4 - (гр.7 стр.2.2.4 + гр.9 стр.2.2.4). ""Сальдо операций"" показателя ""Мате"
		+ "риалы, переданные в переработку"" должно совпадать со значением ""Движение в рамках Контракта"" за вычетом всех з"
		+ "начений граф группы ""Использование ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С224Г3"	, "П000002240003");
	ИменаПоказателей.Вставить("С224Г4"	, "П000002240004");
	ИменаПоказателей.Вставить("С224Г7"	, "П000002240007");
	ИменаПоказателей.Вставить("С224Г9"	, "П000002240009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С224Г4.Значение - (Показатели.С224Г7.Значение + Показатели.С224Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С224Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С224Г3.Значение, Показатели.С224Г4.Значение, Показатели.С224Г7.Значение, Показатели.С224Г9.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_34(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 34)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.2.5 = гр.4 стр.2.2.5 - гр.7 стр.2.2.5. ""Сальдо операций"" показателя ""Денежные средства на де"
		+ "позитах в банке"" должно совпадать со значением ""Движение в рамках Контракта"" за вычетом ""Списание в рамках Ко"
		+ "нтракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С225Г3"	, "П000002250003");
	ИменаПоказателей.Вставить("С225Г4"	, "П000002250004");
	ИменаПоказателей.Вставить("С225Г7"	, "П000002250007");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С225Г4.Значение - Показатели.С225Г7.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С225Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С225Г3.Значение, Показатели.С225Г4.Значение, Показатели.С225Г7.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_35(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 35)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.2.6 = (гр.4 стр.2.2.6 + гр.5 стр.2.2.6 + гр.6 стр.2.2.6) - (гр.7 стр.2.2.6 + гр.8 стр.2.2.6 + г"
		+ "р.9 стр.2.2.6). ""Сальдо операций"" показателя ""Средства производства"" должно совпадать с суммой всех значений "
		+ "граф группы ""Движение ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контрак"
		+ "та""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С226Г3"	, "П000002260003");
	ИменаПоказателей.Вставить("С226Г4"	, "П000002260004");
	ИменаПоказателей.Вставить("С226Г5"	, "П000002260005");
	ИменаПоказателей.Вставить("С226Г6"	, "П000002260006");
	ИменаПоказателей.Вставить("С226Г7"	, "П000002260007");
	ИменаПоказателей.Вставить("С226Г8"	, "П000002260008");
	ИменаПоказателей.Вставить("С226Г9"	, "П000002260009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С226Г4.Значение + Показатели.С226Г5.Значение + Показатели.С226Г6.Значение) 
			- (Показатели.С226Г7.Значение + Показатели.С226Г8.Значение + Показатели.С226Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С226Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С226Г3.Значение, Показатели.С226Г4.Значение, Показатели.С226Г5.Значение, Показатели.С226Г6.Значение, 
			Показатели.С226Г7.Значение, Показатели.С226Г8.Значение, Показатели.С226Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_36(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 36)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3 = гр.3 стр.2.3.1 + гр.3 стр.2.3.2 + гр.3 стр.2.3.3 + гр.3 стр.2.3.4 + гр.3 стр.2.3.5 + гр.3 с"
		+ "тр.2.3.6 + гр.3 стр.2.3.7 + гр.3 стр.2.3.8. ""Сальдо операций"" по группе ""Производство"" должно совпадать с сум"
		+ "мой показателей указанной группы по графе ""Сальдо операций""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 + %7 + %8 + %9 Итог [%_10]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С023Г3"	, "П000002300003");
	ИменаПоказателей.Вставить("С231Г3"	, "П000002310003");
	ИменаПоказателей.Вставить("С232Г3"	, "П000002320003");
	ИменаПоказателей.Вставить("С233Г3"	, "П000002330003");
	ИменаПоказателей.Вставить("С234Г3"	, "П000002340003");
	ИменаПоказателей.Вставить("С235Г3"	, "П000002350003");
	ИменаПоказателей.Вставить("С236Г3"	, "П000002360003");
	ИменаПоказателей.Вставить("С237Г3"	, "П000002370003");
	ИменаПоказателей.Вставить("С238Г3"	, "П000002380003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С231Г3.Значение + Показатели.С232Г3.Значение + Показатели.С233Г3.Значение 
			+ Показатели.С234Г3.Значение + Показатели.С235Г3.Значение + Показатели.С236Г3.Значение
			+ Показатели.С237Г3.Значение + Показатели.С238Г3.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С023Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С023Г3.Значение, Показатели.С231Г3.Значение, Показатели.С232Г3.Значение, Показатели.С233Г3.Значение, 
			Показатели.С234Г3.Значение, Показатели.С235Г3.Значение, Показатели.С236Г3.Значение, Показатели.С237Г3.Значение, 
			Показатели.С238Г3.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%_10", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_37(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 37)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3 = (гр.4 стр.2.3 + гр.5 стр.2.3 + гр.6 стр.2.3) - (гр.7 стр.2.3 + гр.8 стр.2.3 + гр.9 стр.2.3)"
		+ ". ""Сальдо операций"" по группе ""Производство""  должно совпадать с суммой всех значений граф группы ""Движение "
		+ "ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С023Г3"	, "П000002300003");
	ИменаПоказателей.Вставить("С023Г4"	, "П000002300004");
	ИменаПоказателей.Вставить("С023Г5"	, "П000002300005");
	ИменаПоказателей.Вставить("С023Г6"	, "П000002300006");
	ИменаПоказателей.Вставить("С023Г7"	, "П000002300007");
	ИменаПоказателей.Вставить("С023Г8"	, "П000002300008");
	ИменаПоказателей.Вставить("С023Г9"	, "П000002300009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С023Г4.Значение + Показатели.С023Г5.Значение + Показатели.С023Г6.Значение) 
			- (Показатели.С023Г7.Значение + Показатели.С023Г8.Значение + Показатели.С023Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С023Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С023Г3.Значение, Показатели.С023Г4.Значение, Показатели.С023Г5.Значение, Показатели.С023Г6.Значение, 
			Показатели.С023Г7.Значение, Показатели.С023Г8.Значение, Показатели.С023Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_38(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 38)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.4 стр.2.3 = гр.4 стр.2.3.1 + гр.4 стр.2.3.3 + гр.4 стр.2.3.6. ""Движение в рамках Контракта"" по группе"
		+ " ""Производство"" должно совпадать с суммой показателей указанной группы по графе ""Движение в рамках Контракта"
		+ """'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С023Г4"	, "П000002300004");
	ИменаПоказателей.Вставить("С231Г4"	, "П000002310004");
	ИменаПоказателей.Вставить("С233Г4"	, "П000002330004");
	ИменаПоказателей.Вставить("С236Г4"	, "П000002360004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С231Г4.Значение + Показатели.С233Г4.Значение + Показатели.С236Г4.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С023Г4.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С023Г4.Значение, Показатели.С231Г4.Значение, Показатели.С233Г4.Значение, Показатели.С236Г4.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_39(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 39)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.2.3 = гр.5 стр.2.3.1 + гр.5 стр.2.3.3. ""Привлечение ресурсов с других Контрактов"" по группе ""П"
		+ "роизводство"" должно совпадать с суммой показателей указанной группы по графе ""Привлечение ресурсов с других Кон"
		+ "трактов""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С023Г5"	, "П000002300005");
	ИменаПоказателей.Вставить("С231Г5"	, "П000002310005");
	ИменаПоказателей.Вставить("С233Г5"	, "П000002330005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С231Г5.Значение + Показатели.С233Г5.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С023Г5.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С023Г5.Значение, Показатели.С231Г5.Значение, Показатели.С233Г5.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_40(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 40)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.6 стр.2.3 = гр.6 стр.2.3.1 + гр.6 стр.2.3.2 + гр.6 стр.2.3.3 + гр.6 стр.2.3.4 + гр.6 стр.2.3.5. ""Привл"
		+ "ечение ресурсов Организации"" по группе ""Производство"" должно совпадать с суммой показателей указанной группы п"
		+ "о графе ""Привлечение ресурсов Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 Итог [%7]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С023Г6"	, "П000002300006");
	ИменаПоказателей.Вставить("С231Г6"	, "П000002310006");
	ИменаПоказателей.Вставить("С232Г6"	, "П000002320006");
	ИменаПоказателей.Вставить("С233Г6"	, "П000002330006");
	ИменаПоказателей.Вставить("С234Г6"	, "П000002340006");
	ИменаПоказателей.Вставить("С235Г6"	, "П000002350006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С231Г6.Значение + Показатели.С232Г6.Значение + Показатели.С233Г6.Значение 
			+ Показатели.С234Г6.Значение + Показатели.С235Г6.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С023Г6.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С023Г6.Значение, Показатели.С231Г6.Значение, Показатели.С232Г6.Значение, Показатели.С233Г6.Значение, 
			Показатели.С234Г6.Значение, Показатели.С235Г6.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_41(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 41)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.7 стр.2.3 = гр.7 стр.2.3.1 + гр.7 стр.2.3.3 + гр.7 стр.2.3.7 + гр.7 стр.2.3.8. ""Списание в рамках Конт"
		+ "ракта"" по группе ""Производство"" должно совпадать с суммой показателей указанной группы по графе ""Списание в р"
		+ "амках Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 Итог [%6]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С023Г7"	, "П000002300007");
	ИменаПоказателей.Вставить("С231Г7"	, "П000002310007");
	ИменаПоказателей.Вставить("С233Г7"	, "П000002330007");
	ИменаПоказателей.Вставить("С237Г7"	, "П000002370007");
	ИменаПоказателей.Вставить("С238Г7"	, "П000002380007");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С231Г7.Значение + Показатели.С233Г7.Значение + Показатели.С237Г7.Значение 
			+ Показатели.С238Г7.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С023Г7.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С023Г7.Значение, Показатели.С231Г7.Значение, Показатели.С233Г7.Значение, Показатели.С237Г7.Значение, 
			Показатели.С238Г7.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_42(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 42)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.8 стр.2.3 = гр.8 стр.2.3.1 + гр.8 стр.2.3.3. ""Использование ресурсов на другие Контракты"" по группе "
		+ """Производство"" должно совпадать с суммой показателей указанной группы по графе ""Использование ресурсов на друг"
		+ "ие Контракты""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С023Г8"	, "П000002300008");
	ИменаПоказателей.Вставить("С231Г8"	, "П000002310008");
	ИменаПоказателей.Вставить("С233Г8"	, "П000002330008");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С231Г8.Значение + Показатели.С233Г8.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С023Г8.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С023Г8.Значение, Показатели.С231Г8.Значение, Показатели.С233Г8.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_43(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 43)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.9 стр.2.3 = гр.9 стр.2.3.1 + гр.9 стр.2.3.3. ""Использование ресурсов на нужды Организации"" по группе "
		+ """Производство"" должно совпадать с суммой показателей указанной группы по графе ""Использование ресурсов на нужд"
		+ "ы Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С023Г9"	, "П000002300009");
	ИменаПоказателей.Вставить("С231Г9"	, "П000002310009");
	ИменаПоказателей.Вставить("С233Г9"	, "П000002330009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С231Г9.Значение + Показатели.С233Г9.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С023Г9.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С023Г9.Значение, Показатели.С231Г9.Значение, Показатели.С233Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_44(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 44)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.2.3.1 = гр.3 стр.2.3.1 / гр.1 стр.2.3.1. ""Выполнено,%"" показателя ""Затраты на материалы"" долж"
		+ "но совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С231Г2"	, "П000002310002");
	ИменаПоказателей.Вставить("С231Г3"	, "П000002310003");
	ИменаПоказателей.Вставить("С231Г1"	, "П000002310001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С231Г1.Значение = 0, 0, Окр(Показатели.С231Г3.Значение * 100 / 
			Показатели.С231Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С231Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С231Г2.Значение, Показатели.С231Г3.Значение, Показатели.С231Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_45(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 45)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.1 = (гр.4 стр.2.3.1 + гр.5 стр.2.3.1 + гр.6 стр.2.3.1) - (гр.7 стр.2.3.1 + гр.8 стр.2.3.1 + г"
		+ "р.9 стр.2.3.1). ""Сальдо операций"" показателя ""Затраты на материалы"" должно совпадать с суммой всех значений г"
		+ "раф группы ""Движение ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контракт"
		+ "а""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С231Г3"	, "П000002310003");
	ИменаПоказателей.Вставить("С231Г4"	, "П000002310004");
	ИменаПоказателей.Вставить("С231Г5"	, "П000002310005");
	ИменаПоказателей.Вставить("С231Г6"	, "П000002310006");
	ИменаПоказателей.Вставить("С231Г7"	, "П000002310007");
	ИменаПоказателей.Вставить("С231Г8"	, "П000002310008");
	ИменаПоказателей.Вставить("С231Г9"	, "П000002310009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С231Г4.Значение + Показатели.С231Г5.Значение + Показатели.С231Г6.Значение) 
			- (Показатели.С231Г7.Значение + Показатели.С231Г8.Значение + Показатели.С231Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С231Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С231Г3.Значение, Показатели.С231Г4.Значение, Показатели.С231Г5.Значение, Показатели.С231Г6.Значение, 
			Показатели.С231Г7.Значение, Показатели.С231Г8.Значение, Показатели.С231Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_46(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 46)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.2.3.2 = гр.3 стр.2.3.2 / гр.1 стр.2.3.2. ""Выполнено,%"" показателя ""Затраты на оплату труда"" д"
		+ "олжно совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С232Г2"	, "П000002320002");
	ИменаПоказателей.Вставить("С232Г3"	, "П000002320003");
	ИменаПоказателей.Вставить("С232Г1"	, "П000002320001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С232Г1.Значение = 0, 0, Окр(Показатели.С232Г3.Значение * 100 / 
			Показатели.С232Г1.Значение, 2)); 
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С232Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С232Г2.Значение, Показатели.С232Г3.Значение, Показатели.С232Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_47(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 47)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.2 = гр.6 стр.2.3.2. ""Сальдо операций"" показателя ""Затраты на оплату труда"" должно совпада"
		+ "ть со значением графы ""Привлечение ресурсов Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С232Г3"	, "П000002320003");
	ИменаПоказателей.Вставить("С232Г6"	, "П000002320006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С232Г3.Значение = Показатели.С232Г6.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С232Г3.Значение, Показатели.С232Г6.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_48(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 48)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.2.3.3 = гр.3 стр.2.3.3 / гр.1 стр.2.3.3. ""Выполнено,%"" показателя ""Прочие производственные зат"
		+ "раты"" должно совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта"
		+ """'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С233Г2"	, "П000002330002");
	ИменаПоказателей.Вставить("С233Г3"	, "П000002330003");
	ИменаПоказателей.Вставить("С233Г1"	, "П000002330001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С233Г1.Значение = 0, 0, Окр(Показатели.С233Г3.Значение * 100 / 
			Показатели.С233Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С233Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С233Г2.Значение, Показатели.С233Г3.Значение, Показатели.С233Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_49(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 49)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.3 = (гр.4 стр.2.3.3 + гр.5 стр.2.3.3 + гр.6 стр.2.3.3) - (гр.7 стр.2.3.3 + гр.8 стр.2.3.3 + г"
		+ "р.9 стр.2.3.3). ""Сальдо операций"" показателя ""Прочие производственные затраты"" должно совпадать с суммой всех"
		+ " значений граф группы ""Движение ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурс"
		+ "ов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С233Г3"	, "П000002330003");
	ИменаПоказателей.Вставить("С233Г4"	, "П000002330004");
	ИменаПоказателей.Вставить("С233Г5"	, "П000002330005");
	ИменаПоказателей.Вставить("С233Г6"	, "П000002330006");
	ИменаПоказателей.Вставить("С233Г7"	, "П000002330007");
	ИменаПоказателей.Вставить("С233Г8"	, "П000002330008");
	ИменаПоказателей.Вставить("С233Г9"	, "П000002330009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С233Г4.Значение + Показатели.С233Г5.Значение + Показатели.С233Г6.Значение) 
			- (Показатели.С233Г7.Значение + Показатели.С233Г8.Значение + Показатели.С233Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С233Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С233Г3.Значение, Показатели.С233Г4.Значение, Показатели.С233Г5.Значение, Показатели.С233Г6.Значение, 
			Показатели.С233Г7.Значение, Показатели.С233Г8.Значение, Показатели.С233Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_50(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 50)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.2.3.4 = гр.3 стр.2.3.4 / гр.1 стр.2.3.4. ""Выполнено,%"" показателя ""Общепроизводственные затрат"
		+ "ы"" должно совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С234Г2"	, "П000002340002");
	ИменаПоказателей.Вставить("С234Г3"	, "П000002340003");
	ИменаПоказателей.Вставить("С234Г1"	, "П000002340001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С234Г1.Значение = 0, 0, Окр(Показатели.С234Г3.Значение * 100 / 
			Показатели.С234Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С234Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С234Г2.Значение, Показатели.С234Г3.Значение, Показатели.С234Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_51(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 51)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.4 = гр.6 стр.2.3.4. ""Сальдо операций"" показателя ""Общепроизводственные затраты"" должно со"
		+ "впадать со значением графы ""Привлечение ресурсов Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С234Г3"	, "П000002340003");
	ИменаПоказателей.Вставить("С234Г6"	, "П000002340006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С234Г3.Значение = Показатели.С234Г6.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С234Г3.Значение, Показатели.С234Г6.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_52(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 52)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.2.3.5 = гр.3 стр.2.3.5 / гр.1 стр.2.3.5. ""Выполнено,%"" показателя ""Общехозяйственные затраты"""
		+ " должно совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С235Г2"	, "П000002350002");
	ИменаПоказателей.Вставить("С235Г3"	, "П000002350003");
	ИменаПоказателей.Вставить("С235Г1"	, "П000002350001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С235Г1.Значение = 0, 0, Окр(Показатели.С235Г3.Значение * 100 / 
			Показатели.С235Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С235Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С235Г2.Значение, Показатели.С235Г3.Значение, Показатели.С235Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_53(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 53)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.5 = гр.6 стр.2.3.5. ""Сальдо операций"" показателя ""Общехозяйственные затраты"" должно совпа"
		+ "дать со значением графы ""Привлечение ресурсов Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С235Г3"	, "П000002350003");
	ИменаПоказателей.Вставить("С235Г6"	, "П000002350006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С235Г3.Значение = Показатели.С235Г6.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С235Г3.Значение, Показатели.С235Г6.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_54(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 54)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.6 = гр.4 стр.2.3.6. ""Сальдо операций"" показателя ""Полуфабрикаты, внутренние работы"" должн"
		+ "о совпадать со значением графы ""Движение в рамках Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С236Г3"	, "П000002360003");
	ИменаПоказателей.Вставить("С236Г4"	, "П000002360004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С236Г3.Значение = Показатели.С236Г4.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С236Г3.Значение, Показатели.С236Г4.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_55(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 55)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.7 = гр.7 стр.2.3.7. ""Сальдо операций"" показателя ""Выпуск полуфабрикатов, внутренних работ"
		+ """ по модулю должно совпадать со значением графы ""Списание в рамках Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = [%2]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С237Г3"	, "П000002370003");
	ИменаПоказателей.Вставить("С237Г7"	, "П000002370007");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С237Г3.Значение = - Показатели.С237Г7.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С237Г3.Значение, Показатели.С237Г7.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_56(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 56)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.7 <= 0. ""Сальдо операций"" показателя ""Выпуск полуфабрикатов, внутренних работ"" должно быт"
		+ "ь отрицательным числом в случае наличия значения'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С237Г3"	, "П000002370003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С237Г3.Значение <= 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.С237Г3.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_57(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 57)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.8 = гр.7 стр.2.3.8. ""Сальдо операций"" показателя ""Выпуск продукции"" по модулю должно совп"
		+ "адать со значением графы ""Списание в рамках Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = [%2]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С238Г3"	, "П000002380003");
	ИменаПоказателей.Вставить("С238Г7"	, "П000002380007");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С238Г3.Значение = - Показатели.С238Г7.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С238Г3.Значение, Показатели.С238Г7.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_58(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 58)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.3.8 <= 0. ""Сальдо операций"" показателя ""Выпуск продукции"" должно быть отрицательным числом "
		+ "в случае наличия значения'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С238Г3"	, "П000002380003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С238Г3.Значение <= 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.С238Г3.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_59(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 59)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.2.4 = (гр.4 стр.2.4 + гр.5 стр.2.4 + гр.6 стр.2.4) - (гр.7 стр.2.4 + гр.8 стр.2.4 + гр.9 стр.2.4)"
		+ ". ""Сальдо операций"" показателя ""Готовый товар на складе""  должно совпадать с суммой всех значений граф группы"
		+ " ""Движение ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С024Г3"	, "П000002400003");
	ИменаПоказателей.Вставить("С024Г4"	, "П000002400004");
	ИменаПоказателей.Вставить("С024Г5"	, "П000002400005");
	ИменаПоказателей.Вставить("С024Г6"	, "П000002400006");
	ИменаПоказателей.Вставить("С024Г7"	, "П000002400007");
	ИменаПоказателей.Вставить("С024Г8"	, "П000002400008");
	ИменаПоказателей.Вставить("С024Г9"	, "П000002400009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С024Г4.Значение + Показатели.С024Г5.Значение + Показатели.С024Г6.Значение) 
			- (Показатели.С024Г7.Значение + Показатели.С024Г8.Значение + Показатели.С024Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С024Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С024Г3.Значение, Показатели.С024Г4.Значение, Показатели.С024Г5.Значение, Показатели.С024Г6.Значение, 
			Показатели.С024Г7.Значение, Показатели.С024Г8.Значение, Показатели.С024Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиГруппыОтгрузкаТоваров

&НаСервере
Процедура ПроверитьКС_60(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 60)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.3 = гр.3 стр.3 / гр.1 стр.3. ""Выполнено,%"" показателя ""Отгрузка товара, выполнение работ, оказ"
		+ "ание услуг"" должно совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контрак"
		+ "та""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С003Г2"	, "П000003000002");
	ИменаПоказателей.Вставить("С003Г3"	, "П000003000003");
	ИменаПоказателей.Вставить("С003Г1"	, "П000003000001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С003Г1.Значение = 0, 0, Окр(Показатели.С003Г3.Значение * 100 / 
			Показатели.С003Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С003Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С003Г2.Значение, Показатели.С003Г3.Значение, Показатели.С003Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_61(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 61)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.1 стр.3.1 = гр.1 стр.2.3.1 + гр.1 стр.2.3.2 + гр.1 стр.2.3.3 + гр.1 стр.2.3.4 + гр.1 стр.2.3.5. ""Сальд"
		+ "о операций"" показателя ""Себестоимость реализованной Продукции"" должно совпадать с суммой всех значений граф гр"
		+ "уппы ""Движение ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 Итог [%7]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С031Г1"	, "П000003100001");
	ИменаПоказателей.Вставить("С231Г1"	, "П000002310001");
	ИменаПоказателей.Вставить("С232Г1"	, "П000002320001");
	ИменаПоказателей.Вставить("С233Г1"	, "П000002330001");
	ИменаПоказателей.Вставить("С234Г1"	, "П000002340001");
	ИменаПоказателей.Вставить("С235Г1"	, "П000002350001");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С231Г1.Значение + Показатели.С232Г1.Значение + Показатели.С233Г1.Значение 
			+ Показатели.С234Г1.Значение + Показатели.С235Г1.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С031Г1.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С031Г1.Значение, Показатели.С231Г1.Значение, Показатели.С232Г1.Значение, Показатели.С233Г1.Значение, 
			Показатели.С234Г1.Значение, Показатели.С235Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_62(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 62)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.3.1 = гр.3 стр.3.1 / гр.1 стр.3.1. ""Выполнено,%"" показателя ""Себестоимость реализованной Проду"
		+ "кции"" должно совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта"
		+ """'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С031Г2"	, "П000003100002");
	ИменаПоказателей.Вставить("С031Г3"	, "П000003100003");
	ИменаПоказателей.Вставить("С031Г1"	, "П000003100001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С031Г1.Значение = 0, 0, Окр(Показатели.С031Г3.Значение * 100 / 
			Показатели.С031Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С031Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С031Г2.Значение, Показатели.С031Г3.Значение, Показатели.С031Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_63(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 63)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.3.1 = гр.4 стр.3.1 + гр.6 стр.3.1. ""Сальдо операций"" показателя ""Себестоимость реализованной П"
		+ "родукции"" должно совпадать с суммой всех значений граф группы ""Движение в рамках Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С031Г3"	, "П000003100003");
	ИменаПоказателей.Вставить("С031Г4"	, "П000003100004");
	ИменаПоказателей.Вставить("С031Г6"	, "П000003100006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С031Г4.Значение + Показатели.С031Г6.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С031Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С031Г3.Значение, Показатели.С031Г4.Значение, Показатели.С031Г6.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_64(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 64)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.3.2 = гр.3 стр.3.2 / гр.1 стр.3.2. ""Выполнено,%"" показателя ""Административно-управленческие ра"
		+ "сходы"" должно совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта"
		+ """'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С032Г2"	, "П000003200002");
	ИменаПоказателей.Вставить("С032Г3"	, "П000003200003");
	ИменаПоказателей.Вставить("С032Г1"	, "П000003200001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С032Г1.Значение = 0, 0, Окр(Показатели.С032Г3.Значение * 100 / 
			Показатели.С032Г1.Значение, 2)); 
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С032Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С032Г2.Значение, Показатели.С032Г3.Значение, Показатели.С032Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_65(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 65)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.3.2 = гр.6 стр.3.2. ""Сальдо операций"" показателя ""Административно-управленческие расходы"" дол"
		+ "жно совпадать со значением графы ""Привлечение ресурсов Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С032Г3"	, "П000003200003");
	ИменаПоказателей.Вставить("С032Г6"	, "П000003200006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С032Г3.Значение = Показатели.С032Г6.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С032Г3.Значение, Показатели.С032Г6.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_66(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 66)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.3.3 = гр.3 стр.3.3 / гр.1 стр.3.3. ""Выполнено,%"" показателя ""Коммерческие расходы"" должно сов"
		+ "падать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С033Г2"	, "П000003300002");
	ИменаПоказателей.Вставить("С033Г3"	, "П000003300003");
	ИменаПоказателей.Вставить("С033Г1"	, "П000003300001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С033Г1.Значение = 0, 0, Окр(Показатели.С033Г3.Значение * 100 / 
			Показатели.С033Г1.Значение, 2)); 
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С033Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С033Г2.Значение, Показатели.С033Г3.Значение, Показатели.С033Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_67(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 67)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.3.3 = гр.4 стр.3.3. ""Сальдо операций"" показателя ""Коммерческие расходы"" должно совпадать со з"
		+ "начением графы ""Движение в рамках Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С033Г3"	, "П000003300003");
	ИменаПоказателей.Вставить("С033Г4"	, "П000003300004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С033Г3.Значение = Показатели.С033Г4.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С033Г3.Значение, Показатели.С033Г4.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_68(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 68)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.3.4 = гр.3 стр.3.4 / гр.1 стр.3.4. ""Выполнено,%"" показателя ""Проценты по кредитам банка"" долж"
		+ "но совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С034Г2"	, "П000003400002");
	ИменаПоказателей.Вставить("С034Г3"	, "П000003400003");
	ИменаПоказателей.Вставить("С034Г1"	, "П000003400001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С034Г1.Значение = 0, 0, Окр(Показатели.С034Г3.Значение * 100 / 
			Показатели.С034Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С034Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С034Г2.Значение, Показатели.С034Г3.Значение, Показатели.С034Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_69(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 69)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.3.4 = гр.4 стр.3.4. ""Сальдо операций"" показателя ""Проценты по кредитам банка"" должно совпадат"
		+ "ь со значением графы ""Движение в рамках Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С034Г3"	, "П000003400003");
	ИменаПоказателей.Вставить("С034Г4"	, "П000003400004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С034Г3.Значение = Показатели.С034Г4.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С034Г3.Значение, Показатели.С034Г4.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_70(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 70)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.3.5 = гр.6 стр.3.5. ""Сальдо операций"" показателя ""НДС с выручки от продаж"" должно совпадать с"
		+ "о значением графы ""Привлечение ресурсов Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С035Г3"	, "П000003500003");
	ИменаПоказателей.Вставить("С035Г6"	, "П000003500006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		Настройки.ЭтоОшибка = НЕ Показатели.С035Г3.Значение = Показатели.С035Г6.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С035Г3.Значение, Показатели.С035Г6.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_71(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 71)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.3.6 = гр.3 стр.3.6 / гр.1 стр.3.6. ""Выполнено,%"" показателя ""Прибыль Контракта"" должно совпад"
		+ "ать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С036Г2"	, "П000003600002");
	ИменаПоказателей.Вставить("С036Г3"	, "П000003600003");
	ИменаПоказателей.Вставить("С036Г1"	, "П000003600001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С036Г1.Значение = 0, 0, Окр(Показатели.С036Г3.Значение * 100 / 
			Показатели.С036Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С036Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С036Г2.Значение, Показатели.С036Г3.Значение, Показатели.С036Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_72(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 72)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.3.6 = гр.3 стр.3 - (гр.3 стр.3.1 + гр.3 стр.3.2 + гр.3 стр.3.3 + гр.3 стр.3.4 + гр.3 стр.3.5). """
		+ "Сальдо операций"" показателя ""Прибыль Контракта"" должно совпадать с итоговым значением показателя по группе ""О"
		+ "тгрузка товара, выполнение работ, оказание услуг"" за вычетом остальных показателей группы: ""Себестоимость реали"
		+ "зованной Продукции"", ""Административно-управленческие расходы"", ""Коммерческие расходы"", ""Проценты по кредита"
		+ "м банка"", ""НДС с выручки от продаж"" по графе ""Сальдо операций""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - (%3 + %4 + %5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С036Г3"	, "П000003600003");
	ИменаПоказателей.Вставить("С003Г3"	, "П000003000003");
	ИменаПоказателей.Вставить("С031Г3"	, "П000003100003");
	ИменаПоказателей.Вставить("С032Г3"	, "П000003200003");
	ИменаПоказателей.Вставить("С033Г3"	, "П000003300003");
	ИменаПоказателей.Вставить("С034Г3"	, "П000003400003");
	ИменаПоказателей.Вставить("С035Г3"	, "П000003500003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С003Г3.Значение - (Показатели.С031Г3.Значение + Показатели.С032Г3.Значение 
			+ Показатели.С033Г3.Значение + Показатели.С034Г3.Значение + Показатели.С035Г3.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С036Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С036Г3.Значение, Показатели.С003Г3.Значение, Показатели.С031Г3.Значение, Показатели.С032Г3.Значение, 
			Показатели.С033Г3.Значение, Показатели.С034Г3.Значение, Показатели.С035Г3.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_73(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 73)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.4 = (гр.5 стр.4 + гр.6 стр.4) - (гр.8 стр.4 + гр.9 стр.4). ""Сальдо операций"" показателя ""Привл"
		+ "ечение ресурсов в Контракт/Перенаправление ресурсов Контракта""  должно совпадать с суммой всех значений граф гру"
		+ "ппы ""Движение ресурсов Контракта"" за вычетом всех значений граф группы ""Использование ресурсов Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3) - (%4 + %5) Итог [%6]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С004Г3"	, "П000004000003");
	ИменаПоказателей.Вставить("С004Г5"	, "П000004000005");
	ИменаПоказателей.Вставить("С004Г6"	, "П000004000006");
	ИменаПоказателей.Вставить("С004Г8"	, "П000004000008");
	ИменаПоказателей.Вставить("С004Г9"	, "П000004000009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = (Показатели.С004Г5.Значение + Показатели.С004Г6.Значение) 
			- (Показатели.С004Г8.Значение + Показатели.С004Г9.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.С004Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С004Г3.Значение, Показатели.С004Г5.Значение, Показатели.С004Г6.Значение, 
			Показатели.С004Г8.Значение, Показатели.С004Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_74(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 74)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.4 = гр.5 стр.1.4 + гр.5 стр.2.1 + гр.5 стр.2.2 + гр.5 стр.2.3 + гр.5 стр.2.4. ""Привлечение ресур"
		+ "сов с других Контрактов"" показателя ""Привлечение ресурсов в Контракт/Перенаправление ресурсов Контракта"" должн"
		+ "о совпадать с суммой значений показателей ""Задолженность перед поставщиками"", ""Денежные средства"", ""Запасы"""
		+ ", ""Производство"", ""Готовый товар на складе"" по графе ""Привлечение ресурсов с других Контрактов""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 Итог [%7]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С004Г5"	, "П000004000005");
	ИменаПоказателей.Вставить("С014Г5"	, "П000001400005");
	ИменаПоказателей.Вставить("С021Г5"	, "П000002100005");
	ИменаПоказателей.Вставить("С022Г5"	, "П000002200005");
	ИменаПоказателей.Вставить("С023Г5"	, "П000002300005");
	ИменаПоказателей.Вставить("С024Г5"	, "П000002400005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С014Г5.Значение + Показатели.С021Г5.Значение + Показатели.С022Г5.Значение 
			+ Показатели.С023Г5.Значение + Показатели.С024Г5.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С004Г5.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С004Г5.Значение, Показатели.С014Г5.Значение, Показатели.С021Г5.Значение, Показатели.С022Г5.Значение, 
			Показатели.С023Г5.Значение, Показатели.С024Г5.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_75(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 75)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.6 стр.4 = гр.6 стр.1.1 + гр.6 стр.1.2 + гр.6 стр.1.3 + гр.6 стр.1.4 + гр.6 стр.2.1 + гр.6 стр.2.2 + гр."
		+ "6 стр.2.3 + гр.6 стр.2.4 + гр.6 стр.3.1 + гр.6 стр.3.2 + гр.6 стр.3.5. ""Привлечение ресурсов Организации"" показ"
		+ "ателя ""Привлечение ресурсов в Контракт/Перенаправление ресурсов Контракта"" должно совпадать с суммой значений п"
		+ "оказателей ""Денежные средства, полученные от заказчика"", ""Кредиты банка"", ""Задолженность по процентам по кре"
		+ "дитам"", ""Задолженность перед поставщиками"", ""Денежные средства"", ""Запасы"", ""Производство"", ""Готовый тов"
		+ "ар на складе"", ""Себестоимость реализованной Продукции"", ""Административно-управленческие расходы"", ""НДС с вы"
		+ "ручки от продаж"" по графе ""Привлечение ресурсов Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='%1 = %2 + %3 + %4 + %5 + %6 + %7 + %8 + %9 + %_10 + %_11 + %_12 Итог [%_13]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С004Г6"	, "П000004000006");
	ИменаПоказателей.Вставить("С011Г6"	, "П000001100006");
	ИменаПоказателей.Вставить("С012Г6"	, "П000001200006");
	ИменаПоказателей.Вставить("С013Г6"	, "П000001300006");
	ИменаПоказателей.Вставить("С014Г6"	, "П000001400006");
	ИменаПоказателей.Вставить("С021Г6"	, "П000002100006");
	ИменаПоказателей.Вставить("С022Г6"	, "П000002200006");
	ИменаПоказателей.Вставить("С023Г6"	, "П000002300006");
	ИменаПоказателей.Вставить("С024Г6"	, "П000002400006");
	ИменаПоказателей.Вставить("С031Г6"	, "П000003100006");
	ИменаПоказателей.Вставить("С032Г6"	, "П000003200006");
	ИменаПоказателей.Вставить("С035Г6"	, "П000003500006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С011Г6.Значение + Показатели.С012Г6.Значение + Показатели.С013Г6.Значение 
			+ Показатели.С014Г6.Значение + Показатели.С021Г6.Значение + Показатели.С022Г6.Значение 
			+ Показатели.С023Г6.Значение + Показатели.С024Г6.Значение + Показатели.С031Г6.Значение 
			+ Показатели.С032Г6.Значение + Показатели.С035Г6.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С004Г6.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С004Г6.Значение, Показатели.С011Г6.Значение, Показатели.С012Г6.Значение, Показатели.С013Г6.Значение, 
			Показатели.С014Г6.Значение, Показатели.С021Г6.Значение, Показатели.С022Г6.Значение, Показатели.С023Г6.Значение, 
			Показатели.С024Г6.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка	, "%_10", Показатели.С031Г6.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка	, "%_11", Показатели.С032Г6.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка	, "%_12", Показатели.С035Г6.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка	, "%_13", РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_76(СтруктураРезультата)

	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 76)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.8 стр.4 = гр.8 стр.2.1 + гр.8 стр.2.2 + гр.8 стр.2.3 + гр.8 стр.2.4. ""Использование ресурсов на другие"
		+ " Контракты"" показателя ""Привлечение ресурсов в Контракт/Перенаправление ресурсов Контракта"" должно совпадать с"
		+ " суммой значений показателей ""Денежные средства"", ""Запасы"", ""Производство"", ""Готовый товар на складе"" по "
		+ "графе ""Использование ресурсов на другие Контракты""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 Итог [%6]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С004Г8"	, "П000004000008");
	ИменаПоказателей.Вставить("С021Г8"	, "П000002100008");
	ИменаПоказателей.Вставить("С022Г8"	, "П000002200008");
	ИменаПоказателей.Вставить("С023Г8"	, "П000002300008");
	ИменаПоказателей.Вставить("С024Г8"	, "П000002400008");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С021Г8.Значение + Показатели.С022Г8.Значение 
			+ Показатели.С023Г8.Значение + Показатели.С024Г8.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С004Г8.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С004Г8.Значение, Показатели.С021Г8.Значение, Показатели.С022Г8.Значение, 
			Показатели.С023Г8.Значение, Показатели.С024Г8.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_77(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 77)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.9 стр.4 = гр.9 стр.2.1 + гр.9 стр.2.2 + гр.9 стр.2.3 + гр.9 стр.2.4. ""Использование ресурсов на нужды "
		+ "Организации"" показателя ""Привлечение ресурсов в Контракт/Перенаправление ресурсов Контракта"" должно совпадать "
		+ "с суммой значений показателей ""Денежные средства"", ""Запасы"", ""Производство"", ""Готовый товар на складе"" по"
		+ " графе ""Использование ресурсов на нужды Организации""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 + %4 + %5 Итог [%6]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С004Г9"	, "П000004000009");
	ИменаПоказателей.Вставить("С021Г9"	, "П000002100009");
	ИменаПоказателей.Вставить("С022Г9"	, "П000002200009");
	ИменаПоказателей.Вставить("С023Г9"	, "П000002300009");
	ИменаПоказателей.Вставить("С024Г9"	, "П000002400009");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С021Г9.Значение + Показатели.С022Г9.Значение 
			+ Показатели.С023Г9.Значение + Показатели.С024Г9.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С004Г9.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С004Г9.Значение, Показатели.С021Г9.Значение, Показатели.С022Г9.Значение, 
			Показатели.С023Г9.Значение, Показатели.С024Г9.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_78(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 78)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.5 = гр.3 стр.5 / гр.1 стр.5. ""Выполнено,%"" показателя ""Списание денежных средств с отдельного "
		+ "счета Контракта"" должно совпадать с результатом деления показателя ""Сальдо операций"" на ""Целевые параметры Ко"
		+ "нтракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С005Г2"	, "П000005000002");
	ИменаПоказателей.Вставить("С005Г3"	, "П000005000003");
	ИменаПоказателей.Вставить("С005Г1"	, "П000005000001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С005Г1.Значение = 0, 0, Окр(Показатели.С005Г3.Значение * 100 / 
			Показатели.С005Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С005Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С005Г2.Значение, Показатели.С005Г3.Значение, Показатели.С005Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_79(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 79)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.2 стр.1.2 = гр.7 стр.1.2 / гр.1 стр.1.2. ""Выполнено,%"" показателя ""Кредиты банка"" должно совпадать "
		+ "с результатом деления показателя ""Списание в рамках Контракта"" на ""Целевые параметры Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 / %3 х 100 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С012Г2"	, "П000001200002");
	ИменаПоказателей.Вставить("С012Г7"	, "П000001200007");
	ИменаПоказателей.Вставить("С012Г1"	, "П000001200001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = ?(Показатели.С012Г1.Значение = 0, 0, Окр(Показатели.С012Г7.Значение * 100 / 
			Показатели.С012Г1.Значение, 2));
		ДелениеНаНоль = ДелениеНаНоль(Настройки, Показатели);
		Настройки.ЭтоОшибка = НЕ Показатели.С012Г2.Значение = РасчетнаяСумма ИЛИ ДелениеНаНоль;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С012Г2.Значение, Показатели.С012Г7.Значение, Показатели.С012Г1.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_80(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 80)'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.3 стр.4 = гр.3 стр.2 - гр.3 стр.1. ""Сальдо операций"" показателя ""Привлечение ресурсов в Контракт/Пер"
		+ "енаправление ресурсов Контракта"" должно совпадать со значением ""Сальдо операций"" по группе ""Распределение рес"
		+ "урсов Контракта"" за вычетом значения ""Сальдо операций"" по группе ""Финансирование Контракта""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка ввода'"));
	Настройки = ОбработатьНастройки(, Заголовки, СтруктураРезультата);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("С004Г3"	, "П000004000003");
	ИменаПоказателей.Вставить("С002Г3"	, "П000002000003");
	ИменаПоказателей.Вставить("С001Г3"	, "П000001000003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений	, "%1",СтраницаРаздела.Данные.Страница);
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела.Данные);
		
		РасчетнаяСумма = Показатели.С002Г3.Значение - Показатели.С001Г3.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.С004Г3.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.С004Г3.Значение, Показатели.С002Г3.Значение, Показатели.С001Г3.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура ЗаполнитьНастройкиОтчета()
	
	мДанныеОтчета.Вставить("Раздел1", мДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел1.Строки);
	Для каждого СтраницаРаздела Из мДанныеОтчета.Раздел1 Цикл
		
		НомерСтраницы = мДанныеОтчета.Раздел1.Индекс(СтраницаРаздела);
		Если НомерСтраницы = Неопределено Тогда
			Продолжить;
		Иначе
			СтраницаРаздела.Данные.Вставить("Страница", НомерСтраницы + 1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Перем ИндексРаздела;
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		ПодстрокаСтроки		= ПолучитьПредставлениеСтроки(Сред(Элемент.Значение, 7, 3));
		ПодстрокаГрафы		= Сред(Элемент.Значение, 13, 1);
		Представление		= "Графа " + ПодстрокаГрафы + " строка " + ПодстрокаСтроки;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, "Раздел1");
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатели(Показатели, Источник)
	
	Для каждого Элемент Из Показатели Цикл
		Элемент.Значение.Страница = Источник.Страница;
		Элемент.Значение.Значение = Источник[Элемент.Значение.ИмяПоказателя];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатели(Показатели)
	
	Для каждого Показатель Из Показатели Цикл
		
		НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
		НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
		
		НоваяСтрока.ИмяПоказателя			= Показатель.Значение.ИмяПоказателя;
		НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Значение.Дополнение), 
		Показатель.Значение.Представление + ", (" + Показатель.Значение.Дополнение + ")", Показатель.Значение.Представление);
		НоваяСтрока.ИмяСтраницы				= Показатель.Значение.ИмяСтраницы;
		
		НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Значение.Отчет), 
		Показатель.Значение.Отчет, СтруктураРеквизитовФормы.мСохраненныйДок);
		НоваяСтрока.Страница				= Показатель.Значение.Страница;
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник)
	
	ЗаполнитьПоказатели(Показатели, Источник);
	РасшифроватьПоказатели(Показатели);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, НСтр("ru=''"));
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС"	, Ложь);
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат(Знач Настройки = Неопределено, Знач СтруктураРезультата = Неопределено,
	Создать = Неопределено);
		
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
			"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСтроки(ИндексСтроки)
	
	ИндексСтроки	= СтрЗаменить(ИндексСтроки, "0", "");
	ДлинаСтроки		= СтрДлина(ИндексСтроки);
	МассивСтроки	= Новый Массив;
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		МассивСтроки.Добавить(Сред(ИндексСтроки, НомерСимвола, 1));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтроки, ".");

КонецФункции // ПолучитьПредставлениеСтроки()

&НаСервере
Функция ДелениеНаНоль(Настройки, Показатели)
	
	Числитель		= 0;
	Знаменатель		= 0;
	
	Для каждого Показатель Из Показатели Цикл
		Если Прав(Показатель.Ключ, 2) = "Г3" ИЛИ Прав(Показатель.Ключ, 2) = "Г7" Тогда
			Числитель	= Показатель.Значение.Значение;
		КонецЕсли;
		Если Прав(Показатель.Ключ, 2) = "Г1" Тогда
			Знаменатель	= Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ДелениеНаНоль = НЕ Числитель = 0 И Знаменатель = 0;
	
	СообщениеПоУмолчанию	= НСтр("ru='Ошибка ввода'");
	СообщениеОДеленииНаНоль	= НСтр("ru='Деление на ноль'");
	
	Настройки.ОписаниеОшибки = ?(ДелениеНаНоль, СообщениеОДеленииНаНоль, СообщениеПоУмолчанию);
	
	Возврат ДелениеНаНоль;

КонецФункции // ПолучитьПредставлениеСтроки()

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ПослеИзмененияСтатусаОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		СохранитьСтатус();
		РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ЭтаФорма, "Минобороны");
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ФИО, ФИОРук";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтрокаСведений);
	
	ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
	
	ТабличныйДокумент.Области.КПП.Значение = ВРег(СокрЛП(СведенияОбОрганизации.КППЮЛ));
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
	Иначе
		НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
	КонецЕсли;
	
	ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
	
	ТабличныйДокумент.Области.ОргПодписант.Значение = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
	СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						Если ИмяРаздела = "Раздел1" Тогда
							
							ДанныеСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Данные;
							
							СтруктПарам = Новый Структура;
							СтруктПарам.Вставить("ИГК", ДанныеСтраницы.ИГК);
							СтруктПарам.Вставить("НомерКонтракта", ДанныеСтраницы.НомерКонтракта);
							СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыРаздела);
							
							ЭлементРаздел.КолонкаРазделыОтчета = ПредставлениеСтраницыРаздела1(СтруктПарам);
							
						Иначе
							
							НаимСтраницы = "Стр. ";
							Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
								НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
							КонецЕсли;
							ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
							+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
							
						КонецЕсли;
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " на " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ПараметрыОбработчикаОжидания = Новый Структура;
		ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
		ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура(
		"ИдентификаторЗадания", СтруктураРеквизитовФормы.ИдентификаторЗадания), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИДОтчета(ЭтаФормаИмя)
	
	Возврат ЧастьУникальногоИмениФормы(ЭтаФормаИмя, 1);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИДРедакцииОтчета(ЭтаФормаИмя)
	
	Возврат ЧастьУникальногоИмениФормы(ЭтаФормаИмя, 3);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧастьУникальногоИмениФормы(ЭтаФормаИмя, Индекс)
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭтаФормаИмя, ".")[Индекс];
	
КонецФункции

&НаКлиенте
Процедура СохранитьСтатус()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(
			"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВМинобороны") Тогда
		
		МодульДокументооборотСМинобороныКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиентСервер");
		
		СохранитьСтатусНаСервере();
		Параметр = Новый Структура;
		Параметр.Вставить("Ссылка", МодульДокументооборотСМинобороныКлиентСервер.СсылкаНаОтчетПоФорме(ЭтаФорма));
		Параметр.Вставить("Организация", МодульДокументооборотСМинобороныКлиентСервер.ПолучитьОрганизациюПоФорме(ЭтаФорма));
		Оповестить("Актуализация состояния отправки", Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСтатусНаСервере()
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Отказ = Ложь;
	РегламентированнаяОтчетность.ЗаписьОбъектовРегламентированнойОтчетности(
		ДокументооборотСМинобороныКлиентСервер.СсылкаНаОтчетПоФорме(ЭтаФорма), Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(
			"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВМинобороны") Тогда
		
		МодульДокументооборотСМинобороныКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиентСервер");
		МодульДокументооборотСМинобороныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиент");
		
		Если ИмяСобытия = "Обновлено состояние отчета" Тогда
			Если Параметр.Ссылка = ДокументооборотСМинобороныКлиентСервер.СсылкаНаОтчетПоФорме(ЭтаФорма) Тогда			
				РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ЭтаФорма, "Минобороны");
				СохранитьСтатус();
			КонецЕсли;
		ИначеЕсли ИмяСобытия = "Завершение отправки" Тогда
			Если Параметр.Ссылка = МодульДокументооборотСМинобороныКлиент.СсылкаНаОтчетПоФорме(ЭтаФорма) Тогда
				СохранитьСтатус();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОтправки(Команда)

	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ИсторияОтправкиПослеПолученияКонтекстаЭДО",
			ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОтправкиПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент 	 = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Ссылка", 			СтруктураРеквизитовФормы.мСохраненныйДок);
	ДополнительныеПараметры.Вставить("Наименование", 	ЭтаФорма.Заголовок);
	ДополнительныеПараметры.Вставить("Организация", 	СтруктураРеквизитовФормы.Организация);
	ДополнительныеПараметры.Вставить("ЗаголовокФормы", 	ЭтаФорма.Заголовок);
	ДополнительныеПараметры.Вставить("СтраницаЖурнала", "");
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ВсеОтправки",
		ДополнительныеПараметры,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
