&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = "";
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений; 
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2014кв1";
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	
	СтруктураРеквизитовФормы.мРазмерНеоблогаемойСуммыДохода = 4000.00;
	
	СтруктураРеквизитовФормы.мИдГруппыА 			= "П0000700010";
	СтруктураРеквизитовФормы.мИдГруппыБ 			= "П0000800010";
	СтруктураРеквизитовФормы.мИдГруппыГ2 			= "П0000102010";
	СтруктураРеквизитовФормы.мИдГруппыГ3 			= "П0000272010";
	СтруктураРеквизитовФормы.мИдГруппыЖ3 			= "П0000220";
	СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение	= "П0000251190";
	
	мСтатусНалогоплательщика = 0;
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	
	КолИсхСтрокИдГруппыА = 1; 
	КолИсхСтрокИдГруппыБ = 1; 
	КолИсхСтрокИдГруппыГ2 = 1; 
	КолИсхСтрокИдГруппыГ3 = 1; 
	КолИсхСтрокИдГруппыЖ3 = 1; 
	КолИсхСтрокИдГруппыГ1Продолжение = 12; 
	
	
	МаксКолКолонокИдГруппыА = 4;	
	МаксКолКолонокИдГруппыБ = 2;	
	МаксКолКолонокИдГруппыГ2 = 5;	
	МаксКолКолонокИдГруппыГ3 = 6;	
	МаксКолКолонокИдГруппыЖ3 = 1;	
	МаксКолКолонокИдГруппыГ1Продолжение = 12;	
	
	
	КолКолонокИдГруппыА = 8;
	КолКолонокИдГруппыБ = 14;
	КолКолонокИдГруппыГ2 = 6; 
	КолКолонокИдГруппыГ3 = 6; 
	КолКолонокИдГруппыЖ3 = 21; 
	КолКолонокИдГруппыГ1Продолжение = 5; 
	
	СтруктураДанныхТитульный  			= Новый Структура;
	СтруктураДанныхТитульный002  		= Новый Структура;
	
	СтруктураДанныхРаздел1 				= Новый Структура;
	СтруктураДанныхРаздел2 				= Новый Структура;
	СтруктураДанныхРаздел3 				= Новый Структура;
	СтруктураДанныхРаздел4 				= Новый Структура;
	СтруктураДанныхРаздел5 				= Новый Структура;
	СтруктураДанныхРаздел6 				= Новый Структура;
	
	СтруктураДанныхЛистГ1 				= Новый Структура;
	
	СтруктураДанныхЛистЕ 				= Новый Структура;
	СтруктураДанныхЛистЖ1 				= Новый Структура;
	СтруктураДанныхЛистЖ2 				= Новый Структура;
	
	СтруктураДанныхЛистЗ 				= Новый Структура;
	СтруктураДанныхЛистЗПродолжение 	= Новый Структура;
	
	СтруктураДанныхЛистИ 				= Новый Структура;
	
	
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыА, СтруктураРеквизитовФормы.мИдГруппыА);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыБ, СтруктураРеквизитовФормы.мИдГруппыБ);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ2, СтруктураРеквизитовФормы.мИдГруппыГ2);
	
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ3, СтруктураРеквизитовФормы.мИдГруппыГ3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыЖ3, СтруктураРеквизитовФормы.мИдГруппыЖ3);
	
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение, СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("ЛистА",     		"ТаблицаСтраницыЛистА");
	мСтруктураМногостраничныхРазделов.Вставить("ЛистБ",     		"ТаблицаСтраницыЛистБ");
	мСтруктураМногостраничныхРазделов.Вставить("ЛистГ2",    		"ТаблицаСтраницыЛистГ2");
	мСтруктураМногостраничныхРазделов.Вставить("ЛистВ",     		"ТаблицаСтраницыЛистВ");
	мСтруктураМногостраничныхРазделов.Вставить("ЛистЖ3",     		"ТаблицаСтраницыЛистЖ3");
	мСтруктураМногостраничныхРазделов.Вставить("ЛистГ3",    		"ТаблицаСтраницыЛистГ3");
	мСтруктураМногостраничныхРазделов.Вставить("ЛистГ1Продолжение", "ТаблицаСтраницыЛистГ1Продолжение");
	мСтруктураМногостраничныхРазделов.Вставить("ЛистД", 			"ТаблицаСтраницыЛистД");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел6", 			"ТаблицаСтраницыРаздел6");
	
	
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыА, КолИсхСтрокИдГруппыА);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыБ, КолИсхСтрокИдГруппыБ);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ2, КолИсхСтрокИдГруппыГ2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ3, КолИсхСтрокИдГруппыГ3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыЖ3, КолИсхСтрокИдГруппыЖ3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение, КолИсхСтрокИдГруппыГ1Продолжение);
	
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыА, КолКолонокИдГруппыА);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыБ, КолКолонокИдГруппыБ);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ2, КолКолонокИдГруппыГ2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ3, КолКолонокИдГруппыГ3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыЖ3, КолКолонокИдГруппыЖ3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение, КолКолонокИдГруппыГ1Продолжение);
	
	
	мСтруктураМаксКолвоКолонокРазделов = Новый Структура;
	мСтруктураМаксКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыА, МаксКолКолонокИдГруппыА);
	мСтруктураМаксКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыБ, МаксКолКолонокИдГруппыБ);
	мСтруктураМаксКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ2, МаксКолКолонокИдГруппыГ2);
	мСтруктураМаксКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ3, МаксКолКолонокИдГруппыГ3);
	мСтруктураМаксКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыЖ3, МаксКолКолонокИдГруппыЖ3);
	мСтруктураМаксКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение, МаксКолКолонокИдГруппыГ1Продолжение);
	
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "15/08/2014";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1151020";
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.08", Истина);
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.НаимОрг = Неопределено;
	Рез = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "НаимЮЛПол").Свойство("НаимЮЛПол", СтруктураРеквизитовФормы.НаимОрг);
	СтруктураРеквизитовФормы.НаимОрг = ?(Рез, СтруктураРеквизитовФормы.НаимОрг, "");
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;

КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыА");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыБ");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыВ");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыГ2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыГ3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыЖ3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыГ1Продолжение");
	
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена", Ложь);
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоМесту");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоДНБ");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("мРазмерНеоблогаемойСуммыДохода");
	СтруктураРеквизитовФормы.Вставить("мСтатусНалогоплательщика");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛистА.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛистБ.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛистГ2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛистГ3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛистВ.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛистЖ3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛистГ1Продолжение.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛистД.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел6.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	УстановитьМаскиВПоляхВвода(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			СтруктураРеквизитовФормы.мПоМесту = "214";
			ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
						
		КонецЕсли;
		
		ЗаполнитьДатуПодписи(ЭтаФорма);
		Модифицированность = Истина;

	Иначе
		ВосстановитьСохраненныеДанные();
		ЗаполнитьПустыеСтруктурыДанных();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			
			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный002";
	СтрокаУровня1.Представление            = "Сведения" + Символы.ПС + "о физ. лице";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистА";
	СтрокаУровня1.Представление            = "Лист А";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистБ";
	СтрокаУровня1.Представление            = "Лист Б";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистВ";
	СтрокаУровня1.Представление            = "Лист В";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ1";
	СтрокаУровня1.Представление            = "Лист Г1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ1Продолжение";
	СтрокаУровня1.Представление            = "Лист Г1" + Символы.ПС + "продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ2";
	СтрокаУровня1.Представление            = "Лист Г2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ3";
	СтрокаУровня1.Представление            = "Лист Г3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистД";
	СтрокаУровня1.Представление            = "Лист Д";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЕ";
	СтрокаУровня1.Представление            = "Лист Е";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ1";
	СтрокаУровня1.Представление            = "Лист Ж1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ2";
	СтрокаУровня1.Представление            = "Лист Ж2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ3";
	СтрокаУровня1.Представление            = "Лист Ж3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗ";
	СтрокаУровня1.Представление            = "Лист З";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗПродолжение";
	СтрокаУровня1.Представление            = "Лист З" + Символы.ПС + "продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистИ";
	СтрокаУровня1.Представление            = "Лист И";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный002";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 9;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистА";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 999;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыА;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 10;
	
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистБ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 999;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыБ;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 25;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистВ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 999;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Истина;
		
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистГ1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистГ1Продолжение";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 999;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 5;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистГ2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 999;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыГ2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 9;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистГ3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 999;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыГ3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 9;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистД";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЕ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЖ1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЖ2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЖ3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 999;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЗ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистЗПродолжение";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ЛистИ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице  = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2014кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Гражданство", 1, , "Наличие гражданства", КоллекцияСписковВыбора["Гражданство"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтатусНалогоплательщика", 1, , "Статус налогоплательщика", КоллекцияСписковВыбора["СтатусНалогоплательщика"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "МестоЖительства", 1, , "Выбор вида места жительства", КоллекцияСписковВыбора["МестаЖительства"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодВидаДокумента", 2, , "Выбор вида документа, удостоверяющего личность", КоллекцияСписковВыбора["КодВидаДокумента"]);
	
	//Раздел 6
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000060001001", 1, , "Выбор кода строки 010", КоллекцияСписковВыбора["КодСтроки010"]);
	
	Если ДатаПодписи >= '2015-01-01' ИЛИ НЕ ЗначениеЗаполнено(ДатаПодписи) Тогда
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000060002003", 20, "КБК", "Выбор КБК", КоллекцияСписковВыбора["КБК2015"]);
	ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2012 Тогда
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000060002003", 20, "КБК", "Выбор КБК", КоллекцияСписковВыбора["КБК2012"]);
	Иначе
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000060002003", 20, "КБК", "Выбор КБК", КоллекцияСписковВыбора["КБК2011"]);
	КонецЕсли;
	
	//Лист А
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтавкаНалога", 0, , "Выбор налоговой ставки", КоллекцияСписковВыбора["СтавкаНалога"]);
	ЭтаФорма.мСтавкиНалога.Загрузить(КоллекцияСписковВыбора["СтавкаНалога"]);
	
	//Лист В
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000090001001", 1, , "Выбор вида деятельности", КоллекцияСписковВыбора["ВидДеятельности"]);
	
	//Лист Д
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000012001001", 1, , "Выбор места нахождения источника доходов", КоллекцияСписковВыбора["ИсточникДоходов"]);
	
	//Лист Ж3
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000022001001", 1, , "Выбор признака договора пенсионного обеспечения", КоллекцияСписковВыбора["ПризнакДоговораПенсионногоСтрахования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000022011001", 1, , "Выбор признака договора пенсионного обеспечения", КоллекцияСписковВыбора["ПризнакДоговораПенсионногоСтрахования"]);
	
	//Лист И
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000023001001", 1, , "Выбор кода наименования объекта",    КоллекцияСписковВыбора["КодНаименованияОбъекта"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000023002001", 1, , "Выбор вида собственности на объект", КоллекцияСписковВыбора["ВидСобственности"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000023003001", 1, , "Выбор признака налогоплательщика",   КоллекцияСписковВыбора["ПризнакНалогоплательщикаПоИмуществу"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМаскиВПоляхВвода(ИмяТекРаздела)
	
	ТипДата = Новый ОписаниеТипов("Дата");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Число15_2 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
	
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение И Не ЗначениеЗаполнено(Область.Формат) Тогда
			Если Область.ТипЗначения = ТипЧисло Тогда
				Область.ТипЗначения = Число15_2;
			ИначеЕсли Область.ТипЗначения = ТипДата Тогда
				Область.Формат = "ДФ=dd.MM.yyyy";
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	// титульный
	Если ИмяТекРаздела = "Титульный" Тогда
		ТабличныйДокумент.Области["НомерКорректировки"].Маска = "999";
		ТабличныйДокумент.Области["КодИМНС"].Маска = "9999";
		
		// Раздел 6
	ИначеЕсли ИмяТекРаздела = "Раздел6" Тогда
		
		ТабличныйДокумент.Области.П000060001001.Формат = "ЧЦ=1; ЧДЦ=0";
		ТабличныйДокумент.Области.П000060001001.Маска = 3;
		ТабличныйДокумент.Области.П000060003003.Маска = "99999999999";
		ТабличныйДокумент.Области.П000060002003.Маска = "999999999999999999999";
		
		//Лист А
	ИначеЕсли ИмяТекРаздела = "ЛистА" Тогда
		
		ТабличныйДокумент.Области.СтавкаНалога.Маска = "39";
		ТабличныйДокумент.Области.СтавкаНалога.Формат = "ЧЦ=2; ЧДЦ=0";
		
		Для Сч = 1 По ЭтаФорма.П0000700010.Количество() Цикл
			ТабличныйДокумент.Области["П000070001001_" + Сч].Маска = "999999999999";
			ТабличныйДокумент.Области["П000070001002_" + Сч].Маска = "999999999";
			ТабличныйДокумент.Области["П000070001003_" + Сч].Маска = "99999999999";
		КонецЦикла;
		
		// Лист Б
	ИначеЕсли ИмяТекРаздела = "ЛистБ" Тогда
		//
		ТабличныйДокумент.Области.СтавкаНалога.Маска = "39";
		ТабличныйДокумент.Области.СтавкаНалога.Формат = "ЧЦ=2; ЧДЦ=0";
		
		Для Сч = 1 По ЭтаФорма.П0000800010.Количество() Цикл
			ТабличныйДокумент.Области["П000080001004_" + Сч].Маска = "999";
			ТабличныйДокумент.Области["П000080001001_" + Сч].Маска = "999";
		КонецЦикла;
		
		// Лист В
	ИначеЕсли ИмяТекРаздела = "ЛистВ" Тогда
		
		ТабличныйДокумент.Области["П000090001001"].Маска = "4";
		ТабличныйДокумент.Области["П000090001002"].Маска = "99.99.99";
		
	ИначеЕсли ИмяТекРаздела = "ЛистГ1Продолжение" Тогда
		
		ТабличныйДокумент.Области.П000025117002.Маска = "999999999999";
		ТабличныйДокумент.Области.П000025118004.Маска = "99999999999";
		
	ИначеЕсли ИмяТекРаздела = "ЛистГ2" Тогда
		
		Для Сч = 1 По ЭтаФорма.П0000102010.Количество() Цикл
			ТабличныйДокумент.Области["П000010201001_" + Сч].Маска = "999999999999";
			ТабличныйДокумент.Области["П000010201002_" + Сч].Маска = "99999999999";
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "ЛистГ3" Тогда
		
		Для Сч = 1 По ЭтаФорма.П0000272010.Количество() Цикл
			ТабличныйДокумент.Области["П000027201001_" + Сч].Маска = "999999999999";
			ТабличныйДокумент.Области["П000027201002_" + Сч].Маска = "99999999999";
			ТабличныйДокумент.Области["П000027201003_" + Сч].Маска = "99999999999";
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "ЛистД" Тогда
		
		ТабличныйДокумент.Области.П000012001001.Маска = "2";
		
	ИначеЕсли ИмяТекРаздела = "ЛистЖ1" Тогда
		
		ТабличныйДокумент.Области.П000020013002.Формат = "ЧЦ=2; ЧДЦ=0";
		ТабличныйДокумент.Области.П000020014004.Формат = "ЧЦ=2; ЧДЦ=0";
		
	ИначеЕсли ИмяТекРаздела = "ЛистЖ3" Тогда
		
		ТабличныйДокумент.Области.П000022001001.Формат = "ЧЦ=1; ЧДЦ=0";
		ТабличныйДокумент.Области.П000022011001.Формат = "ЧЦ=1; ЧДЦ=0";
		ТабличныйДокумент.Области.П000022002001.Маска = "999999999999";
		ТабличныйДокумент.Области.П000022003001.Маска = "99999999999";
		ТабличныйДокумент.Области.П000022012001.Маска = "999999999999";
		ТабличныйДокумент.Области.П000022013001.Маска = "99999999999";
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, ЗаголовокРаздела);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Видимость   = Истина;
		Элементы.УдалитьСтраницу.Видимость    = Истина;
		
		Если ЗаголовокРаздела Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Видимость = Ложь;
						
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Видимость    = Ложь;
			
		КонецЕсли;
	Иначе
		
		Элементы.ДобавитьСтраницу.Видимость   = Ложь;
		Элементы.УдалитьСтраницу.Видимость    = Ложь;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                  = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ЛистА"
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ЛистБ"
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ЛистГ2" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ЛистГ3"  Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
		
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если  Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел6" Тогда

		Элементы.СобратьДанные.Видимость = Истина;
		
	Иначе
		
		Элементы.СобратьДанные.Видимость = Ложь;

	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета,,,ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	ПриСменеСтраницы(ЭтаФорма, ИмяТекРаздела);
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		
		РасчетНаСервере(ИмяТекРаздела);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "ЛистД" 
		ИЛИ НаимРаздела = "ЛистВ" 
		ИЛИ НаимРаздела = "ЛистЖ3"
		ИЛИ НаимРаздела = "Раздел6"
		Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[НаимРаздела];
		
		АктивныеСтраницы = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			Для каждого Страница Из АктивныеСтраницы Цикл
				Страница.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			Страница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли; 
		
		// Многостраничные и многострочные разделы.
		//
	ИначеЕсли НаимРаздела = "ЛистА"
		ИЛИ НаимРаздела = "ЛистБ" 
		ИЛИ НаимРаздела = "ЛистГ2"
		ИЛИ НаимРаздела = "ЛистГ3"
		ИЛИ НаимРаздела = "ЛистГ1Продолжение"
		Тогда		
		
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
			
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, УдалениеСтраницы = Ложь, ИндексУдаляемойСтраницы = Неопределено, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	
	ЭтоПоследняяСтраница = Истина;
	ЭтоПерваяСтраница = Истина;
	
	КоличествоПодобныхСтраниц = 0;
	
	Если РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногостраничностьВРазделе") = Истина 
		И РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "ПоказыватьИтогиТолькоНаПоследнейСтранице") = Истина Тогда
		Если ИмяТекРаздела = "ЛистБ"
			Или ИмяТекРаздела = "ЛистА" Тогда
			//Для листов А и Б итоги выводятся в разрезе ставок налога
			ТаблицаРаздела = ЭтаФорма["ТаблицаСтраницы" + ИмяТекРаздела];
			ТекСтраница = ТаблицаРаздела[НомерСтраницыРазделаОтчета - 1];
			ТекСтавкаНалога = ТекСтраница.Данные[0].Значение.СтавкаНалога;
			ИндексТекСтраницы = ТаблицаРаздела.Индекс(ТекСтраница);
			
			// Если найдется страница удовлетворяющая условиям:
			//  - Это не Текущая страница
			//  - Это не удаляемая страница
			//  - Ставка налога на этой странице такая же как и в текущей
			//  - Индекс этой страницы больше индекса текущей
			// Это означает что текущая страница не последняя
			Для Каждого Страница Из ТаблицаРаздела Цикл
				ИндексСтраницы = ТаблицаРаздела.Индекс(Страница);
				Если Страница <> ТекСтраница
					И ИндексСтраницы <> ИндексУдаляемойСтраницы
					И Страница.Данные[0].Значение.СтавкаНалога = ТекСтавкаНалога Тогда
					КоличествоПодобныхСтраниц = КоличествоПодобныхСтраниц + 1;
					Если ИндексСтраницы > ИндексТекСтраницы Тогда
						ЭтоПоследняяСтраница = Ложь;
					Иначе
						ЭтоПерваяСтраница = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ЭтоПоследняяСтраница = ЭтаФорма["ТаблицаСтраницы" + ИмяТекРаздела].Количество() - НомерСтраницыРазделаОтчета = 0;
			ЭтоПерваяСтраница =  НомерСтраницыРазделаОтчета = 1;
			КоличествоПодобныхСтраниц = ЭтаФорма["ТаблицаСтраницы" + ИмяТекРаздела].Количество() - ?(УдалениеСтраницы ,1,0);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПерваяСтраница И УдалениеСтраницы И КоличествоПодобныхСтраниц = 0 Тогда
		
		ЭтоПоследняяСтраница = Истина;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела + ?(ЭтоПоследняяСтраница,"","_Без_Итога")));
			
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "ЛистД"
		ИЛИ ИмяТекРаздела = "ЛистВ" 
		ИЛИ ИмяТекРаздела = "ЛистЖ3"
		ИЛИ ИмяТекРаздела = "Раздел6"
		Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		// Управление видимостью гиперссылки "Удалить страницу"
		КоличествоСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы].Количество() - ?(УдалениеСтраницы,1,0);
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			Если КоличествоСтраницРаздела = 1 ИЛИ ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		// Сбрасываем активность всех страниц, активность новой выведенной страницы будет установлена ниже
		// Если выводится предыдущая страница перед удалением, то сбрасывать активность не нужно
		// Активная страница будет удалена, а активность перемещена на предыдущую страницу, которая уже выведена
		Если НЕ УдалениеСтраницы Тогда
			Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
				ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			КонецЦикла;
		КонецЕсли;
		// Устанавливаем признак активной страницы только если это не удаление страницы
		// При удалении страницы все происходит по другому, сначала мы показываем предыдущую
		// не активную страницу, и только затем удаляем активную, поэтому в режиме удаления страницы
		// не устанавливаем активность на выведенной странице, активность будет перемещена 
		// на выведенную сейчас страницу после удаления активной страницы (которую удаляем)
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = ?(ИндексУдаляемойСтраницы = 0 ,Истина ,НЕ УдалениеСтраницы);
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		// Многостраничные и многострочные разделы.
		//
	ИначеЕсли ИмяТекРаздела = "ЛистА" 
		или ИмяТекРаздела = "ЛистБ" 
		или ИмяТекРаздела = "ЛистГ2" 
		или ИмяТекРаздела = "ЛистГ3" 
		или ИмяТекРаздела = "ЛистГ1Продолжение" Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		// Управление видимостью гиперссылки "Удалить страницу"
		КоличествоСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы].Количество() - ?(УдалениеСтраницы,1,0);
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			Если КоличествоСтраницРаздела = 1 ИЛИ ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		
		НомерСтраницыРазделаОтчета = Мин(ЭтаФорма[НаимТаблицыСтраницы].Количество(), НомерСтраницыРазделаОтчета);
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		// Сбрасываем активность всех страниц, активность новой выведенной страницы будет установлена ниже
		// Если выводится предыдущая страница перед удалением, то сбрасывать активность не нужно
		// Активная страница будет удалена, а активность перемещена на предыдущую стрнаицу, которая уже выведена
		Если НЕ УдалениеСтраницы Тогда
			Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
				ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			КонецЦикла;
		КонецЕсли;
	
		// Устанавливаем признак активной страницы только если это не удаление страницы
		// При удалении страницы все происходит по другому, сначала мы показываем предыдущую
		// не активную страницу, и только затем удаляем активную, поэтому в режиме удаления страницы
		// не устанавливаем активность на выведенной странице, активность будет перемещена 
		// на выведенную сейчас страницу после удаления активной страницы (которую удаляем)
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = ?(ИндексУдаляемойСтраницы = 0 ,Истина ,НЕ УдалениеСтраницы);
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		// Устанавливаем признак активной страницы только если это не удаление страницы
		СтрСледующаяСтраница.АктивнаяСтраница = ?(ИндексУдаляемойСтраницы = 0 ,Истина ,НЕ УдалениеСтраницы);
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьМаскиВПоляхВвода(ИмяТекРаздела);
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	Если ЭтоПоследняяСтраница Тогда
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "Титульный" Тогда
		
		ЭтаФорма.СтруктураДанныхТитульный.Период = "34";
		ЭтаФорма.СтруктураДанныхТитульный.ПоМесту = "720";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
				
				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;
				
			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;
				
				Если Форма.ТабличныйДокумент.Области.Найти(ИмяПоказателя) <> Неопределено Тогда
					
					ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
					
					Ключ = "_" + ВариантЗаполнения;
					Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
					
					ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
					
					Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
						
						Если ЗначениеВКвадратах Тогда
							// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
							РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
						Иначе
							Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
						КонецЕсли;
						
					Иначе
						
						Если ЗначениеВКвадратах Тогда
							// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
							РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
						Иначе
							Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриСменеСтраницы(Форма, ИмяТекущейСтраницы) Экспорт
	
	Если Значениезаполнено(ИмяТекущейСтраницы) Тогда
		Расчет(Форма,ИмяТекущейСтраницы);
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательная функция
// Проверяет выполняются ли все условия
// Если в переданной структуре Условия отсутствуют конкретные требуемые значения просходит проверка на заполненность 
//(значение="" - незаполнено). Если заполнено - условие считается выполненным		
// Параметры
//  <СтруктураДанных>  - <Структура> - данные экземпляра раздела
//                 
//  <Условия>  - <Структура> Структура условий (ключ - имя параметра, значение (необязательный параметр) - требуемое значение)
//
// Возвращаемое значение:
//    Истина, Ложь
//
&НаКлиентеНаСервереБезКонтекста
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		//проверка условия
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		//если хоть одно условие не выполнилось - заканчиваем проверку листа провалом
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
//Функция раскладывает строку с данными о месте рождения на элементы структуры
//
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт

	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";
	
	МассивМестоРождения	= РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве	>	0	тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" тогда
			Особое	=	1;
		КонецЕсли;	 
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		НаселенныйПункт	=	СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Район	=	СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Область	=	СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Страна	=	СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции	 

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Форма = ЭтаФорма;
	
	мТитульный = Форма.СтруктураДанныхТитульный;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ДатаСведений = ?(ЗначениеЗаполнено(Форма.ДатаПодписи), Форма.ДатаПодписи, ТекущаяДатаСеанса());
		
		СтрокаСведений = "ИННФЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелДом, ФИО, 
						|ДатаРожд, МестоРожд, КодУдЛичн, ОрганВыданУдЛичн, СерияУдЛичн,
						|НомерУдЛичн, ДатаУдЛичн, ИндексМЖ, КодСубъектМЖ, РайонМЖ,
						|ГородМЖ, НПунктМЖ, УлицаМЖ, ДомМЖ, КорпусМЖ, КвартираМЖ,ИндивидуальныйПредпринимательИНН,ФИОРук,ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, ДатаСведений, СтрокаСведений);
		
		// заполняем ИНН
		мИННФЛ = СокрЛП(СведенияОбОрганизации.ИННФЛ);
		Для Инд = СтрДлина(мИННФЛ) + 1 По 12 Цикл
			мИННФЛ = мИННФЛ + "-";
		КонецЦикла;
		
		ПроставитьНаВсехЛистах(Форма, "ИНН1", мИННФЛ, Ложь);
		
		// заполняем код ИФНС
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		мТитульный["КодИМНС"] = КодНО;
		
		// заполняем ФИО
		ДанныеФЛ = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИО);
		Если ДанныеФЛ.Количество() > 0 Тогда
			мТитульный.Фамилия = СокрЛП(ДанныеФЛ.Фамилия);
			мТитульный.Имя = СокрЛП(ДанныеФЛ.Имя);
			мТитульный.Отчество = СокрЛП(ДанныеФЛ.Отчество);
			
			ПроставитьНаВсехЛистах(Форма, "Фамилия", СокрЛП(ДанныеФЛ.Фамилия), Ложь);
			ПроставитьНаВсехЛистах(Форма, "Имя1", Лев(СокрЛП(ДанныеФЛ.Имя),1), Ложь);
			ПроставитьНаВсехЛистах(Форма, "Отчество1", Лев(СокрЛП(ДанныеФЛ.Отчество),1), Ложь);
		КонецЕсли;
		
		ОКТМО = СведенияОбОрганизации.ОКТМО;
		
		ЗнОКТМО = СокрЛП(ОКТМО);
		
		мТитульный.ОКАТО = ЗнОКТМО;
		
		// заполняем телефон организации
		мТитульный.ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелДом);
		
		//Код категории
		мТитульный.ПоМесту 				= "720";
		
		мТитульный.Период 				= "34";
		мТитульный.ОтчетГод 			= Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		мТитульный.ПрПодп               = "1";
		
		//Титульный лист раздел 002
		мТитульный002 = Форма.СтруктураДанныхТитульный002;
		
		мТитульный002["ДатаРождения"] = СведенияОбОрганизации.ДатаРожд;

		СтруктураМестоРождения = РазложитьМестоРождения(СведенияОбОрганизации.МестоРожд);
		мТитульный002.МестоРождения = 
			?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
		
		
		мТитульный002.Гражданство = "1";
		мТитульный002.КодСтраны = "643";
		
		//Удостоверение личности
		мТитульный002.КодВидаДокумента = СокрЛП(СведенияОбОрганизации.КодУдЛичн);
		мТитульный002.СерияИНомерДокумента = СокрЛП(СведенияОбОрганизации.СерияУдЛичн) + " " + СокрЛП(СведенияОбОрганизации.НомерУдЛичн);
		мТитульный002.КемВыданДокумент = СокрЛП(СведенияОбОрганизации.ОрганВыданУдЛичн);
		
		мРезидент = Истина;
		
		Если мРезидент Тогда
			мТитульный002.СтатусНалогоплательщика = "1";
			Форма.СтруктураРеквизитовФормы.мСтатусНалогоплательщика = 1;
		Иначе
			мТитульный002.СтатусНалогоплательщика = "2";
			Форма.СтруктураРеквизитовФормы.мСтатусНалогоплательщика = 2;
		КонецЕсли;
		
		мТитульный002["ДатаВыдачиДокумента"] = СведенияОбОрганизации.ДатаУдЛичн;
		
		//Адрес
		мТитульный002.МестоЖительства 	= 1;
		мТитульный002.Индекс 			= СокрЛП(СведенияОбОрганизации.ИндексМЖ);
		мТитульный002.Регион 			= СокрЛП(СведенияОбОрганизации.КодСубъектМЖ);
		мТитульный002.Район 			= СокрЛП(СведенияОбОрганизации.РайонМЖ);
		мТитульный002.Город 			= СокрЛП(СведенияОбОрганизации.ГородМЖ);
		мТитульный002.НаселенныйПункт 	= СокрЛП(СведенияОбОрганизации.НПунктМЖ);
		мТитульный002.Улица 			= СокрЛП(СведенияОбОрганизации.УлицаМЖ);
		мТитульный002.Дом 				= СокрЛП(СведенияОбОрганизации.ДомМЖ);
		мТитульный002.Корпус 			= СокрЛП(СведенияОбОрганизации.КорпусМЖ);
		мТитульный002.Квартира 			= СокрЛП(СведенияОбОрганизации.КвартираМЖ);
		
	Если Этотобъект.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		ТабличныйДокумент.Области.ИНН1.Значение = мИННФЛ;
		ТабличныйДокумент.Области.КодИМНС.Значение = КодНО;
		
		ДанныеФЛ.Свойство("Фамилия", ТабличныйДокумент.Области.Фамилия.Значение);
		ДанныеФЛ.Свойство("Имя", ТабличныйДокумент.Области.Имя.Значение);
		ДанныеФЛ.Свойство("Отчество", ТабличныйДокумент.Области.Отчество.Значение);
		
		ТабличныйДокумент.Области.ОКАТО.Значение = ЗнОКТМО;
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СведенияОбОрганизации.ТелДом;
		
		ТабличныйДокумент.Области.Период.Значение = мТитульный.Период;
		ТабличныйДокумент.Области.ОтчетГод.Значение = мТитульный.ОтчетГод;
		ТабличныйДокумент.Области.ПоМесту.Значение = мТитульный.ПоМесту;
		ТабличныйДокумент.Области.ПрПодп.Значение = мТитульный.ПрПодп;
		
	КонецЕсли;
		
	Иначе
		Если СокрЛП(мТитульный.ПрПодп) = "1" тогда			
			мТитульный.ОргПодписантФамилия = "";
			мТитульный.ОргПодписантИмя = "";
			мТитульный.ОргПодписантОтчество = "";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьНаВсехЛистах(Форма, Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	РазделыОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();

	//// проставляем значение в табличные документы
	Для Каждого Раздел Из РазделыОтчета Цикл 
		
		Если Раздел.ИмяСтраницы = "ЛистА"
		Или Раздел.ИмяСтраницы = "ЛистБ"
		Или Раздел.ИмяСтраницы = "ЛистВ"
		Или Раздел.ИмяСтраницы = "ЛистГ2"
		Или Раздел.ИмяСтраницы = "ЛистГ3"
		Или Раздел.ИмяСтраницы = "ЛистД"
		Или Раздел.ИмяСтраницы = "ЛистЖ3"
		Или Раздел.ИмяСтраницы = "ЛистГ1Продолжение"
		Или Раздел.ИмяСтраницы = "Раздел6"
		Тогда
			Продолжить;
		КонецЕсли;
		ТаблДок = Форма["СтруктураДанных" + Раздел.ИмяСтраницы];
		
		Если ТаблДок.Количество() > 0 Тогда
			Если НЕ Посимвольно Тогда
				Если ТаблДок.Свойство(Показатель) Тогда
					ТаблДок[Показатель] = ЗначениеПоказателя;
				КонецЕсли;
			Иначе
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					ИмяПоказателя = Показатель + Формат(Инд, "ЧГ=");
					Если ТаблДок.Свойство(ИмяПоказателя) Тогда
						ТаблДок.Вставить(ИмяПоказателя, Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// проставляем значение в многостраничные разделы
	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл
		ТаблДокРаздела = Форма[Раздел.Значение];
		Для Каждого Страница Из ТаблДокРаздела Цикл 
			СтраницыРаздела = Страница.Данные;
			Если НЕ Посимвольно Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Значение;
					Если ДанныеСтраницы.Свойство(Показатель) Тогда
						ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Значение;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
						 ИмяПоказателя = Показатель + Формат(Инд, "ЧГ=");
						Если ДанныеСтраницы.Свойство(ИмяПоказателя) Тогда
							ДанныеСтраницы.Вставить(ИмяПоказателя, Сред(ЗначениеПоказателя, Инд, 1));
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
		Подписант 								= СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП = Неопределено) Экспорт
		
	Возврат Новый Структура("ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя");
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	ПеременныеМодуля.Вставить("мСтатусНалогоплательщика", СтруктураРеквизитовФормы.мСтатусНалогоплательщика);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	СтруктураРеквизитовФормы.мСтатусНалогоплательщика = ПеременныеМодуля.мСтатусНалогоплательщика;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	ПеременныеМодуля.Вставить("мСтатусНалогоплательщика", СтруктураРеквизитовФормы.мСтатусНалогоплательщика);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	СтруктураРеквизитовФормы.мСтатусНалогоплательщика = ПеременныеМодуля.мСтатусНалогоплательщика;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СтатусНалогоплательщика" Тогда
		Если ЗначениеПоказателя = "1" Тогда
			ПеременныеМодуля.мСтатусНалогоплательщика = 1;
		ИначеЕсли ЗначениеПоказателя = "2" Тогда
			ПеременныеМодуля.мСтатусНалогоплательщика = 2;
		Иначе
			ПеременныеМодуля.мСтатусНалогоплательщика = 0;
		КонецЕсли;
	КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
//Преобразовывает некоторые значения структуры из посимвольного представления в одно поле
//предназначена для совместимости с формами сохраненными в версии 2.0
Процедура ПреобразоватьПосимвольныеДанныеВЗначения(Данные)
	
	Если Данные.Свойство("ИНН1_1") Тогда
		
		ИНН = "";
		Для Поз = 1 По 12 Цикл
			ИНН = ИНН + Данные["ИНН1_" + Поз];
			Данные.Удалить("ИНН1_" + Поз);
		КонецЦикла;	
		Данные.Вставить("ИНН1",ИНН);
	КонецЕсли;
	
	Если Данные.Свойство("ДатаПодписи1") Тогда
		
		мДатаПодписи = "" + Данные["ДатаПодписи5"]
		+ Данные["ДатаПодписи6"]
		+ Данные["ДатаПодписи7"]
		+ Данные["ДатаПодписи8"]
		+ Данные["ДатаПодписи3"]
		+ Данные["ДатаПодписи4"]
		+ Данные["ДатаПодписи1"]
		+ Данные["ДатаПодписи2"];
		
		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаПодписи" + Поз);
		КонецЦикла;
		
		Данные.Вставить("ДатаПодписи", ?(ЗначениеЗаполнено(мДатаПодписи), Дата(мДатаПодписи), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;
	Если Данные.Свойство("НомСтр1_1") Тогда	             
			
		Для Поз = 1 По 3 Цикл
			Данные.Удалить("НомСтр1_" + Поз);
		КонецЦикла;	
		
	КонецЕсли;
	Если Данные.Свойство("НомерКорректировки1") Тогда	
		
		НомКорр = "";
		Для Поз = 1 По 3 Цикл
			НомКорр = НомКорр + Данные["НомерКорректировки" + Поз];
			Данные.Удалить("НомерКорректировки" + Поз);
		КонецЦикла;
		НомКорр = СтрЗаменить(НомКорр, "-", "");
		Данные.Вставить("НомерКорректировки", НомКорр);
		НомерКорректировки = ?(ЗначениеЗаполнено(НомКорр), Число(НомКорр), 0);
	
	КонецЕсли;
	Если Данные.Свойство("ОтчетГод1") Тогда
		
		ОтчетГод = "";
		Для Поз = 1 По 4 Цикл
			ОтчетГод = ОтчетГод + Данные["ОтчетГод" + Поз];
			Данные.Удалить("ОтчетГод" + Поз);
		КонецЦикла;	
		Данные.Вставить("ОтчетГод", ОтчетГод);
		
	КонецЕсли;
	Если Данные.Свойство("КодИМНС1") Тогда	             
		
		КодИМНС = "";
		Для Поз = 1 По 4 Цикл
			КодИМНС = КодИМНС + Данные["КодИМНС" + Поз];
			Данные.Удалить("КодИМНС" + Поз);
		КонецЦикла;	
		Данные.Вставить("КодИМНС", КодИМНС);
		
	КонецЕсли;
	Если Данные.Свойство("ПоМесту1") Тогда	             
		
		ПоМесту = "";
		Для Поз = 1 По 3 Цикл
			ПоМесту = ПоМесту + Данные["ПоМесту" + Поз];
			Данные.Удалить("ПоМесту" + Поз);
		КонецЦикла;	
		Данные.Вставить("ПоМесту", ПоМесту);
		
	КонецЕсли;
	Если Данные.Свойство("Период1") Тогда	             
		
		Период = "";
		Для Поз = 1 По 2 Цикл
			Период = Период + Данные["Период" + Поз];
			Данные.Удалить("Период" + Поз);
		КонецЦикла;	
		Данные.Вставить("Период", Период);
		
	КонецЕсли;
	Если Данные.Свойство("СоставленаНа1") Тогда
		
		СоставленаНа = "";
		Для Поз = 1 По 3 Цикл
			СоставленаНа = СоставленаНа + Данные["СоставленаНа" + Поз];
			Данные.Удалить("СоставленаНа" + Поз);
		КонецЦикла;	
		Данные.Вставить("СоставленаНа", СоставленаНа);
		
	КонецЕсли;
	Если Данные.Свойство("ДатаВыдачиДокумента1") Тогда	
		
		ДатаВыдачиДокумента = "" + Данные["ДатаВыдачиДокумента5"]
		+ Данные["ДатаВыдачиДокумента6"]
		+ Данные["ДатаВыдачиДокумента7"]
		+ Данные["ДатаВыдачиДокумента8"]
		+ Данные["ДатаВыдачиДокумента3"]
		+ Данные["ДатаВыдачиДокумента4"]
		+ Данные["ДатаВыдачиДокумента1"]
		+ Данные["ДатаВыдачиДокумента2"];

		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаВыдачиДокумента" + Поз);
		КонецЦикла;	
		
		Данные.Вставить("ДатаВыдачиДокумента", ?(ЗначениеЗаполнено(ДатаВыдачиДокумента), Дата(ДатаВыдачиДокумента), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;
	Если Данные.Свойство("ДатаРождения1") Тогда
		
		ДатаРождения = "" + Данные["ДатаРождения5"]
		+ Данные["ДатаРождения6"]
		+ Данные["ДатаРождения7"]
		+ Данные["ДатаРождения8"]
		+ Данные["ДатаРождения3"]
		+ Данные["ДатаРождения4"]
		+ Данные["ДатаРождения1"]
		+ Данные["ДатаРождения2"];
		
		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаРождения" + Поз);
		КонецЦикла;	
		Данные.Вставить("ДатаРождения", ?(ЗначениеЗаполнено(ДатаРождения) , Дата(ДатаРождения), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;	

КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	Если СписокСохранения.ВерсияФормы = "01/01/2014" Тогда
		
		СписокПереименованныхРазделов = Новый СписокЗначений;
		СписокПереименованныхРазделов.Добавить("Титульный", 		"Титульный лист");
		СписокПереименованныхРазделов.Добавить("Титульный002", 		"Сведения" + Символы.ПС + "о физ. лице");
		СписокПереименованныхРазделов.Добавить("ЛистГ1Продолжение", "Лист Г1" + Символы.ПС + "продолжение");
		СписокПереименованныхРазделов.Добавить("ЛистЗПродолжение", 	"Лист З" + Символы.ПС + "продолжение");
		
		Для Каждого ПереименованныйРаздел Из СписокПереименованныхРазделов Цикл
			СтрокаРаздела = ДеревоНастройкиСтраниц.Строки.Найти(ПереименованныйРаздел.Значение);
			Если СтрокаРаздела <> Неопределено Тогда
				
				СтрокаРаздела.Представление = ПереименованныйРаздел.Представление;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	П0000900010 = Неопределено;
	П0000220010 = Неопределено;
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			ИначеЕсли ЭлементСтруктуры.Ключ = "П0000900010" Тогда
			//ЛистВ сохраненный в прошлой версии
			
				П0000900010 = ЭлементСтруктуры.Значение;
				ТаблицаСтраниц = ЭтаФорма.ТаблицаСтраницыЛистВ;
				
				СтруктураДанных = СкопироватьСтруктуру(ТаблицаСтраниц[0].Данные[0].Значение);				
				
				Для каждого Строка Из П0000900010 Цикл
					Если П0000900010.Индекс(Строка) + 1 > ТаблицаСтраниц.Количество() Тогда
						Страница = ТаблицаСтраниц.Добавить();
						Страница.Представление = "Новая страница";
						Страница.АвтоматическоеПредставление = Истина;
						Страница.Данные.Добавить(СтруктураДанных);
					Иначе
						Страница = ТаблицаСтраниц[П0000900010.Индекс(Строка)];
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(Страница.Данные[0].Значение, Строка);
				КонецЦикла;	
				
				ПреобразоватьПосимвольныеДанныеВЗначения(ПоказателиОтчета.ПолеТабличногоДокументаЛистВ);
				ЗаполнитьЗначенияСвойств(Страница.Данные[0].Значение, СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистВ);
				
			ИначеЕсли ЭлементСтруктуры.Ключ = "П0000220010" Тогда
				
				//ЛистЖ3 сохраненный в прошлой версии
				ТаблицаСтраниц = ЭтаФорма.ТаблицаСтраницыЛистЖ3;
				СтруктураДанных = СкопироватьСтруктуру(ТаблицаСтраниц[0].Данные[0].Значение);				
				
				П0000220010 = ЭлементСтруктуры.Значение;
				Для каждого Строка Из П0000220010 Цикл
					Если П0000220010.Индекс(Строка) + 1 > ТаблицаСтраниц.Количество() Тогда
						Страница = ТаблицаСтраниц.Добавить();
						Страница.Данные.Добавить(СтруктураДанных);
					Иначе
						Страница = ТаблицаСтраниц[П0000220010.Индекс(Строка)];
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(Страница.Данные[0].Значение, Строка);
				КонецЦикла;	
				
				ПреобразоватьПосимвольныеДанныеВЗначения(ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ3);
				ЗаполнитьЗначенияСвойств(Страница.Данные[0].Значение, СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ3);
				
			КонецЕсли;
			
			// ЛистГ2 
			НайденноеЗначение = Неопределено;
			ПоказателиОтчета.Свойство("ПолеТабличногоДокументаЛистГ2", НайденноеЗначение);
			
			Если НайденноеЗначение <> Неопределено Тогда
				ПреобразоватьПосимвольныеДанныеВЗначения(НайденноеЗначение);	
				ТаблицаСтраниц = ЭтаФорма.ТаблицаСтраницыЛистГ2;
				
				Для Каждого Страница из ТаблицаСтраниц Цикл
					ЗаполнитьЗначенияСвойств(Страница.Данные[0].Значение, НайденноеЗначение);	
				КонецЦикла;
				
			КонецЕсли;
			// ЛистГ3
			
			НайденноеЗначение = Неопределено;
			ПоказателиОтчета.Свойство("ПолеТабличногоДокументаЛистГ3", НайденноеЗначение);
			
			Если НайденноеЗначение <> Неопределено Тогда
				ПреобразоватьПосимвольныеДанныеВЗначения(НайденноеЗначение);	
				ТаблицаСтраниц = ЭтаФорма.ТаблицаСтраницыЛистГ3;
				
				Для Каждого Страница из ТаблицаСтраниц Цикл
					ЗаполнитьЗначенияСвойств(Страница.Данные[0].Значение, НайденноеЗначение);	
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				Если ЭлементСтруктуры.Значение.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
					ЭлементСтруктуры.Значение.Колонки.Добавить("ДанныеДопСтрок");
				КонецЕсли;
				
				
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);          
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							ПреобразоватьПосимвольныеДанныеВЗначения(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	Если НЕ СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
		
	Если НЕ СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки) Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	ОбновитьПеременныеМодуляНаСервере("СтатусНалогоплательщика", СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.СтатусНалогоплательщика);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПреобразоватьПосимвольныеДанныеВЗначения(ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы]);
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПоМесту = ТабличныйДокумент.Области.ПоМесту.Значение;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность   = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт	
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	//Если перед сохранением изменяли значение показателя - нужен полный расчет
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли; 
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
						И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
						
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
						
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
						
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
						
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
		
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппыА", СтруктураРеквизитовФормы.мИдГруппыА);
	ИдГрупп.Вставить("мИдГруппыБ", СтруктураРеквизитовФормы.мИдГруппыБ);
	ИдГрупп.Вставить("мИдГруппыГ2", СтруктураРеквизитовФормы.мИдГруппыГ2);
	ИдГрупп.Вставить("мИдГруппыГ3", СтруктураРеквизитовФормы.мИдГруппыГ3);
	ИдГрупп.Вставить("мИдГруппыГ1Продолжение", СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппыА", СтруктураРеквизитовФормы.мИдГруппыА);
	ИдГрупп.Вставить("мИдГруппыБ", СтруктураРеквизитовФормы.мИдГруппыБ);
	ИдГрупп.Вставить("мИдГруппыГ2", СтруктураРеквизитовФормы.мИдГруппыГ2);
	ИдГрупп.Вставить("мИдГруппыГ3", СтруктураРеквизитовФормы.мИдГруппыГ3);
	ИдГрупп.Вставить("мИдГруппыГ1Продолжение", СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппыА Тогда
		ТекТабличноеПоле = "ЛистА";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппыБ Тогда
		ТекТабличноеПоле = "ЛистБ";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппыГ2 Тогда
		ТекТабличноеПоле = "ЛистГ2";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппыГ3 Тогда
		ТекТабличноеПоле = "ЛистГ3";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппыГ1Продолжение Тогда
		ТекТабличноеПоле = "ЛистГ1Продолжение";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппыА", СтруктураРеквизитовФормы.мИдГруппыА);
	ИдГрупп.Вставить("мИдГруппыБ", СтруктураРеквизитовФормы.мИдГруппыБ);
	ИдГрупп.Вставить("мИдГруппыГ2", СтруктураРеквизитовФормы.мИдГруппыГ2);
	ИдГрупп.Вставить("мИдГруппыГ3", СтруктураРеквизитовФормы.мИдГруппыГ3);
	ИдГрупп.Вставить("мИдГруппыГ1Продолжение", СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппыА", СтруктураРеквизитовФормы.мИдГруппыА);
	ИдГрупп.Вставить("мИдГруппыБ", СтруктураРеквизитовФормы.мИдГруппыБ);
	ИдГрупп.Вставить("мИдГруппыГ2", СтруктураРеквизитовФормы.мИдГруппыГ2);
	ИдГрупп.Вставить("мИдГруппыГ3", СтруктураРеквизитовФормы.мИдГруппыГ3);
	ИдГрупп.Вставить("мИдГруппыГ1Продолжение", СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ЛистА" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппыА;
	ИначеЕсли ИмяТекущейСтраницыПанели = "ЛистБ" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппыБ;
	ИначеЕсли ИмяТекущейСтраницыПанели = "ЛистГ2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппыГ2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "ЛистГ3" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппыГ3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "ЛистГ1Продолжение" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппыГ1Продолжение;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	Если СокрЛП(ПолеТабличногоДокументаТитульный.Области.Период.Значение) = "" ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
				
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = "34";
		ПолеТабличногоДокументаТитульный.Области.Период.Значение = КодОтчетногоПериода;
	КонецЕсли; 
	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
	Если ВыбТабличноеПолеИмя = "ЛистА" 
		ИЛИ ВыбТабличноеПолеИмя = "ЛистБ" 
			ИЛИ ВыбТабличноеПолеИмя = "ЛистГ2" 
			ИЛИ ВыбТабличноеПолеИмя = "ЛистГ3" 
 	Тогда
		ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма.ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
	Если (ВыбТабличноеПолеИмя = "ЛистА" 
		ИЛИ ВыбТабличноеПолеИмя = "ЛистБ" 
			ИЛИ ВыбТабличноеПолеИмя = "ЛистГ2" 
			ИЛИ ВыбТабличноеПолеИмя = "ЛистГ3")
 	Тогда
		ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма.ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу()
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел6" Тогда
		
		СобратьДанныеВРаздел6();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеВРаздел6()
	
	П000060004003 = ЭтаФорма.ТабличныйДокумент.Области.Найти("П000060004003"); 
	П000060005003 = ЭтаФорма.ТабличныйДокумент.Области.Найти("П000060005003"); 
	П000060001001 = ЭтаФорма.ТабличныйДокумент.Области.Найти("П000060001001");
	
	СумманалогаПодлежащаяУплате = ЭтаФорма.СтруктураДанныхРаздел1.П000010011003
	+ ЭтаФорма.СтруктураДанныхРаздел2.П000020009003
	+ ЭтаФорма.СтруктураДанныхРаздел3.П000030008003
	+ ЭтаФорма.СтруктураДанныхРаздел4.П000040007003
	+ ЭтаФорма.СтруктураДанныхРаздел5.П000050006003;
	
	СумманалогаПодлежащаяВозврату = ЭтаФорма.СтруктураДанныхРаздел1.П000010010003
	+ ЭтаФорма.СтруктураДанныхРаздел2.П000020008003
	+ ЭтаФорма.СтруктураДанныхРаздел3.П000030007003
	+ ЭтаФорма.СтруктураДанныхРаздел4.П000040006003
	+ ЭтаФорма.СтруктураДанныхРаздел5.П000050005003;
	
	Если П000060004003 <> Неопределено Тогда
		
		П000060004003.Значение = СумманалогаПодлежащаяУплате;
		
	КонецЕсли;
	
	Если П000060005003 <> Неопределено Тогда
		
		П000060005003.Значение = СумманалогаПодлежащаяВозврату;
		
	КонецЕсли;
	
	Если П000060001001 <> Неопределено Тогда 
		
		Если СумманалогаПодлежащаяУплате > 0 Тогда 
			П000060001001.Значение = 1;	 
		ИначеЕсли СумманалогаПодлежащаяВозврату > 0 Тогда	 
			П000060001001.Значение = 2;	 
		Иначе
			П000060001001.Значение = 3;	 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры	

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаСервере
Процедура ОчиститьТабличноеПолеСпец(ИмяТекущегоРаздела, ОбновитьСтавки = Истина) Экспорт
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ЦветФона = СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(ЭтаФорма, ИмяТекущегоРаздела);
	
	НомерКорректировки = 0;
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СохранитьДанныеРаздела(ИмяТекущегоРаздела, Истина, Ложь);
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ТабличныйДокумент.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь) Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя, АвторасчетПослеАвтозаполнения);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь) Экспорт 
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя, АвторасчетПослеАвтозаполнения);
	
КонецПроцедуры

// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь)
	
	Перем ТаблицаБлока, ТаблицаРаздела;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	//
	
	ОбновитьТабличныйДокумент = Ложь;
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		ОбновитьТабличныйДокумент = Истина;
	КонецЕсли;
		
	// Многостраничные структуры расчитываем отдельно:
	Если НЕ ПустаяСтрока(ИмяРаздела) 
		И СтрНайти("ЛистА,ЛистБ,ЛистД,ЛистЖ3,", ИмяРаздела + ",") > 0 Тогда
		
		РасчетВСтруктуре(Форма, ИмяРаздела);
		
	КонецЕсли;
	
	ЦветЗаполняетсяАвтоАрифметика = "";
	Форма.мСтруктураЦветовРаскраски.Свойство("_4", ЦветЗаполняетсяАвтоАрифметика);
	
	Если ИмяРаздела = "ЛистА" Тогда
		
		Если ОбновитьТабличныйДокумент Тогда
			
		НомерТекущейСтраницы = 	Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы;
		
			Колонка08 = 0;
			Колонка09 = 0;
			Колонка10 = 0;
			Колонка11 = 0;
			ТаблицаСтраницы = Форма["ТаблицаСтраницы" + ИмяРаздела];
			
			СтавкаНалога = ?(ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.СтавкаНалога.Значение), Число(Форма.ТабличныйДокумент.Области.СтавкаНалога.Значение), 0);
			
			//Итоги по всем страницам листа кроме текущего
			Для каждого Лист Из ТаблицаСтраницы Цикл		
				
				Если ТаблицаСтраницы.Индекс(Лист) + 1 <> НомерТекущейСтраницы 
					И Лист.Данные.Количество() <> 0 Тогда //Не текущий и не пустой
					
					Если Лист.Данные[0].Значение.СтавкаНалога <> СтавкаНалога Тогда
						Продолжить;
					КонецЕсли;	
					
					Для Каждого ДанныеДопСтрок Из Лист.ДанныеДопСтрок Цикл
						
						ТаблицаБлока = ДанныеДопСтрок.Значение;
						
						Для каждого Зап Из ТаблицаБлока Цикл
							
							СуффиксСтроки = Формат(ТаблицаБлока.Индекс(Зап)+1, "ЧДЦ=0; ЧРГ=");
							// при необходимости выполняем автоматические расчеты:
							Если ЗначениеЗаполнено(Зап.П000070001006) И СтавкаНалога > 0 Тогда
								СуммаНалогаПоСтроке = Окр(Зап.П000070001005 * СтавкаНалога / 100, 0 ,1);
								Если Зап.П000070001007 <> СуммаНалогаПоСтроке Тогда
									Зап.П000070001007 = СуммаНалогаПоСтроке;
								КонецЕсли; 
							КонецЕсли; 
							
							//аккумулирование общих итогов
							Колонка08 = Колонка08 + Зап.П000070001005;
							Колонка09 = Колонка09 + Зап.П000070001006;
							Колонка10 = Колонка10 + Зап.П000070001007;
							Колонка11 = Колонка11 + Зап.П000070001008;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			//Итоги по текущему листу
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыА, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			Для каждого Зап Из ТаблицаБлока Цикл
				//аккумулирование общих итогов
				Колонка08 = Колонка08 + Зап.П000070001005;
				Колонка09 = Колонка09 + Зап.П000070001006;
				Колонка10 = Колонка10 + Зап.П000070001007;
				Колонка11 = Колонка11 + Зап.П000070001008;
			КонецЦикла;
			
			//заполнение общих итогов в табличном документе
			Если ОбновитьТабличныйДокумент
				И Форма.ТабличныйДокумент.Области.Найти("ИтоговыеПоказатели") <> Неопределено Тогда
				
				Форма.ТабличныйДокумент.Области.П000070008001.Значение = Колонка08;
				Форма.ТабличныйДокумент.Области.П000070009001.Значение = Колонка09;
				Форма.ТабличныйДокумент.Области.П000070010001.Значение = Колонка10;
				Форма.ТабличныйДокумент.Области.П000070011001.Значение = Колонка11;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ЛистБ" Тогда
		
		
		Если ОбновитьТабличныйДокумент Тогда
		НомерТекущейСтраницы = ?(ОбновитьТабличныйДокумент,
		Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы,
		-1);
		
			ТаблицаСтраницы = Форма["ТаблицаСтраницы" + ИмяРаздела];
			
			Колонка14 = 0;
			Колонка15 = 0;
			Колонка16 = 0;
			Колонка17 = 0;
			СтавкаНалога = ?(ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.СтавкаНалога.Значение), Число(Форма.ТабличныйДокумент.Области.СтавкаНалога.Значение), 0);
			
			//Итоги по всем страницам листа кроме текущего
			Для каждого Лист Из ТаблицаСтраницы Цикл		
				
				Если ТаблицаСтраницы.Индекс(Лист) + 1 <> НомерТекущейСтраницы 
					И Лист.Данные.Количество() <> 0 Тогда //Не текущий и не пустой
					
					Если Лист.Данные[0].Значение.СтавкаНалога <>  СтавкаНалога Тогда
						Продолжить;
					КонецЕсли;	
					
					Для Каждого ДанныеДопСтрок Из Лист.ДанныеДопСтрок Цикл
						
						ТаблицаБлока = ДанныеДопСтрок.Значение;
						
						Для каждого Зап Из ТаблицаБлока Цикл
							//аккумулирование общих итогов
							Колонка14 = Колонка14 + Окр(Зап.П000080001008, 2);
							Колонка15 = Колонка15 + Окр(Зап.П000080001012, 2);
							Колонка16 = Колонка16 + Окр(Зап.П000080001013, 2);
							Колонка17 = Колонка17 + Окр(Зап.П000080001014, 2);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			//Итоги по текущему листу
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыБ, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			Для каждого Зап Из ТаблицаБлока Цикл
			//вычисляем суммы по курсу:
			
			Если ЗначениеЗаполнено(Зап.П000080001006) Тогда
					Зап.П000080001008 = Окр(Зап.П000080001006 * Зап.П000080001007, 2);
				ИначеЕсли ЗначениеЗаполнено(Зап.П000080001008) И ЗначениеЗаполнено(Зап.П000080001007) Тогда
					Зап.П000080001006 = Окр(Зап.П000080001008 / Зап.П000080001007, 2);
				КонецЕсли; 
				Если ЗначениеЗаполнено(Зап.П000080001010) Тогда
					Зап.П000080001012 = Окр(Зап.П000080001010 * Зап.П000080001011, 2);
				ИначеЕсли ЗначениеЗаполнено(Зап.П000080001012) И ЗначениеЗаполнено(Зап.П000080001011) Тогда
					Зап.П000080001010 = Окр(Зап.П000080001012 / Зап.П000080001011, 2);
				КонецЕсли; 
				// пересчитываем налог в РФ:
				Если ЗначениеЗаполнено(СтавкаНалога) Тогда
					Зап.П000080001013 = Окр(Зап.П000080001008 * СтавкаНалога/100, 2);
				КонецЕсли; 
				// проверяем налог к зачету:
				Если ЗначениеЗаполнено(Зап.П000080001014) Тогда
					Зап.П000080001014 = Мин(Зап.П000080001014, Зап.П000080001013, Зап.П000080001012);
				КонецЕсли; 
				
				//аккумулирование общих итогов
				Колонка14 = Колонка14 + Окр(Зап.П000080001008, 2);
				Колонка15 = Колонка15 + Окр(Зап.П000080001012, 2);
				Колонка16 = Колонка16 + Окр(Зап.П000080001013, 2);
				Колонка17 = Колонка17 + Окр(Зап.П000080001014, 2);
				
				Форма.ТабличныйДокумент.Области["П000080001008_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Зап.П000080001008;
				Форма.ТабличныйДокумент.Области["П000080001006_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Зап.П000080001006;
				Форма.ТабличныйДокумент.Области["П000080001012_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Зап.П000080001012;
				Форма.ТабличныйДокумент.Области["П000080001010_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Зап.П000080001010;
				Форма.ТабличныйДокумент.Области["П000080001013_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Зап.П000080001013;
				Форма.ТабличныйДокумент.Области["П000080001014_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Зап.П000080001014;
			КонецЦикла;
			
			//заполнение общих итогов в табличном документе
			Если Форма.ТабличныйДокумент.Области.Найти("ИтоговыеПоказатели") <> Неопределено Тогда
				
				Форма.ТабличныйДокумент.Области.П000080001501.Значение = Колонка14;
				Форма.ТабличныйДокумент.Области.П000080001601.Значение = Колонка15;
				Форма.ТабличныйДокумент.Области.П000080001701.Значение = Колонка16;
				Форма.ТабличныйДокумент.Области.П000080001801.Значение = Колонка17;
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли ИмяРаздела = "ЛистВ" Тогда
		
		мЛистВ = Форма.ТабличныйДокумент;
		
		Колонка110 = 0;
		Колонка120 = 0;

		НомерТекущейСтраницы = ?(ОбновитьТабличныйДокумент,
		Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы,
		-1);

		Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела,ТаблицаРаздела);
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		
		Для Каждого Страница Из ТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (ТипЗнч(Страница.Данные) <> Тип("Структура") И ТипЗнч(Страница.Данные) <> Тип("СписокЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			Если Страница.Данные.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Страница.Данные[0].Значение;
			
			Если ТаблицаРаздела.Индекс(Страница) + 1 = НомерТекущейСтраницы Тогда
				
				
				// Проверяем сумму по нормативам:
				
				Данные.П000090001010 = Окр(?(Данные.П000090001004 = 0, Данные.П000090001003, 0) * 0.2);
				
				Если ОбновитьТабличныйДокумент Тогда
					мЛистВ.Области["П000090001010"].Значение = Данные.П000090001010;
				КонецЕсли;
				
				// Проверяем итоговую сумму расходов:
				Если Данные.П000090001007 < Данные.П000090001008 Тогда
					Данные.П000090001007 = Данные.П000090001008;
					Если ОбновитьТабличныйДокумент Тогда
						мЛистВ.Области["П000090001007"].Значение = Данные.П000090001007;
					КонецЕсли;
				КонецЕсли; 
				
				Если Данные.П000090001004 < Данные.П000090001005 + Данные.П000090001006
					+ Данные.П000090001007 + Данные.П000090001009 Тогда
					Данные.П000090001004 = Данные.П000090001005 + Данные.П000090001006
					+ Данные.П000090001007 + Данные.П000090001009;
					Если ОбновитьТабличныйДокумент Тогда
						мЛистВ.Области["П000090001004"].Значение = Данные.П000090001004;
					КонецЕсли;
				КонецЕсли; 
				
				Колонка110 = Колонка110 + Окр(Данные.П000090001003, 2);
				Колонка120 = Колонка120 + Окр(?(Данные.П000090001004 > 0, Данные.П000090001004, Данные.П000090001010), 2);
				
			Иначе
				
				// Проверяем сумму по нормативам:
				Данные.П000090001010 = Окр(?(Данные.П000090001004 = 0, Данные.П000090001003, 0) * 0.2);
				
				// Проверяем итоговую сумму расходов:
				Если ЗначениеЗаполнено(Данные.П000090001007) Тогда
					Если Данные.П000090001007 < Данные.П000090001008 Тогда
						Данные.П000090001007 = Данные.П000090001008;
						Если ОбновитьТабличныйДокумент Тогда
							мЛистВ.Области["П000090001007"].Значение = Данные.П000090001007;
						КонецЕсли;
					КонецЕсли; 
				Иначе
					Данные.П000090001008 = 0;
				КонецЕсли; 
				Если Данные.П000090001004 < Данные.П000090001005 + Данные.П000090001006
					+ Данные.П000090001007 + Данные.П000090001009 Тогда
					Данные.П000090001004 = Данные.П000090001005 + Данные.П000090001006
					+ Данные.П000090001007 + Данные.П000090001009;
				КонецЕсли; 
				
				Колонка110 = Колонка110 + Окр(Данные.П000090001003, 2);
				Колонка120 = Колонка120 + Окр(?(Данные.П000090001004 > 0, Данные.П000090001004, Данные.П000090001010), 2);
				
			КонецЕсли;
		КонецЦикла;
		
		Данные.Вставить("П000090001101", Колонка110);
		Данные.Вставить("П000090001201", Колонка120);
		
		Если ОбновитьТабличныйДокумент 
			И мЛистВ.Области.Найти("ИтоговыеПоказатели") <> Неопределено Тогда
			мЛистВ.Области.П000090001101.Значение = Колонка110;
			мЛистВ.Области.П000090001201.Значение = Колонка120;
		КонецЕсли;	
		
	ИначеЕсли ИмяРаздела = "ЛистГ1Продолжение" Тогда
		
		мЛистГ1 = Форма.СтруктураДанныхЛистГ1;		
		мЛистГ1Продолжение = Форма.ТабличныйДокумент.Области;
		
		НомерТекущейСтраницы = ?(ОбновитьТабличныйДокумент,
		Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы,
		-1);

		Колонка150 = 0;
		Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела,ТаблицаРаздела);
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		
		Для Каждого Страница Из ТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (ТипЗнч(Страница.Данные) <> Тип("Структура") И ТипЗнч(Страница.Данные) <> Тип("СписокЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			Если Страница.Данные.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Страница.Данные[0].Значение;
			
			Если ТаблицаРаздела.Индекс(Страница) + 1 = НомерТекущейСтраницы Тогда
				
				Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение, ТаблицаБлока);
				Колонка240 = 0;
				ТаблицаБлока = Форма[ТаблицаБлока];
				Для каждого Зап Из ТаблицаБлока Цикл
					
					НомерСтроки = (ТаблицаБлока.Индекс(Зап)+1);
					
					Если НомерСтроки <> 1 Тогда
						Данные["П000025119004_" + НомерСтроки] = Данные["П000025119006_" + (НомерСтроки-1)];
						Зап.П000025119004 = Данные["П000025119006_" + (НомерСтроки-1)];
						
						мЛистГ1Продолжение["П000025119004_" + НомерСтроки].Значение = Зап.П000025119004;
						
					КонецЕсли;
					
					Колонка220 = Мин(Зап.П000025119004 + 4300, Зап.П000025119003);
					
					ДоляОплатыВНатруальнойФорме = ?(Зап.П000025119002 <> 0, Зап.П000025119003/Зап.П000025119002, 0)*100; 
					Колонка230ПредМесяца = ?(НомерСтроки = 1,0,Данные["П000025119006_" + (НомерСтроки-1)]) + 4300;
					
					Если ДоляОплатыВНатруальнойФорме > 20
						ИЛИ Колонка220 > Колонка230ПредМесяца Тогда
						Колонка220 = 0					
					КонецЕсли;
					
					Данные["П000025119005_" + НомерСтроки] = Колонка220;
					Зап.П000025119005 = Колонка220;
					
					мЛистГ1Продолжение["П000025119005_" + НомерСтроки].Значение = Зап.П000025119005;
					
					Колонка230 = Зап.П000025119004 + ?(Зап.П000025119005 = 0, 0, 4300) - Зап.П000025119005;
					Данные["П000025119006_" + НомерСтроки] = Колонка230;
					Зап.П000025119006 = Колонка230;
					
					Колонка240 = Колонка240 + Колонка220;
					Если НомерСтроки = 12 Тогда
						Данные["П000025119006_" + НомерСтроки] = 0;
						Зап.П000025119006 = 0;
					КонецЕсли;
					мЛистГ1Продолжение["П000025119006_" + НомерСтроки].Значение = Зап.П000025119006;
				КонецЦикла;
				
				Данные.П000025124002 = Колонка240;
				мЛистГ1Продолжение["П000025124002"].Значение = Колонка240;
				
				Колонка150 = Колонка150 + Данные.П000025124002;	
				
			Иначе
				
				Если Страница.ДанныеДопСтрок.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
				
				Колонка240 = 0;
				
				Если ТаблицаБлока <> Неопределено Тогда
					Для каждого Зап Из ТаблицаБлока Цикл
						НомерСтроки = (ТаблицаБлока.Индекс(Зап)+1);
						
						Если НомерСтроки <> 1 Тогда
							Данные["П000025119004_" + НомерСтроки] = Данные["П000025119006_" + (НомерСтроки-1)];
							Зап.П000025119004 = Данные["П000025119006_" + (НомерСтроки-1)];
						КонецЕсли;
						
						Колонка220 = Мин(Зап.П000025119004 + 4300, Зап.П000025119003);
						
						ДоляОплатыВНатруальнойФорме = ?(Зап.П000025119002 <> 0, Зап.П000025119003/Зап.П000025119002, 0)*100; 
						Колонка230ПредМесяца = ?(НомерСтроки = 1,0,Данные["П000025119006_" + (НомерСтроки-1)]) + 4300;
						
						Если ДоляОплатыВНатруальнойФорме > 20
							ИЛИ Колонка220 > Колонка230ПредМесяца Тогда
							Колонка220 = 0					
						КонецЕсли;
						
						Данные["П000025119005_" + НомерСтроки] = Колонка220;
						Зап.П000025119005 = Колонка220;
						
						Колонка230 = Зап.П000025119004 + ?(Зап.П000025119005 = 0, 0, 4300) - Зап.П000025119005;
						Данные["П000025119006_" + НомерСтроки] = Колонка230;
						Зап.П000025119006 = Колонка230;
						
						Колонка240 = Колонка240 + Колонка220;
						Если НомерСтроки = 12 Тогда
							Данные["П000025119006_" + НомерСтроки] = 0;
							Зап.П000025119006 = 0;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Данные.П000025124002 = Колонка240;
				
			КонецЕсли;
			
			Колонка150 = Колонка150 + Данные.П000025124002;				
		КонецЦикла;
		
		мЛистГ1.П000010115004 = Колонка150;
		
	ИначеЕсли ИмяРаздела = "ЛистГ1" Тогда
		
		мЛистГ1 = Форма.СтруктураДанныхЛистГ1;
		
		//Итоги листа ЛистГ1Продолжение
		Колонка150 = 0;
		Форма.мСтруктураМногостраничныхРазделов.Свойство("ЛистГ1Продолжение",ТаблицаРаздела);
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		
		Для Каждого Страница Из ТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (ТипЗнч(Страница.Данные) <> Тип("Структура") И ТипЗнч(Страница.Данные) <> Тип("СписокЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			Если Страница.Данные.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Страница.Данные[0].Значение;
			Колонка150 = Колонка150 + Данные.П000025124002;				
		КонецЦикла;
		
		мЛистГ1.П000010102004 = Мин(мЛистГ1.П000010101002, мЛистГ1.П000010102004);
		мЛистГ1.П000010104004 = Мин(мЛистГ1.П000010103002, 4000);
		мЛистГ1.П000010106004 = Мин(мЛистГ1.П000010105002, 4000);
		мЛистГ1.П000010108004 = Мин(мЛистГ1.П000010107002, 4000);
		мЛистГ1.П000010110004 = Мин(мЛистГ1.П000010109002, 4000);
		мЛистГ1.П000010112004 = Мин(мЛистГ1.П000010111002, 4000);
		мЛистГ1.П000010114004 = Мин(мЛистГ1.П000010113002, 10000);
		
		мЛистГ1.П000010115004 = Колонка150;
		
		мЛистГ1.П000010116004 = Окр(мЛистГ1.П000010102004, 2)
		+ Окр(мЛистГ1.П000010104004, 2)
		+ Окр(мЛистГ1.П000010106004, 2)
		+ Окр( мЛистГ1.П000010108004, 2)
		+ Окр( мЛистГ1.П000010110004, 2)
		+ Окр( мЛистГ1.П000010112004, 2)
		+ Окр( мЛистГ1.П000010114004, 2)
		+ Окр( мЛистГ1.П000010115004, 2);
		
		
		Если ОбновитьТабличныйДокумент Тогда
			мЛистГ1 = Форма.ТабличныйДокумент;
			мЛистГ1.Области.П000010102004.Значение = Мин(мЛистГ1.Области.П000010101002.Значение, мЛистГ1.Области.П000010102004.Значение);
			мЛистГ1.Области.П000010104004.Значение = Мин(мЛистГ1.Области.П000010103002.Значение, 4000);
			мЛистГ1.Области.П000010106004.Значение = Мин(мЛистГ1.Области.П000010105002.Значение, 4000);
			мЛистГ1.Области.П000010108004.Значение = Мин(мЛистГ1.Области.П000010107002.Значение, 4000);
			мЛистГ1.Области.П000010110004.Значение = Мин(мЛистГ1.Области.П000010109002.Значение, 4000);
			мЛистГ1.Области.П000010112004.Значение = Мин(мЛистГ1.Области.П000010111002.Значение, 4000);
			мЛистГ1.Области.П000010114004.Значение = Мин(мЛистГ1.Области.П000010113002.Значение, 10000);
			
			мЛистГ1.Области.П000010115004.Значение = Колонка150;
			
			мЛистГ1.Области.П000010116004.Значение = Окр( мЛистГ1.Области.П000010102004.Значение, 2)
			+ Окр( мЛистГ1.Области.П000010104004.Значение, 2)
			+ Окр( мЛистГ1.Области.П000010106004.Значение, 2)
			+ Окр( мЛистГ1.Области.П000010108004.Значение, 2)
			+ Окр( мЛистГ1.Области.П000010110004.Значение, 2)
			+ Окр( мЛистГ1.Области.П000010112004.Значение, 2)
			+ Окр( мЛистГ1.Области.П000010114004.Значение, 2)
			+ Окр( мЛистГ1.Области.П000010115004.Значение, 2);
		КонецЕсли;
	
	ИначеЕсли ИмяРаздела = "ЛистГ2" Тогда
		
		мЛистГ2 = Форма.ТабличныйДокумент;
		
		Колонка060 = 0;
		ОстатокВычета = 4000;
		
		НомерТекущейСтраницы = ?(ОбновитьТабличныйДокумент,
		Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы,
		-1);
		ТаблицаСтраницы = Форма["ТаблицаСтраницы" + ИмяРаздела];
		
		//Итоги по всем страницам листа кроме текущего
		Для каждого Лист Из ТаблицаСтраницы Цикл		
			
			Если ТаблицаСтраницы.Индекс(Лист) + 1 <> НомерТекущейСтраницы Тогда
				
				Для Каждого ДанныеДопСтрок Из Лист.ДанныеДопСтрок Цикл
					
					ТаблицаБлока = ДанныеДопСтрок.Значение;
					
					Для каждого Зап Из ТаблицаБлока Цикл
						//аккумулирование общих итогов
						Колонка060 = Колонка060 + Окр( Зап.П000010201006, 2);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Колонка060 > ОстатокВычета Тогда
			Колонка060 = ОстатокВычета;
			ОстатокВычета = 0;
		Иначе
			ОстатокВычета = ОстатокВычета - Колонка060;	
		КонецЕсли;	
		
		//Обработка текущей страницы листа
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыГ2, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		Для каждого Зап Из ТаблицаБлока Цикл
			
			Если ОстатокВычета = 0 Тогда
				Зап.П000010201006 = 0;
				Если ОбновитьТабличныйДокумент Тогда
					мЛистГ2.Области["П000010201006_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = 0;
				КонецЕсли;	
				Продолжить;
			КонецЕсли; 
			
			Колонка050 = Окр( Мин(Зап.П000010201005, ОстатокВычета), 2);
			
			ОстатокВычета = ОстатокВычета - Колонка050;
			Зап.П000010201006 = Колонка050;
			Если ОбновитьТабличныйДокумент Тогда
				мЛистГ2.Области["П000010201006_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Колонка050;
			КонецЕсли;
			Колонка060 = Колонка060 + Колонка050;
			
		КонецЦикла;
		
		//заполнение общих итогов в табличном документе
		Если ОбновитьТабличныйДокумент 
			И Форма.ТабличныйДокумент.Области.Найти("ИтоговыеПоказатели") <> Неопределено Тогда
			
			Форма.ТабличныйДокумент.Области.П000010207001.Значение = Колонка060;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ЛистГ3" Тогда
		
		мЛистГ3 = Форма.ТабличныйДокумент;
		
		НомерТекущейСтраницы = ?(ОбновитьТабличныйДокумент,
		Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы,
		-1);
		
		Колонка070 = 0;
		ТаблицаСтраницы = Форма["ТаблицаСтраницы" + ИмяРаздела];
		
		//Итоги по всем страницам листа кроме текущего
		Для каждого Лист Из ТаблицаСтраницы Цикл		
			
			Если ТаблицаСтраницы.Индекс(Лист) + 1 <> НомерТекущейСтраницы Тогда
				
				Для Каждого ДанныеДопСтрок Из Лист.ДанныеДопСтрок Цикл
					
					ТаблицаБлока = ДанныеДопСтрок.Значение;
					
					Для каждого Зап Из ТаблицаБлока Цикл
						//аккумулирование общих итогов
						Колонка070 = Колонка070 + Окр( Зап.П000027201006, 2);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыГ3, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка070 = Колонка070 + Окр( Зап.П000027201006, 2);
			Колонка030 = Зап.П000027201003;
			Если ЗначениеЗаполнено(Колонка030) Тогда
				ДлинаЗначения = СтрДлина(СокрЛП(Колонка030));
				Для Инд = ДлинаЗначения+1 По 11 Цикл
					Колонка030 = СокрЛП(Колонка030) + "0";
				КонецЦикла;
			КонецЕсли;
			
			Зап.П000027201003 = Колонка030;
			Если ОбновитьТабличныйДокумент Тогда
				мЛистГ3.Области["П000027201003_" + (ТаблицаБлока.Индекс(Зап)+1)].Значение = Колонка030;
			КонецЕсли;	
		КонецЦикла;
		
		ПоследняяСтраница = ТаблицаСтраницы[ТаблицаСтраницы.Количество()-1].Данные;
		
		Если ПоследняяСтраница.Количество() <> 0 Тогда
			ПоследняяСтраница = ПоследняяСтраница[0].Значение;
			Если ПоследняяСтраница.Свойство("П000027207001") Тогда
				ПоследняяСтраница.П000027207001 = Колонка070;	
			КонецЕсли;	
		КонецЕсли;	
	
		Если ОбновитьТабличныйДокумент 
			И мЛистГ3.Области.Найти("ИтоговыеПоказатели") <> Неопределено Тогда
			мЛистГ3.Области.П000027207001.Значение = Колонка070;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ЛистЕ" Тогда
		
		Если ОбновитьТабличныйДокумент Тогда
		
		мЛистЕ = Форма.ТабличныйДокумент;
		
		// Расчет п. 1.1
		Если ЗначениеЗаполнено(мЛистЕ.Области.П000014002004.Значение) Тогда
			Колонка020 = Мин(мЛистЕ.Области.П000014002004.Значение, мЛистЕ.Области.П000014001002.Значение, 1000000);
		Иначе
			Колонка020 = Мин(мЛистЕ.Области.П000014001002.Значение, 1000000);
		КонецЕсли; 
		мЛистЕ.Области.П000014002004.Значение = Окр( Колонка020, 2);
		Если ЗначениеЗаполнено(мЛистЕ.Области.П000014004004.Значение) Тогда
			Колонка040 = Мин(мЛистЕ.Области.П000014004004.Значение, мЛистЕ.Области.П000014003002.Значение, 1000000);
		Иначе
			Колонка040 = Мин(мЛистЕ.Области.П000014003002.Значение, 1000000);
		КонецЕсли; 
		мЛистЕ.Области.П000014004004.Значение = Окр( Колонка040, 2);
		
		мЛистЕ.Области.П000014005002.Значение = мЛистЕ.Области.П000014001002.Значение + мЛистЕ.Области.П000014003002.Значение;
		мЛистЕ.Области.П000014006004.Значение = Мин(1000000, мЛистЕ.Области.П000014002004.Значение + мЛистЕ.Области.П000014004004.Значение);
		
		// Расчет п. 1.4
		мЛистЕ.Области.П000014008004.Значение = Мин(мЛистЕ.Области.П000014008004.Значение, мЛистЕ.Области.П000014007002.Значение);
		
		// Расчет п. 1.5
		мЛистЕ.Области.П000014009002.Значение = мЛистЕ.Области.П000014005002.Значение + мЛистЕ.Области.П000014007002.Значение;
		мЛистЕ.Области.П000014010004.Значение = мЛистЕ.Области.П000014006004.Значение + мЛистЕ.Области.П000014008004.Значение;
		
		// Расчет п. 2.1
		Если ЗначениеЗаполнено(мЛистЕ.Области.П000014012004.Значение) Тогда
			Колонка120 = Мин(мЛистЕ.Области.П000014012004.Значение, мЛистЕ.Области.П000014011002.Значение, 250000);
		Иначе
			Колонка120 = Мин(мЛистЕ.Области.П000014011002.Значение, 250000);
		КонецЕсли; 
		мЛистЕ.Области.П000014012004.Значение = Окр( Колонка120, 2);
		
		// Расчет п. 2.2
		мЛистЕ.Области.П000014014004.Значение = Мин(мЛистЕ.Области.П000014014004.Значение, мЛистЕ.Области.П000014013002.Значение);
		
		// Итоги п. 2
		мЛистЕ.Области.П000014015002.Значение = мЛистЕ.Области.П000014011002.Значение + мЛистЕ.Области.П000014013002.Значение;
		мЛистЕ.Области.П000014016004.Значение = мЛистЕ.Области.П000014014004.Значение + мЛистЕ.Области.П000014012004.Значение;
		
		// Расчет п. 3
		мЛистЕ.Области.П000014018004.Значение = Мин(мЛистЕ.Области.П000014018004.Значение, мЛистЕ.Области.П000014017002.Значение);
		
		// Расчет общего итога
		мЛистЕ.Области.П000014019002.Значение = мЛистЕ.Области.П000014010004.Значение 
		+ мЛистЕ.Области.П000014016004.Значение
		+ мЛистЕ.Области.П000014018004.Значение;
		
	Иначе
		
		мЛистЕ = Форма.СтруктураДанныхЛистЕ;
		
		// Расчет п. 1.1
		Если ЗначениеЗаполнено(мЛистЕ.П000014002004) Тогда
			Колонка020 = Мин(мЛистЕ.П000014002004, мЛистЕ.П000014001002, 1000000);
		Иначе
			Колонка020 = Мин(мЛистЕ.П000014001002, 1000000);
		КонецЕсли; 
		мЛистЕ.П000014002004 = Окр( Колонка020, 2);
		Если ЗначениеЗаполнено(мЛистЕ.П000014004004) Тогда
			Колонка040 = Мин(мЛистЕ.П000014004004, мЛистЕ.П000014003002, 1000000);
		Иначе
			Колонка040 = Мин(мЛистЕ.П000014003002, 1000000);
		КонецЕсли; 
		мЛистЕ.П000014004004 = Окр( Колонка040, 2);
		
		мЛистЕ.П000014005002 = мЛистЕ.П000014001002 + мЛистЕ.П000014003002;
		мЛистЕ.П000014006004 = Мин(1000000, мЛистЕ.П000014002004 + мЛистЕ.П000014004004);
		
		// Расчет п. 1.4
		мЛистЕ.П000014008004 = Мин(мЛистЕ.П000014008004, мЛистЕ.П000014007002);
		
		// Расчет п. 1.5
		мЛистЕ.П000014009002 = мЛистЕ.П000014005002 + мЛистЕ.П000014007002;
		мЛистЕ.П000014010004 = мЛистЕ.П000014006004 + мЛистЕ.П000014008004;
		
		// Расчет п. 2.1
		Если ЗначениеЗаполнено(мЛистЕ.П000014012004) Тогда
			Колонка120 = Мин(мЛистЕ.П000014012004, мЛистЕ.П000014011002, 250000);
		Иначе
			Колонка120 = Мин(мЛистЕ.П000014011002, 250000);
		КонецЕсли; 
		мЛистЕ.П000014012004 = Окр( Колонка120, 2);
		
		// Расчет п. 2.2
		мЛистЕ.П000014014004 = Мин(мЛистЕ.П000014014004, мЛистЕ.П000014013002);
		
		// Итоги п. 2
		мЛистЕ.П000014015002 = мЛистЕ.П000014011002 + мЛистЕ.П000014013002;
		мЛистЕ.П000014016004 = мЛистЕ.П000014014004 + мЛистЕ.П000014012004;
		
		// Расчет п. 3
		мЛистЕ.П000014018004 = Мин(мЛистЕ.П000014018004, мЛистЕ.П000014017002);
		
		// Расчет общего итога
		мЛистЕ.П000014019002 = мЛистЕ.П000014010004 
		+ мЛистЕ.П000014016004
		+ мЛистЕ.П000014018004;
		
	КонецЕсли;

	ИначеЕсли ИмяРаздела = "ЛистЖ1" Тогда
		
		Если ОбновитьТабличныйДокумент Тогда
			мЛистЖ1 = Форма.ТабличныйДокумент;
			
			мЛистЖ1.Области.П000020022004.Значение = Окр( мЛистЖ1.Области.П000020015004.Значение, 2)
			+ Окр( мЛистЖ1.Области.П000020016004.Значение, 2)
			+ Окр( мЛистЖ1.Области.П000020017004.Значение, 2)
			+ Окр( мЛистЖ1.Области.П000020018004.Значение, 2)
			+ Окр( мЛистЖ1.Области.П000020019004.Значение, 2)
			+ Окр( мЛистЖ1.Области.П000020020004.Значение, 2)
			+ Окр( мЛистЖ1.Области.П000020021004.Значение, 2);
			
			Колонка130 = 0;
			Колонка140 = 0;
			СумДоход = 0;
			Для НомерМесяца = 1 По 12 Цикл
				Постфикс = "002";
				Префикс = ?(НомерМесяца<10, "0", "");
				СумДоходТек = Окр( мЛистЖ1.Области["П0000200" + Префикс + НомерМесяца + Постфикс].Значение, 2);
				//перепишем значения доходов нарастающим итогом
				Если НомерМесяца > 1 Тогда
					ПрефиксПред = ?(НомерМесяца<11, "0", "");
					СумДоходПред = Окр( мЛистЖ1.Области["П0000200" + ПрефиксПред + (НомерМесяца-1) + Постфикс].Значение, 2);
					СумДоходНов = Макс(СумДоходТек, СумДоходПред);
					мЛистЖ1.Области["П0000200" + Префикс + НомерМесяца + Постфикс].Значение = СумДоходНов;
				КонецЕсли;
				СумДоход = Окр( мЛистЖ1.Области["П0000200" + Префикс + НомерМесяца + Постфикс].Значение, 2);
				Если СумДоход > 0 Тогда
					Если СумДоход <= 40000 Тогда
						Колонка130 = Колонка130 + 1;
					КонецЕсли;
					Если СумДоход <= 280000 Тогда
						Колонка140 = Колонка140 + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			мЛистЖ1.Области.П000020013002.Значение = Колонка130;
			мЛистЖ1.Области.П000020014004.Значение = Колонка140;
		КонецЕсли;
	
	ИначеЕсли ИмяРаздела = "ЛистЖ3" Тогда
		
		
		Если ОбновитьТабличныйДокумент Тогда
			мЛистЖ3 = Форма.ТабличныйДокумент;
			
			НомерТекущейСтраницы = ?(ОбновитьТабличныйДокумент,
			Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы,
			-1);
			
			Колонка210 = 0;
			Колонка100 = 0;
			Колонка200 = 0;
			
			ТаблицаСтраницы = Форма["ТаблицаСтраницы" + ИмяРаздела];
			
			//Итоги по всем страницам листа кроме текущего
			Для каждого Лист Из ТаблицаСтраницы Цикл		
				
				Если ТаблицаСтраницы.Индекс(Лист) + 1 <> НомерТекущейСтраницы Тогда
					
					Для Каждого Данные Из Лист.Данные Цикл
						
						Зап = Данные.Значение;
						
						//аккумулирование общих итогов
						Колонка210 = Колонка210 + Окр( Зап.П000022009001, 2) + Окр( Зап.П000022019001, 2);
						Колонка100 = Колонка100 + Окр( Зап.П000022008001, 2);
						Колонка200 = Колонка200 + Окр( Зап.П000022018001, 2);
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			//Итоги по текущему листу
			Колонка100 = Колонка100 + Окр( мЛистЖ3.Области.П000022008001.Значение, 2);
			Колонка200 = Колонка200 + Окр( мЛистЖ3.Области.П000022018001.Значение, 2);
			Колонка210 = Колонка210 + Окр( мЛистЖ3.Области.П000022009001.Значение, 2) + Окр( мЛистЖ3.Области.П000022019001.Значение, 2);
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела 
				И мЛистЖ3.Области.Найти("ИтоговыеПоказатели2") <> Неопределено Тогда
				
				мЛистЖ3.Области.П000022010001.Значение = Колонка100;
				мЛистЖ3.Области.П000022020001.Значение = Колонка200;
				мЛистЖ3.Области.П000022021001.Значение = Колонка210;
				
			КонецЕсли;
			
			Форма.СтруктураДанныхЛистЖ2.П000021008004 = Колонка100;
			Форма.СтруктураДанныхЛистЖ2.П000021009004 = Колонка200;
		КонецЕсли;
	
	ИначеЕсли ИмяРаздела = "ЛистЖ2" Тогда
		
		Если ОбновитьТабличныйДокумент Тогда
			мЛистЖ2 = Форма.ТабличныйДокумент;
			
			// Расчет п. 1
			мЛистЖ2.Области.П000021004004.Значение = Окр( мЛистЖ2.Области.П000021001004.Значение, 2)
			+ Окр( мЛистЖ2.Области.П000021002004.Значение, 2)
			+ Окр( мЛистЖ2.Области.П000021003004.Значение, 2);
			
			// Расчет п. 2
			
			Колонка210 = 0;
			Колонка100 = 0;
			Колонка200 = 0;
			
			ТаблицаСтраницы = Форма["ТаблицаСтраницыЛистЖ3"];
			
			//Итоги по всем страницам листа Ж3
			Для каждого Лист Из ТаблицаСтраницы Цикл		
				
				Для Каждого Данные Из Лист.Данные Цикл
					
					Зап = Данные.Значение;
					
					//аккумулирование общих итогов
					Колонка210 = Колонка210 + Окр( Зап.П000022009001, 2) + Окр( Зап.П000022019001, 2);
					Колонка100 = Колонка100 + Окр( Зап.П000022008001, 2);
					Колонка200 = Колонка200 + Окр( Зап.П000022018001, 2);
					
				КонецЦикла;
			КонецЦикла;
			
			мЛистЖ2.Области.П000021008004.Значение = Колонка200;
			мЛистЖ2.Области.П000021009004.Значение = Колонка100;
			
			// итог п.2: 
			Предел = Макс(0, 120000 - Колонка210);
			ИтогЖ2 = мЛистЖ2.Области.П000021005004.Значение + 
			мЛистЖ2.Области.П000021006004.Значение + 
			мЛистЖ2.Области.П000021007004.Значение + 
			мЛистЖ2.Области.П000021008004.Значение + 
			мЛистЖ2.Области.П000021009004.Значение + 
			мЛистЖ2.Области.П000021010004.Значение - 
			Колонка210;
			ВычетГрафы2 = Мин(Предел, ИтогЖ2);
			
			Если ИтогЖ2 <> 0 Тогда
				мЛистЖ2.Области.П000021011004.Значение = Окр( ВычетГрафы2, 2);
			Иначе
				мЛистЖ2.Области.П000021011004.Значение = 0;
			КонецЕсли; 
			
			// Расчет п. 3
			мЛистЖ2.Области.П000021012004.Значение = Окр( мЛистЖ2.Области.П000021011004.Значение, 2)
			+ Окр( мЛистЖ2.Области.П000021004004.Значение, 2);
		КонецЕсли;
	
	ИначеЕсли ИмяРаздела = "ЛистЗ" Тогда
		
		Если ОбновитьТабличныйДокумент Тогда
			
			Области = Форма.ТабличныйДокумент.Области;
			ОбластиПродолжения = Форма.СтруктураДанныхЛистЗПродолжение;
			
			//Очищаем автоматически рассчитываемые поля:
			Для Каждого Область Из Области Цикл
				
				Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Область.СодержитЗначение = Истина 
					И Область.Защита = Истина 
					И Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика Тогда
					Область.Значение = 0;
				КонецЕсли; 
				
			КонецЦикла; 
			
			//Считаем результаты по разделам ЦБ и ФИСС, обращающимся на ОРЦБ:
			Результат1 = Области.П000021001001.Значение - Области.П000021002001.Значение;
			Результат2 = Области.П000021008001.Значение - Области.П000021009001.Значение;
			Результат3 = Области.П000021012001.Значение - Области.П000021013001.Значение;
			Результат4 = Области.П000021015001.Значение - Области.П000021016001.Значение;
			Результат5 = Области.П000021022001.Значение - Области.П000021023001.Значение;
			Результат6 = ОбластиПродолжения.П000022028001 - ОбластиПродолжения.П000022029001;
			Результат7 = ОбластиПродолжения.П000022031001 - ОбластиПродолжения.П000022032001;
			Результат8 = ОбластиПродолжения.П000022034001 - ОбластиПродолжения.П000022035001;
			
			//Запомним суммы убытков прошлых лет:
			ПрошлыйУбытокПоЦБ   = ОбластиПродолжения.П000022037001;
			ПрошлыйУбытокПоФИСС = ОбластиПродолжения.П000022038001;
			
			//Порядок расчета разделов отличается от их порядка в бланке.
			
			//Первыми расчитаем разделы, которые не участвуют в расчетах прочих разделов:
			//Раздел 3
			Области.П000021014001.Значение = ?(Результат3 > 0, Результат3, 0);
			Результат3 = Области.П000021014001.Значение;
			//Раздел 6
			ОбластиПродолжения.П000022030001 = ?(Результат6 > 0, Результат6, 0);
			Результат6 = ОбластиПродолжения.П000022030001;
			//Раздел 7
			ОбластиПродолжения.П000022033001 = ?(Результат7 > 0, Результат7, 0);
			Результат7 = ОбластиПродолжения.П000022033001;
			//Раздел 8
			ОбластиПродолжения.П000022036001 = ?(Результат8 > 0, Результат8, 0);
			Результат8 = ОбластиПродолжения.П000022036001;
			
			//Раздел 2
			Если Результат2 > 0 Тогда //Прибыль
				Области.П000021011001.Значение = Результат2;
			ИначеЕсли Результат2 < 0 Тогда //Убыток
				Области.П000021010001.Значение = -Результат2;
			КонецЕсли; 
			
			//Далее расчитываем взаимоувязанные разделы:
			
			// Сначала расскладываем по ячейкам суммы убытков:
			Если Результат1 < 0 Тогда
				Области.П000021003001.Значение = -Результат1;
			КонецЕсли; 
			Если Результат4 < 0 Тогда
				Области.П000021017001.Значение = -Результат4;
			КонецЕсли; 
			Если Результат5 < 0 Тогда
				Области.П000021024001.Значение = -Результат5;
			КонецЕсли; 
			
			// Теперь обрабатываем вычеты из сумм доходов в тех разделах, где есть доходы:
			// ВНИМАНИЕ! Обрабатывать доходы нужно в несколько итераций, чтобы правильно распределить убытки прошлых лет !
			
			Если Результат1 > 0 Тогда
				
				// Сперва уменьшаем на сумму убытка из раздела 2:
				Если Результат2 < 0 Тогда
					Области.П000021005001.Значение = Мин(-Результат2, Результат1);
					Результат1                     = Результат1 - Области.П000021005001.Значение;
				КонецЕсли; 
				
				// Если остался доход - уменьшаем на сумму ПрошлыйУбытокПоЦБ:
				Если Результат1 > 0 И ПрошлыйУбытокПоЦБ > 0 Тогда
					Области.П000021006001.Значение = Мин(Результат1, ПрошлыйУбытокПоЦБ);
					ПрошлыйУбытокПоЦБ              = ПрошлыйУбытокПоЦБ - Области.П000021006001.Значение;
					Результат1                     = Результат1 - Области.П000021006001.Значение;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021020001.Значение = Мин(Результат4, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021020001.Значение;
					Результат4                     = Результат4          - Области.П000021020001.Значение;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат5 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021026001.Значение = Мин(Результат5, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021026001.Значение;
					Результат5                     = Результат5          - Области.П000021026001.Значение;
				КонецЕсли; 
				
			КонецЕсли; 
			
			// Убытки прошлых лет распределены. Теперь распределяем убытки текущего периода:
			Если Результат5 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021018001.Значение = Мин(Результат5, -Результат4);
					Результат4 = Результат4 + Области.П000021018001.Значение;
					Результат5 = Результат5 - Области.П000021018001.Значение;
				КонецЕсли; 
				
				//Доход по разделу 5:
				Области.П000021027001.Значение = Результат5;
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				Если Результат1 < 0 Тогда
					Области.П000021004001.Значение = Мин(Результат4, -Результат1);
					Результат1 = Результат1 + Области.П000021004001.Значение;
					Результат4 = Результат4 - Области.П000021004001.Значение;
				КонецЕсли; 
				
				Если Результат5 < 0 Тогда
					Области.П000021025001.Значение = Мин(Результат4, -Результат5);
					Результат5 = Результат5 + Области.П000021025001.Значение;
					Результат4 = Результат4 - Области.П000021025001.Значение;
				КонецЕсли; 
				
				//Доход по разделу 4:
				Области.П000021021001.Значение = Результат4;
				
			КонецЕсли; 
			
			Если Результат1 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021019001.Значение = Мин(Результат1, -Результат4);
					Результат4 = Результат4 + Области.П000021019001.Значение;
					Результат1 = Результат1 - Области.П000021019001.Значение;
				КонецЕсли; 
				
				//Доход по разделу 1:
				Области.П000021007001.Значение = Результат1;
				
			КонецЕсли; 
			
			
			//Считаем итоги:
			// Расчет п.10 (продолжение листа З)
			РезультатП390 = ОбластиПродолжения.П000022037001 
			+ Области.П000021003001.Значение
			- Области.П000021004001.Значение 
			- Области.П000021006001.Значение;
			ОбластиПродолжения.П000022039001 = Макс(РезультатП390, 0);
			
			РезультатП400 = ОбластиПродолжения.П000022038001 //9.2
			+ Области.П000021017001.Значение //4.3
			- Области.П000021018001.Значение //4.4
			- Области.П000021019001.Значение //4.5
			- Области.П000021020001.Значение //4.6
			+ Области.П000021024001.Значение //5.3
			- Области.П000021025001.Значение //5.4
			- Области.П000021026001.Значение //5.5
			;
			ОбластиПродолжения.П000022040001 = Макс(РезультатП400, 0);
			
			// Расчет п.11 (продолжение листа З)
			ОбластиПродолжения.П000022041001 = Области.П000021001001.Значение //1.1
			+ Области.П000021008001.Значение //2.1
			+ Области.П000021012001.Значение //3.1
			+ Области.П000021015001.Значение //4.1
			+ Области.П000021022001.Значение //5.1
			+ ОбластиПродолжения.П000022028001 //6.1
			+ ОбластиПродолжения.П000022031001 //7.1
			+ ОбластиПродолжения.П000022034001 //8.1
			;
			ОбластиПродолжения.П000022042001 = Области.П000021007001.Значение //1.7
			+ Области.П000021011001.Значение //2.4
			+ Области.П000021014001.Значение //3.3
			+ Области.П000021021001.Значение //4.7
			+ Области.П000021027001.Значение //5.6
			+ ОбластиПродолжения.П000022030001 //6.3
			+ ОбластиПродолжения.П000022033001 //7.3
			+ ОбластиПродолжения.П000022036001 //8.3
			;
			ОбластиПродолжения.П000022043001 = ОбластиПродолжения.П000022041001 - ОбластиПродолжения.П000022042001;
			
		Иначе
			
			Области = Форма.СтруктураДанныхЛистЗ;
			ОбластиПродолжения = Форма.СтруктураДанныхЛистЗПродолжение;
			
			//Очищаем автоматически рассчитываемые поля:
			 Области.П000021003001 = 0;
			 Области.П000021004001 = 0;
			 Области.П000021005001 = 0;
			 Области.П000021006001 = 0;
			 Области.П000021007001 = 0;
			 Области.П000021010001 = 0;
			 
			 Области.П000021011001 = 0;
			 Области.П000021014001 = 0;
			 Области.П000021017001 = 0;
			 Области.П000021018001 = 0;
			 
			 Области.П000021019001 = 0;
			 Области.П000021020001 = 0;
			 Области.П000021021001 = 0;
			 Области.П000021024001 = 0;
			 
			 Области.П000021025001 = 0;
			 Области.П000021026001 = 0;
			 Области.П000021027001 = 0;
			 
			 //Считаем результаты по разделам ЦБ и ФИСС, обращающимся на ОРЦБ:
			Результат1 = Области.П000021001001 - Области.П000021002001;
			Результат2 = Области.П000021008001 - Области.П000021009001;
			Результат3 = Области.П000021012001 - Области.П000021013001;
			Результат4 = Области.П000021015001 - Области.П000021016001;
			Результат5 = Области.П000021022001 - Области.П000021023001;
			Результат6 = ОбластиПродолжения.П000022028001 - ОбластиПродолжения.П000022029001;
			Результат7 = ОбластиПродолжения.П000022031001 - ОбластиПродолжения.П000022032001;
			Результат8 = ОбластиПродолжения.П000022034001 - ОбластиПродолжения.П000022035001;
			
			//Запомним суммы убытков прошлых лет:
			ПрошлыйУбытокПоЦБ   = ОбластиПродолжения.П000022037001;
			ПрошлыйУбытокПоФИСС = ОбластиПродолжения.П000022038001;
			
			//Порядок расчета разделов отличается от их порядка в бланке.
			
			//Первыми расчитаем разделы, которые не участвуют в расчетах прочих разделов:
			//Раздел 3
			Области.П000021014001 = ?(Результат3 > 0, Результат3, 0);
			Результат3 = Области.П000021014001;
			//Раздел 6
			ОбластиПродолжения.П000022030001 = ?(Результат6 > 0, Результат6, 0);
			Результат6 = ОбластиПродолжения.П000022030001;
			//Раздел 7
			ОбластиПродолжения.П000022033001 = ?(Результат7 > 0, Результат7, 0);
			Результат7 = ОбластиПродолжения.П000022033001;
			//Раздел 8
			ОбластиПродолжения.П000022036001 = ?(Результат8 > 0, Результат8, 0);
			Результат8 = ОбластиПродолжения.П000022036001;
			
			//Раздел 2
			Если Результат2 > 0 Тогда //Прибыль
				Области.П000021011001 = Результат2;
			ИначеЕсли Результат2 < 0 Тогда //Убыток
				Области.П000021010001 = -Результат2;
			КонецЕсли; 
			
			//Далее расчитываем взаимоувязанные разделы:
			
			// Сначала расскладываем по ячейкам суммы убытков:
			Если Результат1 < 0 Тогда
				Области.П000021003001 = -Результат1;
			КонецЕсли; 
			Если Результат4 < 0 Тогда
				Области.П000021017001 = -Результат4;
			КонецЕсли; 
			Если Результат5 < 0 Тогда
				Области.П000021024001 = -Результат5;
			КонецЕсли; 
			
			// Теперь обрабатываем вычеты из сумм доходов в тех разделах, где есть доходы:
			// ВНИМАНИЕ! Обрабатывать доходы нужно в несколько итераций, чтобы правильно распределить убытки прошлых лет !
			
			Если Результат1 > 0 Тогда
				
				// Сперва уменьшаем на сумму убытка из раздела 2:
				Если Результат2 < 0 Тогда
					Области.П000021005001 = Мин(-Результат2, Результат1);
					Результат1                     = Результат1 - Области.П000021005001;
				КонецЕсли; 
				
				// Если остался доход - уменьшаем на сумму ПрошлыйУбытокПоЦБ:
				Если Результат1 > 0 И ПрошлыйУбытокПоЦБ > 0 Тогда
					Области.П000021006001 = Мин(Результат1, ПрошлыйУбытокПоЦБ);
					ПрошлыйУбытокПоЦБ              = ПрошлыйУбытокПоЦБ - Области.П000021006001;
					Результат1                     = Результат1 - Области.П000021006001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021020001 = Мин(Результат4, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021020001;
					Результат4                     = Результат4          - Области.П000021020001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат5 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021026001 = Мин(Результат5, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021026001;
					Результат5                     = Результат5          - Области.П000021026001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			// Убытки прошлых лет распределены. Теперь распределяем убытки текущего периода:
			Если Результат5 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021018001.Значение = Мин(Результат5, -Результат4);
					Результат4 = Результат4 + Области.П000021018001;
					Результат5 = Результат5 - Области.П000021018001;
				КонецЕсли; 
				
				//Доход по разделу 5:
				Области.П000021027001 = Результат5;
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				Если Результат1 < 0 Тогда
					Области.П000021004001 = Мин(Результат4, -Результат1);
					Результат1 = Результат1 + Области.П000021004001;
					Результат4 = Результат4 - Области.П000021004001;
				КонецЕсли; 
				
				Если Результат5 < 0 Тогда
					Области.П000021025001 = Мин(Результат4, -Результат5);
					Результат5 = Результат5 + Области.П000021025001;
					Результат4 = Результат4 - Области.П000021025001;
				КонецЕсли; 
				
				//Доход по разделу 4:
				Области.П000021021001 = Результат4;
				
			КонецЕсли; 
			
			Если Результат1 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021019001 = Мин(Результат1, -Результат4);
					Результат4 = Результат4 + Области.П000021019001;
					Результат1 = Результат1 - Области.П000021019001;
				КонецЕсли; 
				
				//Доход по разделу 1:
				Области.П000021007001 = Результат1;
				
			КонецЕсли; 
			
			
			//Считаем итоги:
			// Расчет п.10 (продолжение листа З)
			РезультатП390 = ОбластиПродолжения.П000022037001 
			+ Области.П000021003001
			- Области.П000021004001 
			- Области.П000021006001;
			ОбластиПродолжения.П000022039001 = Макс(РезультатП390, 0);
			
			РезультатП400 = ОбластиПродолжения.П000022038001 //9.2
			+ Области.П000021017001 //4.3
			- Области.П000021018001 //4.4
			- Области.П000021019001 //4.5
			- Области.П000021020001 //4.6
			+ Области.П000021024001 //5.3
			- Области.П000021025001 //5.4
			- Области.П000021026001 //5.5
			;
			ОбластиПродолжения.П000022040001 = Макс(РезультатП400, 0);
			
			// Расчет п.11 (продолжение листа З)
			ОбластиПродолжения.П000022041001 = Области.П000021001001 //1.1
			+ Области.П000021008001 //2.1
			+ Области.П000021012001 //3.1
			+ Области.П000021015001 //4.1
			+ Области.П000021022001 //5.1
			+ ОбластиПродолжения.П000022028001 //6.1
			+ ОбластиПродолжения.П000022031001 //7.1
			+ ОбластиПродолжения.П000022034001 //8.1
			;
			ОбластиПродолжения.П000022042001 = Области.П000021007001 //1.7
			+ Области.П000021011001 //2.4
			+ Области.П000021014001 //3.3
			+ Области.П000021021001 //4.7
			+ Области.П000021027001 //5.6
			+ ОбластиПродолжения.П000022030001 //6.3
			+ ОбластиПродолжения.П000022033001 //7.3
			+ ОбластиПродолжения.П000022036001 //8.3
			;
			ОбластиПродолжения.П000022043001 = ОбластиПродолжения.П000022041001 - ОбластиПродолжения.П000022042001;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ЛистЗПродолжение" Тогда	
		
		Если ОбновитьТабличныйДокумент Тогда
			
			ОбластиПродолжения = Форма.ТабличныйДокумент.Области;
			Области = Форма.СтруктураДанныхЛистЗ;
			
			//Очищаем автоматически рассчитываемые поля:
			Для Каждого Область Из ОбластиПродолжения Цикл
				
				Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Область.СодержитЗначение = Истина 
					И Область.Защита = Истина 
					И Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика Тогда
					Область.Значение = 0;
				КонецЕсли; 
				
			КонецЦикла; 
			
			//Считаем результаты по разделам ЦБ и ФИСС, обращающимся на ОРЦБ:
			Результат1 = Области.П000021001001 - Области.П000021002001;
			Результат2 = Области.П000021008001 - Области.П000021009001;
			Результат3 = Области.П000021012001 - Области.П000021013001;
			Результат4 = Области.П000021015001 - Области.П000021016001;
			Результат5 = Области.П000021022001 - Области.П000021023001;
			Результат6 = ОбластиПродолжения.П000022028001.Значение - ОбластиПродолжения.П000022029001.Значение;
			Результат7 = ОбластиПродолжения.П000022031001.Значение - ОбластиПродолжения.П000022032001.Значение;
			Результат8 = ОбластиПродолжения.П000022034001.Значение - ОбластиПродолжения.П000022035001.Значение;
			
			//Запомним суммы убытков прошлых лет:
			ПрошлыйУбытокПоЦБ   = ОбластиПродолжения.П000022037001.Значение;
			ПрошлыйУбытокПоФИСС = ОбластиПродолжения.П000022038001.Значение;
			
			//Порядок расчета разделов отличается от их порядка в бланке.
			
			//Первыми расчитаем разделы, которые не участвуют в расчетах прочих разделов:
			//Раздел 3
			Области.П000021014001 = ?(Результат3 > 0, Результат3, 0);
			Результат3 = Области.П000021014001;
			//Раздел 6
			ОбластиПродолжения.П000022030001.Значение = ?(Результат6 > 0, Результат6, 0);
			Результат6 = ОбластиПродолжения.П000022030001.Значение;
			//Раздел 7
			ОбластиПродолжения.П000022033001.Значение = ?(Результат7 > 0, Результат7, 0);
			Результат7 = ОбластиПродолжения.П000022033001.Значение;
			//Раздел 8
			ОбластиПродолжения.П000022036001.Значение = ?(Результат8 > 0, Результат8, 0);
			Результат8 = ОбластиПродолжения.П000022036001.Значение;
			
			//Раздел 2
			Если Результат2 > 0 Тогда //Прибыль
				Области.П000021011001 = Результат2;
			ИначеЕсли Результат2 < 0 Тогда //Убыток
				Области.П000021010001 = -Результат2;
			КонецЕсли; 
			
			//Далее расчитываем взаимоувязанные разделы:
			
			// Сначала расскладываем по ячейкам суммы убытков:
			Если Результат1 < 0 Тогда
				Области.П000021003001 = -Результат1;
			КонецЕсли; 
			Если Результат4 < 0 Тогда
				Области.П000021017001 = -Результат4;
			КонецЕсли; 
			Если Результат5 < 0 Тогда
				Области.П000021024001 = -Результат5;
			КонецЕсли; 
			
			// Теперь обрабатываем вычеты из сумм доходов в тех разделах, где есть доходы:
			// ВНИМАНИЕ! Обрабатывать доходы нужно в несколько итераций, чтобы правильно распределить убытки прошлых лет !
			
			Если Результат1 > 0 Тогда
				
				// Сперва уменьшаем на сумму убытка из раздела 2:
				Если Результат2 < 0 Тогда
					Области.П000021005001 = Мин(-Результат2, Результат1);
					Результат1                     = Результат1 - Области.П000021005001;
				КонецЕсли; 
				
				// Если остался доход - уменьшаем на сумму ПрошлыйУбытокПоЦБ:
				Если Результат1 > 0 И ПрошлыйУбытокПоЦБ > 0 Тогда
					Области.П000021006001 = Мин(Результат1, ПрошлыйУбытокПоЦБ);
					ПрошлыйУбытокПоЦБ              = ПрошлыйУбытокПоЦБ - Области.П000021006001;
					Результат1                     = Результат1 - Области.П000021006001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021020001 = Мин(Результат4, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021020001;
					Результат4                     = Результат4          - Области.П000021020001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат5 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021026001 = Мин(Результат5, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021026001;
					Результат5                     = Результат5          - Области.П000021026001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			// Убытки прошлых лет распределены. Теперь распределяем убытки текущего периода:
			Если Результат5 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021018001 = Мин(Результат5, -Результат4);
					Результат4 = Результат4 + Области.П000021018001;
					Результат5 = Результат5 - Области.П000021018001;
				КонецЕсли; 
				
				//Доход по разделу 5:
				Области.П000021027001 = Результат5;
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				Если Результат1 < 0 Тогда
					Области.П000021004001 = Мин(Результат4, -Результат1);
					Результат1 = Результат1 + Области.П000021004001;
					Результат4 = Результат4 - Области.П000021004001;
				КонецЕсли; 
				
				Если Результат5 < 0 Тогда
					Области.П000021025001 = Мин(Результат4, -Результат5);
					Результат5 = Результат5 + Области.П000021025001;
					Результат4 = Результат4 - Области.П000021025001;
				КонецЕсли; 
				
				//Доход по разделу 4:
				Области.П000021021001 = Результат4;
				
			КонецЕсли; 
			
			Если Результат1 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021019001 = Мин(Результат1, -Результат4);
					Результат4 = Результат4 + Области.П000021019001;
					Результат1 = Результат1 - Области.П000021019001;
				КонецЕсли; 
				
				//Доход по разделу 1:
				Области.П000021007001 = Результат1;
				
			КонецЕсли; 
			
			
			//Считаем итоги:
			// Расчет п.10 (продолжение листа З)
			РезультатП390 = ОбластиПродолжения.П000022037001.Значение 
			+ Области.П000021003001
			- Области.П000021004001 
			- Области.П000021006001;
			ОбластиПродолжения.П000022039001.Значение = Макс(РезультатП390, 0);
			
			РезультатП400 = ОбластиПродолжения.П000022038001.Значение //9.2
			+ Области.П000021017001 //4.3
			- Области.П000021018001 //4.4
			- Области.П000021019001 //4.5
			- Области.П000021020001 //4.6
			+ Области.П000021024001 //5.3
			- Области.П000021025001 //5.4
			- Области.П000021026001 //5.5
			;
			ОбластиПродолжения.П000022040001.Значение = Макс(РезультатП400, 0);
			
			// Расчет п.11 (продолжение листа З)
			ОбластиПродолжения.П000022041001.Значение = Области.П000021001001 //1.1
			+ Области.П000021008001 //2.1
			+ Области.П000021012001 //3.1
			+ Области.П000021015001 //4.1
			+ Области.П000021022001 //5.1
			+ ОбластиПродолжения.П000022028001.Значение //6.1
			+ ОбластиПродолжения.П000022031001.Значение //7.1
			+ ОбластиПродолжения.П000022034001.Значение //8.1
			;
			ОбластиПродолжения.П000022042001.Значение = Области.П000021007001 //1.7
			+ Области.П000021011001 //2.4
			+ Области.П000021014001 //3.3
			+ Области.П000021021001 //4.7
			+ Области.П000021027001 //5.6
			+ ОбластиПродолжения.П000022030001.Значение //6.3
			+ ОбластиПродолжения.П000022033001.Значение //7.3
			+ ОбластиПродолжения.П000022036001.Значение //8.3
			;
			ОбластиПродолжения.П000022043001.Значение = ОбластиПродолжения.П000022041001.Значение - ОбластиПродолжения.П000022042001.Значение;
			
		Иначе
			
			Области = Форма.СтруктураДанныхЛистЗ;
			ОбластиПродолжения = Форма.СтруктураДанныхЛистЗПродолжение;
			
			//Очищаем автоматически рассчитываемые поля:
			 Области.П000021003001 = 0;
			 Области.П000021004001 = 0;
			 Области.П000021005001 = 0;
			 Области.П000021006001 = 0;
			 Области.П000021007001 = 0;
			 Области.П000021010001 = 0;
			 
			 Области.П000021011001 = 0;
			 Области.П000021014001 = 0;
			 Области.П000021017001 = 0;
			 Области.П000021018001 = 0;
			 
			 Области.П000021019001 = 0;
			 Области.П000021020001 = 0;
			 Области.П000021021001 = 0;
			 Области.П000021024001 = 0;
			 
			 Области.П000021025001 = 0;
			 Области.П000021026001 = 0;
			 Области.П000021027001 = 0;
			 
			 //Считаем результаты по разделам ЦБ и ФИСС, обращающимся на ОРЦБ:
			Результат1 = Области.П000021001001 - Области.П000021002001;
			Результат2 = Области.П000021008001 - Области.П000021009001;
			Результат3 = Области.П000021012001 - Области.П000021013001;
			Результат4 = Области.П000021015001 - Области.П000021016001;
			Результат5 = Области.П000021022001 - Области.П000021023001;
			Результат6 = ОбластиПродолжения.П000022028001 - ОбластиПродолжения.П000022029001;
			Результат7 = ОбластиПродолжения.П000022031001 - ОбластиПродолжения.П000022032001;
			Результат8 = ОбластиПродолжения.П000022034001 - ОбластиПродолжения.П000022035001;
			
			//Запомним суммы убытков прошлых лет:
			ПрошлыйУбытокПоЦБ   = ОбластиПродолжения.П000022037001;
			ПрошлыйУбытокПоФИСС = ОбластиПродолжения.П000022038001;
			
			//Порядок расчета разделов отличается от их порядка в бланке.
			
			//Первыми расчитаем разделы, которые не участвуют в расчетах прочих разделов:
			//Раздел 3
			Области.П000021014001 = ?(Результат3 > 0, Результат3, 0);
			Результат3 = Области.П000021014001;
			//Раздел 6
			ОбластиПродолжения.П000022030001 = ?(Результат6 > 0, Результат6, 0);
			Результат6 = ОбластиПродолжения.П000022030001;
			//Раздел 7
			ОбластиПродолжения.П000022033001 = ?(Результат7 > 0, Результат7, 0);
			Результат7 = ОбластиПродолжения.П000022033001;
			//Раздел 8
			ОбластиПродолжения.П000022036001 = ?(Результат8 > 0, Результат8, 0);
			Результат8 = ОбластиПродолжения.П000022036001;
			
			//Раздел 2
			Если Результат2 > 0 Тогда //Прибыль
				Области.П000021011001 = Результат2;
			ИначеЕсли Результат2 < 0 Тогда //Убыток
				Области.П000021010001 = -Результат2;
			КонецЕсли; 
			
			//Далее расчитываем взаимоувязанные разделы:
			
			// Сначала расскладываем по ячейкам суммы убытков:
			Если Результат1 < 0 Тогда
				Области.П000021003001 = -Результат1;
			КонецЕсли; 
			Если Результат4 < 0 Тогда
				Области.П000021017001 = -Результат4;
			КонецЕсли; 
			Если Результат5 < 0 Тогда
				Области.П000021024001 = -Результат5;
			КонецЕсли; 
			
			// Теперь обрабатываем вычеты из сумм доходов в тех разделах, где есть доходы:
			// ВНИМАНИЕ! Обрабатывать доходы нужно в несколько итераций, чтобы правильно распределить убытки прошлых лет !
			
			Если Результат1 > 0 Тогда
				
				// Сперва уменьшаем на сумму убытка из раздела 2:
				Если Результат2 < 0 Тогда
					Области.П000021005001 = Мин(-Результат2, Результат1);
					Результат1                     = Результат1 - Области.П000021005001;
				КонецЕсли; 
				
				// Если остался доход - уменьшаем на сумму ПрошлыйУбытокПоЦБ:
				Если Результат1 > 0 И ПрошлыйУбытокПоЦБ > 0 Тогда
					Области.П000021006001 = Мин(Результат1, ПрошлыйУбытокПоЦБ);
					ПрошлыйУбытокПоЦБ              = ПрошлыйУбытокПоЦБ - Области.П000021006001;
					Результат1                     = Результат1 - Области.П000021006001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021020001 = Мин(Результат4, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021020001;
					Результат4                     = Результат4          - Области.П000021020001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат5 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021026001 = Мин(Результат5, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021026001;
					Результат5                     = Результат5          - Области.П000021026001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			// Убытки прошлых лет распределены. Теперь распределяем убытки текущего периода:
			Если Результат5 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021018001.Значение = Мин(Результат5, -Результат4);
					Результат4 = Результат4 + Области.П000021018001;
					Результат5 = Результат5 - Области.П000021018001;
				КонецЕсли; 
				
				//Доход по разделу 5:
				Области.П000021027001 = Результат5;
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				Если Результат1 < 0 Тогда
					Области.П000021004001 = Мин(Результат4, -Результат1);
					Результат1 = Результат1 + Области.П000021004001;
					Результат4 = Результат4 - Области.П000021004001;
				КонецЕсли; 
				
				Если Результат5 < 0 Тогда
					Области.П000021025001 = Мин(Результат4, -Результат5);
					Результат5 = Результат5 + Области.П000021025001;
					Результат4 = Результат4 - Области.П000021025001;
				КонецЕсли; 
				
				//Доход по разделу 4:
				Области.П000021021001 = Результат4;
				
			КонецЕсли; 
			
			Если Результат1 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021019001 = Мин(Результат1, -Результат4);
					Результат4 = Результат4 + Области.П000021019001;
					Результат1 = Результат1 - Области.П000021019001;
				КонецЕсли; 
				
				//Доход по разделу 1:
				Области.П000021007001 = Результат1;
				
			КонецЕсли; 
			
			
			//Считаем итоги:
			// Расчет п.10 (продолжение листа З)
			РезультатП390 = ОбластиПродолжения.П000022037001 
			+ Области.П000021003001
			- Области.П000021004001 
			- Области.П000021006001;
			ОбластиПродолжения.П000022039001 = Макс(РезультатП390, 0);
			
			РезультатП400 = ОбластиПродолжения.П000022038001 //9.2
			+ Области.П000021017001 //4.3
			- Области.П000021018001 //4.4
			- Области.П000021019001 //4.5
			- Области.П000021020001 //4.6
			+ Области.П000021024001 //5.3
			- Области.П000021025001 //5.4
			- Области.П000021026001 //5.5
			;
			ОбластиПродолжения.П000022040001 = Макс(РезультатП400, 0);
			
			// Расчет п.11 (продолжение листа З)
			ОбластиПродолжения.П000022041001 = Области.П000021001001 //1.1
			+ Области.П000021008001 //2.1
			+ Области.П000021012001 //3.1
			+ Области.П000021015001 //4.1
			+ Области.П000021022001 //5.1
			+ ОбластиПродолжения.П000022028001 //6.1
			+ ОбластиПродолжения.П000022031001 //7.1
			+ ОбластиПродолжения.П000022034001 //8.1
			;
			ОбластиПродолжения.П000022042001 = Области.П000021007001 //1.7
			+ Области.П000021011001 //2.4
			+ Области.П000021014001 //3.3
			+ Области.П000021021001 //4.7
			+ Области.П000021027001 //5.6
			+ ОбластиПродолжения.П000022030001 //6.3
			+ ОбластиПродолжения.П000022033001 //7.3
			+ ОбластиПродолжения.П000022036001 //8.3
			;
			ОбластиПродолжения.П000022043001 = ОбластиПродолжения.П000022041001 - ОбластиПродолжения.П000022042001;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ЛистИ" Тогда
		
		
		РасчетыРаздела = ПолучитьСуммуДоходаДляРасчетаЛистаИ(Форма);
		
		Если ОбновитьТабличныйДокумент Тогда
			
			мЛистИ = Форма.ТабличныйДокумент;
			
			//1.11 - факт.расходы, но не более 2-х млн.
			мЛистИ.Области.П000024011004.Значение = Мин(мЛистИ.Области.П000024011004.Значение, 2000000);
			
			//2.1 - вычеты по стоимости, принятые в прошлых периодах:
			мЛистИ.Области.П000024013004.Значение = мЛистИ.Области.П000024014004.Значение + мЛистИ.Области.П000024015004.Значение;
			//2.1 - вычеты по процентам, принятые в прошлых периодах:
			мЛистИ.Области.П000024016004.Значение = мЛистИ.Области.П000024017004.Значение + мЛистИ.Области.П000024018004.Значение;
			// Остаток по расходам, перешедший с прошлых периодов:
			мЛистИ.Области.П000024019004.Значение = Макс(0, мЛистИ.Области.П000024011004.Значение - мЛистИ.Области.П000024013004.Значение);
			
			//2.7 Налоговая база за минусом вычетов:
			НалоговаяБаза = РасчетыРаздела.НалоговаяБазаБезЛистаИ 
			- мЛистИ.Области.П000024021004.Значение - мЛистИ.Области.П000024022004.Значение; //за минусом И-2.5 и И-2.6
			Если мЛистИ.Области.П000024011004.Значение > 0
				ИЛИ мЛистИ.Области.П000024012004.Значение > 0 Тогда
				
				мЛистИ.Области.П000024023004.Значение = Макс(0, НалоговаяБаза);
				
				//2.10 Остаток вычета по стоимости, переходящий на следующий период
				мЛистИ.Области.П000024026004.Значение = мЛистИ.Области.П000024011004.Значение 
				- мЛистИ.Области.П000024013004.Значение - мЛистИ.Области.П000024021004.Значение - мЛистИ.Области.П000024024004.Значение;
				//2.11 Остаток вычета по %, переходящий на следующий период
				мЛистИ.Области.П000024027004.Значение = мЛистИ.Области.П000024012004.Значение + мЛистИ.Области.П000024020004.Значение
				- мЛистИ.Области.П000024022004.Значение - мЛистИ.Области.П000024025004.Значение;
			Иначе
				мЛистИ.Области.П000024023004.Значение = 0;
				мЛистИ.Области.П000024026004.Значение = 0;
				мЛистИ.Области.П000024027004.Значение = 0;
			КонецЕсли; 
			
		Иначе
			
			мЛистИ = Форма["СтруктураДанныхЛистИ"];
			
			//1.11 - факт.расходы, но не более 2-х млн.
			мЛистИ.П000024011004 = Мин(мЛистИ.П000024011004, 2000000);
			
			//2.1 - вычеты по стоимости, принятые в прошлых периодах:
			мЛистИ.П000024013004 = мЛистИ.П000024014004 + мЛистИ.П000024015004;
			//2.1 - вычеты по процентам, принятые в прошлых периодах:
			мЛистИ.П000024016004 = мЛистИ.П000024017004 + мЛистИ.П000024018004;
			// Остаток по расходам, перешедший с прошлых периодов:
			мЛистИ.П000024019004 = Макс(0, мЛистИ.П000024011004 - мЛистИ.П000024013004);
			
			//2.7 Налоговая база за минусом вычетов:
			НалоговаяБаза = РасчетыРаздела.НалоговаяБазаБезЛистаИ 
			- мЛистИ.П000024021004 - мЛистИ.П000024022004; //за минусом И-2.5 и И-2.6
			Если мЛистИ.П000024011004 > 0
				ИЛИ мЛистИ.П000024012004 > 0 Тогда
				
				мЛистИ.П000024023004 = Макс(0, НалоговаяБаза);
				
				//2.10 Остаток вычета по стоимости, переходящий на следующий период
				мЛистИ.П000024026004 = мЛистИ.П000024011004 
				- мЛистИ.П000024013004 - мЛистИ.П000024021004 - мЛистИ.П000024024004;
				//2.11 Остаток вычета по %, переходящий на следующий период
				мЛистИ.П000024027004 = мЛистИ.П000024012004 + мЛистИ.П000024020004
				- мЛистИ.П000024022004 - мЛистИ.П000024025004;
			Иначе
				мЛистИ.П000024023004 = 0;
				мЛистИ.П000024026004 = 0;
				мЛистИ.П000024027004 = 0;
			КонецЕсли; 
			
	КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1" Тогда
		
		
		Если Форма.СтруктураРеквизитовФормы.мСтатусНалогоплательщика <> 1 И ОбновитьТабличныйДокумент Тогда
			ОчиститьТабличноеПоле(Форма, ИмяРаздела);
		Иначе
			
			РасчетыРаздела = ПолучитьСуммуДоходаДляРасчетаЛистаИ(Форма);
			
			Если ОбновитьТабличныйДокумент Тогда
				мРаздел1 = Форма.ТабличныйДокумент;
				
				мРаздел1.Области.П000010001003.Значение = РасчетыРаздела.ОбщаяСуммаДохода;
				мРаздел1.Области.П000010002003.Значение = РасчетыРаздела.НеоблагаемаяСуммаДохода;
				мРаздел1.Области.П000010003003.Значение = РасчетыРаздела.ОблагаемаяСуммаДохода;
				мРаздел1.Области.П000010004003.Значение = Окр( РасчетыРаздела.ВычетыБезЛистаИ + РасчетыРаздела.ВычетыЛистаИ, 2);
				мРаздел1.Области.П000010005003.Значение = РасчетыРаздела.НалоговаяБазаСЛистомИ;
				
				мРаздел1.Области.П000010006003.Значение = Окр( РасчетыРаздела.НалоговаяБазаСЛистомИ * 0.13, 0);
				
				мРаздел1.Области.П000010007003.Значение = РасчетыРаздела.Колонка070;
				мРаздел1.Области.П000010007503.Значение = РасчетыРаздела.Колонка075;
				мРаздел1.Области.П000010008003.Значение = РасчетыРаздела.Колонка080;
				мРаздел1.Области.П000010009003.Значение = РасчетыРаздела.Колонка090;
				
				УплаченныйНалог = РасчетыРаздела.Колонка070 + РасчетыРаздела.Колонка075 + РасчетыРаздела.Колонка080;
				Если мРаздел1.Области.П000010006003.Значение > УплаченныйНалог + РасчетыРаздела.Колонка090 Тогда
					мРаздел1.Области.П000010010003.Значение = 0;
					мРаздел1.Области.П000010011003.Значение = мРаздел1.Области.П000010006003.Значение - УплаченныйНалог - РасчетыРаздела.Колонка090;
				Иначе
					мРаздел1.Области.П000010010003.Значение = УплаченныйНалог - мРаздел1.Области.П000010006003.Значение;
					мРаздел1.Области.П000010011003.Значение = 0;
				КонецЕсли; 
				
			Иначе
				
				мРаздел1 = Форма["СтруктураДанныхРаздел1"];
				
				мРаздел1.П000010001003 = РасчетыРаздела.ОбщаяСуммаДохода;
				мРаздел1.П000010002003 = РасчетыРаздела.НеоблагаемаяСуммаДохода;
				мРаздел1.П000010003003 = РасчетыРаздела.ОблагаемаяСуммаДохода;
				мРаздел1.П000010004003 = Окр( РасчетыРаздела.ВычетыБезЛистаИ + РасчетыРаздела.ВычетыЛистаИ, 2);
				мРаздел1.П000010005003 = РасчетыРаздела.НалоговаяБазаСЛистомИ;
				мРаздел1.П000010006003 = Окр( РасчетыРаздела.НалоговаяБазаСЛистомИ * 0.13, 0);
				
				мРаздел1.П000010007003 = РасчетыРаздела.Колонка070;
				мРаздел1.П000010007503 = РасчетыРаздела.Колонка075;
				мРаздел1.П000010008003 = РасчетыРаздела.Колонка080;
				мРаздел1.П000010009003 = РасчетыРаздела.Колонка090;
				
				УплаченныйНалог = РасчетыРаздела.Колонка070 + РасчетыРаздела.Колонка075 + РасчетыРаздела.Колонка080;
				Если мРаздел1.П000010006003 > УплаченныйНалог + РасчетыРаздела.Колонка090 Тогда
					мРаздел1.П000010010003 = 0;
					мРаздел1.П000010011003 = мРаздел1.П000010006003 - УплаченныйНалог - РасчетыРаздела.Колонка090;
				Иначе
					мРаздел1.П000010010003 = УплаченныйНалог - мРаздел1.П000010006003;
					мРаздел1.П000010011003 = 0;
				КонецЕсли; 
				
			КонецЕсли;
			
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		
		Если Форма.СтруктураРеквизитовФормы.мСтатусНалогоплательщика <> 2 И ОбновитьТабличныйДокумент Тогда
			ОчиститьТабличноеПоле(Форма, ИмяРаздела);
		Иначе
			
			Колонка010 = 0;	//А-2.1
			Колонка040 = 0;	//З1-12.3
			Колонка060 = 0;	//А-2.2
			Колонка070 = 0;	//А-2.3
			
			ПромТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов["ЛистА"];
			ПромТаблицаРаздела = Форма[ПромТаблицаРаздела];
			
			Для Каждого Страница Из ПромТаблицаРаздела Цикл
				Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")  И Тип(Страница.Данные) <> Тип("СписокЗначений")) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Страница.Данные.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Данные = Страница.Данные[0].Значение;
				
				Если Данные.СтавкаНалога = 30 Тогда
					Колонка010 = Колонка010 + ?(Данные.Свойство("П000070008001"), Данные.П000070008001, 0);
					Колонка060 = Колонка060 + ?(Данные.Свойство("П000070010001"), Данные.П000070010001, 0);
					Колонка070 = Колонка070 + ?(Данные.Свойство("П000070011001"), Данные.П000070011001, 0);
				КонецЕсли;
			КонецЦикла;
			
			Колонка040 = Форма.СтруктураДанныхЛистЗПродолжение.П000022036001;
			
			ТаблицаЛистГ2 = Форма["ТаблицаСтраницыЛистГ2"];
			мЛистГ2 = ТаблицаЛистГ2[ТаблицаЛистГ2.Количество() - 1].Данные[0].Значение;
			
			мЛистГ1 = Форма["СтруктураДанныхЛистГ1"];
			
			Если ОбновитьТабличныйДокумент Тогда
				
				мРаздел2 = Форма.ТабличныйДокумент;
				
				мРаздел2.Области.П000020001003.Значение = Колонка010;
				
				мЛистГ2_П000010207001 = Неопределено;
				
				Если НЕ мЛистГ2.Свойство("П000010207001", мЛистГ2_П000010207001) Тогда
					
					мЛистГ2_П000010207001 = 0;
					
				КонецЕсли;
				
				мРаздел2.Области.П000020002003.Значение = мЛистГ1.П000010116004 + мЛистГ2_П000010207001;
				
				мРаздел2.Области.П000020004003.Значение = Колонка040;
				
				мРаздел2.Области.П000020006003.Значение = Колонка060;
				
				мРаздел2.Области.П000020007003.Значение = Колонка070;
				
				мРаздел2.Области.П000020003003.Значение = Окр( мРаздел2.Области.П000020001003.Значение, 2)
				- Окр( мРаздел2.Области.П000020002003.Значение, 2);
				
				мРаздел2.Области.П000020005003.Значение = Макс(0,Окр( мРаздел2.Области.П000020003003.Значение, 2)
				- Окр( мРаздел2.Области.П000020004003.Значение, 2));
				
				
				мРаздел2.Области.П000020008003.Значение = Макс(0,
				Окр( мРаздел2.Области.П000020007003.Значение, 2) - Окр( мРаздел2.Области.П000020006003.Значение, 2));
				
				мРаздел2.Области.П000020009003.Значение = Макс(0,
				Окр( мРаздел2.Области.П000020006003.Значение, 2) - Окр( мРаздел2.Области.П000020007003.Значение, 2));
			Иначе
				
				мРаздел2 = Форма["СтруктураДанныхРаздел2"];
				
				мРаздел2.П000020001003 = Колонка010;
				
				мЛистГ2_П000010207001 = Неопределено;
				
				Если НЕ мЛистГ2.Свойство("П000010207001", мЛистГ2_П000010207001) Тогда
					
					мЛистГ2_П000010207001 = 0;
					
				КонецЕсли;
				
				мРаздел2.П000020002003 = мЛистГ1.П000010116004 + мЛистГ2_П000010207001;
				
				мРаздел2.П000020004003 = Колонка040;
				
				мРаздел2.П000020006003 = Колонка060;
				
				мРаздел2.П000020007003 = Колонка070;
				
				мРаздел2.П000020003003 = Окр( мРаздел2.П000020001003, 2)
				- Окр( мРаздел2.П000020002003, 2);
				
				мРаздел2.П000020005003 = Макс(0,Окр( мРаздел2.П000020003003, 2)
				- Окр( мРаздел2.П000020004003, 2));
				
				
				мРаздел2.П000020008003 = Макс(0,
				Окр( мРаздел2.П000020007003, 2) - Окр( мРаздел2.П000020006003, 2));
				
				мРаздел2.П000020009003 = Макс(0,
				Окр( мРаздел2.П000020006003, 2) - Окр( мРаздел2.П000020007003, 2));
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		
		Колонка010 = 0;	// А-2.1 + Б-2.1
		Колонка020 = 0; // Г2-2
		Колонка040 = 0; // А-2.3 + Б-2.3
		Колонка050 = 0; // А-2.4
		Колонка060 = 0; // Г3-2
		Колонка080 = 0; // Б-2.4
		
		ПромТаблицаРаздела = Форма["таблицаСтраницыЛистА"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")  И Тип(Страница.Данные) <> Тип("СписокЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаБлока = Страница.Данные;
			Для Каждого Зап Из ТаблицаБлока Цикл
				Данные = Зап.Значение;
				
				Если Данные.СтавкаНалога = 35 Тогда
					Колонка010 = Колонка010 + ?(Данные.Свойство("П000070008001"), Данные.П000070008001, 0);
					Колонка040 = Колонка040 + ?(Данные.Свойство("П000070010001"), Данные.П000070010001, 0);
					Колонка050 = Колонка050 + ?(Данные.Свойство("П000070011001"), Данные.П000070011001, 0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПромТаблицаРаздела = Форма["таблицаСтраницыЛистБ"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")  И Тип(Страница.Данные) <> Тип("СписокЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаБлока = Страница.Данные;
			Для Каждого Зап Из ТаблицаБлока Цикл
				Данные = Зап.Значение;
				
				Если Данные.СтавкаНалога = 35 Тогда
					Колонка010 = Колонка010 + ?(Данные.Свойство("П000080001501"), Данные.П000080001501, 0);
					Колонка040 = Колонка040 + ?(Данные.Свойство("П000080001701"), Данные.П000080001701, 0);
					Колонка080 = Колонка080 + ?(Данные.Свойство("П000080001801"), Данные.П000080001801, 0);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаЛистГ2 = Форма["ТаблицаСтраницыЛистГ2"];
		мЛистГ2 = ТаблицаЛистГ2[ТаблицаЛистГ2.Количество() - 1].Данные[0].Значение;
		
		ТаблицаЛистГ3 = Форма["ТаблицаСтраницыЛистГ3"];
		мЛистГ3 = ТаблицаЛистГ3[ТаблицаЛистГ3.Количество() - 1].Данные[0].Значение;
		
		Если ОбновитьТабличныйДокумент Тогда
		
			мРаздел3 = Форма.ТабличныйДокумент;
			
			мРаздел3.Области.П000030001003.Значение = Колонка010;
			
			мЛистГ2_П000010207001 = Неопределено;
			
			Если НЕ мЛистГ2.Свойство("П000010207001", мЛистГ2_П000010207001) Тогда
				
				мЛистГ2_П000010207001 = 0;
				
			КонецЕсли;
			
			мРаздел3.Области.П000030002003.Значение = Окр( мЛистГ2_П000010207001, 2);
			
			мРаздел3.Области.П000030003003.Значение = Окр( мРаздел3.Области.П000030001003.Значение, 2)
			- Окр( мРаздел3.Области.П000030002003.Значение, 2);
			
			мРаздел3.Области.П000030004003.Значение = Колонка040;
			
			мРаздел3.Области.П000030005003.Значение = Колонка050;
			
			мРаздел3.Области.П000030005103.Значение = Окр( мЛистГ3.П000027207001, 2);
			
			мРаздел3.Области.П000030006003.Значение = Колонка080;
			
			мРаздел3.Области.П000030007003.Значение = Макс(0,(Окр( мРаздел3.Области.П000030005003.Значение, 2)
			+ Окр( мРаздел3.Области.П000030005103.Значение, 2)
			- Окр( мРаздел3.Области.П000030004003.Значение, 2)));
			
			мРаздел3.Области.П000030008003.Значение = Макс(0,Окр( мРаздел3.Области.П000030004003.Значение, 2)
			-(Окр( мРаздел3.Области.П000030005003.Значение, 2)
			+ Окр( мРаздел3.Области.П000030005103.Значение, 2)
			+ Окр( мРаздел3.Области.П000030006003.Значение, 2)));
		Иначе
			
			мРаздел3 = Форма["СтруктураДанныхРаздел3"];
			
			мРаздел3.П000030001003 = Колонка010;
				
			мЛистГ2_П000010207001 = Неопределено;
			
			Если НЕ мЛистГ2.Свойство("П000010207001", мЛистГ2_П000010207001) Тогда
				
				мЛистГ2_П000010207001 = 0;
				
			КонецЕсли;
			
			мРаздел3.П000030002003 = Окр( мЛистГ2_П000010207001, 2);
			
			мРаздел3.П000030003003 = Окр( мРаздел3.П000030001003, 2)
			- Окр( мРаздел3.П000030002003, 2);
			
			мРаздел3.П000030004003 = Колонка040;
			
			мРаздел3.П000030005003 = Колонка050;
			
			мЛистГ3_П000027207001 = 0;

			Если мЛистГ3.Свойство("П000027207001", мЛистГ3_П000027207001) Тогда 
				мРаздел3.П000030005103 = Окр( мЛистГ3_П000027207001, 2);
			КонецЕсли;
		
			мРаздел3.П000030006003 = Колонка080;
			
			мРаздел3.П000030007003 = Макс(0,(Окр( мРаздел3.П000030005003, 2)
			+ Окр( мРаздел3.П000030005103, 2)
			- Окр( мРаздел3.П000030004003, 2)));
			
			мРаздел3.П000030008003 = Макс(0,Окр( мРаздел3.П000030004003, 2)
			-(Окр( мРаздел3.П000030005003, 2)
			+ Окр( мРаздел3.П000030005103, 2)
			+ Окр( мРаздел3.П000030006003, 2)));
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		
		Колонка010 = 0;	// А-2.1 + Б-2.1
		Колонка020 = 0; // А-2.1 + Б-2.1
		Колонка030 = 0; // А-2.2 + Б-2.3
		Колонка040 = 0; // А-2.3
		Колонка060 = 0; // Б-2.4
		
		ПромТаблицаРаздела = Форма["таблицаСтраницыЛистА"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")  И Тип(Страница.Данные) <> Тип("СписокЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаБлока = Страница.Данные;
			Для Каждого Зап Из ТаблицаБлока Цикл
				Данные = Зап.Значение;
				
				Если Данные.СтавкаНалога = 9 Тогда
					Колонка010 = Колонка010 + ?(Данные.Свойство("П000070008001"), Данные.П000070008001, 0);
					Колонка020 = Колонка020 + ?(Данные.Свойство("П000070008001"), Данные.П000070008001, 0);
					Колонка030 = Колонка030 + ?(Данные.Свойство("П000070010001"), Данные.П000070010001, 0);
					Колонка040 = Колонка040 + ?(Данные.Свойство("П000070011001"), Данные.П000070011001, 0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПромТаблицаРаздела = Форма["таблицаСтраницыЛистБ"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")  И Тип(Страница.Данные) <> Тип("СписокЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаБлока = Страница.Данные;
			Для Каждого Зап Из ТаблицаБлока Цикл
				Данные = Зап.Значение;
				
				Если Данные.СтавкаНалога = 9 Тогда
					Колонка010 = Колонка010 + ?(Данные.Свойство("П000080001501"), Данные.П000080001501, 0);
					Колонка020 = Колонка020 + ?(Данные.Свойство("П000080001501"), Данные.П000080001501, 0);
					Колонка030 = Колонка030 + ?(Данные.Свойство("П000080001701"), Данные.П000080001701, 0);
					Колонка060 = Колонка060 + ?(Данные.Свойство("П000080001801"), Данные.П000080001801, 0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если ОбновитьТабличныйДокумент Тогда
			
			мРаздел4 = Форма.ТабличныйДокумент;
		
		мРаздел4.Области.П000040001003.Значение = Колонка010;
		
		мРаздел4.Области.П000040002003.Значение = Колонка020;
		
		мРаздел4.Области.П000040003003.Значение = Колонка030;
		
		мРаздел4.Области.П000040004003.Значение = Колонка040;
		
		мРаздел4.Области.П000040005003.Значение = Колонка060;
		
		мРаздел4.Области.П000040006003.Значение = Макс(0,
		Окр( мРаздел4.Области.П000040004003.Значение, 2) - Окр( мРаздел4.Области.П000040003003.Значение, 2));
		
		мРаздел4.Области.П000040007003.Значение = Макс(0,
		Окр( мРаздел4.Области.П000040003003.Значение, 2) 
		- Окр( мРаздел4.Области.П000040004003.Значение, 2)
		+ Окр( мРаздел4.Области.П000040005003.Значение, 2));
		
	Иначе
			мРаздел4 = Форма["СтруктураДанныхРаздел4"];
		
		мРаздел4.П000040001003 = Колонка010;
		
		мРаздел4.П000040002003 = Колонка020;
		
		мРаздел4.П000040003003 = Колонка030;
		
		мРаздел4.П000040004003 = Колонка040;
		
		мРаздел4.П000040005003 = Колонка060;
		
		мРаздел4.П000040006003 = Макс(0,
		Окр( мРаздел4.П000040004003, 2) - Окр( мРаздел4.П000040003003, 2));
		
		мРаздел4.П000040007003 = Макс(0,
		Окр( мРаздел4.П000040003003, 2) 
		- Окр( мРаздел4.П000040004003, 2)
		+ Окр( мРаздел4.П000040005003, 2));
		КонецЕсли;
		
		
	ИначеЕсли ИмяРаздела = "Раздел5" Тогда
		
		Колонка010 = 0; // А-2.1
		Колонка020 = 0; // А-2.2
		Колонка030 = 0; // А-2.3
		Колонка040 = 0; // А-2.4
		
		ПромТаблицаРаздела = Форма["таблицаСтраницыЛистА"];
		Для Каждого Страница Из ПромТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")  И Тип(Страница.Данные) <> Тип("СписокЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаБлока = Страница.Данные;
			Для Каждого Зап Из ТаблицаБлока Цикл
				Данные = Зап.Значение;
				
				
				Если Данные.СтавкаНалога = 15 Тогда
					Колонка010 = Колонка010 + ?(Данные.Свойство("П000070008001"), Данные.П000070008001, 0);
					Колонка020 = Колонка020 + ?(Данные.Свойство("П000070008001"), Данные.П000070008001, 0);
					Колонка030 = Колонка030 + ?(Данные.Свойство("П000070010001"), Данные.П000070010001, 0);
					Колонка040 = Колонка040 + ?(Данные.Свойство("П000070011001"), Данные.П000070011001, 0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если ОбновитьТабличныйДокумент Тогда
			
			мРаздел5 = Форма.ТабличныйДокумент;
			
			мРаздел5.Области.П000050001003.Значение = Колонка010;
			
			мРаздел5.Области.П000050002003.Значение = Колонка020;
			
			мРаздел5.Области.П000050003003.Значение = Колонка030;
			
			мРаздел5.Области.П000050004003.Значение = Колонка040;
			
			мРаздел5.Области.П000050005003.Значение = Макс(0,
			Окр( мРаздел5.Области.П000050004003.Значение, 2) 
			- Окр( мРаздел5.Области.П000050003003.Значение, 2));
			
			мРаздел5.Области.П000050006003.Значение = Макс(0,
			Окр( мРаздел5.Области.П000050003003.Значение, 2) 
			- Окр( мРаздел5.Области.П000050004003.Значение, 2));
			
		Иначе
			
			мРаздел5 = Форма["СтруктураДанныхРаздел5"];
			
			мРаздел5.П000050001003 = Колонка010;
			
			мРаздел5.П000050002003 = Колонка020;
			
			мРаздел5.П000050003003 = Колонка030;
			
			мРаздел5.П000050004003 = Колонка040;
			
			мРаздел5.П000050005003 = Макс(0,
			Окр( мРаздел5.П000050004003, 2) 
			- Окр( мРаздел5.П000050003003, 2));
			
			мРаздел5.П000050006003 = Макс(0,
			Окр( мРаздел5.П000050003003, 2) 
			- Окр( мРаздел5.П000050004003, 2));
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		// выполняем пересчет всех страниц в определенном порядке:
		Расчет(Форма, "ЛистА");
		Расчет(Форма, "ЛистБ");
		Расчет(Форма, "ЛистВ");
		Расчет(Форма, "ЛистГ1Продолжение");
		Расчет(Форма, "ЛистГ1");
		Расчет(Форма, "ЛистГ2");
		Расчет(Форма, "ЛистГ3");
		Расчет(Форма, "ЛистД");
		Расчет(Форма, "ЛистЕ");
		Расчет(Форма, "ЛистЖ1");
		Расчет(Форма, "ЛистЖ3");
		Расчет(Форма, "ЛистЖ2");
		Расчет(Форма, "ЛистЗ");
		Расчет(Форма, "ЛистЗПродолжение");
		Расчет(Форма, "ЛистИ");
		
		Расчет(Форма, "Раздел1");
		Расчет(Форма, "Раздел2");
		Расчет(Форма, "Раздел3");
		Расчет(Форма, "Раздел4");
		Расчет(Форма, "Раздел5");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Используется и для заполнения "Раздела 1", и для расчетов вычетов "Листа И"
Функция ПолучитьСуммуДоходаДляРасчетаЛистаИ(Форма)
	Перем Результат;
	
	Результат = Новый Структура;
	//Следующие элементы используются и для раздела 1 и для листа И:
	Результат.Вставить("ОбщаяСуммаДохода",         0);  //Колонка010 	А-2.1 + Б-2.1 + В-2.1
	Результат.Вставить("НеоблагаемаяСуммаДохода",  0);  //Колонка020 	Г1-1.9
	Результат.Вставить("ОблагаемаяСуммаДохода",    0);	//Колонка030 = Колонка010 - Колонка020
	Результат.Вставить("ВычетыБезЛистаИ",          0);	//Колонка040 (Часть БЕЗ листа И) В-3.2 + Д-6.1 + Е-4 + Ж1-2.8 + Ж2-3 + З1-12.3 + З2-7.3
	Результат.Вставить("ВычетыЛистаИ",             0);	//Колонка040 (Часть ТОЛЬКО лист И) И-2.5 + И-2.6 + И-2.8 + И-2.9 
	Результат.Вставить("НалоговаяБазаБезЛистаИ",   0);	//Колонка050 (без учета Листа И): Колонка030 - Колонка040 (Часть БЕЗ листа И)
	Результат.Вставить("НалоговаяБазаСЛистомИ",    0);  //Колонка050 (Полностью): Колонка030 - Колонка040
	
	//Остальные элементы используются только для раздела 1
	Результат.Вставить("Колонка070", 0);	// А-2.3
	Результат.Вставить("Колонка075", 0);	// В-3.4
	Результат.Вставить("Колонка080", 0);    // А-2.4
	Результат.Вставить("Колонка090", 0);    // Б-2.4
	
	ПромТаблицаРаздела = Форма["таблицаСтраницыЛистА"];
	Для Каждого Страница Из ПромТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура") И Тип(Страница.Данные) <> Тип("СписокЗначений")) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаБлока = Страница.Данные;
		Для Каждого Зап Из ТаблицаБлока Цикл
			Данные = Зап.Значение;
			
			Если Данные.СтавкаНалога = 13 Тогда
				Результат.ОбщаяСуммаДохода = Результат.ОбщаяСуммаДохода + Окр( ?(Данные.Свойство("П000070008001"), Данные.П000070008001, 0), 2);
				Результат.Колонка070 = Результат.Колонка070 + Окр( ?(Данные.Свойство("П000070011001"), Данные.П000070011001, 0), 2);
				Результат.Колонка080 = Результат.Колонка080 + Окр( ?(Данные.Свойство("П000070012001"), Данные.П000070012001, 0), 2);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПромТаблицаРаздела = Форма["таблицаСтраницыЛистБ"];
	Для Каждого Страница Из ПромТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура") И Тип(Страница.Данные) <> Тип("СписокЗначений")) Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаБлока = Страница.Данные;
		Для Каждого Зап Из ТаблицаБлока Цикл
			Данные = Зап.Значение;
			Если Данные.СтавкаНалога = 13 Тогда
				Результат.ОбщаяСуммаДохода = Результат.ОбщаяСуммаДохода + Окр( ?(Данные.Свойство("П000080001501"), Данные.П000080001501, 0), 2);
				Результат.Колонка090 = Результат.Колонка090 + Окр( ?(Данные.Свойство("П000080001801"), Данные.П000080001801, 0), 2);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаЛистВ = Форма["ТаблицаСтраницыЛистВ"];
	мЛистВ = ТаблицаЛистВ[ТаблицаЛистВ.Количество() - 1].Данные[0].Значение;
	
	Результат.ОбщаяСуммаДохода = Результат.ОбщаяСуммаДохода + Окр( ?(мЛистВ.Свойство("П000090001101"), мЛистВ.П000090001101, 0), 2);
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + Окр( ?(мЛистВ.Свойство("П000090001201"), мЛистВ.П000090001201, 0), 2);
	Результат.Колонка075 = Результат.Колонка075 + Окр( ?(мЛистВ.Свойство("П000090001401"), мЛистВ.П000090001401, 0), 2);
	
	Результат.НеоблагаемаяСуммаДохода = Окр( ?(Форма.СтруктураДанныхЛистГ1.Свойство("П000010116004"), Форма.СтруктураДанныхЛистГ1.П000010116004, 0), 2);
	Результат.ОблагаемаяСуммаДохода   = Окр( Результат.ОбщаяСуммаДохода - Результат.НеоблагаемаяСуммаДохода, 2);
	
	//Получим данные связанных разделов для суммы вычетов (без листа И)
	ПромТаблицаРаздела = Форма["таблицаСтраницыЛистД"];
	Для Каждого Страница Из ПромТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура") И Тип(Страница.Данные) <> Тип("СписокЗначений")) Тогда
			Продолжить;
		КонецЕсли;
		Данные = Страница.Данные[0].Значение;
		Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + Окр( ?(Данные.Свойство("П000012001110"), Данные.П000012001110, 0), 2);
	КонецЦикла;
	
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + Форма.СтруктураДанныхЛистЕ.П000014019002;
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + Форма.СтруктураДанныхЛистЖ1.П000020022004;
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + Форма.СтруктураДанныхЛистЖ2.П000021012004;
	Результат.ВычетыБезЛистаИ = Результат.ВычетыБезЛистаИ + Форма.СтруктураДанныхЛистЗПродолжение.П000022043001;
	
	Результат.НалоговаяБазаБезЛистаИ = Результат.ОблагаемаяСуммаДохода - Результат.ВычетыБезЛистаИ;
	
	Результат.ВычетыЛистаИ = Результат.ВычетыЛистаИ + Форма.СтруктураДанныхЛистИ.П000024021004; //И-2.5
	Результат.ВычетыЛистаИ = Результат.ВычетыЛистаИ + Форма.СтруктураДанныхЛистИ.П000024022004; //И-2.6
	Результат.ВычетыЛистаИ = Результат.ВычетыЛистаИ + Форма.СтруктураДанныхЛистИ.П000024024004; //И-2.8
	Результат.ВычетыЛистаИ = Результат.ВычетыЛистаИ + Форма.СтруктураДанныхЛистИ.П000024025004; //И-2.9
	
	Результат.НалоговаяБазаСЛистомИ = Макс(0, Результат.ОблагаемаяСуммаДохода - Результат.ВычетыБезЛистаИ - Результат.ВычетыЛистаИ);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначенияСтруктурыИзСтроки(Данные, ТаблицаБлока, СтрокаТаблицыБлока)
	
	НомерСтрокиТаблицы = ТаблицаБлока.Индекс(СтрокаТаблицыБлока)+1;
	СуффиксСтроки = Формат(НомерСтрокиТаблицы, "ЧДЦ=0; ЧРГ=");
	Для Каждого ЗначениеДанных Из Данные Цикл
		Поз_ = СтрНайти(ЗначениеДанных.Ключ,"_");
		Если  Поз_ > 0 Тогда
			Ключ 	= Лев(ЗначениеДанных.Ключ,Поз_ - 1);
			НомСтр 	= Число(СтрЗаменить(ЗначениеДанных.Ключ,Ключ + "_",""));
			Если НомСтр = НомерСтрокиТаблицы Тогда
				ЗначениеДанных = СтрокаТаблицыБлока[Ключ];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

// РасчетВСтруктуре
// Параметры:
//  ИмяЛиста              - Имя листа.
//  РассчитатьСПризнакомСх - Какой из листов нужно перерассчитывать, с признаком с/х или без. Булево.
//
&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста, ИмяПоказателя="", АвторасчетПослеАвтозаполнения = Ложь)
	
	Перем ТаблицаБлока, ТаблицаРаздела;
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	
	НомерТекущейСтраницы = 0;
	ОбновитьТабличныйДокумент = Ложь;
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
		ОбновитьТабличныйДокумент 	= Истина;
		НомерТекущейСтраницы 		= Форма.СтруктураРеквизитовФормы.НомерТекущейСтраницы;
	КонецЕсли;

	
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяЛиста,ТаблицаРаздела);
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	
	Если ИмяЛиста = "ЛистА" 
		Или ИмяЛиста = "ЛистБ" Тогда                              

		Для Каждого Ставка Из Форма.мСтавкиНалога Цикл
			ТекСтавкаНалога = Число(?(Ставка.Код = "",0,Ставка.Код));
			//Итоги Листа А в разрезе ставок
			Колонка080 = 0;
			Колонка090 = 0;
			Колонка100 = 0;
			Колонка110 = 0;
			
			//Итоги Листа Б в разрезе ставок
			Колонка150 = 0;
			Колонка160 = 0;
			Колонка170 = 0;
			Колонка180 = 0;
			
			Для Каждого Страница Из ТаблицаРаздела Цикл
				Если (Страница.Данные = Неопределено) 
					ИЛИ (ТипЗнч(Страница.Данные) <> Тип("Структура") И ТипЗнч(Страница.Данные) <> Тип("СписокЗначений")) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Страница.Данные.Количество() = 0  
					Или Страница.ДанныеДопСтрок.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Данные = Страница.Данные[0].Значение;
				
				СтавкаНалога = ?(ЗначениеЗаполнено(Данные.СтавкаНалога), Число(Данные.СтавкаНалога), 0);
				
				Если СтавкаНалога <> ТекСтавкаНалога Тогда
					Продолжить;	
				КонецЕсли;	

				Если ИмяЛиста = "ЛистА" Тогда
					
					Если ОбновитьТабличныйДокумент И ТаблицаРаздела.Индекс(Страница) + 1 = НомерТекущейСтраницы Тогда
						//Итоги по текущему листу
						Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыА, ТаблицаБлока);
						
						ТаблицаБлока = Форма[ТаблицаБлока];
						Для каждого Зап Из ТаблицаБлока Цикл
							//аккумулирование общих итогов
							Колонка080 = Колонка080 + Зап.П000070001005;
							Колонка090 = Колонка090 + Зап.П000070001006;
							Колонка100 = Колонка100 + Зап.П000070001007;
							Колонка110 = Колонка110 + Зап.П000070001008;
						КонецЦикла;
					Иначе
						
						ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
						
						Если ТаблицаБлока <> Неопределено Тогда
							Для каждого Зап Из ТаблицаБлока Цикл
								
								СуффиксСтроки = Формат(ТаблицаБлока.Индекс(Зап)+1, "ЧДЦ=0; ЧРГ=");
								// при необходимости выполняем автоматические расчеты:
								Если ЗначениеЗаполнено(Зап.П000070001005) И СтавкаНалога > 0 Тогда
									СуммаНалогаПоСтроке = Окр(Зап.П000070001005 * СтавкаНалога / 100, 0 ,1);
									Если Зап.П000070001007 <> СуммаНалогаПоСтроке Тогда
										Зап.П000070001007 = СуммаНалогаПоСтроке;
									КонецЕсли; 
								КонецЕсли; 
								
								// заполняем итоговые значения листа:
								Колонка080 = Колонка080 + Зап.П000070001005;
								Колонка090 = Колонка090 + Зап.П000070001006;
								Колонка100 = Колонка100 + Зап.П000070001007;
								Колонка110 = Колонка110 + Зап.П000070001008;
								
								//обновляем значения в структуре данных
								ОбновитьЗначенияСтруктурыИзСтроки(Данные, ТаблицаБлока, Зап);
								
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если Данные.Свойство("П000070008001") Тогда //Есть итоговые данные
						Данные.П000070008001 = Колонка080;
						Данные.П000070009001 = Колонка090;
						Данные.П000070010001 = Колонка100;
						Данные.П000070011001 = Колонка110;
						
						// сумма налога уплаченного не должна превышать сумму налога исчисленного:
						Если Данные.П000070012001 > Колонка100  Тогда
							Данные.П000070012001 = Колонка100;
						КонецЕсли;
						//
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИмяЛиста = "ЛистБ" Тогда
					
					ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
					
					Если ТаблицаБлока <> Неопределено Тогда
						Для каждого Зап Из ТаблицаБлока Цикл
							
							//вычисляем суммы по курсу:
							Если ЗначениеЗаполнено(Зап.П000080001006) Тогда
								Зап.П000080001008 = Окр( Зап.П000080001006 * Зап.П000080001007, 2);
							ИначеЕсли ЗначениеЗаполнено(Зап.П000080001008) И ЗначениеЗаполнено(Зап.П000080001007) Тогда
								Зап.П000080001006 = Окр( Зап.П000080001008 / Зап.П000080001007, 2);
							КонецЕсли; 
							Если ЗначениеЗаполнено(Зап.П000080001010) Тогда
								Зап.П000080001012 = Окр( Зап.П000080001010 * Зап.П000080001011, 2);
							ИначеЕсли ЗначениеЗаполнено(Зап.П000080001012) И ЗначениеЗаполнено(Зап.П000080001011) Тогда
								Зап.П000080001010 = Окр( Зап.П000080001012 / Зап.П000080001011, 2);
							КонецЕсли; 
							// пересчитываем налог в РФ:
							Если ЗначениеЗаполнено(СтавкаНалога) Тогда
								Зап.П000080001013 = Окр( Зап.П000080001008 * СтавкаНалога/100, 2);
							КонецЕсли; 
							// проверяем налог к зачету:
							Если ЗначениеЗаполнено(Зап.П000080001014) Тогда
								Зап.П000080001014 = Мин(Зап.П000080001014, Зап.П000080001013, Зап.П000080001012);
							КонецЕсли; 
							
							Колонка150 = Колонка150 + Зап.П000080001008;
							Колонка160 = Колонка160 + Зап.П000080001012;
							Колонка170 = Колонка170 + Зап.П000080001013;
							Колонка180 = Колонка180 + Зап.П000080001014;
							//обновляем значения в структуре данных
							ОбновитьЗначенияСтруктурыИзСтроки(Данные, ТаблицаБлока, Зап);
							
						КонецЦикла;
					КонецЕсли;
					
					Если Данные.Свойство("П000080001501") Тогда  //Есть итоговые данные
						Данные.П000080001501 = Колонка150;
						Данные.П000080001601 = Колонка160;
						Данные.П000080001701 = Колонка170;
						Данные.П000080001801 = Колонка180;
						
						мРаздел1 = Форма["СтруктураДанныхРаздел1"];
						мРаздел1.П000010009003 = Колонка180;	

					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЦикла; //Для Каждого Страница Из ТаблицаРаздела
		КонецЦикла; //Для Каждого Ставка Из Форма.мСтавкиНалога
	Иначе
		
		Для Каждого Страница Из ТаблицаРаздела Цикл
			Если (Страница.Данные = Неопределено) 
				ИЛИ (ТипЗнч(Страница.Данные) <> Тип("Структура") И ТипЗнч(Страница.Данные)  <> Тип("СписокЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Страница.Данные.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Страница.Данные[0].Значение;
						
			Если ИмяЛиста = "ЛистД" Тогда
				
				Данные.П000012001020 = Мин(Данные.П000012001020, Данные.П000012001010);
				Данные.П000012001040 = Мин(Данные.П000012001040, Данные.П000012001030);
				Данные.П000012001060 = Мин(Данные.П000012001060, Данные.П000012001050);
				Данные.П000012001080 = Мин(Данные.П000012001080, Данные.П000012001070);
				Данные.П000012001100 = Мин(Данные.П000012001100, Данные.П000012001090);
				Данные.П000012001110 = Данные.П000012001020 + Данные.П000012001040 + Данные.П000012001060 +
				Данные.П000012001080 + Данные.П000012001100;
				
			КонецЕсли;
			
			Если ИмяЛиста = "ЛистЖ3" Тогда
				
				//Итоги только на последней странице
				Если ТаблицаРаздела.Индекс(Страница) = ТаблицаРаздела.Количество() - 1 И Данные.Свойство("П000022020001") Тогда
					
					Данные.П000022010001 = Окр( Данные.П000022008001, 2);
					Данные.П000022020001 = Окр( Данные.П000022018001, 2);
					Данные.П000022021001 = СуммаПоказателяПоВсемСтраницам(Форма, " ЛистЖ3", "П000022009001", Ложь) + СуммаПоказателяПоВсемСтраницам(Форма, " ЛистЖ3", "П000022019001", Ложь);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Если рассчитывается активный лист, то необходимо значения из структуры данных отобразить в табличном поле.
			Если Страница.АктивнаяСтраница Тогда
				ТабличныйДокумент = Форма["ТабличныйДокумент"];
				Для каждого ЭлементДанных Из Данные Цикл
					Если Лев(ЭлементДанных.Ключ, 13) = "П000070001003" Тогда //исклчение
						
						ТабличныйДокумент.Области[ЭлементДанных.Ключ].Значение = ЭлементДанных.Значение;
						
					КонецЕсли;
					
						Область = ТабличныйДокумент.Области.Найти(ЭлементДанных.Ключ);
						Если Область <> Неопределено Тогда
							Область.Значение = ЭлементДанных.Значение;
						КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			
		КонецЦикла; // Конец перебора страниц многостраничного раздела
	КонецЕсли;
КонецПроцедуры

// СуммаПоказателяПоВсемСтраницам
// Параметры:
//  ИмяСтраницы     - имя страницы декларации
//  Показатель      - показатель декларации
//  Округлять       - округлять или нет значения
//  Условия         - не обязательный параметр, задает условия, при которых будет суммироваться результат
//  Вариант         - предназначен для приложения 5 к листу 02, вариант 1 означает, все с признаком 1, вариант 2 - все остальные (обособки).
//
&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяПоВсемСтраницам(Форма, ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	
	Результат = 0;
	
	ТаблицаРаздела = Неопределено;
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные[0].Значение;
			Если ДанныеТаблПоле.Свойство(Показатель) Тогда
				//проверка экземпляра	
				Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
					//нет условий или они все выполняются
					Если Округлять Тогда
						Результат = Результат + Окр(ДанныеТаблПоле[Показатель], 2);
					Иначе
						Результат = Результат + ДанныеТаблПоле[Показатель];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела.Индекс(СтрНоваяСтраница) + 1);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницы)
	
	РасчетНаСервере(ИмяТекущейСтраницы);
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено, НомерУдаляемойСтраницы = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем МассивВариантовЗаполненияСтраниц;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если НомерУдаляемойСтраницы <> Неопределено
		И мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела)
		И мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];
		
		МассивВариантовЗаполненияСтраниц.Удалить(НомерУдаляемойСтраницы);
		
		КолСтраниц = ТаблицаСтраницРаздела.Количество();
		КолВариантов = МассивВариантовЗаполненияСтраниц.Количество();
		
		Для Инд = КолСтраниц + 1 По КолВариантов Цикл
			
			МассивВариантовЗаполненияСтраниц.Удалить(МассивВариантовЗаполненияСтраниц.Количество() - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Перем МаксимальноеКоличествоСтрокГруппы, СтруктураГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Исходное количество строк группы
	мСтруктураМаксКолвоКолонокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	
	Если КолСтрок = МаксимальноеКоличествоСтрокГруппы Тогда
		ТекстВопроса = НСтр(СтрЗаменить("ru = 'Количество строк на странице не может превышать #МаксимальноеКоличествоСтрокГруппы#. Добавить новую страницу?'","#МаксимальноеКоличествоСтрокГруппы#",МаксимальноеКоличествоСтрокГруппы));
		ДополнительныеПараметры = Новый Структура("Команда", Команда);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
	Иначе
		#Если ВебКлиент Тогда
			
			ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
			
		#Иначе
			
			ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
			
		#КонецЕсли
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх - 1;
	НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				
				ОбластьУдалитьСтроку = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяОбластиЯчейки);
				
				Если ОбластьУдалитьСтроку <> Неопределено Тогда
					
					ОбластьУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
					
					ТекТабличноеПоле.Область(ОбластьУдалитьСтроку.Верх - СдвигСтрок, ОбластьУдалитьСтроку.Лево, ОбластьУдалитьСтроку.Низ - СдвигСтрок, ОбластьУдалитьСтроку.Право).Имя  = "УдалитьСтроку" + ИмяОбластиЯчейки;
					
				КонецЕсли;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы И СтруктураГруппы.Количество() > НомерСтрокиТаблицы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх - 1;
		НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти + ВысотаСтроки - 1;  // первая область - контрол удаления строки
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				
				Для НомерГрафы = 0 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					Если НомерГрафы = 0 Тогда
						
						КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат( 1, "ЧЦ=2; ЧВН=");
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	ИначеЕсли СтруктураГруппы.Количество() > НомерСтрокиТаблицы Тогда
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		ЗначениеКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеКорректировки) Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
			ЗначениеКорректировки = 0;
		КонецЕсли;
		
		НомерКорректировки = ЗначениеКорректировки;
		СтруктураРеквизитовФормы.ВидДокумента = ?(ЗначениеКорректировки = 0, 0, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел2.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	СтруктураДанныхРаздел4.Очистить();
	СтруктураДанныхРаздел5.Очистить();
	
	СтруктураДанныхЛистГ1.Очистить();
	
	СтруктураДанныхЛистЕ.Очистить();
	СтруктураДанныхЛистЖ1.Очистить();
	СтруктураДанныхЛистЖ2.Очистить();
	СтруктураДанныхЛистЗ.Очистить();
	СтруктураДанныхЛистЗПродолжение.Очистить();
	СтруктураДанныхЛистИ.Очистить();
	
	НомерКорректировки = 0;
	ДатаПодписи = Неопределено;
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		
		ЭтаФорма[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
		
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СпециальныеОперацииПослеОчисткиЛистаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, НазванияМногостраничныхРазделовДляУдаления = "") Экспорт
	
	Если НЕ ПустаяСтрока(НазванияМногостраничныхРазделовДляУдаления) Тогда
		НазванияМнгостраничныхРазделов = Новый Структура(НазванияМногостраничныхРазделовДляУдаления);
	Иначе
		НазванияМнгостраничныхРазделов = Новый Структура;
	КонецЕсли;
	
	Для каждого СтрокаУровня1 из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		РазделАвтозаполняется = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;
		
		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;
		
		мРазделИмя = "ТабличныйДокумент";
		мРаздел    = Форма[мРазделИмя];
		Если НазванияМнгостраничныхРазделов.Свойство(НазваниеСтраницы) Тогда
			// Очистим текущий лист.
			#Если НаКлиенте Тогда
				Форма.ОчиститьТабличноеПолеНаКлиенте(НазваниеСтраницы);
			#Иначе
				Форма.ОчиститьТабличноеПолеНаСервере(НазваниеСтраницы);
			#КонецЕсли
			
			ТаблицаСтраницРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(НазваниеСтраницы, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
			
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаСтраницРаздела[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
			
			// Варианты заполнения установим в один массив. Все варианты возьмем из Эталона.
			// Цвет ячеек перерисуется в показе статика многостраничного раздела, ниже.
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(Форма, НазваниеСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;

	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры

// СпециальныеОперацииПослеОчисткиЛистаНаСервере
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
//
&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы) Экспорт
		
	РасчетНаСервере(ИмяСтраницы);
	
КонецПроцедуры

// СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы) Экспорт
		
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКурсВалютыНаДату(КодВалюты,ДатаКурса)
	
	 Валюта 	= Справочники.Валюты.НайтиПоКоду(КодВалюты);
	 Если Валюта <> Неопределено Тогда
		 Результат 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта,ДатаКурса);	
		 Возврат Результат.Курс;
	 Иначе
		 Возврат 0;
	 КонецЕсли;
	 
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
			
			ДобавитьСтраницу("");
			
		ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
			
			УдалитьСтраницу("");
			
		ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
			
			ДобавитьСтроку("");
			
		ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
			
			УдалитьСтроку("");
			
		ИначеЕсли СтрЧислоВхождений(Область.Имя, "СобратьДанные") > 0 И Область.Гиперссылка Тогда
			
			СобратьДанные("");
			
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	ИмяЯчейки = Область.Имя;
	
	//специальная обработка некоторых областей
	Если Лев(Область.Имя, 7) = "КодИМНС" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность   = Истина;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
		
	Если (Лев(ИмяЯчейки,13) = "П000080001001") Тогда //Лист Б Код ОКСМ
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор кода страны";
		
		ДополнительныеПараметры = Новый Структура("ИмяРаздела, ИмяЯчейки, Область, СтандартнаяОбработка, Элемент", ИмяРаздела, ИмяЯчейки, Область, СтандартнаяОбработка, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныМираЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		Возврат;
		
	ИначеЕсли (Лев(ИмяЯчейки,13) = "П000080001004") Тогда //Лист Б информация о валюте
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор кода валюты";
		
		ДополнительныеПараметры = Новый Структура("ИмяРаздела, ИмяЯчейки, Область, СтандартнаяОбработка, Элемент", ИмяРаздела, ИмяЯчейки, Область, СтандартнаяОбработка, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораКодаВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		Возврат;
		
	ИначеЕсли   (ИмяЯчейки = "Индекс")
		ИЛИ (ИмяЯчейки = "Регион") 
		ИЛИ (ИмяЯчейки = "Район") 
		ИЛИ (ИмяЯчейки = "Город") 
		ИЛИ (ИмяЯчейки = "НаселенныйПункт") 
		ИЛИ (ИмяЯчейки = "Улица")
		ИЛИ (ИмяЯчейки = "Дом") 
		ИЛИ (ИмяЯчейки = "Корпус") 
		ИЛИ (ИмяЯчейки = "Квартира") Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области.Индекс.Значение);
		РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области.Регион.Значение);
		РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.Регион.Значение);
		РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.Район.Значение);
		РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.Город.Значение);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.НаселенныйПункт.Значение);
		РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.Улица.Значение);
		РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.Дом.Значение);
		РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.Корпус.Значение);
		РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.Квартира.Значение);
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
		
		Если Регион.Количество() > 0 Тогда
			
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
			
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
		+ РоссийскийАдрес["Регион"] + ","
		+ РоссийскийАдрес["Район"] + ","
		+ РоссийскийАдрес["Город"] + ","
		+ РоссийскийАдрес["НаселенныйПункт"] + ","
		+ РоссийскийАдрес["Улица"] + ","
		+ РоссийскийАдрес["Дом"] + ","
		+ РоссийскийАдрес["Корпус"] + ","
		+ РоссийскийАдрес["Квартира"]);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		ДополнительныеПараметры.Вставить("Префикс", "");
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
				
	ИначеЕсли   (ИмяЯчейки = "ИмИндекс")
		ИЛИ (ИмяЯчейки = "ИмРегион") 
		ИЛИ (ИмяЯчейки = "ИмРайон") 
		ИЛИ (ИмяЯчейки = "ИмГород") 
		ИЛИ (ИмяЯчейки = "ИмНаселенныйПункт") 
		ИЛИ (ИмяЯчейки = "ИмУлица")
		ИЛИ (ИмяЯчейки = "ИмДом") 
		ИЛИ (ИмяЯчейки = "ИмКорпус") 
		ИЛИ (ИмяЯчейки = "ИмКвартира") Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области.ИмИндекс.Значение);
		РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области.ИмРегион.Значение);
		РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.ИмРегион.Значение);
		РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.ИмРайон.Значение);
		РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.ИмГород.Значение);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.ИмНаселенныйПункт.Значение);
		РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.ИмУлица.Значение);
		РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.ИмДом.Значение);
		РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.ИмКорпус.Значение);
		РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.ИмКвартира.Значение);
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
		
		Если Регион.Количество() > 0 Тогда
			
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
			
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
		+ РоссийскийАдрес["Регион"] + ","
		+ РоссийскийАдрес["Район"] + ","
		+ РоссийскийАдрес["Город"] + ","
		+ РоссийскийАдрес["НаселенныйПункт"] + ","
		+ РоссийскийАдрес["Улица"] + ","
		+ РоссийскийАдрес["Дом"] + ","
		+ РоссийскийАдрес["Корпус"] + ","
		+ РоссийскийАдрес["Квартира"]);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		ДополнительныеПараметры.Вставить("Префикс", "Им");
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес, Параметры.Префикс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес, Префикс)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области[Префикс + "Индекс"].Значение          = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области[Префикс + "Регион"].Значение          = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области[Префикс + "Район"].Значение 		    = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области[Префикс + "Город"].Значение           = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области[Префикс + "НаселенныйПункт"].Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области[Префикс + "Улица"].Значение  	 	    = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области[Префикс + "Дом"].Значение             = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области[Префикс + "Корпус"].Значение          = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области[Префикс + "Квартира"].Значение        = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'В реквизитах организации не указан налоговый орган'");
		
		Сообщение.КлючДанных = СтруктураРеквизитовФормы.Организация;
		
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		
		Сообщение.КлючДанных = СтруктураРеквизитовФормы.Организация;
		
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
		Если ПараметрВводаПоля.Тип = "КБК" И ЗначениеЗаполнено(Область.Значение) Тогда
			Область.Значение = СтрЗаменить(Область.Значение," ","");
		КонецЕсли;
			
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	
	//Изменение "по месту нахождения (учета) (код)" на Титульном листе
	Если СтрНайти(ИмяПоказателя, "ПоМесту") > 0 Тогда
		
		НовыйПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
		
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;
		РасчетПослеИзмененияСодержания(ИмяПоказателя, ИмяРаздела, Область);
	ИначеЕсли ИмяПоказателя = "ДатаПодписи" Тогда
		
		ДатаПодписи = ЗначПоказателя;
		СформироватьСпискиВыбора();
		
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		
		НомерКорректировки = ЗначПоказателя;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки > 0, 1, 0);
		
	Иначе
		РасчетПослеИзмененияСодержания(ИмяПоказателя, ИмяРаздела, Область);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеПоказателяВСтруктуреНаСервере(ИмяРаздела, ИмяПоказателя, Значение);
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Значение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Ложь;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = Истина;
	ИмяГруппы = "";
	Если ИмяРаздела = "Титульный" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "ЛистА" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Истина;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппыА;
	ИначеЕсли ИмяРаздела = "ЛистБ" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Истина;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппыБ;
	ИначеЕсли ИмяРаздела = "ЛистВ" Тогда
		КолМногострочныхЧастей = 0;
		МногостраничностьВРазделе = Истина;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппыВ;
	ИначеЕсли ИмяРаздела = "ЛистГ1Продолжение" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Истина;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппыГ1Продолжение;
	ИначеЕсли ИмяРаздела = "ЛистГ2" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Истина;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппыГ2;
	ИначеЕсли ИмяРаздела = "ЛистГ3" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Истина;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппыГ3;
	ИначеЕсли ИмяРаздела = "ЛистЖ3" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Истина;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппыЖ3
	ИначеЕсли ИмяРаздела = "ЛистД" Тогда
		КолМногострочныхЧастей = 0;
		МногостраничностьВРазделе = Истина;
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда
		КолМногострочныхЧастей = 0;
		МногостраничностьВРазделе = Истина;
	КонецЕсли; 
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	
	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
							
							ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			Если ИмяГруппы = Лев(ИмяПоказателя, 11) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 13);
				СтрИнд = Сред(ИмяПоказателя, 14);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначениеПоказателя;
				КонецЕсли; 
				
				Если (Инд > 0) И ДанныеДопСтрокРаздела.Количество() >= Инд Тогда
					ДанныеДопСтрокРаздела[Инд-1][ИмяПок] = ЗначениеПоказателя;
				КонецЕсли; 
				
			КонецЕсли;
			
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		КонецЕсли;
		
		Если ИмяПоказателя = "Фамилия" Тогда
			ПроставитьНаВсехЛистах(Форма, "Фамилия", ЗначениеПоказателя, Ложь);
		ИначеЕсли ИмяПоказателя = "Имя" Тогда
			ПроставитьНаВсехЛистах(Форма, "Имя1", Лев(СокрЛП(ЗначениеПоказателя),1), Ложь);
		ИначеЕсли ИмяПоказателя = "Отчество" Тогда
			ПроставитьНаВсехЛистах(Форма, "Отчество1", Лев(СокрЛП(ЗначениеПоказателя),1), Ложь);
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			ПроставитьНаВсехЛистах(Форма, "ИНН1", ЗначениеПоказателя, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = "Декларация 3-НДФЛ " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = Заголовок;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда

		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем Титульный, Титульный002, ЛистИ;

	Титульный    = ЭтаФорма.мДанныеОтчета.Титульный;
	Титульный002 = ЭтаФорма.мДанныеОтчета.Титульный002;
    ЛистИ        = ЭтаФорма.мДанныеОтчета.ЛистИ;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ВерсПрог",          РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	мПараметры.Вставить("КНД",               "1151020");
	мПараметры.Вставить("ДатаДок",           Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ДФ=дд.ММ.гггг"));
	мПараметры.Вставить("ГодПериодОтч",      Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	мПараметры.Вставить("ПериодОтч",         СокрЛП(Титульный.Период));
	мПараметры.Вставить("КодИФНС",           СокрЛП(Титульный.КодИМНС));
	мПараметры.Вставить("ВидДок",            Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	мПараметры.Вставить("ОКАТОФЛ",           СокрЛП(Титульный.ОКАТО));
	мПараметры.Вставить("ТелФЛ",             СокрЛП(Титульный.ТелОрганизации));
	мПараметры.Вставить("ФамилияФЛ",         СокрЛП(Титульный.Фамилия));
	мПараметры.Вставить("ИмяФЛ",             СокрЛП(Титульный.Имя));
	мПараметры.Вставить("ОтчествоФЛ",        СокрЛП(Титульный.Отчество));

	мПараметры.Вставить("КодКатегорииФЛ",    СокрЛП(Титульный.ПоМесту));
	мПараметры.Вставить("СтатусФЛ",          СокрЛП(Титульный002.СтатусНалогоплательщика));
	мПараметры.Вставить("АдресИноФЛ",        СокрЛП(Титульный002.АдресЗаПределамиРФ));

	мПараметры.Вставить("ПрАдрФЛ",           СокрЛП(Титульный002.МестоЖительства));
	мПараметры.Вставить("ИндексФЛ",          СокрЛП(Титульный002.Индекс));
	мПараметры.Вставить("РегионФЛ",          СокрЛП(Титульный002.Регион));
	мПараметры.Вставить("РайонФЛ",           СокрЛП(Титульный002.Район));
	мПараметры.Вставить("ГородФЛ",           СокрЛП(Титульный002.Город));
	мПараметры.Вставить("НаселенныйПунктФЛ", СокрЛП(Титульный002.НаселенныйПункт));
	мПараметры.Вставить("УлицаФЛ",           СокрЛП(Титульный002.Улица));
	мПараметры.Вставить("ДомФЛ",             СокрЛП(Титульный002.Дом));
	мПараметры.Вставить("КорпусФЛ",          СокрЛП(Титульный002.Корпус));
	мПараметры.Вставить("КвартираФЛ",        СокрЛП(Титульный002.Квартира));

	мПараметры.Вставить("ИННФЛ",             СокрЛП(Титульный.ИНН1));
	мПараметры.Вставить("ДатаРожденияФЛ",    СокрЛП(Титульный002.ДатаРождения));
	мПараметры.Вставить("МестоРожденияФЛ",   СокрЛП(Титульный002.МестоРождения));
	мПараметры.Вставить("ГражданствоФЛ",     СокрЛП(Титульный002.Гражданство));
	мПараметры.Вставить("СтранаФЛ",          СокрЛП(Титульный002.КодСтраны));

	мПараметры.Вставить("КодВидДокФЛ",       СокрЛП(Титульный002.КодВидаДокумента));
	мПараметры.Вставить("СерНомДокФЛ",       СокрЛП(Титульный002.СерияИНомерДокумента));
	мПараметры.Вставить("ДатаДокФЛ",         Формат(Титульный002.ДатаВыдачиДокумента, "ДФ=дд.ММ.гггг"));
	мПараметры.Вставить("ВыдДокФЛ",          СокрЛП(Титульный002.КемВыданДокумент));     

	мПараметры.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	мПараметры.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	мПараметры.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));

	мПараметры.Вставить("ФамилияПодписанта",    Титульный.ОргПодписантФамилия);
	мПараметры.Вставить("ИмяПодписанта",        Титульный.ОргПодписантИмя);
	мПараметры.Вставить("ОтчествоПодписанта",   Титульный.ОргПодписантОтчество);

	мПараметры.Вставить("ИмяФайлаСхемы",             "NO_NDFL3_1_033_00_05_07_01.xsd");
	мПараметры.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDFL3");

	мПараметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДФЛ3");

	мПараметры.Вставить("ИдФайл", СформироватьИдФайл(мПараметры));

	Если ТипЗнч(ЛистИ) = Тип("Структура") Тогда
		Если ЗначениеЗаполнено(ЛистИ.ИмДоля1) И ЗначениеЗаполнено(ЛистИ.ИмДоля3) Тогда
			ЛистИ.Вставить("ИмДоля", СокрЛП(ЛистИ.ИмДоля1) + "/" + СокрЛП(ЛистИ.ИмДоля3));
		Иначе
			ЛистИ.Вставить("ИмДоля", "1/1");
		КонецЕсли;
	КонецЕсли;

	Возврат мПараметры;

	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("СтруктураXML508");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Истина И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	// проверка на незаполненный отчет
	Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1, Раздел2, Раздел3, Раздел4, Раздел5, Раздел6") Тогда
		
		ТекстСообщений = НСтр("ru = 'Должен быть заполнен, как минимум, один из следующих разделов: ""Раздел 1"", ""Раздел 2"", ""Раздел 3"", ""Раздел 4"", ""Раздел 5"" или ""Раздел 6"".'");
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстСообщений, "Титульный", "КодИМНС");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;

	// проверка листа А
	ДанныеЛистА = мДанныеОтчета.ЛистА;
	Для Каждого Стр Из ДанныеЛистА Цикл
		НомерСтраницы = ДанныеЛистА.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "ЛистА", ДеревоВыгрузки) Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.СтавкаНалога) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " Листа А не указана ставка налога", "ЛистА", "СтавкаНалога", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000070001001_" + Формат(НомСтроки, "ЧГ=")) Цикл
				
				ДлинаИНН = СтрДлина(СокрЛП(ДанныеСтраницы["П000070001001_" + Формат(НомСтроки, "ЧГ=")])); //ИНН
				ДлинаКПП = СтрДлина(СокрЛП(ДанныеСтраницы["П000070001002_" + Формат(НомСтроки, "ЧГ=")])); //КПП
				
				Если ДлинаИНН <> 12 И  ДлинаИНН <> 10 И ДлинаИНН <> 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа А в строке " + Формат(НомСтроки, "ЧГ=") + " указан ИНН некорректной длины!", "ЛистА", "П000070001001_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ДлинаИНН = 10 И ДлинаКПП <> 9  Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа А в строке " + Формат(НомСтроки, "ЧГ=") + " указан КПП некорректной длины!", "ЛистА", "П000070001002_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы["П000070001004_" + Формат(НомСтроки, "ЧГ=")])) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа А в строке " + Формат(НомСтроки, "ЧГ=") + " не указано Наименование источника выплаты дохода", "ЛистА", "П000070001004_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ЗначениеЗаполнено(ДанныеСтраницы["П000070001005_" + Формат(НомСтроки, "ЧГ=")])) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа А в строке " + Формат(НомСтроки, "ЧГ=") + " не указана сумма дохода", "ЛистА", "П000070001005_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ЗначениеЗаполнено(ДанныеСтраницы["П000070001006_" + Формат(НомСтроки, "ЧГ=")])) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа А в строке " + Формат(НомСтроки, "ЧГ=") + " не указана сумма облагаемого дохода", "ЛистА", "П000070001006_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ЗначениеЗаполнено(ДанныеСтраницы["П000070001007_" + Формат(НомСтроки, "ЧГ=")])) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа А в строке " + Формат(НомСтроки, "ЧГ=") + " не указана сумма налога исчисленная", "ЛистА", "П000070001007_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ЗначениеЗаполнено(ДанныеСтраницы["П000070001008_" + Формат(НомСтроки, "ЧГ=")])) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа А в строке " + Формат(НомСтроки, "ЧГ=") + " не указана сумма налога удержанная", "ЛистА", "П000070001008_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НомСтроки = НомСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	

	// проверка листа Б
	ДанныеЛистБ = мДанныеОтчета.ЛистБ;
	Для Каждого Стр Из ДанныеЛистБ Цикл
		НомерСтраницы = ДанныеЛистБ.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "ЛистБ", ДеревоВыгрузки) Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.СтавкаНалога) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " Лист Б не указана ставка налога", "ЛистБ", "СтавкаНалога", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000080001001_" + Формат(НомСтроки, "ЧГ=")) Цикл
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы["П000080001001_" + Формат(НомСтроки, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа Б в строке " + Формат(НомСтроки, "ЧГ=") + " не указан код страны по классификатору ОКСМ", "ЛистБ", "П000080001001_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы["П000080001002_" + Формат(НомСтроки, "ЧГ=")])) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа Б в строке " + Формат(НомСтроки, "ЧГ=") + " не указано Наименование источника выплаты дохода", "ЛистБ", "П000080001002_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы["П000080001004_" + Формат(НомСтроки, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа Б в строке " + Формат(НомСтроки, "ЧГ=") + " не указан код валюты", "ЛистБ", "П000080001004_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы["П000080001005_" + Формат(НомСтроки, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа Б в строке " + Формат(НомСтроки, "ЧГ=") + " не указана дата получения дохода", "ЛистБ", "П000080001005_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы["П000080001006_" + Формат(НомСтроки, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа Б в строке " + Формат(НомСтроки, "ЧГ=") + " не указан курс иностранной валюты", "ЛистБ", "П000080001006_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы["П000080001007_" + Формат(НомСтроки, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа Б в строке " + Формат(НомСтроки, "ЧГ=") + " не указана сумма дохода, полученная в иностранной валюте", "ЛистБ", "П000080001007_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы["П000080001008_" + Формат(НомСтроки, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " листа Б в строке " + Формат(НомСтроки, "ЧГ=") + " не указана сумма дохода, полученная в иностранной валюте в пересчете в рубли", "ЛистБ", "П000080001008_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НомСтроки = НомСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, парамРазделы)
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если СтрНайти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Истина;
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ РазделПуст(ДеревоВыгрузки, Раздел) Тогда
			РазделыПусты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ РазделыПусты;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено или НЕ ДанныеСтраницы.Свойство(Пок.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе 
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция РазделПуст(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел);
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	РазделПуст = Истина;
	Если ТипЗнч(ДанныеРаздела) <> Тип("Структура") Тогда
		Для Каждого Стр Из ДанныеРаздела Цикл
			Если НЕ СтраницаПуста(Стр.Данные[0].Значение, ПоказателиРаздела) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	
	сохрСтруктураУзлаРасчНал = СохранитьСтруктураУзла(ДеревоВыгрузки, "РасчНал");
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	// Для ОКВЭД нужно убрать точки в конце
	Если Узел.Код = "ОКВЭД" Тогда
		
		ЗначениеПоказателя = СтрЗаменить(СокрЛП(СтрЗаменить(ЗначениеПоказателя, ".", " ")) ," ", ".");
		
	КонецЕсли;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=0; ЧГ=";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			// Пустое значение для gYear
			Узел.Значение = "0001";
		ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
			
			Узел.Значение = Прав(СокрЛП(Формат(ЗначениеПоказателя, "ЧГ=")), 4);
			
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УсловиеЮр_Физ(Параметры, Узел, НомерСтроки = Неопределено)
	
	//проверка на длину ИНН для заполнения соответствующей ветки
	Результат = Ложь;
	ЗначениеПоказателя = Неопределено;
	Если Узел.Код = "ИстЮЛ" ИЛИ Узел.Код = "СведИст" ИЛИ Узел.Код = "СвОрг" Тогда
		КлючПодчиненногоЭлемента = Узел.Строки.Найти("ИННЮЛ").Ключ;
		ПолныйКодПоказателя = КлючПодчиненногоЭлемента + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
		Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) ИЛИ СтрДлина(СокрЛП(ЗначениеПоказателя)) > 10 Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Узел.Код = "ИстФЛИн" ИЛИ Узел.Код = "СвФЛ" Тогда
		КлючПодчиненногоЭлемента = Узел.Строки.Найти("ИННФЛ").Ключ;
		ПолныйКодПоказателя = КлючПодчиненногоЭлемента + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
		Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) И СтрДлина(СокрЛП(ЗначениеПоказателя)) < 12 Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;

	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				//Особенность декларации, многострочные подузлы для вывода сведений об организациях-источниках
				//
				Если Стр.Код = "ИстЮЛ" ИЛИ Стр.Код = "ИстФЛИн" ИЛИ Стр.Код = "СведИст" 
					ИЛИ Стр.Код = "СвОрг" ИЛИ Стр.Код = "СвФЛ" Тогда
					Если Стр.Родитель.Многострочность Тогда
						Если УсловиеЮр_Физ(Параметры, Стр, НомерСтроки) Тогда
							ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Параметры, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					Если Стр.Раздел = "ЛистГ1Продолжение" И НомСтр = 1 Тогда
						УзелСоответствующийСтроке = ПолучитьПодчиненныйЭлемент(Узел, "СумДохМес");
					Иначе
						УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					КонецЕсли;
					ЗаполнитьДаннымиУзел(Параметры, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				Если Стр.Код = "ИстЮЛ" ИЛИ Стр.Код = "ИстФЛИн" ИЛИ Стр.Код = "СведИст" 
					ИЛИ Стр.Код = "СвОрг" ИЛИ Стр.Код = "СвФЛ" Тогда
					Если УсловиеЮр_Физ(Параметры, Стр, НомерСтроки) Тогда
						ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
					КонецЕсли;
				Иначе
					ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ЗначениеПоказателя = ?(ЗначениеПоказателя = 0,Стр.ЗначениеПоУмолчанию , ЗначениеПоказателя);
						ЗначениеПоказателя = ?(ЗначениеПоказателя = "" И Стр.Формат = "N", "0" + Сред(Формат(1, "ЧРД=.; ЧЦ=3; ЧДЦ=" + Стр.МинРазмерность + ";"), 2) , ЗначениеПоказателя);
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе                                                        
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
		Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
				+ "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + СокрЛП(ПараметрыВыгрузки.ИННФЛ)
				+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	// заполнение основного раздела
	ИтогУплВозв = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИтогУплВозв");
	СведДохВыч = ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "СведДохВыч");
	
	// заполнение Раздела 1
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел1, "Раздел1", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел1, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза13"));
	КонецЕсли;

	// заполнение Раздела 2
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел2, "Раздел2", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел2, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза30"));
	КонецЕсли;

	// заполнение Раздела 3
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел3, "Раздел3", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел3, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза35"));
	КонецЕсли;

	// заполнение Раздела 4
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел4, "Раздел4", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел4, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза9"));
	КонецЕсли;

	// заполнение Раздела 5
	Если НЕ СтраницаПуста(мДанныеОтчета.Раздел5, "Раздел5", ИтогУплВозв.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.Раздел5, ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "НалБаза15"));
	КонецЕсли;

	// заполнение Сведений о доходах
	СведДохВыч = ПолучитьПодчиненныйЭлемент(ИтогУплВозв, "СведДохВыч");

	// заполнение Листа А
	ДоходИстРФ = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходИстРФ");
	ДанныеЛистаА = мДанныеОтчета.ЛистА;
	// Цикл по страницам листа
	Для Каждого Стр Из ДанныеЛистаА Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "ЛистА", ДоходИстРФ.Владелец()) Тогда
			ЭкзДоходИстРФ = СкопироватьУзел(СведДохВыч, ДоходИстРФ);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзДоходИстРФ);
		КонецЕсли;
	КонецЦикла;

	// заполнение Листа Б
	ДоходИстИно = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходИстИно");
	ДанныеЛистаБ = мДанныеОтчета.ЛистБ;
	// Цикл по страницам листа
	Для Каждого Стр Из ДанныеЛистаБ Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "ЛистБ", ДоходИстИно.Владелец()) Тогда
			ЭкзДоходИстИно = СкопироватьУзел(СведДохВыч, ДоходИстИно);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзДоходИстИно);
		КонецЕсли;
	КонецЦикла;

	// заполнение Листа В
	ДоходПредпр = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходПредпр");
	ДанныеЛистаВ = мДанныеОтчета.ЛистВ;
	
	Для Каждого Стр Из ДанныеЛистаВ Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "ЛистВ", СведДохВыч.Владелец()) Тогда
			ЭкзДоходПредпр = СкопироватьУзел(СведДохВыч, ДоходПредпр);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзДоходПредпр);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение Листа Г1 и Листа Г1 (продолжение)
	ДоходОсвПрев = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходОсвПрев");
	ДанныеЛистаГ1 = мДанныеОтчета.ЛистГ1;
	Если НЕ СтраницаПуста(ДанныеЛистаГ1, "ЛистГ1", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(ДанныеЛистаГ1, ДоходОсвПрев);
	КонецЕсли;

	ДохОплСХ = ПолучитьПодчиненныйЭлемент(ДоходОсвПрев, "ДохОплСХ");
	ДанныеЛистаГ1Продолжение = мДанныеОтчета.ЛистГ1Продолжение;
	// Цикл по страницам листа
	Для Каждого Стр Из ДанныеЛистаГ1Продолжение Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "ЛистГ1Продолжение", ДоходОсвПрев.Владелец()) Тогда
			Для СчетчикМесяцев=1 По 12 Цикл
				Стр.Данные[0].Значение.Вставить("П000025119001_"+СчетчикМесяцев, Формат(СчетчикМесяцев, "ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ="));
			КонецЦикла; 
			ЭкзДохОплСХ = СкопироватьУзел(ДоходОсвПрев, ДохОплСХ);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзДохОплСХ);
		КонецЕсли;
	КонецЦикла;

	// заполнение Листа Г2
	ДоходИгрПриз = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходИгрПриз");
	ДанныеЛистаГ2 = мДанныеОтчета.ЛистГ2;
	
	Для Каждого Стр Из ДанныеЛистаГ2 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "ЛистГ2", СведДохВыч.Владелец()) Тогда
			ЭкзДоходИгрПриз = СкопироватьУзел(СведДохВыч, ДоходИгрПриз);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзДоходИгрПриз);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение Листа Г3
	ДоходМатВыг = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДоходМатВыг");
	ДанныеЛистаГ3 = мДанныеОтчета.ЛистГ3;
	Для Каждого Стр Из ДанныеЛистаГ3 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "ЛистГ3", СведДохВыч.Владелец()) Тогда
			ЭкзДоходМатВыг = СкопироватьУзел(СведДохВыч, ДоходМатВыг);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзДоходМатВыг);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение Листа Д
	ВычПрофВозн = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычПрофВозн");
	ДанныеЛистаД = мДанныеОтчета.ЛистД;
	// Цикл по страницам листа
	Для Каждого Стр Из ДанныеЛистаД Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "ЛистД", ВычПрофВозн.Владелец()) Тогда
			ЭкзВычПрофВозн = СкопироватьУзел(СведДохВыч, ВычПрофВозн);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзВычПрофВозн);
		КонецЕсли;
	КонецЦикла;

	// заполнение Листа Е
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЕ, "ЛистЕ", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЕ, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычПродИмущ"));
	КонецЕсли;

	// заполнение Листа Ж1
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЖ1, "ЛистЖ1", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЖ1, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычСтанд"));
	КонецЕсли;

	// заполнение Листа Ж2
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЖ2, "ЛистЖ2", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЖ2, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычСоциал"));
	КонецЕсли;

	// заполнение Листа Ж3
	ВычДогНПО_ДПС = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычДогНПО_ДПС");
	ДанныеЛистаЖ3 = мДанныеОтчета.ЛистЖ3;
	Для Каждого Стр Из ДанныеЛистаЖ3 Цикл
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "ЛистЖ3", СведДохВыч.Владелец()) Тогда
			
			ЭкзВычДогНПО_ДПС = СкопироватьУзел(СведДохВыч, ВычДогНПО_ДПС);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзВычДогНПО_ДПС);
			
			РасчВычДогНПО = ПолучитьПодчиненныйЭлемент(ЭкзВычДогНПО_ДПС, "РасчВычДогНПО");
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, РасчВычДогНПО);
			
			РасчВычДогДПС = ПолучитьПодчиненныйЭлемент(ЭкзВычДогНПО_ДПС, "РасчВычДогДПС");
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, РасчВычДогДПС);
		КонецЕсли;
	КонецЦикла;
	
  	ДохОперЦБ = ПолучитьПодчиненныйЭлемент(СведДохВыч, "ДохОперЦБ");

	 //заполнение Листа З, Лист З (продолжение)
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЗ, "ЛистЗ", ДохОперЦБ.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗ, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ДохОперЦБОрг"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗ, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ДохОперЦБОргНеОрг"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗ, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ДохОперЦБНеОрг"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗ, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ДохФИССОргЦБ"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗ, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ДохФИССОргНеЦБ"));
	КонецЕсли;
	
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистЗПродолжение, "ЛистЗПродолжение", ДохОперЦБ.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗПродолжение, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ДохФИССНеОрг"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗПродолжение, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ДохРЕПО"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗПродолжение, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ДохЗаймЦБ"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗПродолжение, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "УбытПредПер"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗПродолжение, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "УбытПрхПер"));
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистЗПродолжение, ПолучитьПодчиненныйЭлемент(ДохОперЦБ, "ИтогСовОпер"));
	КонецЕсли;
		
	// заполнение Листа И
	Если НЕ СтраницаПуста(мДанныеОтчета.ЛистИ, "ЛистИ", СведДохВыч.Владелец()) Тогда
		ЗаполнитьДаннымиУзел(мДанныеОтчета.ЛистИ, ПолучитьПодчиненныйЭлемент(СведДохВыч, "ВычИмущНов"));
	КонецЕсли;

	// заполнение Раздела 6
	ПодлУплВозв = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ПодлУплВозв");
	ДанныеРаздела6 = мДанныеОтчета.Раздел6;
	
	Для каждого Стр Из ДанныеРаздела6 Цикл
		
		Если НЕ СтраницаПуста(Стр.Данные[0].Значение, "Раздел6", УзелРодитель.Владелец()) Тогда
			ЭкзПодлУплВозв = СкопироватьУзел(УзелРодитель, ПодлУплВозв);
			ЗаполнитьДаннымиУзел(Стр.Данные[0].Значение, ЭкзПодлУплВозв);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНулямиНезаполненныеАтрибуты(Узел, Знач Исключения = Неопределено)
	
	Если Исключения = Неопределено Тогда
		Исключения = Новый Структура;
	КонецЕсли;
	
	Если (Узел.Тип = "А" ИЛИ Узел.Тип = "A") И НЕ ЗначениеЗаполнено(Узел.Значение) Тогда
		ЗначениеАтрибута = Неопределено;
		Узел.Значение = ?(Исключения.Свойство(Узел.Код, ЗначениеАтрибута), ЗначениеАтрибута, "0");
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ЗаполнитьНулямиНезаполненныеАтрибуты(Стр, Исключения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПустойУзелРаздела(УзелРодитель, СтруктураПустогоРаздела, ТолькоПервыйУровень = Ложь, ИндексУзла = Неопределено, УзелРаздела = Неопределено)
	
	Если ТолькоПервыйУровень Тогда
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		КонецЕсли;
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			Если (Стр.Тип = "А" ИЛИ Стр.Тип = "A") И УзелРаздела.Строки.Найти(Стр.Код, "Код") = Неопределено Тогда
				
				// ищем первое вхождение сложного элемента и вставляем на его место новый атрибут
				СложныйЭлемент = УзелРаздела.Строки.Найти("С", "Тип");
				Если СложныйЭлемент = Неопределено Тогда
					НовСтр = УзелРаздела.Строки.Добавить();
				Иначе
					НовСтр = УзелРаздела.Строки.Вставить(УзелРаздела.Строки.Индекс(СложныйЭлемент));
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			ЗагрузитьПустойУзелРаздела(УзелРаздела, Стр, ТолькоПервыйУровень);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УзелРаздела;
	
КонецФункции

&НаСервере
Функция СохранитьСтруктураУзла(Знач Узел, КодУзла = Неопределено, СтруктураУзла = Неопределено)
	
	ЭтоПервыйЗаход = (СтруктураУзла = Неопределено);
	
	Если ЭтоПервыйЗаход Тогда
		
		СтруктураУзла = Новый ДеревоЗначений;
		Для Каждого Колонка Из Узел.Колонки Цикл
			СтруктураУзла.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Узел = Узел.Строки.Найти(КодУзла, "Код", Истина);
		Если Узел = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	НовСтр = СтруктураУзла.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, Узел);
	
	Для Каждого Стр Из Узел.Строки Цикл
		СохранитьСтруктураУзла(Стр, , НовСтр);
	КонецЦикла;
	
	Если ЭтоПервыйЗаход Тогда
		Возврат СтруктураУзла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N",
	Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
	НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
    	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	// Запомним текущий раздел и страницу, чтобы к ним вернутся
	НаимТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	НомерТекущейСтраницы = СтруктураРеквизитовФормы.НомерТекущейСтраницы;
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли; 
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		СтруктураПараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("НомСтр", 				1);
		СтруктураПараметров.Вставить("Количество",          1);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Возвращаем текущий раздел и страницу
	ВывестиМакетВТаблДокНаСервере(НаимТекущегоРаздела, НомерТекущейСтраницы);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
		
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",	 		"МЧБ_2014_01_Титульный");
	СоответствиеРазделовМакетам.Вставить("Титульный002", 		"МЧБ_2014_02_Титул_002");
	
	СоответствиеРазделовМакетам.Вставить("Раздел1",	 			"МЧБ_2014_03_Раздел_1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",	 			"МЧБ_2014_04_Раздел_2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",	 			"МЧБ_2014_05_Раздел_3");
	СоответствиеРазделовМакетам.Вставить("Раздел4",	 			"МЧБ_2014_06_Раздел_4");
	СоответствиеРазделовМакетам.Вставить("Раздел5",	 			"МЧБ_2014_07_Раздел_5");
	СоответствиеРазделовМакетам.Вставить("Раздел6",	 			"МЧБ_2014_08_Раздел_6");
	
	СоответствиеРазделовМакетам.Вставить("ЛистА",		 		"МЧБ_2014_09_Лист_А");
	СоответствиеРазделовМакетам.Вставить("ЛистБ",		 		"МЧБ_2014_10_Лист_Б");
	СоответствиеРазделовМакетам.Вставить("ЛистВ",	 			"МЧБ_2014_11_Лист_В");
	СоответствиеРазделовМакетам.Вставить("ЛистГ1",	 			"МЧБ_2014_12_Лист_Г1");
	СоответствиеРазделовМакетам.Вставить("ЛистГ1Продолжение",	"МЧБ_2014_27_Лист_Г1_Продолжение");
	СоответствиеРазделовМакетам.Вставить("ЛистГ2",	 			"МЧБ_2014_13_Лист_Г2");
	СоответствиеРазделовМакетам.Вставить("ЛистГ3",	 			"МЧБ_2014_28_Лист_Г3");
	СоответствиеРазделовМакетам.Вставить("ЛистД",	 			"МЧБ_2014_14_Лист_Д");
	СоответствиеРазделовМакетам.Вставить("ЛистЕ",		 		"МЧБ_2014_15_Лист_Е");
	СоответствиеРазделовМакетам.Вставить("ЛистЖ1",		 		"МЧБ_2014_16_Лист_Ж1");
	СоответствиеРазделовМакетам.Вставить("ЛистЖ2",	 	 		"МЧБ_2014_17_Лист_Ж2");
	СоответствиеРазделовМакетам.Вставить("ЛистЖ3",		 		"МЧБ_2014_18_Лист_Ж3");
	СоответствиеРазделовМакетам.Вставить("ЛистЗ",		 		"МЧБ_2014_21_Лист_З");
	СоответствиеРазделовМакетам.Вставить("ЛистЗПродолжение",	"МЧБ_2014_22_Лист_З_Продолжение");
	СоответствиеРазделовМакетам.Вставить("ЛистИ",		 		"МЧБ_2014_24_Лист_И");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу = 5;
	МакетМЧБ.ПолеСлева = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	//Специальный алгоритм для многострочных разделов
	//Определение: является ли раздел многострочным 
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		//определение исходного количества строк на листе МЧБ
		Если Парам1.ИмяСтраницы = "ЛистА" Тогда
			ИсхКолвоСтрокБлока = 4;
		ИначеЕсли Парам1.ИмяСтраницы = "ЛистБ" Тогда
			ИсхКолвоСтрокБлока = 2;
		ИначеЕсли Парам1.ИмяСтраницы = "ЛистГ1Продолжение" Тогда
			ИсхКолвоСтрокБлока = 12;
		ИначеЕсли Парам1.ИмяСтраницы = "ЛистГ2" Тогда
			ИсхКолвоСтрокБлока = 5;
		ИначеЕсли Парам1.ИмяСтраницы = "ЛистГ3" Тогда
			ИсхКолвоСтрокБлока = 6;
		ИначеЕсли Парам1.ИмяСтраницы = "ЛистГ3" Тогда
			ИсхКолвоСтрокБлока = 6;
		ИначеЕсли Парам1.ИмяСтраницы = "ЛистЖ3" Тогда
			ИсхКолвоСтрокБлока = 1;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > ИсхКолвоСтрокБлока И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				//переименование (начиная со второго листа)
				Если Сч > 1 Тогда
					СписокОчищаемыхОбластей = Новый Массив;
					СписокОбластейПереименования = Новый СписокЗначений;
					Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						ИмяЯчейки = ТекущаяОбласть.Имя;
						
						Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
							//проверка на вхождение в данную многострочную часть
							Продолжить;
						КонецЕсли;
						
						//определение и обрасывание НомерЯчейки
						ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
						ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
						НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
						//определение СмысловаяЧасть и ТекущийСчетчик
						СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
						СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
						ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
						
						СмысловаяЧастьСРазделителем = ?(ЗначениеЗаполнено(СмысловаяЧастьСРазделителем),СмысловаяЧастьСРазделителем, ПоказательИНомерСтрокиСРазделителем);
						СмысловаяЧасть = ?(ЗначениеЗаполнено(СмысловаяЧасть),СмысловаяЧасть, ПоказательИНомерСтроки);
						ТекущийСчетчик = ?(ЗначениеЗаполнено(ТекущийСчетчик),ТекущийСчетчик, НомерЯчейки);
						
						//Окончательная проверка на вхождение в данную многострочную часть
						Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						НовыйСчетчик = Число(ТекущийСчетчик) + ИсхКолвоСтрокБлока;
						Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
							//очищение происходит после этого цикла
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							Продолжить;
						КонецЕсли;
						
						//Подготовка к переименованию
						//заполнение списка: значение - область, представление - будущее имя
						СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
					КонецЦикла;
					
					//Очищение
					Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = "-";
					КонецЦикла;
					
					//Переименование
					Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
						ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
					КонецЦикла;
					
				КонецЕсли; 
				//переименование
				//
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
				
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
			
			
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	СтруктураПараметровСтраницы.Вставить("Количество", ТаблицаСтраницРаздела.Количество());
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		СтруктураПараметровСтраницы.Вставить("НомСтр", ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
			
			//Особая обработка значения ОКВЭД листа В
			Если Параметры.ИмяСтраницы = "ЛистВ" Тогда
				Если Лев(Область.Имя, 13) = "П000090001002" Тогда
					ОКВЭД = НовСтр.ЗначениеМЧБ;
					Если Сред(ОКВЭД, 2, 1) = "." Тогда
						ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
					КонецЕсли;
					Если Сред(ОКВЭД, 5, 1) = "." Тогда
						ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
					КонецЕсли;
					НовСтр.Значение = ОКВЭД;
					НовСтр.ЗначениеМЧБ = ОКВЭД;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
	// особая обработка ФИО на титульном листе
	Если Параметры.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;

	КонецЕсли;
	
	// ФИО
	Если СтрНайти(Параметры.ИмяСтраницы, "Титульный") = 0 Тогда
		
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "Фамилия";
		НовСтр.Значение = ОбщиеРеквизитыРазделов.СтрФамилия;
		НовСтр.ЗначениеМЧБ = СокрЛП(ОбщиеРеквизитыРазделов.СтрФамилия);
		
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "Имя";
		НовСтр.Значение = ОбщиеРеквизитыРазделов.СтрИмя;
		НовСтр.ЗначениеМЧБ = СокрЛП(ОбщиеРеквизитыРазделов.СтрИмя);
		
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "Отчество";
		НовСтр.Значение = ОбщиеРеквизитыРазделов.СтрИмя;
		НовСтр.ЗначениеМЧБ = СокрЛП(ОбщиеРеквизитыРазделов.СтрОтчество);
		
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "ИНН1";
		НовСтр.Значение = ОбщиеРеквизитыРазделов.СтрИНН;
		НовСтр.ЗначениеМЧБ = СокрЛП(ОбщиеРеквизитыРазделов.СтрИНН);
		
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Параметры.ИмяСтраницы);
	
	
	Если Параметры.НомСтр <> Параметры.Количество Тогда
		
		Если Параметры.ИмяСтраницы = "ЛистА" Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000070008001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000070009001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000070010001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000070011001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000070012001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
	
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистБ" Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000080001501";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000080001601";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000080001701";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000080001801";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистВ" Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000090001101";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000090001201";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000090001301";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000090001401";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000090001501";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000090001601";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистГ2" Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000010207001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистГ3" Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000027207001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистЖ3" Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000022010001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000022020001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000022021001";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = "";
			
		КонецЕсли;
	КонецЕсли;
	
	
	
	Если ИдГруппы <> Неопределено Тогда 
		СтруктураСтроки = ЭтаФорма[ИдГруппы].Выгрузить();
		ИсхКолвоСтрокБлока = 0;
		
		//определение исходного количества строк на листе МЧБ
		Если Параметры.ИмяСтраницы = "ЛистА" Тогда
			ИсхКолвоСтрокБлока = 4;
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистБ" Тогда
			ИсхКолвоСтрокБлока = 2;
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистГ1Продолжение" Тогда
			ИсхКолвоСтрокБлока = 12;
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистГ2" Тогда
			ИсхКолвоСтрокБлока = 5;
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистГ3" Тогда
			ИсхКолвоСтрокБлока = 6;
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистГ3" Тогда
			ИсхКолвоСтрокБлока = 6;
		ИначеЕсли Параметры.ИмяСтраницы = "ЛистЖ3" Тогда
			ИсхКолвоСтрокБлока = 1;
		КонецЕсли;
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока < ИсхКолвоСтрокБлока И ИсхКолвоСтрокБлока > 0 Тогда
			Для Сч = ТекКолвоСтрокБлока + 1 По ИсхКолвоСтрокБлока Цикл
				Для Каждого Колонка Из СтруктураСтроки.Колонки Цикл 
					НовСтр = Показатели.Добавить();
					НовСтр.Имя = Колонка.Имя + "_" + Сч;
					НовСтр.Значение = "";
					НовСтр.ЗначениеМЧБ = "";
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
				ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Формат(Цел(РезультатПоиска.Значение),"ЧГ=0"));
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДообнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
					Если НЕ ЗначениеВыведено Тогда
						
						Сообщение = Новый СообщениеПользователю;
						
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область %1'"), ИмяОбласти);
						
						Сообщение.Сообщить();
						
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	МассивФамилия     = Новый Массив(32);
	МассивИмя         = Новый Массив(32);
	МассивОтчество    = Новый Массив(32);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	СтрИНН = "";
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		Иначе
			// Если дата подписи не заполнена подставим пустую строку соответствующей длины
			СтрДатаПодписи = "        ";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("Фамилия");
	СтрФамилия = "";
	Если НЕ Область = Неопределено Тогда
		СтрФамилия = Область.Значение;
		ДлинаФамилии = СтрДлина(СтрФамилия);
		
		Для Ном = 1 По ДлинаФамилии Цикл
			
			МассивФамилия[Ном - 1] = Сред(СтрФамилия, Ном, 1);
			
		КонецЦикла;
		
		Для Ном = Макс(ДлинаФамилии, 1) По МассивФамилия.Количество() Цикл
			
			МассивФамилия[Ном - 1] = "-";
			
		КонецЦикла;
		
	КонецЕсли;

	Область = ИсходныйМакет.Области.Найти("Имя");
	СтрИмя = "";
	Если НЕ Область = Неопределено Тогда
		СтрИмя = Область.Значение;
		ДлинаИмени = СтрДлина(СтрИмя);
		Для Ном = 1 По ДлинаИмени Цикл
			
			МассивИмя[Ном - 1] = Сред(СтрИмя, Ном, 1);
			
		КонецЦикла;
		
		Для Ном = Макс(ДлинаИмени, 1) По МассивИмя.Количество() Цикл
			
			МассивИмя[Ном - 1] = "-";
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("Отчество");
	СтрОтчество = "";
	Если НЕ Область = Неопределено Тогда
		СтрОтчество = Область.Значение;
		ДлинаОтчества = СтрДлина(СтрОтчество);
		Для Ном = 1 По ДлинаОтчества Цикл
			
			МассивОтчество[Ном - 1] = Сред(СтрОтчество, Ном, 1);
			
		КонецЦикла;
		
		Для Ном = Макс(ДлинаОтчества, 1) По МассивОтчество.Количество() Цикл
			
			МассивОтчество[Ном - 1] = "-";
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	ОбщиеРеквизитыРазделов.Вставить("Фамилия", МассивФамилия);
	ОбщиеРеквизитыРазделов.Вставить("Имя", МассивИмя);
	ОбщиеРеквизитыРазделов.Вставить("Отчество", МассивОтчество);
	ОбщиеРеквизитыРазделов.Вставить("СтрИНН", СтрИНН);
	
	ОбщиеРеквизитыРазделов.Вставить("СтрФамилия", СтрФамилия);
	ОбщиеРеквизитыРазделов.Вставить("СтрИмя", СтрИмя);
	ОбщиеРеквизитыРазделов.Вставить("СтрОтчество", СтрОтчество);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
	
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			     СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ИНН",							 СтруктураДанныхТитульный.ИНН1);
	
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки"); // Адрес временного хранилища, где размещена расшифровка результата автозаполнения.
	
	Контейнер = Новый Структура();
	
	Контейнер.Вставить("Раздел6",      			ТаблицаСтраницыРаздел6);
	Контейнер.Вставить("ЛистВ",      			ТаблицаСтраницыЛистВ);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПараметрыОтчета.АдресВременногоХранилищаРасшифровки;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	ЗаполнитьСведенияОбОрганизации();
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 				    	СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
		ПроверкаРаздела1(СтруктураРезультата);
		ПроверкаРаздела2(СтруктураРезультата);
		ПроверкаРаздела3(СтруктураРезультата);
		ПроверкаРаздела4(СтруктураРезультата);
		ПроверкаРаздела5(СтруктураРезультата);
		ПроверкаРаздела6(СтруктураРезультата);
		ПроверкаЛистаА(СтруктураРезультата);
		ПроверкаЛистаБ(СтруктураРезультата);
		ПроверкаЛистаВ(СтруктураРезультата);
		ПроверкаЛистаГ1(СтруктураРезультата);
		ПроверкаЛистаГ2(СтруктураРезультата);
		ПроверкаЛистаГ3(СтруктураРезультата);
		ПроверкаЛистаД(СтруктураРезультата);
		ПроверкаЛистаЕ(СтруктураРезультата);
		ПроверкаЛистаЖ1(СтруктураРезультата);
		ПроверкаЛистаЖ2(СтруктураРезультата);
		ПроверкаЛистаЖ3(СтруктураРезультата);
		ПроверкаЛистаЗ(СтруктураРезультата);
		ПроверкаЛистаИ(СтруктураРезультата);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверкаРаздела1(СтруктураРезультата)
	
		Раздел1 = СтруктураДанныхРаздел1;
		ЛистГ1 = СтруктураДанныхЛистГ1;
		
		ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
		ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
		СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
		
		СтавкаНалога = 13;
		Если ЭтаФорма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			ЕстьДанныеНаДрЛистах = Ложь;
			
			ПроверяемыеЛисты = Новый Структура("ЛистА, ЛистБ, ЛистВ",
			Новый Структура("СтавкаНалога", СтавкаНалога),
			Новый Структура("СтавкаНалога", СтавкаНалога),
			Неопределено);
			
			Для Каждого ИмяИУсловиеЛиста Из ПроверяемыеЛисты Цикл
				
				Для Каждого Лист Из ЭтаФорма["ТаблицаСтраницы" + ИмяИУсловиеЛиста.Ключ] Цикл
					
					Если СтраницаРазделаЗаполнена(Лист.Данные[0].Значение, ИмяИУсловиеЛиста.Значение) Тогда
						ЕстьДанныеНаДрЛистах = Истина;
						Прервать;	
					КонецЕсли;	
					
				КонецЦикла;	
				
				Если ЕстьДанныеНаДрЛистах Тогда
					Прервать;	
				КонецЕсли;
				
			КонецЦикла;	
			
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел1) ИЛИ ЕстьДанныеНаДрЛистах;
		Иначе
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел1);
		КонецЕсли;	
		
		Если НужноПроверять Тогда
						
			//1.2
			
			ТекстФормулы = "строка 020 Раздела 1 = пп. 1.9 Листа Г1";
			Нарушение = "п.28 ст.217 НК РФ";
			Описание = "Если строка 020 Раздела 1 >,< пп. 1.9 Листа Г1, то завышена/занижена общая сумма доходов, не подлежащая налогообложению";
			
			Знак = "=";
			НазваниеПоказателяЛевойЧасти = "строка 020 Раздела 1";
			НазваниеПоказателяПравойЧасти = "пп. 1.9 Листа Г1";
			
			ЛеваяЧасть = Раздел1.П000010002003;
			
			ПраваяЧасть = ЛистГ1.П000010116004;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//1.3
			
			ТекстФормулы = "строка 030 раздела 1 = строка 010 раздела 1- строка 020 раздела 1";
			Нарушение = "ст.210 НК РФ";
			Описание = "если строка 030 раздела 1 <,> строка 010 раздела 1 - строка 020 раздела 1, то занижена/завышена сумма дохода, подлежащая налогообложению по ставке 13%";
			
			Знак = "=";
			НазваниеПоказателяЛевойЧасти = "строка 030 Раздела 1";
			НазваниеПоказателяПравойЧасти = "строка 010 Раздела 1 - строка 020 Раздела 1";
						
			ЛеваяЧасть = Раздел1.П000010003003;
			
			ПраваяЧасть = Раздел1.П000010001003 - Раздел1.П000010002003;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//1.4
			ЛистВ 			= ТаблицаСтраницыЛистВ;
			ЛистД 			= ТаблицаСтраницыЛистД;
			ЛистЕ 			= СтруктураДанныхЛистЕ;
			ЛистЖ1 			=  СтруктураДанныхЛистЖ1;
			ЛистЖ2 			= СтруктураДанныхЛистЖ2;
			ЛистЖ3 			= ТаблицаСтраницыЛистЖ3;
			ЛистЗПродолжение = СтруктураДанныхЛистЗПродолжение;
			ЛистИ 			= СтруктураДанныхЛистИ;
			
			
			ТекстФормулы = "строка 040 раздела 1 = (пп. 3.2 Листа В + пп. 6.1 Листа Д + п. 4 Листа Е + пп. 2.8 Листа Ж1 + п. 3 Листа Ж2 + п. 3 Листа Ж3 + пп. 11.3 Листа З + пп.2.5 Листа И  + пп. 2.6 Листа И + пп. 2.8 Листа И + пп. 2.9 Листа И)";
			Нарушение = "ст. 210,  217-221 НК РФ";
			Описание = "если строка 040 раздела 1 >,<  (пп. 3.2 Листа В + пп. 6.1 Листа Д + п. 4 Листа Е + пп. 2.8 Листа Ж1 + п. 3 Листа Ж2 + п. 3 Листа Ж3 + пп. 11.3 + пп. 9.3 Листа З + пп.2.5 Листа И  + пп. 2.6 Листа И + пп. 2.8 Листа И + пп. 2.9 Листа И), то завышена/занижена общая сумма расходов и налоговых вычетов, уменьшающих налоговую базу";
			
			Знак = "=";
			НазваниеПоказателяЛевойЧасти = "строка 040 Раздела 1";
			НазваниеПоказателяПравойЧасти = "пп. 3.2 Листа В + пп. 6.1 Листа Д + п. 4 Листа Е + пп. 2.8 Листа Ж1 + п. 3 Листа Ж2 + п. 3 Листа Ж3 + пп. 11.3 Листа З + пп.2.5 Листа И  + пп. 2.6 Листа И + пп. 2.8 Листа И + пп. 2.9 Листа И";
			
			ЛеваяЧасть = Раздел1.П000010004003;
			
			ЛистД_П000012001110 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "ЛистД", "П000012001110", Ложь);
			ЛистВ_П000090001201 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "ЛистВ", "П000090001201", Ложь);
			ЛистЖ3_П000022021001 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "ЛистЖ3", "П000022021001", Ложь);
			
			ПраваяЧасть = ЛистВ_П000090001201
			+ ЛистД_П000012001110
			+ ЛистЕ.П000014019002
			+ ЛистЖ1.П000020022004
			+ ЛистЖ2.П000021012004
			+ ЛистЖ3_П000022021001
			+ ЛистЗПродолжение.П000022043001
			+ ЛистИ.П000024021004
			+ ЛистИ.П000024022004
			+ ЛистИ.П000024024004
			+ ЛистИ.П000024025004;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ЛистВ_П000090001201) + " + "
			+ Строка(ЛистД_П000012001110) + " + "
			+ Строка(ЛистЕ.П000014019002) + " + "
			+ Строка(ЛистЖ1.П000020022004) + " + "
			+ Строка(ЛистЖ2.П000021012004) + " + "
			+ Строка(ЛистЖ3_П000022021001) + " + "
			+ Строка(ЛистЗПродолжение.П000022043001) + " + "
			+ Строка(ЛистИ.П000024021004) + " + "
			+ Строка(ЛистИ.П000024022004) + " + "
			+ Строка(ЛистИ.П000024024004) + " + "
			+ Строка(ЛистИ.П000024025004);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//1.5
			//Проверяем Только если Раздел1.П000010005003 > 0
			Если Раздел1.П000010005003 > 0 Тогда
				
				
				ТекстФормулы = "строка 050 раздела 1 = строка 030 раздела 1- строка 040 раздела 1 при  условии, что строка 050 раздела 1 > 0";
				Нарушение = "ст.210 НК РФ";
				Описание = "если строка 050 раздела 1 <,> строка 030 раздела 1 - строка 040 раздела 1 при  условии, что строка 050 раздела 1 > 0 , то занижена/завышена налоговая база по доходам, облагаемым по ставке 13%";
				
				Знак = "=";
				НазваниеПоказателяЛевойЧасти = "строка 050 раздела 1";
				НазваниеПоказателяПравойЧасти = "строка 030 раздела 1 - строка 040 раздела 1 при  условии, что строка 050 раздела 1 > 0";
				
				ЛеваяЧасть = Раздел1.П000010005003;
				
				ПраваяЧасть = Раздел1.П000010003003 - Раздел1.П000010004003;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			КонецЕсли;
			
			
			//1.6
			ЛистА = ТаблицаСтраницыЛистА;
			ЛистБ = ТаблицаСтраницыЛистБ;
			ЛистВ = ТаблицаСтраницыЛистВ;
			
			ТекстФормулы = "строка 060 раздела 1 = 0, 13* строка 050 раздела 1 = 0,13* ( /строка 010 раздела 1 - строка 020 раздела 1/ - / строка 040 раздела 1/) = 0, 13 * ( пп. 2.1 Листа А по ставке 13% + пп.2.1 Листа Б по ставке 13% + пп.3.1 Листа В  по ставке 13% - пп.1.9 Листа Г1 - строка 040 раздела 1)";
			Нарушение = "ст.209, 210  НК РФ";
			Описание = "если строка 060 раздела 1 <,> 0, 13* строка 050 раздела 1 <,>  0,13* ( /строка 010 раздела 1 - строка 020 раздела 1/ - / строка 040 раздела 1/) <,>  0, 13 * ( пп. 2.1 Листа А по ставке 13% + пп.2.1 Листа Б по ставке 13% + пп.3.1 Листа В по ставке 13% - пп.1.9 Листа Г1 - строка 040 раздела 1), то  занижена/завышена общая сумма налога, исчисленная к уплате по ставке 13%";
			
			Часть1 = Окр(Раздел1.П000010006003, 0);
			
			Часть2 = Окр(Раздел1.П000010005003 * 0.13, 0);
			
			Часть3 = Окр((Раздел1.П000010001003
			- Раздел1.П000010002003
			- Раздел1.П000010004003)*0.13,0);
			
			Часть3 = ?(Часть3 < 0, 0, Часть3);		
			
			ЛистА_П000070008001 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "ЛистА", "П000070008001", Ложь, Новый Структура("СтавкаНалога",13));
			ЛистБ_П000080001501 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "ЛистБ", "П000080001501", Ложь, Новый Структура("СтавкаНалога",13));
			ЛистВ_П000090001101 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "ЛистВ", "П000090001101", Ложь);
			
			Часть4 = Окр((ЛистА_П000070008001
			+ ЛистБ_П000080001501
			+ ЛистВ_П000090001101
			- ЛистГ1.П000010116004
			- Раздел1.П000010004003)*0.13, 0);
			
			Часть4 = ?(Часть4 < 0, 0, Часть4);		
			
			Расшифровка = Строка(Часть1) + " " + Знак + " " + Строка(Часть2) + " " + Знак + " "+ Строка(Часть3) + " " + Знак + " " + Строка(Часть4);
			
			Если Часть1 = Часть2 и Часть1 = Часть3 и Часть1 = Часть4 Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//1.7
			
			ТекстФормулы = "Строка 090 раздела 1 = пп.2.4 Листа Б по ставке 13%";
			Нарушение = "ст. 228 НК РФ";
			Описание = "если строка 090 раздела 1 >,< пп.2.4 Листа Б по ставке 13%, то завышена/занижена сумма налога, уплаченная в иностранных государствах, подлежащая зачету в РФ";
			
			Знак = "=";
			НазваниеПоказателяЛевойЧасти = "Строка 090 раздела 1";
			НазваниеПоказателяПравойЧасти = "пп.2.4 Листа Б по ставке 13%";
			
			ЛеваяЧасть = Раздел1.П000010009003;
			
			
			КоличествоСтраницЛистаБ = ЛистБ.Количество();
			ЛистБ_П000080001801 = 0;
			ЗнакРавно = Истина;
			
			ПраваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "ЛистБ", "П000080001801", Ложь, Новый Структура("СтавкаНалога",13));
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//1.8
			
			//Проверяем Только если Раздел1.П000010010003 > 0
			Если Раздел1.П000010010003 > 0 Тогда
				
				
				ТекстФормулы = "строка 100 раздела 1 = ( строка 070 раздела 1 +  строка 075 раздела 1 + строка 080 раздела 1   - строка 060 раздела 1)  при условии, что строка  100  раздела 1 > 0";
				Нарушение = "ст. 210, ст. 225, ст. 231  НК РФ";
				Описание = "если строка 100 раздела 1 >, < ( строка 070 раздела 1 +  строка 075 раздела 1 + строка 080 раздела 1) - строка 060 раздела 1  при условии, что строка  100  раздела 1 > 0, то завышена/занижена сумма налога по ставке 13%, подлежащая возврату из бюджета";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел1.П000010010003;
				
				ПраваяЧасть = Раздел1.П000010007003
				+ Раздел1.П000010007503
				+ Раздел1.П000010008003
				- Раздел1.П000010006003;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
			
			//1.9
			//Проверяем Только если Раздел1.П000010011003 > 0
			Если Раздел1.П000010011003 > 0 Тогда
				
				
				ТекстФормулы = "строка  110 раздела 1 =  строка 060 раздела 1 - ( строка 070 раздела 1 +  строка 075 раздела 1 + строка 080 раздела 1+ строка 090 раздела 1) при  условии, что строка 110 раздела 1 > 0";
				Нарушение = "ст.227, 227.1, 228  НК РФ";
				Описание = "если строка  110 раздела 1 >,< строка 060 раздела 1 - ( строка 070 раздела 1 +  строка 075 раздела 1 + строка 080 раздела 1+ строка 090 раздела 1) при  условии, что строка 110 раздела 1 > 0, то  занижена/завышена сумма налога по ставке 13%, подлежащая уплате (доплате) в бюджет";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел1.П000010011003;
				
				ПраваяЧасть = Раздел1.П000010006003
				- Раздел1.П000010007003
				- Раздел1.П000010007503
				- Раздел1.П000010008003
				- Раздел1.П000010009003;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздела2(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел2 = СтруктураДанныхРаздел2;
	ЛистГ1 = СтруктураДанныхЛистГ1;
	ЛистГ2 = ТаблицаСтраницыЛистГ2;
		
		
		СтавкаНалога = 30;
		Если ЭтаФорма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			ЕстьДанныеНаДрЛистах = Ложь;
			
			ПроверяемыеЛисты = Новый Структура("ЛистА, ЛистБ, ЛистГ2",
			Новый Структура("СтавкаНалога", СтавкаНалога),
			Новый Структура("СтавкаНалога", СтавкаНалога),
			Неопределено);
			
			Для Каждого ИмяИУсловиеЛиста Из ПроверяемыеЛисты Цикл
				
				Для Каждого Лист Из ЭтаФорма["ТаблицаСтраницы" + ИмяИУсловиеЛиста.Ключ] Цикл
					
					Если СтраницаРазделаЗаполнена(Лист.Данные[0].Значение, ИмяИУсловиеЛиста.Значение) Тогда
						ЕстьДанныеНаДрЛистах = Истина;
						Прервать;	
					КонецЕсли;	
					
				КонецЦикла;	
				
				Если ЕстьДанныеНаДрЛистах Тогда
					Прервать;	
				КонецЕсли;
				
			КонецЦикла;	
			
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел2) ИЛИ ЕстьДанныеНаДрЛистах;
		Иначе
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел2);
		КонецЕсли;	
		
		Если НужноПроверять Тогда
			
			//2.1
			
			ТекстФормулы = "строка 020 Раздела 2 = пп.1.9 Листа Г1 + п. 2 Листа Г2";
			Нарушение = "п.28 ст.217 НК РФ";
			Описание = "если строка 020 Раздела 2 >,< пп.1.9 Листа Г1 + п. 2 Листа Г2, то завышена/занижена сумма дохода, не подлежащая налогообложению";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел2.П000020002003;
			
			ПраваяЧасть = ЛистГ1.П000010116004 + СуммаПоказателяПоВсемСтраницам(ЭтаФорма, "ЛистГ2", "П000010207001", Ложь);

			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//2.2
			
			ТекстФормулы = "строка 030 раздела 2 = строка 010 раздела 2 - строка 020 раздела 2";
			Нарушение = "ст.210 НК РФ";
			Описание = "если строка 030 раздела 2 <,> строка 010 раздела 2 - строка 020 раздела 2 , то занижена/завышена сумма дохода, подлежащая налогообложению по ставке 30%";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел2.П000020003003;
			
			ПраваяЧасть = Раздел2.П000020001003 - Раздел2.П000020002003;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//2.3
			
			ЛистЗПродолжение = СтруктураДанныхЛистЗПродолжение;
			
			ТекстФормулы = "строка 040 Раздела 2 = пп. 11.3 Листа З";
			Нарушение = "ст.214.1 НК РФ";
			Описание = "если строка 040 Раздела 2 >,< пп. 11.3 Листа З, то завышена/занижена сумма расходов (убытков) по операциям с ценными бумагами и операциям с финансовыми инструментами срочных сделок, принимаемая к вычету";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел2.П000020004003;
			
			ПраваяЧасть = ЛистЗПродолжение.П000022043001;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//2.4
			
			ТекстФормулы = "строка 050 раздела 2 = строка 010 раздела 2 - строка 020 раздела 2 - строка 040 раздела 2";
			Нарушение = "ст.210 НК РФ";
			Описание = "если строка 050 раздела 2 <,> строка 010 раздела 2 - строка 020 раздела 2 - строка 040 раздела 2, то занижена/завышена налоговая база по доходам, облагаемым по ставке 30%";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел2.П000020005003;
			
			ПраваяЧасть = Раздел2.П000020001003 -  Раздел2.П000020002003 -  Раздел2.П000020004003;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//2.5
			
			ЛистА = ТаблицаСтраницыЛистА;
			
			ТекстФормулы = "строка 060 раздела 2 = пп.2.3 Листа А по ставке 30%";
			Нарушение = "ст. 207, 209, 210,  217 НК РФ";
			Описание = "если строка 060 раздела 2 <,> пп.2.3 Листа А по ставке 30%, то занижена/завышена сумма налога, исчисленная к уплате по ставке 30%";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел2.П000020006003;
			
			
			
			ПраваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистА", "П000070010001", Ложь, Новый Структура("СтавкаНалога",30));
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//2.6
			
			Если Раздел2.П000020008003 > 0 Тогда
				
				ТекстФормулы = "строка 080 раздела 2 = (строка 070 раздела 2 - строка  060 раздела 2), при условии, что строка  080 раздела 2 >0";
				Нарушение = "ст. 210, ст. 225, ст. 226  НК РФ";
				Описание = "если строка 080 раздела 2 >,< (строка 070 раздела 2 - строка  060 раздела 2), при условии, что строка  080 раздела 2 >0, то завышена/занижена сумма налога по ставке 30% подлежащая возврату из бюджета";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел2.П000020008003;
				
				ПраваяЧасть = Раздел2.П000020007003 -  Раздел2.П000020006003;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
			
			
			
			//2.7
			
			Если Раздел2.П000020009003 > 0 Тогда
				
				ТекстФормулы = " строка 090 раздела 2 = (строка 060 раздела 2 - строка 070 раздела 2) , при условии, что строка 090 раздела 2 > 0  ";
				Нарушение = "ст. 210, ст. 225, ст. 226  НК РФ";
				Описание = "если строка 080 раздела 2 >,< (строка 070 раздела 2 - строка  060 раздела 2), при условии, что строка  080 раздела 2 >0, то завышена/занижена сумма налога по ставке 30% подлежащая возврату из бюджета";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел2.П000020009003;
				
				ПраваяЧасть = Раздел2.П000020006003 - Раздел2.П000020007003;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
		КонецЕсли;
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздела3(СтруктураРезультата)
	
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел3 = СтруктураДанныхРаздел3;
	ЛистГ2 = ТаблицаСтраницыЛистГ2;
		
		СтавкаНалога = 35;
		Если ЭтаФорма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			ЕстьДанныеНаДрЛистах = Ложь;
			
			ПроверяемыеЛисты = Новый Структура("ЛистА, ЛистБ, ЛистГ2",
			Новый Структура("СтавкаНалога", СтавкаНалога),
			Новый Структура("СтавкаНалога", СтавкаНалога),
			Неопределено);
			
			Для Каждого ИмяИУсловиеЛиста Из ПроверяемыеЛисты Цикл
				
				Для Каждого Лист Из ЭтаФорма["ТаблицаСтраницы" + ИмяИУсловиеЛиста.Ключ] Цикл
					
					Если СтраницаРазделаЗаполнена(Лист.Данные[0].Значение, ИмяИУсловиеЛиста.Значение) Тогда
						ЕстьДанныеНаДрЛистах = Истина;
						Прервать;	
					КонецЕсли;	
					
				КонецЦикла;	
				
				Если ЕстьДанныеНаДрЛистах Тогда
					Прервать;	
				КонецЕсли;
				
			КонецЦикла;	
			
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел3) ИЛИ ЕстьДанныеНаДрЛистах;
		Иначе
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел3);
		КонецЕсли;	
		
		Если НужноПроверять Тогда
			
			
			ТаблСообщений = Новый ТаблицаЗначений;
			ТаблСообщений.Колонки.Добавить("ЭтоОшибка");
			ТаблСообщений.Колонки.Добавить("ТекстВыводимыйНаОсновнойЛист");
			ТаблСообщений.Колонки.Добавить("ТекстВыводимыйВРасш");
			ТаблСообщений.Колонки.Добавить("ТаблицаДляРасшифровки");
			ТаблСообщений.Колонки.Добавить("Описание");
			
			//3.1
			
			ТекстФормулы = "строка 020 Раздела 3 = п.2 Листа Г2";
			Нарушение = "п.28 ст.217 НК РФ";
			Описание = "если строка 020 Раздела 3 >,< п. 2 Листа Г2, то завышена/занижена сумма дохода, не подлежащая налогообложению";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел3.П000030002003;
			
			ПраваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистГ2", "П000010207001", Ложь);
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//3.2
			
			ТекстФормулы = "строка 030 раздела 3 = строка 010 раздела 3- строка 020 раздела 3";
			Нарушение = "ст.210 НК РФ";
			Описание = "если строка 030 раздела 3 <,> строка 010 раздела 3 - строка 020 раздела 3, то занижена/завышена налоговая база по доходам, облагаемым по ставке 35%";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел3.П000030003003;
			
			ПраваяЧасть = Раздел3.П000030001003 - Раздел3.П000030002003;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//3.3
			
			ЛистА = ТаблицаСтраницыЛистА;
			ЛистБ = ТаблицаСтраницыЛистБ;
			
			ТекстФормулы = "строка 040 раздела 3 = пп.2.3 Листа А по ставке  35% + пп.2.3 Листа Б по ставке 35%";
			Нарушение = "ст. 209, 210, 212, 213, 217 НК РФ";
			Описание = "если строка 040 раздела 3 <,> пп.2.3 Листа А по ставке  35% + пп.2.3 Листа Б по ставке 35%, то занижена/завышена сумма налога, исчисленная к уплате по ставке 35%";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел3.П000030004003;
			
			ЛистА_П000070010001 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистА", "П000070010001", Ложь, Новый Структура("СтавкаНалога",35));
			
			ЛистБ_П000080001701 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистБ", "П000080001701", Ложь, Новый Структура("СтавкаНалога",35));
			
			ПраваяЧасть = ЛистА_П000070010001 + ЛистБ_П000080001701;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//3.4
			
			ТекстФормулы = "строка 060 раздела 3 = пп.2.4 Листа Б по ставке 35%";
			Нарушение = "ст. 228 НК РФ";
			Описание = "если строка 060 раздела 3 >,< пп.2.4 Листа Б по ставке 35%, то завышена/занижена сумма налога, уплаченная в иностранных государствах, подлежащая зачету в РФ";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел3.П000030006003;
			
			ПраваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистБ", "П000080001801", Ложь, Новый Структура("СтавкаНалога",35));
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//3.5
			
			Если Раздел3.П000030007003 > 0 Тогда
				
				ТекстФормулы = "строка 070 раздела 3 = ( строка 050 раздела 3 + строка 051 раздела 3 - строка 040 раздела 3)  при условии, что строка  070  раздела 3 > 0";
				Нарушение = "ст. 210, ст. 225, ст. 226  НК РФ";
				Описание = "если строка 070 раздела 3 >,< (строка 050 раздела 3 + строка 051 раздела 3 - строка  040 раздела 3), при условии, что строка  070 раздела 3 >0, то завышена/занижена сумма налога по ставке 35%, подлежащая возврату из бюджета";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел3.П000030007003;
				
				ПраваяЧасть = Раздел3.П000030005003 + Раздел3.П000030005103 - Раздел3.П000030004003;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
			
			//3.6
			
			Если Раздел3.П000030008003 > 0 Тогда
				
				ТекстФормулы = "строка 080 раздела 3 = строка 040 раздела 3 - (строка 050 раздела 3 + строка 051 раздела 3 + строка 060 раздела 3), при условии, что строка 080 раздела 3 > 0";
				Нарушение = "ст.228 НК РФ";
				Описание = " если строка 080 раздела 3 <,> строка 040 раздела 3 - (строка 050 раздела 3 + строка 051 раздела 3 + строка 060 раздела 3), при условии, что строка 080 раздела 3 > 0, то занижена/завышена сумма налога по ставке 35%, подлежащая уплате (доплате) в бюджет";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел3.П000030008003;
				
				ПраваяЧасть = Раздел3.П000030004003 - (Раздел3.П000030005003 + Раздел3.П000030005103 +  Раздел3.П000030006003);
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
		КонецЕсли;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздела4(СтруктураРезультата)
	
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел4 = СтруктураДанныхРаздел4;
		
		СтавкаНалога = 9;
		Если ЭтаФорма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			ЕстьДанныеНаДрЛистах = Ложь;
			
			ПроверяемыеЛисты = Новый Структура("ЛистА, ЛистБ",
			Новый Структура("СтавкаНалога", СтавкаНалога),
			Новый Структура("СтавкаНалога", СтавкаНалога));
			
			Для Каждого ИмяИУсловиеЛиста Из ПроверяемыеЛисты Цикл
				
				Для Каждого Лист Из ЭтаФорма["ТаблицаСтраницы" + ИмяИУсловиеЛиста.Ключ] Цикл
					
					Если СтраницаРазделаЗаполнена(Лист.Данные[0].Значение, ИмяИУсловиеЛиста.Значение) Тогда
						ЕстьДанныеНаДрЛистах = Истина;
						Прервать;	
					КонецЕсли;	
					
				КонецЦикла;	
				
				Если ЕстьДанныеНаДрЛистах Тогда
					Прервать;	
				КонецЕсли;
				
			КонецЦикла;	
			
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел4) ИЛИ ЕстьДанныеНаДрЛистах;
		Иначе
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел4);
		КонецЕсли;	
		
		Если НужноПроверять Тогда
			
			ТаблСообщений = Новый ТаблицаЗначений;
			ТаблСообщений.Колонки.Добавить("ЭтоОшибка");
			ТаблСообщений.Колонки.Добавить("ТекстВыводимыйНаОсновнойЛист");
			ТаблСообщений.Колонки.Добавить("ТекстВыводимыйВРасш");
			ТаблСообщений.Колонки.Добавить("ТаблицаДляРасшифровки");
			ТаблСообщений.Колонки.Добавить("Описание");
			
			//4.1
			
			ЛистА = ТаблицаСтраницыЛистА;
			ЛистБ = ТаблицаСтраницыЛистБ;
			
			ТекстФормулы = "строка 030 раздела 4 = пп.2.3 Листа А по ставке 9% + пп. 2.3 Листа Б по ставке 9%";
			Нарушение = "ст. 214 НК РФ";
			Описание = "если строка 030 раздела 4 <,> пп.2.3 Листа А по ставке 9% + пп. 2.3 Листа Б по ставке 9%, то занижена/завышена сумма налога, исчисленная к уплате по ставке 9%";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел4.П000040003003;
			
			ЛистА_П000070010001 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистА", "П000070010001", Ложь, Новый Структура("СтавкаНалога",9));
			
			ЛистБ_П000080001701 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистБ", "П000080001701", Ложь, Новый Структура("СтавкаНалога",9));
			
			ПраваяЧасть = ЛистА_П000070010001 + ЛистБ_П000080001701;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//4.2
			
			ТекстФормулы = "строка 050 раздела 4 = пп.2.4 Листа Б по ставке 9%";
			Нарушение = "ст. 228 НК РФ";
			Описание = "если строка 050 раздела 4 >,< пп.2.4 Листа Б по ставке 9%, то завышена/занижена сумма налога, уплаченная в иностранных государствах, подлежащая зачету в РФ";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел4.П000040005003;
			
			ПраваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистБ", "П000080001801", Ложь, Новый Структура("СтавкаНалога",9));
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//4.3
			
			Если Раздел4.П000040006003 > 0 Тогда
				
				ТекстФормулы = "строка 060 раздела 4 = ( строка 040 раздела 4  - строка 030 раздела 4)  при условии, что строка  060  раздела 4 > 0";
				Нарушение = "ст. 210, ст. 225, ст. 231  НК РФ";
				Описание = "если строка 060 раздела 4 >,< ( строка 040 раздела 4 - строка 030 раздела 4)  при условии, что строка  060 раздела 4 > 0, то завышена/занижена сумма налога по ставке 9%, подлежащая возврату из бюджета";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел4.П000040006003;
				
				ПраваяЧасть = Раздел4.П000040004003 - Раздел4.П000040003003;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
			
			//4.4
			
			Если Раздел4.П000040007003 > 0 Тогда
				
				ТекстФормулы = "строка  070 раздела 4 =  строка 030 раздела 4 - (строка 040 раздела 4 + строка 050 раздела 4) при  условии, что строка 070 раздела 4 > 0";
				Нарушение = "ст.228 НК РФ";
				Описание = "если строка  070 раздела 4 <,>  строка 030 раздела 4 - (строка 040 раздела 4 + строка 050 раздела 4) при  условии, что строка 070 раздела 4 > 0, то занижена/завышена сумма налога по ставке 9%, подлежащая  уплате (доплате) в бюджет";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел4.П000040007003;
				
				ПраваяЧасть = Раздел4.П000040003003 - (Раздел4.П000040004003 + Раздел4.П000040005003);
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
		КонецЕсли;
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздела5(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел5 = СтруктураДанныхРаздел5;
		
		СтавкаНалога = 15;
		Если ЭтаФорма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			ЕстьДанныеНаДрЛистах = Ложь;
			
			ПроверяемыеЛисты = Новый Структура("ЛистА, ЛистБ",
			Новый Структура("СтавкаНалога", СтавкаНалога),
			Новый Структура("СтавкаНалога", СтавкаНалога));
			
			Для Каждого ИмяИУсловиеЛиста Из ПроверяемыеЛисты Цикл
				
				Для Каждого Лист Из ЭтаФорма["ТаблицаСтраницы" + ИмяИУсловиеЛиста.Ключ] Цикл
					
					Если СтраницаРазделаЗаполнена(Лист.Данные[0].Значение, ИмяИУсловиеЛиста.Значение) Тогда
						ЕстьДанныеНаДрЛистах = Истина;
						Прервать;	
					КонецЕсли;	
					
				КонецЦикла;	
				
				Если ЕстьДанныеНаДрЛистах Тогда
					Прервать;	
				КонецЕсли;
				
			КонецЦикла;	
			
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел5) ИЛИ ЕстьДанныеНаДрЛистах;
		Иначе
			НужноПроверять = СтраницаРазделаЗаполнена(Раздел5);
		КонецЕсли;	
		
		Если НужноПроверять Тогда
			
			//5.1
			
			ЛистА = ТаблицаСтраницыЛистА;
			
			ТекстФормулы = "строка 030 раздела 5 = пп.2.3 Листа А по ставке 15%";
			Нарушение = "ст. 214 НК РФ";
			Описание = "если строка 030 раздела 5 <,> пп.2.3 Листа А по ставке 15%, то занижена/завышена сумма налога, исчисленная к уплате по ставке 15%";
			
			Знак = "=";
			
			ЛеваяЧасть = Раздел5.П000050003003;
			
			ПраваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистА", "П000070010001", Ложь, Новый Структура("СтавкаНалога",15));
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//5.2
			
			Если Раздел5.П000050005003 > 0 Тогда
				
				ТекстФормулы = "строка 050 раздела 5 = (строка 040 раздела 5   - строка 030 раздела 5)  при условии, что строка  050  раздела 5 > 0";
				Нарушение = "ст. 210, ст. 225, ст. 231  НК РФ";
				Описание = "если строка 050 раздела 5 >,< (строка 040 раздела 5 - строка 030 раздела 5)  при условии, что строка  050  раздела 5 > 0, то завышена/занижена сумма налога по ставке 15%, подлежащая возврату из бюджета";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел5.П000050005003;
				
				ПраваяЧасть = Раздел5.П000050004003 - Раздел5.П000050003003;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
			
			//5.3
			
			Если Раздел5.П000050006003 > 0 Тогда
				
				ТекстФормулы = "строка  060 раздела 5 =  (строка 030 раздела 5 - строка 040 раздела 5) при  условии, что строка 060 раздела 5 > 0  ";
				Нарушение = "ст.228 НК РФ";
				Описание = "если строка  060 раздела 5 <,>  (строка 030 раздела 5 - строка 040 раздела 5) при  условии, что строка 060 раздела 5 > 0, то занижена/завышена сумма налога по ставке 15%, подлежащая  уплате (доплате) в бюджет";
				
				Знак = "=";
				
				ЛеваяЧасть = Раздел5.П000050006003;
				
				ПраваяЧасть = Раздел5.П000050003003 - Раздел5.П000050004003;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЕсли;
		КонецЕсли;
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздела6(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
		Раздел6 = ТаблицаСтраницыРаздел6;
		Раздел1 = СтруктураДанныхРаздел1;
		Раздел2 = СтруктураДанныхРаздел2;
		Раздел3 = СтруктураДанныхРаздел3;
		Раздел4 = СтруктураДанныхРаздел4;
		Раздел5 = СтруктураДанныхРаздел5;
		
		//6.1
		
		ТекстФормулы = "строка 040 раздела 6 = строка 110 раздела 1 + строка 090 раздела 2 + строка 080 раздела 3+ строка 070 раздела 4 + строка 060 раздела 5, если уплата по одному КБК";
		Нарушение = "ст. 23 НК РФ";
		Описание = "если строка 040 раздела 6 >.< строка 110 раздела 1 + строка 090 раздела 2 + строка 080 раздела 3+ строка 070 раздела 4 + строка 060 раздела 5, если уплата по одному КБК, то завышена/занижена сумма налога к уплате (доплате)";
		
		Знак = "=";
		
		КоличествоСтраницРаздела6 = Раздел6.Количество();
		Раздел6_П000060004003 = 0;
		ЗнакРавно = Истина;
		КБК = Раздел6[0].Данные[0].Значение.П000060002003;
		
		ОдинКБК = Истина;
		
		Для НомСтр = 1 По КоличествоСтраницРаздела6 Цикл
			Если Раздел6[НомСтр - 1].Данные[0].Значение.П000060002003 <> КБК Тогда
				ОдинКБК = Ложь;
			КонецЕсли;
			П000060004003 = Раздел6[НомСтр - 1].Данные[0].Значение.П000060004003;
			Раздел6_П000060004003 = Раздел6_П000060004003 + П000060004003;
			ЗнакРавно = Ложь;
		КонецЦикла;
		
		ЛеваяЧасть = Раздел6_П000060004003;
		
		ПраваяЧасть = Окр(Раздел1.П000010011003 + Раздел2.П000020009003 + Раздел3.П000030008003 + Раздел4.П000040007003 + Раздел5.П000050006003, 0);
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если ОдинКБК Тогда
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
		Иначе
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		КонецЕсли;
		
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//6.2
		
		ТекстФормулы = "Уплата НДФЛ производится по разным КБК и сумма строк 040 всех листов раздела 6 = строка 110 раздела 1 + строка 090 раздела 2 + строка 080 раздела 3+ строка 070 раздела 4 + строка 060 раздела 5";
		Нарушение = "ст. 23 НК РФ";
		Описание = "если уплата НДФЛ производится по разным КБК и сумма строк 040 всех листов раздела 6 <,> строка 110 раздела 1 + строка 090 раздела 2 + строка 080 раздела 3+ строка 070 раздела 4 + строка 060 раздела 5, то занижена/завышена сумма налога к уплате (доплате)";
		
		Знак = "=";
		
		КоличествоСтраницРаздела6 = Раздел6.Количество();
		Раздел6_П000060004003 = 0;
		ЗнакРавно = Истина;
		КБК = Раздел6[0].Данные[0].Значение.П000060002003;
		
		Для НомСтр = 1 По КоличествоСтраницРаздела6 Цикл
			П000060004003 = Раздел6[НомСтр - 1].Данные[0].Значение.П000060004003;
			Раздел6_П000060004003 = Раздел6_П000060004003 + П000060004003;                                                                                               
			ЗнакРавно = Ложь;
		КонецЦикла;
		
		ЛеваяЧасть = Раздел6_П000060004003;
		
		ПраваяЧасть = Раздел1.П000010011003 + Раздел2.П000020009003 + Раздел3.П000030008003 + Раздел4.П000040007003 + Раздел5.П000050006003;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если Не ОдинКБК Тогда
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
		Иначе
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		КонецЕсли;
		
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//6.3
		
		ТекстФормулы = "строка 050 раздела 6 = строка 100 раздела 1 + строка 080 раздела 2 + строка 070 раздела 3 + строка 060 раздела 4 + строка 050 раздела 5, если возврат по одному ОКТМО и одному КБК";
		Нарушение = "ст. 23 НК РФ";
		Описание = "если строка 050 раздела 6 >,< строка 100 раздела 1 + строка 080 раздела 2 + строка 070 раздела 3 + строка 060 раздела 4 + строка 050 раздела 5, и если возврат по одному ОКТМО и одному КБК, то завышена/занижена сумма налога к возврату";
		
		Знак = "=";
		
		КоличествоСтраницРаздела6 = Раздел6.Количество();
		Раздел6_П000060005003 = 0;
		ЗнакРавно = Истина;
		ОКАТО = Раздел6[0].Данные[0].Значение.П000060003003;
		ОдинОКАТО = Истина;
		
		Для НомСтр = 1 По КоличествоСтраницРаздела6 Цикл
			Если Раздел6[НомСтр - 1].Данные[0].Значение.П000060003003 <> ОКАТО Тогда
				ОдинОКАТО = Ложь;
			КонецЕсли;
			П000060005003 = Раздел6[НомСтр - 1].Данные[0].Значение.П000060005003;
			Раздел6_П000060005003 = Раздел6_П000060005003 + П000060005003;
			ЗнакРавно = Ложь;
		КонецЦикла;
		
		ЛеваяЧасть = Раздел6_П000060005003;
		
		ПраваяЧасть = Раздел1.П000010010003 + Раздел2.П000020008003 + Раздел3.П000030007003 + Раздел4.П000040006003 + Раздел5.П000050005003;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если ОдинКБК И ОдинОКАТО Тогда  //6.3
			
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//6.4
		
		ТекстФормулы = "если возврат производится по ОКТМО муниципального образования по месту жительства НП и (или) по ОКТМО по месту нахождения налоговых агентов и сумма строк 050 всех листов раздела 6 = строка 100 раздела 1 + строка 080 раздела 2 + строка 070 раздела 3 + строка 060 раздела 4 + строка 050 раздела 5";
		Нарушение = "ст. 23 НК РФ";
		Описание = "если возврат производится по ОКТМО муниципального образования по месту жительства НП и (или) по ОКТМО по месту нахождения налоговых агентов и сумма строк 050 всех листов раздела 6 >,< строка 100 раздела 1 + строка 080 раздела 2 + строка 070 раздела 3 + строка 060 раздела 4 + строка 050 раздела 5, то завышена/занижена сумма налога к возврату";
		
		Знак = "=";
		
		КоличествоСтраницРаздела6 = Раздел6.Количество();
		Раздел6_П000060005003 = 0;
		ЗнакРавно = Истина;
		
		Для НомСтр = 1 По КоличествоСтраницРаздела6 Цикл
			П000060005003 = Раздел6[НомСтр - 1].Данные[0].Значение.П000060005003;
			Раздел6_П000060005003 = Раздел6_П000060005003 + П000060005003;
			ЗнакРавно = Ложь;
		КонецЦикла;
		
		ЛеваяЧасть = Раздел6_П000060005003;
		
		ПраваяЧасть = Раздел1.П000010010003 + Раздел2.П000020008003 + Раздел3.П000030007003 + Раздел4.П000040006003 + Раздел5.П000050005003;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если Не ОдинОКАТО Тогда
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаА(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	//7.1
		
	ЛистА = ТаблицаСтраницыЛистА;
	
	Нарушение = "ст. 210 НК РФ";
	
	КоличествоСтраницЛистаА = ЛистА.Количество();
	
	Для Каждого Ставка Из ЭтаФорма.мСтавкиНалога Цикл
		
		ТекСтавкаНалога = Число(?(Ставка.Код = "",0,Ставка.Код));
		
		ЗнакРавно = Истина;
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистА", "П000070008001", Ложь, Новый Структура("СтавкаНалога", ТекСтавкаНалога));
		
		Если ЛеваяЧасть > 0 Тогда
			
			ТекстФормулы = "пп. 2.1 Листа А по ставке " + ТекСтавкаНалога + "% = Общей сумме  строк 040 всех Листов А по ставке "+ ТекСтавкаНалога + "%";
			Описание = "если пп. 2.1 Листа А по ставке " + ТекСтавкаНалога + "% <,> Общей сумме  строк 040  всех Листов А по ставке "+ ТекСтавкаНалога + "%, то занижена/завышена сумма дохода";
			
			
			СтрокаПраваяЧасть = "";
			ПраваяЧасть =0;
			СуммаСтрок = 0;
			ЗнакРавно = Истина;
			Для НомСтр = 1 По КоличествоСтраницЛистаА Цикл
				
				ТаблицаБлока = ЛистА[НомСтр - 1].Данные[0].Значение;
				СтавкаНалога = ТаблицаБлока.СтавкаНалога;
				
				Если СтавкаНалога = ТекСтавкаНалога Тогда
						
					СуммаСтрок = 0;
					СчСтрок = 1;
					Пока  ТаблицаБлока.Свойство("П000070001005_" + СчСтрок) Цикл
						Значение = ТаблицаБлока["П000070001005_" + СчСтрок];
						СуммаСтрок = СуммаСтрок + Значение;
						СтрокаПраваяЧасть = СтрокаПраваяЧасть + ?(ЗнакРавно," = ", " + ") + Строка(Окр(Значение, 2));
						ЗнакРавно = Ложь;
						СчСтрок = СчСтрок + 1;	
					КонецЦикла;
					
				КонецЕсли;
				
				
				ПраваяЧасть = ПраваяЧасть + Окр(СуммаСтрок, 2);
				
			КонецЦикла;	
			
			
			Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть;
			
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
		КонецЕсли;
	КонецЦикла;	
	
		
	//7.2
	КоличествоСтраницЛистаА = ЛистА.Количество();
	Нарушение = "ст. 23 НК РФ";
	
	Для Каждого Ставка Из ЭтаФорма.мСтавкиНалога Цикл
		
		ТекСтавкаНалога = Число(?(Ставка.Код = "",0,Ставка.Код));
		
		ЗнакРавно = Истина;
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистА", "П000070010001", Ложь, Новый Структура("СтавкаНалога", ТекСтавкаНалога));
		
		Если ЛеваяЧасть > 0 Тогда
			
			ТекстФормулы = "пп. 2.3 Листа А по ставке " + ТекСтавкаНалога + "% = Общей сумме строк 060  всех Листов А по ставке "+ ТекСтавкаНалога + "%";
			Описание = "если пп. 2.3 Листа А по ставке " + ТекСтавкаНалога + "% <,> Общей суммы  строк 060  всех Листов А по ставке "+ ТекСтавкаНалога + "%, то занижена/завышена сумма налога к уплате";
			
			ПраваяЧасть = 0;
			СтрокаПраваяЧасть = "";
					СуммаСтрок = 0;
			Для НомСтр = 1 По КоличествоСтраницЛистаА Цикл
				
				ТаблицаБлока = ЛистА[НомСтр - 1].Данные[0].Значение;
				СтавкаНалога = ТаблицаБлока.СтавкаНалога;
				
				Если СтавкаНалога = ТекСтавкаНалога Тогда
					
					СчСтрок = 1;
					СуммаСтрок = 0;
					Пока  ТаблицаБлока.Свойство("П000070001007_" + СчСтрок) Цикл
						Значение = ТаблицаБлока["П000070001007_" + СчСтрок];
						СуммаСтрок = СуммаСтрок + Значение;
						СтрокаПраваяЧасть = СтрокаПраваяЧасть + ?(ЗнакРавно," = ", " + ") + Строка(Значение);
						ЗнакРавно = Ложь;
						СчСтрок = СчСтрок + 1;	
					КонецЦикла;
					
					ПраваяЧасть = ПраваяЧасть + СуммаСтрок;
				КонецЕсли;
			КонецЦикла;
			
			
			Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть;
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		КонецЕсли;	
	КонецЦикла;	
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаБ(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	//8.1
	
	ЛистБ = ТаблицаСтраницыЛистБ;
	
	Нарушение = "ст.208 НК РФ";
	
	КоличествоСтраницЛистаБ = ЛистБ.Количество();
	
	Для Каждого Ставка Из ЭтаФорма.мСтавкиНалога Цикл
		ТекСтавкаНалога = Число(?(Ставка.Код = "",0,Ставка.Код));
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистБ", "П000080001501", Ложь, Новый Структура("СтавкаНалога", ТекСтавкаНалога));
		
		Если ЛеваяЧасть > 0 Тогда
			
			
			СтрокаПраваяЧасть1 = "";
			СтрокаПраваяЧасть2 = "";
			ПраваяЧасть1 = 0;
			ПраваяЧасть2 = 0;
			СуммаСтрок = 0;
			ТекстФормулы = "пп. 2.1 Листа Б по ставке " + ТекСтавкаНалога 
			+ "% = общей сумме строк 070 всех Листов Б по ставке "+ ТекСтавкаНалога 
			+ "% = общей сумме ( строка 060 * строка 050) всех Листов Б по ставке " + ТекСтавкаНалога + "%";
			
			Описание = "если пп. 2.1 Листа Б по ставке " + ТекСтавкаНалога 
			+ "% <,> общей суммы строк 070 всех Листов Б по ставке "+ ТекСтавкаНалога
			+ "%, > общей суммы ( строка 060 * строка 050) всех Листов Б по ставке " + ТекСтавкаНалога
			+ "%, то возможно занижение/завышение суммы дохода, полученной от источников за пределами Российской Федерации";
			ЗнакРавно1 = Истина;
			ЗнакРавно2 = Истина;
			Для НомСтр = 1 По КоличествоСтраницЛистаБ Цикл
				
				ТаблицаБлока = ЛистБ[НомСтр - 1].Данные[0].Значение;
				СтавкаНалога = ТаблицаБлока.СтавкаНалога;
				
				Если СтавкаНалога = ТекСтавкаНалога Тогда
					
					
					СчСтрок = 1;
					СуммаСтрок = 0;
					Пока  ТаблицаБлока.Свойство("П000080001008_" + СчСтрок) Цикл
						Значение = ТаблицаБлока["П000080001008_" + СчСтрок];
						СуммаСтрок = СуммаСтрок + Значение;
						СтрокаПраваяЧасть1 = СтрокаПраваяЧасть1 + ?(ЗнакРавно1," = ", " + ") + Строка(Значение);
						ЗнакРавно1 = Ложь;
						СчСтрок = СчСтрок + 1;	
					КонецЦикла;
					
					ПраваяЧасть1 = ПраваяЧасть1 + СуммаСтрок;
					
					СчСтрок = 1;
					СуммаСтрок = 0;
					Пока  ТаблицаБлока.Свойство("П000080001007_" + СчСтрок) Цикл
						Значение1 = ТаблицаБлока["П000080001007_" + СчСтрок];
						Значение2 = ТаблицаБлока["П000080001006_" + СчСтрок];
						СуммаСтрок = СуммаСтрок + Значение1*Значение2;
						
						СтрокаПраваяЧасть2 = СтрокаПраваяЧасть2 + ?(ЗнакРавно2," = (", " + (") + Строка(Значение1) + " * " + Строка(Значение2) + ")";
						ЗнакРавно2 = Ложь;
						СчСтрок = СчСтрок + 1;	
					КонецЦикла;
					
					ПраваяЧасть2 = ПраваяЧасть2 + СуммаСтрок;
					
					
				КонецЕсли;
			КонецЦикла;	
			
			
			Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть1 + СтрокаПраваяЧасть2;
			
			Если ЛеваяЧасть = ПраваяЧасть1 И ЛеваяЧасть = ПраваяЧасть2 Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		КонецЕсли;
	КонецЦикла;	
	//8.2
	
	Нарушение = "ст.232 НК РФ";
	
	Для Каждого Ставка Из ЭтаФорма.мСтавкиНалога Цикл
		ТекСтавкаНалога = Число(?(Ставка.Код = "",0,Ставка.Код));
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистБ", "П000080001601", Ложь, Новый Структура("СтавкаНалога", ТекСтавкаНалога));
		
		Если ЛеваяЧасть > 0 Тогда
			ЗнакРавно1 = Истина;
			ЗнакРавно2 = Истина;
			СтрокаПраваяЧасть1 = "";
			СтрокаПраваяЧасть2 = "";
			ПраваяЧасть1 = 0;
			ПраваяЧасть2 = 0;
			СуммаСтрок = 0;
			ТекстФормулы = "пп. 2.2 Листа Б по ставке " + ТекСтавкаНалога 
			+ "% = общей сумме строк 110 всех Листов Б по ставке "+ ТекСтавкаНалога 
			+ "% = общей сумме ( строка 100 * строка 090) всех Листов Б по ставке " + ТекСтавкаНалога + "%";
			
			Описание = "если пп. 2.2 Листа Б по ставке " + ТекСтавкаНалога 
			+ "% <,> общей суммы строк 110 всех Листов Б по ставке "+ ТекСтавкаНалога
			+ "%, > общей суммы ( строка 100 * строка 090) всех Листов Б по ставке " + ТекСтавкаНалога
			+ "%, то завышена/занижена сумма налога, уплаченная у источников за пределами Российской Федерации";
			
			
			Для НомСтр = 1 По КоличествоСтраницЛистаБ Цикл
				
				ТаблицаБлока = ЛистБ[НомСтр - 1].Данные[0].Значение;
				СтавкаНалога = ТаблицаБлока.СтавкаНалога;
				Если СтавкаНалога = ТекСтавкаНалога Тогда
					
					
					СчСтрок = 1;
					СуммаСтрок = 0;
					Пока  ТаблицаБлока.Свойство("П000080001012_" + СчСтрок) Цикл
						Значение = ТаблицаБлока["П000080001012_" + СчСтрок];
						СуммаСтрок = СуммаСтрок + Значение;
						СтрокаПраваяЧасть1 = СтрокаПраваяЧасть1 + ?(ЗнакРавно1," = ", " + ") + Строка(Значение);
						ЗнакРавно1 = Ложь;
						СчСтрок = СчСтрок + 1;	
					КонецЦикла;
					
					ПраваяЧасть1 = ПраваяЧасть1 + СуммаСтрок;
					
					СчСтрок = 1;
					СуммаСтрок = 0;
					Пока  ТаблицаБлока.Свойство("П000080001011_" + СчСтрок) Цикл
						Значение1 = ТаблицаБлока["П000080001011_" + СчСтрок];
						Значение2 = ТаблицаБлока["П000080001010_" + СчСтрок];
						СуммаСтрок = СуммаСтрок + Окр(Значение1*Значение2, 2);
						
						СтрокаПраваяЧасть2 = СтрокаПраваяЧасть2 + ?(ЗнакРавно2," = (", " + (") + Строка(Значение1) + " * " + Строка(Значение2) + ")";
						ЗнакРавно2 = Ложь;
						СчСтрок = СчСтрок + 1;	
					КонецЦикла;
					
					ПраваяЧасть2 = ПраваяЧасть2 + СуммаСтрок;
				КонецЕсли;
			КонецЦикла;	
			
			Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть1 + СтрокаПраваяЧасть2;
			
			Если ЛеваяЧасть = ПраваяЧасть1 И ЛеваяЧасть = ПраваяЧасть2 Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
		КонецЕсли;
	КонецЦикла;	
	//8.3
	
	Нарушение = "";
	
	Для Каждого Ставка Из ЭтаФорма.мСтавкиНалога Цикл
		ТекСтавкаНалога = Число(?(Ставка.Код = "",0,Ставка.Код));
		
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистБ", "П000080001701", Ложь, Новый Структура("СтавкаНалога", ТекСтавкаНалога));
		
		Если ЛеваяЧасть > 0 Тогда
			
			ЗнакРавно = Истина;
			
			СтрокаПраваяЧасть = "";
			ПраваяЧасть = 0;
			СуммаСтрок = 0;
			
			ТекстФормулы = "пп. 2.3 Листа Б по ставке " + ТекСтавкаНалога 
			+ "% = общей сумме строк 120 всех Листов Б по ставке "+ ТекСтавкаНалога + "%";
			
			Описание = "если пп. 2.3 Листа Б по ставке " + ТекСтавкаНалога 
			+ "% <,> общей суммы строк 120 всех Листов Б по ставке "+ ТекСтавкаНалога
			+ "%, то занижена/завышена сумма налога, исчисленная в Российской Федерации по по ставке " + ТекСтавкаНалога + "%";
			
			
			Для НомСтр = 1 По КоличествоСтраницЛистаБ Цикл
				
				ТаблицаБлока = ЛистБ[НомСтр - 1].Данные[0].Значение;
				СтавкаНалога = ТаблицаБлока.СтавкаНалога;
				Если СтавкаНалога = ТекСтавкаНалога Тогда
					
					
					СчСтрок = 1;
					СуммаСтрок = 0;
					Пока  ТаблицаБлока.Свойство("П000080001013_" + СчСтрок) Цикл
						Значение = ТаблицаБлока["П000080001013_" + СчСтрок];
						СуммаСтрок = СуммаСтрок + Значение;
						СтрокаПраваяЧасть = СтрокаПраваяЧасть + ?(ЗнакРавно," = ", " + ") + Строка(Значение);
						ЗнакРавно = Ложь;
						СчСтрок = СчСтрок + 1;	
					КонецЦикла;
					
					ПраваяЧасть = ПраваяЧасть + СуммаСтрок;
					
				КонецЕсли;
			КонецЦикла;	
			
			Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть;
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
		КонецЕсли;
	КонецЦикла;	
	//8.4
	
	ТекстФормулы = "пп. 2.4 Листа Б <,= строки 150 Листа Б";
	Нарушение = "ст.232 НК РФ";
	Описание = "если пп. 2.4 Листа Б >  строки 150 Листа Б, то ошибочно исчислена сумма налога, подлежащая зачету в Российской Федерации";
	
	Знак = "<=";
	
	Для Каждого Ставка Из ЭтаФорма.мСтавкиНалога Цикл
		
		ТекСтавкаНалога = Число(?(Ставка.Код = "",0,Ставка.Код));
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистБ", "П000080001801", Ложь, Новый Структура("СтавкаНалога", ТекСтавкаНалога));
		
		ПраваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистБ", "П000080001601", Ложь, Новый Структура("СтавкаНалога", ТекСтавкаНалога));
		
		Если ЛеваяЧасть <> 0 ИЛИ ПраваяЧасть <> 0 Тогда
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
				СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
				СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
				СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаВ(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
		//9.1
		
		ЛистВ =  ТаблицаСтраницыЛистВ;
		
		Нарушение = "ст. 221, 227 НК РФ";
		Описание = "если пп. 3.2 Листа В >,< суммы расходов *), то возможно необоснованное применение  профессиональных налоговых вычетов; включения в них затрат, непосредственно не связанных  с получением дохода от предпринимательской деятельности; завышение норматива  профессиональных налоговых вычетов, установленного для ИП; одновременное включение в состав профессиональных налоговых вычетов  как документально подтвержденных расходов, так и по нормативу в размере 20 % от общей суммы дохода; включение в состав  профессиональных налоговых вычетов затрат по  нормативу  в размере 20 % от общей суммы дохода для кода вида деятельности (строка 010) = 2 или 3; включение в состав профессиональных налоговых вычетов убытков прошлых лет / возможное занижение профессиональных налоговых вычетов";
		
		СуммаСтрок = 0;
		ПредпренимательскаяДеятельность = Истина;
		
		КоличествоСтраницЛистаВ = ЛистВ.Количество();
		СтрокаПраваяЧасть = "";
		ЗнакРавно = Истина;
		Для НомСтр = 1 По КоличествоСтраницЛистаВ Цикл
			ТаблицаБлока = ЛистВ[НомСтр - 1].Данные[0].Значение;
			Если ТаблицаБлока["П000090001001"] <> "1" Тогда
				ПредпренимательскаяДеятельность = Ложь;
			КонецЕсли;
			
			Если ПредпренимательскаяДеятельность И ТаблицаБлока["П000090001004"] = 0 Тогда
				Значение = ТаблицаБлока["П000090001010"];
			Иначе	
				Значение = ТаблицаБлока["П000090001004"];
			КонецЕсли;
			СтрокаПраваяЧасть = СтрокаПраваяЧасть + ?(ЗнакРавно," = ", " + ") + Строка(Значение);
			ЗнакРавно = Ложь;
			
		КонецЦикла;
		
		СуммаСтрок = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистВ", "П000090001004", Ложь)
		+ СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистВ", "П000090001010", Ложь, Новый Структура("П000090001004, П000090001001",0,"1"));
		
		Если СуммаСтрок = 0 И ПредпренимательскаяДеятельность Тогда
			
			ТекстФормулы = "пп. 3.2 Листа В = пп. 3.1 Листа В* 0,2 для кода вида деятельности (строка 010) = 1 при отсутствии документально подтвержденных расходов *)";
			
			
			ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистВ", "П000090001201", Ложь);
			                  
			ПраваяЧасть = Окр(СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистВ", "П000090001101", Ложь)*0.2, 2);
			СтрокаПраваяЧасть = " = " + Строка(ПраваяЧасть);
			
		Иначе	
			
			ТекстФормулы = "пп. 3.2 Листа В = сумме расходов  в соответствии с Порядком учета доходов и расходов и хозяйственных операций, утвержденным Приказом Минфина России и МНС России от 13.08.2002 № 86н / БГ-3-04/430";
			
			ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистВ", "П000090001201", Ложь);
			
			ПраваяЧасть = СуммаСтрок;
			
		КонецЕсли;
		
		
		Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть;
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//9.2
		
		ТекстФормулы = "пп. 3.2 Листа В <= пп. 3.1 Листа В ";
		Нарушение = "ст. 221 НК РФ";
		Описание = "если пп. 3.2 Листа В > пп. 3.1 Листа В, то по результатам  онп профессиональные  налоговые вычеты превысили сумму дохода от предпринимательской деятельностии и НП ФЛ  уменьшил налоговую базу по доходам, полученным в онп и непосредственно не связанным с предпринмательской  деятельностью, на сумму убытка.";
		
		Знак = "<=";
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистВ", "П000090001201", Ложь);
		
		ПраваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистВ", "П000090001101", Ложь);
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаГ1(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
		ЛистГ1 = СтруктураДанныхЛистГ1;
		
		//10.1
		
		ТекстФормулы = "пп.1.9 Листа Г1 = Лист Г1 (пп.1.1.2+пп.1.2.2+пп.1.3.2+пп.1.4.2+пп.1.5.2+пп.1.6.2+пп.1.7.2+пп.1.8)";
		Нарушение = "ст.217НК РФ";
		Описание = "если пп.1.9 Листа Г1 <,> Лист Г1 (пп.1.1.2+пп.1.2.2+пп.1.3.2+пп.1.4.2+пп.1.5.2+пп.1.6.2+1.7.2+пп.1.8), то  занижена/завышена сумма дохода, не подлежащая налогообложению";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистГ1.П000010116004;
		
		ПраваяЧасть = ЛистГ1.П000010102004
		+ ЛистГ1.П000010104004
		+ ЛистГ1.П000010106004
		+ ЛистГ1.П000010108004
		+ ЛистГ1.П000010110004
		+ ЛистГ1.П000010112004
		+ ЛистГ1.П000010114004
		+ ЛистГ1.П000010115004;
				
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
		+ Строка(ЛистГ1.П000010102004) + " + "
		+ Строка(ЛистГ1.П000010104004) + " + "
		+ Строка(ЛистГ1.П000010106004) + " + "
		+ Строка(ЛистГ1.П000010108004) + " + "
		+ Строка(ЛистГ1.П000010110004) + " + "
		+ Строка(ЛистГ1.П000010112004) + " + "
		+ Строка(ЛистГ1.П000010114004) + " + "
		+ Строка(ЛистГ1.П000010115004);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//10.2
		
		ТекстФормулы = "пп. 1.1.2 Листа Г1 <,= п.п. 1.1.1 Листа Г1 и пп. 1.1.2 Листа Г1 <,= (50000 руб. * кол-во детей)";
		Нарушение = "п.8 ст.217НК РФ";
		Описание = "если пп. 1.1.2  Листа Г1  > п.п. 1.1.1 Листа Г1; пп. 1.1.2  Листа Г1 > (50000 руб.* кол-во детей), то неправомерно освобождены доходы от налогообложения";
		мКомментарий = "КС не может быть проверено автоматически";
		
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистГ1.П000010102004;
		
		ПраваяЧасть = ЛистГ1.П000010101002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка,  мКомментарий);
		
		
		//10.3
		
		ТекстФормулы = "пп. 1.2.2 Листа Г1 <,= п.п. 1.2.1 Листа Г1; пп. 1.2.2  Листа Г1 <,= 4000 руб.";
		Нарушение = "ст.217НК РФ";
		Описание = "если пп. 1.2.2 Листа Г1 > п.п. 1.2.1 Листа Г1;  пп. 1.2.2 Листа Г1 > 4000 руб., то неправомерно освобождены доходы от налогообложения";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистГ1.П000010104004;
		
		ПраваяЧасть = ЛистГ1.П000010103002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть) + "; " + Строка(ЛеваяЧасть) + " " + Знак + " 4000";
		
		Если (ЛеваяЧасть <= ПраваяЧасть) И (ЛеваяЧасть <= 4000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//10.4
		
		ТекстФормулы = "пп. 1.3.2 Листа Г1 <,= п.п. 1.3.1 Листа Г1; пп. 1.3.2 Листа Г1 <,= 4000 руб";
		Нарушение = "ст.217НК РФ";
		Описание = "если пп. 1.3.2 Листа Г1  >  п.п. 1.3.1 Листа Г1;   пп. 1.3.2 Листа Г1 > 4000 руб., то неправомерно освобождены доходы от налогообложения";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистГ1.П000010106004;
		
		ПраваяЧасть = ЛистГ1.П000010105002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть) + "; " + Строка(ЛеваяЧасть) + " " + Знак + " 4000";
		
		Если (ЛеваяЧасть <= ПраваяЧасть) И (ЛеваяЧасть <= 4000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//10.5
		
		ТекстФормулы = "пп. 1.4.2 Листа Г1 <,= п.п. 1.4.1 Листа Г1; пп. 1.4.2 Листа Г1 <,= 4000 руб";
		Нарушение = "ст.217НК РФ";
		Описание = "если пп. 1.4.2 Листа Г1  >  п.п. 1.4.1 Листа Г1;   пп. 1.4.2 Листа Г1 > 4000 руб., то неправомерно освобождены доходы от налогообложения";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистГ1.П000010108004;
		
		ПраваяЧасть = ЛистГ1.П000010107002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть) + "; " + Строка(ЛеваяЧасть) + " " + Знак + " 4000";
		
		Если (ЛеваяЧасть <= ПраваяЧасть) И (ЛеваяЧасть <= 4000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//10.6
		
		ТекстФормулы = "пп. 1.5.2 Листа Г1 <,= п.п. 1.5.1 Листа Г1; пп. 1.5.2 Листа Г1 <,= 4000 руб";
		Нарушение = "ст.217НК РФ";
		Описание = "если пп. 1.5.2 Листа Г1  >  п.п. 1.5.1 Листа Г1;   пп. 1.5.2 Листа Г1 > 4000 руб., то неправомерно освобождены доходы от налогообложения";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистГ1.П000010110004;
		
		ПраваяЧасть = ЛистГ1.П000010109002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть) + "; " + Строка(ЛеваяЧасть) + " " + Знак + " 4000";
		
		Если (ЛеваяЧасть <= ПраваяЧасть) И (ЛеваяЧасть <= 4000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//10.7
		
		ТекстФормулы = "пп. 1.6.2 Листа Г1 <,= п.п. 1.6.1 Листа Г1; пп. 1.6.2 Листа Г1 <,= 4000 руб";
		Нарушение = "ст.217НК РФ";
		Описание = "если пп. 1.6.2 Листа Г1  >  п.п. 1.6.1 Листа Г1;   пп. 1.6.2 Листа Г1 > 4000 руб., то неправомерно освобождены доходы от налогообложения";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистГ1.П000010112004;
		
		ПраваяЧасть = ЛистГ1.П000010111002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть) + "; " + Строка(ЛеваяЧасть) + " " + Знак + " 4000";
		
		Если (ЛеваяЧасть <= ПраваяЧасть) И (ЛеваяЧасть <= 4000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//10.8
		
		ТекстФормулы = "пп. 1.7.2 Листа Г1 <,= п.п. 1.7.1 Листа Г1; пп. 1.7.2 Листа Г1 <,= 10000 руб";
		Нарушение = "ст.217НК РФ";
		Описание = "если пп. 1.7.2 Листа Г1  >  п.п. 1.7.1 Листа Г1;   пп. 1.7.2 Листа Г1 > 10000 руб., то неправомерно освобождены доходы от налогообложения";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистГ1.П000010114004;
		
		ПраваяЧасть = ЛистГ1.П000010113002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть) + "; " + Строка(ЛеваяЧасть) + " " + Знак + " 10000";
		
		Если (ЛеваяЧасть <= ПраваяЧасть) И (ЛеваяЧасть <= 10000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//10.9
		
		Если ЛистГ1.П000010115004 <> 0 Тогда
			
			ЛистГ1Продолжение = ТаблицаСтраницыЛистГ1Продолжение;
			
			ЛистГ1ПродолжениеКоличество = ЛистГ1Продолжение.Количество();
			Для НомСтр = 1 По ЛистГ1ПродолжениеКоличество Цикл 
				
				ТаблицаБлока = ЛистГ1Продолжение[НомСтр - 1].Данные[0].Значение;	
				
				ТекстФормулы = "строка 240 Листа Г1 = сумме строк 220 Листа Г1";
				Нарушение = "п.43 ст.217НК РФ";
				Описание = "если строка 240 Листа Г1<,> суммы строк 220 Листа Г1, то  занижена/завышена сумма дохода, не подлежащая налогообложению";
				
				Знак = "=";
				
				ЛеваяЧасть = ТаблицаБлока.П000025124002;
				
				ПраваяЧасть = ТаблицаБлока.П000025119005_1
				+ ТаблицаБлока.П000025119005_2
				+ ТаблицаБлока.П000025119005_3
				+ ТаблицаБлока.П000025119005_4
				+ ТаблицаБлока.П000025119005_5
				+ ТаблицаБлока.П000025119005_6
				+ ТаблицаБлока.П000025119005_7
				+ ТаблицаБлока.П000025119005_8
				+ ТаблицаБлока.П000025119005_9
				+ ТаблицаБлока.П000025119005_10
				+ ТаблицаБлока.П000025119005_11
				+ ТаблицаБлока.П000025119005_12;
				
				Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
				+ Строка(ТаблицаБлока.П000025119005_1) + " + "
				+ Строка(ТаблицаБлока.П000025119005_2) + " + "
				+ Строка(ТаблицаБлока.П000025119005_3) + " + "
				+ Строка(ТаблицаБлока.П000025119005_4) + " + "
				+ Строка(ТаблицаБлока.П000025119005_5) + " + "
				+ Строка(ТаблицаБлока.П000025119005_6) + " + "
				+ Строка(ТаблицаБлока.П000025119005_7) + " + "
				+ Строка(ТаблицаБлока.П000025119005_8) + " + "
				+ Строка(ТаблицаБлока.П000025119005_9) + " + "
				+ Строка(ТаблицаБлока.П000025119005_10) + " + "
				+ Строка(ТаблицаБлока.П000025119005_11) + " + "
				+ Строка(ТаблицаБлока.П000025119005_12);
				
				
				Если ЛеваяЧасть = ПраваяЧасть Тогда
					
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					
				Иначе
					
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					
				КонецЕсли;
				
				РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
				
			КонецЦикла;
			
			//10.10
			
			ТекстФормулы = "строка 220 Листа Г1 = строке 200 Листа Г1, если строка 200 Листа Г1 <,= (0,2*строка  190 Листа Г1) и строка 200 Листа Г1 <,= (строка 210 + 4300 руб.)либо строка 220 Листа Г1 = 0";
			Нарушение = "п.43 ст.217НК РФ";
			Описание = "если строка 220 Листа Г1  = строке 200 Листа Г1 и не соблюдены одновременно условия, при которых строка 200 Листа Г1 <,= (0,2*строка  190 Листа Г1) и строка 200 Листа Г1 <,= (строка 210 + 4300 руб.), то неправомерно освобождены доходы от налогообложения";
			
			Для НомСтр = 1 По ЛистГ1ПродолжениеКоличество Цикл 
				ТаблицаБлока = ЛистГ1Продолжение[НомСтр - 1].Данные[0].Значение;	
				
				Знак = "=";
				
				Для НомСтроки = 1 По 12 Цикл
					
					ЛеваяЧасть = ТаблицаБлока["П000025119005_" + НомСтроки];
					
					ПраваяЧасть = ТаблицаБлока["П000025119003_" + НомСтроки];
					
					Условие1 = ТаблицаБлока["П000025119002_" + НомСтроки] * 0.2;
					
					Условие2 = ТаблицаБлока["П000025119004_" + НомСтроки] + 4300;
					
					Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
					+ Строка(ПраваяЧасть) + " если " 
					+ Строка(ПраваяЧасть) + " <= " 
					+ Строка(Условие1) + " и "
					+ Строка(ПраваяЧасть) + "  <=  "
					+ Строка(Условие2);
					
					
					Если ((ЛеваяЧасть = ПраваяЧасть) И (ПраваяЧасть <= Условие1) И (ПраваяЧасть <= Условие2)) ИЛИ (ЛеваяЧасть = 0) ИЛИ (ПраваяЧасть > Условие1) ИЛИ (ПраваяЧасть > Условие2) Тогда
						
						ЭтоОшибка = Ложь;
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
						
					Иначе
						
						ЭтоОшибка = Истина;
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
						
					КонецЕсли;
					
					РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
					
				КонецЦикла;
			КонецЦикла;
			
			
			//10.11
			
			Нарушение = "п.43 ст.217НК РФ";
			Описание = "если строка 230 Листа Г1 в соответствующем месяце <,> строка 210 в соответстующем месяце + (4300 - строка 220 в соответствующем месяце), то  занижена/завышена сумма дохода, не подлежащая налогообложению, учитываемая в последующих месяцах.";
			
			Для НомСтр = 1 По ЛистГ1ПродолжениеКоличество Цикл 
				ТаблицаБлока = ЛистГ1Продолжение[НомСтр - 1].Данные[0].Значение;	
				
				Знак = "=";
				
				Для НомСтроки = 1 По 12 Цикл
					
					ТекстФормулы = "Страница " + НомСтр + " месяц " + НомСтроки + ", строка 230 Листа Г1 = строка 210 + (4300 - строка 220)";
					
					ЛеваяЧасть = ТаблицаБлока["П000025119006_" + НомСтроки];
					
					ПраваяЧасть = ТаблицаБлока["П000025119004_" + НомСтроки]
					+ (4300 - ТаблицаБлока["П000025119005_" + НомСтроки]);
					
					Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
					+ Строка(ТаблицаБлока["П000025119004_" + НомСтроки])
					+ " + (4300 - " + Строка(ТаблицаБлока["П000025119005_" + НомСтроки]) + ")";
					
					Если ЛеваяЧасть = ПраваяЧасть Тогда
						
						ЭтоОшибка = Ложь;
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
						
					Иначе
						
						ЭтоОшибка = Истина;
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
						
					КонецЕсли;
					
					РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаГ2(СтруктураРезультата)
	
ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
		ЛистГ2 = ТаблицаСтраницыЛистГ2;
		
		//11.1
		
		ТекстФормулы = "строка 060 Листа Г2 < = сумме строк 050 Листа Г2";
		Нарушение = "п.28 ст.217НК РФ";
		Описание = "если строка 060 Листа Г2 > суммы строк 050 Листа Г2, то  неправомерно освобождены доходы от налогообложения";
		
		Знак = "<=";
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистГ2", "П000010207001", Ложь);
		
		СтрокаПраваяЧасть = "";
		СуммаСтрок = 0;
		
		КоличествоСтраницЛистаГ2 = ЛистГ2.Количество();
		ЗнакРавно = Истина;
		Для НомСтр = 1 По КоличествоСтраницЛистаГ2 Цикл
			ТаблицаБлока = ЛистГ2[НомСтр - 1].Данные[0].Значение;
			СчСтрок = 1;
			Пока ТаблицаБлока.Свойство("П000010201006_" + СчСтрок) Цикл
				Значение = ТаблицаБлока["П000010201006_" + СчСтрок];
				СуммаСтрок = СуммаСтрок + Значение;
				СчСтрок = СчСтрок + 1;	
				СтрокаПраваяЧасть = СтрокаПраваяЧасть + ?(ЗнакРавно, Знак, " + ") + Строка(Значение);
				ЗнакРавно = Ложь;
			КонецЦикла;
		КонецЦикла;
		
		ПраваяЧасть = СуммаСтрок;
		
		Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть;
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//11.2
		
		ТекстФормулы = "строка 060 Листа Г2  <= 4000 руб.";
		Нарушение = "п.28 ст.217НК РФ";
		Описание = "если строка 060 Листа Г2 > 4000 руб., то  неправомерно освобождены доходы от налогообложени";
		
		Знак = "<=";
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистГ2", "П000010207001", Ложь);
		
		ПраваяЧасть = 4000;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаГ3(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;		
	ЛистГ3 =  ТаблицаСтраницыЛистГ3;
	
		//12.1
		
		ТекстФормулы = "п. 2 Листа Г3= Сумме строк 060 Листа Г3";
		Нарушение = "пп. 1 п. 1 ст. 212 НК РФ";
		Описание = "если п. 2 Листа Г3 >,< Суммы строк 060 Листа Г3, то завышена/занижена сумма излишне удержанного налога";
		
		Знак = "=";
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистГ3", "П000027207001", Ложь);
		
		СтрокаПраваяЧасть = "";
		СуммаСтрок = 0;
		КоличествоСтраницЛистаГ3 = ЛистГ3.Количество();
		Для НомСтр = 1 По КоличествоСтраницЛистаГ3 Цикл
			ТаблицаБлока = ЛистГ3[НомСтр - 1].Данные[0].Значение;
			СчСтрок = 1;
			ЗнакРавно = Истина;
			Пока ТаблицаБлока.Свойство("П000027201006_" + СчСтрок) Цикл
				Значение = ТаблицаБлока["П000027201006_" + СчСтрок];
				СуммаСтрок = СуммаСтрок + Значение;
				СтрокаПраваяЧасть = СтрокаПраваяЧасть + ?(ЗнакРавно, Знак, " + ") + Строка(Значение);
				ЗнакРавно = Ложь;
				СчСтрок = СчСтрок + 1;	
			КонецЦикла;
		КонецЦикла;
		
		ПраваяЧасть = СуммаСтрок;
		
		Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть;
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаД(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;

		
		ЛистДСтраницы = ТаблицаСтраницыЛистД;
		
		Для НомСтр = 1 По ЛистДСтраницы.Количество() Цикл
			ЛистД = ЛистДСтраницы[НомСтр-1].Данные[0].Значение;
			
			//13.1
			
			ТекстФормулы = "строка 020 Листа Д<=строки 010 Листа Д";
			Нарушение = "ст. 210, 221 НК РФ";
			Описание = "если строка 020 Листа Д  > строки 010 листа Д, то завышена сумма вычетов";
			
			Знак = "<=";
			
			ЛеваяЧасть = ЛистД.П000012001020;
			
			ПраваяЧасть = ЛистД.П000012001010;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//13.2
			
			ТекстФормулы = "строка 040 Листа Д<= строки 030 Листа Д";
			Нарушение = "ст. 210, 221 НК РФ";
			Описание = "если строка 040 Листа Д > строки 030 листа Д, то завышена сумма вычетов";
			
			Знак = "<=";
			
			
			ЛеваяЧасть = ЛистД.П000012001040;
			
			ПраваяЧасть = ЛистД.П000012001030;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//13.3
			ТекстФормулы = "строка 060 Листа Д<= строки 050 Листа Д";
			Нарушение = "ст. 210, 221 НК РФ";
			Описание = "если строка 060 Листа Д > строки 050 листа Д, то завышена сумма вычетов";
			
			Знак = "<=";
			
			ЛеваяЧасть = ЛистД.П000012001060;
			
			ПраваяЧасть = ЛистД.П000012001050;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//13.4
			
			ТекстФормулы = "строка 080 Листа Д<= строки 070 Листа Д";
			Нарушение = "ст. 210, 220 НК РФ";
			Описание = "если строка 080 Листа Д > строки 070  листа Д, то завышена сумма вычетов";
			
			Знак = "<=";
			
			ЛеваяЧасть = ЛистД.П000012001080;
			
			ПраваяЧасть = ЛистД.П000012001070;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//13.5
			
			ТекстФормулы = "строка 100 Листа Д<= строки 090 Листа Д";
			Нарушение = "ст. 210, 220 НК РФ";
			Описание = "если строка 100 Листа Д > строки 090 листа Д, то завышена сумма вычетов";
			
			Знак = "<=";
			
			ЛеваяЧасть = ЛистД.П000012001100;

			ПраваяЧасть = ЛистД.П000012001090;
			
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//13.6
			
			ТекстФормулы = "пункт 6.1 Листа Д= сумма (пп. 1.2.+ пп.2.2 + пп.3.2 + пп.4.2 + пп.5.2) Листа Д";
			Нарушение = "ст. 210, 220, 221 НК РФ";
			Описание = "если пункт 6.1 Листа Д >,< суммы (пп. 1.2.+ пп.2.2 + пп.3.2 + пп.4.2 + пп.5.2) Листа Д, то допущены ошибки в определении суммы налоговых вычетов";
			
			Знак = "=";
			
			ЛеваяЧасть = ЛистД.П000012001110;
			
			ПраваяЧасть = ЛистД.П000012001020
			+ ЛистД.П000012001040
			+ ЛистД.П000012001060
			+ ЛистД.П000012001080
			+ ЛистД.П000012001100;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
			+ Строка(ЛистД.П000012001020) + " + "
			+ Строка(ЛистД.П000012001040) + " + "
			+ Строка(ЛистД.П000012001060) + " + "
			+ Строка(ЛистД.П000012001080) + " + "
			+ Строка(ЛистД.П000012001100);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
	КонецЦикла;	
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаЕ(СтруктураРезультата)
	
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
		ЛистЕ = СтруктураДанныхЛистЕ;
		
		//14.1
		
		ТекстФормулы = "пп. 1.1.2  Листа Е <= пп. 1.1.1 Листа Е <= 1000000 руб";
		Нарушение = "ст. 220 НК РФ";
		Описание = " если пп. 1.1.2 Листа Е  >  пп. 1.1.1 Листа Е > 1000000 руб., то неправомерно заявлен имущественный налоговый вычет";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЕ.П000014002004;
		
		ПраваяЧасть = ЛистЕ.П000014001002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть) + " " + Знак + " " + "1000000 руб";
		
		Если (ЛеваяЧасть <= ПраваяЧасть) И (ЛеваяЧасть <= 1000000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//14.2
		
		ТекстФормулы = "пп. 1.2.2 Листа Е <,= пп. 1.2.1 Листа Е <,= 1000000  руб. *размер доли";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если пп. 1.2.2 Листа Е > пп. 1.2.1 Листа Е > 1000000  руб. *размер доли, то неправомерно заявлен имущественный налоговый вычет";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЕ.П000014004004;
		
		ПраваяЧасть = ЛистЕ.П000014003002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если (ЛеваяЧасть <= ПраваяЧасть) И (ПраваяЧасть <= 1000000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//14.3
		ТекстФормулы = "пп. 1.3.2 Листа Е = Лист Е (пп. 1.1.2+ пп. 1.2.2)  <= 1000000 руб.";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если пп. 1.3.2 Листа Е<,> Лист Е (пп. 1.1.2+ пп. 1.2.2) >1000000 руб., то неправомерно заявлен имущественный налоговый вычет";
		
		Знак = "=";
		
		
		ЛеваяЧасть = ЛистЕ.П000014006004;
		
		ПраваяЧасть = ЛистЕ.П000014002004 + ЛистЕ.П000014004004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ЛистЕ.П000014002004) + " + " + Строка(ЛистЕ.П000014004004) + " <= 1000000 руб.";
		
		Если (ЛеваяЧасть = ПраваяЧасть) И (ПраваяЧасть <= 1000000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//14.4
		
		ТекстФормулы = "пп. 1.4.2 Листа Е <,=  пп. 1.4.1 Листа Е";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если пп. 1.4.2 Листа Е> пп. 1.4.1 Листа Е, то неправомерно заявлен вычет в сумме документально подтвержденных расходов";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЕ.П000014008004;
		
		ПраваяЧасть = ЛистЕ.П000014007002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//14.5
		
		ТекстФормулы = "пп. 1.5.2  Листа Е = Лист Е (пп. 1.3.2+ пп. 1.4.2)";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если пп. 1.5.2  Листа Е <,> Лист Е (пп. 1.3.2+ пп. 1.4.2), то допущены ошибки в определении имущественных налоговых вычетов";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЕ.П000014010004;
		
		ПраваяЧасть = ЛистЕ.П000014006004 + ЛистЕ.П000014008004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ЛистЕ.П000014006004) + " + " + Строка(ЛистЕ.П000014008004);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//14.6
		
		ТекстФормулы = "пп. 2.1.2 Листа Е<,= пп.2.1.1 Листа Е<,= 250000 руб.";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если пп. 2.1.2 Листа Е > пп.2.1.1 Листа Е > 250000 руб., то неправомерно заявлен имущественный налоговый вычет";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЕ.П000014012004;
		
		ПраваяЧасть = ЛистЕ.П000014011002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть) + " " + Знак + " " + "250000 руб";
		
		Если (ЛеваяЧасть <= ПраваяЧасть) И (ПраваяЧасть <= 250000) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//14.7
		
		ТекстФормулы = "п.п. 2.2.2 Листа Е <,=  пп.2.2.1  Листа Е";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если п.п. 2.2.2 Листа Е >  пп.2.2.1  Листа Е, то  неправомерно заявлен вычет в сумме документально подтвержденных расходов";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЕ.П000014014004;
		
		ПраваяЧасть = ЛистЕ.П000014013002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//14.8
		
		ТекстФормулы = "Лист Е  п.п. 2.3.2 <,= пп.2.3.1 Листа Е";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если п.п. 2.3.2 Листа Е > пп.2.3.1 Листа Е, то неправомерно заявлен имущественный налоговый вычет";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЕ.П000014016004;
		
		ПраваяЧасть = ЛистЕ.П000014015002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//14.9
		
		ТекстФормулы = "пп. 2.3.2 Листа Е  = Лист Е (пп. 2.1.2 + пп. 2.2.2)";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если пп. 2.3.2 Листа Е >,< Лист Е (пп. 2.1.2 + пп. 2.2.2), то допущены ошибки в определении имущественных  налоговых вычетов";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЕ.П000014016004;
		
		ПраваяЧасть = ЛистЕ.П000014012004 + ЛистЕ.П000014014004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ЛистЕ.П000014012004) + " + " + Строка(ЛистЕ.П000014014004);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//14.10
		
		ТекстФормулы = "пп. 3.1.2  Листа Е <,= пп. 3.1.1 Листа Е";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если пп. 3.1.2  Листа Е > пп. 3.1.1 Листа Е,  то допущены ошибки в определении имущественных  налоговых вычетов";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЕ.П000014018004;
		
		ПраваяЧасть = ЛистЕ.П000014017002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если (ЛеваяЧасть <= ПраваяЧасть) Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//14.11
		
		ТекстФормулы = "пункт 4 Листа Е= сумма (пп. 1.5.2.+ пп. 2.3.2 + пп. 3.1.2) Листа Е";
		Нарушение = "ст. 220 НК РФ";
		Описание = "если пункт 4 Листа Е >,< суммы (пп. 1.5.2.+ пп.2.3.2 + пп. 3.1.2) Листа Е, то допущены ошибки в определении имущественных налоговых вычетов";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЕ.П000014019002;
		
		ПраваяЧасть = ЛистЕ.П000014010004 + ЛистЕ.П000014016004 + ЛистЕ.П000014018004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ЛистЕ.П000014010004) + " + " + Строка(ЛистЕ.П000014016004) + " + " + Строка(ЛистЕ.П000014018004);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаЖ1(СтруктураРезультата)
	
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;

		ЛистЖ1 = СтруктураДанныхЛистЖ1;
		
		//15.1
		
		ТекстФормулы = "пп. 2.1 Листа Ж1  = 3000* Кол-во месяцев";
		Нарушение = "ст.218 НК РФ";
		Описание = "если пп. 2.1 Листа Ж1 <,> 3000* Кол-во месяцев, то допущены ошибки в предоставлении стандартных  налоговых вычетов";
		мКомментарий = "КС не может быть проверено автоматически";
		Знак = "=";
		
		ЛеваяЧасть = ЛистЖ1.П000020015004;
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " 3000 * ?";
		
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка, мКомментарий);
		
		//15.2
		
		ТекстФормулы = "пп. 2.2 Листа Ж1  = 500* Кол-во месяцев";
		Нарушение = "ст.218 НК РФ";
		Описание = "если пп. 2.2 Листа Ж1 <,> 500* Кол-во месяцев, то допущены ошибки в предоставлении стандартных  налоговых вычетов";
		мКомментарий = "КС не может быть проверено автоматически";
		Знак = "=";
		
		ЛеваяЧасть = ЛистЖ1.П000020016004;
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " 500 * ?";
		
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка, мКомментарий);
		
		//15.3
		
		//КС проверяется только для деклараций за 2011 год
		
		Если ЭтаФорма.СтруктураДанныхТитульный.ОтчетГод <= 2011 Тогда
			ТекстФормулы = "пп. 2.3 Листа Ж1  = 400* количество месяцев с учетом пп.1.2 Листа Ж1 *)";
			Нарушение = "ст.218 НК РФ";
			Описание = "если пп. 2.3 Листа Ж1 <,> 400* количество месяцев с учетом пп.1.2 Листа Ж1, то допущены ошибки в предоставлении стандартных  налоговых вычетов";
			
			Знак = "=";
			
			ЛеваяЧасть = ЛистЖ1.П000020017004;
			
			ПраваяЧасть = ЛистЖ1.П000020013002*400;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " 400* " + Строка(ЛистЖ1.П000020013002);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		КонецЕсли;
		
		//15.4
		
		ТекстФормулы = "пп. 2.4 Листа Ж1  = размер  вычета, установленный подпунктом 4 пункта 1 статьи 218 Кодекса * количество месяцев с учетом пп. 1.3 Листа Ж1";
		Нарушение = "ст.218 НК РФ";
		Описание = "если пп. 2.4 Листа Ж1 <,> размер  вычета, установленный подпунктом 4 пункта 1 статьи 218 Кодекса * количество месяцев с учетом пп. 1.3 Листа Ж1, то допущены ошибки в предоставлении стандартных  налоговых вычетов";
		мКомментарий = "КС не может быть проверено автоматически";
		Знак = "=";
		
		ЛеваяЧасть = ЛистЖ1.П000020018004;
		
		ПраваяЧасть = ЛистЖ1.П000020014004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " ? * " + Строка(ПраваяЧасть);
		
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка, мКомментарий);
		
		//15.5
		
		ТекстФормулы = "пп. 2.5 Листа Ж1  = размер  вычета, установленный подпунктом 4 пункта 1 статьи 218 Кодекса * количество месяцев с учетом пп. 1.3 Листа Ж1";
		Нарушение = "ст.218 НК РФ";
		Описание = "если пп. 2.5 Листа Ж1 <,> размер  вычета, установленный подпунктом 4 пункта 1 статьи 218 Кодекса * количество месяцев с учетом пп. 1.3 Листа Ж1, то допущены ошибки в предоставлении стандартных  налоговых вычетов";
		мКомментарий = "КС не может быть проверено автоматически";
		Знак = "=";
		
		ЛеваяЧасть = ЛистЖ1.П000020019004;
		
		ПраваяЧасть = ЛистЖ1.П000020014004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " ? * " + Строка(ПраваяЧасть);
		
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка, мКомментарий);
		
		//15.6
		
		ТекстФормулы = "пп. 2.6 Листа Ж1  = размер  вычета, установленный подпунктом 4 пункта 1 статьи 218 Кодекса * количество месяцев с учетом пп. 1.3 Листа Ж1";
		Нарушение = "ст.218 НК РФ";
		Описание = "если пп. 2.6 Листа Ж1 <,> размер  вычета, установленный подпунктом 4 пункта 1 статьи 218 Кодекса * количество месяцев с учетом пп. 1.3 Листа Ж1, то допущены ошибки в предоставлении стандартных  налоговых вычетов";
		мКомментарий = "КС не может быть проверено автоматически";
		Знак = "=";
		
		ЛеваяЧасть = ЛистЖ1.П000020019004;
		
		ПраваяЧасть = ЛистЖ1.П000020014004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " ? * " + Строка(ПраваяЧасть);
		
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка, мКомментарий);
		
		//15.7
		
		ТекстФормулы = "пп. 2.7 Листа Ж1  = размер  вычета, установленный подпунктом 4 пункта 1 статьи 218 Кодекса * количество месяцев с учетом пп. 1.3 Листа Ж1";
		Нарушение = "ст.218 НК РФ";
		Описание = "если пп. 2.7 Листа Ж1 <,> размер  вычета, установленный подпунктом 4 пункта 1 статьи 218 Кодекса * количество месяцев с учетом пп. 1.3 Листа Ж1, то допущены ошибки в предоставлении стандартных  налоговых вычетов";
		мКомментарий = "КС не может быть проверено автоматически";
		Знак = "=";
		
		ЛеваяЧасть = ЛистЖ1.П000020019004;
		
		ПраваяЧасть = ЛистЖ1.П000020014004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " ? * " + Строка(ПраваяЧасть);
		
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка, мКомментарий);
		
		
		//15.8
		
		ТекстФормулы = "пп. 2.8 Листа Ж1 <,= строке 120 Листа Ж1";
		Нарушение = "ст.218 НК РФ";
		Описание = "если пп. 2.8 Листа Ж1  >  строки 120 Листа Ж1, то завышена сумма стандартных вычетов";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЖ1.П000020022004;
		
		ПраваяЧасть = ЛистЖ1.П000020012002;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + Строка(ПраваяЧасть);
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаЖ2(СтруктураРезультата)
	
		ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
		ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
		СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
		
		ЛистЖ2 = СтруктураДанныхЛистЖ2;
		Раздел1 = СтруктураДанныхРаздел1;
		
		//16.1
		
		ТекстФормулы = "пп. 1.1 Листа Ж2<,= 0,25* строка 010 раздела 1";
		Нарушение = "ст. 219 НК РФ";
		Описание = "если пп. 1.1 Листа Ж2>0,25* строка 010 раздела 1, то неправомерно предоставлены социальные налоговые вычеты";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЖ2.П000021001004;
		
		ПраваяЧасть = Раздел1.П000010001003*0.25;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " 0,25* " + Строка(Раздел1.П000010001003);
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//16.2
		
		ТекстФормулы = "пп. 1.2 Листа Ж2  <,= 50000 рублей * количество детей (подопечных)";
		Нарушение = "ст. 219 НК РФ";
		Описание = "если пп. 1.2 Листа Ж2 > 50000 рублей за каждого ребенка на обоих родителей, опекуна, попечителя *), то неправомерно предоставлены социальные налоговые вычеты";
		мКомментарий = "КС не может быть проверено автоматически";
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЖ2.П000021002004;
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " 50000 * ?";
		
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка, мКомментарий);
		
		//16.3
		
		ТекстФормулы = "пп. 1.4 Листа Ж2  = пп. 1.1 Листа Ж2 + пп. 1.2 Листа Ж2 +  пп. 1.3 Листа Ж2";
		Нарушение = "ст. 219 НК РФ";
		Описание = "если пп. 1.4 Листа Ж2 >,< пп. 1.1 Листа Ж2 + пп. 1.2 Листа Ж2 +  пп. 1.3 Листа Ж2, то завышена/занижена сумма социальных вычетов";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЖ2.П000021004004;
		
		ПраваяЧасть = ЛистЖ2.П000021001004 
		+ ЛистЖ2.П000021002004 
		+ ЛистЖ2.П000021003004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
		+ Строка(ЛистЖ2.П000021001004) + " + "
		+ Строка(ЛистЖ2.П000021002004) + " + "
		+ Строка(ЛистЖ2.П000021003004);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//16.4
		ЛистЖ3 = ТаблицаСтраницыЛистЖ3;
		
		ТекстФормулы = "пп. 2.7 Листа Ж2  = (пп. 2.1 Листа Ж2 + пп. 2.2 Листа Ж2 + пп. 2.3 Листа Ж2 + пп. 2.4 Листа Ж2 + пп. 2.5 Листа Ж2 + пп. 2.6 Листа Ж2 - п.3 Листа Ж3), если (пп. 2.1 Листа Ж2 + пп. 2.2 Листа Ж2 + пп. 2.3 Листа Ж2 + пп. 2.4 Листа Ж2 + пп. 2.5 Листа Ж2 + пп. 2.6 Листа Ж2) < 120000 руб. либо пп. 2.7 Листа Ж2 = 120000 руб. - п. 3 Листа Ж3";
		Нарушение = "ст. 219 НК РФ";
		Описание = "если пп. 2.7 Листа Ж2 >,< (пп. 2.1 Листа Ж2 + пп. 2.2 Листа Ж2 + пп. 2.3 Листа Ж2 + пп. 2.4 Листа Ж2 + пп. 2.5 Листа Ж2 + пп. 2.6 Листа Ж2 - п.3 Листа Ж3) при условии, что (пп. 2.1 Листа Ж2 + пп. 2.2 Листа Ж2 + пп. 2.3 Листа Ж2 + пп. 2.4 Листа Ж2 + пп. 2.5 Листа Ж2 + пп. 2.6 Листа Ж2) < 120000 руб., то завышена/занижена сумма социальных вычетов";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЖ2.П000021011004;
		
		Сумма = ЛистЖ2.П000021005004 
		+ ЛистЖ2.П000021006004 
		+ ЛистЖ2.П000021007004
		+ ЛистЖ2.П000021008004
		+ ЛистЖ2.П000021009004
		+ ЛистЖ2.П000021010004;

		ЛистЖ3_П000022021001 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистЖ3", "П000022021001", Ложь);
		
		Если Сумма < 120000 Тогда			
			
			ПраваяЧасть = Сумма	- ЛистЖ3_П000022021001;
			;
						
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
			+ Строка(ЛистЖ2.П000021005004) + " + " 
			+ Строка(ЛистЖ2.П000021006004) + " + "  
			+ Строка(ЛистЖ2.П000021007004) + " + " 
			+ Строка(ЛистЖ2.П000021008004) + " + " 
			+ Строка(ЛистЖ2.П000021009004) + " + " 
			+ Строка(ЛистЖ2.П000021010004) + " - " 
			+ Строка(ЛистЖ3_П000022021001);
			
		Иначе
			ПраваяЧасть = 120000 - ЛистЖ3_П000022021001;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " 120000 - " + Строка(ЛистЖ3_П000022021001);
			
		КонецЕсли;
		
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//16.5
		ТекстФормулы = "п. 3 Листа Ж2 = пп. 1.4 Листа Ж2 + пп. 2.7 Листа Ж2";
		Нарушение = "ст. 219 НК РФ";
		Описание = "если п. 3 Листа Ж2 >,< пп. 1.4 Листа Ж2 + пп. 2.7 Листа Ж2, то завышена/занижена сумма социальных налоговых вычетов";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЖ2.П000021012004;
		
		ПраваяЧасть = ЛистЖ2.П000021004004 + ЛистЖ2.П000021011004;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
		+ Строка(ЛистЖ2.П000021004004) + " + " 
		+ Строка(ЛистЖ2.П000021011004);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаЖ3(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	ЛистЖ3 = ТаблицаСтраницыЛистЖ3;
	Раздел1 = СтруктураДанныхРаздел1;
		
		//17.1
		
		ТекстФормулы = "пп. 1.3 Листа Ж3 = сумме строк 080 по всем Листам Ж3";
		Нарушение = "ст. 219 НК РФ";
		Описание = "если пп. 1.3 Листа Ж3 >,< суммы строк 080 по всем Листам Ж3, то завышена/занижена сумма социальных налоговых вычетов";
		
		Знак = "=";
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистЖ3", "П000022010001", Ложь); 
		
		ПраваяЧасть = 0;
		СтрокаПраваяЧасть = "";
		
		КоличествоСтраницЛистаЖ3 = ЛистЖ3.Количество();
		СтрокаПраваяЧасть = "";
		ЗнакРавно = Истина;
		Для НомСтр = 1 По КоличествоСтраницЛистаЖ3 Цикл
			ТаблицаБлока = ЛистЖ3[НомСтр - 1].Данные[0].Значение;
			Значение = ТаблицаБлока["П000022008001"];
			ПраваяЧасть = ПраваяЧасть + Значение;
			СтрокаПраваяЧасть = СтрокаПраваяЧасть + ?(ЗнакРавно, Знак, " + ") + Строка(Значение);
			ЗнакРавно = Ложь;
		КонецЦикла;
	
		Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть;
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//17.2
		
		ТекстФормулы = "пп. 2.3 Листа Ж3  = сумме строк 180 по всем Листам Ж3";
		Нарушение = "ст. 219 НК РФ";
		Описание = "если пп. 2.3 Листа Ж3 >,< суммы строк 180 по всем Листам Ж3, то завышена/занижена сумма социальных налоговых вычетов";
		
		Знак = "=";
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистЖ3", "П000022020001", Ложь);
		
		ПраваяЧасть = 0;
		СтрокаПраваяЧасть = "";
		ЗнакРавно = Истина;
		Для НомСтр = 1 По КоличествоСтраницЛистаЖ3 Цикл
			ТаблицаБлока = ЛистЖ3[НомСтр - 1].Данные[0].Значение;
			Значение = ТаблицаБлока["П000022018001"];
			ПраваяЧасть = ПраваяЧасть + Значение;
			СтрокаПраваяЧасть = СтрокаПраваяЧасть + ?(ЗнакРавно, " = ", " + ") + Строка(Значение);
			ЗнакРавно = Ложь;
		КонецЦикла;
		
		Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть;
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//17.3
		
		ТекстФормулы = " п.3 Листа Ж3 = сумме строк 090 и 190 Листа Ж3";
		Нарушение = "ст. 219 НК РФ";
		Описание = "если п.3 Листа Ж3>,< суммы строк 090 и 190 Листа Ж3, то завышена/занижена сумма социальных налоговых вычетов";
		
		Знак = "=";
		
		ЛеваяЧасть = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистЖ3", "П000022021001", Ложь);
		
		ПраваяЧасть = 0;
		СтрокаПраваяЧасть = "";
		ЗнакРавно = Истина;
		Для НомСтр = 1 По КоличествоСтраницЛистаЖ3 Цикл
			ТаблицаБлока = ЛистЖ3[НомСтр - 1].Данные[0].Значение;
			Значение1 = ТаблицаБлока["П000022009001"];
			Значение2 = ТаблицаБлока["П000022019001"];
			
			ПраваяЧасть = ПраваяЧасть + Значение1 + Значение2;
			
			СтрокаПраваяЧасть = СтрокаПраваяЧасть + ?(ЗнакРавно, " = ", " + ") + Строка(Значение1) + " + " + Строка(Значение2);
			ЗнакРавно = Ложь;

		КонецЦикла;
		
		Расшифровка = Строка(ЛеваяЧасть) + СтрокаПраваяЧасть;
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаЗ(СтруктураРезультата)
	
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	
		ЛистЗ = СтруктураДанныхЛистЗ;
		
		//18.1
		
		ТекстФормулы = "пп. 1.7 Листа З = Лист З (пп. 1.1 - пп. 1.2 - пп. 1.5 - пп. 1.6 - пп. 4.5)";
		Нарушение = "ст.214.1  НК РФ";
		Описание = "если пп.1.7 Листа З <,> Лист З (пп. 1.1 - пп. 1.2 - пп. 1.5 - пп. 1.6 - пп. 4.5), то занижена/завышена сумма полученного налогооблагаемого дохода";
		
		Знак = "=";
		
		
		ЛеваяЧасть = ЛистЗ.П000021007001;
		
		ПраваяЧасть = ЛистЗ.П000021001001
		- ЛистЗ.П000021002001
		- ЛистЗ.П000021005001
		- ЛистЗ.П000021006001
		- ЛистЗ.П000021019001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗ.П000021001001) + " - "
		+ Строка(ЛистЗ.П000021002001) + " - "
		+ Строка(ЛистЗ.П000021005001) + " - "
		+ Строка(ЛистЗ.П000021006001) + " - "
		+ Строка(ЛистЗ.П000021019001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.2
		
		ТекстФормулы = "пп.1.5 Листа З =,< пп. 2.3 Листа З";
		Нарушение = "ст.214.1 НК РФ";
		Описание = "если пп. 1.5 Листа З> пп. 2.3 Листа З, то завышена сумма убытков, принимаемая к вычету";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЗ.П000021005001;
		
		ПраваяЧасть = ЛистЗ.П000021010001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ПраваяЧасть);
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.3
		ЛистЗПродолжение = СтруктураДанныхЛистЗПродолжение;
		
		ТекстФормулы = "пп.1.6 Листа З =,< пп. 9.1 Листа З";
		Нарушение = "ст.214.1, 220.1 НК РФ";
		Описание = "если пп. 1.6 Листа З >пп. 9.1 Листа З, то завышена сумма убытков, принимаемая к вычету";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЗ.П000021006001;
		
		ПраваяЧасть = ЛистЗПродолжение.П000022037001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ПраваяЧасть);
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.4
		
		ТекстФормулы = "пп.1.3 Листа З= Лист З (пп. 1.2 - пп.1.1)";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "если пп.1.3 Листа З<,> Лист З (пп. 1.2 - пп.1.1), то завышена/занижена, сумма полученного убытка";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗ.П000021003001;
		
		ПраваяЧасть = ЛистЗ.П000021002001
		- ЛистЗ.П000021001001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗ.П000021002001) + " - "
		+ Строка(ЛистЗ.П000021001001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//18.5
		Если ЛистЗ.П000021010001 > 0 Тогда
			ТекстФормулы = "пп. 2.3 Листа З = Лист З (пп. 2.2 - пп. 2.1)";
			Нарушение = "ст. 214.1, НК РФ";
			Описание = "если пп.2.3 Листа З<,> Лист З (пп. 2.2 - пп.2.1), то завышена/занижена, сумма полученного убытка";
			
			Знак = "=";
			
			ЛеваяЧасть = ЛистЗ.П000021010001;
			
			ПраваяЧасть = ЛистЗ.П000021009001
			- ЛистЗ.П000021008001;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
			+ Строка(ЛистЗ.П000021009001) + " - "
			+ Строка(ЛистЗ.П000021008001);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		КонецЕсли;
		
		//18.6
		Если ЛистЗ.П000021011001 > 0 Тогда
			ТекстФормулы = "пп. 2.4 Листа З = Лист З (пп. 2.1 - пп. 2.2)";
			Нарушение = "ст. 214.1, НК РФ";
			Описание = "если пп.2.4 Листа З<,> Лист З (пп. 2.1 - пп.2.2), то завышена/занижена, сумма полученного убытка";
			
			Знак = "=";
			
			ЛеваяЧасть = ЛистЗ.П000021011001;
			
			ПраваяЧасть = ЛистЗ.П000021008001
			- ЛистЗ.П000021009001;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
			+ Строка(ЛистЗ.П000021008001) + " - "
			+ Строка(ЛистЗ.П000021009001);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
		КонецЕсли;
		
		//18.7
		
		ТекстФормулы = "пп. 3.3 Листа З = Лист З (пп. 3.1 - пп. 3.2)";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "если пп. 3.3 Листа З<,> Лист З (пп. 3.1 - пп.3.2), то завышена/занижена, сумма полученного налогооблагаемого дохода";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗ.П000021014001;
		
		ПраваяЧасть = ЛистЗ.П000021012001
		- ЛистЗ.П000021013001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗ.П000021012001) + " - "
		+ Строка(ЛистЗ.П000021013001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.8
		
		ТекстФормулы = "пп. 4.3. Листа З = Лист З (пп.4.2 - пп. 4.1)";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "если пп. 4.3 Листа З<,> Лист З (пп. 4.2 - пп.4.1), то завышена/занижена, сумма убытков, принимаемых к вычету";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗ.П000021017001;
		
		ПраваяЧасть = ЛистЗ.П000021016001
		- ЛистЗ.П000021015001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗ.П000021016001) + " - "
		+ Строка(ЛистЗ.П000021015001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//18.9
		
		ТекстФормулы = "пп. 4.4 Листа З =, < пп. 4.3 Листа З";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "если пп. 4.4 Листа З>  пп. 4.3 Листа З, то завышена, сумма убытков, принимаемых к вычету";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЗ.П000021018001;
		
		ПраваяЧасть = ЛистЗ.П000021017001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.10   
		
		ТекстФормулы = "пп. 4.7 Листа З = Лист З (пп. 4.1 - пп. 4.2 - пп. 4.6 - пп. 1.4 - пп. 5.4)";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "если пп. 4.7 Листа З <,> Лист З (пп. 4.1 - пп. 4.2 - пп. 4.6 - пп. 1.4 - пп. 5.4), то занижена/завышена сумма полученного налогооблагаемого дохода";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗ.П000021021001;
		
		ПраваяЧасть = ЛистЗ.П000021015001
		- ЛистЗ.П000021016001
		- ЛистЗ.П000021020001
		- ЛистЗ.П000021004001
		- ЛистЗ.П000021025001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗ.П000021015001) + " - "
		+ Строка(ЛистЗ.П000021016001) + " - "
		+ Строка(ЛистЗ.П000021020001) + " - "
		+ Строка(ЛистЗ.П000021004001) + " - "
		+ Строка(ЛистЗ.П000021025001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.11
		
		ТекстФормулы = "пп. 5.3. Листа З = Лист З (пп.5.2 - пп. 5.1)";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "если пп. 5.3 Листа З = Лист З (пп. 5.2 - пп .5.1), то завышена/занижена, сумма полученного убытка";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗ.П000021024001;
		
		ПраваяЧасть = ЛистЗ.П000021023001
		- ЛистЗ.П000021022001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗ.П000021023001) + " - "
		+ Строка(ЛистЗ.П000021022001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//18.12
		
		ТекстФормулы = "пп. 5.4 Листа З =, < пп. 5.3 Листа З";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "если пп. 5.4 Листа З > пп. 5.3 Листа З, то завышена/занижена, сумма убытка, принимаемого к вычету";
		
		Знак = "<=";
		
		ЛеваяЧасть = ЛистЗ.П000021025001;
		
		ПраваяЧасть = ЛистЗ.П000021024001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " + Строка(ПраваяЧасть);
		
		Если ЛеваяЧасть <= ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.13
		
		ТекстФормулы = "пп. 5.6 Листа З = пп. 5.1 Листа З - пп. 5.2 Листа З - пп. 5.5 Листа З - пп. 4.4 Листа З";
		Нарушение = "";
		Описание = "Если пп. 5.6 Листа З <, > пп. 5.1 Листа З - пп. 5.2 Листа З - пп. 5.5 Листа З - пп. 4.4 Листа З, то занижена/завышена сумма налогооблагаемого дохода";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗ.П000021027001;
		
		ПраваяЧасть = ЛистЗ.П000021022001
		- ЛистЗ.П000021023001
		- ЛистЗ.П000021026001
		- ЛистЗ.П000021018001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗ.П000021022001) + " - "
		+ Строка(ЛистЗ.П000021023001) + " - "
		+ Строка(ЛистЗ.П000021026001) + " - "
		+ Строка(ЛистЗ.П000021018001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.14
		
		ТекстФормулы = "пп. 6.3 Листа З = Лист З (пп. 6.1 - пп. 6.2)";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "если пп. 6.3 Листа З <,> Лист З (пп. 6.1 - пп. 6.2), то занижена/завышена сумма полученного налогооблагаемого дохода";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗПродолжение.П000022030001;
		
		ПраваяЧасть = ЛистЗПродолжение.П000022028001
		- ЛистЗПродолжение.П000022029001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗПродолжение.П000022028001) + " - "
		+ Строка(ЛистЗПродолжение.П000022029001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//18.15
		
		ТекстФормулы = "пп. 7.3 Листа З = Лист З (пп. 7.1 - пп. 7.2)";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "Если пп. 7.3 Листа З <,> Лист З (пп. 7.1 - пп. 7.2), то занижена/завышена сумма  налогооблагаемого дохода";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗПродолжение.П000022033001;
		
		ПраваяЧасть = ЛистЗПродолжение.П000022031001
		- ЛистЗПродолжение.П000022032001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗПродолжение.П000022031001) + " - "
		+ Строка(ЛистЗПродолжение.П000022032001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//18.16
		
		ТекстФормулы = "пп. 8.3 Листа З = Лист З (пп. 8.1 - пп. 8.2)";
		Нарушение = "ст. 214.1, НК РФ";
		Описание = "Если пп. 8.3 Листа З <,> Лист З (пп. 8.1 - пп. 8.2), то занижена/завышена сумма  налогооблагаемого дохода";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗПродолжение.П000022036001;
		
		ПраваяЧасть = ЛистЗПродолжение.П000022034001
		- ЛистЗПродолжение.П000022035001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗПродолжение.П000022034001) + " - "
		+ Строка(ЛистЗПродолжение.П000022035001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.17
		
		ТекстФормулы = "пп. 10.1 Листа З = Лист З (пп. 9.1 + пп. 1.3 - пп. 1.4 - пп.1.6)";
		Нарушение = "ст. 214.1, 220.1 НК РФ";
		Описание = "если пп. 10.1 Листа З <,> Лист З (пп. 9.1 + пп. 1.3 - пп. 1.4 - пп.1.6), то занижена/завышена сумма убытков, переходящих на будущие налоговые периоды";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗПродолжение.П000022039001;
		
		ПраваяЧасть = ЛистЗПродолжение.П000022037001
		+ ЛистЗ.П000021003001
		- ЛистЗ.П000021004001
		- ЛистЗ.П000021006001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗПродолжение.П000022037001) + " + "
		+ Строка(ЛистЗ.П000021003001) + " - "
		+ Строка(ЛистЗ.П000021004001) + " - "
		+ Строка(ЛистЗ.П000021006001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.18
		
		ТекстФормулы = "пп. 10.2 Листа З = Лист З (пп. 9.2 + пп. 4.3 - пп 4.4 - пп. 4.5 - пп. 4.6 + пп. 5.3 - пп. 5.4 - пп. 5.5)";
		Нарушение = "ст. 214.1, 220.1 НК РФ";
		Описание = "если пп. 10.2 Листа З <,> Лист З (пп. 9.2 + пп. 4.3 - пп 4.4 - пп. 4.5 - пп. 4.6 + пп. 5.3 - пп. 5.4 - пп. 5.5), то занижена/завышена сумма убытков, переходящих на будущие налоговые периоды";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗПродолжение.П000022040001;
		
		ПраваяЧасть = ЛистЗПродолжение.П000022038001
		+ ЛистЗ.П000021017001
		- ЛистЗ.П000021018001
		- ЛистЗ.П000021019001
		- ЛистЗ.П000021020001
		+ ЛистЗ.П000021024001
		- ЛистЗ.П000021025001
		- ЛистЗ.П000021026001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗПродолжение.П000022038001) + " + "
		+ Строка(ЛистЗ.П000021017001) + " - "
		+ Строка(ЛистЗ.П000021018001) + " - "
		+ Строка(ЛистЗ.П000021019001) + " - "
		+ Строка(ЛистЗ.П000021020001) + " + "
		+ Строка(ЛистЗ.П000021024001) + " - "
		+ Строка(ЛистЗ.П000021025001) + " - "
		+ Строка(ЛистЗ.П000021026001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		
		//18.19
		
		ТекстФормулы = "пп. 11.1 Листа З = Лист З (пп. 1.1 + пп. 2.1 +пп. 3.1 +пп. 4.1 + пп. 5.1 + пп. 6.1 + пп. 7.1 + пп. 8.1)";
		Нарушение = "ст. 214.1 НК РФ";
		Описание = "если пп. 11.1 Листа З <,> Лист З (пп. 1.1 + пп. 2.1 +пп. 3.1 +пп. 4.1 + пп. 5.1 + пп. 6.1+ пп. 7.1 + пп. 8.1), то занижена/завышена сумма полученного дохода";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗПродолжение.П000022041001;
		
		ПраваяЧасть = ЛистЗ.П000021001001
		+ ЛистЗ.П000021008001
		+ ЛистЗ.П000021012001
		+ ЛистЗ.П000021015001
		+ ЛистЗ.П000021022001
		+ ЛистЗПродолжение.П000022028001
		+ ЛистЗПродолжение.П000022031001
		+ ЛистЗПродолжение.П000022034001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗ.П000021001001) + " + "
		+ Строка(ЛистЗ.П000021008001) + " + "
		+ Строка(ЛистЗ.П000021012001) + " + "
		+ Строка(ЛистЗ.П000021015001) + " + "
		+ Строка(ЛистЗ.П000021022001) + " + "
		+ Строка(ЛистЗПродолжение.П000022028001) + " + "
		+ Строка(ЛистЗПродолжение.П000022031001) + " + "
		+ Строка(ЛистЗПродолжение.П000022034001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.20
		
		ТекстФормулы = "пп. 11.2 Листа З = Лист З (пп. 1.7 + пп. 2.4 + пп. 3.3 + пп. 4.7 + пп. 5.6 + пп. 6.3 + пп. 7.3 + пп. 8.3)";
		Нарушение = "ст. 214.1 НК РФ";
		Описание = "если пп. 11.2 Листа З <,> Лист З (пп. 1.7 + пп. 2.4 + пп. 3.3 + пп. 4.7 + пп. 5.6 + пп. 6.3 + пп. 7.3 + пп. 8.3) то занижена/завышена сумма налогооблагаемого дохода";
		
		Знак = "=";
		
		ЛеваяЧасть = ЛистЗПродолжение.П000022042001;
		
		ПраваяЧасть = ЛистЗ.П000021007001
		+ ЛистЗ.П000021011001
		+ ЛистЗ.П000021014001
		+ ЛистЗ.П000021021001
		+ ЛистЗ.П000021027001
		+ ЛистЗПродолжение.П000022030001
		+ ЛистЗПродолжение.П000022033001
		+ ЛистЗПродолжение.П000022036001;
				
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗ.П000021007001) + " + "
		+ Строка(ЛистЗ.П000021011001) + " + "
		+ Строка(ЛистЗ.П000021014001) + " + "
		+ Строка(ЛистЗ.П000021021001) + " + "
		+ Строка(ЛистЗ.П000021027001) + " + "
		+ Строка(ЛистЗПродолжение.П000022030001) + " + "
		+ Строка(ЛистЗПродолжение.П000022033001) + " + "
		+ Строка(ЛистЗПродолжение.П000022036001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
		//18.21
		
		ТекстФормулы = "пп. 11.3 Листа З = Лист З (пп. 11.1 - пп. 11.2)";
		Нарушение = "ст. 214.1 НК РФ";
		Описание = "если пп. 11.3 Листа З <,> Лист З (пп. 11.1 - пп. 11.2), то занижена/завышена сумма расходов принимаемых к вычету";
		
		Знак = "=";
				
		ЛеваяЧасть = ЛистЗПродолжение.П000022043001;
		
		ПраваяЧасть = ЛистЗПродолжение.П000022041001
		- ЛистЗПродолжение.П000022042001;
		
		Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
		+ Строка(ЛистЗПродолжение.П000022041001) + " - "
		+ Строка(ЛистЗПродолжение.П000022042001);
		
		Если ЛеваяЧасть = ПраваяЧасть Тогда
			
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЛистаИ(СтруктураРезультата)
	
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
		
		ЛистИ = СтруктураДанныхЛистИ;
		
		Если СтраницаРазделаЗаполнена(ЛистИ) Тогда
			
			Раздел1 = СтруктураДанныхРаздел1;
			ЛистГ1 =  СтруктураДанныхЛистГ1;
			ЛистВ =  ТаблицаСтраницыЛистВ;
			ЛистДСтраницы = ТаблицаСтраницыЛистД;
			ЛистЕ =  СтруктураДанныхЛистЕ;
			ЛистЖ1 = СтруктураДанныхЛистЖ1;
			ЛистЖ2 = СтруктураДанныхЛистЖ2;
			ЛистЖ3 = ТаблицаСтраницыЛистЖ3;
			ЛистЗПродолжение = СтруктураДанныхЛистЗПродолжение;
			
			//19.1
			
			ТекстФормулы = "пп. 2.7 Листа И = Раздел 1 строка 010 - пп. 1.9 Лист Г1 - пп. 3.2 Листа В - п. 6.1 Листа Д -п. 4 Листа Е - п. 2.8 Листа Ж1 - п. 3 Листа Ж2 - п.3 Листа Ж3 - пп. 11.3 Листа З - пп 2.5 Листа И - пп. 2.6 Листа И";
			Нарушение = "ст.208, 210 НК РФ";
			Описание = "если п п. 2.7 Листа И  <,>  Раздел 1 строка 010 - пп. 1.9 Лист Г1  - пп. 3.2 Листа В - п. 6.1 Листа Д -п. 4 Листа Е - п. 2.8 Листа Ж1 - п. 3 Листа Ж2 - п.3 Листа Ж3 - пп. 11.3 Листа З - пп 2.5 Листа И - пп. 2.6 Листа И, то допущены ошибки в определении налогооблагаемой базы";
			
			Знак = "=";
			
			ЛеваяЧасть = ЛистИ.П000024023004;
			
			ЛистДП000012001110 = 0;
			СтрокаЛистДП000012001110 = "";
			Для НомСтр = 1 По ЛистДСтраницы.Количество() Цикл
				ЛистД = ЛистДСтраницы[НомСтр-1].Данные[0].Значение;
				ЛистДП000012001110  = ЛистДП000012001110 + ЛистД.П000012001110;
				СтрокаЛистДП000012001110 = СтрокаЛистДП000012001110 + " - " + ЛистД.П000012001110;
			КонецЦикла;
			ЛистВ_П000090001201 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистВ", "П000090001201", Ложь);
			ЛистЖ3_П000022021001 = СуммаПоказателяПоВсемСтраницам(ЭтаФорма, " ЛистЖ3", "П000022021001", Ложь);
			
			ПраваяЧасть = Раздел1.П000010001003
			- ЛистГ1.П000010116004
			- ЛистВ_П000090001201
			- ЛистДП000012001110
			- ЛистЕ.П000014019002
			- ЛистЖ1.П000020022004
			- ЛистЖ2.П000021012004
			- ЛистЖ3_П000022021001
			- ЛистЗПродолжение.П000022043001
			- ЛистИ.П000024021004
			- ЛистИ.П000024022004
			;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " "
			+ Строка(Раздел1.П000010001003) + " - "
			+ Строка(ЛистГ1.П000010116004) + " - "
			+ Строка(ЛистВ_П000090001201)
			+ СтрокаЛистДП000012001110 + " - "
			+ Строка(ЛистЕ.П000014019002) + " - "
			+ Строка(ЛистЖ1.П000020022004) + " - "
			+ Строка(ЛистЖ2.П000021012004) + " - "
			+ Строка(ЛистЖ3_П000022021001) + " - "
			+ Строка(ЛистЗПродолжение.П000022043001) + " - "
			+ Строка(ЛистИ.П000024021004) + " - "
			+ Строка(ЛистИ.П000024022004);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//19.2
			
			ТекстФормулы = "Лист И(пп. 2.8 + пп. 2.9) <= Лист И  строка 230";
			Нарушение = "ст.220 НК РФ";
			Описание = "если Лист И (пп. 2.8 + пп. 2.9) > Лист И строка 230, то  неправомерно предоставлен имущественный налоговый вычет";
			
			Знак = "<=";
			
			ЛеваяЧасть = ЛистИ.П000024024004 + ЛистИ.П000024025004;
			
			ПраваяЧасть = ЛистИ.П000024023004;
			
			Расшифровка = Строка(ЛистИ.П000024024004) + " + " + Строка(ЛистИ.П000024025004) + " " + Знак + " " + Строка(ПраваяЧасть);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//19.3
			
			ТекстФормулы = "пп. 2.10 Листа И  = Лист И (пп. 1.11  - строка 130 -  пп. 2.5 -  пп. 2.8)";
			Нарушение = "ст.220 НК РФ";
			Описание = "если пп. 2.10 Листа И <,> Лист И (пп. 1.11 - строка 130 - пп. 2.5 - пп. 2.8), то занижена / завышена сумма  документально подтвержденных расходов  на новое строительство или приобретение жилья, переходящая на следующий налоговый период";
			
			Знак = "=";
			
			ЛеваяЧасть = ЛистИ.П000024026004;
			
			ПраваяЧасть = ЛистИ.П000024011004 - ЛистИ.П000024013004 - ЛистИ.П000024021004 - ЛистИ.П000024024004;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
			+ Строка(ЛистИ.П000024011004) + " - " 
			+ Строка(ЛистИ.П000024013004) + " - " 
			+ Строка(ЛистИ.П000024021004) + " - "
			+ Строка(ЛистИ.П000024024004);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//19.4
			
			ТекстФормулы = "пп. 2.11 Листа И  = Лист И(пп. 1.12 -строка 160 - пп. 2.6 -пп. 2.9)";
			Нарушение = "ст.220 НК РФ";
			Описание = "если пп. 2.11 Листа И <,> Лист И (пп. 1.12 - строка 160 - пп. 2.6 -пп. 2.9), то занижена/завышена сумма  уплаченных процентов по целевым займам (кредитам), переходящая на следующий налоговый период";
			
			Знак = "=";
			
			ЛеваяЧасть = ЛистИ.П000024027004;
			
			
			ПраваяЧасть = ЛистИ.П000024012004 - ЛистИ.П000024016004 - ЛистИ.П000024022004 - ЛистИ.П000024025004;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
			+ Строка(ЛистИ.П000024012004) + " - " 
			+ Строка(ЛистИ.П000024016004) + " - " 
			+ Строка(ЛистИ.П000024022004) + " - "
			+ Строка(ЛистИ.П000024025004);
			
			Если ЛеваяЧасть = ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//19.5
			ТекстФормулы = "пп. 2.8 Листа И <= Лист И (пп. 1.11 - строка 130 - пп. 2.5)";
			Нарушение = "ст.220 НК РФ";
			Описание = "если пп. 2.8 Листа И > Лист И (пп. 1.11 - строка 130 - пп. 2.5), то завышена сумма документально подтвержденных расходов на новое строительство или приобретение жилья, принимаемая к зачету в онп на основании декларации";
			
			Знак = "<=";
			
			ЛеваяЧасть = ЛистИ.П000024024004;
			
			ПраваяЧасть = ЛистИ.П000024011004 - ЛистИ.П000024013004 - ЛистИ.П000024021004;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
			+ Строка(ЛистИ.П000024011004) + " - " 
			+ Строка(ЛистИ.П000024013004) + " - " 
			+ Строка(ЛистИ.П000024021004);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//19.6
			
			ТекстФормулы = "пп. 2.9 Листа И <,= Лист И (пп. 1.12 - строка 160 - пп. 2.6)";
			Нарушение = "ст.220 НК РФ";
			Описание = "если пп. 2.9 Листа И > Лист И (пп. 1.12 - строка 160 - пп. 2.6), то завышена сумма  уплаченных процентов по целевым займам (кредитам), принимаемая для целей иущественного налогового вычета за отчетный налоговый период";
			
			Знак = "<=";
			
			ЛеваяЧасть = ЛистИ.П000024025004;
			
			ПраваяЧасть = ЛистИ.П000024012004 - ЛистИ.П000024016004 - ЛистИ.П000024022004;
			
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
			+ Строка(ЛистИ.П000024012004) + " - " 
			+ Строка(ЛистИ.П000024016004) + " - " 
			+ Строка(ЛистИ.П000024022004);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			//19.7
			ТекстФормулы = "пп. 2.3 Листа И <= Лист И (пп. 1.11 - пп. 2.1)";
			Нарушение = "ст.220 НК РФ";
			Описание = "если пп. 2.3 Листа И > Лист И (пп. 1.11 - пп. 2.1), то завышена сумма  остатка имущественного налогового вычета, перешедшая с предыдущего налогового периода";
			
			Знак = "<=";
			
			ЛеваяЧасть = ЛистИ.П000024019004;
			
			
			ПраваяЧасть = ЛистИ.П000024011004 - ЛистИ.П000024013004;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
			+ Строка(ЛистИ.П000024011004) + " - " 
			+ Строка(ЛистИ.П000024013004);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//19.8
			ТекстФормулы = "пп. 2.4 Листа И <= Лист И (пп. 1.12 - пп. 2.2)";
			Нарушение = "ст.220 НК РФ";
			Описание = "Если пп. 2.4 Листа И > Лист И (пп. 1.12 - пп. 2.2), то завышена сумма  остатка имущественного налогового вычета, перешедшая с предыдущего налогового периода";
			
			Знак = "<=";
			
			
			ЛеваяЧасть = ЛистИ.П000024020004;
			
			ПраваяЧасть = ЛистИ.П000024012004 - ЛистИ.П000024016004;
			
			Расшифровка = Строка(ЛеваяЧасть) + " " + Знак + " " 
			+ Строка(ЛистИ.П000024012004) + " - " 
			+ Строка(ЛистИ.П000024016004);
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
			
			
			//19.9
			ТекстФормулы = "Лист И (пп. 2.1 + пп. 2.5 + пп. 2.8 + пп. 2.10) < , = 2000000";
			Нарушение = "ст.220 НК РФ";
			Описание = "Если Лист И (пп. 2.1 + пп. 2.5 + пп. 2.8 + пп. 2.10) > 2000000, то завышена сумма имущественного налогового вычета";
			
			Знак = "<=";
			
			ЛеваяЧасть = ЛистИ.П000024013004 + ЛистИ.П000024021004 + ЛистИ.П000024024004 + ЛистИ.П000024026004;
			
			ПраваяЧасть = 2000000;
			
			Расшифровка = Строка(ЛистИ.П000024013004) + " + " 
			+ Строка(ЛистИ.П000024021004) + " + " 
			+ Строка(ЛистИ.П000024024004) + " + "
			+ Строка(ЛистИ.П000024026004)
			+ " " + Знак + " 2000000";
			
			Если ЛеваяЧасть <= ПраваяЧасть Тогда
				
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, "", ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, Нарушение, Описание, ЭтоОшибка);
		КонецЕсли;
		
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтраницаРазделаЗаполнена(Лист, Условия = Неопределено)
	ЕстьДанные = Ложь;
	
	//проверка экземпляра	
	Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(Лист, Условия) Тогда
		//нет условий или они все выполняются
		
		Для Каждого Показатель Из Лист Цикл
			Если Лев(Показатель.Ключ,1) = "П" И ЗначениеЗаполнено(Показатель.Значение) Тогда
				ЕстьДанные = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;		
	
	Возврат ЕстьДанные;
	
КонецФункции	

 //ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
 
// Создает новый экземпляр объекта Структура, заполняет объект данными указанной структуры.
//
// Параметры:
//  СтруктураИсточник - Структура - структура, копию которой необходимо получить
// 
//  Возвращаемое значение:
//  Тип: Структура.
//
&НаСервере
Функция СкопироватьСтруктуру(СтруктураИсточник) Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого Элемент ИЗ СтруктураИсточник Цикл
		
		Если ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение.Скопировать());
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДеревоЗначений") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение.Скопировать());
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, СкопироватьСтруктуру(Элемент.Значение));
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение.Скопировать());
			
		Иначе
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		Если ТабличныйДокумент.Области.НомерКорректировки.Значение = "" Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		КонецЕсли;
		Вариант = Число(ТабличныйДокумент.Области.НомерКорректировки.Значение);
	Иначе
		Вариант = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП 	= "";

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
			
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;

	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтраницТекущегоРаздела = ТекущиеДанные.ПолучитьЭлементы().Количество();
	
	Если КоличествоСтраницТекущегоРаздела = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = КоличествоСтраницТекущегоРаздела Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	НаимРаздела = КопияТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	//Для многостраничных разделов и разделов с итогами не на каждой странице, может понадобиться другой макет
	Если (НаимРаздела = "ЛистА"
		Или НаимРаздела = "ЛистБ" 
		Или НаимРаздела = "ЛистВ" 
		Или НаимРаздела = "ЛистГ1Продолжение" 
		Или НаимРаздела = "ЛистГ2"
		Или НаимРаздела = "ЛистГ3"
		Или НаимРаздела = "ЛистД"
		Или НаимРаздела = "ЛистЖ3"
		Или НаимРаздела = "Раздел6")
		Тогда
		
		НомерВыводимойСтраницы = СтруктураРеквизитовФормы.НомерТекущейСтраницы;
		Если ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
			НомерВыводимойСтраницы = ?(СтруктураРеквизитовФормы.НомерТекущейСтраницы = КоличествоСтраницТекущегоРаздела, КоличествоСтраницТекущегоРаздела, СтруктураРеквизитовФормы.НомерТекущейСтраницы + 1);
		КонецЕсли;
	
		ВывестиМакетВТаблДокНаСервере(НаимРаздела, НомерВыводимойСтраницы, Истина, ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
		РасчетНаКлиенте(НаимРаздела);
	КонецЕсли;
	
	ИндексУдаляемойСтраницы = ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные);
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИндексУдаляемойСтраницы);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ИндексУдаляемойСтраницы);
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Команда = ДополнительныеПараметры.Команда;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДобавитьСтраницу(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКодаВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела 			 = ДополнительныеПараметры.ИмяРаздела;
	ИмяЯчейки			 = ДополнительныеПараметры.ИмяЯчейки;
	Область				 = ДополнительныеПараметры.Область;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент 			 = ДополнительныеПараметры.Элемент;
	                                                               	
	Если Результат <> Неопределено Тогда
		
		КодЭлементаСправочника = КодЭлементаСправочника(Результат);
		
		Если Область.Значение <> КодЭлементаСправочника Тогда
			
			Область.Значение = КодЭлементаСправочника;
			
			Курс = ПолучитьКурсВалютыНаДату(Область.Значение,ТабличныйДокумент.Области["П000080001005" + Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки,"_"))].Значение);
			
			ИмяПоказателяКурса = "П000080001006" + Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки,"_"));
			ТабличныйДокумент.Области[ИмяПоказателяКурса].Значение = Курс;

			СохранитьДанныеРаздела("ЛистБ", Ложь, Ложь);				
			РасчетНаКлиенте(ИмяРаздела, ИмяПоказателяКурса);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		
		КодПоказателя = ПараметрВводаПоля.Показатель;
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныМираЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела			 = ДополнительныеПараметры.ИмяРаздела;
	ИмяЯчейки			 = ДополнительныеПараметры.ИмяЯчейки;
	Область				 = ДополнительныеПараметры.Область;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент 			 = ДополнительныеПараметры.Элемент;
	                                         	
	Если Результат <> Неопределено Тогда
		
		КодЭлементаСправочника = КодЭлементаСправочника(Результат);
		
		Если Область.Значение <> КодЭлементаСправочника Тогда
			
			Область.Значение = КодЭлементаСправочника;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		
		КодПоказателя = ПараметрВводаПоля.Показатель;
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КодЭлементаСправочника(Результат)
	
	Возврат Результат.Код;
	
КонецФункции	

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["КодИМНС"].Значение = ВыбранныйКодНО;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		
		ОчиститьНаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
	КонецЕсли;
	РасчетПослеИзмененияСодержания(ИмяПоказателя, ИмяРаздела, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетПослеИзмененияСодержания(ИмяПоказателя, ИмяРаздела, Область)
	
	Если (Лев(ИмяПоказателя,13) = "П000080001005") Тогда //Лист Б информация о дате получения дохода в валюте, нужно перечитать курс
		Курс = ПолучитьКурсВалютыНаДату(ТабличныйДокумент.Области["П000080001004" + Сред(ИмяПоказателя, СтрНайти(ИмяПоказателя,"_"))].Значение, Область.Значение);
		ИмяПоказателяКурса = "П000080001006" + Сред(ИмяПоказателя, СтрНайти(ИмяПоказателя,"_"));
		ТабличныйДокумент.Области[ИмяПоказателяКурса].Значение = Курс;
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателяКурса, Курс);
	КонецЕсли;
	
	Если (Лев(ИмяПоказателя,13) = "П000080001009") Тогда //Лист Б информация о дате уплаты налога в валюте, нужно перечитать курс
		Курс = ПолучитьКурсВалютыНаДату(ТабличныйДокумент.Области["П000080001004" + Сред(ИмяПоказателя, СтрНайти(ИмяПоказателя,"_"))].Значение, Область.Значение);
		ИмяПоказателяКурса = "П000080001010" + Сред(ИмяПоказателя, СтрНайти(ИмяПоказателя,"_"));
		ТабличныйДокумент.Области[ИмяПоказателяКурса].Значение = Курс;
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателяКурса, Курс);
	КонецЕсли;
	
	//действия, связанные с показателями, обладающими списками выбора,
	//на элементы которых наложены условия (макет "Списки...")
	Если ИмяПоказателя = "СтатусНалогоплательщика" Тогда 			
		ОбновитьПеременныеМодуляНаКлиенте("СтатусНалогоплательщика",Область.Значение);
	КонецЕсли;
	
	//расчет выполняется в структуре, обновляем каждое значение после ввода
	
	Если ИмяРаздела = "Титульный"
		И ИмяПоказателя = "Фамилия"
		Или ИмяПоказателя = "Имя"
		Или ИмяПоказателя = "Отчество"
		Или ИмяПоказателя = "ИНН"
		Тогда
		СохранитьЗначениеПоказателяВСтруктуреНаСервере(ИмяРаздела, ИмяПоказателя, Область.Значение);
	Иначе
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
	КонецЕсли;
	
	Если ИмяРаздела = "ЛистА" 
		ИЛИ ИмяРаздела = "ЛистБ" 
		ИЛИ ИмяРаздела = "ЛистВ" 
		ИЛИ ИмяРаздела = "ЛистГ1" 
		ИЛИ ИмяРаздела = "ЛистГ1Продолжение" 
		ИЛИ ИмяРаздела = "ЛистГ2"
		ИЛИ ИмяРаздела = "ЛистГ3"
		ИЛИ ИмяРаздела = "ЛистД" 
		ИЛИ ИмяРаздела = "ЛистЕ"
		ИЛИ ИмяРаздела = "ЛистЖ1"
		ИЛИ ИмяРаздела = "ЛистЖ2"
		ИЛИ ИмяРаздела = "ЛистЖ3"
		ИЛИ ИмяРаздела = "ЛистЗ"
		ИЛИ ИмяРаздела = "ЛистЗПродолжение"
		ИЛИ ИмяРаздела = "ЛистИ" Тогда
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере всех разделов
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьНаКлиенте(, Новый ОписаниеОповещения("ЗаписатьИЗакрытьПродолжение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	ТабличноеПолеИмя = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Элементы.УдалитьСтроку.Доступность = Ложь;
	
	Если ТабличноеПолеИмя = "ЛистА"
	 ИЛИ ТабличноеПолеИмя = "ЛистБ"
	 ИЛИ ТабличноеПолеИмя = "ЛистГ2"
	 ИЛИ ТабличноеПолеИмя = "ЛистГ3" Тогда
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.УдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры