#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НаДату > '20080601' Тогда
		Возврат Перечисления.ВерсииФорматовВыгрузки.Версия500;
	ИначеЕсли НаДату > '20050101' Тогда
		Возврат Перечисления.ВерсииФорматовВыгрузки.Версия300;
	КонецЕсли;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ТаблицаФормОтчета = НоваяТаблицаФормОтчета();
	
	ЗаполнитьЗначенияСвойств(ТаблицаФормОтчета.Добавить(), РеквизитыФормыОтчета2019());
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2018кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 25.10.2017 г. № ММВ-7-11/822@";
	НоваяФорма.РедакцияФормы      = "от 25.10.2017 г. № ММВ-7-11/822@";
	НоваяФорма.ДатаНачалоДействия = '20170101';
	НоваяФорма.ДатаКонецДействия  = '20181231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2017кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 10.10.2016 г. № ММВ-7-11/552@";
	НоваяФорма.РедакцияФормы      = "от 10.10.2016 г. № ММВ-7-11/552@";
	НоваяФорма.ДатаНачалоДействия = '20160101';
	НоваяФорма.ДатаКонецДействия  = '20161231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2016кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 25.11.2015 г. № ММВ-7-11/544@";
	НоваяФорма.РедакцияФормы      = "от 25.11.2015 г. № ММВ-7-11/544@";
	НоваяФорма.ДатаНачалоДействия = '20150101';
	НоваяФорма.ДатаКонецДействия  = '20151231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2015кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 24.12.2014 г. № ММВ-7-11/671@";
	НоваяФорма.РедакцияФормы      = "от 24.12.2014 г. № ММВ-7-11/671@";
	НоваяФорма.ДатаНачалоДействия = '20140101';
	НоваяФорма.ДатаКонецДействия  = '20151231';

	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2014кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 10.11.2011 г. № ММВ-7-3/760@ (в редакции приказа ФНС России от 14.11.2013 г. N ММВ-7-3/501@)";
	НоваяФорма.РедакцияФормы      = "от 14.11.2013 г. N ММВ-7-3/501@";
	НоваяФорма.ДатаНачалоДействия = '20130101';
	НоваяФорма.ДатаКонецДействия  = '20141231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2011кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 10.11.2011 г. № ММВ-7-3/760@";
	НоваяФорма.РедакцияФормы      = "от 10.11.2011 г. № ММВ-7-3/760@";
	НоваяФорма.ДатаНачалоДействия = '20110101';
	НоваяФорма.ДатаКонецДействия  = '20131231';
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Период       = ЭкземплярРеглОтчета.ДатаОкончания;
	ДанныеОтчета = ЭкземплярРеглОтчета.ДанныеОтчета.Получить();
	
	ТаблицаДанныхРеглОтчета = ИнтерфейсыВзаимодействияБРО.НовыйТаблицаДанныхРеглОтчета();
	
	Если    ЭкземплярРеглОтчета.ВыбраннаяФорма = "ФормаОтчета2018кв1"
		Или ЭкземплярРеглОтчета.ВыбраннаяФорма = "ФормаОтчета2019кв1" Тогда
		
		ПризнакУплата = ПризнакиУплатыВозврата(ЭкземплярРеглОтчета.ВыбраннаяФорма).Уплата;
		
		ДанныеДекларации = ПрочитатьДанныеДекларации(ДанныеОтчета, ЭкземплярРеглОтчета.ВыбраннаяФорма, "Раздел1");
		Для Каждого СтрокаДекларации Из ДанныеДекларации Цикл
			Если СтрокаДекларации.ПризнакУплатыВозврата = ПризнакУплата Тогда
				Сумма = ТаблицаДанныхРеглОтчета.Добавить();
				Сумма.Период    = Период;
				Сумма.ВидНалога = ВидНалогаПоКБК(СтрокаДекларации.КБК, ЭкземплярРеглОтчета.ВыбраннаяФорма);
				Сумма.КБК       = СтрокаДекларации.КБК;
				Сумма.ОКАТО     = СтрокаДекларации.ОКТМО;
				Сумма.Сумма     = СтрокаДекларации.СуммаНалога;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
		
		Если    ЭкземплярРеглОтчета.ВыбраннаяФорма = "ФормаОтчета2015кв1"
			Или ЭкземплярРеглОтчета.ВыбраннаяФорма = "ФормаОтчета2016кв1"
			Или ЭкземплярРеглОтчета.ВыбраннаяФорма = "ФормаОтчета2017кв1" Тогда
			
			// Сумма платежа
			// Раздел 1 (многостраничный)
			// 020 - КБК
			// 030 - ОКТМО
			// 040 - сумма
			
			ИмяКБК     = "П000100001020"; // 020
			ИмяОКТМО   = "П000100001030"; // 030
			ИмяСумма   = "П000100001040"; // 040
			ИмяРаздела = "Раздел1";
			
		Иначе
			
			// Сумма платежа
			// Раздел 6 (многостраничный)
			// 020 - КБК
			// 030 - ОКАТО
			// 040 - сумма
			
			ИмяКБК     = "П000060002003"; // 020
			ИмяОКТМО   = "П000060003003"; // 030
			ИмяСумма   = "П000060004003"; // 040
			ИмяРаздела = "Раздел6";
			
		КонецЕсли;
		
		Если ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство(ИмяРаздела) Тогда
			
			Раздел = ДанныеОтчета.ДанныеМногостраничныхРазделов[ИмяРаздела];
			
			Для Каждого Страница Из Раздел Цикл
				
				Данные = Страница.Данные;
				
				Сумма = ТаблицаДанныхРеглОтчета.Добавить();
				Сумма.Период    = Период;
				Сумма.ВидНалога = ВидНалогаПоКБК(Данные[ИмяКБК], ЭкземплярРеглОтчета.ВыбраннаяФорма);
				Сумма.КБК       = Данные[ИмяКБК];
				Сумма.ОКАТО     = Данные[ИмяОКТМО];
				Сумма.Сумма     = Данные[ИмяСумма];
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДанныхРеглОтчета;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ДеревоФормИФорматов = НовоеДеревоФормИФорматов();
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20111110', "ММВ-7-3/760@", "ФормаОтчета2011кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.07");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20131114', "ММВ-7-3/501@", "ФормаОтчета2014кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.08");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20141224', "ММВ-7-11/671@", "ФормаОтчета2015кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.09");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20151125', "ММВ-7-11/544@", "ФормаОтчета2016кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.10");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20161010', "ММВ-7-11/552@", "ФормаОтчета2017кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.11");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20171025', "ММВ-7-11/822@", "ФормаОтчета2018кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.12");
	
	СтрокаФормыПоФормату = ДеревоФормИФорматов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату, РеквизитыФормы2019());
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату.Строки.Добавить(), РеквизитыФормата2019());
	
	Возврат ДеревоФормИФорматов;
	
КонецФункции

// Возвращает имя формы, действующей в налоговом периоде
//
Функция ФормаПоУмолчанию(Период, ОписаниеОтчета = "", РедакцияФормы = "") Экспорт
	
	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ДействующиеФормы = ДействующиеФормы(Период);
	Если ДействующиеФормы.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Выбираем самую новую из вступивших в силу форм отчета
	Для Каждого Строка Из ДействующиеФормы Цикл
		Если Не ЗначениеЗаполнено(Строка.ДатаКонецДействия) Или ТекущаяДатаПользователя <= Строка.ДатаКонецДействия Тогда
			ВыбраннаяФорма = Строка;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбраннаяФорма = Неопределено Тогда
		// Форма отчета одна, но еще не вступила в силу
		ВыбраннаяФорма = ДействующиеФормы[0];
	КонецЕсли;
	
	ОписаниеОтчета = ВыбраннаяФорма.ОписаниеОтчета;
	РедакцияФормы = ВыбраннаяФорма.РедакцияФормы;
	
	Возврат ВыбраннаяФорма.ФормаОтчета;
	
КонецФункции

Функция ДействующиеФормы(Знач Период) Экспорт
	
	Период = НачалоДня(Период);
	
	ДействующиеФормы = Новый Массив;
	
	ТаблицаФормОтчета = ТаблицаФормОтчета();
	ТаблицаФормОтчета.Сортировать("ДатаНачалоДействия Убыв");
	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		Если (Строка.ДатаНачалоДействия <= Период) И (Период <= Строка.ДатаКонецДействия Или Не ЗначениеЗаполнено(Строка.ДатаКонецДействия)) Тогда
			ДействующиеФормы.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДействующиеФормы;
	
КонецФункции

Функция СостояниеОтправки(ЭкземплярРеглОтчета) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭкземплярРеглОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		СостояниеОтправки = КонтекстЭДОСервер.ТекущееСостояниеОтправки(ЭкземплярРеглОтчета);
	КонецЕсли;
	
	Возврат СостояниеОтправки;
	
КонецФункции

Функция ДоступнаПечатьPDF417(ВыбраннаяФорма) Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПроцедурыИФункции

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр                       = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код                   = СокрЛП(Код);
	НовСтр.ДатаПриказа           = ДатаПриказа;
	НовСтр.НомерПриказа          = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия    = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта            = СокрЛП(ИмяОбъекта);
	НовСтр.Описание              = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр                       = Форма.Строки.Добавить();
	НовСтр.Код                   = СокрЛП(Версия);
	НовСтр.ДатаПриказа           = ДатаПриказа;
	НовСтр.НомерПриказа          = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия    = ?(ЗначениеЗаполнено(ДатаНачалаДействия), ДатаНачалаДействия, Форма.ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ЗначениеЗаполнено(ДатаОкончанияДействия), ДатаОкончанияДействия, Форма.ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта            = СокрЛП(ИмяОбъекта);
	НовСтр.Описание              = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция НоваяТаблицаФормОтчета()
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОбщегоНазначения.ОписаниеТипаСтрока(100), "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "         " + "по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОбщегоНазначения.ОписаниеТипаСтрока(50), "Редакция формы", 20);
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция НовыеРеквизитыФормыОтчета()
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НоваяТаблицаФормОтчета().Добавить());
	
КонецФункции

Функция НовоеДеревоФормИФорматов()
	
	ДеревоФормИФорматов = Новый ДеревоЗначений;
	ДеревоФормИФорматов.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(7));
	ДеревоФормИФорматов.Колонки.Добавить("ДатаПриказа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДеревоФормИФорматов.Колонки.Добавить("НомерПриказа", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДеревоФормИФорматов.Колонки.Добавить("ДатаНачалаДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДеревоФормИФорматов.Колонки.Добавить("ДатаОкончанияДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДеревоФормИФорматов.Колонки.Добавить("ИмяОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДеревоФормИФорматов.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Возврат ДеревоФормИФорматов;
	
КонецФункции

Функция НовыеРеквизитыФормИФорматовПриказа()
	
	ДеревоФормИФорматов = НовоеДеревоФормИФорматов();
	СтрокаДереваЗначений = ДеревоФормИФорматов.Строки.Добавить();
	
	Реквизиты = Новый Структура;
	Для каждого Колонка Из ДеревоФормИФорматов.Колонки Цикл
		Реквизиты.Вставить(Колонка.Имя, СтрокаДереваЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область СохранениеОтчета

// Создает и заполняет новый отчет.
// В случае, если регламентированный отчет передан, то происходит только заполнение отчета.
//
// Параметры:
//   Декларация3НДФЛ - ДокументСсылка.РегламентированныйОтчет
//   Организация - СправочникСсылка.Организации
//   Период - Дата - Налоговый период
//   ДанныеЗаполнения - ТаблицаЗначений - см. НоваяТаблицаДанныхЗаполнения()
//   ДанныеПомощникаЗаполнения - Структура - см. Обработки.ПомощникЗаполнения3НДФЛ.НовыйДанныеПомощникаЗаполнения()
//
Процедура СоздатьЗаполнитьОтчет(Декларация3НДФЛ, Организация, Период, ВыбраннаяФорма, НомерКорректировки, ДанныеЗаполнения, ДанныеПомощникаЗаполнения) Экспорт
	
	СтруктураРеквизитовФормы = СтруктураРеквизитовФормы(Организация, Период, ВыбраннаяФорма);
	СтруктураРеквизитовФормы.Вставить("мВариант", НомерКорректировки);
	
	СоставПоказателей = СоставПоказателей(СтруктураРеквизитовФормы.мСоставПоказателей).СоставПоказателей;
	СоставПоказателей.Индексы.Добавить("ИмяПоляТаблДокумента");
	
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		РегламентированныйОтчет = Декларация3НДФЛ.ПолучитьОбъект();
	Иначе
		РегламентированныйОтчет = СоздатьРегламентированныйОтчет(СтруктураРеквизитовФормы);
	КонецЕсли;
	
	КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитовФормы.Организация, "КодНалоговогоОргана");
	ЗаполнитьРеквизитыШапки(РегламентированныйОтчет, СтруктураРеквизитовФормы, КодИФНС);
	
	КлючиПоказателей = КлючиПоказателейДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	СвойстваРазделов = СвойстваРазделовДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ДанныеОтчета = НоваяСтруктураДанныхОтчета(Организация, Период, СтруктураРеквизитовФормы);
	
	ТитульныйЛист = ДанныеОтчета.ПоказателиОтчета[ИмяПоказателя("Титульный")];
	ЗаполнитьТитульныйЛист(ТитульныйЛист, Организация, Период, НомерКорректировки);
	ЗаполнитьДатуПодписи(ТитульныйЛист, СтруктураРеквизитовФормы);
	ЗаполнитьСведенияОПодписантах(ТитульныйЛист, Организация);
	
	ЗаполненныеРазделы = Новый Структура;
	Для Каждого СтрокаТаблицы Из ДанныеЗаполнения Цикл
		СохранитьСтруктуруДоходовВычетов(СтрокаТаблицы.СтруктураДанных, ДанныеОтчета, КлючиПоказателей, СвойстваРазделов, СоставПоказателей, ЗаполненныеРазделы);
	КонецЦикла;
	
	ДанныеОтчета.Вставить("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения);
	
	РегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
	РегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДеревоСтраницОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма));
	Попытка
		РегламентированныйОтчет.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	Декларация3НДФЛ = РегламентированныйОтчет.Ссылка;
	
КонецПроцедуры

// Заполняет структуру данных титульного листа.
//
// Параметры:
//   ТитульныйЛист - струтура
//   Организация - СправочникСсылка.Организации
//   Период - Дата - Налоговый период
//
Процедура ЗаполнитьТитульныйЛист(ТитульныйЛист, Организация, Период, НомерКорректировки = 0) Экспорт
	
	СписокПоказателей =
		"ИННЮЛ, КодНО,
		|ФИО, ДатаРожд, МестоРожд,
		|КодУдЛичн, СерияУдЛичн, НомерУдЛичн, ДатаУдЛичн, ОрганВыданУдЛичн,
		|ТелСлуж, ТелДом";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Период, СписокПоказателей);
	Если СведенияОбОрганизации = Неопределено Или СведенияОбОрганизации.Количество() = 0 Тогда
		ЗаполнитьЗначенияСвойств(ТитульныйЛист, НоваяСтруктураТитульногоЛиста());
		Возврат;
	КонецЕсли;
	
	// Шапка
	ТитульныйЛист.ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
	ТитульныйЛист.НомерКорректировки = НомерКорректировки;
	ТитульныйЛист.Период = КодНалоговогоПериодаПоУмолчанию();
	ТитульныйЛист.ОтчетГод = Формат(Год(Период), "ЧГ=0");
	ТитульныйЛист.КодИМНС = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СведенияОбОрганизации.КодНО, 4, " ", "Слева");
	ТитульныйЛист.КодСтраны = КодСтраныПоУмолчанию();
	ТитульныйЛист.ПоМесту = КодКатегорииНалогоплательщикаПоУмолчанию();
	
	// Сведения о налогоплательщике
	ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИО);
	Если ФИО.Количество() <> 0 Тогда
		ТитульныйЛист.Фамилия  = СокрЛП(ФИО.Фамилия);
		ТитульныйЛист.Имя      = СокрЛП(ФИО.Имя);
		ТитульныйЛист.Отчество = СокрЛП(ФИО.Отчество);
	КонецЕсли;
	
	ТитульныйЛист.ДатаРождения = СведенияОбОрганизации.ДатаРожд;
	
	ТитульныйЛист.МестоРождения = ПредставлениеМестаРождения(СведенияОбОрганизации.МестоРожд);
	
	// Сведения о документе, удостоверяющем личность:
	ТитульныйЛист.КодВидаДокумента     = СокрЛП(СведенияОбОрганизации.КодУдЛичн);
	ТитульныйЛист.СерияИНомерДокумента = СокрЛП(СтрШаблон("%1 %2", СведенияОбОрганизации.СерияУдЛичн, СведенияОбОрганизации.НомерУдЛичн));
	ТитульныйЛист.ДатаВыдачиДокумента  = СведенияОбОрганизации.ДатаУдЛичн;
	ТитульныйЛист.КемВыданДокумент     = СокрЛП(СведенияОбОрганизации.ОрганВыданУдЛичн);
	
	// Статус налогоплательщика
	ТитульныйЛист.СтатусНалогоплательщика = "1"; // Физическое лицо - налоговый резидент Российской Федерации
	
	// Номер контактного телефона
	ТелОрганизации = ?(Не ПустаяСтрока(СведенияОбОрганизации.ТелСлуж),
		СокрЛП(СведенияОбОрганизации.ТелСлуж),
		СокрЛП(СведенияОбОрганизации.ТелДом));
	
	ТитульныйЛист.ТелОрганизации = ТелефонДляОтчета(ТелОрганизации);
	
КонецПроцедуры

Процедура ЗаполнитьДатуПодписи(ТитульныйЛист, СтруктураРеквизитовФормы)
	
	ТитульныйЛист.ДатаПодписи = СтруктураРеквизитовФормы.ДатаПодписи;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ТитульныйЛист, Организация) Экспорт
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		Организация, ТитульныйЛист.КодИМНС);
	
	Если СведенияОПредставителе.ТипПодписанта = "2" Тогда
		ФИОПодписант = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	Иначе
		ФИОПодписант = Новый Структура("Фамилия,Имя,Отчество", "", "", "");
		ДокументПредставителя = "";
	КонецЕсли;
	
	ТитульныйЛист.ПрПодп = СведенияОПредставителе.ТипПодписанта;
	ТитульныйЛист.ОргПодписантФамилия = ФИОПодписант.Фамилия;
	ТитульныйЛист.ОргПодписантИмя = ФИОПодписант.Имя;
	ТитульныйЛист.ОргПодписантОтчество = ФИОПодписант.Отчество;
	ТитульныйЛист.ДокУпПред = ДокументПредставителя;
	
КонецПроцедуры

Функция ПредставлениеМестаРождения(СтрокаМестоРождения)
	
	МассивЭлементов = СтрРазделить(СтрокаМестоРождения, ",", Ложь);
	
	// Удаляем признак особого места рождения
	Если МассивЭлементов.Количество() <> 0 тогда
		МассивЭлементов.Удалить(0);
	КонецЕсли;
	
	// Запятые меняем на пробелы
	ПредставлениеМестаРождения = СтрСоединить(МассивЭлементов, " ");
	
	Возврат ПредставлениеМестаРождения;
	
КонецФункции

// Возвращает новую таблицу данных заполнения декларации
//
Функция НоваяТаблицаДанныхЗаполнения() Экспорт
	
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ДанныеЗаполнения.Колонки.Добавить("НалоговаяСтавка", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	ДанныеЗаполнения.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеЗаполнения.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ДанныеЗаполнения.Колонки.Добавить("СтруктураДанных", Новый ОписаниеТипов("Структура"));
	ДанныеЗаполнения.Колонки.Добавить("СуммаНалогаИсчисленная", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеЗаполнения.Колонки.Добавить("СуммаНалогаУплаченнаяУдержанная", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеФормыВДанныеОтчета(Форма, ДанныеФормы) Экспорт
	
	СтруктураРеквизитовФормы = ДанныеФормы.СтруктураРеквизитовФормы;
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоказателиОтчета",
		ПоказателиОтчета(ДанныеФормы.СвойстваРазделовДекларации, Форма));
	ДанныеОтчета.Вставить("ДанныеМногострочныхРазделов",
		ДанныеМногострочныхРазделов(ДанныеФормы.мСтруктураМногострочныхРазделов, Форма));
	ДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов",
		ДанныеМногостраничныхРазделов(ДанныеФормы.СвойстваРазделовДекларации, ДанныеФормы.мСтруктураМногостраничныхРазделов, Форма));
	ДанныеОтчета.Вставить("ДанныеВариантовАвтоЗаполнения",
		ДанныеВариантовАвтоЗаполнения(ДанныеФормы.мСтруктураВариантыЗаполнения, Форма));
	ДанныеОтчета.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ДанныеОтчета.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ДанныеОтчета.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ДанныеОтчета.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ДанныеОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ДанныеОтчета.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ДанныеОтчета.Вставить("ДанныеПомощникаЗаполнения", Новый Структура);
	
	Возврат ДанныеОтчета;
	
КонецФункции

Функция НовыеДанныеФормы() Экспорт
	
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("СвойстваРазделовДекларации");
	ДанныеФормы.Вставить("мСтруктураМногострочныхРазделов");
	ДанныеФормы.Вставить("мСтруктураМногостраничныхРазделов");
	ДанныеФормы.Вставить("мСтруктураВариантыЗаполнения");
	ДанныеФормы.Вставить("СтруктураРеквизитовФормы");
	
	Возврат ДанныеФормы
	
КонецФункции

Функция ЗаписатьДанныеФормы(ДанныеФормы, СтруктураРеквизитовФормы, КодИФНС, Автосохранение = Ложь, ВидДокументаНомерКорректировкиИзменен = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		Или СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		Или ВидДокументаНомерКорректировкиИзменен);
	
	Если СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент Тогда
		РегламентированныйОтчет = СоздатьРегламентированныйОтчет(СтруктураРеквизитовФормы);
	Иначе
		РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	ЗаполнитьРеквизитыШапки(РегламентированныйОтчет, СтруктураРеквизитовФормы, КодИФНС);
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоказателиОтчета", ДанныеФормы.ПоказателиОтчета);
	ДанныеОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеФормы.ДанныеМногострочныхРазделов);
	ДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеФормы.ДанныеМногостраничныхРазделов);
	ДанныеОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеФормы.ДанныеВариантовАвтоЗаполнения);
	ДанныеОтчета.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ДанныеОтчета.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ДанныеОтчета.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ДанныеОтчета.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ДанныеОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ДанныеОтчета.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ДанныеОтчета.Вставить("ДанныеПомощникаЗаполнения", Новый Структура);
	
	Если Не СтруктураРеквизитовФормы.УдалитьДанныеПомощника И РегламентированныйОтчет.ДанныеОтчета <> Неопределено Тогда
		// Сохраняем данные Помощника заполнения в случае если не передали флаг "УдалитьДанныеПомощника".
		СохраненныеДанныеОтчета = РегламентированныйОтчет.ДанныеОтчета.Получить();
		Если ТипЗнч(СохраненныеДанныеОтчета) = Тип("Структура") Тогда
			СохраненныеДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения", ДанныеОтчета.ДанныеПомощникаЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	РегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
	
	РегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеФормы.ДеревоНастройкиСтраниц);
	
	Попытка
		РегламентированныйОтчет.Записать();
	Исключение
		Если Не Автосохранение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = РегламентированныйОтчет.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Создает новый документ вида РегламентированныйОтчет и заполняет реквизиты шапки
//
// Параметры:
//   СтруктураРеквизитовФормы - Структура - см. СтруктураРеквизитовФормы()
//
// Возвращаемое значение:
//   ДокументОбъект.РегламентированныйОтчет
//
Функция СоздатьРегламентированныйОтчет(СтруктураРеквизитовФормы)
	
	РегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
	РегламентированныйОтчет.Дата = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	РегламентированныйОтчет.УстановитьВремя();
	
	Возврат РегламентированныйОтчет;
	
КонецФункции

// Заполняет реквизиты шапки документа РегламентированныйОтчет
//
// Параметры:
//   РегламентированныйОтчет - ДокументОбъект.РегламентированныйОтчет
//   СтруктураРеквизитовФормы - Структура - см. СтруктураРеквизитовФормы()
//   КодИФНС - Строка - код ИФНС
//
Процедура ЗаполнитьРеквизитыШапки(РегламентированныйОтчет, СтруктураРеквизитовФормы, КодИФНС)
	
	РегламентированныйОтчет.ИсточникОтчета = "РегламентированныйОтчет3НДФЛ";
	РегламентированныйОтчет.НаименованиеОтчета = "Декларация 3-НДФЛ";
	РегламентированныйОтчет.ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	РегламентированныйОтчет.ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	РегламентированныйОтчет.Периодичность = СтруктураРеквизитовФормы.мПериодичность;
	РегламентированныйОтчет.ВыбраннаяФорма = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	РегламентированныйОтчет.Организация = СтруктураРеквизитовФормы.Организация;
	РегламентированныйОтчет.ДатаПодписи = СтруктураРеквизитовФормы.ДатаПодписи;
	РегламентированныйОтчет.ЕдиницаИзмерения = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	РегламентированныйОтчет.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	РегламентированныйОтчет.ВидОтчетности = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	РегламентированныйОтчет.Комментарий = СтруктураРеквизитовФормы.Комментарий;
	РегламентированныйОтчет.КодНалоговогоОргана = КодИФНС;
	РегламентированныйОтчет.КПП = "";
	РегламентированныйОтчет.Вид = СтруктураРеквизитовФормы.мВариант;
	РегламентированныйОтчет.ПредставлениеВида = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(РегламентированныйОтчет.Вид);
	РегламентированныйОтчет.ФорматВыгрузки = "Автоматически";
	
КонецПроцедуры

// Создает структуру данных, которая соответствует пустой форме
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - налоговый период
//   СтруктураРеквизитовФормы - Структура - см. СтруктураРеквизитовФормы()
//
// Возвращаемое значение:
//   Структура
//
Функция НоваяСтруктураДанныхОтчета(Организация, Период, СтруктураРеквизитовФормы)
	
	СоставПоказателей = СоставПоказателей(СтруктураРеквизитовФормы.мСоставПоказателей);
	СоставПоказателей.СоставПоказателей.Индексы.Добавить("ИмяПоляТаблДокумента");
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	СтруктураМногострочныхРазделов = СтруктураМногострочныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	СтруктураМногостраничныхРазделов = СтруктураМногостраничныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ПоказателиОтчета = ПоказателиОтчета(СвойстваРазделовДекларации, , СоставПоказателей.СоставПоказателей);
	ДанныеМногострочныхРазделов = ДанныеМногострочныхРазделов(СтруктураМногострочныхРазделов, , СоставПоказателей.СоставПоказателей);
	ДанныеМногостраничныхРазделов = ДанныеМногостраничныхРазделов(СвойстваРазделовДекларации, СтруктураМногостраничныхРазделов, , СоставПоказателей.СоставПоказателей);
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	ДанныеОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	ДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	ДанныеОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СоставПоказателей.ДанныеВариантовАвтоЗаполнения);
	ДанныеОтчета.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ДанныеОтчета.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ДанныеОтчета.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ДанныеОтчета.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ДанныеОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ДанныеОтчета.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ДанныеОтчета.Вставить("ДанныеПомощникаЗаполнения", Новый Структура);
	
	Возврат ДанныеОтчета;
	
КонецФункции

// Преобразует структуру дохода или вычета в структуру данных регламентированного отчета
//
// Параметры:
//   СтруктураДоходовВычетов - Структура - структура, которую требуется сохранить
//   ДанныеОтчета - Структура - структура данных регламентированного отчета
//   КлючиПоказателейДекларации - ТаблицаЗначений - см. НовыеКлючиПоказателейДекларации()
//   СоставПоказателей - ТаблицаЗначений - значение элемента СоставПоказателей структуры СоставПоказателей()
//   ЗаполненныеРазделы - Структура - разделы, которые были заполнены в результате выполнения процедуры
//
Процедура СохранитьСтруктуруДоходовВычетов(СтруктураДоходовВычетов, ДанныеОтчета, КлючиПоказателейДекларации, СвойстваРазделов, СоставПоказателей, ЗаполненныеРазделы = Неопределено)
	
	Перем НомерСтраницы, НомерСтроки;
	
	НомераДобавленныхСтраниц = Новый Структура;
	НомераДобавленныхСтрок   = Новый Структура;
	
	Для Каждого ДоходВычет Из СтруктураДоходовВычетов Цикл
		
		ЗначениеПоказателя = ДоходВычет.Значение;
		
		// Ищем соответствующий ключ показателя
		КлючПоказателя = КлючиПоказателейДекларации.Найти(ДоходВычет.Ключ, "Ключ");
		Если КлючПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = КлючПоказателя.ИмяПоля;
		ИмяРаздела = КлючПоказателя.ИмяСтраницы;
		
		СвойствоРаздела = СвойствоРаздела(СвойстваРазделов, ИмяРаздела);
		Если СвойствоРаздела = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден раздел декларации ""%1""'"), ИмяРаздела);
		КонецЕсли;
		
		// Если раздел еще не заполнялся, значит добавлять строку или страницу не нужно.
		// Т.к. при инициализации всегда создается первая строка и страница.
		ПустойРаздел = ЗаполненныеРазделы = Неопределено Или Не ЗаполненныеРазделы.Свойство(ИмяРаздела);
		
		РазделМногострочный = (СвойствоРаздела.МногострочностьВРазделе.Количество() > 0);
		
		Если СвойствоРаздела.МногостраничностьВРазделе Тогда
			
			ТаблицаРаздела = ДанныеОтчета.ДанныеМногостраничныхРазделов[ИмяРаздела];
			СтраницаРаздела = АктивнаяСтраницаРаздела(ТаблицаРаздела);
			
			Если РазделМногострочный Тогда
				Если Не НомераДобавленныхСтрок.Свойство(ИмяРаздела, НомерСтроки) Тогда
					МаксимальноеКоличествоСтрокНаСтранице = СвойствоРаздела.МногострочностьВРазделе[0].МаксимальноеКоличествоСтрокНаСтранице;
					// Строку в раздел еще не добавляли, проверим влезет ли еще одна строка на активной странице.
					// Если не влезет, добавляем новую страницу и строку.
					Если СтраницаРаздела.ДанныеДопСтрок.Количество() = МаксимальноеКоличествоСтрокНаСтранице Тогда
						СтраницаРаздела = НоваяСтраницаМногостраничногоРаздела(ТаблицаРаздела, СвойствоРаздела, ПоказателиРаздела(СоставПоказателей, ИмяРаздела));
						НомерСтраницы = ТаблицаРаздела.Количество();
						НомераДобавленныхСтраниц.Вставить(ИмяРаздела, НомерСтраницы); // Сохраняем номер добавленной страницы.
					ИначеЕсли ПустойРаздел Тогда
						НомерСтроки = 1; // Всегда есть первая строка.
					Иначе
						СтраницаРаздела.ДанныеДопСтрок.Добавить(); // Добавляем новую строку.
					КонецЕсли;
					НомерСтроки = СтраницаРаздела.ДанныеДопСтрок.Количество();
					НомераДобавленныхСтрок.Вставить(ИмяРаздела, НомерСтроки); // Сохраняем номер добавленной строки
				КонецЕсли;
			Иначе
				НомерСтроки = 0;
				Если Не НомераДобавленныхСтраниц.Свойство(ИмяРаздела, НомерСтраницы) Тогда
					// Добавляем новую страницу
					Если ПустойРаздел Тогда
						НомерСтраницы = 1; // Всегда есть первая страница
					Иначе
						СтраницаРаздела = НоваяСтраницаМногостраничногоРаздела(ТаблицаРаздела, СвойствоРаздела, ПоказателиРаздела(СоставПоказателей, ИмяРаздела));
					КонецЕсли;
					НомерСтраницы = ТаблицаРаздела.Количество();
					НомераДобавленныхСтраниц.Вставить(ИмяРаздела, НомерСтраницы); // Сохраняем номер добавленной страницы
				КонецЕсли;
			КонецЕсли;
			
			Если КлючПоказателя.ОбщееПолеМногострочногоРаздела Тогда
				СтраницаРаздела.Данные.Вставить(ИмяПоляДанных(КлючПоказателя.ИмяПоля), ЗначениеПоказателя);
			Иначе
				Если ТаблицаРаздела.Колонки.Найти("Данные") <> Неопределено Тогда
					СтраницаРаздела.Данные.Вставить(ИмяПоляДанных(КлючПоказателя.ИмяПоля, НомерСтроки), ЗначениеПоказателя);
				КонецЕсли;
				Если РазделМногострочный И СвойствоРаздела.СохранятьМногострКакТЗ Тогда
					СтраницаРаздела.ДанныеДопСтрок[НомерСтроки - 1][ИмяПоляДанных(КлючПоказателя.ИмяПоля)] = ЗначениеПоказателя;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			// Одностраничный раздел
			ДанныеОтчета.ПоказателиОтчета[ИмяПоказателя(ИмяРаздела)].Вставить(ИмяПоля, ЗначениеПоказателя);
			
		КонецЕсли;
		
		Если ЗаполненныеРазделы <> Неопределено Тогда
			ЗаполненныеРазделы.Вставить(ИмяРаздела, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанныхДекларации

Функция ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, ИмяРаздела = "")
	
	Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма, ИмяРаздела);
	СвойстваРазделов = СвойстваРазделовДекларации(ВыбраннаяФорма, ИмяРаздела);
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(КлючиПоказателей, "Ключ");
	
	СтруктураДоходовВычетов = Новый Структура;
	Для Каждого ИмяПоказателя Из Показатели Цикл
		ВставитьПоказательВСтруктуру(ИмяПоказателя, КлючиПоказателей, СвойстваРазделов, ДанныеОтчета, СтруктураДоходовВычетов);
	КонецЦикла;
	
	// Преобразуем структуру массивов в массив структур
	МассивДоходовВычетов = Новый Массив;
	Для Каждого ДоходВычет Из СтруктураДоходовВычетов Цикл
		
		Если ТипЗнч(ДоходВычет.Значение) = Тип("Массив") Тогда
			Для Количество = МассивДоходовВычетов.Количество() По ДоходВычет.Значение.ВГраница() Цикл
				МассивДоходовВычетов.Добавить(НоваяСтруктураДоходовВычетов(Показатели));
			КонецЦикла;
			Для Индекс = 0 По ДоходВычет.Значение.ВГраница() Цикл
				МассивДоходовВычетов[Индекс].Вставить(ДоходВычет.Ключ, ДоходВычет.Значение[Индекс]);
			КонецЦикла;
		Иначе
			Если МассивДоходовВычетов.Количество() = 0 Тогда
				МассивДоходовВычетов.Добавить(НоваяСтруктураДоходовВычетов(Показатели));
			КонецЕсли;
			МассивДоходовВычетов[0].Вставить(ДоходВычет.Ключ, ДоходВычет.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДоходовВычетов;
	
КонецФункции

Функция НоваяСтруктураДоходовВычетов(МассивПоказателей)
	
	Возврат Новый Структура(СтрСоединить(МассивПоказателей, ","));
	
КонецФункции

Процедура ВставитьПоказательВСтруктуру(ИмяПоказателя, КлючиПоказателей, СвойстваРазделов, ДанныеОтчета, СтруктураДоходовВычетов)
	
	КлючПоказателя = КлючиПоказателей.Найти(ИмяПоказателя, "Ключ");
	СвойствоРаздела = СвойствоРаздела(СвойстваРазделов, КлючПоказателя.ИмяСтраницы);
	ЗначениеПоказателя = ПрочитатьПоказательИзДанныхОтчета(ИмяПоказателя, КлючПоказателя, СвойствоРаздела, ДанныеОтчета);
	СтруктураДоходовВычетов.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПрочитатьПоказательИзДанныхОтчета(ИмяПоказателя, КлючПоказателя, СвойствоРаздела, ДанныеОтчета)
	
	Перем ЗначениеПоказателя;
	
	Если КлючПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПоля = КлючПоказателя.ИмяПоля;
	ИмяРаздела = СвойствоРаздела.ИмяСтраницы;
	
	РазделМногострочный = (СвойствоРаздела.МногострочностьВРазделе.Количество() > 0);
	
	Если СвойствоРаздела.МногостраничностьВРазделе Тогда
		
		ЗначениеПоказателя = Новый Массив;
		
		ТаблицаРаздела = ДанныеОтчета.ДанныеМногостраничныхРазделов[ИмяРаздела];
		Если ТаблицаРаздела.Колонки.Найти("Данные") <> Неопределено Тогда
			Для Каждого Страница Из ТаблицаРаздела Цикл
				Если РазделМногострочный Тогда
					МаксимальноеКоличествоСтрокНаСтранице = СвойствоРаздела.МногострочностьВРазделе[0].МаксимальноеКоличествоСтрокНаСтранице;
					Для НомерСтроки = 1 По МаксимальноеКоличествоСтрокНаСтранице Цикл
						ЗначениеВСтроке = Неопределено;
						Если Не Страница.Данные.Свойство(ИмяПоляДанных(КлючПоказателя.ИмяПоля, НомерСтроки), ЗначениеВСтроке) Тогда
							Прервать;
						КонецЕсли;
						ЗначениеПоказателя.Добавить(ЗначениеВСтроке);
					КонецЦикла;
				Иначе
					ЗначениеВСтроке = Неопределено;
					Страница.Данные.Свойство(ИмяПоля, ЗначениеВСтроке);
					ЗначениеПоказателя.Добавить(ЗначениеВСтроке);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		// Одностраницный раздел
		ПоказательОтчета = ДанныеОтчета.ПоказателиОтчета[ИмяПоказателя(ИмяРаздела)];
		ПоказательОтчета.Свойство(ИмяПоля, ЗначениеПоказателя);
		
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

#КонецОбласти

#Область ДанныеОтчета

Функция НовыйСвойстваРазделовДекларации()
	
	СвойстваРазделовДекларации = Новый ДеревоЗначений;
	СвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе", Новый ОписаниеТипов("ТаблицаЗначений"));
	СвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("МаксКолвоЭкз", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	СвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("ПоказыватьИтогиТолькоНаПоследнейСтранице", Новый ОписаниеТипов("Булево"));
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция НовыйМногострочностьВРазделе()
	
	МногострочностьВРазделе = Новый ТаблицаЗначений;
	МногострочностьВРазделе.Колонки.Добавить("ИдГруппы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	МногострочностьВРазделе.Колонки.Добавить("Область", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	МногострочностьВРазделе.Колонки.Добавить("ВысотаСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	МногострочностьВРазделе.Колонки.Добавить("НезаполняемыеПоказателиЕсть", Новый ОписаниеТипов("Булево"));
	МногострочностьВРазделе.Колонки.Добавить("МаксимальноеКоличествоСтрокНаСтранице", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));

	Возврат МногострочностьВРазделе;
	
КонецФункции

Функция НовыйСтруктураРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения", 0);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("ДлительнаяОперацияАвтозаполнения");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоМесту");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоДНБ");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации",
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("мРазмерНеоблогаемойСуммыДохода");
	СтруктураРеквизитовФормы.Вставить("мСтатусНалогоплательщика");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти", "");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ВерсияБСП", СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	СтруктураРеквизитовФормы.Вставить("ОКТМО");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписи", ТекущаяДатаСеанса());
	СтруктураРеквизитовФормы.Вставить("Комментарий", "");
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция НовыйДеревоСтраницОтчета()
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ДеревоСтраницОтчета.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Процедура ДобавитьТитульныйЛист(ДеревоСтраницОтчета)
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Титульный",
		НСтр("ru = 'Титульный лист'"));
	
КонецПроцедуры

Процедура ДобавитьРаздел(ДеревоСтраницОтчета, НомерРаздела)
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		ИмяРаздела(НомерРаздела),
		СтрШаблон(НСтр("ru = 'Раздел %1'"), НомерРаздела));
	
КонецПроцедуры

Функция ИмяРаздела(НомерРаздела)
	
	Возврат СтрШаблон("Раздел%1", НомерРаздела);
	
КонецФункции

Процедура ДобавитьПриложение(ДеревоСтраницОтчета, НомерПриложения)
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		ИмяПриложения(НомерПриложения),
		СтрШаблон(НСтр("ru = 'Приложение %1'"), НомерПриложения));
	
КонецПроцедуры

Функция ИмяПриложения(НомерПриложения)
	
	Возврат СтрШаблон("Приложение%1", НомерПриложения);
	
КонецФункции

Процедура ДобавитьРасчетКПриложению(ДеревоСтраницОтчета, НомерПриложения)
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		ИмяРасчетаКПриложению(НомерПриложения),
		СтрШаблон(НСтр("ru = 'Расчет к Приложению %1'"), НомерПриложения));
	
КонецПроцедуры

Функция ИмяРасчетаКПриложению(НомерПриложения)
	
	Возврат СтрШаблон("Приложение%1Расчет", НомерПриложения);
	
КонецФункции

Функция ДобавитьСтраницуОтчета(ДеревоСтраницОтчета, ИмяСтраницы, Представление, ОриентацияСтраницы = "Портрет", ВыводНаПечать = 1, ПоказатьСтраницу = 1, ВыгрузитьСтраницу = 2)
	
	НоваяСтрока = ДеревоСтраницОтчета.Строки.Добавить();
	НоваяСтрока.ИмяСтраницы = ИмяСтраницы;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.ОриентацияСтраницы = ОриентацияСтраницы;
	НоваяСтрока.ВыводНаПечать = ВыводНаПечать;
	НоваяСтрока.ПоказатьСтраницу = ПоказатьСтраницу;
	НоваяСтрока.ВыгрузитьСтраницу = ВыгрузитьСтраницу;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ПоказателиОтчета(СвойстваРазделовДекларации, Форма = Неопределено, СоставПоказателей = Неопределено) Экспорт
	
	ПоказателиОтчета = Новый Структура;
	
	Если СвойстваРазделовДекларации = Неопределено Тогда
		Возврат ПоказателиОтчета;
	КонецЕсли;
	
	Для Каждого СвойствоРаздела Из СвойстваРазделовДекларации.Строки Цикл
		
		Если СвойствоРаздела.МногостраничностьВРазделе Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРаздела = СвойствоРаздела.ИмяСтраницы;
		
		Если Форма <> Неопределено Тогда
			ПоказателиОтчета.Вставить(
				ИмяПоказателя(ИмяРаздела),
				Форма[СтрШаблон("СтруктураДанных%1", ИмяРаздела)]);
		ИначеЕсли ИмяРаздела = "Титульный" Тогда
			ПоказателиОтчета.Вставить(
				ИмяПоказателя(ИмяРаздела),
				НоваяСтруктураТитульногоЛиста());
		Иначе
			ПоказателиОтчета.Вставить(
				ИмяПоказателя(ИмяРаздела),
				НоваяСтруктураРаздела(ПоказателиРаздела(СоставПоказателей, ИмяРаздела)));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоказателиОтчета;
	
КонецФункции

Функция ПоказателиРаздела(СоставПоказателей, ИмяРаздела)
	
	Возврат СоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента", ИмяРаздела));
	
КонецФункции

Функция НоваяСтруктураРаздела(ПоказателиРаздела, ДобавитьИндекс = Ложь)
	
	СтруктураРаздела = Новый Структура;
	
	Для Каждого Показатель Из ПоказателиРаздела Цикл
		НомерСтроки = ?(ДобавитьИндекс И Показатель.ПризнМногострочности = "/", 1, 0);
		СтруктураРаздела.Вставить(
			ИмяПоляДанных(Показатель.КодПоказателяПоСоставу, НомерСтроки),
			ПустоеЗначениеПоказателя(Показатель.ТипДанныхПоказателя));
	КонецЦикла;
	
	Возврат СтруктураРаздела;
	
КонецФункции

Функция НоваяСтруктураТитульногоЛиста()
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ДатаПодписи", "");
	СтруктураРаздела.Вставить("Период", "");
	СтруктураРаздела.Вставить("ОтчетГод", "");
	СтруктураРаздела.Вставить("КодИМНС", "");
	СтруктураРаздела.Вставить("НомерКорректировки", "0");
	
	СтруктураРаздела.Вставить("ПоМесту", "");
	СтруктураРаздела.Вставить("СтатусНалогоплательщика", "");
	СтруктураРаздела.Вставить("АдресЗаПределамиРФ", "");
	СтруктураРаздела.Вставить("ТелОрганизации", "");
	
	СтруктураРаздела.Вставить("Фамилия", "");
	СтруктураРаздела.Вставить("Имя", "");
	СтруктураРаздела.Вставить("Отчество", "");
	
	СтруктураРаздела.Вставить("ИНН", "");
	СтруктураРаздела.Вставить("ДатаРождения", "");
	СтруктураРаздела.Вставить("МестоРождения", "");
	СтруктураРаздела.Вставить("КодСтраны", "");
	
	СтруктураРаздела.Вставить("КодВидаДокумента", "");
	СтруктураРаздела.Вставить("СерияИНомерДокумента", "");
	СтруктураРаздела.Вставить("ДатаВыдачиДокумента", "");
	СтруктураРаздела.Вставить("КемВыданДокумент", "");
	
	СтруктураРаздела.Вставить("ПрПодп", "1");
	СтруктураРаздела.Вставить("ДокУпПред", "");
	
	СтруктураРаздела.Вставить("ОргПодписантФамилия", "");
	СтруктураРаздела.Вставить("ОргПодписантИмя", "");
	СтруктураРаздела.Вставить("ОргПодписантОтчество", "");
	
	Возврат СтруктураРаздела;
	
КонецФункции

Функция ДанныеМногострочныхРазделов(СтруктураМногострочныхРазделов, Форма = Неопределено, СоставПоказателей = Неопределено) Экспорт
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Если СтруктураМногострочныхРазделов = Неопределено Тогда
		Возврат ДанныеМногострочныхРазделов;
	КонецЕсли;
	
	Для Каждого Раздел Из СтруктураМногострочныхРазделов Цикл
		Если Форма <> Неопределено Тогда
			ДанныеМногострочныхРазделов.Вставить(Раздел.Ключ, Форма[Раздел.Значение].Выгрузить());
		Иначе
			ДанныеМногострочныхРазделов.Вставить(Раздел.Ключ, НоваяТаблицаДанныхМногострочногоРаздела(Раздел.Ключ, СоставПоказателей));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеМногострочныхРазделов;
	
КонецФункции

Функция НоваяТаблицаДанныхМногострочногоРаздела(Идентификатор, ПоказателиРаздела)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Добавить();
	
	Для Каждого Показатель Из ПоказателиРаздела Цикл
		Если Показатель.ПризнМногострочности <> "/" Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(Показатель.КодПоказателяПоСоставу, Идентификатор) = 1 Тогда
			ТаблицаДанных.Колонки.Добавить(Показатель.КодПоказателяПоСоставу);
			ТаблицаДанных[0][Показатель.КодПоказателяПоСоставу] = ПустоеЗначениеПоказателя(Показатель.ТипДанныхПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ДанныеМногостраничныхРазделов(СвойстваРазделовДекларации, СтруктураМногостраничныхРазделов, Форма = Неопределено, СоставПоказателей = Неопределено) Экспорт
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	Если СтруктураМногостраничныхРазделов = Неопределено Тогда
		Возврат ДанныеМногостраничныхРазделов;
	КонецЕсли;
	
	Для Каждого Раздел Из СтруктураМногостраничныхРазделов Цикл
		Если Форма <> Неопределено Тогда
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, ТаблицаДанныхМногостраничногоРаздела(Форма[Раздел.Значение], СвойстваРазделовДекларации));
		Иначе
			ПоказателиРаздела = ПоказателиРаздела(СоставПоказателей, Раздел.Ключ);
			СвойствоРаздела = СвойствоРаздела(СвойстваРазделовДекларации, Раздел.Ключ);
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, НоваяТаблицаДанныхМногостраничногоРаздела(Раздел.Ключ, ПоказателиРаздела, СвойствоРаздела));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеМногостраничныхРазделов;
	
КонецФункции

Функция ТаблицаДанныхМногостраничногоРаздела(ДанныеФормыКоллекция, СвойстваРазделовДекларации)
	
	Перем Данные, ДанныеДопСтрок;
	
	ТаблицаДанных = НоваяТаблицаДанныхМногостраничногоРаздела();
	Если ДанныеФормыКоллекция.Количество() > 0 Тогда
		ТаблицаДанных.Очистить(); // По умолчанию содержит одну строку
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из ДанныеФормыКоллекция Цикл
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ЭлементКоллекции, "Представление, АктивнаяСтраница, АвтоматическоеПредставление");
		
		Если ЭлементКоллекции.Свойство("Данные", Данные) И Данные.Количество() > 0 Тогда
			СтрокаДанных.Данные = Данные[0].Значение;
		КонецЕсли;
		
		Если ЭлементКоллекции.Свойство("ДанныеДопСтрок", ДанныеДопСтрок) Тогда
			Если ДанныеДопСтрок.Количество() > 0 И ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела" Тогда
				СтрокаДанных.ДанныеДопСтрок = ЭлементКоллекции.ДанныеДопСтрок[0].Значение.Выгрузить();
			Иначе
				СтруктураДанныхДопСтрок = Новый Структура;
				Для Каждого ЭлементДанныхДопСтрок Из ДанныеДопСтрок Цикл
					СтруктураДанныхДопСтрок.Вставить(ЭлементДанныхДопСтрок.Значение.Выгрузить());
				КонецЦикла;
				СтрокаДанных.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция НоваяТаблицаДанныхМногостраничногоРаздела(ИмяРаздела = "", ПоказателиРаздела = Неопределено, СвойствоРаздела = Неопределено) Экспорт
	
	ТаблицаРаздела = Новый ТаблицаЗначений;
	ТаблицаРаздела.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(254));
	ТаблицаРаздела.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаРаздела.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ТаблицаРаздела.Колонки.Добавить("Данные");
	ТаблицаРаздела.Колонки.Добавить("ДанныеДопСтрок");
	
	ПерваяСтраница = НоваяСтраницаМногостраничногоРаздела(ТаблицаРаздела, СвойствоРаздела, ПоказателиРаздела);
	ПерваяСтраница.Представление = НСтр("ru = 'Новая страница'");
	
	Возврат ТаблицаРаздела;
	
КонецФункции

Функция СвойствоРаздела(СвойстваРазделов, ИмяРаздела)
	
	Возврат СвойстваРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы");
	
КонецФункции

Функция НоваяСтраницаМногостраничногоРаздела(ТаблицаРаздела, СвойствоРаздела = Неопределено, ПоказателиРаздела = Неопределено)
	
	Если ТаблицаРаздела.Количество() <> 0 Тогда
		АктивнаяСтраницаРаздела(ТаблицаРаздела).АктивнаяСтраница = Ложь;
	КонецЕсли;
	
	НоваяСтраница = ТаблицаРаздела.Добавить();
	НоваяСтраница.Представление               = СтрШаблон(НСтр("ru = 'Страница N %1'"), ТаблицаРаздела.Количество());
	НоваяСтраница.АктивнаяСтраница            = Истина;
	НоваяСтраница.АвтоматическоеПредставление = Истина;
	
	Если СвойствоРаздела <> Неопределено И ПоказателиРаздела <> Неопределено Тогда
		
		ИмяРаздела = СвойствоРаздела.ИмяСтраницы;
		
		РазделМногострочный = (СвойствоРаздела.МногострочностьВРазделе.Количество() <> 0);
		
		НоваяСтраница.Данные = НоваяСтруктураРаздела(ПоказателиРаздела, РазделМногострочный);
		
		Если РазделМногострочный Тогда
			ИдентификаторГруппы = СвойствоРаздела.МногострочностьВРазделе[0].ИдГруппы;
			НоваяСтраница.ДанныеДопСтрок = НоваяТаблицаДанныхМногострочногоРаздела(ИдентификаторГруппы, ПоказателиРаздела);
		КонецЕсли;
		
	Иначе
		НоваяСтраница.Данные = Новый Структура;
	КонецЕсли;
	
	Возврат НоваяСтраница;
	
КонецФункции

Функция АктивнаяСтраницаРаздела(ТаблицаРаздела)
	
	АктивныеСтраницы = ТаблицаРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	Если АктивныеСтраницы.Количество() <> 0 Тогда
		Возврат АктивныеСтраницы[0];
	ИначеЕсли ТаблицаРаздела.Количество() <> 0 Тогда
		Возврат ТаблицаРаздела[ТаблицаРаздела.Количество() - 1];
	КонецЕсли;
	
КонецФункции

Функция ДанныеВариантовАвтоЗаполнения(СтруктураВариантыЗаполнения, Форма) Экспорт
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Если СтруктураВариантыЗаполнения = Неопределено Тогда
		Возврат ДанныеВариантовАвтоЗаполнения;
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из СтруктураВариантыЗаполнения Цикл
		МассивВариантовЗаполнения = Новый Массив;
		Для каждого ЭлементКоллекции Из Форма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивВариантовЗаполнения.Добавить(ЭлементКоллекции.ТаблицаВариантовЗаполнения.Выгрузить());
		КонецЦикла;
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивВариантовЗаполнения);
	КонецЦикла;
	
	Возврат ДанныеВариантовАвтоЗаполнения;
	
КонецФункции

Функция ПустоеЗначениеПоказателя(ТипПоказателя)
	
	Если ТипПоказателя = "С" Тогда
		Возврат "";
	ИначеЕсли ТипПоказателя = "Ч" Или ТипПоказателя = "Е" Тогда
		Возврат 0;
	ИначеЕсли ТипПоказателя = "Д" Тогда
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаXML

Функция ПараметрыВыгрузки(ВыбраннаяФорма, Титульный) Экспорт
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",          РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",               КНД(ВыбраннаяФорма));
	ПараметрыВыгрузки.Вставить("ДатаДок",           Формат(Титульный.ДатаПодписи, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",      Формат(Титульный.ОтчетГод, "ЧГ=0"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",         СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",           СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",            Строка(Титульный.НомерКорректировки));
	ПараметрыВыгрузки.Вставить("ТелФЛ",             ТелефонДляОтчета(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("ФамилияФЛ",         СокрЛП(Титульный.Фамилия));
	ПараметрыВыгрузки.Вставить("ИмяФЛ",             СокрЛП(Титульный.Имя));
	ПараметрыВыгрузки.Вставить("ОтчествоФЛ",        СокрЛП(Титульный.Отчество));

	ПараметрыВыгрузки.Вставить("КодКатегорииФЛ",    СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("СтатусФЛ",          СокрЛП(Титульный.СтатусНалогоплательщика));

	ПараметрыВыгрузки.Вставить("ИННФЛ",             СокрЛП(Титульный.ИНН));
	ПараметрыВыгрузки.Вставить("ДатаРожденияФЛ",    СокрЛП(Титульный.ДатаРождения));
	ПараметрыВыгрузки.Вставить("МестоРожденияФЛ",   СокрЛП(Титульный.МестоРождения));
	ПараметрыВыгрузки.Вставить("СтранаФЛ",          СокрЛП(Титульный.КодСтраны));

	ПараметрыВыгрузки.Вставить("КодВидДокФЛ",       СокрЛП(Титульный.КодВидаДокумента));
	ПараметрыВыгрузки.Вставить("СерНомДокФЛ",       СокрЛП(Титульный.СерияИНомерДокумента));
	ПараметрыВыгрузки.Вставить("ДатаДокФЛ",         Формат(Титульный.ДатаВыдачиДокумента, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ВыдДокФЛ",          СокрЛП(Титульный.КемВыданДокумент));

	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));

	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",    Титульный.ОргПодписантФамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",        Титульный.ОргПодписантИмя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",   Титульный.ОргПодписантОтчество);

	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы", ИмяФайлаСхемы(ВыбраннаяФорма, Титульный.ДатаПодписи));
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDFL3");

	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДФЛ3");

	ПараметрыВыгрузки.Вставить("ИдФайл", ИмяФайлаВыгрузки(ПараметрыВыгрузки));

	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция КНД(ВыбраннаяФорма)
	
	КоллекцияФорм = ДеревоФормИФорматов().Строки;
	НайденнаяСтрока = КоллекцияФорм.Найти(ВыбраннаяФорма, "ИмяОбъекта");
	Возврат ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.Код, "");
	
КонецФункции

Функция ИмяФайлаВыгрузки(ПараметрыВыгрузки)
	
	ЧастиИмени = Новый Массив;
	ЧастиИмени.Добавить(ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки);
	ЧастиИмени.Добавить(ПараметрыВыгрузки.КодИФНС);
	ЧастиИмени.Добавить(ПараметрыВыгрузки.КодИФНС);
	ЧастиИмени.Добавить(СокрЛП(ПараметрыВыгрузки.ИННФЛ));
	ЧастиИмени.Добавить(Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд"));
	ЧастиИмени.Добавить(Строка(Новый УникальныйИдентификатор));
	
	Возврат СтрСоединить(ЧастиИмени, "_");
	
КонецФункции

Функция ИмяФайлаСхемы(ВыбраннаяФорма, ДатаПодписи)
	
	Если ВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		Если ДатаПодписи >= ДатаНачалаДействияВторойВерсииФормыОтчета2019() Тогда
			Возврат ИмяФайлаСхемы2019(2);
		Иначе
			Возврат ИмяФайлаСхемы2019();
		КонецЕсли;
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат ИмяФайлаСхемы2018();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не определена схема выгрузки для формы %1'"), ВыбраннаяФорма);
	КонецЕсли;
	
КонецФункции

Функция ДатаНачалаДействияВторойВерсииФормыОтчета2019()
	
	Возврат Дата(2019, 6, 17);
	
КонецФункции

#КонецОбласти

#Область ЗначенияПоУмолчанию

Функция КодНалоговогоПериодаПоУмолчанию()
	
	Возврат "34"; // Декларация за календарный год
	
КонецФункции

Функция КодКатегорииНалогоплательщикаПоУмолчанию()
	
	Возврат "720"; // Физическое лицо, зарегистрированное в качестве индивидуального предпринимателя
	
КонецФункции

Функция КодСтраныПоУмолчанию()
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтраныМира.Россия, "Код");
	
КонецФункции

#КонецОбласти

#Область ОбработкаПроверкиЗаполнения

#КонецОбласти

#Область РаботаФормы

Функция СвойстваПоказателей(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор) Экспорт
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);
	
	ИмяМакета = ИмяМакетаСписковВыбора(ВыбраннаяФорма);
	КоллекцияСписковВыбора = СпискиВыбора(ОтчетОбъект.ПолучитьМакет(ИмяМакета));
	
	СвойстваПоказателей = НовыйСвойстваПоказателей();
	
	// Титульный
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"Период", , 2, , НСтр("ru = 'Налоговый период (код)'"), КоллекцияСписковВыбора["КодНалоговогоПериода"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПоМесту", , 3, , НСтр("ru = 'Код категории налогоплательщика'"), КоллекцияСписковВыбора["КодКатегорииНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"СтатусНалогоплательщика", , 1, , НСтр("ru = 'Код статуса налогоплательщика'"), КоллекцияСписковВыбора["СтатусНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДокумента", , 2, , НСтр("ru = 'Код вида документа'"), КоллекцияСписковВыбора["КодВидаДокумента"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПрПодп", , 0, , НСтр("ru = 'Подписант'"), КоллекцияСписковВыбора["ВидПодписанта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакУплатыВозврата", КлючиПоказателей, 1, , НСтр("ru = 'Признак уплаты (возврата) налога'"), КоллекцияСписковВыбора["КодСтроки010"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБК", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавка", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДохода", КлючиПоказателей, 0, , НСтр("ru = 'Вид дохода'"), КоллекцияСписковВыбора["ВидыДоходовРаздел2"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Вид дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаЗаПределамиРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаЗаПределамиРФ", КлючиПоказателей, 2, , НСтр("ru = 'Код вида дохода'"), КоллекцияСписковВыбора["КодВидаДоходаЗаПределамиРФ"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПорядокОпределенияПрибылиУбыткаКИК", КлючиПоказателей, 1, , НСтр("ru = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании'"), КоллекцияСписковВыбора["ПорядокОпределенияПрибылиУбыткаКИК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДеятельностиИП", КлючиПоказателей, 2, , НСтр("ru = 'Код вида деятельности'"), КоллекцияСписковВыбора["ВидДеятельности"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодИсточникаДоходаПрофессиональныхВычетов", КлючиПоказателей, 1, , НСтр("ru = 'Код источника дохода'"), КоллекцияСписковВыбора["ИсточникДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНаименованияОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код наименования объекта'"), КоллекцияСписковВыбора["КодНаименованияОбъекта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакНалогоплательщикаОбъектаНедвижимости", КлючиПоказателей, 2, , НСтр("ru = 'Код признака налогоплательщика'"), КоллекцияСписковВыбора["ПризнакНалогоплательщикаПоИмуществу"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНомераОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код номера объекта'"), КоллекцияСписковВыбора["КодыНомеровНедвижимости"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДоговораПенсионногоОбеспечения", КлючиПоказателей, 1, , НСтр("ru = 'Код вида договора'"), КоллекцияСписковВыбора["ВидыДоговоровНПС"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиПризнакУчетаУбытков", КлючиПоказателей, 1, , НСтр("ru = 'Признак учета убытков'"), КоллекцияСписковВыбора["КодыПризнакаУчетаУбытков"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиУчетУбытковВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции, по которой принимается убыток'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	Возврат СвойстваПоказателей;
	
КонецФункции

Процедура ДобавитьСвойствоПоказателя(СвойстваПоказателей, Показатель, КлючиПоказателей, Длина, Тип, ТекстПриВыборе, Значения, УникальныйИдентификатор) Экспорт 
	
	Перем КлючПоказателя;
	
	ИмяПоля = "";
	
	Если КлючиПоказателей <> Неопределено Тогда
		КлючПоказателя = КлючиПоказателей.Найти(Показатель, "Ключ");
		Если КлючПоказателя <> Неопределено Тогда
			ИмяПоля = КлючПоказателя.ИмяПоля;
		Иначе
			ВызватьИсключение СтрШаблон("Не найден ключ показателя ""%1""", Показатель);
		КонецЕсли;
	Иначе
		ИмяПоля = Показатель;
	КонецЕсли;
	
	НоваяСтрока = СвойстваПоказателей.Добавить();
	НоваяСтрока.Показатель = ИмяПоля;
	НоваяСтрока.Тип = Тип;
	НоваяСтрока.Длина = Длина;
	НоваяСтрока.ТекстПриВыборе = ТекстПриВыборе;
	НоваяСтрока.АдресТаблицыЗначений = ПоместитьВоВременноеХранилище(Значения, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

Функция КлючиПоказателейДекларации(ВыбраннаяФорма, ИмяРаздела = "") Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат КлючиПоказателейДекларации2019(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат КлючиПоказателейДекларации2018();
	Иначе
		Возврат НовыеКлючиПоказателейДекларации();
	КонецЕсли;
	
КонецФункции

Функция НовыеКлючиПоказателейДекларации()
	
	КлючиПоказателей = Новый ТаблицаЗначений;
	КлючиПоказателей.Колонки.Добавить("Ключ", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КлючиПоказателей.Колонки.Добавить("ИмяСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ИмяПоля", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ИмяПоказателя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("МногостраничныйРаздел", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("МногострочныйРаздел", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ОбщееПолеМногострочногоРаздела", Новый ОписаниеТипов("Булево"));
	
	КлючиПоказателей.Индексы.Добавить("Ключ");
	КлючиПоказателей.Индексы.Добавить("ИмяПоля");
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция ЕстьКлючПоказателя(ИмяКлюча, АдресКлючейПоказателей) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(АдресКлючейПоказателей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаКлючей = ПолучитьИзВременногоХранилища(АдресКлючейПоказателей);
	Если ТипЗнч(ТаблицаКлючей) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТаблицаКлючей.Найти(ИмяКлюча, "Ключ") <> Неопределено;
	
КонецФункции

Функция СтруктураРеквизитовФормы(Организация, Период, ВыбраннаяФорма, ПараметрыОткрытойФормы = Неопределено) Экспорт
	
	ПараметрыФормы = НовыеПараметрыФормы(Организация, Период, ВыбраннаяФорма);
	Если ПараметрыОткрытойФормы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыОткрытойФормы);
	КонецЕсли;
	
	Если ПараметрыФормы.мВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		Возврат СтруктураРеквизитовФормы2019(ПараметрыФормы);
	ИначеЕсли ПараметрыФормы.мВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат СтруктураРеквизитовФормы2018(ПараметрыФормы);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СвойстваРазделовДекларации(ВыбраннаяФорма, ИмяРаздела = "") Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат СвойстваРазделовДекларации2019(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат СвойстваРазделовДекларации2018();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СтруктураМногострочныхРазделов(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат СтруктураМногострочныхРазделов2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат СтруктураМногострочныхРазделов2018();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СтруктураМногостраничныхРазделов(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат СтруктураМногостраничныхРазделов2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат СтруктураМногостраничныхРазделов2018();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДеревоСтраницОтчета(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат ДеревоСтраницОтчета2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат ДеревоСтраницОтчета2018();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СоответствиеРазделовМакетамМЧБ(ВыбраннаяФорма) Экспорт
	
	СвойстваРазделов = СвойстваРазделовДекларации(ВыбраннаяФорма);
	Если СвойстваРазделов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеРазделовМакетамМЧБ = Новый Соответствие;
	
	СуффиксФормы = СуффиксВыбраннойФормы(ВыбраннаяФорма);
	
	Для каждого ОписаниеРаздела Из СвойстваРазделов.Строки Цикл
		СоответствиеРазделовМакетамМЧБ.Вставить(
			ОписаниеРаздела.ИмяСтраницы, СтрШаблон("МЧБ_%1_%2", СуффиксФормы, ОписаниеРаздела.ИмяСтраницы));
	КонецЦикла;
	
	Возврат СоответствиеРазделовМакетамМЧБ;
	
КонецФункции

Функция НовыеПараметрыФормы(Организация, Период, ВыбраннаяФорма)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мВыбраннаяФорма", ВыбраннаяФорма);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоГода(Период));
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", КонецГода(Период));
	ПараметрыФормы.Вставить("мПериодичность", Перечисления.Периодичность.Год);
	ПараметрыФормы.Вставить("мСохраненныйДок", Неопределено);
	ПараметрыФормы.Вставить("мСкопированаФорма", Неопределено);
	ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", Истина);
	ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Читает настройки параметров отчета по умолчанию.
// По данным макета "СоставПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Функция СоставПоказателей(ИмяМакета) Экспорт
	
	СоставПоказателей = НовыйСоставПоказателей();
	ВариантыЗаполнения = Новый Структура;
	СтруктураВариантовЗаполнения = Новый Структура;
	
	МакетСоставаПоказателей = ПолучитьМакет(ИмяМакета);
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ТаблицаВариантовЗаполнения = НоваяТаблицаВариантовЗаполнения();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			
			Если ЗначениеЗаполнено(стрВариантЗаполнения) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(стрВариантЗаполнения) Тогда
				чВариантЗаполнения = Число(стрВариантЗаполнения);
			Иначе
				чВариантЗаполнения = 0;
			КонецЕсли;
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = СоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = КодПоказателя;
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			СтруктураВариантовЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			ВариантыЗаполнения.Вставить(ИмяСтраницы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаВариантовЗаполнения));
		Конецесли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("СоставПоказателей", СоставПоказателей);
	Результат.Вставить("ДанныеВариантовАвтоЗаполнения", ВариантыЗаполнения);
	Результат.Вставить("СтруктураВариантовЗаполнения", СтруктураВариантовЗаполнения);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСоставПоказателей()
	
	ТаблицаСоставаПоказателей = Новый ТаблицаЗначений;
	ТаблицаСоставаПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоставаПоказателей.Колонки.Добавить("КодПоказателяПоСоставу", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоставаПоказателей.Колонки.Добавить("КодПоказателяПоФорме", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоставаПоказателей.Колонки.Добавить("ПризнМногострочности", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаСоставаПоказателей.Колонки.Добавить("ТипДанныхПоказателя", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаСоставаПоказателей.Колонки.Добавить("ДопОписание", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаСоставаПоказателей.Колонки.Добавить("Обязательность", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаСоставаПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоставаПоказателей.Колонки.Добавить("НомерСтрокиВМакете", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	
	Возврат ТаблицаСоставаПоказателей;
	
КонецФункции

Функция НовыйСвойстваПоказателей()
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СвойстваПоказателей.Колонки.Добавить("Длина", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	СвойстваПоказателей.Колонки.Добавить("Тип", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	СвойстваПоказателей.Колонки.Добавить("АдресТаблицыЗначений", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат СвойстваПоказателей;
	
КонецФункции

Функция НоваяТаблицаВариантовЗаполнения()
	
	ТаблицаВариантовЗаполнения = Новый ТаблицаЗначений;
	ТаблицаВариантовЗаполнения.Колонки.Добавить("КодПоказателя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("ВариантЗаполнения", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("ЗначениеАвто", ОбщегоНазначения.ОписаниеТипаЧисло(16, 2));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("Дельта", ОбщегоНазначения.ОписаниеТипаЧисло(16, 2));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("Комментарий", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат ТаблицаВариантовЗаполнения;
	
КонецФункции

Процедура ДобавитьКлючПоказателя(Ключ, ИмяСтраницы, ИмяПоля, СвойстваРазделовДекларации, КлючиПоказателей, ОбщееПолеМногострочногоРаздела = Ложь)
	
	СвойствоРаздела = СвойствоРаздела(СвойстваРазделовДекларации, ИмяСтраницы);
	Если СвойствоРаздела = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден раздел декларации ""%1""'"), ИмяСтраницы);
	КонецЕсли;
	
	Если КлючиПоказателей.Найти(Ключ, "Ключ") <> Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Дубль ключа показателя ""%1""'"), Ключ);
	КонецЕсли;
	
	НоваяСтрока = КлючиПоказателей.Добавить();
	НоваяСтрока.Ключ = Ключ;
	НоваяСтрока.ИмяСтраницы = ИмяСтраницы;
	НоваяСтрока.ИмяПоля = ИмяПоля;
	Если СвойствоРаздела.МногостраничностьВРазделе Тогда
		НоваяСтрока.МногострочныйРаздел = СвойствоРаздела.ИмяСтраницы;
	Иначе
		НоваяСтрока.ИмяПоказателя = ИмяПоказателя(СвойствоРаздела.ИмяСтраницы);
	КонецЕсли;
	Если СвойствоРаздела.МногострочностьВРазделе.Количество() <> 0 Тогда
		НоваяСтрока.МногострочныйРаздел = СвойствоРаздела.МногострочностьВРазделе[0].ИдГруппы;
	КонецЕсли;
	НоваяСтрока.ОбщееПолеМногострочногоРаздела = ОбщееПолеМногострочногоРаздела;
	
КонецПроцедуры

Функция ИмяПоказателя(ИмяСтраницы)
	
	Возврат СтрШаблон("ПолеТабличногоДокумента%1", ИмяСтраницы);
	
КонецФункции

Функция ИмяПоляДанных(ИмяПоля, НомерСтроки = 0)
	
	Если НомерСтроки = 0 Тогда
		Возврат ИмяПоля;
	Иначе
		Возврат СтрШаблон("%1_%2", ИмяПоля, НомерСтроки);
	КонецЕсли;
	
КонецФункции

Функция НалоговыеСтавки(ВыбраннаяФорма) Экспорт
	
	НалоговыеСтавки = Новый Структура;
	НалоговыеСтавки.Вставить("ПоУмолчанию", 13);
	НалоговыеСтавки.Вставить("Дивиденды", 13);
	
	Возврат НалоговыеСтавки;
	
КонецФункции

Функция ВидыДоходов(ВыбраннаяФорма) Экспорт
	
	ВидыДоходов = Новый Структура;
	ВидыДоходов.Вставить("Дивиденды", "1");
	ВидыДоходов.Вставить("ПрибыльКИК", "2");
	ВидыДоходов.Вставить("Иное", "3");
	
	Возврат ВидыДоходов;
	
КонецФункции

Функция КБК(ВыбраннаяФорма) Экспорт
	
	КБК = Новый Структура;
	КБК.Вставить("ДоходыПолученныеОтНалоговыхАгентов",      "18210102010011000110");
	КБК.Вставить("ДоходыОтПредпринимательскойДеятельности", "18210102020011000110");
	КБК.Вставить("ДоходыПриПолученииКоторыхНеУдержанНалог", "18210102030011000110");
	КБК.Вставить("ФиксированныеПлатежиИностранныхГраждан",  "18210102040011000110");
	КБК.Вставить("ДоходыСПрибылиКИК",                       "18210102050011000110");
	
	Возврат КБК;
	
КонецФункции

Функция КодыВидовПредпринимательскойДеятельности(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат КодыВидовПредпринимательскойДеятельности2019();
	Иначе
		Возврат КодыВидовПредпринимательскойДеятельности2018();
	КонецЕсли;
	
КонецФункции

Функция ПризнакиУплатыВозврата(ВыбраннаяФорма) Экспорт
	
	ПризнакУплатыВозврата = Новый Структура;
	ПризнакУплатыВозврата.Вставить("Уплата", "1");
	ПризнакУплатыВозврата.Вставить("Возврат", "2");
	ПризнакУплатыВозврата.Вставить("ОтсутствиеУплатыВозврата", "3");
	
	Возврат ПризнакУплатыВозврата;
	
КонецФункции

Функция КодыВидовДоходовРФ(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат КодыВидовДоходовРФ2019();
	Иначе
		Возврат КодыВидовДоходовРФ2018();
	КонецЕсли;
	
КонецФункции

Функция КодыВидовДоходовЗаПределамиРФ(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат КодыВидовДоходовЗаПределамиРФ2019();
	Иначе
		Возврат КодыВидовДоходовЗаПределамиРФ2018();
	КонецЕсли;
	
КонецФункции

Функция КодыВидовОперацийСЦеннымиБумагами(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат КодыВидовОперацийСЦеннымиБумагами2019();
	Иначе
		Возврат КодыВидовОперацийСЦеннымиБумагами2018();
	КонецЕсли;
	
КонецФункции

Функция ВидыИнвестиционныхСчетов() Экспорт
	
	ВидыСчетов = Новый Структура;
	ВидыСчетов.Вставить("ИндивидуальныйИнвестиционныйСчет", "ИндивидуальныйИнвестиционныйСчет");
	ВидыСчетов.Вставить("ПрочиеСчета", "ПрочиеСчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция ГодНачалаДействияВычетаУбыткиПрошлыхЛетПоЦеннымБумагам(ВидСчета) Экспорт
	
	Если ВидСчета = ВидыИнвестиционныхСчетов().ИндивидуальныйИнвестиционныйСчет Тогда
		Возврат 2015;
	Иначе
		Возврат 2010;
	КонецЕсли;
	
КонецФункции

Функция ПризнакиУчетаУбытковПоЦеннымБумагам(ВыбраннаяФорма3НДФЛ) Экспорт
	
	ПризнакиУчетаУбытков = Новый Структура;
	ПризнакиУчетаУбытков.Вставить("УбытокНеУчитывается", "0");
	ПризнакиУчетаУбытков.Вставить("УбытокУчитывается", "1");
	
	Возврат ПризнакиУчетаУбытков;
	
КонецФункции

Функция КодыВидовДоговоровДобровольныхВзносов(ВыбраннаяФорма) Экспорт
	
	КодыВидовДоговоров = Новый Структура;
	КодыВидовДоговоров.Вставить("ПенсионноеОбеспечение", "1");
	КодыВидовДоговоров.Вставить("ПенсионноеСтрахование", "2");
	КодыВидовДоговоров.Вставить("СтрахованиеЖизни", "3");
	
	Возврат КодыВидовДоговоров;
	
КонецФункции

Функция КодыНаименованияОбъектаНедвижимости(ВыбраннаяФорма) Экспорт
	
	КодыОбъектаНедвижимости = Новый Структура;
	КодыОбъектаНедвижимости.Вставить("ЖилойДом", "1");
	КодыОбъектаНедвижимости.Вставить("Квартира", "2");
	КодыОбъектаНедвижимости.Вставить("Комната", "3");
	КодыОбъектаНедвижимости.Вставить("ДоляВКвартире", "4");
	КодыОбъектаНедвижимости.Вставить("ЗемельныйУчастокПодСтроительство", "5");
	КодыОбъектаНедвижимости.Вставить("ЗемельныйУчасток", "6");
	КодыОбъектаНедвижимости.Вставить("ЖилойДомСЗемельнымУчастком", "7");
	КодыОбъектаНедвижимости.Вставить("ДоляВЗемельномУчастке", "4");
	
	Возврат КодыОбъектаНедвижимости;
	
КонецФункции

Функция КодыПризнакаНалогоплательщикаДляИмущественногоВычета(ВыбраннаяФорма) Экспорт
	
	КодыНалогоплательщика = Новый Структура;
	КодыНалогоплательщика.Вставить("Собственник", "");
	КодыНалогоплательщика.Вставить("СобственникПенсионер", "");
	КодыНалогоплательщика.Вставить("СупругСобственника", "");
	КодыНалогоплательщика.Вставить("СупругСобственникаПенсионер", "");
	КодыНалогоплательщика.Вставить("Родитель", "");
	КодыНалогоплательщика.Вставить("РодительПенсионер", "");
	КодыНалогоплательщика.Вставить("СобственникСРебенком", "");
	КодыНалогоплательщика.Вставить("СобственникСРебенкомПенсионер", "");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенком", "");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенкомПенсионер", "");
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		ЗаполнитьЗначенияСвойств(КодыНалогоплательщика, КодыПризнакаНалогоплательщикаДляИмущественногоВычета2019());
	Иначе
		ЗаполнитьЗначенияСвойств(КодыНалогоплательщика, КодыПризнакаНалогоплательщикаДляИмущественногоВычета2018());
	КонецЕсли;
	
	Возврат КодыНалогоплательщика;
	
КонецФункции

Функция КодОбъектаНедвижимости(ОбъектНедвижимости, ВыбраннаяФорма) Экспорт
	
	Перем КодОбъектаНедвижимости;
	
	КодыОбъектаНедвижимости = КодыНаименованияОбъектаНедвижимости(ВыбраннаяФорма);
	Если КодыОбъектаНедвижимости.Свойство(ОбъектНедвижимости, КодОбъектаНедвижимости) Тогда
		Возврат КодОбъектаНедвижимости;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПределыВычетов(ВыбраннаяФорма) Экспорт
	
	ПределыВычетов = Новый Структура;
	ПределыВычетов.Вставить("СоциальныеВычеты", 120000);
	ПределыВычетов.Вставить("ПожертвованияПроцентДохода", 0.25);
	ПределыВычетов.Вставить("ВычетНаДетейДоходы", 350000);
	ПределыВычетов.Вставить("СтандартныйВычетПо218_1_1", 3000 * 12);
	ПределыВычетов.Вставить("СтандартныйВычетПо218_1_2", 500 * 12);
	
	ПределыВычетов.Вставить("ПродажаЖилойНедвижимости", 1000000);
	ПределыВычетов.Вставить("ПродажаИногоИмущества", 250000);
	ПределыВычетов.Вставить("НаПриобретениеНедвижимостиСтоимость", 2000000);
	ПределыВычетов.Вставить("НаПриобретениеНедвижимостиПроценты", 3000000);
	
	ПределыВычетов.Вставить("ИнвестиционныйВычет", 400000);
	
	Возврат ПределыВычетов;
	
КонецФункции

Функция НеоблагаемыеСуммыДоходов(ВыбраннаяФорма) Экспорт
	
	НеоблагаемыеСуммыДоходов = Новый Структура;
	НеоблагаемыеСуммыДоходов.Вставить("Подарок", 4000);
	
	Возврат НеоблагаемыеСуммыДоходов;
	
КонецФункции

Функция ПроцентПрофессиональногоВычета(ВыбраннаяФорма) Экспорт
	
	Возврат 20;
	
КонецФункции

Функция КодыИсточниковДоходов(ВыбраннаяФорма) Экспорт
	
	КодыИсточниковДоходов = Новый Структура;
	КодыИсточниковДоходов.Вставить("ДоходРФ", "1");
	КодыИсточниковДоходов.Вставить("ДоходЗаПределамиРФ", "2");
	
	Возврат КодыИсточниковДоходов;
	
КонецФункции

Функция ПрофессиональныйВычетРассчитываетсяПострочно(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция МожноНеУказыватьНаименованиеИсточникаДохода(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает коллекцию таблиц, содержащих списки выбора значений показателей декларации.
//
Функция СпискиВыбора(МакетСоставаПоказателей) Экспорт
	
	КоллекцияСписковВыбора = Новый Соответствие;
	
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		
		Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаЗначений = НоваяТаблицаЗначенийСпискаВыбора();
		
		Для НомСтр = Область.Верх По Область.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
			Если КодПоказателя <> "###" Тогда
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Код = КодПоказателя;
				НоваяСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				НоваяСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
			КонецЕсли;
		КонецЦикла;
		
		КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблицаЗначений);
		
	КонецЦикла;
	
	Возврат КоллекцияСписковВыбора;
	
КонецФункции

Функция НоваяТаблицаЗначенийСпискаВыбора() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("Название", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("РезультатПроверки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция НовыйРезультатПроверкиКонтрольныхСоотношений() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоНайденныхОшибок", 0);
	Результат.Вставить("КоличествоНайденныхБезОшибок", 0);
	Результат.Вставить("СтруктураОшибок", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

Функция ВидНалогаПоКБК(КодБК, ВыбраннаяФорма)
	
	КБКДекларации = КБК(ВыбраннаяФорма);
	
	Если КодБК = КБКДекларации.ДоходыПолученныеОтНалоговыхАгентов Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ;
	ИначеЕсли КодБК = КБКДекларации.ДоходыОтПредпринимательскойДеятельности Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ_ИП;
	ИначеЕсли КодБК = КБКДекларации.ДоходыПриПолученииКоторыхНеУдержанНалог Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ_ФизЛицо;
	Иначе
		Возврат Перечисления.ВидыНалогов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ТекстПоясненияРасширенныйНалоговыйПериод(Организация, КонецПериода) Экспорт
	
	Если РегламентированнаяОтчетностьПереопределяемый.СистемаНалогообложения(Организация, КонецПериода) <> "Общая" Тогда
		Возврат "";
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Организация,
		КонецПериода,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре);
	
	Если КонецПериода < НалоговыйПериод.Начало Тогда
		Возврат "";
	КонецЕсли;
	
	НалоговыйПериодПропущен = (КонецПериода < НалоговыйПериод.Период);
	НалоговыйПериодРасширен = (НалоговыйПериод.Начало < НалоговыйПериод.Период);
	
	ГодОтчета = Год(КонецПериода);
	
	Если НалоговыйПериодПропущен Тогда
		ТекстПояснения = СтрШаблон(
			НСтр("ru = 'Декларировать доходы, полученные от предпринимательской деятельности, в отчете за %1 год не нужно. Период с даты регистрации %2 по %3 включается в отчет за %4 год.'"),
			Формат(ГодОтчета, "ЧГ=0"),
			Формат(НалоговыйПериод.Начало, "ДЛФ=D"),
			Формат(НалоговыйПериод.Период - 1, "ДЛФ=D"),
			Формат(ГодОтчета + 1, "ЧГ=0"));
	ИначеЕсли НалоговыйПериодРасширен Тогда
		ТекстПояснения = СтрШаблон(
			НСтр("ru = 'Доходы, полученные от предпринимательской деятельности с даты регистрации %1 по %2, включаются в отчет за %3 год.'"),
			Формат(НалоговыйПериод.Начало, "ДЛФ=D"),
			Формат(НалоговыйПериод.Период - 1, "ДЛФ=D"),
			Формат(ГодОтчета, "ЧГ=0"));
	Иначе
		ТекстПояснения = "";
	КонецЕсли;
	
	Возврат ТекстПояснения;
	
КонецФункции

// Приводит телефон к требованиям порядка заполнения
Функция ТелефонДляОтчета(Знач Телефон) Экспорт
	
	// Номер телефона указываются без пробелов и прочерков. Для каждой скобки и знака "+" отводится одна ячейка
	Телефон = СтрЗаменить(Телефон, " ", "");
	Телефон = СтрЗаменить(Телефон, "-", "");
	
	Возврат Телефон;
	
КонецФункции

Функция ИмяМакетаСписковВыбора(ВыбраннаяФорма)
	
	Возврат СтрШаблон("Списки%1", СуффиксВыбраннойФормы(ВыбраннаяФорма));
	
КонецФункции

Функция СуффиксВыбраннойФормы(ВыбраннаяФорма)
	
	Возврат Сред(ВыбраннаяФорма, СтрДлина("ФормаОтчета") + 1);
	
КонецФункции

#КонецОбласти

#Область Форма2018кв1

Функция СтруктураРеквизитовФормы2018(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2018кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2017";
	СтруктураРеквизитовФормы.мКодОтчета = "1151020"; // КНД
	
	СтруктураРеквизитовФормы.мПоМесту = КодКатегорииНалогоплательщикаПоУмолчанию();
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.12", Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2018();
	СтруктураРеквизитовФормы.Вставить("мИдГруппыА", ИдентификаторыМногострочныхГрупп.ГруппаА);
	СтруктураРеквизитовФормы.Вставить("мИдГруппыБ", ИдентификаторыМногострочныхГрупп.ГруппаБ);
	СтруктураРеквизитовФормы.Вставить("мИдРасчетаДоходаОтПродажиНедвижимости", ИдентификаторыМногострочныхГрупп.РасчетДоходаОтПродажиНедвижимости);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2018() Экспорт
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2018();
	
	КлючиПоказателей = НовыеКлючиПоказателейДекларации();
	
	// Раздел 1
	ДобавитьКлючПоказателя("ПризнакУплатыВозврата", "Раздел1", "П000100001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КБК", "Раздел1", "П000100001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОКТМО", "Раздел1", "П000100001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалога", "Раздел1", "П000100001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаВозвратаНалога", "Раздел1", "П000100001050", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Раздел 2
	ДобавитьКлючПоказателя("НалоговаяСтавка", "Раздел2", "П000200001001", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ВидДохода", "Раздел2", "П000200001002", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходов", "Раздел2", "П000200001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", "Раздел2", "П000200001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", "Раздел2", "П000200001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалоговыхВычетов", "Раздел2", "П000200001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходов", "Раздел2", "П000200001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходовКИК", "Раздел2", "П000200001051", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НалоговаяБаза", "Раздел2", "П000200001060", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СуммаНалогаИсчисленная", "Раздел2", "П000200001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаУдержанная", "Раздел2", "П000200001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяСМатериальнойВыгоды", "Раздел2", "П000200001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаТорговогоСбора", "Раздел2", "П000200001091", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежей", "Раздел2", "П000200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаФиксированныхАвансовыхПлатежей", "Раздел2", "П000200001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаИностранногоГосударства", "Раздел2", "П000200001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяКУплате", "Раздел2", "П000200001121", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаПСН", "Раздел2", "П000200001122", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяУплате", "Раздел2", "П000200001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяВозврату", "Раздел2", "П000200001140", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист А
	ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаРФ", "ЛистА", "П000300001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КодВидаДоходаРФ", "ЛистА", "П000300001020", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ИННИсточникаДоходаРФ", "ЛистА", "П000300001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КППИсточникаДоходаРФ", "ЛистА", "П000300001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОКТМОИсточникаДоходаРФ", "ЛистА", "П000300001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаРФ", "ЛистА", "П000300001060", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СуммаДоходаРФ", "ЛистА", "П000300001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаОблагаемогоДоходаРФ", "ЛистА", "П000300001080", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяРФ", "ЛистА", "П000300001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяРФ", "ЛистА", "П000300001100", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Б
	ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаЗаПределамиРФ", "ЛистБ", "П000400001001", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
	ДобавитьКлючПоказателя("ОКСМДоходаЗаПределамиРФ", "ЛистБ", "П000400001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаЗаПределамиРФ", "ЛистБ", "П000400001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ВалютаДоходаЗаПределамиРФ", "ЛистБ", "П000400001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КодВидаДоходаЗаПределамиРФ", "ЛистБ", "П000400001031", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НомерКИК", "ЛистБ", "П000400001032", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаПолученияДоходаЗаПределамиРФ", "ЛистБ", "П000400001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КурсНаДатуДоходаЗаПределамиРФ", "ЛистБ", "П000400001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаДоходаЗаПределамиРФ", "ЛистБ", "П000400001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРубДоходаЗаПределамиРФ", "ЛистБ", "П000400001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК", "ЛистБ", "П000400001071", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРубДивидендовКИК", "ЛистБ", "П000400001072", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПорядокОпределенияПрибылиУбыткаКИК", "ЛистБ", "П000400001073", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаУплатыНалогаЗаПределамиРФ", "ЛистБ", "П000400001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КурсНаДатуУплатыНалогаЗаПределамиРФ", "ЛистБ", "П000400001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаУплаченнаяЗаПределамиРФ", "ЛистБ", "П000400001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", "ЛистБ", "П000400001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", "ЛистБ", "П000400001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаПодлежащаяЗачетуВРФ", "ЛистБ", "П000400001130", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист В
	ДобавитьКлючПоказателя("КодВидаДеятельностиИП", "ЛистВ", "П000500001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОКВЭДИП", "ЛистВ", "П000500001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаДоходаИП", "ЛистВ", "П000500001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходовИП", "ЛистВ", "П000500001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("МатериальныеРасходыИП", "ЛистВ", "П000500001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("АмортизацияИП", "ЛистВ", "П000500001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗарплатаИП", "ЛистВ", "П000500001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗарплатаПоТрудовымДоговорамИП", "ЛистВ", "П000500001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПрочиеРасходыИП", "ЛистВ", "П000500001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходовВПределахНормативаИП", "ЛистВ", "П000500001100", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходаИП", "ЛистВ", "П000500001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИП", "ЛистВ", "П000500001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНачисленныхАвансовыхПлатежейИП", "ЛистВ", "П000500001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежейИП", "ЛистВ", "П000500001140", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Г
	ДобавитьКлючПоказателя("ОбщаяСтоимостьПодарков", "ЛистГ", "П000600001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтоимостьПодарковНеПодлежащаяНалогообложению", "ЛистГ", "П000600001080", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СуммаДоходовНеПодлежащаяНалогообложению", "ЛистГ", "П000600001200", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Д1
	ДобавитьКлючПоказателя("КодНаименованияОбъектаНедвижимости", "ЛистД1", "П000700001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ВидСобственностиНаОбъектНедвижимости", "ЛистД1", "П000700001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПризнакНалогоплательщикаОбъектаНедвижимости", "ЛистД1", "П000700001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НалогоплательщикПенсионер", "ЛистД1", "П000700001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КодНомераОбъектаНедвижимости", "ЛистД1", "П000700001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КадастровыйНомерОбъектаНедвижимости", "ЛистД1", "П000700001051", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("АдресОбъектаНедвижимости", "ЛистД1", "П000700001052", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаАктаОПередачеОбъектаНедвижимости", "ЛистД1", "П000700001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЖилье", "ЛистД1", "П000700001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЗемлю", "ЛистД1", "П000700001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаЗаявленияОРаспределенииВычета", "ЛистД1", "П000700001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоляВПравеСобственностиЧислитель", "ЛистД1", "П000700001100_1", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоляВПравеСобственностиЗнаменатель", "ЛистД1", "П000700001100_3", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ГодНачалаИспользованияВычета", "ЛистД1", "П000700001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимости", "ЛистД1", "П000700001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", "ЛистД1", "П000700001130", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Итоги листа Д1
	ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", "ЛистД1", "П000700001140", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", "ЛистД1", "П000700001150", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", "ЛистД1", "П000700001200", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", "ЛистД1", "П000700001210", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", "ЛистД1", "П000700001220", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", "ЛистД1", "П000700001230", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", "ЛистД1", "П000700001240", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Д2
	ДобавитьКлючПоказателя("ДоходыПродажаЖилойНедвижимости", "ЛистД2", "П000800001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИмущественныйВычетПродажаЖилойНедвижимости", "ЛистД2", "П000800001020", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыПродажаДолиЖилойНедвижимости", "ЛистД2", "П000800001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиЖилойНедвижимости", "ЛистД2", "П000800001040", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыСРасходамиПродажаЖилойНедвижимости", "ЛистД2", "П000800001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыПродажаЖилойНедвижимости", "ЛистД2", "П000800001060", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыПродажаИнойНедвижимости", "ЛистД2", "П000800001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИнойНедвижимости", "ЛистД2", "П000800001080", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыСРасходамиПродажаИнойНедвижимости", "ЛистД2", "П000800001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыПродажаИнойНедвижимости", "ЛистД2", "П000800001100", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыПродажаИногоИмущества", "ЛистД2", "П000800001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИногоИмущества", "ЛистД2", "П000800001120", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыСРасходамиПродажаИногоИмущества", "ЛистД2", "П000800001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыПродажаИногоИмущества", "ЛистД2", "П000800001140", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ОбщаяСуммаИмущественногоВычета", "ЛистД2", "П000800001210", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Ж
	ДобавитьКлючПоказателя("ИсточникДоходовПрофессиональногоВычета", "ЛистЖ", "П001100001001", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоходыПродажаДолиУставногоКапитала", "ЛистЖ", "П001100001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыПродажаДолиУставногоКапитала", "ЛистЖ", "П001100001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоходыДолевоеСтроительство", "ЛистЖ", "П001100001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыДолевоеСтроительство", "ЛистЖ", "П001100001140", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаПрофессиональногоВычета", "ЛистЖ", "П001100001150", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Е1
	ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_1", "ЛистЕ1", "П000900001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_2", "ЛистЕ1", "П000900001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетНаДетей", "ЛистЕ1", "П000900001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетНаДетейЕдинственномуРодителю", "ЛистЕ1", "П000900001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидов", "ЛистЕ1", "П000900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю", "ЛистЕ1", "П000900001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхВычетов", "ЛистЕ1", "П000900001070", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СоциальныйВычетПожертвования", "ЛистЕ1", "П000900001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СоциальныйВычетОбучениеДетей", "ЛистЕ1", "П000900001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СоциальныйВычетДорогостоящееЛечение", "ЛистЕ1", "П000900001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения", "ЛистЕ1", "П000900001110", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СоциальныйВычетОбучениеСвое", "ЛистЕ1", "П000900001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СоциальныйВычетЛечениеМедикаменты", "ЛистЕ1", "П000900001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СоциальныйВычетМедицинскоеСтрахование", "ЛистЕ1", "П000900001140", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", "ЛистЕ1", "П000900001150", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыНаПрохождениеНезависимойОценкиКвалификации", "ЛистЕ1", "П000900001160", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением", "ЛистЕ1", "П000900001170", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", "ЛистЕ1", "П000900001180", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхСоциальныхВычетов", "ЛистЕ1", "П000900001190", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Е2
	ДобавитьКлючПоказателя("ИННПенсионногоФонда", "ЛистЕ2", "П001000001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КПППенсионногоФонда", "ЛистЕ2", "П001000001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ВидДоговораПенсионногоОбеспечения", "ЛистЕ2", "П001000001021", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НаименованиеПенсионногоФонда", "ЛистЕ2", "П001000001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаДоговораПенсионногоОбеспечения", "ЛистЕ2", "П001000001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НомерДоговораПенсионногоОбеспечения", "ЛистЕ2", "П001000001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондВсего", "ЛистЕ2", "П001000001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондКВычету", "ЛистЕ2", "П001000001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюВсего", "ЛистЕ2", "П001000001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюКВычету", "ЛистЕ2", "П001000001090", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", "ЛистЕ2", "П001000001100", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ИнвестиционныйВычет", "ЛистЕ2", "П001000001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИнвестиционныйВычетКВосстановлению", "ЛистЕ2", "П001000001120", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперации", "ЛистЗ", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаДохода", "ЛистЗ", "П001200001101", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаРасходов", "ЛистЗ", "П001200001102", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаРЕПО", "ЛистЗ", "П001200001103", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаПоЗаймам", "ЛистЗ", "П001200001104", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаПроцентногоРасхода", "ЛистЗ", "П001200001105", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБОбщаяСуммаРасходов", "ЛистЗ", "П001200001106", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБНалоговаяБаза", "ЛистЗ", "П001200001107", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБОбщаяСуммаУбытка", "ЛистЗ", "П001200001108", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБИнвестиционныйВычет", "ЛистЗ", "П001200001109", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаПоПФИ", "ЛистЗ", "П001200001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаПрошлыхЛет", "ЛистЗ", "П001200001111", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаНалогооблагаемогоДохода", "ЛистЗ", "П001200001112", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ", "ЛистЗ", "П001200001113", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ", "ЛистЗ", "П001200001114", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаБудущийПериод", "ЛистЗ", "П001200001115", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З. Продолжение 1
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперацииПродолжение", "ЛистЗПродолжение", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБПрекратившиеОбращениеСуммаДохода", "ЛистЗПродолжение", "П001300001201", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБПрекратившиеОбращениеСуммаРасходов", "ЛистЗПродолжение", "П001300001202", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ", "ЛистЗПродолжение", "П001300001203", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение", "П001300001204", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаДохода", "ЛистЗПродолжение", "П001300001205", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаРасходов", "ЛистЗПродолжение", "П001300001206", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО", "ЛистЗПродолжение", "П001300001207", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам", "ЛистЗПродолжение", "П001300001208", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода", "ЛистЗПродолжение", "П001300001209", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаУбыткаИнвестТоварищества", "ЛистЗПродолжение", "П001300001210", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБОбщаяСуммаРасходов", "ЛистЗПродолжение", "П001300001211", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение", "П001300001212", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З. Продолжение 2
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперацииПродолжение2", "ЛистЗПродолжение2", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаДохода", "ЛистЗПродолжение2", "П001400001301", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаРасходов", "ЛистЗПродолжение2", "П001400001302", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеНалоговаяБаза", "ЛистЗПродолжение2", "П001400001303", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеОбщаяСуммаУбытка", "ЛистЗПродолжение2", "П001400001304", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет", "ЛистЗПродолжение2", "П001400001305", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ", "ЛистЗПродолжение2", "П001400001306", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые", "ЛистЗПродолжение2", "П001400001307", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение2", "П001400001308", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые", "ЛистЗПродолжение2", "П001400001309", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ", "ЛистЗПродолжение2", "П001400001310", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод", "ЛистЗПродолжение2", "П001400001311", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаДохода", "ЛистЗПродолжение2", "П001400001312", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаРасходов", "ЛистЗПродолжение2", "П001400001313", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеНалоговаяБаза", "ЛистЗПродолжение2", "П001400001314", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка", "ЛистЗПродолжение2", "П001400001315", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет", "ЛистЗПродолжение2", "П001400001316", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые", "ЛистЗПродолжение2", "П001400001317", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение2", "П001400001318", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые", "ЛистЗПродолжение2", "П001400001319", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод", "ЛистЗПродолжение2", "П001400001320", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ПФИНеОбрНаОРЦБСуммаДохода", "ЛистЗПродолжение2", "П001400001321", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНеОбрНаОРЦБСуммаРасходов", "ЛистЗПродолжение2", "П001400001322", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение2", "П001400001323", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З. Продолжение 3
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперацииПродолжение3", "ЛистЗПродолжение3", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаДохода", "ЛистЗПродолжение3", "П001500001401", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаРасходов", "ЛистЗПродолжение3", "П001500001402", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение3", "П001500001403", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаУбытка", "ЛистЗПродолжение3", "П001500001404", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаУбыткаЦБНаОРЦБ", "ЛистЗПродолжение3", "П001500001405", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ", "ЛистЗПродолжение3", "П001500001406", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаДохода", "ЛистЗПродолжение3", "П001500001407", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаРасходов", "ЛистЗПродолжение3", "П001500001408", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение3", "П001500001409", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаУбытка", "ЛистЗПродолжение3", "П001500001410", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ", "ЛистЗПродолжение3", "П001500001411", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ", "ЛистЗПродолжение3", "П001500001412", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З. Продолжение 4
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперацииПродолжение4", "ЛистЗПродолжение4", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетОстатокНаНачало", "ЛистЗПродолжение4", "П001600001501", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод1", "ЛистЗПродолжение4", "П001600001502_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод2", "ЛистЗПродолжение4", "П001600001503_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод3", "ЛистЗПродолжение4", "П001600001504_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод4", "ЛистЗПродолжение4", "П001600001505_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод5", "ЛистЗПродолжение4", "П001600001506_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод6", "ЛистЗПродолжение4", "П001600001507_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод7", "ЛистЗПродолжение4", "П001600001508_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод8", "ЛистЗПродолжение4", "П001600001509_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод9", "ЛистЗПродолжение4", "П001600001510_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод10", "ЛистЗПродолжение4", "П001600001511_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод1", "ЛистЗПродолжение4", "П001600001502", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод2", "ЛистЗПродолжение4", "П001600001503", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод3", "ЛистЗПродолжение4", "П001600001504", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод4", "ЛистЗПродолжение4", "П001600001505", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод5", "ЛистЗПродолжение4", "П001600001506", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод6", "ЛистЗПродолжение4", "П001600001507", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод7", "ЛистЗПродолжение4", "П001600001508", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод8", "ЛистЗПродолжение4", "П001600001509", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод9", "ЛистЗПродолжение4", "П001600001510", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод10", "ЛистЗПродолжение4", "П001600001511", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетОстатокНаНачало", "ЛистЗПродолжение4", "П001600001512", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод1", "ЛистЗПродолжение4", "П001600001513", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод2", "ЛистЗПродолжение4", "П001600001514", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод3", "ЛистЗПродолжение4", "П001600001515", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод4", "ЛистЗПродолжение4", "П001600001516", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод5", "ЛистЗПродолжение4", "П001600001517", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод6", "ЛистЗПродолжение4", "П001600001518", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод7", "ЛистЗПродолжение4", "П001600001519", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод8", "ЛистЗПродолжение4", "П001600001520", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод9", "ЛистЗПродолжение4", "П001600001521", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод10", "ЛистЗПродолжение4", "П001600001522", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетНалоговаяБаза", "ЛистЗПродолжение4", "П001600001523", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетНалоговаяБаза", "ЛистЗПродолжение4", "П001600001524", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету", "ЛистЗПродолжение4", "П001600001525", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету", "ЛистЗПродолжение4", "П001600001526", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетОстатокНаКонец", "ЛистЗПродолжение4", "П001600001527", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетОстатокНаКонец", "ЛистЗПродолжение4", "П001600001528", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЦБУбыткиПереходящиеНаБудущиеПериоды", "ЛистЗПродолжение4", "П001600001529", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПереходящиеНаБудущиеПериоды", "ЛистЗПродолжение4", "П001600001530", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЦенныеБумагиИтогоСуммаДоходов", "ЛистЗПродолжение4", "П001600001531", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение4", "П001600001532", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦенныеБумагиИтогоСуммаРасходовКВычету", "ЛистЗПродолжение4", "П001600001533", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Приложение "Расчет дохода от продажи недвижимости".
	ДобавитьКлючПоказателя("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", "РасчетДоходаОтПродажиНедвижимости", "П001900001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КадастроваяСтоимостьГодРегистрации", "РасчетДоходаОтПродажиНедвижимости", "П001900001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоходПродажиЦенаДоговора", "РасчетДоходаОтПродажиНедвижимости", "П001900001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КадастроваяСтоимостьКоэффициент", "РасчетДоходаОтПродажиНедвижимости", "П001900001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоходПродажиНалогооблагаемый", "РасчетДоходаОтПродажиНедвижимости", "П001900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция СвойстваРазделовДекларации2018()
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2018();
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "Титульный";
	СтрокаУровня1.ПредставлениеДанных = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "Раздел1";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 9;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "Раздел2";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 9;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистА";
	СтрокаУровня1.СохранятьМногострКакТЗ = Истина;
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп.ГруппаА;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 16;
	НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистБ";
	СтрокаУровня1.СохранятьМногострКакТЗ = Истина;
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп.ГруппаБ;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 18;
	НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистВ";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистГ";
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистД1";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистД2";
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЕ1";
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЕ2";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЖ";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗ";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗПродолжение";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗПродолжение2";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗПродолжение3";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;

	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗПродолжение4";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистИ";
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистИПродолжение";
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "РасчетДоходаОтПродажиНедвижимости";
	СтрокаУровня1.СохранятьМногострКакТЗ = Истина;
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп.РасчетДоходаОтПродажиНедвижимости;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 9;
	НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция СтруктураМногострочныхРазделов2018()
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2018();
	
	СтруктураМногострочныхРазделов = Новый Структура;
	СтруктураМногострочныхРазделов.Вставить(ИдентификаторыМногострочныхГрупп.ГруппаА, ИдентификаторыМногострочныхГрупп.ГруппаА);
	СтруктураМногострочныхРазделов.Вставить(ИдентификаторыМногострочныхГрупп.ГруппаБ, ИдентификаторыМногострочныхГрупп.ГруппаБ);
	СтруктураМногострочныхРазделов.Вставить(ИдентификаторыМногострочныхГрупп.РасчетДоходаОтПродажиНедвижимости, ИдентификаторыМногострочныхГрупп.РасчетДоходаОтПродажиНедвижимости);
	
	Возврат СтруктураМногострочныхРазделов;
	
КонецФункции

Функция СтруктураМногостраничныхРазделов2018()
	
	СтруктураМногостраничныхРазделов = Новый Структура;
	СтруктураМногостраничныхРазделов.Вставить("Раздел1", "ТаблицаСтраницыРаздел1");
	СтруктураМногостраничныхРазделов.Вставить("Раздел2", "ТаблицаСтраницыРаздел2");
	СтруктураМногостраничныхРазделов.Вставить("ЛистА", "ТаблицаСтраницыЛистА");
	СтруктураМногостраничныхРазделов.Вставить("ЛистБ", "ТаблицаСтраницыЛистБ");
	СтруктураМногостраничныхРазделов.Вставить("ЛистВ", "ТаблицаСтраницыЛистВ");
	СтруктураМногостраничныхРазделов.Вставить("ЛистД1", "ТаблицаСтраницыЛистД1");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЕ2", "ТаблицаСтраницыЛистЕ2");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЖ", "ТаблицаСтраницыЛистЖ");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗ", "ТаблицаСтраницыЛистЗ");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗПродолжение", "ТаблицаСтраницыЛистЗПродолжение");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗПродолжение2", "ТаблицаСтраницыЛистЗПродолжение2");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗПродолжение3", "ТаблицаСтраницыЛистЗПродолжение3");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗПродолжение4", "ТаблицаСтраницыЛистЗПродолжение4");
	СтруктураМногостраничныхРазделов.Вставить("РасчетДоходаОтПродажиНедвижимости", "ТаблицаСтраницыРасчетДоходаОтПродажиНедвижимости");
	
	Возврат СтруктураМногостраничныхРазделов;
	
КонецФункции

Функция ДеревоСтраницОтчета2018()
	
	ДеревоСтраницОтчета = НовыйДеревоСтраницОтчета();
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Титульный",
		НСтр("ru = 'Титульный лист'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Раздел1",
		НСтр("ru = 'Раздел 1'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Раздел2",
		НСтр("ru = 'Раздел 2'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистА",
		НСтр("ru = 'Лист А'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистБ",
		НСтр("ru = 'Лист Б'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистВ",
		НСтр("ru = 'Лист В'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистГ",
		НСтр("ru = 'Лист Г'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистД1",
		НСтр("ru = 'Лист Д1'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистД2",
		НСтр("ru = 'Лист Д2'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЕ1",
		НСтр("ru = 'Лист Е1'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЕ2",
		НСтр("ru = 'Лист Е2'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЖ",
		НСтр("ru = 'Лист Ж'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗ",
		НСтр("ru = 'Лист З'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗПродолжение",
		НСтр("ru = 'Лист З'") + Символы.ПС + НСтр("ru = 'продолжение 1'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗПродолжение2",
		НСтр("ru = 'Лист З'") + Символы.ПС + НСтр("ru = 'продолжение 2'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗПродолжение3",
		НСтр("ru = 'Лист З'") + Символы.ПС + НСтр("ru = 'продолжение 3'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗПродолжение4",
		НСтр("ru = 'Лист З'") + Символы.ПС + НСтр("ru = 'продолжение 4'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистИ",
		НСтр("ru = 'Лист И'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистИПродолжение",
		НСтр("ru = 'Лист И'") + Символы.ПС + НСтр("ru = 'продолжение'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"РасчетДоходаОтПродажиНедвижимости",
		НСтр("ru = 'Приложение'"));
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция ИдентификаторыМногострочныхГрупп2018()
	
	ИдентификаторыМногострочных = Новый Структура;
	ИдентификаторыМногострочных.Вставить("ГруппаА", "П000300001");
	ИдентификаторыМногострочных.Вставить("ГруппаБ", "П000400001");
	ИдентификаторыМногострочных.Вставить("РасчетДоходаОтПродажиНедвижимости", "П001900001");
	
	Возврат ИдентификаторыМногострочных;
	
КонецФункции

Функция ИмяФайлаСхемы2018()
	
	Возврат "NO_NDFL3_1_033_00_05_12_01.xsd";
	
КонецФункции

Функция КодыВидовДоходовРФ2018()
	
	КодыВидовДоходов = Новый Структура;
	КодыВидовДоходов.Вставить("ПродажаНедвижимости", "01");
	КодыВидовДоходов.Вставить("ПродажаИмущества", "02");
	КодыВидовДоходов.Вставить("ОперацииСЦеннымиБумагами", "03");
	КодыВидовДоходов.Вставить("СдачаИмуществаВАренду", "04");
	КодыВидовДоходов.Вставить("Подарок", "05");
	КодыВидовДоходов.Вставить("ОплатаТруда", "06");
	КодыВидовДоходов.Вставить("ОплатаТрудаНалогНеУдержанАгентом", "07");
	КодыВидовДоходов.Вставить("Дивиденды", "08");
	КодыВидовДоходов.Вставить("ПродажаНедвижимостиПоКадастровойСтоимости", "09");
	КодыВидовДоходов.Вставить("ИнойДоходОтИсточникаРФ", "10");
	
	Возврат КодыВидовДоходов;
	
КонецФункции

Функция КодыВидовДоходовЗаПределамиРФ2018()
	
	КодыВидовДоходовЗаПределамиРФ = Новый Структура;
	КодыВидовДоходовЗаПределамиРФ.Вставить("ПрибыльКИК", "1");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Иной", "2");
	
	Возврат КодыВидовДоходовЗаПределамиРФ;
	
КонецФункции

Функция КодыВидовПредпринимательскойДеятельности2018()
	
	КодыВидовПредпринимательскойДеятельности = Новый Структура;
	КодыВидовПредпринимательскойДеятельности.Вставить("ПредпринимательскаяДеятельность", "1");
	КодыВидовПредпринимательскойДеятельности.Вставить("НотариальнаяДеятельность", "2");
	КодыВидовПредпринимательскойДеятельности.Вставить("АдвокатскаяДеятельность", "3");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьАрбитражногоУправляющего", "4");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьГлавыКФХ", "5");
	КодыВидовПредпринимательскойДеятельности.Вставить("ИнаяДеятельность", "6");
	
	Возврат КодыВидовПредпринимательскойДеятельности;
	
КонецФункции

Функция КодыПризнакаНалогоплательщикаДляИмущественногоВычета2018()
	
	КодыНалогоплательщика = Новый Структура;
	КодыНалогоплательщика.Вставить("Собственник", "01");
	КодыНалогоплательщика.Вставить("СупругСобственника", "02");
	КодыНалогоплательщика.Вставить("Родитель", "03");
	КодыНалогоплательщика.Вставить("СобственникСРебенком", "13");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенком", "23");
	
	Возврат КодыНалогоплательщика;
	
КонецФункции

Функция КодыВидовОперацийСЦеннымиБумагами2018()
	
	КодыВидовОпераций = Новый Структура;
	КодыВидовОпераций.Вставить("ОперацииПоИИС", "1");
	КодыВидовОпераций.Вставить("ИныеОперации", "2");
	
	Возврат КодыВидовОпераций;
	
КонецФункции

#КонецОбласти

#Область Форма2019кв1

Функция РеквизитыФормыОтчета2019()
	
	РеквизитыФормы = РеквизитыФормы2019();
	
	РеквизитыФормыОтчета = НовыеРеквизитыФормыОтчета();
	РеквизитыФормыОтчета.ФормаОтчета = РеквизитыФормы.ИмяОбъекта;
	РеквизитыФормыОтчета.ДатаНачалоДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	РеквизитыФормыОтчета.ОписаниеОтчета = СтрШаблон(
		НСтр("ru = 'Утверждена приказом ФНС России от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
		
	РеквизитыФормыОтчета.РедакцияФормы = СтрШаблон(
		"от %1 г. № %2",
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	Возврат РеквизитыФормыОтчета;
	
КонецФункции

Функция РеквизитыФормы2019()
	
	РеквизитыФормы = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормы.Код = "1151020";
	РеквизитыФормы.ДатаПриказа = Дата(2018, 10, 03);
	РеквизитыФормы.НомерПриказа = "ММВ-7-11/569@";
	РеквизитыФормы.ДатаНачалаДействия = Дата(2018, 1, 1);
	РеквизитыФормы.ИмяОбъекта = "ФормаОтчета2019кв1";
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция РеквизитыФормата2019()
	
	РеквизитыФормы = РеквизитыФормы2019();
	
	РеквизитыФормата = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормата.Код = "5.13";
	РеквизитыФормата.ДатаНачалаДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	Возврат РеквизитыФормата;
	
КонецФункции

Функция СтруктураРеквизитовФормы2019(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	РеквизитыФормы = РеквизитыФормы2019();
	РеквизитыФормата = РеквизитыФормата2019();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2019кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2019";
	СтруктураРеквизитовФормы.мКодОтчета = РеквизитыФормы.Код; // КНД
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, СтрШаблон("Формат %1", РеквизитыФормата.Код), Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2019();
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1", ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1", ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1Расчет", ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение8", ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)]);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2019(ИмяРаздела = "") Экспорт
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2019(ИмяРаздела);
	
	КлючиПоказателей = НовыеКлючиПоказателейДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		ДобавитьКлючПоказателя("ПризнакУплатыВозврата", "Раздел1", "П000100001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КБК", "Раздел1", "П000100001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМО", "Раздел1", "П000100001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалога", "Раздел1", "П000100001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВозвратаНалога", "Раздел1", "П000100001050", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавка", "Раздел2", "П000200001001", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДохода", "Раздел2", "П000200001002", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходов", "Раздел2", "П000200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", "Раздел2", "П000200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", "Раздел2", "П000200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговыхВычетов", "Раздел2", "П000200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходов", "Раздел2", "П000200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовКИК", "Раздел2", "П000200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБаза", "Раздел2", "П000200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленная", "Раздел2", "П000200001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержанная", "Раздел2", "П000200001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяСМатериальнойВыгоды", "Раздел2", "П000200001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаТорговогоСбора", "Раздел2", "П000200001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежей", "Раздел2", "П000200001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаФиксированныхАвансовыхПлатежей", "Раздел2", "П000200001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИностранногоГосударства", "Раздел2", "П000200001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПСН", "Раздел2", "П000200001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяУплате", "Раздел2", "П000200001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяВозврату", "Раздел2", "П000200001160", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаРФ", "Приложение1", "П000300001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаРФ", "Приложение1", "П000300001020", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИННИсточникаДоходаРФ", "Приложение1", "П000300001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КППИсточникаДоходаРФ", "Приложение1", "П000300001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМОИсточникаДоходаРФ", "Приложение1", "П000300001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаРФ", "Приложение1", "П000300001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаДоходаРФ", "Приложение1", "П000300001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяРФ", "Приложение1", "П000300001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаЗаПределамиРФ", "Приложение2", "П000400001001", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКСМДоходаЗаПределамиРФ", "Приложение2", "П000400001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаЗаПределамиРФ", "Приложение2", "П000400001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВалютаДоходаЗаПределамиРФ", "Приложение2", "П000400001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаЗаПределамиРФ", "Приложение2", "П000400001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерКИК", "Приложение2", "П000400001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаПолученияДоходаЗаПределамиРФ", "Приложение2", "П000400001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуДоходаЗаПределамиРФ", "Приложение2", "П000400001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаЗаПределамиРФ", "Приложение2", "П000400001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДоходаЗаПределамиРФ", "Приложение2", "П000400001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК", "Приложение2", "П000400001071", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДивидендовКИК", "Приложение2", "П000400001072", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПорядокОпределенияПрибылиУбыткаКИК", "Приложение2", "П000400001073", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяВОтношенииПрибылиКИК", "Приложение2", "П000400001115", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", "Приложение2", "П000400001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПодлежащаяЗачетуВРФ", "Приложение2", "П000400001130", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		ДобавитьКлючПоказателя("КодВидаДеятельностиИП", "Приложение3", "П000500001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКВЭДИП", "Приложение3", "П000500001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаИП", "Приложение3", "П000500001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовИП", "Приложение3", "П000500001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальныеРасходыИП", "Приложение3", "П000500001041", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АмортизацияИП", "Приложение3", "П000500001042", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЗарплатаИП", "Приложение3", "П000500001043", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрочиеРасходыИП", "Приложение3", "П000500001044", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходаИП", "Приложение3", "П000500001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИП", "Приложение3", "П000500001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежейИП", "Приложение3", "П000500001070", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("КодИсточникаДоходаПрофессиональныхВычетов", "Приложение3", "П000500001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПрофессиональныхВычетов", "Приложение3", "П000500001150", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		ДобавитьКлючПоказателя("СтоимостьПодарковНеПодлежащаяНалогообложению", "Приложение4", "П000600001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходовНеПодлежащаяНалогообложению", "Приложение4", "П000600001120", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_1", "Приложение5", "П000900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_2", "Приложение5", "П000900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетей", "Приложение5", "П000900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейЕдинственномуРодителю", "Приложение5", "П000900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидов", "Приложение5", "П000900001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю", "Приложение5", "П000900001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхВычетов", "Приложение5", "П000900001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетПожертвования", "Приложение5", "П000900001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеДетей", "Приложение5", "П000900001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетДорогостоящееЛечение", "Приложение5", "П000900001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения", "Приложение5", "П000900001120", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеСвое", "Приложение5", "П000900001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетЛечениеМедикаменты", "Приложение5", "П000900001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедицинскоеСтрахование", "Приложение5", "П000900001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", "Приложение5", "П000900001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыНаПрохождениеНезависимойОценкиКвалификации", "Приложение5", "П000900001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением", "Приложение5", "П000900001180", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001181", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", "Приложение5", "П000900001190", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхСоциальныхВычетов", "Приложение5", "П000900001200", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИнвестиционныйВычет", "Приложение5", "П000900001210", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИнвестиционныйВычетКВосстановлению", "Приложение5", "П000900001220", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаЖилойНедвижимости", "Приложение6", "П000800001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаЖилойНедвижимости", "Приложение6", "П000800001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001040", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИнойНедвижимости", "Приложение6", "П000800001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИнойНедвижимости", "Приложение6", "П000800001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИногоИмущества", "Приложение6", "П000800001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИногоИмущества", "Приложение6", "П000800001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("РасходыПродажаДолиУставногоКапитала", "Приложение6", "П000800001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыДолевоеСтроительство", "Приложение6", "П000800001150", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаИмущественногоВычета", "Приложение6", "П000800001160", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		
		ДобавитьКлючПоказателя("КодНаименованияОбъектаНедвижимости", "Приложение7", "П000700001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПризнакНалогоплательщикаОбъектаНедвижимости", "Приложение7", "П000700001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодНомераОбъектаНедвижимости", "Приложение7", "П000700001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастровыйНомерОбъектаНедвижимости", "Приложение7", "П000700001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АдресОбъектаНедвижимости", "Приложение7", "П000700001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаАктаОПередачеОбъектаНедвижимости", "Приложение7", "П000700001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЖилье", "Приложение7", "П000700001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЗемлю", "Приложение7", "П000700001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЧислитель", "Приложение7", "П000700001070_1", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЗнаменатель", "Приложение7", "П000700001070_3", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимости", "Приложение7", "П000700001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", "Приложение7", "П000700001090", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Итоги
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", "Приложение7", "П000700001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", "Приложение7", "П000700001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы", "Приложение7", "П000700001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты", "Приложение7", "П000700001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", "Приложение7", "П000700001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", "Приложение7", "П000700001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", "Приложение7", "П000700001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", "Приложение7", "П000700001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", "Приложение7", "П000700001180", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		ДобавитьКлючПоказателя("ЦенныеБумагиВидОперации", "Приложение8", "П001200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаДохода", "Приложение8", "П001200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовПоРеализации", "Приложение8", "П001200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", "Приложение8", "П001200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиПризнакУчетаУбытков", "Приложение8", "П001200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиУчетУбытковВидОперации", "Приложение8", "П001200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаУбытка", "Приложение8", "П001200001052", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиКВычету", "Приложение8", "П001200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", "Приложение8", "П001200001070", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		ДобавитьКлючПоказателя("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", "Приложение1Расчет", "П001900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьГодРегистрации", "Приложение1Расчет", "П001900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиЦенаДоговора", "Приложение1Расчет", "П001900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьКоэффициент", "Приложение1Расчет", "П001900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиНалогооблагаемый", "Приложение1Расчет", "П001900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		ДобавитьКлючПоказателя("ИННПенсионногоФонда", "Приложение5Расчет", "П001000001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КПППенсионногоФонда", "Приложение5Расчет", "П001000001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001021", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеПенсионногоФонда", "Приложение5Расчет", "П001000001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондКВычету", "Приложение5Расчет", "П001000001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюКВычету", "Приложение5Расчет", "П001000001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", "Приложение5Расчет", "П001000001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция СвойстваРазделовДекларации2019(ИмяРаздела = "")
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2019();
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Титульный" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Титульный";
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 12;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 9;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 13;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.РазделЯвляетсяАвтозаполняемым = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение4";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение6";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение7";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 2;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение8";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 22;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1Расчет";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 10;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5Расчет";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция СтруктураМногострочныхРазделов2019()
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2019();
	
	СтруктураМногострочныхРазделов = Новый Структура;
	
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)], СтруктураМногострочныхРазделов);
	
	Возврат СтруктураМногострочныхРазделов;
	
КонецФункции

Процедура ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочнойГруппы, СтруктураМногострочныхРазделов)
	
	СтруктураМногострочныхРазделов.Вставить(ИдентификаторыМногострочнойГруппы, ИдентификаторыМногострочнойГруппы);
	
КонецПроцедуры

Функция ИдентификаторыМногострочныхГрупп2019()
	
	ИдентификаторыМногострочных = Новый Структура;
	ИдентификаторыМногострочных.Вставить(ИмяРаздела(1), "П000100001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложения(1), "П000300001");
	ИдентификаторыМногострочных.Вставить(ИмяРасчетаКПриложению(1), "П001900001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложения(8), "П001200001");
	
	Возврат ИдентификаторыМногострочных;
	
КонецФункции

Функция СтруктураМногостраничныхРазделов2019()
	
	СтруктураМногостраничныхРазделов = Новый Структура;
	
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(3), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(5), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(7), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(8), СтруктураМногостраничныхРазделов);
	
	Возврат СтруктураМногостраничныхРазделов;
	
КонецФункции

Процедура ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела, СтруктураМногостраничныхРазделов)
	
	СтруктураМногостраничныхРазделов.Вставить(ИмяРаздела, ИмяТаблицыСтраницыМногостраничногоРаздела(ИмяРаздела));
	
КонецПроцедуры

Функция ИмяТаблицыСтраницыМногостраничногоРаздела(ИмяРаздела)
	
	Возврат СтрШаблон("ТаблицаСтраницы%1", ИмяРаздела)
	
КонецФункции

Функция ДеревоСтраницОтчета2019()
	
	ДеревоСтраницОтчета = НовыйДеревоСтраницОтчета();
	
	ДобавитьТитульныйЛист(ДеревоСтраницОтчета);
	
	Для НомерРаздела = 1 По КоличествоРазделов2019() Цикл
		ДобавитьРаздел(ДеревоСтраницОтчета, НомерРаздела);
	КонецЦикла;
	
	Для НомерПриложения = 1 По КоличествоПриложений2019() Цикл
		ДобавитьПриложение(ДеревоСтраницОтчета, НомерПриложения);
	КонецЦикла;
	
	Для Каждого НомерПриложения Из ПриложенияСрасчетами2019() Цикл
		ДобавитьРасчетКПриложению(ДеревоСтраницОтчета, НомерПриложения);
	КонецЦикла;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция КоличествоРазделов2019()
	
	Возврат 2;
	
КонецФункции

Функция КоличествоПриложений2019()
	
	Возврат 8;
	
КонецФункции

Функция ПриложенияСрасчетами2019()
	
	ПриложенияСрасчетами = Новый Массив;
	ПриложенияСрасчетами.Добавить(1);
	ПриложенияСрасчетами.Добавить(5);
	
	Возврат ПриложенияСрасчетами;
	
КонецФункции

Функция ИмяФайлаСхемы2019(НомерВерсии = 1)
	
	Возврат СтрШаблон("NO_NDFL3_1_033_00_05_13_%1.xsd", Формат(НомерВерсии, "ЧЦ=2; ЧВН="));
	
КонецФункции

Функция КодыВидовДоходовРФ2019()
	
	КодыВидовДоходов = Новый Структура;
	КодыВидовДоходов.Вставить("ПродажаНедвижимости", "01");
	КодыВидовДоходов.Вставить("ПродажаНедвижимостиПоКадастровойСтоимости", "02");
	КодыВидовДоходов.Вставить("ПродажаИмущества", "03");
	КодыВидовДоходов.Вставить("ОперацииСЦеннымиБумагами", "04");
	КодыВидовДоходов.Вставить("СдачаИмуществаВАренду", "05");
	КодыВидовДоходов.Вставить("Подарок", "06");
	КодыВидовДоходов.Вставить("ОплатаТруда", "07");
	КодыВидовДоходов.Вставить("ОплатаТрудаНалогНеУдержанАгентом", "08");
	КодыВидовДоходов.Вставить("Дивиденды", "09");
	КодыВидовДоходов.Вставить("ИнойДоходОтИсточникаРФ", "10");
	
	Возврат КодыВидовДоходов;
	
КонецФункции

Функция КодыВидовДоходовЗаПределамиРФ2019()
	
	КодыВидовДоходовЗаПределамиРФ = Новый Структура;
	КодыВидовДоходовЗаПределамиРФ.Вставить("ПрибыльКИК", "21");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Дивиденды", "22");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Проценты", "23");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Роялти", "24");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Иной", "32");
	
	Возврат КодыВидовДоходовЗаПределамиРФ;
	
КонецФункции

Функция КодыВидовПредпринимательскойДеятельности2019()
	
	КодыВидовПредпринимательскойДеятельности = Новый Структура;
	КодыВидовПредпринимательскойДеятельности.Вставить("ПредпринимательскаяДеятельность", "01");
	КодыВидовПредпринимательскойДеятельности.Вставить("НотариальнаяДеятельность", "02");
	КодыВидовПредпринимательскойДеятельности.Вставить("АдвокатскаяДеятельность", "03");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьАрбитражногоУправляющего", "04");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьГлавыКФХ", "05");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьОценщика", "06");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьПатентногоПоверенного", "07");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьМедиатора", "08");
	КодыВидовПредпринимательскойДеятельности.Вставить("ИнаяДеятельность", "09");
	
	Возврат КодыВидовПредпринимательскойДеятельности;
	
КонецФункции

Функция КодыПризнакаНалогоплательщикаДляИмущественногоВычета2019()
	
	КодыНалогоплательщика = Новый Структура;
	КодыНалогоплательщика.Вставить("Собственник", "01");
	КодыНалогоплательщика.Вставить("СобственникПенсионер", "11");
	КодыНалогоплательщика.Вставить("СупругСобственника", "02");
	КодыНалогоплательщика.Вставить("СупругСобственникаПенсионер", "12");
	КодыНалогоплательщика.Вставить("Родитель", "03");
	КодыНалогоплательщика.Вставить("РодительПенсионер", "04");
	КодыНалогоплательщика.Вставить("СобственникСРебенком", "13");
	КодыНалогоплательщика.Вставить("СобственникСРебенкомПенсионер", "14");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенком", "23");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенкомПенсионер", "24");
	
	Возврат КодыНалогоплательщика;
	
КонецФункции

Функция КодыВидовОперацийСЦеннымиБумагами2019()
	
	КодыВидовОпераций = Новый Структура;
	
	// Не учитываемые на индивидуальном инвестиционном счете
	КодыВидовОпераций.Вставить("ЦенныеБумагиНаОрганизованномРынке", "01");
	КодыВидовОпераций.Вставить("ЦенныеБумагиПрекратившиеОбращение", "03");
	КодыВидовОпераций.Вставить("ЦенныеБумагиНаПрочихРынках", "04");
	КодыВидовОпераций.Вставить("ПФИсЦенныхБумагНаОрганизованномРынке", "06");
	КодыВидовОпераций.Вставить("ПФИсТоваровНаОрганизованномРынке", "07");
	КодыВидовОпераций.Вставить("ПФИнаПрочихРынках", "08");
	КодыВидовОпераций.Вставить("РЕПО", "10");
	КодыВидовОпераций.Вставить("Займы", "12");
	КодыВидовОпераций.Вставить("ПрочиеОперации", "15");
	
	// Учитываемые на индивидуальном инвестиционном счете
	КодыВидовОпераций.Вставить("ЦенныеБумагиНаОрганизованномРынкеИИС", "16");
	КодыВидовОпераций.Вставить("ЦенныеБумагиПрекратившиеОбращениеИИС", "18");
	КодыВидовОпераций.Вставить("ЦенныеБумагиНаПрочихРынкахИИС", "19");
	КодыВидовОпераций.Вставить("ПФИсЦенныхБумагНаОрганизованномРынкеИИС", "21");
	КодыВидовОпераций.Вставить("ПФИсТоваровНаОрганизованномРынкеИИС", "22");
	КодыВидовОпераций.Вставить("ПФИнаПрочихРынкахИИС", "23");
	КодыВидовОпераций.Вставить("РЕПОнаИИС", "25");
	КодыВидовОпераций.Вставить("ЗаймыИИС", "27");
	КодыВидовОпераций.Вставить("ПрочиеОперацииИИС", "30");
	
	// Убытки прошлых лет
	КодыВидовОпераций.Вставить("УбыткиПоЦеннымБумагам", "31");
	КодыВидовОпераций.Вставить("УбыткиПоПФИ", "32");
	КодыВидовОпераций.Вставить("УбыткиПоЦеннымБумагамНаИИС", "34");
	КодыВидовОпераций.Вставить("УбыткиПоПФИнаИИС", "35");
	
	Возврат КодыВидовОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли