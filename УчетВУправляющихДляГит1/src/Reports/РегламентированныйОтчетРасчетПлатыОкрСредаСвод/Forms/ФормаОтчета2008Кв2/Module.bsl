&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
		
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2008Кв2";
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.Тип20_10             = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 10));
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы1     = "П0000100010";
	СтруктураРеквизитовФормы.мИдГруппы2     = "П0000200010";
	СтруктураРеквизитовФормы.мИдГруппы3     = "П0000300010";
	СтруктураРеквизитовФормы.мИдГруппы4     = "П0000400010";
	СтруктураРеквизитовФормы.мИдГруппы5     = "П0000500010";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1     = 1; //(16)
	КолИсхСтрокИдГруппы2     = 1; //(16)
	КолИсхСтрокИдГруппы3     = 1; //(16)
	КолИсхСтрокИдГруппы4     = 1; //(16)
	КолИсхСтрокИдГруппы5     = 1; //(16)
	
	КолКолонокИдГруппы1     = 20;
	КолКолонокИдГруппы2     = 10;
	КолКолонокИдГруппы3     = 19;
	КолКолонокИдГруппы4     = 14;
	КолКолонокИдГруппы5     = 13;
	
	СтруктураДанныхТитульный = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
				
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,     СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,     СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,     СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     СтруктураРеквизитовФормы.мИдГруппы5);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Расчет",      "ТаблицаСтраницыРасчет");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1",     "ТаблицаСтраницыРаздела1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2",     "ТаблицаСтраницыРаздела2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3",     "ТаблицаСтраницыРаздела3");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел4",     "ТаблицаСтраницыРаздела4");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел5",     "ТаблицаСтраницыРаздела5");

	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,    КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,    КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,    КолИсхСтрокИдГруппы3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,    КолИсхСтрокИдГруппы4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,    КолИсхСтрокИдГруппы5);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,     КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,     КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,     КолКолонокИдГруппы3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     КолКолонокИдГруппы4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     КолКолонокИдГруппы5);
		
	ЦветЗаполняетсяТолькоВручную                           = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир                           = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир                        = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную                       = Новый Цвет(255, 255, 192);     // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически                           = Новый Цвет(255, 255, 255);     // Белый, Ввод запрещен

	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мТекстыСтрок = Новый Соответствие;
	мТекстыСтрок.Вставить("1", "Плата за выбросы от стационарного объекта в пределах ПДВ");
	мТекстыСтрок.Вставить("2", "Плата за выбросы от стационарного объекта в пределах ВСВ");
	мТекстыСтрок.Вставить("3", "Плата за сверхлимитные выбросы от стационарного объекта");
	мТекстыСтрок.Вставить("4", "Плата за выбросы от передвижного объекта");
	мТекстыСтрок.Вставить("5", "Плата за сбросы загрязняющих веществ в пределах ПДС");
	мТекстыСтрок.Вставить("6", "Плата за сбросы загрязняющих веществ в пределах ВСС");
	мТекстыСтрок.Вставить("7", "Плата за сверхлимитные сбросы загрязняющих веществ");
	мТекстыСтрок.Вставить("8", "Плата за размещение отходов в пределах установленных лимитов");
	мТекстыСтрок.Вставить("9", "Плата за сверхлимитное размещение отходов");
	
	КолонкиКоэффициентов = Новый Структура;
	КолонкиКоэффициентов.Вставить("П000010001012");
	КолонкиКоэффициентов.Вставить("П000030001011");
	КолонкиКоэффициентов.Вставить("П000050001020");
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "20/08/2012";
		
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = 1110012;
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("Тип20_10");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мТекстыСтрок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ЗначениеКоэффициентаКНормативуПоУмолчанию", 5);
	СтруктураРеквизитовФормы.Вставить("ДатаПодписиДоИзменения");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРасчет.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтрПерваяСтраница = ТаблицаСтраницыРаздела2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтрПерваяСтраница = ТаблицаСтраницыРаздела5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекущейСтраницыПанели);

	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	Если ИмяТекущейСтраницыПанели = "Раздел4" ИЛИ ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		
		Если ИмяТекущейСтраницыПанели = "Раздел4" Тогда
			ИмяДополнительнойСтраницыПанели = "Раздел5";
		Иначе
			ИмяДополнительнойСтраницыПанели = "Раздел4";
		КонецЕсли;
		
		ТекНомерСтраницы = РазделыОтчета.НайтиПоИдентификатору(Элементы.РазделыОтчета.ТекущаяСтрока).КолонкаНомерСтраницыРазделаОтчета;
		
		// Чтобы не осуществлялся вывод в табличный документ при расчете
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "_";
		
		ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяДополнительнойСтраницыПанели);
		ВставитьДополнительнуюСтраницуВДругойРазделНаСервере(ЭтаФорма, ИмяДополнительнойСтраницыПанели);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяТекущейСтраницыПанели Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницыПанели;
		
	КонецЕсли;
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Обл = ТабличныйДокумент.Области.Найти("UID_файла");
	Если Обл <> Неопределено Тогда 
		Обл.Значение = Неопределено;
		ВывестиМакетПрисоединенныеФайлыРазделов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуВДругойРазделНаСервере(Форма, ИмяСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз=РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз<>0 И Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			
			ЗаголовокСтраницы = ИмяСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	// Часть для подстраховки, от старой системы хранения многостраничности
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	КонецЕсли;

	// Найдем активную страницу
	СтрТаблицыСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));

	Для каждого СтрТаблицаСтраницы Из СтрТаблицыСтраницы Цикл
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
	КонецЦикла;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницыПанели));
	
	ТаблицаБлока = ЭтаФорма[ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяСтраницыПанели)];
	ТаблицаБлока.Очистить();
	ТаблицаБлока.Добавить();
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	ОчиститьТабличноеПолеНаСервере(ИмяСтраницыПанели);
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	УстановитьТочностьДляПДВ(ИмяСтраницыПанели);

	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяСтраницыПанели);
	СохранитьДанныеРаздела(ИмяСтраницыПанели, Ложь);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт

	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Расчет
	СтрокаУровня1.ИмяСтраницы                          = "Расчет";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРасчет";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела4
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000040000002";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела5
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела5
	СтрокаУровня1.ИмяСтраницы                          = "Приложения";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",     СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2",     СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3",     СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",     СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",     СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",     СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2",     СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3",     СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",     СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",     СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "Раздел1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		ТекТабличноеПоле = "Раздел2";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы3 Тогда
		ТекТабличноеПоле = "Раздел3";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		ТекТабличноеПоле = "Раздел4";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		ТекТабличноеПоле = "Раздел5";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",    СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2",    СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3",    СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",    СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",    СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",    СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2",    СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3",    СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",    СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",    СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы5;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, мСтруктураПеременных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, мСтруктураПеременных);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Если ИмяРаздела = "Расчет" Тогда
	//	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Если ИмяСтраницы = "Расчет" Тогда
	//	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ПоказатьПериод()

	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");

	ПолеТабличногоДокументаТитульный.Области.ГодОтчета.Значение   = НомерГода;
	ПолеТабличногоДокументаТитульный.Области.НомерКвартала.Значение   = НомерКвартала;

	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	СтрокаСведений = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		СтрокаСведений = "НаимЮЛПол, ТелОрганизации, АдрЮР, ";
	КонецЕсли;

	СтрокаСведений = СтрокаСведений + "ФИОРук, ФИОБух, ТипНП";

	Результат = РегламентированнаяОтчетностьВызовСервера.ЗаполнитьСведенияОбОрганизацииНаСервере(ЭтаФорма, СтрокаСведений);

	ИННКПП = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ");

	ТабличныйДокумент.Области.ИНН1.Значение = ИННКПП.ИННЮЛ;
	ТабличныйДокумент.Области.КПП1.Значение = ИННКПП.КППЮЛ;

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		Если (НЕ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) И (НЕ СтруктураРеквизитовФормы.мДокументВосстановлен) Тогда
						
			Если ДатаПодписи >= '20120101' Тогда	
				КБК = "";
			Иначе
				КБК = "04811201000010000120";
			КонецЕсли;
			
			ТаблицаРасчет = ЭтаФорма[мСтруктураМногостраничныхРазделов["Расчет"]];
			АктСтраницыРасчет = ТаблицаРасчет.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктСтраницыРасчет.Количество() > 0 Тогда
				Данные = АктСтраницыРасчет[0].Данные[0].Значение;
			Иначе
				Данные = ТаблицаРасчет[0].Данные[0].Значение;
			КонецЕсли;
			Если ТипЗнч(Данные) = Тип("Структура") Тогда
				Данные.Вставить("КБК1", КБК);
			КонецЕсли; 

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрЗаменить(Результат.АдрЮР, ",","")) Тогда
			ТабличныйДокумент.Области.АдрЮР.Значение = "";
		Иначе
			ТабличныйДокумент.Области.АдрЮР.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Результат.АдрЮР);
		КонецЕсли;

		Если Результат.ТипНП = 2 Тогда
			
			ТабличныйДокумент.Области.ОргДиректорОбособ.Значение = ТабличныйДокумент.Области.ОргДиректор.Значение;
			ТабличныйДокумент.Области.ОргДиректор.Значение = "";
			ТабличныйДокумент.Области.ОргБухгалтерОбособ.Значение = ТабличныйДокумент.Области.ОргБухгалтер.Значение;
			ТабличныйДокумент.Области.ОргБухгалтер.Значение = "";
			
			ЗаполнитьДатуВЯчейках(ЭтаФорма);
			
		КонецЕсли;

	КонецЕсли;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		Если Результат.ТипНП = 2 Тогда
			ТабличныйДокумент.Области.ОргДиректорОбособ.Значение = ТабличныйДокумент.Области.ОргДиректор.Значение;
			ТабличныйДокумент.Области.ОргДиректор.Значение = "";
			ТабличныйДокумент.Области.ОргБухгалтерОбособ.Значение = ТабличныйДокумент.Области.ОргБухгалтер.Значение;
			ТабличныйДокумент.Области.ОргБухгалтер.Значение = "";
			
			ЗаполнитьДатуВЯчейках(ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ИНН") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КПП") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "РазмерОрганизации") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "Прил") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;	
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Расчет" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КБК1") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ОКАТО1") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + "_" + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(Область.Имя, "Сумма") > 0 Тогда
					
					СтрЗначение = Формат(Область.Значение, СтруктураРеквизитовФормы.мСтрокаФормата + ";ЧГ=0");
					СтрЗначение = ?(СтрЗначение = "-", "", СтрЗначение);
					
					ДлинаЗначения = СтрДлина(СтрЗначение);
					
					Для Ном = 1 По ДлинаЗначения Цикл
						
						Если Ном > 12 Тогда
							Прервать;
						КонецЕсли; 
						
						Поз = 12 - Ном + 1;
						
						МакетПечатнойФормы.Области[Область.Имя + "_" + Поз].Значение = Сред(СтрЗначение, ДлинаЗначения - Ном + 1 , 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел1"
				  ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел2"
				  ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел3"
				  ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел4" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			ОбластьПечатнойФормы = МакетПечатнойФормы.Области.Найти(Область.Имя);
			Если ОбластьПечатнойФормы <> Неопределено Тогда 
				ОбластьПечатнойФормы.ТипЗначения = Область.ТипЗначения;
				ОбластьПечатнойФормы.Значение = Область.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		Если Реквизит.Ключ = "ДатаПодписи" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Расчет" Тогда
				НаименованиеОбласти = "Дата";
				Постфикс = "1";
				Разделитель = Ложь;
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиРук" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиРук";
				Постфикс = "1";
				Разделитель = Ложь;
			Иначе
				НаименованиеОбласти = "ДатаПодписи1";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиРукОбособ" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиРукОбособ";
				Постфикс = "1";
				Разделитель = Ложь;
			Иначе
				НаименованиеОбласти = "ДатаПодписи2";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиБух" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиБух";
				Постфикс = "1";
				Разделитель = Ложь;
			Иначе
				НаименованиеОбласти = "ДатаПодписи3";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиБухОбособ" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиБухОбособ";
				Постфикс = "1";
				Разделитель = Ложь;
			Иначе
				НаименованиеОбласти = "ДатаПодписи4";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиФЛ" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиФЛ";
				Постфикс = "1";
				Разделитель = Ложь;
			Иначе
				НаименованиеОбласти = "ДатаПодписи5";
			КонецЕсли;
		Иначе
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
		КонецЕсли;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Цикл
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение = Реквизит.Значение[Ном - 1];
			КонецЦикла;
			
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", "ПечатнаяФормаОтчета2008Кв2_Титульный");
	СоответствиеРазделовМакетам.Вставить("Расчет",    "ПечатнаяФормаОтчета2008Кв2_Расчет");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   "ПечатнаяФормаОтчета2008Кв2_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   "ПечатнаяФормаОтчета2008Кв2_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",   "ПечатнаяФормаОтчета2008Кв2_Раздел3");
	СоответствиеРазделовМакетам.Вставить("Раздел4",   "ПечатнаяФормаОтчета2008Кв2_Раздел4");
	СоответствиеРазделовМакетам.Вставить("Раздел5",   "ПечатнаяФормаОтчета2008Кв2_Раздел5");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		ОбластьМнгЧасти              = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть");
		ВысотаОбластиМнгЧасти        = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, , ВысотаОбластиМнгЧасти).Области[0].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
				
		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
			
			СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИдГруппы];
		
			ИмяПервойКолонки    = СписокИменКолонокРаздела.Получить(0).Значение;
			ИмяПоследнейКолонки = СписокИменКолонокРаздела.Получить(мСтруктураКолвоКолонокРазделов[ИдГруппы] - 1).Значение;
		
			НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ИмяПервойКолонки    + "_" + КолвоСтрокВПечатнойФорме).Верх;
			НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(ИмяПоследнейКолонки + "_" + КолвоСтрокВПечатнойФорме).Низ;
			
			ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
									
			Для Ном = 1 По КолвоДопСтрок Цикл
							
				МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
													
			КонецЦикла;
			
			Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
				НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
				Если НЕ НайденнаяОбласть = Неопределено Тогда 
					НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, СтрНайти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
				КонецЕсли;
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок - 1 Цикл
				
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
						
		КонецЕсли;
						
	КонецЕсли;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
		
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");

	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
		
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
		
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы5].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	Если НомерКорректировки = 0 Тогда
		СтруктураДанныхТитульный.Вставить("НомКоррект", "");
	КонецЕсли;
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляются листы, образовавшиеся после дополнения многострочных частей пустыми строками
	// до количества по форме приказа (когда строки многострочной части не поместились на одном
	// листе), в которых не заполнен ни один показатель многострочной части.
	УдалитьЛистыСНезаполненнымиДопСтроками();
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы5].Загрузить(СохрТЗМногострочнойГруппы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	СтруктураДанныхТитульный.Вставить("НомКоррект", Строка(НомерКорректировки));
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УдалитьЛистыСНезаполненнымиДопСтроками()
	
	РазмерСписка = СтруктураРеквизитовФормы.мПечатныеФормы.Количество();
	
	Если РазмерСписка <= 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Индекс = РазмерСписка - 1;
	
	Пока Индекс >= 1 Цикл
		
		ТекЭлемСписка  = СтруктураРеквизитовФормы.мПечатныеФормы[Индекс];
		ПредЭлемСписка = СтруктураРеквизитовФормы.мПечатныеФормы[Индекс - 1];
		
		Если ПредЭлемСписка.Представление = ТекЭлемСписка.Представление Тогда
			
			Если ТекЭлемСписка.Представление = "Раздел 1" Тогда
				
				Если НЕ ЭтотЛистЗаполнен(ТекЭлемСписка.Значение, "П0000100010") Тогда
					
					СтруктураРеквизитовФормы.мПечатныеФормы.Удалить(ТекЭлемСписка);
					
					Индекс = Индекс - 1;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ТекЭлемСписка.Представление = "Раздел 2" Тогда
				
				Если НЕ ЭтотЛистЗаполнен(ТекЭлемСписка.Значение, "П0000200010") Тогда
					
					СтруктураРеквизитовФормы.мПечатныеФормы.Удалить(ТекЭлемСписка);
					
					Индекс = Индекс - 1;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ТекЭлемСписка.Представление = "Раздел 3" Тогда
				
				Если НЕ ЭтотЛистЗаполнен(ТекЭлемСписка.Значение, "П0000300010") Тогда
					
					СтруктураРеквизитовФормы.мПечатныеФормы.Удалить(ТекЭлемСписка);
					
					Индекс = Индекс - 1;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ТекЭлемСписка.Представление = "Раздел 4" Тогда
				
				Если НЕ ЭтотЛистЗаполнен(ТекЭлемСписка.Значение, "П0000400010") Тогда
					
					СтруктураРеквизитовФормы.мПечатныеФормы.Удалить(ТекЭлемСписка);
					
					Индекс = Индекс - 1;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ТекЭлемСписка.Представление = "Раздел 4 лист 2" Тогда
				
				Если НЕ ЭтотЛистЗаполнен(ТекЭлемСписка.Значение, "П0000500010") Тогда
					
					СтруктураРеквизитовФормы.мПечатныеФормы.Удалить(ТекЭлемСписка);
					
					Индекс = Индекс - 1;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Конецесли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтотЛистЗаполнен(ТаблДок, ПодстрокаПоиска)
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Лев(Обл.Имя, 11) = ПодстрокаПоиска И СтрНайти(Обл.Имя, "_") > 0 Тогда
			
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН               = Новый Массив(12);
	МассивКПП               = Новый Массив(9);
	МассивДатаПодписи       = Новый Массив(8);
	МассивДатаПодписиПустой = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = "00" + СтрИНН;
		КонецЕсли;
			
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
		Для Ном = 1 По 8 Цикл
			
			МассивДатаПодписиПустой[Ном - 1] = "";
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН",                  МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП",                  МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи",          МассивДатаПодписи);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук",       МассивДатаПодписи);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРукОбособ", МассивДатаПодписи);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух",       МассивДатаПодписи);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБухОбособ", МассивДатаПодписи);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиФЛ",        МассивДатаПодписи);
	
	Область = ИсходныйМакет.Области.Найти("ОргДиректор");
	Если НЕ Область = Неопределено Тогда
		Если ПустаяСтрока(Область.Значение) Тогда
			ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук", МассивДатаПодписиПустой);
		КонецЕсли; 
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ОргДиректорОбособ");
	Если НЕ Область = Неопределено Тогда
		Если ПустаяСтрока(Область.Значение) Тогда
			ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРукОбособ", МассивДатаПодписиПустой);
		КонецЕсли; 
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ОргБухгалтер");
	Если НЕ Область = Неопределено Тогда
		Если ПустаяСтрока(Область.Значение) Тогда
			ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух", МассивДатаПодписиПустой);
		КонецЕсли; 
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ОргБухгалтерОбособ");
	Если НЕ Область = Неопределено Тогда
		Если ПустаяСтрока(Область.Значение) Тогда
			ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБухОбособ", МассивДатаПодписиПустой);
		КонецЕсли; 
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИностранноеФЛ");
	Если НЕ Область = Неопределено Тогда
		Если ПустаяСтрока(Область.Значение) Тогда
			ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиФЛ", МассивДатаПодписиПустой);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НомКоррект", ТабличныйДокумент.Области.НомКоррект.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(СтруктураДанныхТитульный.НомКоррект)) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомКоррект);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
							
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
							
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ДанныеФайлов", ДанныеФайлов.Получить());
	СписокСохранения.Вставить("ДанныеФайловРазделов", ДанныеФайловРазделов.Получить());
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);

	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Приложения" Тогда
			Продолжить;
		КонецЕсли;
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Приложения" Тогда
			Если ДанныеФайлов = Неопределено Тогда 
				ДанныеФайлов = Новый ХранилищеЗначения(Новый Массив);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем ДанныеФайловВрем;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если ДеревоНастройкиСтраниц.Строки.Найти("Приложения") = Неопределено Тогда 
		СтрокаУровня1 = ДеревоНастройкиСтраниц.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы              = "Приложения";
		СтрокаУровня1.Представление            = "Приложения";
		СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
		СтрокаУровня1.ВыводНаПечать            = 0;
		СтрокаУровня1.ПоказатьСтраницу         = 1;
		СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
		// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ДанныеФайлов", ДанныеФайловВрем);
	Если ТипЗнч(ДанныеФайловВрем) = Тип("Массив") Тогда 
		ДанныеФайлов = Новый ХранилищеЗначения(ДанныеФайловВрем);
	Иначе
		ДанныеФайлов = Новый ХранилищеЗначения(Новый Массив);
	КонецЕсли;
	
	СписокСохранения.Свойство("ДанныеФайловРазделов", ДанныеФайловВрем);
	Если ТипЗнч(ДанныеФайловВрем) = Тип("Соответствие") Тогда 
		ДанныеФайловРазделов = Новый ХранилищеЗначения(ДанныеФайловВрем);
	Иначе
		ДанныеФайловРазделов = Новый ХранилищеЗначения(Новый Соответствие);
	КонецЕсли;

	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Приложения" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ВосстановитьСведенияРазделовИзЛистовСтарогоОбразца();
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			СтруктураДанныхТитульный.ИНН1 = СтрЗаменить(СтруктураДанныхТитульный.ИНН1, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРазделовИзЛистовСтарогоОбразца()
	
	НужноОбновлятьТаблицуВариантовЗаполнения = Ложь;
	
	Для Каждого ЭлТаблицаРаздела Из мСтруктураМногостраничныхРазделов Цикл
		
		Если ЭлТаблицаРаздела.Ключ = "Раздел5" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтраницаРаздела Из ЭтаФорма[ЭлТаблицаРаздела.Значение] Цикл
			
			СтраницаРаздела.АктивнаяСтраница = Ложь;
			
			ПоказателиТаблПоле = СтраницаРаздела.Данные[0].Значение;
			СтруктураДанных    = СтраницаРаздела.Данные[0].Значение;

			Для Каждого Показатель Из ПоказателиТаблПоле Цикл
				
				ИмяПоказателя = Показатель.Ключ;
				
				Если ЭлТаблицаРаздела.Ключ = "Расчет" Тогда
					
					Если ИмяПоказателя = "КБК1_1" Тогда
						СтруктураДанных.Вставить("КБК1");
						Для Ном = 1 По 20 Цикл
							СтруктураДанных.КБК1 = СокрЛП(СтруктураДанных.КБК1) + ПоказателиТаблПоле["КБК1_" + Ном];
							СтруктураДанных.Удалить("КБК1_" + Ном);
						КонецЦикла;
					ИначеЕсли ИмяПоказателя = "ОКАТО1_1" Тогда
						СтруктураДанных.Вставить("ОКАТО1");
						Для Ном = 1 По 11 Цикл
							СтруктураДанных.ОКАТО1 = СокрЛП(СтруктураДанных.ОКАТО1) + ПоказателиТаблПоле["ОКАТО1_" + Ном];
							СтруктураДанных.Удалить("ОКАТО1_" + Ном);
						КонецЦикла;
						
					ИначеЕсли ИмяПоказателя = "СуммаБезЛьгот1_1" Тогда
						СтруктураДанных.Вставить("СуммаБезЛьгот1");
						СтрСуммаБезЛьгот1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаБезЛьгот1 = СокрЛП(СтрСуммаБезЛьгот1) + ПоказателиТаблПоле["СуммаБезЛьгот1_" + Ном];
							СтруктураДанных.Удалить("СуммаБезЛьгот1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаБезЛьгот1 = ?(ПустаяСтрока(СтрСуммаБезЛьгот1), 0, Число(СтрСуммаБезЛьгот1));
						
						НужноОбновлятьТаблицуВариантовЗаполнения = Истина;
						
					ИначеЕсли ИмяПоказателя = "Сумма031_1" Тогда
						Для НомПок = 1 По 9 Цикл
							СтруктураДанных.Вставить("Сумма03" + НомПок);
							СтрСумма = "";
							Для Ном = 1 По 12 Цикл
								СтрСумма = СокрЛП(СтрСумма) + ПоказателиТаблПоле["Сумма03" + НомПок + "_" + Ном];
								СтруктураДанных.Удалить("Сумма03" + НомПок + "_" + Ном);
							КонецЦикла;
							СтруктураДанных["Сумма03" + НомПок] = ?(ПустаяСтрока(СтрСумма), 0, Число(СтрСумма));
						КонецЦикла;
						
						НужноОбновлятьТаблицуВариантовЗаполнения = Истина;
						
					ИначеЕсли ИмяПоказателя = "СуммаЗачет1_1" Тогда
						СтруктураДанных.Вставить("СуммаЗачет1");
						СтрСуммаЗачет1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаЗачет1 = СокрЛП(СтрСуммаЗачет1) + ПоказателиТаблПоле["СуммаЗачет1_" + Ном];
							СтруктураДанных.Удалить("СуммаЗачет1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаЗачет1 = ?(ПустаяСтрока(СтрСуммаЗачет1), 0, Число(СтрСуммаЗачет1));
					ИначеЕсли ИмяПоказателя = "СуммаЛьготОргСоц1_1" Тогда
						СтруктураДанных.Вставить("СуммаЛьготОргСоц1");
						СтрСуммаЛьготОргСоц1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаЛьготОргСоц1 = СокрЛП(СтрСуммаЛьготОргСоц1) + ПоказателиТаблПоле["СуммаЛьготОргСоц1_" + Ном];
							СтруктураДанных.Удалить("СуммаЛьготОргСоц1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаЛьготОргСоц1 = ?(ПустаяСтрока(СтрСуммаЛьготОргСоц1), 0, Число(СтрСуммаЛьготОргСоц1));
					ИначеЕсли ИмяПоказателя = "СуммаЛьготОрг1_1" Тогда
						СтруктураДанных.Вставить("СуммаЛьготОрг1");
						СтрСуммаЛьготОрг1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаЛьготОрг1 = СокрЛП(СтрСуммаЛьготОрг1) + ПоказателиТаблПоле["СуммаЛьготОрг1_" + Ном];
							СтруктураДанных.Удалить("СуммаЛьготОрг1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаЛьготОрг1 = ?(ПустаяСтрока(СтрСуммаЛьготОрг1), 0, Число(СтрСуммаЛьготОрг1));
					ИначеЕсли ИмяПоказателя = "СуммаПлат1_1" Тогда
						СтруктураДанных.Вставить("СуммаПлат1");
						СтрСуммаПлат1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаПлат1 = СокрЛП(СтрСуммаПлат1) + ПоказателиТаблПоле["СуммаПлат1_" + Ном];
							СтруктураДанных.Удалить("СуммаПлат1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаПлат1 = ?(ПустаяСтрока(СтрСуммаПлат1), 0, Число(СтрСуммаПлат1));
					КонецЕсли;
						
				Иначе
					
					Если ИмяПоказателя = "ОКАТО1" Тогда
						СтруктураДанных.Вставить("ОКАТО");
						Для Ном = 1 По 11 Цикл
							СтруктураДанных.ОКАТО = СокрЛП(СтруктураДанных.ОКАТО) + ПоказателиТаблПоле["ОКАТО" + Ном];
							СтруктураДанных.Удалить("ОКАТО" + Ном);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Если НужноОбновлятьТаблицуВариантовЗаполнения Тогда
	
		ОбновитьВариантыЗаполнения();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();
				
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц
	
	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ЕстьИзменения = Ложь;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;
						
						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					// КопироватьДанныеФормы(ЭлементМассива,ТаблДляЦикла);
					
					МассивДляУдаления = Новый Массив;
					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокаВЭлементеМассива.Количество() > 0 Тогда
								СтрокаВЭлементеМассива = СтрокаВЭлементеМассива[0];
								МассивДляУдаления.Добавить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаВЭлементе Из МассивДляУдаления Цикл
						ЭлементМассива.Удалить(СтрокаВЭлементе);
					КонецЦикла; 
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	мСтруктураПеременных = Новый Структура;

	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если НЕ БезОткрытияФормы Тогда
		
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("КБК_2012Кв1");
		ЗагрузитьПоказателиИзМакета("КБК_2013_05_21");
		ЗагрузитьПоказателиИзМакета("РасположениеОбъекта");
		ЗагрузитьПоказателиИзМакета("ДополнительныйКоэф12");
		ЗагрузитьПоказателиИзМакета("КЭЗ_Раздел1");
		ЗагрузитьПоказателиИзМакета("КЭЗ_ВодныеОбъекты");
		ЗагрузитьПоказателиИзМакета("КлассыОпасности");
		ЗагрузитьПоказателиИзМакета("ЭкологическийКлассРаздел2");
		ЗагрузитьПоказателиИзМакета("НормативыПлатыРаздел2");
		ЗагрузитьПоказателиИзМакета("ВредныеВеществаРаздел1");
		ЗагрузитьПоказателиИзМакета("ВредныеВеществаРаздел3");
		ЗагрузитьПоказателиИзМакета("ФКТОРаздел4");
		ЗагрузитьПоказателиИзМакета("ФКТОРаздел4_2014");
		ЗагрузитьПоказателиИзМакета("ФКТОРаздел4_2015");
		ЗагрузитьПоказателиИзМакета("ФКТОРаздел4_2016");
		ЗагрузитьПоказателиИзМакета("КоэфИнфляция");
		ЗагрузитьПоказателиИзМакета("КЭЗ_Раздел4");
		ЗагрузитьПоказателиИзМакета("ДопКоэфТЗ");
		ЗагрузитьПоказателиИзМакета("ОрганыРПН");
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);
	СоздатьПустуюТаблицуДанныхФайловРазделов();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			ТабличныйДокумент.Области.ВидДок.Значение = "V";
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;

	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
	
	КонецЕсли;

	ЗаполнитьПустыеСтруктурыДанных();

	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ДатаПодписиДоИзменения = ТабличныйДокумент.Области.ДатаПодписи.Значение;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "РПН");
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомКоррект.Значение = Строка(НомерКорректировки);
	Если НомерКорректировки = 0 Тогда 
		ТабличныйДокумент.Области.ВидДок.Значение = "V";
		ТабличныйДокумент.Области.Корректировка.Значение = "";
	Иначе
		ТабличныйДокумент.Области.ВидДок.Значение = "";
		ТабличныйДокумент.Области.Корректировка.Значение = "V";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиИзМакета(Знач РазделВМакете)	
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2008Кв2");
	
	ГодОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если РазделВМакете = "КоэфИнфляция" Тогда
		
		Если ГодОтчета >= 2017 Тогда
			РазделВМакете = РазделВМакете + "2017";
		ИначеЕсли ГодОтчета >= 2016 Тогда
			РазделВМакете = РазделВМакете + "2016";
		ИначеЕсли ГодОтчета >= 2015 Тогда
			РазделВМакете = РазделВМакете + "2015";
		ИначеЕсли ГодОтчета >= 2014 Тогда
			РазделВМакете = РазделВМакете + "2014";
		ИначеЕсли ГодОтчета >= 2013 Тогда
			РазделВМакете = РазделВМакете + "2013";
		ИначеЕсли ГодОтчета >= 2012 Тогда
			РазделВМакете = РазделВМакете + "2012";
		ИначеЕсли ГодОтчета >= 2011 Тогда
			РазделВМакете = РазделВМакете + "2011";
		ИначеЕсли ГодОтчета >= 2010 Тогда
			РазделВМакете = РазделВМакете + "2010";
		ИначеЕсли ГодОтчета >= 2009 Тогда
			РазделВМакете = РазделВМакете + "2009";
		ИначеЕсли ГодОтчета >= 2008 Тогда
			РазделВМакете = РазделВМакете + "2008";
		ИначеЕсли ГодОтчета >= 2007 Тогда
			РазделВМакете = РазделВМакете + "2007";
		КонецЕсли;
		
	КонецЕсли;
			
	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе
					
				Если РазделВМакете = "КодыКБК2005" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2005.Добавить();
				ИначеЕсли РазделВМакете = "КБК_2012Кв1" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2012.Добавить();	
				ИначеЕсли РазделВМакете = "КБК_2013_05_21" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2013_05_21.Добавить();	
				ИначеЕсли РазделВМакете = "РасположениеОбъекта" Тогда
					НовСтрока = мРасположениеОбъекта.Добавить();
				ИначеЕсли РазделВМакете = "ДополнительныйКоэф12" Тогда
					НовСтрока = мДополнительныйКоэф12.Добавить();
				ИначеЕсли РазделВМакете = "КЭЗ_Раздел1" Тогда
					НовСтрока = мКЭЗ_Раздел1.Добавить();
				ИначеЕсли РазделВМакете = "КЭЗ_ВодныеОбъекты" Тогда
					НовСтрока = мКЭЗ_ВодныеОбъекты.Добавить();
				ИначеЕсли РазделВМакете = "КлассыОпасности" Тогда
					НовСтрока = мКлассыОпасности.Добавить();
				ИначеЕсли РазделВМакете = "ЭкологическийКлассРаздел2" Тогда
					НовСтрока = мЭкологическийКлассРаздел2.Добавить();
				ИначеЕсли РазделВМакете = "НормативыПлатыРаздел2" Тогда
					НовСтрока = мНормативыПлатыРаздел2.Добавить();
					Кратко = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
					НовСтрока.Кратко = Кратко;
				ИначеЕсли РазделВМакете = "ВредныеВеществаРаздел1" Тогда
					НовСтрока = мВредныеВеществаРаздел1.Добавить();
					Строка110 = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
					Строка120 = СокрП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
					НовСтрока.Строка110 = Строка110;
					НовСтрока.Строка120 = Строка120;
				ИначеЕсли РазделВМакете = "ВредныеВеществаРаздел3" Тогда
					НовСтрока = мВредныеВеществаРаздел3.Добавить();
					Строка110 = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
					Строка120 = СокрП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
					НовСтрока.Строка110 = Строка110;
					НовСтрока.Строка120 = Строка120;
				ИначеЕсли РазделВМакете = "ФКТОРаздел4" Тогда
					НовСтрока = мФКТОРаздел4.Добавить();
				ИначеЕсли РазделВМакете = "ФКТОРаздел4_2014" Тогда
					НовСтрока = мФКТОРаздел4_2014.Добавить();
				ИначеЕсли РазделВМакете = "ФКТОРаздел4_2015" Тогда
					НовСтрока = мФКТОРаздел4_2015.Добавить();
				ИначеЕсли РазделВМакете = "ФКТОРаздел4_2016" Тогда
					НовСтрока = мФКТОРаздел4_2016.Добавить();
				ИначеЕсли Лев(РазделВМакете, СтрДлина("КоэфИнфляция")) = "КоэфИнфляция" Тогда
					НовСтрока = мКоэфИнфляция.Добавить();
				ИначеЕсли РазделВМакете = "КЭЗ_Раздел4" Тогда
					НовСтрока = мКЭЗ_Раздел4.Добавить();
				ИначеЕсли РазделВМакете = "ДопКоэфТЗ" Тогда
					НовСтрока = мДопКоэфТЗ.Добавить();
				ИначеЕсли РазделВМакете = "ОрганыРПН" Тогда
					НовСтрока = мОрганыРПН.Добавить();
					ДиапазонОКАТО = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
					НовСтрока.ДиапазонОКАТО = ДиапазонОКАТО;
				КонецЕсли;

				НовСтрока.Код      = КодПоказателя;
				НовСтрока.Название = Название;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Расчет";
	СтрокаУровня1.Представление            = "Расчет суммы" + Символы.ПС + "платежа";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 4. Лист 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложения";
	СтрокаУровня1.Представление            = "Приложения";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
			
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
			
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
				
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьТочностьДляПДВ(ИмяРаздела)
	
	Перем СтруктураГруппы;
	
	Если ИмяРаздела = "Титульный" ИЛИ ИмяРаздела = "Расчет" Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Тип20_10 = СтруктураРеквизитовФормы.Тип20_10;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ЭтаФорма, ИмяРаздела);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	Для Инд = 1 По СтруктураГруппы.Количество() Цикл
		
		Попытка
			// Раздел 1.
			Если ИмяРаздела = "Раздел1" Тогда
				
				ТабличныйДокумент.Области["П000010001004_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000010001005_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000010001006_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000010001007_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000010001008_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000010001009_" + Строка(Инд)].ТипЗначения = Тип20_10;
				
				// Раздел 2.
			ИначеЕсли ИмяРаздела = "Раздел2" Тогда
				
				ТабличныйДокумент.Области["П000020001003_" + Строка(Инд)].ТипЗначения = Тип20_10;
				
				// Раздел 3.
			ИначеЕсли ИмяРаздела = "Раздел3" Тогда
				
				ТабличныйДокумент.Области["П000030001003_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000030001004_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000030001005_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000030001006_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000030001007_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000030001008_" + Строка(Инд)].ТипЗначения = Тип20_10;
				
				// Раздел 4.
			ИначеЕсли ИмяРаздела = "Раздел4" Тогда
				
				ТабличныйДокумент.Области["П000040001006_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000040001007_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000040001008_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000040001009_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000040001010_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000040001011_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000040001012_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000040001013_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000040001014_" + Строка(Инд)].ТипЗначения = Тип20_10;
				
				// Раздел 5.
			ИначеЕсли ИмяРаздела = "Раздел5" Тогда
				
				ТабличныйДокумент.Области["П000050001015_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000050001016_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000050001017_" + Строка(Инд)].ТипЗначения = Тип20_10;
				ТабличныйДокумент.Области["П000050001018_" + Строка(Инд)].ТипЗначения = Тип20_10;
				
			КонецЕсли;
			
		Исключение
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                                   = Истина;
	Иначе
		Элементы.Обновить.Доступность                                   = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Расчет"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложения" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	Если  НаимРаздела = "Приложения" Тогда
		Возврат;
	КонецЕсли;
	
	// Многостраничные и многострочные разделы.
	//
	Если  НаимРаздела <> "Титульный" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
				
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "-" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетПрисоединенныеФайлы()
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложения"));
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложения");
	
	МассивДД = ДанныеФайлов.Получить();
	Если ТипЗнч(МассивДД) = Тип("Массив") И МассивДД.Количество() > 0 Тогда
		Если МассивДД.Количество() > 1 Тогда 
			ОблДанныеФайла = Макет.Область("ДанныеФайла");
			ТабличныйДокумент.ВставитьОбласть(ОблДанныеФайла, Макет.Область(3,,2*МассивДД.Количество()), ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			Обл = ТабличныйДокумент.Область("УдалитьФайл_1"); Обл.Имя = Неопределено;
			Обл = ТабличныйДокумент.Область("Файл_1"); Обл.Имя = Неопределено;
			
			Для Инд = 0 По МассивДД.Количество() - 1 Цикл
				Обл = ТабличныйДокумент.Область(Инд*2 + 1, 2, Инд*2 + 1, 2); Обл.Имя = "УдалитьФайл_" + Формат((Инд + 1), "ЧГ=");
				Обл = ТабличныйДокумент.Область(Инд*2 + 1, 3, Инд*2 + 1, 3); Обл.Имя = "Файл_" + Формат((Инд + 1), "ЧГ=");
			КонецЦикла;
		КонецЕсли;
		
		Для Инд = 0 По МассивДД.Количество() - 1 Цикл
			Обл = ТабличныйДокумент.Область("Файл_" + Формат((Инд + 1), "ЧГ="));
			Обл.Значение = МассивДД[Инд].Имя;
		КонецЦикла;
	Иначе
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("ДанныеФайла"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьПустуюСтруктуруДанныхФайлаРазделов()
	Возврат Новый Структура("Имя, ДД");
КонецФункции

&НаСервере
Процедура СоздатьПустуюТаблицуДанныхФайловРазделов()
	ДанныеФайловРазделов = Новый ХранилищеЗначения(Новый Соответствие);
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетПрисоединенныеФайлыРазделов()
	ОбластьДоб1 = ТабличныйДокумент.Области.Найти("ДобавитьСканКопиюЗначок");
	ОбластьДоб2 = ТабличныйДокумент.Области.Найти("ДобавитьСканКопию");
	ОбластьДоб3 = ТабличныйДокумент.Области.Найти("UID_файла");
	Если (Не ЗначениеЗаполнено(ОбластьДоб1))
		Или (Не ЗначениеЗаполнено(ОбластьДоб2))
		Или (Не ЗначениеЗаполнено(ОбластьДоб3)) Тогда 
		
		Возврат;
	КонецЕсли;
	
	ДанныеФайловРазделовТаблица = ДанныеФайловРазделов.Получить();
	КЗ = ДанныеФайловРазделовТаблица[ОбластьДоб3.Значение];
	
	Если КЗ = Неопределено Тогда 
		ОбластьДоб1.Текст = "+";
		ОбластьДоб1.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
		ОбластьДоб2.Текст = "Добавить скан-копию документа";
		ОбластьДоб3.Значение = Неопределено;
	Иначе
		ОбластьДоб1.Текст = "х";
		ОбластьДоб1.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
		ОбластьДоб2.Текст = КЗ.Имя;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ИзменитьПризнакАктивностиСтраницы = Истина)
	
	Если ИмяТекРаздела = "Приложения" Тогда
		ВывестиМакетПрисоединенныеФайлы();
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Расчет" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел1"
		  ИЛИ ИмяТекРаздела = "Раздел2"
		  ИЛИ ИмяТекРаздела = "Раздел3"
		  ИЛИ ИмяТекРаздела = "Раздел4"
		  ИЛИ ИмяТекРаздела = "Раздел5" Тогда
		  
		УстановитьТочностьДляПДВ(ИмяТекРаздела);
		  
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Попытка
				
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			Иначе
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Истина;
				Обл.Текст = "Удалить страницу";
			КонецЕсли;
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "-" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
	// Обычные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Приложения" Тогда
		ВывестиМакетПрисоединенныеФайлы();
		Возврат;
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		ВывестиМакетПрисоединенныеФайлыРазделов();
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		УстановитьТочностьДляПДВ(ИмяТекРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Истина;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = Истина;
	ИмяГруппы = "";
	Если ИмяРаздела = "Титульный" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Расчет" Тогда
		МногостраничностьВРазделе = Истина;
	Иначе
		МногостраничностьВРазделе = Истина;
		КолМногострочныхЧастей = 1;
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяРаздела);
	КонецЕсли; 
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	СтруктураГруппы = Неопределено;

	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
							СтруктураГруппы = Форма[СтруктураГруппы];
							
							Если СохранятьМногострКакТЗ Тогда
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела;
							Иначе
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела[ИмяГруппы];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			ЗначПоказателя = ЗначениеПоказателя;
			Если ИмяГруппы = Лев(ИмяПоказателя, 11) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 13);
				СтрИнд = Сред(ИмяПоказателя, 14);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначПоказателя;
				КонецЕсли; 
				Если (Инд > 0) И СтруктураГруппы.Количество() >= Инд Тогда
					СтруктураГруппы[Инд-1][ИмяПок] = ЗначПоказателя;
				КонецЕсли; 
			КонецЕсли;
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначПоказателя);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	ТаблицаГруппы = Неопределено;
	ИмяКолонкиТаблицы = "";
	
	Если НаимРаздела = "Раздел1" Тогда
		ТаблицаГруппы = ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы1]];
		ИмяКолонкиТаблицы = "П000010001012";
	ИначеЕсли НаимРаздела = "Раздел3" Тогда
		ТаблицаГруппы = ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы3]];
		ИмяКолонкиТаблицы = "П000030001011";
	ИначеЕсли НаимРаздела = "Раздел5" Тогда
		ТаблицаГруппы = ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы5]];
		ИмяКолонкиТаблицы = "П000050001020";
	КонецЕсли; 
	
	Если ТаблицаГруппы <> Неопределено Тогда
		Для каждого СтрокаТаблицы Из ТаблицаГруппы Цикл
			ИмяПоказателя = ИмяКолонкиТаблицы + "_" + Формат(ТаблицаГруппы.Индекс(СтрокаТаблицы) + 1, "ЧГ=");
			ТекОбласть = ТабличныйДокумент.Области.Найти(ИмяПоказателя);
			Если ТекОбласть <> Неопределено Тогда
				ТекОбласть.Значение = СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьФайлы()
	ДанныеФайлов = Новый ХранилищеЗначения(Новый Массив);
	ВывестиМакетПрисоединенныеФайлы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОчиститьФайлыРазделов()
	Обл = ТабличныйДокумент.Области.Найти("UID_файла");
	Если Обл <> Неопределено Тогда 
		Разделы = ДанныеФайловРазделов.Получить();
		Если Разделы[Обл.Значение] <> Неопределено Тогда 
			Разделы.Удалить(Обл.Значение);
			Обл.Значение = Неопределено;
			ДанныеФайловРазделов = Новый ХранилищеЗначения(Разделы);
			ВывестиМакетПрисоединенныеФайлыРазделов();
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			НомерКорректировки = 0;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ДатаПодписи = Неопределено;
			ТабличныйДокумент.Области.НомКоррект.Значение = "0";
			ТабличныйДокумент.Области.ВидДок.Значение = "V";
			ТабличныйДокумент.Области.Корректировка.Значение = "";
			ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложения" Тогда
			ОчиститьФайлы();
		Иначе
			ОчиститьФайлыРазделов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаСтраниц;
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли; 
	
	Если ИмяТекущейСтраницы = "" Тогда
		
		Расчет(Форма, "Расчет");
		Расчет(Форма, "Раздел5");
		Расчет(Форма, "Раздел4");
		Расчет(Форма, "Раздел3");
		Расчет(Форма, "Раздел2");
		Расчет(Форма, "Раздел1");
		
	ИначеЕсли НЕ Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницы, ТаблицаСтраниц) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСтраниц = Форма[ТаблицаСтраниц];
	СтрТаблицаСтраницы = ТаблицаСтраниц.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	Если СтрТаблицаСтраницы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АктивнаяСтраница = СтрТаблицаСтраницы[0];
	Данные = АктивнаяСтраница.Данные[0].Значение;
	
	Если ИмяТекущейСтраницы = "Расчет" Тогда

		// Расчет строки 030.
		Данные.СуммаБезЛьгот1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.Сумма031)
		                      + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.Сумма032)
		                      + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.Сумма033)
		                      + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.Сумма034)
		                      + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.Сумма035)
		                      + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.Сумма036)
		                      + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.Сумма037)
		                      + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.Сумма038)
		                      + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.Сумма039);
		
		Данные.СуммаПлат1 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.СуммаБезЛьгот1)
		                       - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.СуммаЗачет1)
		                       - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.СуммаЛьготОргСоц1)
		                       - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.СуммаЛьготОрг1), 0);

		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницы Тогда
		
			Форма.ТабличныйДокумент.Области.СуммаБезЛьгот1.Значение = Данные.СуммаБезЛьгот1;
			Форма.ТабличныйДокумент.Области.СуммаПлат1.Значение = Данные.СуммаПлат1;
		
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницы = "Раздел1" Тогда

		СтруктураГруппы1 = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы1);
		СтруктураГруппы1 = Форма[СтруктураГруппы1];
		
		Счетчик = 0;
		
		СуммаГрафа17 = 0;
		СуммаГрафа18 = 0;
		СуммаГрафа19 = 0;
		СуммаГрафа20 = 0;
		
		Для Каждого Стр Из СтруктураГруппы1 Цикл
			
			ДанныеДопСтрок = АктивнаяСтраница.ДанныеДопСтрок[0].Значение;
			
			СтруктураГруппы1 = ДанныеДопСтрок;
			
			Счетчик = Счетчик + 1;

			// Колонка 7. ПДВ = Мин(Колонка4, Колонка6)
			Стр.П000010001007 = Мин(Стр.П000010001004, Стр.П000010001006);

			// Колонка 8 = // Строка 090 = Мин(6-7, 5)
			Стр.П000010001008 = Мин(Стр.П000010001006 - Стр.П000010001007, Стр.П000010001005);

			// Колонка 9 = Колонка6 - Колонка7 - Колонка8
			Стр.П000010001009 = Стр.П000010001006 - Стр.П000010001007 - Стр.П000010001008;

			Стр.П000010001017 = Стр.П000010001007 * Стр.П000010001010 * Стр.П000010001013 * Стр.П000010001014 * ?(Стр.П000010001015 = 0, 1, Стр.П000010001015) * Стр.П000010001016;
			Стр.П000010001018 = Стр.П000010001008 * Стр.П000010001011 * Стр.П000010001013 * Стр.П000010001014 * ?(Стр.П000010001015 = 0, 1, Стр.П000010001015) * Стр.П000010001016;
			Стр.П000010001019 = Стр.П000010001009 * Стр.П000010001011 * 5 * Стр.П000010001013 * Стр.П000010001014 * ?(Стр.П000010001015 = 0, 1, Стр.П000010001015) * Стр.П000010001016;

			Стр.П000010001020 = Стр.П000010001017
			                  + Стр.П000010001018
			                  + Стр.П000010001019;

			П000010001017 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000010001017);
			П000010001018 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000010001018);
			П000010001019 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000010001019);
			П000010001020 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000010001020);
			
			Если (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницы) И (Форма.ТабличныйДокумент.Области.Найти("П000010001007_" + Формат(Счетчик, "ЧГ=0")) <> Неопределено) Тогда
				
				ОблП000010001007 = Форма.ТабличныйДокумент.Области["П000010001007_" + Формат(Счетчик, "ЧГ=0")];
				Если ОблП000010001007.Значение <> Стр.П000010001007 Тогда
					ОблП000010001007.Значение = Стр.П000010001007;
				КонецЕсли; 
				ОблП000010001008 = Форма.ТабличныйДокумент.Области["П000010001008_" + Формат(Счетчик, "ЧГ=0")];
				Если ОблП000010001008.Значение <> Стр.П000010001008 Тогда
					ОблП000010001008.Значение = Стр.П000010001008;
				КонецЕсли; 
				ОблП000010001009 = Форма.ТабличныйДокумент.Области["П000010001009_" + Формат(Счетчик, "ЧГ=0")];
				Если ОблП000010001009.Значение <> Стр.П000010001009 Тогда
					ОблП000010001009.Значение = Стр.П000010001009;
				КонецЕсли; 
				
				ОблП000010001017 = Форма.ТабличныйДокумент.Области["П000010001017_" + Формат(Счетчик, "ЧГ=0")];
				Если ОблП000010001017.Значение <> П000010001017 Тогда
					ОблП000010001017.Значение = П000010001017;
				КонецЕсли;
				ОблП000010001018 = Форма.ТабличныйДокумент.Области["П000010001018_" + Формат(Счетчик, "ЧГ=0")];
				Если ОблП000010001018.Значение <> П000010001018 Тогда
					ОблП000010001018.Значение = П000010001018;
				КонецЕсли;
				ОблП000010001019 = Форма.ТабличныйДокумент.Области["П000010001019_" + Формат(Счетчик, "ЧГ=0")];
				Если ОблП000010001019.Значение <> П000010001019 Тогда
					ОблП000010001019.Значение = П000010001019;
				КонецЕсли;
				ОблП000010001020 = Форма.ТабличныйДокумент.Области["П000010001020_" + Формат(Счетчик, "ЧГ=0")];
				Если ОблП000010001020.Значение <> П000010001020 Тогда
					ОблП000010001020.Значение = П000010001020;
				КонецЕсли;
				
			КонецЕсли;
			
			СуммаГрафа17 = СуммаГрафа17 + П000010001017;
			СуммаГрафа18 = СуммаГрафа18 + П000010001018;
			СуммаГрафа19 = СуммаГрафа19 + П000010001019;
			СуммаГрафа20 = СуммаГрафа20 + П000010001020;
			
		КонецЦикла;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницы Тогда
			
			Форма.ТабличныйДокумент.Области.П000010002017.Значение = СуммаГрафа17;
			Форма.ТабличныйДокумент.Области.П000010002018.Значение = СуммаГрафа18;
			Форма.ТабличныйДокумент.Области.П000010002019.Значение = СуммаГрафа19;
			Форма.ТабличныйДокумент.Области.П000010002020.Значение = СуммаГрафа20;
			
		КонецЕсли;
	
	ИначеЕсли ИмяТекущейСтраницы = "Раздел2" Тогда

		ДанныеДопСтрок = АктивнаяСтраница.ДанныеДопСтрок[0].Значение;
		
		СтруктураГруппы2 = ДанныеДопСтрок;
		
		Счетчик = 0;
		
		СуммаГрафа10 = 0;
		
		Для Каждого Стр Из СтруктураГруппы2 Цикл
			
			Счетчик = Счетчик + 1;

			Итог10 = Стр.П000020001003 * Стр.П000020001005 * Стр.П000020001006 * Стр.П000020001007 * ?(Стр.П000020001008 = 0, 1, Стр.П000020001008) * Стр.П000020001009;

			Стр.П000020001010 = Итог10;
			
			П000020001010 =  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000020001010);
			
			Если (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницы) И (Форма.ТабличныйДокумент.Области.Найти("П000020001010_" + Формат(Счетчик, "ЧГ=0")) <> Неопределено) Тогда
				
				ОблП000020001010 = Форма.ТабличныйДокумент.Области["П000020001010_" + Формат(Счетчик, "ЧГ=0")];
				Если ОблП000020001010.Значение <> П000020001010 Тогда
					ОблП000020001010.Значение = П000020001010;
				КонецЕсли; 
				
			КонецЕсли;
			
			СуммаГрафа10 = СуммаГрафа10 + П000020001010;
			
		КонецЦикла;

		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницы Тогда
			
			Форма.ТабличныйДокумент.Области.П000020002010.Значение = СуммаГрафа10;
			
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницы = "Раздел3" Тогда
		
		ДанныеДопСтрок = АктивнаяСтраница.ДанныеДопСтрок[0].Значение;
		
		СтруктураГруппы3 = ДанныеДопСтрок;
	
		Счетчик = 0;
		
		СуммаГрафа16 = 0;
		СуммаГрафа17 = 0;
		СуммаГрафа18 = 0;
		СуммаГрафа19 = 0;
		
		Для Каждого Стр Из СтруктураГруппы3 Цикл
			
			Счетчик = Счетчик + 1;
			СчетчикСтр = Формат(Счетчик, "ЧГ=0");

			// Колонка 6 = Мин(3, 5)
			Стр.П000030001006 = Мин(Стр.П000030001003, Стр.П000030001005);

			// Колонка 7 = Мин(5-6, 4)
			Стр.П000030001007 = Мин(Стр.П000030001005 - Стр.П000030001006, Стр.П000030001004);

			// Колонка 8 = 5-6-7
			Стр.П000030001008 = Макс(Стр.П000030001005 - Стр.П000030001006 - Стр.П000030001007,0);

			Стр.П000030001016 = Стр.П000030001006 * Стр.П000030001009 * Стр.П000030001012 * Стр.П000030001013 * Стр.П000030001014 * Стр.П000030001015;
			Стр.П000030001017 = Стр.П000030001007 * Стр.П000030001010 * Стр.П000030001012 * Стр.П000030001013 * Стр.П000030001014 * Стр.П000030001015;
			Стр.П000030001018 = Стр.П000030001008 * Стр.П000030001010 * 5 * Стр.П000030001012 * Стр.П000030001013 * Стр.П000030001014 * Стр.П000030001015;

			Стр.П000030001019 = Стр.П000030001016
			                  + Стр.П000030001017
			                  + Стр.П000030001018;
			
			П000030001016 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000030001016);
			П000030001017 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000030001017);
			П000030001018 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000030001018);
			П000030001019 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000030001019);
			
			Если (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницы) И (Форма.ТабличныйДокумент.Области.Найти("П000030001006_" + СчетчикСтр) <> Неопределено) Тогда
				
				ОблП000030001006 = Форма.ТабличныйДокумент.Области["П000030001006_" + СчетчикСтр];
				Если ОблП000030001006.Значение <> Стр.П000030001006 Тогда
					ОблП000030001006.Значение = Стр.П000030001006;
				КонецЕсли; 
				ОблП000030001007 = Форма.ТабличныйДокумент.Области["П000030001007_" + СчетчикСтр];
				Если ОблП000030001007.Значение <> Стр.П000030001007 Тогда
					ОблП000030001007.Значение = Стр.П000030001007;
				КонецЕсли; 
				ОблП000030001008 = Форма.ТабличныйДокумент.Области["П000030001008_" + СчетчикСтр];
				Если ОблП000030001008.Значение <> Стр.П000030001008 Тогда
					ОблП000030001008.Значение = Стр.П000030001008;
				КонецЕсли; 
				
				ОблП000030001016 = Форма.ТабличныйДокумент.Области["П000030001016_" + СчетчикСтр];
				Если ОблП000030001016.Значение <> П000030001016 Тогда
					ОблП000030001016.Значение = П000030001016;
				КонецЕсли; 
				ОблП000030001017 = Форма.ТабличныйДокумент.Области["П000030001017_" + СчетчикСтр];
				Если ОблП000030001017.Значение <> П000030001017 Тогда
					ОблП000030001017.Значение = П000030001017;
				КонецЕсли; 
				ОблП000030001018 = Форма.ТабличныйДокумент.Области["П000030001018_" + СчетчикСтр];
				Если ОблП000030001018.Значение <> П000030001018 Тогда
					ОблП000030001018.Значение = П000030001018;
				КонецЕсли; 
				ОблП000030001019 = Форма.ТабличныйДокумент.Области["П000030001019_" + СчетчикСтр];
				Если ОблП000030001019.Значение <> П000030001019 Тогда
					ОблП000030001019.Значение = П000030001019;
				КонецЕсли; 
				
			КонецЕсли;
			
			СуммаГрафа16 = СуммаГрафа16 + П000030001016;
			СуммаГрафа17 = СуммаГрафа17 + П000030001017;
			СуммаГрафа18 = СуммаГрафа18 + П000030001018;
			СуммаГрафа19 = СуммаГрафа19 + П000030001019;

		КонецЦикла;

		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницы Тогда
			
			Форма.ТабличныйДокумент.Области.П000030002016.Значение = СуммаГрафа16;
			Форма.ТабличныйДокумент.Области.П000030002017.Значение = СуммаГрафа17;
			Форма.ТабличныйДокумент.Области.П000030002018.Значение = СуммаГрафа18;
			Форма.ТабличныйДокумент.Области.П000030002019.Значение = СуммаГрафа19;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "Раздел5" Тогда
		
		ИндексТекСтраницыРаздела = ТаблицаСтраниц.Индекс(АктивнаяСтраница);
		
		ДанныеДопСтрок = АктивнаяСтраница.ДанныеДопСтрок[0].Значение;
	
		ТаблицаСтраницР4 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел4"]];
		ДанныеДопСтрокР4 = ТаблицаСтраницР4[ИндексТекСтраницыРаздела].ДанныеДопСтрок[0].Значение;
		
		СтруктураГруппы4 = ДанныеДопСтрокР4;
		СтруктураГруппы5 = ДанныеДопСтрок;
		
		Счетчик = 0;

		СуммаГрафа11 = 0;
		СуммаГрафа12 = 0;
		СуммаГрафа13 = 0;
		
		Для Каждого Стр Из СтруктураГруппы5 Цикл
			Счетчик = Счетчик + 1;
			СчетчикСтр = Формат(Счетчик, "ЧГ=0");

			// Колонка 15.
			Стр.П000050001015 = Макс(СтруктураГруппы4[Счетчик - 1].П000040001009
								   + СтруктураГруппы4[Счетчик - 1].П000040001010 
								   - СтруктураГруппы4[Счетчик - 1].П000040001011
								   - СтруктураГруппы4[Счетчик - 1].П000040001012 
								   - СтруктураГруппы4[Счетчик - 1].П000040001013
								   - СтруктураГруппы4[Счетчик - 1].П000040001014, 0);

			// Колонка 25
			Стр.П000050001025 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, (Стр.П000050001016
															-Стр.П000050001018)
															*Стр.П000050001019
															*Стр.П000050001021
															*Стр.П000050001022
															*Стр.П000050001023
															*Стр.П000050001024),0);
			
			// Колонка 26
			Стр.П000050001026 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000050001017
													   *Стр.П000050001019
													   *Стр.П000050001020
													   *Стр.П000050001021
													   *Стр.П000050001022
													   *Стр.П000050001023
													   *Стр.П000050001024);
			
			// Колонка 27
			Стр.П000050001027 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000050001025)
							  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Стр.П000050001026);
							  
			Если (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницы) И (Форма.ТабличныйДокумент.Области.Найти("П000050001015_" + СчетчикСтр) <> Неопределено) Тогда
				
				ОблП000050001015 = Форма.ТабличныйДокумент.Области["П000050001015_" + СчетчикСтр];
				Если ОблП000050001015.Значение <> Стр.П000050001015 Тогда
					ОблП000050001015.Значение = Стр.П000050001015;
				КонецЕсли; 
				ОблП000050001025 = Форма.ТабличныйДокумент.Области["П000050001025_" + СчетчикСтр];
				Если ОблП000050001025.Значение <> Стр.П000050001025 Тогда
					ОблП000050001025.Значение = Стр.П000050001025;
				КонецЕсли; 
				ОблП000050001026 = Форма.ТабличныйДокумент.Области["П000050001026_" + СчетчикСтр];
				Если ОблП000050001026.Значение <> Стр.П000050001026 Тогда
					ОблП000050001026.Значение = Стр.П000050001026;
				КонецЕсли; 
				ОблП000050001027 = Форма.ТабличныйДокумент.Области["П000050001027_" + СчетчикСтр];
				Если ОблП000050001027.Значение <> Стр.П000050001027 Тогда
					ОблП000050001027.Значение = Стр.П000050001027;
				КонецЕсли; 
				
			КонецЕсли;

			СуммаГрафа11 = СуммаГрафа11 + Стр.П000050001025;
			СуммаГрафа12 = СуммаГрафа12 + Стр.П000050001026;
			СуммаГрафа13 = СуммаГрафа13 + Стр.П000050001027;

		КонецЦикла;
		
		Данные.Вставить("П000050002025", СуммаГрафа11);
		Данные.Вставить("П000050002026", СуммаГрафа12);
		Данные.Вставить("П000050002027", СуммаГрафа13);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницы Тогда
			
			Форма.ТабличныйДокумент.Области.П000050002025.Значение = СуммаГрафа11;
			Форма.ТабличныйДокумент.Области.П000050002026.Значение = СуммаГрафа12;
			Форма.ТабличныйДокумент.Области.П000050002027.Значение = СуммаГрафа13;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраниц;
	
	ОбластьUID = ТабличныйДокумент.Области.Найти("UID_файла");
	Если ОбластьUID <> Неопределено Тогда 
		UID = ОбластьUID.Значение;
		ДанныеФайловРазделовСоответствие = ДанныеФайловРазделов.Получить();
		ДанныеФайловРазделовСоответствие[UID] = Неопределено;
		ДанныеФайловРазделов = Новый ХранилищеЗначения(ДанныеФайловРазделовСоответствие);
	КонецЕсли;
	
	//сначала определим индекс страницы раздела 4 или 5
	мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраниц);
	СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	ИндексТекСтраницыРаздела = ЭтаФорма[ТаблицаСтраниц].Индекс(СтрТаблицаСтраницы[0]);

	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;

	Если ИмяТекущейСтраницыПанели = "Раздел4" ИЛИ ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		
		Если ИмяТекущейСтраницыПанели = "Раздел4" Тогда
			ИмяДополнительнойСтраницыПанели = "Раздел5";
		Иначе
			ИмяДополнительнойСтраницыПанели = "Раздел4";
		КонецЕсли;
		
		//затем установим активными страницы доп. разделов
		мСтруктураМногостраничныхРазделов.Свойство(ИмяДополнительнойСтраницыПанели, ТаблицаСтраниц);
		СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Для каждого АктивнаяСтраница Из СтрТаблицаСтраницы Цикл
			АктивнаяСтраница.АктивнаяСтраница = Ложь;
		КонецЦикла; 
		ЭтаФорма[ТаблицаСтраниц].Получить(ИндексТекСтраницыРаздела).АктивнаяСтраница = Истина;
		
		// При РасчетНаСервере() не будут выводиться значения в ТабличныйДокумент
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "_";
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяДополнительнойСтраницыПанели));
		
		ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяДополнительнойСтраницыПанели);
		РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяДополнительнойСтраницыПанели);
		
		УдалитьСтраницуИзДереваСтраницНаСервере(ИмяДополнительнойСтраницыПанели, ИндексТекСтраницыРаздела);

		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
		
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницыПанели;
		
	КонецЕсли;
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	Если ИмяТекущейСтраницыПанели = "Раздел1" ИЛИ ИмяТекущейСтраницыПанели = "Раздел3" ИЛИ ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ВывестиМакетПрисоединенныеФайлыРазделов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуИзДереваСтраницНаСервере(НаимРаздела, ИндексСтраницы)
	
	Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = НаимРаздела Тогда
			Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = ИндексСтраницы + 1 Тогда
					
					НайденныйРаздел.ПолучитьЭлементы().Удалить(НайденнаяСтраница);
					
					НомерСтраницы = 1;
					Для Каждого СтраницаРаздела Из НайденныйРаздел.ПолучитьЭлементы() Цикл
						СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						НомерСтраницы = НомерСтраницы + 1;
					КонецЦикла;
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл <> Неопределено Тогда 
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтаФорма, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		// установим цвет ячейки
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;
		
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
				
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") ИЛИ ПустаяСтрока(КодПоказателя) Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если (ТипДанныхПоказателя = "E" ИЛИ ТипДанныхПоказателя = "Е") И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = Форма[СтруктураГруппы];

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Заголовок = СтрЗаменить(Заголовок, " (сводная форма)", "");
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 1, ОбластьЯчейки.Верх, 1);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 1, ОбластьЯчейкиИсходнойОбласти.Верх, 1);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				Если НЕ Форма.КолонкиКоэффициентов.Свойство(Лев(ОбластьЯчейки.Имя, 13)) Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					ОбластьЯчейки.Значение = Форма.СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
				КонецЕсли;
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	// добавляем строку в дополнительный раздел, если необходимо
	ДопСтраница = "";
	Если ТекущаяСтраница = "Раздел4" Тогда
		ДопСтраница = "Раздел5";
	ИначеЕсли ТекущаяСтраница = "Раздел5" Тогда
		ДопСтраница = "Раздел4";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДопСтраница) Тогда
		
		ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ТекущаяСтраница];
		СтрТаблицыРаздела = Форма[ТаблицаРаздела].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		ИндексТекСтраницыРаздела = Форма[ТаблицаРаздела].Индекс(СтрТаблицыРаздела[0]);
		
		#Если НаКлиенте Тогда
			ИмяДопГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ДопСтраница);
		#Иначе
			ИмяДопГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ДопСтраница);
		#КонецЕсли
		
		СтруктураДопГруппы = Форма[Форма.мСтруктураМногострочныхРазделов[ИмяДопГруппы]];
		
		ТаблицаДопРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ДопСтраница]];
		СтрТаблицыДопРаздела = ТаблицаДопРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Для каждого АктСтраница Из СтрТаблицыДопРаздела Цикл
			АктСтраница.АктивнаяСтраница = Ложь;
		КонецЦикла; 
		
		ТаблицаДопРаздела.Получить(ИндексТекСтраницыРаздела).АктивнаяСтраница = Истина;
		
		ДанныеДопСтрокСписок = ТаблицаДопРаздела.Получить(ИндексТекСтраницыРаздела).ДанныеДопСтрок;
		Если ДанныеДопСтрокСписок.Количество() > 0 Тогда
			
			ДанныеДопСтрок = ДанныеДопСтрокСписок[0].Значение;
			ДобавляемаяДопСтрока = ДанныеДопСтрок.Добавить();
			Если ДопСтраница = "Раздел5" Тогда
				ДобавляемаяДопСтрока.П000050001020 = Форма.СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
			КонецЕсли;
			
			КопироватьДанныеФормы(ДанныеДопСтрок, СтруктураДопГруппы);
			
		КонецЕсли; 
		
		ТаблицаДопРаздела.Получить(ИндексТекСтраницыРаздела).АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;

	Если ИмяТекущейСтраницы = "Раздел1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел2" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел3" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел4" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел5" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки= ИмяПервойЯчейки + "_" + НомУдаляемойСтроки;
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 1, ОбластьСдвинутойЯчейки.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Особенность.
		// Если в многострочном блоке есть колонки, защищенные и содержащие нужное значение,
		// тогда при удалении доп. строк не вставленных, данное значение обнуляется.
		// Поэтому добавим искусственно.
		Если ИмяГруппы = "П0000100010" Тогда
			ДобавляемаяСтрока.П000010001012 = Форма.СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
		ИначеЕсли ИмяГруппы = "П0000300010" Тогда
			ДобавляемаяСтрока.П000030001011 = Форма.СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
		ИначеЕсли ИмяГруппы = "П0000500010" Тогда
			ДобавляемаяСтрока.П000050001020 = Форма.СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
		КонецЕсли;

		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	// удаляем строку из дополнительного раздела, если необходимо
	ДопСтраница = "";
	Если ТекущаяСтраница = "Раздел4" Тогда
		ДопСтраница = "Раздел5";
	ИначеЕсли ТекущаяСтраница = "Раздел5" Тогда
		ДопСтраница = "Раздел4";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДопСтраница) Тогда
		
		ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ТекущаяСтраница];
		СтрТаблицыРаздела = Форма[ТаблицаРаздела].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		ИндексТекСтраницыРаздела = Форма[ТаблицаРаздела].Индекс(СтрТаблицыРаздела[0]);
		
		ДанныеДопСтрокДоб = СтрТаблицыРаздела[0].ДанныеДопСтрок[0].Значение;
		КопироватьДанныеФормы(СтруктураГруппы, ДанныеДопСтрокДоб);
		
		#Если НаКлиенте Тогда
			ИмяДопГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ДопСтраница);
		#Иначе
			ИмяДопГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ДопСтраница);
		#КонецЕсли
		
		СтруктураДопГруппы = Форма[Форма.мСтруктураМногострочныхРазделов[ИмяДопГруппы]];
		
		ТаблицаДопРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ДопСтраница]];
		СтрТаблицыДопРаздела = ТаблицаДопРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Для каждого АктСтраница Из СтрТаблицыДопРаздела Цикл
			АктСтраница.АктивнаяСтраница = Ложь;
		КонецЦикла; 
		
		ТаблицаДопРаздела.Получить(ИндексТекСтраницыРаздела).АктивнаяСтраница = Истина;
		
		ДанныеДопСтрокСписок = ТаблицаДопРаздела.Получить(ИндексТекСтраницыРаздела).ДанныеДопСтрок;
		Если ДанныеДопСтрокСписок.Количество() > 0 Тогда
			
			ДанныеДопСтрок = ДанныеДопСтрокСписок[0].Значение;
			ДанныеДопСтрок.Удалить(НомерСтрокиТаблицы);
			Если ДанныеДопСтрок.Количество() = 0 Тогда
				ДобавляемаяДопСтрока = ДанныеДопСтрок.Добавить();
				Если ДопСтраница = "Раздел5" Тогда
					ДобавляемаяДопСтрока.П000050001020 = Форма.СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
				КонецЕсли;
			КонецЕсли; 
			
			КопироватьДанныеФормы(ДанныеДопСтрок, СтруктураДопГруппы);
			
			Расчет(Форма, ДопСтраница);
			
		КонецЕсли; 
		
		ТаблицаДопРаздела.Получить(ИндексТекСтраницыРаздела).АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	Если СтруктураГруппы.Количество() = 1 Тогда
		ИмяОбл = ?(ИмяГруппы = "П0000500010", "УдалитьСтрокуП000050001015_1", "УдалитьСтроку" + ИмяГруппы + "01_1");
		Обл = ТекТабличноеПоле.Области[ИмяОбл];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЕсли;
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураИменРазделов = Новый Структура();
			Если ИмяСтраницы = "Раздел4" Тогда
				СтруктураИменРазделов.Вставить("Раздел5");
			ИначеЕсли ИмяСтраницы = "Раздел5" Тогда
				СтруктураИменРазделов.Вставить("Раздел4");
			КонецЕсли;
			
			Для каждого ЭлИмяРаздела Из СтруктураИменРазделов Цикл
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ЭлИмяРаздела.Ключ));
				СтруктураРеквизитовФормы.НаимТекущегоРаздела = ЭлИмяРаздела.Ключ;
				
				Для Каждого Страница Из ЭтаФорма[мСтруктураМногостраничныхРазделов[ЭлИмяРаздела.Ключ]] Цикл
					Страница.АктивнаяСтраница = Ложь;
				КонецЦикла;
				
				ЭтаФорма[мСтруктураМногостраничныхРазделов[ЭлИмяРаздела.Ключ]][0].АктивнаяСтраница = Истина;
				
				ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ЭлИмяРаздела.Ключ);
				ЗаполнитьПоказателиЗначениямиПоУмолчанию(ЭлИмяРаздела.Ключ);
				СохранитьДанныеРаздела(ЭлИмяРаздела.Ключ, Истина);
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
				
			КонецЦикла;
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
		Если ИмяСтраницы = "Раздел5" ИЛИ ИмяСтраницы = "Раздел4" Тогда
			
			Если ИмяСтраницы = "Раздел4" Тогда
				ИмяДополнительнойСтраницы = "Раздел5";
			Иначе
				ИмяДополнительнойСтраницы= "Раздел4";
			КонецЕсли;
			
			//сначала определим индекс страницы раздела 4 или 5
			ТаблицаСтраниц = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраниц);
			СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			
			ИндексТекСтраницыРаздела = ЭтаФорма[ТаблицаСтраниц].Индекс(СтрТаблицаСтраницы[0]);
			
			мСтруктураМногостраничныхРазделов.Свойство(ИмяДополнительнойСтраницы, ТаблицаСтраниц);
			
			СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Для каждого АктивнаяСтраница Из СтрТаблицаСтраницы Цикл
				АктивнаяСтраница.АктивнаяСтраница = Ложь;
			КонецЦикла; 
			ЭтаФорма[ТаблицаСтраниц][ИндексТекСтраницыРаздела].АктивнаяСтраница = Истина;
			
			ДопСтраница = ЭтаФорма[ТаблицаСтраниц][ИндексТекСтраницыРаздела];
			ДопСтраница.АктивнаяСтраница = Истина;
			
			ДанныеДопСтрок = ДопСтраница.ДанныеДопСтрок[0].Значение;
			ДанныеДопСтрок.Очистить();
			ДанныеДопСтрок.Добавить();
			ДопСтраница.ДанныеДопСтрок[0].Пометка = Ложь;
			
			РасчетНаСервере(ИмяДополнительнойСтраницы);
			
			Если ИмяДополнительнойСтраницы = "Раздел5" Тогда
				ДанныеДопСтрок[0].П000050001020 = СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
			КонецЕсли;

			ДопСтраница.АктивнаяСтраница = Ложь;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяСтраницы);
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл()
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	Оп = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект);
	
	Попытка
		НачатьПомещениеФайла(Оп, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = "";
	
	Если НЕ (ВРег(Прав(ВыбИмяФайла, 4)) = ".JPEG"
		 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PDF"
		 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".JPG") Тогда
		
		ТекстПредупреждения = НСтр(
			"ru='Файл приложения должен иметь одно из допустимых расширений: JPEG, PDF, JPG!'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ВыбИмяФайла;
	
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = "\" ИЛИ Прав(СтрокаПоиска, 1) = "/" Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ВыбИмяФайла, Каталог);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ПолноеИмяФайла, Каталог)
	ИмяФайла     = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ФайлыДД = ДанныеФайлов.Получить();
	ДанныеФайла = Новый Структура("Имя, ДД", ИмяФайла, ФайлЗагрузкиДвоичныеДанные);
	ФайлыДД.Добавить(ДанныеФайла);
	ДанныеФайлов = Новый ХранилищеЗначения(ФайлыДД);
	ВывестиМакетПрисоединенныеФайлы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура УдалитьФайл(ИмяОбласти)
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ИндФайла = ОписаниеТипа.ПривестиЗначение(СтрЗаменить(ИмяОбласти, "УдалитьФайл_", "")) - 1;
	ФайлыДД = ДанныеФайлов.Получить();
	ФайлыДД.Удалить(ИндФайла);
	ДанныеФайлов = Новый ХранилищеЗначения(ФайлыДД);
	ВывестиМакетПрисоединенныеФайлы();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПрисоединенныхФайлов(Элемент, Область, СтандартнаяОбработка)
	Если Область.Имя = "ДобавитьФайл" Или Область.Имя = "ДобавитьФайлЗначок" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьФайл();
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьФайл_") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьФайл(Область.Имя);
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "Файл_") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		СохранитьНаДискФайл(Область.Имя);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруФайла(ИмяОбласти)
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ИндФайла = ОписаниеТипа.ПривестиЗначение(СтрЗаменить(ИмяОбласти, "Файл_", "")) - 1;
	ФайлыДД = ДанныеФайлов.Получить();
	ДанныеФайла = Новый Структура("ИмяФайла,ХранилищеФайла", ФайлыДД[ИндФайла].Имя, ПоместитьВоВременноеХранилище(ФайлыДД[ИндФайла].ДД));
	Возврат ДанныеФайла;
КонецФункции

&НаКлиенте
Процедура СохранитьНаДискФайл(ИмяОбласти)
	СтруктураХранения = ПолучитьСтруктуруФайла(ИмяОбласти);
	Попытка
		Если Не ЗначениеЗаполнено(СтруктураХранения.ИмяФайла) Тогда 
			Возврат;
		КонецЕсли;
		
		ПолучитьФайл(СтруктураХранения.ХранилищеФайла, СтруктураХранения.ИмяФайла, Истина);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлРаздела()
	ОбластьUID = ТабличныйДокумент.Области.Найти("UID_файла");
	СоответствиеФайлов = ДанныеФайловРазделов.Получить();
	Если СоответствиеФайлов[ОбластьUID.Значение] <> Неопределено Тогда 
		СоответствиеФайлов.Удалить(ОбластьUID.Значение);
	КонецЕсли;
	ОбластьUID.Значение = Неопределено;
	ДанныеФайловРазделов = Новый ХранилищеЗначения(СоответствиеФайлов);
	ВывестиМакетПрисоединенныеФайлыРазделов();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлРаздела()
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	Оп = Новый ОписаниеОповещения("ДобавитьФайлЗавершениеРаздела", ЭтотОбъект);
	
	Попытка
		НачатьПомещениеФайла(Оп, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершениеРаздела(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ВыбИмяФайла;
	
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = "\" ИЛИ Прав(СтрокаПоиска, 1) = "/" Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайлаРаздела(АдресФайла, ВыбИмяФайла, Каталог);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайлаРаздела(АдресФайла, ПолноеИмяФайла, Каталог)
	ОбластьUID = ТабличныйДокумент.Области.Найти("UID_файла");
	СоответствиеФайлов = ДанныеФайловРазделов.Получить();
	
	UIDСтрока = Строка(Новый УникальныйИдентификатор);
	ИмяФайла     = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	Данные = СоздатьПустуюСтруктуруДанныхФайлаРазделов();
	Данные.Имя = ИмяФайла;
	Данные.ДД = ФайлЗагрузкиДвоичныеДанные;
	СоответствиеФайлов[UIDСтрока] = Данные;
	
	ОбластьUID.Значение = UIDСтрока;
	ДанныеФайловРазделов = Новый ХранилищеЗначения(СоответствиеФайлов);
	ВывестиМакетПрисоединенныеФайлыРазделов();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруФайлаРаздела()
	ФайлыРазделов = ДанныеФайловРазделов.Получить();
	UID = ТабличныйДокумент.Области.UID_файла.Значение;
	
	Если ФайлыРазделов[UID] <> Неопределено Тогда 
		ДанныеФайла = Новый Структура("ИмяФайла,ХранилищеФайла", ФайлыРазделов[UID].Имя, ПоместитьВоВременноеХранилище(ФайлыРазделов[UID].ДД));
		Возврат ДанныеФайла;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СохранитьНаДискФайлРаздела()
	СтруктураХранения = ПолучитьСтруктуруФайлаРаздела();
	Попытка
		Если (Не ЗначениеЗаполнено(СтруктураХранения))
			Или (Не ЗначениеЗаполнено(СтруктураХранения.ИмяФайла)) Тогда 
			Возврат;
		КонецЕсли;
		
		ПолучитьФайл(СтруктураХранения.ХранилищеФайла, СтруктураХранения.ИмяФайла, Истина);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПрисоединенныхФайловРазделов(Элемент, Область, СтандартнаяОбработка)
	ОбластьДоб1 = ТабличныйДокумент.Области.Найти("ДобавитьСканКопиюЗначок");
	Если ОбластьДоб1.Текст = "+" Тогда
		ДобавитьФайлРаздела();
	ИначеЕсли ОбластьДоб1.Текст = "х" Тогда
		Если Область.Имя = "ДобавитьСканКопиюЗначок" Тогда
			УдалитьФайлРаздела();
		ИначеЕсли Область.Имя = "ДобавитьСканКопию" Тогда
			СохранитьНаДискФайлРаздела();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "СобратьДанные") > 0 И Область.Текст <> "" Тогда
		Заполнить("");
	КонецЕсли;
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьФайл") > 0 
		Или СтрЧислоВхождений(Область.Имя, "Файл_") > 0 Тогда
		ОбработкаВыбораПрисоединенныхФайлов(Элемент, Область, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ДобавитьСканКопиюЗначок" Или Область.Имя = "ДобавитьСканКопию" Тогда
		ОбработкаВыбораПрисоединенныхФайловРазделов(Элемент, Область, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	// Титульный
	Если СтрНайти(Область.Имя,"ПредставляетсяВ") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Выбор органа Росприроднадзора");
		
		ПараметрыФормы.Вставить("ТаблицаЗначений", мОрганыРПН);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Область.Значение));
		ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиКод", Истина);
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумОрганыРПНЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли (СтрНайти(Область.Имя, "РазмерОрганизации") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Список = Новый СписокЗначений;
		Список.Добавить(0, "Пустое значение");
		Список.Добавить(3, "3 - МКП (микро предприятие)");
		Список.Добавить(4, "4 - МП (малое предприятие)");
		Список.Добавить(5, "5 - СП (среднее предприятие)");
		Список.Добавить(6, "6 - КП (крупное предприятие)");
		
		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Область", Область);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОписаниеОповещения = новый ОписаниеОповещения("ВыбратьИзСпискаРазмерОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		// выдаем стандартный диалог
		Если НайденнаяСтрока = Неопределено Тогда
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
		Иначе
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список,, НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли; 
		
	// Строка 010. КБК.  Расчет
	ИначеЕсли СтрНайти(Область.Имя,"КБК1") > 0 Тогда
		
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", "Выбор КБК");
			
			Если ДатаПодписи >= '20130521' Тогда
				ПараметрыФормы.Вставить("ТаблицаЗначений", мКодыБюджетнойКлассификации2013_05_21);
			ИначеЕсли ДатаПодписи >= '20120101' Тогда
				ПараметрыФормы.Вставить("ТаблицаЗначений", мКодыБюджетнойКлассификации2012);
			Иначе
				ПараметрыФормы.Вставить("ТаблицаЗначений", мКодыБюджетнойКлассификации2005);
			КонецЕсли;
			
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Область.Значение));
			
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКодыБюджетнойКлассификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
	// Раздел 1
	ИначеЕсли (СтрНайти(Область.Имя, "П000010001002_") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда // Колонка 2, наименование

		СтандартнаяОбработка = Ложь;
		
		НомерСтроки = Сред(Область.Имя, 15);
		ПервоначальноеЗначение = Область.Значение;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор загрязняющего вещества");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мВредныеВеществаРаздел1);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", ПервоначальноеЗначение));
		ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиКод", Истина);
		ДополнительныеПараметры = Новый Структура("ИмяРаздела, НомерСтроки, Область, Элемент", ИмяРаздела, НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумВредныеВеществаРаздел1Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли (СтрНайти(Область.Имя, "П000010001013_") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НомерСтроки = Сред(Область.Имя, 15);
		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мКЭЗ_Раздел1);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("НомерСтроки, Область, Элемент", НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКЭЗ_Раздел11Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли (СтрНайти(Область.Имя, "П000010001003") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		Список = Новый СписокЗначений;
		Список.Добавить("","Пустое значение");
		Список.Добавить("Тонна","Тонна");

		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Область", Область);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОписаниеОповещения = новый ОписаниеОповещения("ВыбратьИзСпискаТоннаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		// выдаем стандартный диалог
		Если НайденнаяСтрока = Неопределено Тогда
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
		Иначе
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список,,НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли; 
	
	ИначеЕсли (СтрНайти(Область.Имя, "П000010001014") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мДопКоэфТЗ);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумДопКоэфТЗРаздел1Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли (СтрНайти(Область.Имя, "П000010001015") > 0) И (НЕ  СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мДополнительныйКоэф12);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумДополнительныйКоэф12Раздел1Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли (СтрНайти(Область.Имя, "П000010001016") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=,; ЧГ=");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мКоэфИнфляция);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКоэфИнфляцияРаздел1Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Область.Имя = "ПоПроизТерр" Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.ПоХозСуб.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "ПоХозСуб" Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.ПоПроизТерр.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	// Раздел 2
	ИначеЕсли (СтрНайти(Область.Имя, "П000020001004") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		Список = Новый СписокЗначений;
		Список.Добавить("","Пустое значение");
		Список.Добавить("Тонна","Тонна");
		Список.Добавить("Тысяча куб. метров","Тысяча куб. метров");

		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Область", Область);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОписаниеОповещения = новый ОписаниеОповещения("ВыбратьИзСпискаТоннаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		// выдаем стандартный диалог
		Если НайденнаяСтрока = Неопределено Тогда
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
		Иначе
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список,,НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли; 

	ИначеЕсли (СтрНайти(Область.Имя, "П000020001007") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мДопКоэфТЗ);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумДопКоэфТЗРаздел2Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли (СтрНайти(Область.Имя, "П000020001008") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мДополнительныйКоэф12);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумДополнительныйКоэф12Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли (СтрНайти(Область.Имя, "П000020001002") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НомерСтроки = Сред(Область.Имя, 15);

		ПервоначальноеЗначение = Область.Значение;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Вид топлива");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мНормативыПлатыРаздел2);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("ИмяРаздела, НомерСтроки, Область, Элемент", ИмяРаздела, НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумНормативыПлатыВидТопливаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли (СтрНайти(Область.Имя, "П000020001005_") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		
		НомерСтроки = Сред(Область.Имя, 15);
		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Введите норматив");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мНормативыПлатыРаздел2);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("НомерСтроки, Область, Элемент", НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумНормативыПлатыРаздел2Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли (СтрНайти(Область.Имя, "П000020001006_") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НомерСтроки = Сред(Область.Имя, 15);
		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мКЭЗ_Раздел1);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("НомерСтроки, Область, Элемент", НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКЭЗ_Раздел1Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли (СтрНайти(Область.Имя, "П000020001009_") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=,; ЧГ=");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мКоэфИнфляция);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКоэфИнфляцияРаздел2Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли (СтрНайти(Область.Имя, "П000030001002") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда // Колонка 2
		
		СтандартнаяОбработка = Ложь;
		
		НомерСтроки = Сред(Область.Имя, 15);
		ПервоначальноеЗначение = Область.Значение;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор загрязняющего вещества");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мВредныеВеществаРаздел3);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", ПервоначальноеЗначение));
		ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиКод", Истина);
		
		ДополнительныеПараметры = Новый Структура("ИмяРаздела, НомерСтроки, Область, Элемент", ИмяРаздела, НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумВредныеВеществаРаздел3Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли (СтрНайти(Область.Имя, "П000030001012") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");
		НомерСтроки = Сред(Область.Имя, 15);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мКЭЗ_ВодныеОбъекты);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("НомерСтроки, Область, Элемент", НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКЭЗ_ВодныеОбъектыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли (СтрНайти(Область.Имя, "П000030001013") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мДопКоэфТЗ);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумДопКоэфТЗРаздел3Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли (СтрНайти(Область.Имя, "П000030001015_") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=,; ЧГ=");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мКоэфИнфляция);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКоэфИнфляцияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ((СтрНайти(Область.Имя, "П000040001002") > 0) Или     // Колонки 2 и 3
			   (СтрНайти(Область.Имя, "П000040001003") > 0)) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ДатаПодписи >= '2016-06-27' Тогда
			ПоисковаяТабл = мФКТОРаздел4_2016;
		ИначеЕсли ДатаПодписи >= '2015-08-28' Тогда
			ПоисковаяТабл = мФКТОРаздел4_2015;
		ИначеЕсли ДатаПодписи >= '2014-08-01' Тогда
			ПоисковаяТабл = мФКТОРаздел4_2014;
		Иначе
			ПоисковаяТабл = мФКТОРаздел4;
		КонецЕсли;
		
		Если СтрНайти(Область.Имя, "П000040001002") = 1 Тогда
			Колонка = "Название";
			ПервоначальноеЗначение = Область.Значение;
		Иначе	
			Колонка = "Код";
			ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");
		КонецЕсли;
		
		НомерСтроки = Сред(Область.Имя, 15);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор значения");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    ПоисковаяТабл);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(Колонка, ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("ИмяРаздела, НомерСтроки, Область, Элемент", ИмяРаздела, НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумФКТОРаздел4Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли (СтрНайти(Область.Имя, "П000040001005") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПервоначальноеЗначение = Область.Значение;

		НомерСтроки = Сред(Область.Имя, 15);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор значения");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мКлассыОпасности);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("ИмяРаздела, НомерСтроки, Область, Элемент", ИмяРаздела, НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКлассыОпасностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Область.Имя = "Объект1" Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.Объект2.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "Объект2" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.Объект1.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "Объект3" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.Объект4.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "Объект4" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.Объект3.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли (СтрНайти(Область.Имя, "П000040001004") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		Список = Новый СписокЗначений;
		Список.Добавить("", "Пустое значение");
		Список.Добавить("Тонна", "Тонна");
		
		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Область", Область);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОписаниеОповещения = новый ОписаниеОповещения("ВыбратьИзСпискаТоннаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		// выдаем стандартный диалог
		Если НайденнаяСтрока = Неопределено Тогда
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
		Иначе
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список,,НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли; 
		
	// Раздел 5
	ИначеЕсли (СтрНайти(Область.Имя, "П000050001022") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мДопКоэфТЗ);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумДопКоэфТЗЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли (СтрНайти(Область.Имя, "П000050001021_") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Область.Имя, 15);

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мКЭЗ_Раздел4);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("НомерСтроки, Область, Элемент", НомерСтроки, Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКЭЗ_Раздел4Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли (СтрНайти(Область.Имя, "П000050001023_") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=,; ЧГ=");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мКоэфИнфляция);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораКоэффициентаИнфляцияРаздел5Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли (СтрНайти(Область.Имя, "П000050001024_") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Формат(Область.Значение, "ЧРД=.; ЧГ=");

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    мРасположениеОбъекта);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыборКоэффициентаРасположенияРаздел5Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумОрганыРПНЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), "", Результат.Название);
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаРазмерОрганизацииЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
		
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Значение = СписокЭлемент.Значение;
		Модифицированность = Истина;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаТоннаЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Значение = СписокЭлемент.Значение;
		Модифицированность = Истина;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКодыБюджетнойКлассификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = Результат.Код;
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумВредныеВеществаРаздел1Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатТекст = Результат.Название; // Название.
	
	Результат = мВредныеВеществаРаздел1.НайтиСтроки(Новый Структура("Название", РезультатТекст))[0];
	
	Графа10 = ?(ПустаяСтрока(Результат.Строка110), 0, Число(Результат.Строка110)); // Норматив для 10-й графы.
	Графа11 = ?(ПустаяСтрока(Результат.Строка120), 0, Число(Результат.Строка120)); // Норматив для 11-й графы.
	
	Область.Значение = ?(РезультатТекст = "Пустое значение", "", РезультатТекст);
	
	Если ПустаяСтрока(Область.Значение) Тогда
		ТабличныйДокумент.Области["П000010001003_" + НомерСтроки].Значение = "";
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000010001003_" + НомерСтроки, "");
	Иначе
		ТабличныйДокумент.Области["П000010001003_" + НомерСтроки].Значение = "Тонна";
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000010001003_" + НомерСтроки, "Тонна");
	КонецЕсли;
	
	// Заполним нормативы: 10 и 11.
	ТабличныйДокумент.Области["П000010001010_" + НомерСтроки].Значение = Графа10;
	ТабличныйДокумент.Области["П000010001011_" + НомерСтроки].Значение = Графа11;
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000010001010_" + НомерСтроки, Графа10);
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000010001011_" + НомерСтроки, Графа11);
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКЭЗ_Раздел11Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Зн = Результат.Код;
	Зн = ?(ПустаяСтрока(Зн), 0, Число(Зн));
	ТабличныйДокумент.Области["П000010001013_" + НомерСтроки].Значение = Зн;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумДопКоэфТЗРаздел1Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумДополнительныйКоэф12Раздел1Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКоэфИнфляцияРаздел1Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумДопКоэфТЗРаздел2Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумДополнительныйКоэф12Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумНормативыПлатыВидТопливаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатТекст = Результат.Название;
	РезультатКоэф = Результат.Код;
	
	РезультатТекст = ?(ПустаяСтрока(РезультатКоэф), "", РезультатТекст);
	РезультатКоэф = ?(ПустаяСтрока(РезультатКоэф), 0, Число(РезультатКоэф));
	
	Зн = РезультатКоэф;
	ТабличныйДокумент.Области["П000020001005_" + НомерСтроки].Значение = Зн;
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000020001005_" + НомерСтроки, Зн);
	
	Область.Значение = РезультатТекст;
	
	Если РезультатТекст = "Сжатый природный газ" Тогда
		ТабличныйДокумент.Области["П000020001004_" + НомерСтроки].Значение = "Тысяча куб. метров";
	ИначеЕсли НЕ ПустаяСтрока(РезультатТекст) Тогда
		ТабличныйДокумент.Области["П000020001004_" + НомерСтроки].Значение = "Тонна";
	Иначе
		ТабличныйДокумент.Области["П000020001004_" + НомерСтроки].Значение = "";
	КонецЕсли;
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000020001004_" + НомерСтроки, Зн);
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	// Графа 8
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумНормативыПлатыРаздел2Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	ТабличныйДокумент.Области["П000020001005_" + НомерСтроки].Значение = Результат;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	// Графа 9
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКЭЗ_Раздел1Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	ТабличныйДокумент.Области["П000020001006_" + НомерСтроки].Значение = Результат;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКоэфИнфляцияРаздел2Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	// Раздел 3
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумВредныеВеществаРаздел3Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатТекст = Результат.Название; // Название.
	
	Результат = мВредныеВеществаРаздел3.НайтиСтроки(Новый Структура("Название", РезультатТекст))[0];
	
	Графа9  = Результат.Строка110;  // Норматив для 10-й строки.
	Графа10 = Результат.Строка120;  // Норматив для 11-й строки.
	
	Область.Значение = ?(РезультатТекст = "Пустое значение", "", РезультатТекст);
	
	Если (СтрДлина(Графа9) > 10) Или (СтрДлина(Графа10) > 10) Тогда
		
		ТекстСообщения = "Данный показатель не может быть отражен в отчете. Используйте печатную форму.";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
		Сообщение.Сообщить();
		
		Графа9 = "";
		Графа10 = "";
	КонецЕсли;
	
	Графа9 = ?(ПустаяСтрока(Графа9), 0, Число(Графа9));
	Графа10 = ?(ПустаяСтрока(Графа10), 0, Число(Графа10));
	
	ТабличныйДокумент.Области["П000030001009_" + НомерСтроки].Значение = Графа9;
	ТабличныйДокумент.Области["П000030001010_" + НомерСтроки].Значение = Графа10;
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000030001009_" + НомерСтроки, Графа9);
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000030001010_" + НомерСтроки, Графа10);
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
	// Колонка 13
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКЭЗ_ВодныеОбъектыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Зн = Результат.Код;
	Зн = ?(ПустаяСтрока(Зн), 0, Число(Зн));
	ТабличныйДокумент.Области["П000030001012_" + НомерСтроки].Значение = Зн;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумДопКоэфТЗРаздел3Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКоэфИнфляцияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	// Раздел 4
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумФКТОРаздел4Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатКод = Результат.Код;
	РезультатНазв = Результат.Название;
	РезультатНазв = ?(РезультатНазв = "Пустое значение", "", РезультатНазв);
	ТабличныйДокумент.Области["П000040001002_" + НомерСтроки].Значение = РезультатНазв;
	ТабличныйДокумент.Области["П000040001003_" + НомерСтроки].Значение = РезультатКод;
	
	Если ПустаяСтрока(РезультатКод) Тогда
		ТабличныйДокумент.Области["П000040001004_" + НомерСтроки].Значение = "";
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000040001004_" + НомерСтроки, "");
	Иначе
		ТабличныйДокумент.Области["П000040001004_" + НомерСтроки].Значение = "Тонна";
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000040001004_" + НомерСтроки, "Тонна");
	КонецЕсли;
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000040001002_" + НомерСтроки, РезультатНазв);
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, "П000040001003_" + НомерСтроки, РезультатКод);
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКлассыОпасностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//сначала определим индекс страницы раздела 4
	ТаблицаСтраниц = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраниц);
	СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	ИндексТекСтраницыРаздела = ЭтаФорма[ТаблицаСтраниц].Индекс(СтрТаблицаСтраницы[0]);
	
	//затем установим активной страницу доп. раздела 5
	мСтруктураМногостраничныхРазделов.Свойство("Раздел5", ТаблицаСтраниц);
	СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	Для каждого АктивнаяСтраница Из СтрТаблицаСтраницы Цикл
		АктивнаяСтраница.АктивнаяСтраница = Ложь;
	КонецЦикла; 
	ЭтаФорма[ТаблицаСтраниц].Получить(ИндексТекСтраницыРаздела).АктивнаяСтраница = Истина;
	
	РезСтрока = Результат.Название;
	Если РезСтрока <> "Пустое значение" Тогда
		
		РезСтрока = СтрЗаменить(РезСтрока, " ", Символы.ПС);
		Зн = СтрПолучитьСтроку(РезСтрока, СтрЧислоСтрок(РезСтрока));
		Зн = СтрЗаменить(Зн, ")", "");
		Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(Зн) Тогда
			Зн = Число(Зн);
			ТабличныйДокумент.Области["П000040001005_" + НомерСтроки].Значение = Результат.Код;
			
			СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, "Раздел5", "П000050001019_" + НомерСтроки, Зн);
			
			Расчет(ЭтаФорма, "Раздел5");
			
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Области["П000040001005_" + НомерСтроки].Значение = "";
		
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, "Раздел5", "П000050001019_" + НомерСтроки, 0);
		
		Расчет(ЭтаФорма, "Раздел5");
		
	КонецЕсли;
	
	ЭтаФорма[ТаблицаСтраниц].Получить(ИндексТекСтраницыРаздела).АктивнаяСтраница = Ложь;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумДопКоэфТЗЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКЭЗ_Раздел4Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Зн = Результат.Код;
	Зн = ?(ПустаяСтрока(Зн), 0, Число(Зн));
	ТабличныйДокумент.Области["П000050001021_" + НомерСтроки].Значение = Зн;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКоэффициентаИнфляцияРаздел5Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыборКоэффициентаРасположенияРаздел5Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Результат.Код;
	Область.Значение = Результат;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если Область.Имя = "НомКоррект" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Если НомерКорректировки = 0 Тогда 
			ТабличныйДокумент.Области.ВидДок.Значение = "V";
			ТабличныйДокумент.Области.Корректировка.Значение = "";
		Иначе
			ТабличныйДокумент.Области.ВидДок.Значение = "";
			ТабличныйДокумент.Области.Корректировка.Значение = "V";
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ДатаПодписи" Тогда
		
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизации(Истина);
		ЗаполнитьДатуВЯчейкахНаКлиенте();
		
		ДатаПриказа445 = '2014-08-01';
		
		Если (СтруктураРеквизитовФормы.ДатаПодписиДоИзменения >= ДатаПриказа445 И ДатаПодписи < ДатаПриказа445)
			ИЛИ (СтруктураРеквизитовФормы.ДатаПодписиДоИзменения < ДатаПриказа445 И ДатаПодписи >= ДатаПриказа445) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Для указанной даты подписи действует иной федеральный классификационный каталог отходов.
			|Необходимо перезаполнить графы 2 и 3 раздела 4.'");
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.ДатаПодписиДоИзменения = ДатаПодписи;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКВЭД") > 0 Тогда
		Если НЕ ПустаяСтрока(ЗначПоказателя) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПоказателя) Тогда
			ТекстСообщения = "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!" + Символы.ПС
						   + "Допустимы значения, соответствующие следующим шаблонам:" + Символы.ПС
						   + """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКАТО") > 0
	   И ЗначениеЗаполнено(ЗначПоказателя)
	   И НЕ СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2014-01-01' Тогда
		
		ДлинаЗначения = СтрДлина(СокрЛП(ЗначПоказателя));
		
		Для Инд = ДлинаЗначения + 1 По 11 Цикл
			
			ЗначПоказателя = СокрЛП(ЗначПоказателя) + "0";
			
			Область.Значение = ЗначПоказателя;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
	
	Если ИмяРаздела <> "Титульный" Тогда 
		
		ИмяОбласти = Область.Имя;
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		Если ИмяРаздела = "Раздел4" Тогда
			Если (СтрНайти(ИмяОбласти, "П000040001013") > 0) Или (СтрНайти(ИмяОбласти, "П000040001014") > 0)
			 Или (СтрНайти(ИмяОбласти, "П000040001006") > 0) Или (СтрНайти(ИмяОбласти, "П000040001007") > 0)
			 Или (СтрНайти(ИмяОбласти, "П000040001008") > 0) Или (СтрНайти(ИмяОбласти, "П000040001009") > 0)
			 Или (СтрНайти(ИмяОбласти, "П000040001010") > 0) Или (СтрНайти(ИмяОбласти, "П000040001011") > 0)
			 Или (СтрНайти(ИмяОбласти, "П000040001012") > 0) Тогда

				ТаблицаСтраниц = Неопределено;
				мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраниц);
				СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				ИндексТекСтраницыРаздела = ЭтаФорма[ТаблицаСтраниц].Индекс(СтрТаблицаСтраницы[0]);
				
				мСтруктураМногостраничныхРазделов.Свойство("Раздел5", ТаблицаСтраниц);
				СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				Для каждого АктивнаяСтраница Из СтрТаблицаСтраницы Цикл
					АктивнаяСтраница.АктивнаяСтраница = Ложь;
				КонецЦикла; 
				ЭтаФорма[ТаблицаСтраниц].Получить(ИндексТекСтраницыРаздела).АктивнаяСтраница = Истина;
				
				РасчетНаКлиенте("Раздел5");
				
				ЭтаФорма[ТаблицаСтраниц].Получить(ИндексТекСтраницыРаздела).АктивнаяСтраница = Ложь;
				
			КонецЕсли;
		Иначе
			
			РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТаблицаСтраницыРасчет.Очистить();
	ТаблицаСтраницыРаздела1.Очистить();
	ТаблицаСтраницыРаздела2.Очистить();
	ТаблицаСтраницыРаздела3.Очистить();
	ТаблицаСтраницыРаздела4.Очистить();
	ТаблицаСтраницыРаздела5.Очистить();
	ДанныеФайлов = Новый ХранилищеЗначения(Новый Массив);
	ДанныеФайловРазделов = Новый ХранилищеЗначения(Новый Соответствие);
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьАвто();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвто()
	
	СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
	
	ТаблДанных= Новый ТаблицаЗначений;
	ТаблДанных.Колонки.Добавить("КодОКАТО");
	ТаблДанных.Колонки.Добавить("СуммаПДВ");
	ТаблДанных.Колонки.Добавить("СуммаВСВ");
	ТаблДанных.Колонки.Добавить("СуммаСверхЛимВыброс");
	ТаблДанных.Колонки.Добавить("СуммаПлатыОтПередвижногоОбъекта");
	ТаблДанных.Колонки.Добавить("СуммаПДС");
	ТаблДанных.Колонки.Добавить("СуммаВСС");
	ТаблДанных.Колонки.Добавить("СуммаСверхЛимСброс");
	ТаблДанных.Колонки.Добавить("СуммаУстанЛимит");
	ТаблДанных.Колонки.Добавить("СуммаСверхЛимит");
	
	// Сбор данных по разделу 1. Заполняемые строки в расчете - 031, 032, 033.
	Для каждого Экз Из ЭтаФорма.ТаблицаСтраницыРаздела1 Цикл
				
		Данные = Экз.Данные[0].Значение;
		
		ОКАТО = СокрЛП(Данные.ОКАТО);
		
		Если ПустаяСтрока(ОКАТО) Тогда
			ОКАТО = "";
		КонецЕсли;
		
		НовСтр = ТаблДанных.Добавить();
		НовСтр.КодОКАТО 			= ОКАТО;
		НовСтр.СуммаПДВ 			= Данные.П000010002017;
		НовСтр.СуммаВСВ 			= Данные.П000010002018;
		НовСтр.СуммаСверхЛимВыброс  = Данные.П000010002019;
		
	КонецЦикла;
	
	// Сбор данных по разделу 2. Заполняемые строки в расчете 034.
	Для каждого Экз Из ЭтаФорма.ТаблицаСтраницыРаздела2 Цикл
		
		Данные = Экз.Данные[0].Значение;
		
		ОКАТО = СокрЛП(Данные.ОКАТО);
		Если ПустаяСтрока(ОКАТО) Тогда
			ОКАТО = "";
		КонецЕсли;
		
		НовСтр = ТаблДанных.Добавить();
		НовСтр.КодОКАТО = ОКАТО;
		НовСтр.СуммаПлатыОтПередвижногоОбъекта	= Данные.П000020002010;
		
	КонецЦикла;
	
	// Сбор данных по разделу 3. Заполняемые строки в расчете 035, 036, 037.
	Для каждого Экз Из ЭтаФорма.ТаблицаСтраницыРаздела3 Цикл
		
		Данные = Экз.Данные[0].Значение;
		
		ОКАТО = СокрЛП(Данные.ОКАТО);
		Если ПустаяСтрока(ОКАТО) Тогда
			ОКАТО = "";
		КонецЕсли;
		
		НовСтр = ТаблДанных.Добавить();
		НовСтр.КодОКАТО = ОКАТО;
		НовСтр.СуммаПДС 			= Данные.П000030002016;
		НовСтр.СуммаВСС 			= Данные.П000030002017;
		НовСтр.СуммаСверхЛимСброс 	= Данные.П000030002018;
		
	КонецЦикла;
	
	// Сбор данных по разделу 4 и 5. Заполняемые строки в расчете 038, 039.
	Для каждого Экз Из ЭтаФорма.ТаблицаСтраницыРаздела4 Цикл
		
		Данные = Экз.Данные[0].Значение;
		
		ОКАТО = СокрЛП(Данные.ОКАТО);
		Если ПустаяСтрока(ОКАТО) Тогда
			ОКАТО = "";
		КонецЕсли;
		
		НовСтр = ТаблДанных.Добавить();
		НовСтр.КодОКАТО = ОКАТО;
		
		ИндексСтр = ЭтаФорма.ТаблицаСтраницыРаздела4.Индекс(Экз);
		
		НовСтр.СуммаУстанЛимит = ЭтаФорма.ТаблицаСтраницыРаздела5[ИндексСтр].Данные[0].Значение.П000050002025;
		НовСтр.СуммаСверхЛимит = ЭтаФорма.ТаблицаСтраницыРаздела5[ИндексСтр].Данные[0].Значение.П000050002026;
		
	КонецЦикла;
	
	ТаблДанных.Свернуть("КодОКАТО", "СуммаПДВ, СуммаВСВ, СуммаСверхЛимВыброс, СуммаПлатыОтПередвижногоОбъекта, СуммаПДС, СуммаВСС, СуммаСверхЛимСброс, СуммаУстанЛимит, СуммаСверхЛимит");
		
	ТаблРасчет = ЭтаФорма.ТаблицаСтраницыРасчет;
	ИндексСтраницы = 0;
	Пока НЕ (ИндексСтраницы > (ТаблРасчет.Количество()-1)) Цикл
		СтрокаТаблицы = ТаблРасчет[ИндексСтраницы];
		Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
			ТаблРасчет.Удалить(СтрокаТаблицы);
			ИзменитьТаблицуПараметровАвтозаполнения(-1, "Расчет"); // Удалим варианты заполнения.
			УдалитьСтраницуИзДереваСтраницНаСервере("Расчет", ИндексСтраницы);
			Продолжить;
		КонецЕсли;
		ИндексСтраницы = ИндексСтраницы + 1;
	КонецЦикла;
	
	ОчиститьТабличноеПолеНаСервере("Расчет");
	
	СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
	
	Если ДатаПодписи >= '20120101' Тогда	
		КБК = "";
	Иначе
		КБК = "04811201000010000120";
	КонецЕсли;
	
	ЭтоПервыйЛистРаздела = Истина;
	
	Для Каждого Зап Из ТаблДанных Цикл
		
		Если НЕ ЗначениеЗаполнено(Зап.КодОКАТО) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПервыйЛистРаздела Тогда
			ЭтоПервыйЛистРаздела = Ложь;
		Иначе
			ВставитьДополнительнуюСтраницуНаСервере("Расчет");
		КонецЕсли;
				
		РезультатПоиска = ТаблРасчет.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
					
		Данные = РезультатПоиска[0].Данные[0].Значение;
		
		Данные.КБК1 = КБК;
		ТабличныйДокумент.Области.КБК1.Значение = КБК;
		
		Данные.ОКАТО1 = Зап.КодОКАТО;
		ТабличныйДокумент.Области.ОКАТО1.Значение = Зап.КодОКАТО;
		
		Если ЧислоУмещается(Зап.СуммаПДВ, 12) Тогда
			Данные.Сумма031 = Зап.СуммаПДВ;
			ТабличныйДокумент.Области.Сумма031.Значение = Зап.СуммаПДВ;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаВСВ, 12) Тогда
			Данные.Сумма032 = Зап.СуммаВСВ;
			ТабличныйДокумент.Области.Сумма032.Значение = Зап.СуммаВСВ;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаСверхЛимВыброс, 12) Тогда
			Данные.Сумма033 = Зап.СуммаСверхЛимВыброс;
			ТабличныйДокумент.Области.Сумма033.Значение = Зап.СуммаСверхЛимВыброс;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаПлатыОтПередвижногоОбъекта, 12) Тогда
			Данные.Сумма034 = Зап.СуммаПлатыОтПередвижногоОбъекта;
			ТабличныйДокумент.Области.Сумма034.Значение = Зап.СуммаПлатыОтПередвижногоОбъекта;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаПДС, 12) Тогда
			Данные.Сумма035 = Зап.СуммаПДС;
			ТабличныйДокумент.Области.Сумма035.Значение = Зап.СуммаПДС;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаВСС, 12) Тогда
			Данные.Сумма036 = Зап.СуммаВСС;
			ТабличныйДокумент.Области.Сумма036.Значение = Зап.СуммаВСС;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаСверхЛимСброс, 12) Тогда
			Данные.Сумма037 = Зап.СуммаСверхЛимСброс;
			ТабличныйДокумент.Области.Сумма037.Значение = Зап.СуммаСверхЛимСброс;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаУстанЛимит, 12) Тогда
			Данные.Сумма038 = Зап.СуммаУстанЛимит;
			ТабличныйДокумент.Области.Сумма038.Значение = Зап.СуммаУстанЛимит;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаСверхЛимит, 12) Тогда
			Данные.Сумма039 = Зап.СуммаСверхЛимит;
			ТабличныйДокумент.Области.Сумма039.Значение = Зап.СуммаСверхЛимит;
		КонецЕсли;
		
		РасчетНаСервере("Расчет");
		
	КонецЦикла;
	
	Если ТаблРасчет.Количество() = 0 Тогда
			
		ВставитьДополнительнуюСтраницуНаСервере("Расчет");
			
	КонецЕсли;
	
	СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
	
	РасчетНаСервере("Расчет");;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЧислоУмещается(Знач ЧисловоеЗначение, Знач КритическоеКолвоСимволов)

	ПервоначальноеЗначениеСтр = Формат(ЧисловоеЗначение, СтруктураРеквизитовФормы.мСтрокаФормата + ";ЧГ=0");
	Если СтрДлина(ПервоначальноеЗначениеСтр) > КритическоеКолвоСимволов Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ЭтаФорма.ИмяФормы, "СхемаВыгрузкиXML2008Кв2");
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru='В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ЭтаФорма.ИмяФормы, "СхемаВыгрузкиXML2008Кв2");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ЭтаФорма.ИмяФормы, "СхемаВыгрузкиXML2008Кв2");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ФормироватьПараметры = Истина) Экспорт
	
	СформироватьСтруктуруПоказателей();
	Если ФормироватьПараметры Тогда 
		ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КонецЕсли;
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ЭтаФорма.ИмяФормы, "СхемаВыгрузкиXML2008Кв2");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		КоллекцияСписковВыбора = "";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ТабличныйДокумент";
	
	// проверка показателей раздела
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПредставляетсяВ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан территориальный орган Росприроднадзора!", ИмяПоляТаблДокумента, "ПредставляетсяВ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКПО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код ОКПО организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код вида деятельности по ОКВЭД организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКАТО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код ОКАТО/ОКТМО организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПолнНаименованиеОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано полное наименование организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	СтрПоляТаблДокумента = "ПолеТабличногоДокументаРасчет";
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);       // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Тип, "A") <> 0 ИЛИ СтрНайти(Узел.Тип, "А") <> 0) // Необязательные атрибуты пропускаем (они удаляются только вместе с узлом)
			И (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
			Возврат;
		КонецЕсли;
		
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И РегламентированнаяОтчетность.УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И РегламентированнаяОтчетность.УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ЛистыМногостраничногоРаздела = Неопределено;
				Если Не ПустаяСтрока(Стр.Раздел) И мДанныеОтчета.Свойство(Стр.Раздел, ЛистыМногостраничногоРаздела) Тогда
					Для Каждого Лист Из ЛистыМногостраничногоРаздела Цикл
						ДанныеЛиста = Лист.Данные[0].Значение;
						ДанныеЛиста.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти","");
						Если ДанныеЛиста.Свойство("ОКАТО") И ТипЗнч(ДанныеЛиста.ОКАТО) = Тип("Строка") Тогда 
							ДанныеЛиста.ОКАТО = СокрЛП(ДанныеЛиста.ОКАТО);
						КонецЕсли;
						
						ИндексЛиста = ЛистыМногостраничногоРаздела.Индекс(Лист);
						Если СтрНайти(Стр.Раздел, "Расчет") > 0 Тогда
							мДанныеОтчета.Вставить("ОКАТОФильтр", ДанныеЛиста.ОКАТО1);
							ДобавитьПоказателиВРасчет(ДанныеЛиста, ИндексЛиста);
						ИначеЕсли СтрНайти(Стр.Раздел, "Раздел1") > 0 Тогда
							Если ЗначениеЗаполнено(мДанныеОтчета.ОКАТОФильтр) И (мДанныеОтчета.ОКАТОФильтр <> ДанныеЛиста.ОКАТО)  Тогда
								Продолжить;
							КонецЕсли;
							ДобавитьПоказателиВРаздел1(ДанныеЛиста, ИндексЛиста);
						ИначеЕсли СтрНайти(Стр.Раздел, "Раздел2") > 0 Тогда
							Если ЗначениеЗаполнено(мДанныеОтчета.ОКАТОФильтр) И мДанныеОтчета.ОКАТОФильтр <> ДанныеЛиста.ОКАТО Тогда
								Продолжить;
							КонецЕсли;
							ДобавитьПоказателиВРаздел2(ДанныеЛиста, ИндексЛиста);
						ИначеЕсли СтрНайти(Стр.Раздел, "Раздел3") > 0 Тогда
							Если ЗначениеЗаполнено(мДанныеОтчета.ОКАТОФильтр) И мДанныеОтчета.ОКАТОФильтр <> ДанныеЛиста.ОКАТО Тогда
								Продолжить;
							КонецЕсли;
							ДобавитьПоказателиВРаздел3(ДанныеЛиста, ИндексЛиста);
						ИначеЕсли СтрНайти(Стр.Раздел, "Раздел4") > 0 Тогда
							Если ЗначениеЗаполнено(мДанныеОтчета.ОКАТОФильтр) И мДанныеОтчета.ОКАТОФильтр <> ДанныеЛиста.ОКАТО Тогда
								Продолжить;
							КонецЕсли;
							ДобавитьПоказателиВРаздел4(ДанныеЛиста, ИндексЛиста);
						КонецЕсли;
						
						Если Стр.Многострочность Тогда
							НомСтр = 1;
							ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
							КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
							Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
								УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
								ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСоответствующийСтроке, НомСтр);
								НомСтр = НомСтр + 1;
							КонецЦикла;
						Иначе
							УзелМногостраничногоРаздела = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
							ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелМногостраничногоРаздела);
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				КонецЕсли;
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиВРасчет(ДанныеЛиста, ИндексЛиста)
	
	КоэфЭколЗначДляВоздуха = 0;
	КоэфЭколЗначДляПочвы   = 0;
	
	ЛистыМногостраничногоРаздела1 = Неопределено;
	мДанныеОтчета.Свойство("ПолеТабличногоДокументаРаздел1", ЛистыМногостраничногоРаздела1);
	Для каждого Лист Из ЛистыМногостраничногоРаздела1 Цикл
		ДанныеЛистаРаздела1 = Лист.Данные[0].Значение;
		Если ДанныеЛистаРаздела1.ОКАТО = ДанныеЛиста.ОКАТО1 Тогда
			НомСтр = 1;
			ЗначениеКоэффициента = 0;
			Пока ДанныеЛистаРаздела1.Свойство("П000010001013_" + Формат(НомСтр, "ЧГ="), ЗначениеКоэффициента) Цикл
				КоэфЭколЗначДляВоздуха = Макс(0 + ЗначениеКоэффициента, КоэфЭколЗначДляВоздуха);
				НомСтр = НомСтр + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЛистыМногостраничногоРаздела2 = Неопределено;
	мДанныеОтчета.Свойство("ПолеТабличногоДокументаРаздел2", ЛистыМногостраничногоРаздела2);
	Для каждого Лист Из ЛистыМногостраничногоРаздела2 Цикл
		ДанныеЛистаРаздела2 = Лист.Данные[0].Значение;
		Если ДанныеЛистаРаздела2.ОКАТО = ДанныеЛиста.ОКАТО1 Тогда
			НомСтр = 1;
			ЗначениеКоэффициента = 0;
			Пока ДанныеЛистаРаздела2.Свойство("П000020001006_" + Формат(НомСтр, "ЧГ="), ЗначениеКоэффициента) Цикл
				КоэфЭколЗначДляВоздуха = Макс(0 + ЗначениеКоэффициента, КоэфЭколЗначДляВоздуха);
				НомСтр = НомСтр + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЛистыМногостраничногоРаздела5 = Неопределено;
	мДанныеОтчета.Свойство("ПолеТабличногоДокументаРаздел5", ЛистыМногостраничногоРаздела5);
	
	ЛистыМногостраничногоРаздела4 = Неопределено;
	мДанныеОтчета.Свойство("ПолеТабличногоДокументаРаздел4", ЛистыМногостраничногоРаздела4);
	Для каждого Лист Из ЛистыМногостраничногоРаздела4 Цикл
		ДанныеЛистаРаздела4 = Лист.Данные[0].Значение;
		Если ДанныеЛистаРаздела4.ОКАТО = ДанныеЛиста.ОКАТО1 Тогда
			ИндексЛистаРаздела4 = ЛистыМногостраничногоРаздела4.Индекс(Лист);
			Если ЛистыМногостраничногоРаздела5.Количество() > ИндексЛистаРаздела4 Тогда
				ДанныеЛистаРаздела5 = ЛистыМногостраничногоРаздела5[ИндексЛистаРаздела4].Данные[0].Значение;
				НомСтр = 1;
				ЗначениеКоэффициента = 0;
				Пока ДанныеЛистаРаздела5.Свойство("П000050001021_" + Формат(НомСтр, "ЧГ="), ЗначениеКоэффициента) Цикл
					КоэфЭколЗначДляПочвы = Макс(0 + ЗначениеКоэффициента, КоэфЭколЗначДляПочвы);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЛиста.Вставить("КоэфЭколЗначДляПочвы",   КоэфЭколЗначДляПочвы);
	ДанныеЛиста.Вставить("КоэфЭколЗначДляВоздуха", КоэфЭколЗначДляВоздуха);
	
	ДанныеЛиста.Вставить("ОКАТОРасчет",            ДанныеЛиста.ОКАТО1);
	ДанныеЛиста.Вставить("КБКРасчет",              ДанныеЛиста.КБК1);
	ДанныеЛиста.Вставить("СуммаБезЛьготРасчет",    ДанныеЛиста.СуммаБезЛьгот1);
	ДанныеЛиста.Вставить("СуммаСтрока31",          ДанныеЛиста.Сумма031);
	ДанныеЛиста.Вставить("СуммаСтрока32",          ДанныеЛиста.Сумма032);
	ДанныеЛиста.Вставить("СуммаСтрока33",          ДанныеЛиста.Сумма033);
	ДанныеЛиста.Вставить("СуммаСтрока34",          ДанныеЛиста.Сумма034);
	ДанныеЛиста.Вставить("СуммаСтрока35",          ДанныеЛиста.Сумма035);
	ДанныеЛиста.Вставить("СуммаСтрока36",          ДанныеЛиста.Сумма036);
	ДанныеЛиста.Вставить("СуммаСтрока37",          ДанныеЛиста.Сумма037);
	ДанныеЛиста.Вставить("СуммаСтрока38",          ДанныеЛиста.Сумма038);
	ДанныеЛиста.Вставить("СуммаСтрока39",          ДанныеЛиста.Сумма039);
	ДанныеЛиста.Вставить("СуммаЗачетРасчет",       ДанныеЛиста.СуммаЗачет1);
	ДанныеЛиста.Вставить("СуммаЛьготОргСоцРасчет", ДанныеЛиста.СуммаЛьготОргСоц1);
	ДанныеЛиста.Вставить("СуммаЛьготОргРасчет",    ДанныеЛиста.СуммаЛьготОрг1);
	ДанныеЛиста.Вставить("СуммаПлатРасчет",        ДанныеЛиста.СуммаПлат1);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПрисоединенныйФайл(ДанныеЛиста)
	UID_файла = Неопределено;
	ДанныеЛиста.Свойство("UID_файла", UID_файла);
	Если ЗначениеЗаполнено(UID_файла) Тогда
		ПрисоединенныеФайлыСоответствие = ДанныеФайловРазделов.Получить();
		Если ТипЗнч(ПрисоединенныеФайлыСоответствие) <> Тип("Соответствие") 
			Или ПрисоединенныеФайлыСоответствие.Получить(UID_файла) = Неопределено Тогда 
			
			ДанныеЛиста.Вставить("ATTACH", "");
		Иначе 
						
			КаталогВремФайлов = "";
			ИмяФайла = ПрисоединенныеФайлыСоответствие[UID_файла].Имя;
			ИмяПрисоединенногоФайла = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПолноеИмяВременногоФайла(
																			КаталогВремФайлов, ИмяФайла, Истина);
	
	        ПрисоединенныеФайлыСоответствие[UID_файла].ДД.Записать(ИмяПрисоединенногоФайла);
			
			НовыйАрхивИмя = ПолучитьИмяВременногоФайла();
			НовыйАрхив = Новый ЗаписьZIPФайла(НовыйАрхивИмя,,,МетодСжатияZIP.Копирование);
			НовыйАрхив.Добавить(ИмяПрисоединенногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути);
			НовыйАрхив.Записать();
			
			МассивДляУдаления = Новый Массив;
			МассивДляУдаления.Добавить(ИмяПрисоединенногоФайла);
			
		
			ДанныеАрхива = Новый ДвоичныеДанные(НовыйАрхивИмя);
			Base64СтрокаДанныеАрхива = СтрЗаменить(Base64Строка(ДанныеАрхива), Символы.ПС, "");
			Base64СтрокаДанныеАрхива = СтрЗаменить(Base64СтрокаДанныеАрхива, Символы.ВК, "");
			
			МассивДляУдаления.Добавить(НовыйАрхивИмя);
			Для Каждого ФайлДляУдаления Из МассивДляУдаления Цикл 
				УдалитьФайлы(ФайлДляУдаления);
			КонецЦикла;
			УдалитьФайлы(КаталогВремФайлов);
				
			ДанныеЛиста.Вставить("ATTACH", Base64СтрокаДанныеАрхива);
			
		КонецЕсли;
	Иначе 
		ДанныеЛиста.Вставить("ATTACH", "");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиВРаздел1(ДанныеЛиста, ИндексЛиста)
	
	ЗагрузитьПоказателиИзМакета("ВредныеВеществаРаздел1");

	ДопКоэф2  = 0;
	ДопКоэф12 = 0;
	
	Для каждого Показатель Из ДанныеЛиста Цикл
		
		Если Лев(Показатель.Ключ, 14) = "П000010001002_" Тогда
			Если НЕ ЗначениеЗаполнено(Показатель.Значение) Тогда
				ДанныеЛиста["П000010001012" + Сред(Показатель.Ключ, 14)] = 0;
			КонецЕсли;
			КодЗагрязняющегоВещества = 0;
			Если ЗначениеЗаполнено(Показатель.Значение) Тогда
				РезультатПоиска = мВредныеВеществаРаздел1.НайтиСтроки(Новый Структура("Название", Формат(Показатель.Значение)));
				Если РезультатПоиска.Количество() > 0 Тогда
					КодЗагрязняющегоВещества = 0 + Формат(РезультатПоиска[0].Код);
				КонецЕсли;
			КонецЕсли;
			ДанныеЛиста.Вставить("К" + Показатель.Ключ, КодЗагрязняющегоВещества);
		ИначеЕсли Лев(Показатель.Ключ, 14) = "П000010001014_" Тогда
			ДопКоэф2 = ?(ЗначениеЗаполнено(Показатель.Значение), Показатель.Значение, ДопКоэф2);
		ИначеЕсли Лев(Показатель.Ключ, 14) = "П000010001015_" Тогда
			ДопКоэф12 = ?(ЗначениеЗаполнено(Показатель.Значение), Показатель.Значение, ДопКоэф12);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЛиста.Вставить("П000010002014", ДопКоэф2);
	ДанныеЛиста.Вставить("П000010002015", ДопКоэф12);
	
	ДанныеЛиста.Вставить("ДП000010000001", ?(ЗначениеЗаполнено(ДанныеЛиста.П000010000002), Формат(ДанныеЛиста.П000010000001, "ДФ=yyyy-MM-dd"), ""));
	ДанныеЛиста.Вставить("ДП000010000003", ?(ЗначениеЗаполнено(ДанныеЛиста.П000010000002), Формат(ДанныеЛиста.П000010000003, "ДФ=yyyy-MM-dd"), ""));
	
	ДобавитьПрисоединенныйФайл(ДанныеЛиста);
	
	ИДРаздела = Прав(СтрЗаменить(СтруктураРеквизитовФормы.мСохраненныйДок.УникальныйИдентификатор(), "-", "0"), 17);
	
	ИДИсточникаВыбросов = "";
	Если ЗначениеЗаполнено(ДанныеЛиста.ПоПроизТерр) Тогда
		ИДИсточникаВыбросов = ИДРаздела + "1" + Формат(ДанныеЛиста.ОКАТО, "ЧЦ=11; ЧВН=; ЧН=; ЧГ=") + Формат(ИндексЛиста, "ЧЦ=3; ЧН=; ЧВН=");
	КонецЕсли;
	ДанныеЛиста.Вставить("ИДИсточникаВыбросов",  ИДИсточникаВыбросов);
	
	ИДРазрешенияНаВыброс = "";
	Если ЗначениеЗаполнено(ДанныеЛиста.П000010000002) Тогда
		ИДРазрешенияНаВыброс = ИДРаздела + "5" + Формат(ДанныеЛиста.ОКАТО, "ЧЦ=11; ЧВН=; ЧН=; ЧГ=") + Формат(ИндексЛиста, "ЧЦ=3; ЧН=; ЧВН=");
	КонецЕсли;
	ДанныеЛиста.Вставить("ИДРазрешенияНаВыброс", ИДРазрешенияНаВыброс);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиВРаздел2(ДанныеЛиста, ИндексЛиста)
	
	ЗагрузитьПоказателиИзМакета("НормативыПлатыРаздел2");
	
	Для каждого Показатель Из ДанныеЛиста Цикл
		Если Лев(Показатель.Ключ, 14) = "П000020001002_" Тогда
			
			КодВидаТоплива = "";
			Для каждого СтрокаТаблицы Из мНормативыПлатыРаздел2 Цикл
				Если ЗначениеЗаполнено(Показатель.Значение) И СтрНайти(СтрокаТаблицы.Название, СокрЛП(Показатель.Значение)) > 0 Тогда
					КодВидаТоплива = Формат(СтрокаТаблицы.Кратко);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеЛиста.Вставить("К" + Показатель.Ключ, КодВидаТоплива);
			
		КонецЕсли;
	КонецЦикла;
	
	ИДРаздела = Прав(СтрЗаменить(СтруктураРеквизитовФормы.мСохраненныйДок.УникальныйИдентификатор(), "-", "0"), 17);
	ИДИсточникаВыбросов = ИДРаздела + "2" + Формат(ДанныеЛиста.ОКАТО, "ЧЦ=11; ЧВН=; ЧН=; ЧГ=") + Формат(ИндексЛиста, "ЧЦ=3; ЧН=; ЧВН=");
	ДанныеЛиста.Вставить("ИДИсточникаВыбросов", "");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиВРаздел3(ДанныеЛиста, ИндексЛиста)
	
	ЗагрузитьПоказателиИзМакета("ВредныеВеществаРаздел3");
	
	КоэфЭколЗнач = 0;
	ДопКоэф2     = 0;
	
	Для каждого Показатель Из ДанныеЛиста Цикл
		
		Если Лев(Показатель.Ключ, 14) = "П000030001002_" Тогда
			Если НЕ ЗначениеЗаполнено(Показатель.Значение) Тогда
				ДанныеЛиста["П000030001011" + Сред(Показатель.Ключ, 14)] = 0;
			КонецЕсли;
			КодЗагрязняющегоВещества = 0;
			Если ЗначениеЗаполнено(Показатель.Значение) Тогда
				РезультатПоиска = мВредныеВеществаРаздел3.НайтиСтроки(Новый Структура("Название", Формат(Показатель.Значение)));
				Если РезультатПоиска.Количество() > 0 Тогда
					КодЗагрязняющегоВещества = 0 + Формат(РезультатПоиска[0].Код);
				КонецЕсли;
			КонецЕсли;
			ДанныеЛиста.Вставить("К" + Показатель.Ключ, КодЗагрязняющегоВещества);
		ИначеЕсли Лев(Показатель.Ключ, 14) = "П000030001012_" Тогда
			КоэфЭколЗнач = ?(ЗначениеЗаполнено(Показатель.Значение), Показатель.Значение, КоэфЭколЗнач);
		ИначеЕсли Лев(Показатель.Ключ, 14) = "П000030001013_" Тогда
			ДопКоэф2 = ?(ЗначениеЗаполнено(Показатель.Значение), Показатель.Значение, ДопКоэф2);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЛиста.Вставить("П000030002012", КоэфЭколЗнач);
	ДанныеЛиста.Вставить("П000030002013", ДопКоэф2);
	
	ДанныеЛиста.Вставить("ДП000030000001", ?(ЗначениеЗаполнено(ДанныеЛиста.П000030000002), Формат(ДанныеЛиста.П000030000001, "ДФ=yyyy-MM-dd"), ""));
	ДанныеЛиста.Вставить("ДП000030000003", ?(ЗначениеЗаполнено(ДанныеЛиста.П000030000002), Формат(ДанныеЛиста.П000030000003, "ДФ=yyyy-MM-dd"), ""));
	
	ДобавитьПрисоединенныйФайл(ДанныеЛиста);
	
	ИДРаздела = Прав(СтрЗаменить(СтруктураРеквизитовФормы.мСохраненныйДок.УникальныйИдентификатор(), "-", "0"), 17);
	
	ИДВыпуска = ИДРаздела + "3" + Формат(ДанныеЛиста.ОКАТО, "ЧЦ=11; ЧВН=; ЧН=; ЧГ=") + Формат(ИндексЛиста, "ЧЦ=3; ЧН=; ЧВН=");
	ДанныеЛиста.Вставить("ИДВыпуска", ИДВыпуска);
	
	ИДРазрешенияНаСброс = "";
	Если ЗначениеЗаполнено(ДанныеЛиста.П000030000002) Тогда
		ИДРазрешенияНаСброс = ИДРаздела + "7" + Формат(ДанныеЛиста.ОКАТО, "ЧЦ=11; ЧВН=; ЧН=; ЧГ=") + Формат(ИндексЛиста, "ЧЦ=3; ЧН=; ЧВН=");
	КонецЕсли;
	ДанныеЛиста.Вставить("ИДРазрешенияНаСброс", ИДРазрешенияНаСброс);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиВРаздел4(ДанныеЛиста, ИндексЛиста)
	
	ЛистыМногостраничногоРаздела5 = Неопределено;
	мДанныеОтчета.Свойство("ПолеТабличногоДокументаРаздел5", ЛистыМногостраничногоРаздела5);
	ДанныеЛистаРаздела5 = Неопределено;
	Если ЛистыМногостраничногоРаздела5 <> Неопределено Тогда
		Если ЛистыМногостраничногоРаздела5.Количество() > ИндексЛиста Тогда
			ДанныеЛистаРаздела5 = ЛистыМногостраничногоРаздела5[ИндексЛиста].Данные[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ДопКоэффициент2       = 0;
	КоэфМестаРасположения = 0;
	
	НомСтр = 1;
	Пока ДанныеЛиста.Свойство("П000040001003_" + Формат(НомСтр, "ЧГ=")) Цикл
		
		Для ИндКол = 17 По 27 Цикл
			ИзмЧастьПоказателя = "00010" + Формат(ИндКол) + "_" + Формат(НомСтр, "ЧГ=");
			ЗначениеПоказателя = 0;
			Если ДанныеЛистаРаздела5 <> Неопределено И НЕ ДанныеЛистаРаздела5.Свойство("П00005" + ИзмЧастьПоказателя, ЗначениеПоказателя) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;
			ДанныеЛиста.Вставить("П00004" + ИзмЧастьПоказателя, ЗначениеПоказателя);
		КонецЦикла;
		
		ДопКоэффициент2 = ?(ЗначениеЗаполнено(ДанныеЛиста["П000040001022_" + Формат(НомСтр, "ЧГ=")]),
			ДанныеЛиста["П000040001022_" + Формат(НомСтр, "ЧГ=")], ДопКоэффициент2);
		КоэфМестаРасположения = ?(ЗначениеЗаполнено(ДанныеЛиста["П000040001024_" + Формат(НомСтр, "ЧГ=")]),
			ДанныеЛиста["П000040001024_" + Формат(НомСтр, "ЧГ=")], КоэфМестаРасположения);
			
		Если НЕ ЗначениеЗаполнено(ДанныеЛиста["П000040001002_" + Формат(НомСтр, "ЧГ=")]) Тогда
			ДанныеЛиста["П000040001020_" + Формат(НомСтр, "ЧГ=")] = 0;
		КонецЕсли;
		
		СтрКлассОпасности = ДанныеЛиста["П000040001005_" + Формат(НомСтр, "ЧГ=")];
		КлассОпасности = 0;
		Если СтрНайти(СтрКлассОпасности, "IV") > 0 Тогда
			КлассОпасности = 4;
		ИначеЕсли СтрНайти(СтрКлассОпасности, "III") > 0 Тогда
			КлассОпасности = 3;
		ИначеЕсли СтрНайти(СтрКлассОпасности,  "II") > 0 Тогда
			КлассОпасности = 2;
		ИначеЕсли СтрНайти(СтрКлассОпасности,  "I") > 0 Тогда
			КлассОпасности = 1;
		ИначеЕсли СтрНайти(СтрКлассОпасности,  "V") > 0 Тогда
			КлассОпасности = 5;
		КонецЕсли;
		ДанныеЛиста.Вставить("КП000040001005_" + Формат(НомСтр, "ЧГ="), КлассОпасности);
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	ДанныеЛиста.Вставить("П000040002022", ДопКоэффициент2);
	ДанныеЛиста.Вставить("П000040002024", КоэфМестаРасположения);
	ДобавитьПрисоединенныйФайл(ДанныеЛиста);
	
	Для ИндКол = 25 По 27 Цикл
		ЗначениеПоказателя = 0;
		Если ДанныеЛистаРаздела5 <> Неопределено И НЕ ДанныеЛистаРаздела5.Свойство("П0000500020" + Формат(ИндКол), ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = 0;
		КонецЕсли;
		ДанныеЛиста.Вставить("П0000400020" + Формат(ИндКол), ЗначениеПоказателя);
	КонецЦикла;
	
	ДанныеЛиста.Вставить("ПризнакПромЗоны", ?(ЗначениеЗаполнено(ДанныеЛиста.Объект1), "true", "false"));
	ДанныеЛиста.Вставить("ПризнакСпецПолигона", ?(ЗначениеЗаполнено(ДанныеЛиста.Объект3), "true", "false"));
	
	ДанныеЛиста.Вставить("ДП000040000001", ?(ЗначениеЗаполнено(ДанныеЛиста.П000040000002), Формат(ДанныеЛиста.П000040000001, "ДФ=yyyy-MM-dd"), ""));
	ДанныеЛиста.Вставить("ДП000040000003", ?(ЗначениеЗаполнено(ДанныеЛиста.П000040000002), Формат(ДанныеЛиста.П000040000003, "ДФ=yyyy-MM-dd"), ""));
	
	ИДРаздела = Прав(СтрЗаменить(СтруктураРеквизитовФормы.мСохраненныйДок.УникальныйИдентификатор(), "-", "0"), 17);
	
	ИДОбъектаРО = ИДРаздела + "4" + Формат(ДанныеЛиста.ОКАТО, "ЧЦ=11; ЧВН=; ЧН=; ЧГ=") + Формат(ИндексЛиста, "ЧЦ=3; ЧН=; ЧВН=");
	ДанныеЛиста.Вставить("ИДОбъектаРО", "");
	
	ИДЛимитаОтходов = "";
	Если ЗначениеЗаполнено(ДанныеЛиста.П000040000002) Тогда
		ИДЛимитаОтходов = ИДРаздела + "8" + Формат(ДанныеЛиста.ОКАТО, "ЧЦ=11; ЧВН=; ЧН=; ЧГ=") + Формат(ИндексЛиста, "ЧЦ=3; ЧН=; ЧВН=");
	КонецЕсли;
	ДанныеЛиста.Вставить("ИДЛимитаОтходов", ИДЛимитаОтходов);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	РегламентированнаяОтчетность.ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("utf-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
	
	Перем ПолученноеЗначение;
	
	ИмяФайлаXML = ?(ПустаяСтрока(ПараметрыВыгрузки.ДиапазонОКАТО), "", ПараметрыВыгрузки.ДиапазонОКАТО + "_") + "рсч_"
				+ Лев(ПараметрыВыгрузки.НаименованиеОрг, 25) + "_"
				+ ПараметрыВыгрузки.ОтчетныйГод + "_"
				+ ПараметрыВыгрузки.ОтчетныйПериод + " " + "квартал_"
				+ ?(ПараметрыВыгрузки.ВидРасчета = "1", "", "кор_")
				+ СтрЗаменить(СтрЗаменить(СтрЗаменить(ПараметрыВыгрузки.ДатаФормирования, " ", "_"), ".", "-"), ":", "-")
				+ ".xml";
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
			Если Раздел.Ключ = "Раздел4" Тогда
				Для каждого ПоказательРаздела Из Лист.Данные[0].Значение Цикл
					Если СтрНайти(ПоказательРаздела.Ключ, "П000040001003") > 0 Тогда
						ЗначениеПоказателя = СтрЗаменить(СтрЗаменить(ПоказательРаздела.Значение, " ", ""), Символы.НПП, "");
						Лист.Данные[0].Значение.Вставить(ПоказательРаздела.Ключ, ЗначениеПоказателя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		мДанныеОтчета.Вставить("ПолеТабличногоДокумента" + Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	мДанныеОтчета.Вставить("ОКАТОФильтр", "");
	
КонецФункции

&НаСервере
Функция СформироватьПредставлениеПрисоединенныеФайлы()
	Если ТипЗнч(ДанныеФайлов) <> Тип("ХранилищеЗначения") Тогда 
		Возврат "";
	КонецЕсли;
	ПрисоединенныеФайлыМассив = ДанныеФайлов.Получить();
	Если ТипЗнч(ПрисоединенныеФайлыМассив) <> Тип("Массив") 
		Или ПрисоединенныеФайлыМассив.Количество() = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	КаталогВремФайлов = "";
	
	НовыйАрхивИмя = ПолучитьИмяВременногоФайла();
	НовыйАрхив = Новый ЗаписьZIPФайла(НовыйАрхивИмя,,,МетодСжатияZIP.Копирование);
	
	МассивДляУдаления = Новый Массив;
	Для Каждого ПрисоединенныйФайл Из ПрисоединенныеФайлыМассив Цикл
		
		ИмяФайла = ПрисоединенныйФайл.Имя;
		ИмяПрисоединенногоФайла = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПолноеИмяВременногоФайла(
																		КаталогВремФайлов, ИмяФайла, Истина);
		ПрисоединенныйФайл.ДД.Записать(ИмяПрисоединенногоФайла);
		
		НовыйАрхив.Добавить(ИмяПрисоединенногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути);
		
		МассивДляУдаления.Добавить(ИмяПрисоединенногоФайла);
		
	КонецЦикла;
	НовыйАрхив.Записать();
	
	ДанныеАрхива = Новый ДвоичныеДанные(НовыйАрхивИмя);
	Base64СтрокаДанныеАрхива = СтрЗаменить(Base64Строка(ДанныеАрхива), Символы.ПС, "");
	Base64СтрокаДанныеАрхива = СтрЗаменить(Base64СтрокаДанныеАрхива, Символы.ВК, "");
	
	МассивДляУдаления.Добавить(НовыйАрхивИмя);
	Для Каждого ФайлДляУдаления Из МассивДляУдаления Цикл 
		УдалитьФайлы(ФайлДляУдаления);
	КонецЦикла;
	УдалитьФайлы(КаталогВремФайлов);
	
	Возврат Base64СтрокаДанныеАрхива;
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокументТитульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ЗагрузитьПоказателиИзМакета("ОрганыРПН");
	
	СтрокаСведений = "ОКАТО, ОКТМО, ОКПО, ОГРН, ТипНП, ДатаРегистрации, ИННЮЛ, КППЮЛ, НаимЮЛПол, АдрЮР, АдрФакт, АдрПочт, ";
	СтрокаСведений = СтрокаСведений + "ОргИндекс, ОргСубъект, ОргРайон, ОргГород, ОргУлица, ОргДом, ОргКорпус, ОргКвартира, ";
	СтрокаСведений = СтрокаСведений + "БанкСчетНомер, БанкСчетНаимБанка, БанкСчетКоррСчетБанка, БанкСчетБИКБанка, ";
	СтрокаСведений = СтрокаСведений + "ТелОрганизации, ФаксОрганизации, ЭлектроннаяПочта, ФИОРук, ТелРук, ФИОБух, ТелБух";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ЭтоКорректирующийРасчет = НЕ ПустаяСтрока(ТабДокументТитульный.Корректировка);
	
	Если ЭтоКорректирующийРасчет Тогда
		ПараметрыВыгрузки.Вставить("ВидРасчета",       "2");
		ПараметрыВыгрузки.Вставить("НомКорректировки", СокрЛП(ТабДокументТитульный.НомКоррект));
	Иначе
		ПараметрыВыгрузки.Вставить("ВидРасчета",       "1");
		ПараметрыВыгрузки.Вставить("НомКорректировки", "");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПредставляетсяВ", ТабДокументТитульный.ПредставляетсяВ);
	
	РезультатПоиска = мОрганыРПН.НайтиСтроки(Новый Структура("Название", Формат(ТабДокументТитульный.ПредставляетсяВ)));
	Если РезультатПоиска.Количество() = 0 Тогда
		ПараметрыВыгрузки.Вставить("КодПредставляетсяВ", "");
		ПараметрыВыгрузки.Вставить("ДиапазонОКАТО", "");
	Иначе
		ПараметрыВыгрузки.Вставить("КодПредставляетсяВ", Формат(РезультатПоиска[0].Код));
		ПараметрыВыгрузки.Вставить("ДиапазонОКАТО", Формат(РезультатПоиска[0].ДиапазонОКАТО));
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ДатаФормирования", Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
	ПараметрыВыгрузки.Вставить("ОтчетныйГод",      СокрЛП(ТабДокументТитульный.ГодОтчета));
	ПараметрыВыгрузки.Вставить("ОтчетныйПериод",   СокрЛП(ТабДокументТитульный.НомерКвартала));
	
	ПараметрыВыгрузки.Вставить("ИдентификаторДок", СтрЗаменить(СтруктураРеквизитовФормы.мСохраненныйДок.УникальныйИдентификатор(), "-", "0"));
	ПараметрыВыгрузки.Вставить("ИдентификаторОрг", СтрЗаменить(СтруктураРеквизитовФормы.Организация.УникальныйИдентификатор(), "-", "0"));
	НаименованиеОрг = "";
	Для Ном = 1 По СтрДлина(СтруктураРеквизитовФормы.Организация.Наименование) Цикл
		Сим = Сред(СтруктураРеквизитовФормы.Организация.Наименование, Ном, 1);
		Если СтрНайти("[/?\:*""><|]';", Сим) = 0 Тогда
			НаименованиеОрг = НаименованиеОрг + Сим;
		КонецЕсли;
	КонецЦикла;
	ПараметрыВыгрузки.Вставить("НаименованиеОрг", СокрЛП(НаименованиеОрг));
	ПараметрыВыгрузки.Вставить("ПолнНаименованиеОрг", СокрЛП(СведенияОбОрганизации.НаимЮЛПол));
	
	ПараметрыВыгрузки.Вставить("ПризнакИЛ", ?(СведенияОбОрганизации.ТипНП = 5, "true", "false"));
	ПараметрыВыгрузки.Вставить("ПризнакОП", ?(СведенияОбОрганизации.ТипНП = 2, "true", "false"));
	ПараметрыВыгрузки.Вставить("КодВП", "");
	ПараметрыВыгрузки.Вставить("ДатаРегистрации", Формат(СведенияОбОрганизации.ДатаРегистрации, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("ДатаПодписиДок",  Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("ОГРН",         СокрЛП(СведенияОбОрганизации.ОГРН));
	ПараметрыВыгрузки.Вставить("ОргДиректор",  СокрЛП(?(СведенияОбОрганизации.ТипНП <> 2, ТабДокументТитульный.ОргДиректор, ТабДокументТитульный.ОргДиректорОбособ)));
	ПараметрыВыгрузки.Вставить("ОргБухгалтер", СокрЛП(?(СведенияОбОрганизации.ТипНП <> 2, ТабДокументТитульный.ОргБухгалтер, ТабДокументТитульный.ОргБухгалтерОбособ)));
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-12-01' Тогда
		ПараметрыВыгрузки.Вставить("ОКАТО", СокрЛП(СведенияОбОрганизации.ОКТМО));
	Иначе
		ПараметрыВыгрузки.Вставить("ОКАТО", СокрЛП(СведенияОбОрганизации.ОКАТО));
	КонецЕсли;
		
	ПараметрыВыгрузки.Вставить("ИННЮЛ", СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ПараметрыВыгрузки.Вставить("КППЮЛ", СокрЛП(СведенияОбОрганизации.КППЮЛ));
	ПараметрыВыгрузки.Вставить("ОКПО",  СокрЛП(СведенияОбОрганизации.ОКПО));
	
	ПараметрыВыгрузки.Вставить("ФИОРук", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ТелРук", СокрЛП(СведенияОбОрганизации.ТелРук));
	ПараметрыВыгрузки.Вставить("ФИОБух", СокрЛП(СведенияОбОрганизации.ФИОБух));
	ПараметрыВыгрузки.Вставить("ТелБух", СокрЛП(СведенияОбОрганизации.ТелБух));
	
	ПараметрыВыгрузки.Вставить("АдрЮРИндекс", СокрЛП(СведенияОбОрганизации.ОргИндекс));
	
	АдрЮРНасПункт = СокрЛП(СведенияОбОрганизации.ОргСубъект);
	АдрЮРНасПункт = АдрЮРНасПункт + ?(ПустаяСтрока(АдрЮРНасПункт) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргРайон), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргРайон);
	АдрЮРНасПункт = АдрЮРНасПункт + ?(ПустаяСтрока(АдрЮРНасПункт) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргГород), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргГород);
	ПараметрыВыгрузки.Вставить("АдрЮРНасПункт", АдрЮРНасПункт);
	
	АдрЮРУлицаДом = СокрЛП(СведенияОбОрганизации.ОргУлица);
	АдрЮРУлицаДом = АдрЮРУлицаДом + ?(ПустаяСтрока(АдрЮРУлицаДом) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргДом), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргДом);
	АдрЮРУлицаДом = АдрЮРУлицаДом + ?(ПустаяСтрока(АдрЮРУлицаДом) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргКорпус), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргКорпус);
	АдрЮРУлицаДом = АдрЮРУлицаДом + ?(ПустаяСтрока(АдрЮРУлицаДом) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргКвартира), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргКвартира);
	ПараметрыВыгрузки.Вставить("АдрЮРУлицаДом", АдрЮРУлицаДом);
	
	ПараметрыВыгрузки.Вставить("АдрЮР2",  ?(ЗначениеЗаполнено(СтрЗаменить(СведенияОбОрганизации.АдрЮР, ",","")),
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрЮР),   ""));
	ПараметрыВыгрузки.Вставить("АдрФакт", ?(ЗначениеЗаполнено(СтрЗаменить(СведенияОбОрганизации.АдрФакт, ",","")),
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрФакт), ""));
	ПараметрыВыгрузки.Вставить("АдрПочт", ?(ЗначениеЗаполнено(СтрЗаменить(СведенияОбОрганизации.АдрПочт, ",","")),
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрПочт), ""));
		
	ПараметрыВыгрузки.Вставить("ТелОрганизации2",       СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("ФаксОрганизации",       СокрЛП(СведенияОбОрганизации.ФаксОрганизации));
	ПараметрыВыгрузки.Вставить("ЭлектроннаяПочта",      СокрЛП(СведенияОбОрганизации.ЭлектроннаяПочта));
	ПараметрыВыгрузки.Вставить("БанкСчетНомер",         СокрЛП(СведенияОбОрганизации.БанкСчетНомер));
	ПараметрыВыгрузки.Вставить("БанкСчетНаимБанка",     СокрЛП(СведенияОбОрганизации.БанкСчетНаимБанка));
	ПараметрыВыгрузки.Вставить("БанкСчетКоррСчетБанка", СокрЛП(СведенияОбОрганизации.БанкСчетКоррСчетБанка));
	ПараметрыВыгрузки.Вставить("БанкСчетБИКБанка",      СокрЛП(СведенияОбОрганизации.БанкСчетБИКБанка));
		
	ПараметрыВыгрузки.Вставить("ОКВЭД", "");
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ID_ORG");
	ПараметрыВыгрузки.Вставить("ATTACH", СформироватьПредставлениеПрисоединенныеФайлы());
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ПараметрыВыгрузки.ОКВЭД);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьПакет(Команда)
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохранения", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЭДО", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеВыгрузкиПакета", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВРПН(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеВыгрузкиПакета(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайлаПакета = Результат.РезультатВыгрузки;
	
	Если ЗначениеЗаполнено(ИмяВременногоФайлаПакета) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.СохранитьФайлНаКлиенте(ИмяВременногоФайлаПакета, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при выгрузке пакета'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ОТЧЕТА В РПН

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "РПН");
	
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "РПН");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку5" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя1 = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		ТестовоеИмя2 = ИмяГруппы + "15_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			(ТабличныйДокумент.Области.Найти(ТестовоеИмя1) <> Неопределено Или ТабличныйДокумент.Области.Найти(ТестовоеИмя2) <> Неопределено) Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции